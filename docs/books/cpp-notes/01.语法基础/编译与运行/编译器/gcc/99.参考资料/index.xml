<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>99.参考资料 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E7%BC%96%E8%AF%91%E5%99%A8/gcc/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <atom:link href="https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E7%BC%96%E8%AF%91%E5%99%A8/gcc/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml" />
    <description>99.参考资料</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>99.参考资料</title>
      <link>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E7%BC%96%E8%AF%91%E5%99%A8/gcc/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
    </image>
    
    <item>
      <title>2023-详解 C C&#43;&#43; 代码的预处理、编译、汇编、链接全过程</title>
      <link>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E7%BC%96%E8%AF%91%E5%99%A8/gcc/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2023-%E8%AF%A6%E8%A7%A3-c-c&#43;&#43;-%E4%BB%A3%E7%A0%81%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86%E7%BC%96%E8%AF%91%E6%B1%87%E7%BC%96%E9%93%BE%E6%8E%A5%E5%85%A8%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E7%BC%96%E8%AF%91%E5%99%A8/gcc/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2023-%E8%AF%A6%E8%A7%A3-c-c&#43;&#43;-%E4%BB%A3%E7%A0%81%E7%9A%84%E9%A2%84%E5%A4%84%E7%90%86%E7%BC%96%E8%AF%91%E6%B1%87%E7%BC%96%E9%93%BE%E6%8E%A5%E5%85%A8%E8%BF%87%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;详解-cc-代码的预处理编译汇编链接全过程&#34;&gt;详解 C/C++ 代码的预处理、编译、汇编、链接全过程&lt;/h1&gt;
&lt;h2 id=&#34;1-cc运行的四个步骤&#34;&gt;1. C/C++运行的四个步骤&lt;/h2&gt;
&lt;p&gt;编写完成一个 C/C++程序后，想要运行起来，必须要经过四个步骤：预处理、编译、&lt;a href=&#34;https://so.csdn.net/so/search?q=%e6%b1%87%e7%bc%96&amp;amp;spm=1001.2101.3001.7020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;汇编&lt;/a&gt;和链接。每个步骤都会生成对应的文件，如下图所示（注意后缀名）：

















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/fa706acb048142a296a391bf2dff6dff.png&#34; alt=&#34;C/C&amp;#43;&amp;#43;编译全过程&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;
&lt;strong&gt;第 3 节&lt;/strong&gt;将通过一个简易 C++工程演示图中的全过程，并解释细节。&lt;/p&gt;
&lt;h2 id=&#34;2名词解释&#34;&gt;2.名词解释&lt;/h2&gt;
&lt;p&gt;为了后面过程的介绍更方便，这里对 C++&lt;a href=&#34;https://so.csdn.net/so/search?q=%e7%bc%96%e8%af%91%e8%bf%87%e7%a8%8b&amp;amp;spm=1001.2101.3001.7020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;编译过程&lt;/a&gt;中涉及的一些常用名词进行解释。&lt;/p&gt;
&lt;h3 id=&#34;21-gccgnuhttpssocsdnnetsosearchqgnuspm1001210130017020gcc-与-g&#34;&gt;2.1 GCC、&lt;a href=&#34;https://so.csdn.net/so/search?q=GNU&amp;amp;spm=1001.2101.3001.7020&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GNU&lt;/a&gt;、gcc 与 g++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;GNU：一个操作系统，具体内容不重要，感兴趣可以参考：&lt;a href=&#34;https://blog.csdn.net/qq_43617936/article/details/104504992&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCC、GNU 到底啥意思？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCC&lt;/strong&gt;：GNU Compiler Collection（GNU 编译器集合）的缩写，可以理解为一组 GNU 操作系统中的编译器集合，可以用于编译 C、C++、Java、Go、Fortan、Pascal、Objective-C 等语言。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gcc&lt;/strong&gt;：GCC（编译器集合）中的 GNU C Compiler(C 编译器)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;g++&lt;/strong&gt;：GCC（编译器集合）中的 GNU C++ Compiler(C++ 编译器)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;简单来说，gcc 调用了 GCC 中的 C Compiler，而 g++调用了 GCC 中的 C++ Compiler。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于 &lt;code&gt;*.c&lt;/code&gt; 和 &lt;code&gt;*.cpp&lt;/code&gt; 文件，gcc 分别当作 c 和 cpp 文件编译，而 g++则统一当作 cpp 文件编译。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-代码编译命令&#34;&gt;2.2 代码编译命令&lt;/h3&gt;
&lt;p&gt;gcc/g++常用命令：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;指令选项&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-E（注意大写）&lt;/td&gt;
&lt;td&gt;预处理(Preprocess)指定的源文件，但不进行编译(Compile)，这一步生成 &lt;code&gt;*.i&lt;/code&gt; 文本文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-S（注意大写）&lt;/td&gt;
&lt;td&gt;编译指定的源文件，但不进行汇编(Assemble)，这一步生成 &lt;code&gt;*.s&lt;/code&gt; 汇编文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-c&lt;/td&gt;
&lt;td&gt;编译、汇编指定的源文件，但不进行链接(Link)，这一步生成 &lt;code&gt;*.o&lt;/code&gt; 目标文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-o&lt;/td&gt;
&lt;td&gt;指定生成文件的文件名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-I lib&lt;/td&gt;
&lt;td&gt;lib 表示库文件或头文件目录，该指令选项用于手动链接程序可以调用的库文件、头文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-std=&lt;/td&gt;
&lt;td&gt;手动指定编程语言标准，如 -std=c++98、-std=c++11 等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;23-gdbgdb&#34;&gt;2.3 GDB(gdb)&lt;/h3&gt;
&lt;p&gt;GDB（gdb）全称“GNU symbolic debugger”，是 Linux 下常用的程序调试器。
为了能够使用 gdb 调试，需要在代码编译的时候加上&lt;code&gt;-g&lt;/code&gt;，如&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;g++ -g -o test test.cpp
1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;本文中只演示从源代码生成可执行二进制文件的过程，暂不涉及调试过程。调试的配置会在另一篇文章中专门介绍。&lt;/p&gt;
&lt;h2 id=&#34;3-c编译过程详解&#34;&gt;3. C++编译过程详解&lt;/h2&gt;
&lt;p&gt;主要参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/suxia/p/14214982.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ 预编译，编译，汇编，链接&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[C/C++语言编译链接过程](&lt;a href=&#34;https://zhuanlan.zhihu.com/p/88255667#:~:text=C/C&amp;#43;&amp;#43;&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/88255667#:~:text=C/C++&lt;/a&gt;语言编译链接过程 1 1.预处理 (Preprocessing) 预处理用于将所有的#include 头文件以及宏定义替换成其真正的内容 ，预处理之后得到的仍然是文本文件，但文件体积会大很多。 &amp;hellip;,成最终的 可执行文件 (executable file)。 &amp;hellip; 5 5.数据和指令 )&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本节内容用下面的简单 C++工程做演示。示例的文件结构如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|—— include
	  |—— func.h
|—— src
	  |—— func.cpp
|—— main.cpp
12345
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，&lt;code&gt;main.cpp&lt;/code&gt;是主要代码，&lt;code&gt;include/func.h&lt;/code&gt;是自定义函数的头文件，&lt;code&gt;src/func.cpp&lt;/code&gt;是函数的具体实现&lt;/p&gt;
&lt;p&gt;各个文件的内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// main.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;func.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a + b = &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;12345678910111213&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// func.h
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef FUNC_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define FUNC_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1234567&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// func.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;#34;func.h&amp;#34;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;123456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;31-预处理preprocess&#34;&gt;3.1 预处理（Preprocess）&lt;/h3&gt;
&lt;p&gt;预处理，顾名思义就是编译前的一些准备工作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;预编译把一些&lt;code&gt;#define&lt;/code&gt;的宏定义完成文本替换，然后将&lt;/strong&gt;&lt;code&gt;#include&lt;/code&gt;&lt;strong&gt;的文件里的内容复制到&lt;code&gt;.cpp&lt;/code&gt;文件里，如果&lt;code&gt;.h&lt;/code&gt;文件里还有&lt;code&gt;.h&lt;/code&gt;文件，就递归展开&lt;/strong&gt;。在预处理这一步，代码注释直接被忽略，不会进入到后续的处理中，所以注释在程序中不会执行。&lt;/p&gt;
&lt;p&gt;gcc/g++的预处理实质上是通过&lt;strong&gt;预处理器&lt;/strong&gt;&lt;code&gt;cpp&lt;/code&gt;（应该是 c preprocess 的缩写?）来完成的，所以我们既可以通过&lt;code&gt;g++ -E&lt;/code&gt;，也可以通过&lt;code&gt;cpp&lt;/code&gt;命令对&lt;code&gt;main.cpp&lt;/code&gt;进行预处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -E -I include/ main.cpp -o main.i
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 或者直接调用 cpp 命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpp -I include/ main.cpp -o main.i
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述命令中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g++ -E&lt;/code&gt; 是让编译器在预处理之后就退出，不进行后续编译过程，等价于&lt;code&gt;cpp&lt;/code&gt;指令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-I include/&lt;/code&gt;用于指定头文件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt;是要预处理的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o main.i&lt;/code&gt;用于指定生成的文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;预处理之后的程序格式为 &lt;code&gt;*.i&lt;/code&gt;，仍是文本文件，可以用任意文本编辑器打开。&lt;/p&gt;
&lt;p&gt;执行完预处理后的文件结构如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|—— include
	  |—— func.h
|—— src
	  |—— func.cpp
|—— main.cpp
|—— main.i
123456
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;32-编译compile&#34;&gt;3.2 编译（Compile）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;编译&lt;strong&gt;只是把我们写的代码转为汇编代码&lt;/strong&gt;，&lt;strong&gt;它的工作是检查词法和语法规则，所以，如果程序没有词法或则语法错误，那么不管逻辑是怎样错误的，都不会报错&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编译不是指程序从源文件到二进制程序的全部过程，而是指将经过预处理之后的程序转换成特定汇编代码(assembly code)的过程&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译的指令如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -S -I include/ main.cpp -o main.s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;与预处理类似，上述命令中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g++ -S&lt;/code&gt;是让编译器在编译之后停止，不进行后续过程&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-I include/&lt;/code&gt;用于指定头文件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt;是要编译的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o main.s&lt;/code&gt;用于指定生成的文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;编译完成后，会生成程序的&lt;strong&gt;汇编代码&lt;/strong&gt;&lt;code&gt;main.s&lt;/code&gt;，&lt;strong&gt;这也是文本文件&lt;/strong&gt;，可以直接用任意文本编辑器查看。&lt;/p&gt;
&lt;p&gt;执行完编译后的文件结构如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|—— include
	  |—— func.h
|—— src
	  |—— func.cpp
|—— main.cpp
|—— main.i
|—— main.s
1234567
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;33-汇编assemble&#34;&gt;3.3 汇编（Assemble）&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;汇编过程将上一步的&lt;strong&gt;汇编代码&lt;/strong&gt;(&lt;code&gt;main.s&lt;/code&gt;)&lt;strong&gt;转换成机器码&lt;/strong&gt;(machine code)，&lt;strong&gt;这一步产生的文件叫做目标文件&lt;/strong&gt;(&lt;code&gt;main.o&lt;/code&gt;)，&lt;strong&gt;是二进制格式&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;gcc/g++的汇编过程通过 &lt;code&gt;as&lt;/code&gt; 命令完成，所以我们可以通过&lt;code&gt;g++ -c&lt;/code&gt;或&lt;code&gt;as&lt;/code&gt;命令完成汇编：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -c -I include/ main.cpp -o main.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 或者直接调用 as 命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;as main.s -o main.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上述指令中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;g++ -c&lt;/code&gt;让编译器在汇编之后退出，等价于 &lt;code&gt;as&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-I include/&lt;/code&gt;仍是用于指定头文件目录&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.cpp&lt;/code&gt;是要汇编的源文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-o main.o&lt;/code&gt;用于指定生成的文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;汇编这一步需要为每一个源文件（本文示例代码中为&lt;code&gt;main.cpp&lt;/code&gt;、&lt;code&gt;func.cpp&lt;/code&gt;）产生一个目标文件。因此&lt;code&gt;func.cpp&lt;/code&gt;也需要执行一次这个汇编过程产生一个&lt;code&gt;func.o&lt;/code&gt;文件&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 可以用 g++ -c 命令一步生成 func.o&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -c -I include/ src/func.cpp -o src/func.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 当然也可以按照上面的预处理、编译、汇编三个步骤生成func.o&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;123&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;到了这一步，代码的文件结构如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;|—— include
	  |—— func.h
|—— src
	  |—— func.cpp
	  |—— func.o
|—— main.cpp
|—— main.i
|—— main.s
|—— main.o
123456789
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;34-链接link&#34;&gt;3.4 链接（Link）&lt;/h3&gt;
&lt;p&gt;C/C++代码经过汇编之后生成的&lt;strong&gt;目标文件(&lt;code&gt;\*.o&lt;/code&gt;)并不是最终的可执行二进制文件，而仍是一种中间文件(或称临时文件)，目标文件仍然需要经过链接(Link)才能变成可执行文件&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;既然目标文件和可执行文件的格式是一样的（都是二进制格式），为什么还要再链接一次呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;因为&lt;strong&gt;编译只是将我们自己写的代码变成了二进制形式，它还需要和系统组件（比如标准库、动态链接库等）结合起来，这些组件都是程序运行所必须的&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;链接（Link）其实就是一个“打包”的过程，它将所有二进制形式的目标文件(.o)和系统组件组合成一个可执行文件&lt;/strong&gt;。完成链接的过程也需要一个特殊的软件，叫做&lt;strong&gt;链接器（Linker）&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;此外需要注意的是：&lt;strong&gt;C++程序编译的时候其实只识别&lt;code&gt;.cpp&lt;/code&gt;文件，每个 cpp 文件都会分别编译一次，生成一个&lt;code&gt;.o&lt;/code&gt;文件。这个时候，链接器除了将目标文件和系统组件组合起来，还需要将编译器生成的多个&lt;code&gt;.o&lt;/code&gt;或者&lt;code&gt;.obj&lt;/code&gt;文件组合起来&lt;/strong&gt;，&lt;strong&gt;生成最终的可执行文件(Executable file)&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以本文中的代码为例，将&lt;code&gt;func.o&lt;/code&gt;和&lt;code&gt;main.o&lt;/code&gt;链接成可执行文件&lt;code&gt;main.out&lt;/code&gt;，指令如下:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ src/func.o main.o -o main.out
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-o main.out&lt;/code&gt;用于指定生成的可执行二进制文件名&lt;/li&gt;
&lt;li&gt;由于&lt;code&gt;g++&lt;/code&gt;自动链接了系统组件，所以我们只需要把自定义函数的目标文件与&lt;code&gt;main.o&lt;/code&gt;链接即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;运行&lt;code&gt;main.out&lt;/code&gt;，结果如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./main.out
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;a + &lt;span class=&#34;nv&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;35-小结&#34;&gt;3.5 小结&lt;/h3&gt;
&lt;p&gt;从上面的介绍可以看出，从 C++源代码到最终的可执行文件的中间过程并不简单。了解预处理、编译、汇编、链接各个步骤的作用有助于我们处理更加复杂的项目工程。&lt;/p&gt;
&lt;p&gt;不过也不必被这么麻烦的编译过程劝退，当我们编译简单&lt;code&gt;.cpp&lt;/code&gt;代码时，&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// hello.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello, world!&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mi&#34;&gt;12345678&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;仍然可以直接使用&lt;code&gt;g++&lt;/code&gt;命令生成可执行文件，而不必考虑中间过程：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ hello.cpp -o hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Hello, world!
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
