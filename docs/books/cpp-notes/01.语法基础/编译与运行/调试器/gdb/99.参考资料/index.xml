<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>99.参考资料 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E8%B0%83%E8%AF%95%E5%99%A8/gdb/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <atom:link href="https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E8%B0%83%E8%AF%95%E5%99%A8/gdb/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml" />
    <description>99.参考资料</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>99.参考资料</title>
      <link>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E8%B0%83%E8%AF%95%E5%99%A8/gdb/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
    </image>
    
    <item>
      <title>2021-GDB 调试指南</title>
      <link>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E8%B0%83%E8%AF%95%E5%99%A8/gdb/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2021-gdb-%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/%E8%B0%83%E8%AF%95%E5%99%A8/gdb/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2021-gdb-%E8%B0%83%E8%AF%95%E6%8C%87%E5%8D%97/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.yanbinghu.com/2019/04/20/41283.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;gdb-调试指南&#34;&gt;GDB 调试指南&lt;/h1&gt;
&lt;h1 id=&#34;启动调试&#34;&gt;启动调试&lt;/h1&gt;
&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;GDB（GNU Debugger）是 UNIX 及 UNIX-like 下的强大调试工具，可以调试 ada, c, c++, asm, minimal, d, fortran, objective-c, go, java,pascal 等语言。本文以 C 程序为例，介绍 GDB 启动调试的多种方式。&lt;/p&gt;
&lt;h2 id=&#34;哪类程序可被调试&#34;&gt;哪类程序可被调试&lt;/h2&gt;
&lt;p&gt;对于 C 程序来说，需要在编译时加上-g 参数，保留调试信息，否则不能使用 GDB 进行调试。
但如果不是自己编译的程序，并不知道是否带有-g 参数，如何判断一个文件是否带有调试信息呢？&lt;/p&gt;
&lt;h4 id=&#34;gdb-文件&#34;&gt;gdb 文件&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb helloworld
Reading symbols from helloWorld...(no debugging symbols found)...done.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果没有调试信息，会提示 no debugging symbols found。
如果是下面的提示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Reading symbols from helloWorld...done.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;则可以进行调试。&lt;/p&gt;
&lt;h4 id=&#34;readelf-查看段信息&#34;&gt;readelf 查看段信息&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ readelf -S helloWorld|grep debug
  [28] .debug_aranges    PROGBITS         0000000000000000  0000106d
  [29] .debug_info       PROGBITS         0000000000000000  0000109d
  [30] .debug_abbrev     PROGBITS         0000000000000000  0000115b
  [31] .debug_line       PROGBITS         0000000000000000  000011b9
  [32] .debug_str        PROGBITS         0000000000000000  000011fc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;helloWorld 为文件名，如果没有任何 debug 信息，则不能被调试。&lt;/p&gt;
&lt;h4 id=&#34;file-查看-strip-状况&#34;&gt;file 查看 strip 状况&lt;/h4&gt;
&lt;p&gt;下面的情况也是不可调试的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;file helloWorld
helloWorld: (省略前面内容) stripped
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果最后是 stripped，则说明该文件的符号表信息和调试信息已被去除，不能使用 gdb 调试。但是 not stripped 的情况并不能说明能够被调试。&lt;/p&gt;
&lt;h2 id=&#34;调试方式运行程序&#34;&gt;调试方式运行程序&lt;/h2&gt;
&lt;p&gt;程序还未启动时，可有多种方式启动调试。&lt;/p&gt;
&lt;h4 id=&#34;调试启动无参程序&#34;&gt;调试启动无参程序&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb helloWorld
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入 run 命令，即可运行程序&lt;/p&gt;
&lt;h4 id=&#34;调试启动带参程序&#34;&gt;调试启动带参程序&lt;/h4&gt;
&lt;p&gt;假设有以下程序，启动时需要带参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;lt;stdio.h&amp;gt;
int main(int argc,char *argv[])
{
    if(1 &amp;gt;= argc)
    {
        printf(&amp;#34;usage:hello name\n&amp;#34;);
        return 0;
    }
    printf(&amp;#34;Hello World %s!\n&amp;#34;,argv[1]);
    return 0 ;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gcc -g -o hello hello.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种情况如何启动调试呢？需要设置参数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb hello
(gdb)run 编程珠玑
Starting program: /home/shouwang/workspaces/c/hello 编程珠玑
Hello World 编程珠玑!
[Inferior 1 (process 20084) exited normally]
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只需要 run 的时候带上参数即可。
或者使用 set args，然后在用 run 启动：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdb hello
(gdb) set args 编程珠玑
(gdb) run
Starting program: /home/hyb/workspaces/c/hello 编程珠玑
Hello World 编程珠玑!
[Inferior 1 (process 20201) exited normally]
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;调试-core-文件&#34;&gt;调试 core 文件&lt;/h4&gt;
&lt;p&gt;当程序 core dump 时，可能会产生 core 文件，它能够很大程序帮助我们定位问题。但前提是系统没有限制 core 文件的产生。可以使用命令 limit -c 查看：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ ulimit -c
0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果结果是 0，那么恭喜你，即便程序 core dump 了也不会有 core 文件留下。我们需要让 core 文件能够产生：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ulimit -c unlimied  #表示不限制core文件大小
ulimit -c 10        #设置最大大小，单位为块，一块默认为512字节
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面两种方式可选其一。第一种无限制，第二种指定最大产生的大小。
调试 core 文件也很简单：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdb 程序文件名 core文件名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;具体可参看《&lt;a href=&#34;https://www.yanbinghu.com/2018/09/26/61877.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;linux 常用命令-开发调试篇&lt;/a&gt;》gdb 部分。&lt;/p&gt;
&lt;h2 id=&#34;调试已运行程序&#34;&gt;调试已运行程序&lt;/h2&gt;
&lt;p&gt;如果程序已经运行了怎么办呢？
首先使用 ps 命令找到进程 id：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ps -ef|grep 进程名
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;attach-方式&#34;&gt;attach 方式&lt;/h4&gt;
&lt;p&gt;假设获取到进程 id 为 20829，则可用下面的方式调试进程：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb
(gdb) attach 20829
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;接下来就可以继续你的调试啦。&lt;/p&gt;
&lt;p&gt;可能会有下面的错误提示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Could not attach to process.  If your uid matches the uid of the target
process, check the setting of /proc/sys/kernel/yama/ptrace_scope, or try
again as the root user.  For more details, see /etc/sysctl.d/10-ptrace.conf
ptrace: Operation not permitted.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;解决方法，切换到 root 用户：
将/etc/sysctl.d/10-ptrace.conf 中的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kernel.yama.ptrace_scope = 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;修改为&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;kernel.yama.ptrace_scope = 0
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;直接调试相关-id-进程&#34;&gt;直接调试相关 id 进程&lt;/h4&gt;
&lt;p&gt;还可以是用这样的方式 gdb program pid，例如:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdb hello 20829
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdb hello --pid 20829
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;已运行程序没有调试信息&#34;&gt;已运行程序没有调试信息&lt;/h4&gt;
&lt;p&gt;为了节省磁盘空间，已经运行的程序通常没有调试信息。但如果又不能停止当前程序重新启动调试，那怎么办呢？还有办法，那就是同样的代码，再编译出一个带调试信息的版本。然后使用和前面提到的方式操作。对于 attach 方式，在 attach 之前，使用 file 命令即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb
(gdb) file hello
Reading symbols from hello...done.
(gdb)attach 20829
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文主要介绍了两种类型的 GDB 启动调试方式，分别是调试未运行的程序和已经运行的程序。对于什么样的程序能够进行调试也进行了简单说明。&lt;/p&gt;
&lt;h1 id=&#34;断点设置&#34;&gt;断点设置&lt;/h1&gt;
&lt;h2 id=&#34;前言-1&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;上篇《&lt;a href=&#34;https://www.yanbinghu.com/2019/01/08/62137.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GDB 调试指南-启动调试&lt;/a&gt;》我们讲到了 GDB 启动调试的多种方式，分别应用于多种场景。今天我们来介绍一下断点设置的多种方式。&lt;/p&gt;
&lt;h2 id=&#34;为何要设置断点&#34;&gt;为何要设置断点&lt;/h2&gt;
&lt;p&gt;在介绍之前，我们首先需要了解，为什么需要设置断点。我们在指定位置设置断点之后，程序运行到该位置将会“暂停”，这个时候我们就可以对程序进行更多的操作，比如查看变量内容，堆栈情况等等，以帮助我们调试程序。&lt;/p&gt;
&lt;h2 id=&#34;查看已设置的断点&#34;&gt;查看已设置的断点&lt;/h2&gt;
&lt;p&gt;在学习断点设置之前，我们可以使用 info breakpoints 查看已设置断点：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;info breakpoints
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00000000004005fc in printNum2 at test.c:17
    breakpoint already hit 1 time
2       hw watchpoint  keep y                      a
    breakpoint already hit 1 time
    ignore next 3 hits
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它将会列出所有已设置的断点，每一个断点都有一个标号，用来代表这个断点。例如，第 2 个断点设置是一个观察点，并且会忽略三次。&lt;/p&gt;
&lt;h2 id=&#34;断点设置-1&#34;&gt;断点设置&lt;/h2&gt;
&lt;p&gt;断点设置有多种方式，分别应用于不同的场景。借助示例程序进行一一介绍：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//test.c
#include&amp;lt;stdio.h&amp;gt;
void printNum(int a)
{
    printf(&amp;#34;printNum\n&amp;#34;);
    while(a &amp;gt; 0)
    {
        printf(&amp;#34;%d\n&amp;#34;,a);
        a--;
    }
}
void printNum2(int a,int num)
{
    printf(&amp;#34;printNum\n&amp;#34;);
    while(a &amp;gt; num &amp;amp;&amp;amp; a&amp;gt;0)
    {
        printf(&amp;#34;%d\n&amp;#34;,a);
        a--;
    }
}
int div(int a,int b)
{
    printf(&amp;#34;a=%d,b=%d\n&amp;#34;,a,b);
    int temp = a/b;
    return temp;
}
int main(int argc,char *argv[])
{
    printNum2(12,5);
    printNum(10);
    div(10,0);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gcc -g -o test test.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，编译时需要带上-g 参数，具体原因参见《&lt;a href=&#34;https://www.yanbinghu.com/2019/01/08/62137.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GDB 调试指南-启动调试&lt;/a&gt;》。&lt;/p&gt;
&lt;h4 id=&#34;根据行号设置断点&#34;&gt;根据行号设置断点&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b 9  #break 可简写为b
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b test.c:9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序运行到第 9 行的时候会断住。&lt;/p&gt;
&lt;h4 id=&#34;根据函数名设置断点&#34;&gt;根据函数名设置断点&lt;/h4&gt;
&lt;p&gt;同样可以将断点设置在函数处：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;b printNum
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序在调用到 printNum 函数的时候会断住。&lt;/p&gt;
&lt;h4 id=&#34;根据条件设置断点&#34;&gt;根据条件设置断点&lt;/h4&gt;
&lt;p&gt;假设程序某处发生崩溃，而崩溃的原因怀疑是某个地方出现了非期望的值，那么你就可以在这里断点观察，当出现该非法值时，程序断住。这个时候我们可以借助 gdb 来设置条件断点，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;break test.c:23 if b==0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当在 b 等于 0 时，程序将会在第 23 行断住。
它和 condition 有着类似的作用，假设上面的断点号为 1，那么：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;condition 1 b==0
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;会使得 b 等于 0 时，产生断点 1。而实际上可以很方便地用来改变断点产生的条件，例如，之前设置 b==0 时产生该断点，那么使用 condition 可以修改断点产生的条件。&lt;/p&gt;
&lt;h4 id=&#34;根据规则设置断点&#34;&gt;根据规则设置断点&lt;/h4&gt;
&lt;p&gt;例如需要对所有调用 printNum 函数都设置断点，可以使用下面的方式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rbreak printNum*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所有以 printNum 开头的函数都设置了断点。而下面是对所有函数设置断点：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#用法：rbreak file:regex
rbreak .
rbreak test.c:. #对test.c中的所有函数设置断点
rbreak test.c:^print #对以print开头的函数设置断点
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;设置临时断点&#34;&gt;设置临时断点&lt;/h4&gt;
&lt;p&gt;假设某处的断点只想生效一次，那么可以设置临时断点，这样断点后面就不复存在了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;tbreak test.c:l0  #在第10行设置临时断点
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;跳过多次设置断点&#34;&gt;跳过多次设置断点&lt;/h4&gt;
&lt;p&gt;假如有某个地方，我们知道可能出错，但是前面 30 次都没有问题，虽然在该处设置了断点，但是想跳过前面 30 次，可以使用下面的方式：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;ignore 1 30
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，1 是你要忽略的断点号，可以通过前面的方式查找到，30 是需要跳过的次数。这样设置之后，会跳过前面 30 次。再次通过 info breakpoints 可以看到：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Num     Type           Disp Enb Address            What
1       breakpoint     keep y   0x00000000004005e8 in printNum2 at test.c:16
    ignore next 30 hits
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;根据表达式值变化产生断点&#34;&gt;根据表达式值变化产生断点&lt;/h4&gt;
&lt;p&gt;有时候我们需要观察某个值或表达式，知道它什么时候发生变化了，这个时候我们可以借助 watch 命令。例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;watch a
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候，让程序继续运行，如果 a 的值发生变化，则会打印相关内容，如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Hardware watchpoint 2: a
Old value = 12
New value = 11
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是这里要特别注意的是，程序必须运行起来，否则会出现：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;No symbol &amp;#34;a&amp;#34; in current context.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为程序没有运行，当前上下文也就没有相关变量信息。&lt;/p&gt;
&lt;p&gt;rwatch 和 awatch 同样可以设置观察点前者是当变量值被读时断住，后者是被读或者被改写时断住。&lt;/p&gt;
&lt;h2 id=&#34;禁用或启动断点&#34;&gt;禁用或启动断点&lt;/h2&gt;
&lt;p&gt;有些断点暂时不想使用，但又不想删除，可以暂时禁用或启用。例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;disable  #禁用所有断点
disable bnum #禁用标号为bnum的断点
enable  #启用所有断点
enable bnum #启用标号为bnum的断点
enable delete bnum  #启动标号为bnum的断点，并且在此之后删除该断点
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;断点清除&#34;&gt;断点清除&lt;/h2&gt;
&lt;p&gt;断点清除主要用到 clear 和 delete 命令。常见使用如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;clear   #删除当前行所有breakpoints
clear function  #删除函数名为function处的断点
clear filename:function #删除文件filename中函数function处的断点
clear lineNum #删除行号为lineNum处的断点
clear f:lename：lineNum #删除文件filename中行号为lineNum处的断点
delete  #删除所有breakpoints,watchpoints和catchpoints
delete bnum #删除断点号为bnum的断点
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;总结-1&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文介绍了常见的断点设置方法，断点设置之后，可以便于我们后期观察变量，堆栈等信息，为进一步的定位与调试做准备。&lt;/p&gt;
&lt;h1 id=&#34;变量查看&#34;&gt;变量查看&lt;/h1&gt;
&lt;h2 id=&#34;前言-2&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;在启动调试以及设置断点之后，就到了我们非常关键的一步-查看变量。GDB 调试最大的目的之一就是走查代码，查看运行结果是否符合预期。既然如此，我们就不得不了解一些查看各种类型变量的方法，以帮助我们进一步定位问题。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;在查看变量之前，需要先启动调试并设置断点，该部分内容可参考《&lt;a href=&#34;https://www.yanbinghu.com/2019/01/08/62137.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GDB 调试指南－启动调试&lt;/a&gt;》和《&lt;a href=&#34;https://www.yanbinghu.com/2019/02/24/44483.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GDB 调试指南－断点设置&lt;/a&gt;》。后面的内容都基于在某个位置已经断住。&lt;/p&gt;
&lt;p&gt;本文辅助说明程序如下:
testGdb.c&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//testGdb.c
#include&amp;lt;stdio.h&amp;gt;
#include&amp;lt;stdlib.h&amp;gt;
#include&amp;#34;testGdb.h&amp;#34;
int main(void)
{
    int a = 10; //整型
    int b[] = {1,2,3,5};  //数组
    char c[] = &amp;#34;hello,shouwang&amp;#34;;//字符数组
    /*申请内存，失败时退出*/
    int *d = (int*)malloc(a*sizeof(int));
    if(NULL == d)
    {
        printf(&amp;#34;malloc error\n&amp;#34;);
        return -1;
    }
    /*赋值*/
    for(int i=0; i &amp;lt; 10;i++)
    {
        d[i] = i;
    }
    free(d);
    d = NULL;
    float e = 8.5f;
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;testGdb.h&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;int a = 11;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gcc -g -o testGdb testGdb.o
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;普通变量查看&#34;&gt;普通变量查看&lt;/h2&gt;
&lt;h4 id=&#34;打印基本类型变量数组字符数组&#34;&gt;打印基本类型变量，数组，字符数组&lt;/h4&gt;
&lt;p&gt;最常见的使用便是使用 print（可简写为 p）打印变量内容。
例如，打印基本类型，数组，字符数组等直接使用 p 变量名即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p a
$1 = 10
(gdb) p b
$2 = {1, 2, 3, 5}
(gdb) p c
$3 = &amp;#34;hello,shouwang&amp;#34;
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然有时候，多个函数或者多个文件会有同一个变量名，这个时候可以在前面加上函数名或者文件名来区分：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p &amp;#39;testGdb.h&amp;#39;::a
$1 = 11
(gdb) p &amp;#39;main&amp;#39;::b
$2 = {1, 2, 3, 5}
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里所打印的 a 值是我们定义在 testGdb.h 文件里的，而 b 值是 main 函数中的 b。&lt;/p&gt;
&lt;h4 id=&#34;打印指针指向内容&#34;&gt;打印指针指向内容&lt;/h4&gt;
&lt;p&gt;如果还是使用上面的方式打印指针指向的内容，那么打印出来的只是指针地址而已，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p d
$1 = (int *) 0x602010
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而如果想要打印指针指向的内容，需要解引用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p *d
$2 = 0
(gdb) p *d@10
$3 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从上面可以看到，仅仅使用*只能打印第一个值，如果要打印多个值，后面跟上@并加上要打印的长度。
或者@后面跟上变量值：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p *d@a
$2 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于 a 的值为 10，并且是作为整型指针数据长度，因此后面可以直接跟着 a，也可以打印出所有内容。&lt;/p&gt;
&lt;p&gt;另外值得一提的是，$可表示上一个变量，而假设此时有一个链表 linkNode，它有 next 成员代表下一个节点，则可使用下面方式不断打印链表内容：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p *linkNode
(这里显示linkNode节点内容)
(gdb) p *$.next
(这里显示linkNode节点下一个节点的内容)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果想要查看前面数组的内容，你可以将下标一个一个累加，还可以定义一个类似 UNIX 环境变量，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) set $index=0
(gdb) p b[$index++]
$11 = 1
(gdb) p b[$index++]
$12 = 2
(gdb) p b[$index++]
$13 = 3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就不需要每次修改下标去打印啦。&lt;/p&gt;
&lt;h2 id=&#34;按照特定格式打印变量&#34;&gt;按照特定格式打印变量&lt;/h2&gt;
&lt;p&gt;对于简单的数据，print 默认的打印方式已经足够了，它会根据变量类型的格式打印出来，但是有时候这还不够，我们需要更多的格式控制。常见格式控制字符如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x 按十六进制格式显示变量。&lt;/li&gt;
&lt;li&gt;d 按十进制格式显示变量。&lt;/li&gt;
&lt;li&gt;u 按十六进制格式显示无符号整型。&lt;/li&gt;
&lt;li&gt;o 按八进制格式显示变量。&lt;/li&gt;
&lt;li&gt;t 按二进制格式显示变量。&lt;/li&gt;
&lt;li&gt;a 按十六进制格式显示变量。&lt;/li&gt;
&lt;li&gt;c 按字符格式显示变量。&lt;/li&gt;
&lt;li&gt;f 按浮点数格式显示变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还是以辅助程序来说明，正常方式打印字符数组 c：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p c
$18 = &amp;#34;hello,shouwang&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是如果我们要查看它的十六进制格式打印呢？&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p/x c
$19 = {0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2c, 0x73, 0x68, 0x6f, 0x75, 0x77, 0x61,
  0x6e, 0x67, 0x0}
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是如果我们想用这种方式查看浮点数的二进制格式是怎样的是不行的，因为直接打印它首先会被转换成整型，因此最终会得到 8：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) p e
$1 = 8.5
(gdb) p/t e
$2 = 1000
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么就需要另外一种查看方式了。&lt;/p&gt;
&lt;h2 id=&#34;查看内存内容&#34;&gt;查看内存内容&lt;/h2&gt;
&lt;p&gt;examine(简写为 x)可以用来查看内存地址中的值。语法如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;x/[n][f][u] addr
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;n 表示要显示的内存单元数，默认值为 1&lt;/li&gt;
&lt;li&gt;f 表示要打印的格式，前面已经提到了格式控制字符&lt;/li&gt;
&lt;li&gt;u 要打印的单元长度&lt;/li&gt;
&lt;li&gt;addr 内存地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;单元类型常见有如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;b 字节&lt;/li&gt;
&lt;li&gt;h 半字，即双字节&lt;/li&gt;
&lt;li&gt;w 字，即四字节&lt;/li&gt;
&lt;li&gt;g 八字节&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们通过一个实例来看，假如我们要把 float 变量 e 按照二进制方式打印，并且打印单位是一字节：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) x/4tb &amp;amp;e
0x7fffffffdbd4:    00000000    00000000    00001000    01000001
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，变量 e 的四个字节都以二进制的方式打印出来了。&lt;/p&gt;
&lt;h2 id=&#34;自动显示变量内容&#34;&gt;自动显示变量内容&lt;/h2&gt;
&lt;p&gt;假设我们希望程序断住时，就显示某个变量的值，可以使用 display 命令。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) display e
1: e = 8.5
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;那么每次程序断住时，就会打印 e 的值。要查看哪些变量被设置了 display，可以使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb)info display
Auto-display expressions now in effect:
Num Enb Expression
1:   y  b
2:   y  e
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果想要清除可以使用&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;delete display num #num为前面变量前的编号,不带num时清除所有。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者去使能：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;disable display num  #num为前面变量前的编号，不带num时去使能所有
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;查看寄存器内容&#34;&gt;查看寄存器内容&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb)info registers
rax            0x0    0
rbx            0x0    0
rcx            0x7ffff7dd1b00    140737351850752
rdx            0x0    0
rsi            0x7ffff7dd1b30    140737351850800
rdi            0xffffffff    4294967295
rbp            0x7fffffffdc10    0x7fffffffdc10
(内容过多未显示完全)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;总结-2&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;通过不同方式查看变量值或者内存值能够极大的帮助我们判断程序的运行是否符合我们的预期，如果发现观察的值不是我们预期的时候，就需要检查我们的代码了。&lt;/p&gt;
&lt;h1 id=&#34;单步调试&#34;&gt;单步调试&lt;/h1&gt;
&lt;h2 id=&#34;前言-3&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;前面通过《&lt;a href=&#34;https://www.yanbinghu.com/2019/01/08/62137.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;启动调试&lt;/a&gt;》，《&lt;a href=&#34;https://www.yanbinghu.com/2019/02/24/44483.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;断点设置&lt;/a&gt;》，《&lt;a href=&#34;https://www.yanbinghu.com/2019/03/10/50132.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;变量查看&lt;/a&gt;》,我们已经了解了 GDB 基本的启动，设置断点，查看变量等，如果这些内容你还不知道，建议先回顾一下前面的内容。在启动调试设置断点观察之后，没有我们想要的信息怎么办呢？这个时候，就需要单步执行或者跳过当前断点继续执行等等。而本文所说的单步调试并非仅仅指单步执行，而是指在你的控制之下，按要求执行语句。&lt;/p&gt;
&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;
&lt;p&gt;老规矩，先准备一个示例程序如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/*gdbStep.c*/
#include&amp;lt;stdio.h&amp;gt;
/*计算简单乘法,这里没有考虑溢出*/
int add(int a, int b)
{
    int c = a + b;
    return c;
}
/*打印从0到num-1的数*/
int count(int num)
{
    int i = 0;
    if(0 &amp;gt; num)
        return 0;
    while(i &amp;lt; num)
    {
        printf(&amp;#34;%d\n&amp;#34;,i);
        i++;
    }
    return i;
}
int main(void)
{
    int a = 3;
    int b = 7;
    printf(&amp;#34;it will calc a + b\n&amp;#34;);
    int c = add(a,b);
    printf(&amp;#34;%d + %d = %d\n&amp;#34;,a,b,c);
    count(c);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gcc -g -o gdbStep gdbStep.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序的功能比较简单，这里不多做解释。&lt;/p&gt;
&lt;p&gt;特别简单说明一条命令，list（可简写为 l），它可以将源码列出来，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) list
1    #include&amp;lt;stdio.h&amp;gt;
2
3    /*计算简单乘法,这里没有考虑溢出*/
4    int add(int a, int b)
5    {
6        int c = a * b;
7        return c;
8    }
9    int main(void)
10    {
(gdb) l
11        int a = 13;
12        int b = 57;
13        printf(&amp;#34;it will calc a * b\n&amp;#34;);
14        int c = add(a,b);
15        printf(&amp;#34;%d*%d = %d\n&amp;#34;,a,b,c);
16        return 0;
17    }
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;单步执行-next&#34;&gt;单步执行-next&lt;/h2&gt;
&lt;p&gt;next 命令（可简写为 n）用于在程序断住后，继续执行下一条语句，假设已经启动调试，并在第 12 行停住，如果要继续执行，则使用 n 执行下一条语句，如果后面跟上数字 num，则表示执行该命令 num 次，就达到继续执行 n 行的效果了：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb gdbStep   #启动调试
(gdb)b 25       #将断点设置在12行
(gdb)run        #运行程序
Breakpoint 1, main () at gdbStep.c:25
25        int b = 7;
(gdb) n     #单步执行
26        printf(&amp;#34;it will calc a + b\n&amp;#34;);
(gdb) n 2   #执行两次
it will calc a + b
28        printf(&amp;#34;%d + %d = %d\n&amp;#34;,a,b,c);
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从上面的执行结果可以看到，我们在 25 行处断住，执行 n 之后，运行到 26 行，运行 n 2 之后，运行到 28 行，但是有没有发现一个问题，为什么不会进入到 add 函数内部呢？那就需要用到另外一个命令啦。&lt;/p&gt;
&lt;h2 id=&#34;单步进入-step&#34;&gt;单步进入-step&lt;/h2&gt;
&lt;p&gt;对于上面的情况，如果我们想跟踪 add 函数内部的情况，可以使用 step 命令（可简写为 s），它可以单步跟踪到函数内部，但前提是该函数有调试信息并且有源码信息。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb gdbStep    #启动调试
(gdb) b 25       #在12行设置断点
Breakpoint 1 at 0x4005d3: file gdbStep.c, line 25.
(gdb) run        #运行程序
Breakpoint 1, main () at gdbStep.c:25
25        int b = 7;
(gdb) s
26        printf(&amp;#34;it will calc a + b\n&amp;#34;);
(gdb) s     #单步进入，但是并没有该函数的源文件信息
_IO_puts (str=0x4006b8 &amp;#34;it will calc a + b&amp;#34;) at ioputs.c:33
33    ioputs.c: No such file or directory.
(gdb) finish    #继续完成该函数调用
Run till exit from #0  _IO_puts (str=0x4006b8 &amp;#34;it will calc a + b&amp;#34;)
    at ioputs.c:33
it will calc a + b
main () at gdbStep.c:27
27        int c = add(a,b);
Value returned is $1 = 19
(gdb) s        #单步进入，现在已经进入到了add函数内部
add (a=13, b=57) at gdbStep.c:6
6        int c = a + b;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;从上面的过程可以看到，s 命令会尝试进入函数，但是如果没有该函数源码，需要跳过该函数执行，可使用 finish 命令，继续后面的执行。如果没有函数调用，s 的作用与 n 的作用并无差别，仅仅是继续执行下一行。它后面也可以跟数字，表明要执行的次数。&lt;/p&gt;
&lt;p&gt;当然它还有一个选项，用来设置当遇到没有调试信息的函数，s 命令是否跳过该函数，而执行后面的。默认情况下，它是会跳过的，即 step-mode 值是 off：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) show step-mode
Mode of the step operation is off.
(gdb) set step-mode on
(gdb) set step-mode off
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还有一个与 step 相关的命令是 stepi（可简写为 si），它与 step 不同的是，每次执行一条机器指令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) si
0x0000000000400573    6        int c = a + b;
(gdb) display/i $pc
1: x/i $pc
=&amp;gt; 0x400573 &amp;lt;add+13&amp;gt;:    mov    -0x18(%rbp),%eax
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;继续执行到下一个断点-continue&#34;&gt;继续执行到下一个断点-continue&lt;/h2&gt;
&lt;p&gt;我们可能打了多处断点，或者断点打在循环内，这个时候，想跳过这个断点，甚至跳过多次断点继续执行该怎么做呢？可以使用 continue 命令（可简写为 c）或者 fg，它会继续执行程序，直到再次遇到断点处：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb gdbStep
(gdb)b 18    #在count函数循环内打断点
(gdb)run
Breakpoint 1, count (num=10) at gdbStep.c:18
18            i++;
(gdb) c      #继续运行，直到下一次断住
Continuing.
1

Breakpoint 1, count (num=10) at gdbStep.c:18
18            i++;
(gdb) fg     #继续运行，直到下一次断住
Continuing.
2

Breakpoint 1, count (num=10) at gdbStep.c:18
18            i++;
(gdb) c 3    #跳过三次
Will ignore next 2 crossings of breakpoint 1.  Continuing.
3
4
5

Breakpoint 1, count (num=10) at gdbStep.c:18
18            i++;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;继续运行到指定位置-until&#34;&gt;继续运行到指定位置-until&lt;/h2&gt;
&lt;p&gt;假如我们在 25 行停住了，现在想要运行到 29 行停住，就可以使用 until 命令（可简写为 u）：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb gdbStep
(gdb)b 25
(gdb)run
(gdb) u 29
it will calc a + b
3 + 7 = 10
main () at gdbStep.c:29
29        count(c);
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，在执行 u 29 之后，它在 29 行停住了。它利用的是临时断点。&lt;/p&gt;
&lt;h2 id=&#34;跳过执行skip&#34;&gt;跳过执行—skip&lt;/h2&gt;
&lt;p&gt;skip 可以在 step 时跳过一些不想关注的函数或者某个文件的代码:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb gdbStep
(gdb) b 27
Breakpoint 1 at 0x4005e4: file gdbStep.c, line 27.
(gdb) skip function add    #step时跳过add函数
Function add will be skipped when stepping.
(gdb) info skip   #查看step情况
Num     Type           Enb What
1       function       y   add
(gdb) run
Starting program: /home/hyb/workspaces/gdb/gdbStep
it will calc a + b

Breakpoint 1, main () at gdbStep.c:27
27        int c = add(a,b);
(gdb) s
28        printf(&amp;#34;%d + %d = %d\n&amp;#34;,a,b,c);
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到，再使用 skip 之后，使用 step 将不会进入 add 函数。
step 也后面也可以跟文件：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb)skip file gdbStep.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样 gdbStep.c 中的函数都不会进入。&lt;/p&gt;
&lt;p&gt;其他相关命令：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;skip delete [num] 删除 skip&lt;/li&gt;
&lt;li&gt;skip enable [num] 使能 skip&lt;/li&gt;
&lt;li&gt;skip disable [num] 去使能 skip&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 num 是前面通过 info skip 看到的 num 值，上面可以带或不带该值，如果不带 num，则针对所有 skip，如果带上了，则只针对某一个 skip。&lt;/p&gt;
&lt;h2 id=&#34;总结-3&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文主要介绍了一些简单情况的单步调试方法或常见命令使用，但这些已经够用了，毕竟大部分程序的执行或停止都在我们的掌控之中了。&lt;/p&gt;
&lt;h1 id=&#34;源码查看&#34;&gt;源码查看&lt;/h1&gt;
&lt;h2 id=&#34;前言-4&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;我们在调试过程中难免要对照源码进行查看，如果已经开始了调试，而查看源码或者编辑源码却要另外打开一个窗口，那未免显得太麻烦。文本将会介绍如何在 GDB 调试模式下&lt;strong&gt;查看源码或对源码进行编辑&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;准备工作-1&#34;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;为了说明后面的内容，我们先准备一些源码，分别是 main.c：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;//main.c
#include&amp;lt;stdio.h&amp;gt;
#include&amp;#34;test.h&amp;#34;
int main(void)
{
    printf(&amp;#34;it will print from 5 to 1\n&amp;#34;);
    printNum(5);
    printf(&amp;#34;print end\n&amp;#34;);

    printf(&amp;#34;it will print 1 to 5\n&amp;#34;);
    printNum1(5);
    printf(&amp;#34;print end\n&amp;#34;);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;头文件 test.h：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#ifndef _TEST_H
#define _TEST_H
#include&amp;lt;stdio.h&amp;gt;
void printNum(int n);
void printNum1(int n);
#endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以及 test.c:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include&amp;#34;test.h&amp;#34;
void printNum(int n)
{
    if( n &amp;lt; 0)
        return;
    while(n &amp;gt; 0)
    {
        printf(&amp;#34;%d\n&amp;#34;,n);
        n--;
    }
}

void printNum1(int n)
{
    if( n &amp;lt; 0)
        return;
    int i = 1;
    while(i &amp;lt;= n)
    {
        printf(&amp;#34;%d\n&amp;#34;,i);
        i++;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;编译运行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gcc -g  -o main  main.c test.c
$ chmod +x main
$ ./main
it will print from 5 to 1
5
4
3
2
1
print end
it will print 1 to 5
1
2
3
4
5
print end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;程序功能比较简单，用来打印 5 到 1 的数以及 1 到 5 的数，这里也就不多做解释。&lt;/p&gt;
&lt;h2 id=&#34;列出源码&#34;&gt;列出源码&lt;/h2&gt;
&lt;p&gt;首先要介绍的就是 list 命令（可简写为 l），它用来打印源码。&lt;/p&gt;
&lt;h4 id=&#34;直接打印源码&#34;&gt;直接打印源码&lt;/h4&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ gdb main
(gdb) l
1    //main.c
2    #include&amp;lt;stdio.h&amp;gt;
3    #include&amp;#34;test.h&amp;#34;
4    int main(void)
5    {
6        printf(&amp;#34;it will print from 5 to 1\n&amp;#34;);
7        printNum(5);
8        printf(&amp;#34;print end\n&amp;#34;);
9
10        printf(&amp;#34;it will print 1 to 5\n&amp;#34;);
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;直接输入 l 可从第一行开始显示源码，继续输入 l，可列出后面的源码。后面也可以跟上+或者-，分别表示要列出上一次列出源码的后面部分或者前面部分。&lt;/p&gt;
&lt;h4 id=&#34;列出指定行附近源码&#34;&gt;列出指定行附近源码&lt;/h4&gt;
&lt;p&gt;l 后面可以跟行号，表明要列出附近的源码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) l 9
4    int main(void)
5    {
6        printf(&amp;#34;it will print from 5 to 1\n&amp;#34;);
7        printNum(5);
8        printf(&amp;#34;print end\n&amp;#34;);
9
10        printf(&amp;#34;it will print 1 to 5\n&amp;#34;);
11        printNum1(5);
12        printf(&amp;#34;print end\n&amp;#34;);
13        return 0;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里，l 后面跟上 9，表明要列出第 9 行附近的源码。&lt;/p&gt;
&lt;h4 id=&#34;列出指定函数附近的源码&#34;&gt;列出指定函数附近的源码&lt;/h4&gt;
&lt;p&gt;这个很容易理解，而使用也很简单，l 后面跟函数名即可，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) l printNum
1    #include&amp;#34;test.h&amp;#34;
2    void printNum(int n)
3    {
4        if( n &amp;lt; 0)
5            return;
6        while(n &amp;gt; 0)
7        {
8            printf(&amp;#34;%d\n&amp;#34;,n);
9            n--;
10        }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这里，l 后面跟上函数名 printNum，它便列出了 printNum 函数附近的源码。&lt;/p&gt;
&lt;h4 id=&#34;设置源码一次列出行数&#34;&gt;设置源码一次列出行数&lt;/h4&gt;
&lt;p&gt;不知道你有没有发现，在列出函数源码的时候，它并没有列全，因为 l 每次只显示 10 行，那么有没有方法每次列出更多呢？
我们可以通过 listsize 属性来设置，例如设置每次列出 20 行：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) set listsize 20
(gdb) show listsize
Number of source lines gdb will list by default is 20.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样每次就会列出 20 行，当然也可以设置为 0 或者 unlimited，这样设置之后，列出就没有限制了，但源码如果较长，查看将会不便。&lt;/p&gt;
&lt;h4 id=&#34;列出指定行之间的源码&#34;&gt;列出指定行之间的源码&lt;/h4&gt;
&lt;p&gt;list first,last
例如，要列出 3 到 15 行之间的源码：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) l 3,15
3    {
4        if( n &amp;lt; 0)
5            return;
6        while(n &amp;gt; 0)
7        {
8            printf(&amp;#34;%d\n&amp;#34;,n);
9            n--;
10        }
11    }
12
13    void printNum1(int n)
14    {
15        if( n &amp;lt; 0)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;启始行和结束行号之间用逗号隔开。两者之一也可以省略，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) list 3,
3    {
4        if( n &amp;lt; 0)
5            return;
6        while(n &amp;gt; 0)
7        {
8            printf(&amp;#34;%d\n&amp;#34;,n);
9            n--;
10        }
11    }
12
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;省略结束行的时候，它列出从开始行开始，到指定大小行结束，而省略开始行的时候，到结束行结束，列出设置的大小行，例如默认设置为 10 行，则到结束行为止，总共列出 10 行。前面我们也介绍了修改和查看默认列出源码行数的方法。&lt;/p&gt;
&lt;h4 id=&#34;列出指定文件的源码&#34;&gt;列出指定文件的源码&lt;/h4&gt;
&lt;p&gt;前面执行 l 命令时，默认列出 main.c 的源码，如果想要看指定文件的源码呢？可以&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;l location
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 location 可以是&lt;strong&gt;文件名加行号或函数名&lt;/strong&gt;，因此可以使用：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) l test.c:1
1    #include&amp;#34;test.h&amp;#34;
2    void printNum(int n)
3    {
4        if( n &amp;lt; 0)
5            return;
6        while(n &amp;gt; 0)
7        {
8            printf(&amp;#34;%d\n&amp;#34;,n);
9            n--;
10        }
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;来查看指定文件指定行，或者指定文件指定函数：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) l test.c:printNum1
9            n--;
10        }
11    }
12
13    void printNum1(int n)
14    {
15        if( n &amp;lt; 0)
16            return;
17        int i = 1;
18        while(i &amp;lt;= n)
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者指定文件指定行之间：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) l test.c:1,test.c:3
1    #include&amp;#34;test.h&amp;#34;
2    void printNum(int n)
3    {
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;指定源码路径&#34;&gt;指定源码路径&lt;/h2&gt;
&lt;p&gt;在查看源码之前，首先要确保我们的程序能够关联到源码，一般来说，我们在自己的机器上加上-g 参数编译完之后，使用 gdb 都能查看到源码，但是如果出现下面的情况呢？&lt;/p&gt;
&lt;h4 id=&#34;源码被移走&#34;&gt;源码被移走&lt;/h4&gt;
&lt;p&gt;例如，我现在将 main.c 移动到当前的 temp 目录下，再执行 l 命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) l
1    main.c: No such file or directory.
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;它就会提示找不到源码文件了，那么怎么办呢？
我们可以使用 dir 命名指定源码路径，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) dir ./temp
Source directories searched: /home/hyb/workspaces/gdb/sourceCode/./temp:$cdir:$cwd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这个时候它就能找到源码路径了。我这里使用的是相对路径，保险起见，你也可以使用绝对路径。&lt;/p&gt;
&lt;h4 id=&#34;更换源码目录&#34;&gt;更换源码目录&lt;/h4&gt;
&lt;p&gt;例如，你编译好的程序文件，放到了另外一台机器上进行调试，或者你的源码文件全都移动到了另外一个目录，怎么办呢？当然你还可以使用前面的方法添加源码搜索路径，也可以使用 set substitute-path from to 将原来的路径替换为新的路径，那么我们如何知道原来的源码路径是什么呢？借助 readelf 命令可以知道：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ readelf main -p .debug_str
  [     0]  long unsigned int
  [    12]  short int
  [    1c]  /home/hyb/workspaces/gdb/sourceCode
  [    40]  main.c
（显示部分内容）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;main 为你将要调试的程序名，这里我们可以看到原来的路径，那么我们现在替换掉它：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb) set substitute-path /home/hyb/workspaces/gdb/sourceCode /home/hyb/workspaces/gdb/sourceCode/temp
(gdb) show substitute-path
List of all source path substitution rules:
  `/home/hyb/workspaces/gdb/sourceCode&amp;#39; -&amp;gt; `/home/hyb/workspaces/gdb/sourceCode/temp&amp;#39;.
(gdb)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置完成后，可以通过 show substitute-path 来查看设置结果。这样它也能在正确的路径查找源码啦。&lt;/p&gt;
&lt;p&gt;需要注意的是，这里&lt;strong&gt;对路径做了字符串替换&lt;/strong&gt;，那么如果你有多个路径，可以做多个替换。甚至可以对指定文件路径进行替换。&lt;/p&gt;
&lt;p&gt;最后你也可以通过 unset substitute-path [path]取消替换。&lt;/p&gt;
&lt;h2 id=&#34;编辑源码&#34;&gt;编辑源码&lt;/h2&gt;
&lt;p&gt;为了避免已经启动了调试之后，需要编辑源码，又不想退出，可以直接在 gdb 模式下编辑源码，它默认使用的编辑器是/bin/ex，但是你的机器上可能没有这个编辑器，或者你想使用自己熟悉的编辑器，那么可以通过下面的方式进行设置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ EDITOR=/usr/bin/vim
$ export EDITOR
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;/usr/bin/vim 可以替换为你熟悉的编辑器的路径，如果你不知道你的编辑器在什么位置，可借助 whereis 命令或者 witch 命令查看：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ whereis vim
vim: /usr/bin/vim /usr/bin/vim.tiny /usr/bin/vim.basic /usr/bin/vim.gnome /etc/vim /usr/share/vim /usr/share/man/man1/vim.1.gz
$ which vim
/usr/bin/vim
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;设置之后，就可以在 gdb 调试模式下进行编辑源码了，使用命令 edit location，例如：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb)edit 3  #编辑第三行
(gdb)edit printNum #编辑printNum函数
(gdb)edit test.c:5 #编辑test.c第五行
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可自行尝试，这里的 location 和前面介绍的一样，可以跟指定文件的特定行或指定文件的指定函数。
编辑完保存后，别忘了重新编译程序：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;(gdb)shell gcc -g -o main main.c test.c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里要注意，为了在 gdb 调试模式下执行 shell 命令，需要在命令之前加上 shell，表明这是一条 shell 命令。这样就能在不用退出 GDB 调试模式的情况下编译程序了。&lt;/p&gt;
&lt;h2 id=&#34;另外一种模式&#34;&gt;另外一种模式&lt;/h2&gt;
&lt;p&gt;启动时，带上 tui(Text User Interface)参数，会有意想不到的效果，它会将调试在多个文本窗口呈现：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;gdb main -tui
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230523213451.png&#34; alt=&#34;GDB-TUI&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是本文不作介绍，有兴趣的可以探索一下。&lt;/p&gt;
&lt;h2 id=&#34;总结-4&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文介绍了 GDB 调试中的源码查看，源码编辑以及如何在 GDB 调试模式下执行 shell 命令。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
