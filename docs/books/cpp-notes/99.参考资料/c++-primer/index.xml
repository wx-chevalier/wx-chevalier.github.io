<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; Primer | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/</link>
      <atom:link href="https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/index.xml" rel="self" type="application/rss+xml" />
    <description>C&#43;&#43; Primer</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>C&#43;&#43; Primer</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/</link>
    </image>
    
    <item>
      <title>01.开始</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/01.%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/01.%E5%BC%80%E5%A7%8B/</guid>
      <description>&lt;h1 id=&#34;第一章-开始&#34;&gt;第一章 开始&lt;/h1&gt;
&lt;h2 id=&#34;熟悉编译器&#34;&gt;熟悉编译器&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;g++&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编译：&lt;code&gt;g++ --std=c++11 ch01.cpp -o main&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;运行：&lt;code&gt;./prog1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看运行状态：&lt;code&gt;echo $?&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;编译多个文件:&lt;code&gt;g++ ch2.cpp Sales_item.cc -o main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入 &lt;code&gt;g++ --help&lt;/code&gt;，查看编译器选项：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Usage: g++ [options] file...
Options:
  -pass-exit-codes         Exit with highest error code from a phase
  --help                   Display this information
  --target-help            Display target specific command line options
  --help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...]
                           Display specific types of command line options
  (Use &amp;#39;-v --help&amp;#39; to display command line options of sub-processes)
  --version                Display compiler version information
  -dumpspecs               Display all of the built in spec strings
  -dumpversion             Display the version of the compiler
  -dumpmachine             Display the compiler&amp;#39;s target processor
  -print-search-dirs       Display the directories in the compiler&amp;#39;s search path
  -print-libgcc-file-name  Display the name of the compiler&amp;#39;s companion library
  -print-file-name=&amp;lt;lib&amp;gt;   Display the full path to library &amp;lt;lib&amp;gt;
  -print-prog-name=&amp;lt;prog&amp;gt;  Display the full path to compiler component &amp;lt;prog&amp;gt;
  -print-multiarch         Display the target&amp;#39;s normalized GNU triplet, used as
                           a component in the library path
  -print-multi-directory   Display the root directory for versions of libgcc
  -print-multi-lib         Display the mapping between command line options and
                           multiple library search directories
  -print-multi-os-directory Display the relative path to OS libraries
  -print-sysroot           Display the target libraries directory
  -print-sysroot-headers-suffix Display the sysroot suffix used to find headers
  -Wa,&amp;lt;options&amp;gt;            Pass comma-separated &amp;lt;options&amp;gt; on to the assembler
  -Wp,&amp;lt;options&amp;gt;            Pass comma-separated &amp;lt;options&amp;gt; on to the preprocessor
  -Wl,&amp;lt;options&amp;gt;            Pass comma-separated &amp;lt;options&amp;gt; on to the linker
  -Xassembler &amp;lt;arg&amp;gt;        Pass &amp;lt;arg&amp;gt; on to the assembler
  -Xpreprocessor &amp;lt;arg&amp;gt;     Pass &amp;lt;arg&amp;gt; on to the preprocessor
  -Xlinker &amp;lt;arg&amp;gt;           Pass &amp;lt;arg&amp;gt; on to the linker
  -save-temps              Do not delete intermediate files
  -save-temps=&amp;lt;arg&amp;gt;        Do not delete intermediate files
  -no-canonical-prefixes   Do not canonicalize paths when building relative
                           prefixes to other gcc components
  -pipe                    Use pipes rather than intermediate files
  -time                    Time the execution of each subprocess
  -specs=&amp;lt;file&amp;gt;            Override built-in specs with the contents of &amp;lt;file&amp;gt;
  -std=&amp;lt;standard&amp;gt;          Assume that the input sources are for &amp;lt;standard&amp;gt;
  --sysroot=&amp;lt;directory&amp;gt;    Use &amp;lt;directory&amp;gt; as the root directory for headers
                           and libraries
  -B &amp;lt;directory&amp;gt;           Add &amp;lt;directory&amp;gt; to the compiler&amp;#39;s search paths
  -v                       Display the programs invoked by the compiler
  -###                     Like -v but options quoted and commands not executed
  -E                       Preprocess only; do not compile, assemble or link
  -S                       Compile only; do not assemble or link
  -c                       Compile and assemble, but do not link
  -o &amp;lt;file&amp;gt;                Place the output into &amp;lt;file&amp;gt;
  -pie                     Create a position independent executable
  -shared                  Create a shared library
  -x &amp;lt;language&amp;gt;            Specify the language of the following input files
                           Permissible languages include: c c++ assembler none
                           &amp;#39;none&amp;#39; means revert to the default behavior of
                           guessing the language based on the file&amp;#39;s extension
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;输入 &lt;code&gt;g++ -v --help&lt;/code&gt;可以看到更完整的指令。
例如还有些常用的：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;-h FILENAME, -soname FILENAME: Set internal name of shared library
-I PROGRAM, --dynamic-linker PROGRAM: Set PROGRAM as the dynamic linker to use
-l LIBNAME, --library LIBNAME: Search for library LIBNAME
-L DIRECTORY, --library-path DIRECTORY: Add DIRECTORY to library search path
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;获得程序状态&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;windows: &lt;code&gt;echo %ERRORLEVEL%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;UNIX: &lt;code&gt;echo $?&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;io&#34;&gt;IO&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cout &amp;lt;&amp;lt; &amp;quot;hello&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;std::cin &amp;gt;&amp;gt; v1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;记住&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;返回的结果都是左操作数，也就是输入流和输出流本身。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;endl&lt;/strong&gt;：这是一个被称为&lt;strong&gt;操纵符&lt;/strong&gt;（manipulator）的特殊值，效果是结束当前行，并将设备关联的缓冲区（buffer）中的内容刷到设备中。&lt;/p&gt;
&lt;p&gt;UNIX 和 Mac 下键盘输入文件结束符：&lt;code&gt;ctrl+d&lt;/code&gt;，Windows 下：&lt;code&gt;ctrl+z&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;头文件&lt;/strong&gt;：类的类型一般存储在头文件中，标准库的头文件使用&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;，非标准库的头文件使用&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;。申明写在&lt;code&gt;.h&lt;/code&gt;文件，定义实现写在&lt;code&gt;.cpp&lt;/code&gt;文件。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;避免多次包含同一头文件&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef SALESITEM_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define SALESITEM_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Definition of Sales_itemclass and related functions goes here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;成员函数（类方法）&lt;/strong&gt;：使用&lt;code&gt;.&lt;/code&gt;调用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名空间（namespace）&lt;/strong&gt;：使用作用域运算符&lt;code&gt;::&lt;/code&gt;调用。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;单行注释： &lt;code&gt;//&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;多行注释： &lt;code&gt;/**/&lt;/code&gt;。编译器将&lt;code&gt;/*&lt;/code&gt;和&lt;code&gt;*/&lt;/code&gt;之间的内容都作为注释内容忽略。注意不能嵌套。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#define SALESITEM_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 多行注释格式
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * 每一行加一个*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;while-语句&#34;&gt;while 语句&lt;/h2&gt;
&lt;p&gt;循环执行，（直到条件（condition）为假。&lt;/p&gt;
&lt;h2 id=&#34;for-语句&#34;&gt;for 语句&lt;/h2&gt;
&lt;p&gt;循环头由三部分组成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个初始化语句（init-statement）&lt;/li&gt;
&lt;li&gt;一个循环条件（condition）&lt;/li&gt;
&lt;li&gt;一个表达式（expression）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用文件重定向&#34;&gt;使用文件重定向&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;./main &amp;lt;infile &amp;gt;outfile&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>02.变量和基本类型</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/02.%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/02.%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;第二章-变量和基本类型&#34;&gt;第二章 变量和基本类型&lt;/h1&gt;
&lt;p&gt;任何常用的编程语言都具备一组公共的语法特征，最基本的特征包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型、字符型等内置类型&lt;/li&gt;
&lt;li&gt;变量，用来为对象命名&lt;/li&gt;
&lt;li&gt;表达式和语句，用于操作上述数据类型的具体值&lt;/li&gt;
&lt;li&gt;if 或 while 等控制结构，有选择地执行一些语句或重复地执行一些语句&lt;/li&gt;
&lt;li&gt;函数，用于定义可供随时调用的计算单元&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大多数编程语言通过两种方式来进一步补充其基本特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义数据类型，实现对语言的扩展&lt;/li&gt;
&lt;li&gt;将一些有用的功能封装成库函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;基本内置类型&#34;&gt;基本内置类型&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基本算数类型&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;最小尺寸&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;布尔类型&lt;/td&gt;
&lt;td&gt;8bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;字符&lt;/td&gt;
&lt;td&gt;8bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;wchar_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;宽字符&lt;/td&gt;
&lt;td&gt;16bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char16_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unicode 字符&lt;/td&gt;
&lt;td&gt;16bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;char32_t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unicode 字符&lt;/td&gt;
&lt;td&gt;32bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;short&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;短整型&lt;/td&gt;
&lt;td&gt;16bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整型&lt;/td&gt;
&lt;td&gt;16bits (在 32 位机器中是 32bits)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;长整型&lt;/td&gt;
&lt;td&gt;32bits&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;长整型&lt;/td&gt;
&lt;td&gt;64bits （是在 C++11 中新定义的）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;单精度浮点数&lt;/td&gt;
&lt;td&gt;6 位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双精度浮点数&lt;/td&gt;
&lt;td&gt;10 位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;扩展精度浮点数&lt;/td&gt;
&lt;td&gt;10 位有效数字&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;如何选择类型&#34;&gt;如何选择类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1.当明确知晓数值不可能是负数时，选用无符号类型；&lt;/li&gt;
&lt;li&gt;2.使用&lt;code&gt;int&lt;/code&gt;执行整数运算。一般&lt;code&gt;long&lt;/code&gt;的大小和&lt;code&gt;int&lt;/code&gt;一样，而&lt;code&gt;short&lt;/code&gt;常常显得太小。除非超过了&lt;code&gt;int&lt;/code&gt;的范围，选择&lt;code&gt;long long&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;3.算术表达式中不要使用&lt;code&gt;char&lt;/code&gt;或&lt;code&gt;bool&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;4.浮点运算选用&lt;code&gt;double&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型转换&#34;&gt;类型转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;非布尔型赋给布尔型，初始值为 0 则结果为 false，否则为 true。&lt;/li&gt;
&lt;li&gt;布尔型赋给非布尔型，初始值为 false 结果为 0，初始值为 true 结果为 1。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字面值常量&#34;&gt;字面值常量&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一个形如&lt;code&gt;42&lt;/code&gt;的值被称作&lt;strong&gt;字面值常量&lt;/strong&gt;（literal）。
&lt;ul&gt;
&lt;li&gt;整型和浮点型字面值。&lt;/li&gt;
&lt;li&gt;字符和字符串字面值。
&lt;ul&gt;
&lt;li&gt;使用空格连接，继承自 C。&lt;/li&gt;
&lt;li&gt;字符字面值：单引号， &lt;code&gt;&#39;a&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;字符串字面值：双引号， &lt;code&gt;&amp;quot;Hello World&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分多行书写字符串。
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nl&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;wow, a really, really long string&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;          &lt;span class=&#34;s&#34;&gt;&amp;#34;literal that spans two lines&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;转义序列。&lt;code&gt;\n&lt;/code&gt;、&lt;code&gt;\t&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;布尔字面值。&lt;code&gt;true&lt;/code&gt;，&lt;code&gt;false&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;指针字面值。&lt;code&gt;nullptr&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;字符串型实际上时常量字符构成的数组，结尾处以&lt;code&gt;&#39;\0&#39;&lt;/code&gt;结束，所以字符串类型实际上长度比内容多 1。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;变量&#34;&gt;变量&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;变量&lt;/strong&gt;提供一个&lt;strong&gt;具名&lt;/strong&gt;的、可供程序操作的存储空间。&lt;code&gt;C++&lt;/code&gt;中&lt;strong&gt;变量&lt;/strong&gt;和&lt;strong&gt;对象&lt;/strong&gt;一般可以互换使用。&lt;/p&gt;
&lt;h3 id=&#34;变量定义define&#34;&gt;变量定义（define）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;定义形式&lt;/strong&gt;：类型说明符（type specifier） + 一个或多个变量名组成的列表。如&lt;code&gt;int sum = 0, value, units_sold = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;初始化&lt;/strong&gt;（initialize）：对象在创建时获得了一个特定的值。
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;初始化不是赋值！&lt;/strong&gt;：&lt;/li&gt;
&lt;li&gt;初始化 = 创建变量 + 赋予初始值&lt;/li&gt;
&lt;li&gt;赋值 = 擦除对象的当前值 + 用新值代替&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列表初始化&lt;/strong&gt;：使用花括号&lt;code&gt;{}&lt;/code&gt;，如&lt;code&gt;int units_sold{0};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认初始化：定义时没有指定初始值会被默认初始化；&lt;strong&gt;在函数体内部的内置类型变量将不会被初始化&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;建议初始化每一个内置类型的变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;变量的声明declaration-vs-定义define&#34;&gt;变量的&lt;strong&gt;声明&lt;/strong&gt;（declaration） vs &lt;strong&gt;定义&lt;/strong&gt;（define）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为了支持分离式编译，&lt;code&gt;C++&lt;/code&gt;将声明和定义区分开。&lt;strong&gt;声明&lt;/strong&gt;使得名字为程序所知。&lt;strong&gt;定义&lt;/strong&gt;负责创建与名字关联的实体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extern&lt;/strong&gt;：只是说明变量定义在其他地方。&lt;/li&gt;
&lt;li&gt;只声明而不定义： 在变量名前添加关键字 &lt;code&gt;extern&lt;/code&gt;，如&lt;code&gt;extern int i;&lt;/code&gt;。但如果包含了初始值，就变成了定义：&lt;code&gt;extern double pi = 3.14;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;变量只能被定义一次，但是可以多次声明。定义只出现在一个文件中，其他文件使用该变量时需要对其声明。&lt;/li&gt;
&lt;li&gt;名字的&lt;strong&gt;作用域&lt;/strong&gt;（namescope）&lt;code&gt;{}&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;第一次使用变量时再定义它&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;嵌套的作用域
&lt;ul&gt;
&lt;li&gt;同时存在全局和局部变量时，已定义局部变量的作用域中可用&lt;code&gt;::reused&lt;/code&gt;显式访问全局变量 reused。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;但是用到全局变量时，尽量不适用重名的局部变量。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;变量命名规范&#34;&gt;变量命名规范&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;需体现实际意义&lt;/li&gt;
&lt;li&gt;变量名用小写字母&lt;/li&gt;
&lt;li&gt;自定义类名用大写字母开头：Sales_item&lt;/li&gt;
&lt;li&gt;标识符由多个单词组成，中间须有明确区分：student_loan 或 studentLoan，不要用 studentloan。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;左值和右值&#34;&gt;左值和右值&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;左值&lt;/strong&gt;（l-value）&lt;strong&gt;可以&lt;/strong&gt;出现在赋值语句的左边或者右边，比如变量；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;右值&lt;/strong&gt;（r-value）&lt;strong&gt;只能&lt;/strong&gt;出现在赋值语句的右边，比如常量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;复合类型&#34;&gt;复合类型&lt;/h2&gt;
&lt;h3 id=&#34;引用&#34;&gt;引用&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;一般说的引用是指的左值引用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;引用&lt;/strong&gt;：引用是一个对象的别名，引用类型引用（refer to）另外一种类型。如&lt;code&gt;int &amp;amp;refVal = val;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;引用必须初始化。&lt;/li&gt;
&lt;li&gt;引用和它的初始值是&lt;strong&gt;绑定 bind&lt;/strong&gt;在一起的，而&lt;strong&gt;不是拷贝&lt;/strong&gt;。一旦定义就不能更改绑定为其他的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指针&#34;&gt;指针&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;int *p&lt;/code&gt;; //&lt;strong&gt;指向 int 型对象&lt;/strong&gt;的指针&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;是一种 &lt;code&gt;&amp;quot;指向（point to）&amp;quot;&lt;/code&gt;另外一种类型的复合类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;指针类型： &lt;code&gt;int *ip1;&lt;/code&gt;，&lt;strong&gt;从右向左读有助于阅读&lt;/strong&gt;，&lt;code&gt;ip1&lt;/code&gt;是指向&lt;code&gt;int&lt;/code&gt;类型的指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针存放某个对象的&lt;strong&gt;地址&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获取对象的地址： &lt;code&gt;int i=42; int *p = &amp;amp;i;&lt;/code&gt;。&lt;code&gt;&amp;amp;&lt;/code&gt;是&lt;strong&gt;取地址符&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针的类型与所指向的对象类型必须一致（均为同一类型 int、double 等）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针的值的四种状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.指向一个对象；&lt;/li&gt;
&lt;li&gt;2.指向紧邻对象的下一个位置；&lt;/li&gt;
&lt;li&gt;3.空指针；&lt;/li&gt;
&lt;li&gt;4.无效指针。&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;对无效指针的操作均会引发错误，第二种和第三种虽为有效的，但理论上是不被允许的&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;指针访问对象： &lt;code&gt;cout &amp;lt;&amp;lt; *p;&lt;/code&gt;输出 p 指针所指对象的数据， &lt;code&gt;*&lt;/code&gt;是&lt;strong&gt;解引用符&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;空指针不指向任何对象。使用&lt;code&gt;int *p = nullptr;&lt;/code&gt;来使用空指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;指针和引用的区别：引用本身并非一个对象，引用定义后就不能绑定到其他的对象了；指针并没有此限制，相当于变量一样使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;blockquote&gt;
&lt;p&gt;赋值语句永远改变的是&lt;strong&gt;左侧&lt;/strong&gt;的对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;void*&lt;/code&gt;指针可以存放&lt;strong&gt;任意&lt;/strong&gt;对象的地址。因无类型，仅操作内存空间，对所存对象无法访问。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;其他指针类型必须要与所指对象&lt;strong&gt;严格匹配&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两个指针相减的类型是&lt;code&gt;ptrdiff_t&lt;/code&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;建议：初始化所有指针。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;int* p1, p2;//*是对p1的修饰，所以p2还是int型&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;const-限定符&#34;&gt;const 限定符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动机：希望定义一些不能被改变值的变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;初始化和-const&#34;&gt;初始化和 const&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;const 对象&lt;strong&gt;必须初始化&lt;/strong&gt;，且&lt;strong&gt;不能被改变&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;const 变量默认不能被其他文件访问，非要访问，必须在指定 const 定义之前加 extern。要想在多个文件中使用 const 变量共享，定义和声明都加 const 关键字即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;const-的引用&#34;&gt;const 的引用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reference to const&lt;/strong&gt;（对常量的引用）：指向 const 对象的引用，如 &lt;code&gt;const int ival=1; const int &amp;amp;refVal = ival;&lt;/code&gt;，可以读取但不能修改&lt;code&gt;refVal&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;临时量&lt;/strong&gt;（temporary）对象：当编译器需要一个空间来暂存表达式的求值结果时，临时创建的一个未命名的对象。&lt;/li&gt;
&lt;li&gt;对临时量的引用是非法行为。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;指针和-const&#34;&gt;指针和 const&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pointer to const&lt;/strong&gt;（指向常量的指针）：不能用于改变其所指对象的值, 如 &lt;code&gt;const double pi = 3.14; const double *cptr = &amp;amp;pi;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const pointer&lt;/strong&gt;：指针本身是常量，也就是说指针固定指向该对象，（存放在指针中的地址不变，地址所对应的那个对象值可以修改）如 &lt;code&gt;int i = 0; int *const ptr = &amp;amp;i;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;顶层-const&#34;&gt;顶层 const&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;顶层const&lt;/code&gt;：指针本身是个常量。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;底层const&lt;/code&gt;：指针指向的对象是个常量。拷贝时严格要求相同的底层 const 资格。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constexpr-和常量表达式-可选&#34;&gt;&lt;code&gt;constexpr&lt;/code&gt; 和常量表达式（▲ 可选）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;常量表达式：指值不会改变，且在编译过程中就能得到计算结果的表达式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++11&lt;/code&gt; 新标准规定，允许将变量声明为&lt;code&gt;constexpr&lt;/code&gt;类型以便由编译器来验证变量的值是否是一个常量的表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;处理类型&#34;&gt;处理类型&lt;/h2&gt;
&lt;h3 id=&#34;类型别名&#34;&gt;类型别名&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;传统别名：使用&lt;strong&gt;typedef&lt;/strong&gt;来定义类型的同义词。&lt;code&gt;typedef double wages;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;新标准别名：别名声明（alias declaration）： &lt;code&gt;using SI = Sales_item;&lt;/code&gt;（C++11）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 对于复合类型（指针等）不能代回原式来进行理解
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pstring&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// pstring是char*的别名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pstring&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cstr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 指向char的常量指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 如改写为const char *cstr = 0;不正确，为指向const char的指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 辅助理解（可代回后加括号）
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// const pstring cstr = 0;代回后const (char *) cstr = 0;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// const char *cstr = 0;即为(const char *) cstr = 0;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;auto-类型说明符-c11&#34;&gt;auto 类型说明符 c++11&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;auto&lt;/strong&gt;类型说明符：让编译器&lt;strong&gt;自动推断类型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;一条声明语句只能有一个数据类型，所以一个 auto 声明多个变量时只能相同的变量类型(包括复杂类型 &amp;amp; 和 &lt;code&gt;*&lt;/code&gt;)。&lt;code&gt;auto sz = 0, pi =3.14//错误&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int i = 0, &amp;amp;r = i; auto a = r;&lt;/code&gt; 推断&lt;code&gt;a&lt;/code&gt;的类型是&lt;code&gt;int&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;会忽略&lt;code&gt;顶层const&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const int ci = 1; const auto f = ci;&lt;/code&gt;推断类型是&lt;code&gt;int&lt;/code&gt;，如果希望是顶层 const 需要自己加&lt;code&gt;const&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;decltype-类型指示符&#34;&gt;decltype 类型指示符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从表达式的类型推断出要定义的变量的类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;decltype&lt;/strong&gt;：选择并返回操作数的&lt;strong&gt;数据类型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decltype(f()) sum = x;&lt;/code&gt; 推断&lt;code&gt;sum&lt;/code&gt;的类型是函数&lt;code&gt;f&lt;/code&gt;的返回类型。&lt;/li&gt;
&lt;li&gt;不会忽略&lt;code&gt;顶层const&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果对变量加括号，编译器会将其认为是一个表达式，如 int i&amp;ndash;&amp;gt;(i),则 decltype((i))得到结果为 int&amp;amp;引用。&lt;/li&gt;
&lt;li&gt;赋值是会产生引用的一类典型表达式，引用的类型就是左值的类型。也就是说，如果 i 是 int，则表达式 i=x 的类型是 int&amp;amp;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++11&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自定义数据结构&#34;&gt;自定义数据结构&lt;/h2&gt;
&lt;h3 id=&#34;struct&#34;&gt;struct&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;尽量不要吧类定义和对象定义放在一起。如&lt;code&gt;struct Student{} xiaoming,xiaofang;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;类可以以关键字&lt;code&gt;struct&lt;/code&gt;开始，紧跟类名和类体。&lt;/li&gt;
&lt;li&gt;类数据成员：类体定义类的成员。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++11&lt;/code&gt;：可以为类数据成员提供一个&lt;strong&gt;类内初始值&lt;/strong&gt;（in-class initializer）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编写自己的头文件&#34;&gt;编写自己的头文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;头文件通常包含哪些只能被定义一次的实体：类、&lt;code&gt;const&lt;/code&gt; 和 &lt;code&gt;constexpr&lt;/code&gt; 变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;预处理器概述：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;预处理器&lt;/strong&gt;（preprocessor）：确保头文件多次包含仍能安全工作。&lt;/li&gt;
&lt;li&gt;当预处理器看到&lt;code&gt;#include&lt;/code&gt;标记时，会用指定的头文件内容代替&lt;code&gt;#include&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;头文件保护符&lt;/strong&gt;（header guard）：头文件保护符依赖于预处理变量的状态：已定义和未定义。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#indef&lt;/code&gt; 已定义时为真&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#inndef&lt;/code&gt; 未定义时为真&lt;/li&gt;
&lt;li&gt;头文件保护符的名称需要唯一，且保持全部大写。养成良好习惯，不论是否该头文件被包含，要加保护符。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifndef SALES_DATA_H  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//SALES_DATA_H 未定义时为真
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#define SALES_DATA_H
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;strct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Sale_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>03.字符串、向量和数组</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/03.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/03.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</guid>
      <description>&lt;h1 id=&#34;第三章-字符串向量和数组&#34;&gt;第三章 字符串、向量和数组&lt;/h1&gt;
&lt;h2 id=&#34;using-声明&#34;&gt;using 声明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用某个命名空间：例如 &lt;code&gt;using std::cin&lt;/code&gt;表示使用命名空间&lt;code&gt;std&lt;/code&gt;中的名字&lt;code&gt;cin&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;头文件中不应该包含&lt;code&gt;using&lt;/code&gt;声明。这样使用了该头文件的源码也会使用这个声明，会带来风险。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;string&#34;&gt;string&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;标准库类型 &lt;code&gt;string&lt;/code&gt; 表示可变长的字符序列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;&lt;/code&gt;，然后 &lt;code&gt;using std::string;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;string 对象&lt;/strong&gt;：注意，不同于字符串字面值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定义和初始化-string-对象&#34;&gt;定义和初始化 string 对象&lt;/h3&gt;
&lt;p&gt;初始化&lt;code&gt;string&lt;/code&gt;对象的方式：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方式&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认初始化，&lt;code&gt;s1&lt;/code&gt;是个空字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s2(s1)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;s2&lt;/code&gt;是&lt;code&gt;s1&lt;/code&gt;的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s2 = s1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;s2(s1)&lt;/code&gt;，&lt;code&gt;s2&lt;/code&gt;是&lt;code&gt;s1&lt;/code&gt;的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s3(&amp;quot;value&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;s3&lt;/code&gt;是字面值“value”的副本，除了字面值最后的那个空字符外&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s3 = &amp;quot;value&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;s3(&amp;quot;value&amp;quot;)&lt;/code&gt;，&lt;code&gt;s3&lt;/code&gt;是字面值&amp;quot;value&amp;quot;的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s4(n, &#39;c&#39;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;把&lt;code&gt;s4&lt;/code&gt;初始化为由连续&lt;code&gt;n&lt;/code&gt;个字符&lt;code&gt;c&lt;/code&gt;组成的串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;拷贝初始化（copy initialization）：使用等号 &lt;code&gt;=&lt;/code&gt; 将一个已有的对象拷贝到正在创建的对象。&lt;/li&gt;
&lt;li&gt;直接初始化（direct initialization）：通过括号给对象赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;string-对象上的操作&#34;&gt;string 对象上的操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;string&lt;/code&gt;的操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;s&lt;/code&gt;写到输出流&lt;code&gt;os&lt;/code&gt;当中，返回&lt;code&gt;os&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;is&lt;/code&gt;中读取字符串赋给&lt;code&gt;s&lt;/code&gt;，字符串以空白分割，返回&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;getline(is, s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;is&lt;/code&gt;中读取一行赋给&lt;code&gt;s&lt;/code&gt;，返回&lt;code&gt;is&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;为空返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;中字符的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s[n]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;中第&lt;code&gt;n&lt;/code&gt;个字符的引用，位置&lt;code&gt;n&lt;/code&gt;从 0 计起&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s1+s2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;连接后的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s1=s2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用&lt;code&gt;s2&lt;/code&gt;的副本代替&lt;code&gt;s1&lt;/code&gt;中原来的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s1==s2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果&lt;code&gt;s1&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;中所含的字符完全一样，则它们相等；&lt;code&gt;string&lt;/code&gt;对象的相等性判断对字母的大小写敏感&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s1!=s2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;利用字符在字典中的顺序进行比较，且对字母的大小写敏感（对第一个不相同的位置进行比较）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;string io：
&lt;ul&gt;
&lt;li&gt;执行读操作&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;：忽略掉开头的空白（包括空格、换行符和制表符），直到遇到下一处空白为止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getline&lt;/code&gt;：读取一整行，&lt;strong&gt;包括空白符&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.size()&lt;/code&gt;返回的时&lt;code&gt;string::size_type&lt;/code&gt;类型，记住是一个&lt;strong&gt;无符号&lt;/strong&gt;类型的值，不要和&lt;code&gt;int&lt;/code&gt;混用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s1+s2&lt;/code&gt;使用时，保证至少一侧是 string 类型。&lt;code&gt;string s1 = &amp;quot;hello&amp;quot; + &amp;quot;world&amp;quot; // 错误，两侧均为字符串字面值&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符串字面值和 string 是不同的类型。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;处理-string-对象中的字符&#34;&gt;处理 string 对象中的字符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ctype.h vs. cctype&lt;/strong&gt;：C++修改了 c 的标准库，名称为去掉&lt;code&gt;.h&lt;/code&gt;，前面加&lt;code&gt;c&lt;/code&gt;。
&lt;blockquote&gt;
&lt;p&gt;如 c++版本为&lt;code&gt;cctype&lt;/code&gt;，c 版本为&lt;code&gt;ctype.h&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;尽量使用 c++版本的头文件&lt;/strong&gt;，即&lt;code&gt;cctype&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cctype&lt;/code&gt;头文件中定义了一组标准函数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isalnum(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是字母或数字时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isalpha(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是字母时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iscntrl(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是控制字符时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isdigit(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是数字时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isgraph(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;不是空格但可以打印时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;islower(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是小写字母时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isprint(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是可打印字符时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ispunct(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是标点符号时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isspace(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是空白时为真（空格、横向制表符、纵向制表符、回车符、换行符、进纸符）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isupper(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是大写字母时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isxdigit(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是十六进制数字时为真&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tolower(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是大写字母，输出对应的小写字母；否则原样输出&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;toupper(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;c&lt;/code&gt;是小写字母，输出对应的大写字母；否则原样输出&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;遍历字符串：使用&lt;strong&gt;范围 for&lt;/strong&gt;（range for）语句： &lt;code&gt;for (auto c: str)&lt;/code&gt;，或者 &lt;code&gt;for (auto &amp;amp;c: str)&lt;/code&gt;使用引用直接改变字符串中的字符。（C++11）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str[x]&lt;/code&gt;,[]输入参数为&lt;code&gt;string::size_type&lt;/code&gt;类型，给出&lt;code&gt;int&lt;/code&gt;整型也会自动转化为该类型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vector&#34;&gt;vector&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;vector 是一个&lt;strong&gt;容器&lt;/strong&gt;，也是一个类模板；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;vector&amp;gt;&lt;/code&gt; 然后 &lt;code&gt;using std::vector;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;容器：包含其他对象。&lt;/li&gt;
&lt;li&gt;类模板：本身不是类，但可以&lt;strong&gt;实例化 instantiation&lt;/strong&gt;出一个类。&lt;code&gt;vector&lt;/code&gt;是一个模板， &lt;code&gt;vector&amp;lt;int&amp;gt;&lt;/code&gt;是一个类型。&lt;/li&gt;
&lt;li&gt;通过将类型放在类模板名称后面的&lt;strong&gt;尖括号&lt;/strong&gt;中来指定&lt;strong&gt;类型&lt;/strong&gt;，如&lt;code&gt;vector&amp;lt;int&amp;gt; ivec&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定义和初始化-vector-对象&#34;&gt;定义和初始化 vector 对象&lt;/h3&gt;
&lt;p&gt;初始化&lt;code&gt;vector&lt;/code&gt;对象的方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1&lt;/code&gt;是一个空&lt;code&gt;vector&lt;/code&gt;，它潜在的元素是&lt;code&gt;T&lt;/code&gt;类型的，执行默认初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v2(v1)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v2&lt;/code&gt;中包含有&lt;code&gt;v1&lt;/code&gt;所有元素的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v2 = v1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;v2(v1)&lt;/code&gt;，&lt;code&gt;v2&lt;/code&gt;中包含&lt;code&gt;v1&lt;/code&gt;所有元素的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v3(n, val)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v3&lt;/code&gt;包含了 n 个重复的元素，每个元素的值都是&lt;code&gt;val&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v4(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v4&lt;/code&gt;包含了 n 个重复地执行了值初始化的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v5{a, b, c...}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v5&lt;/code&gt;包含了初始值个数的元素，每个元素被赋予相应的初始值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&amp;lt;T&amp;gt; v5={a, b, c...}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;v5{a, b, c...}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;列表初始化： &lt;code&gt;vector&amp;lt;string&amp;gt; v{&amp;quot;a&amp;quot;, &amp;quot;an&amp;quot;, &amp;quot;the&amp;quot;};&lt;/code&gt; （C++11）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;向-vector-对象中添加元素&#34;&gt;向 vector 对象中添加元素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v.push_back(e)&lt;/code&gt; 在尾部增加元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他-vector-操作&#34;&gt;其他 vector 操作&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;支持的操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v.emtpy()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果&lt;code&gt;v&lt;/code&gt;不含有任何元素，返回真；否则返回假&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v.size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;v&lt;/code&gt;中元素的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v.push_back(t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向&lt;code&gt;v&lt;/code&gt;的尾端添加一个值为&lt;code&gt;t&lt;/code&gt;的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v[n]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;v&lt;/code&gt;中第&lt;code&gt;n&lt;/code&gt;个位置上元素的&lt;strong&gt;引用&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v1 = v2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用&lt;code&gt;v2&lt;/code&gt;中的元素拷贝替换&lt;code&gt;v1&lt;/code&gt;中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v1 = {a,b,c...}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用列表中元素的拷贝替换&lt;code&gt;v1&lt;/code&gt;中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v1 == v2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;相等当且仅当它们的元素数量相同且对应位置的元素值都相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;v1 != v2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;lt;=&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以字典顺序进行比较&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;范围&lt;code&gt;for&lt;/code&gt;语句内不应该改变其遍历序列的大小。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;对象（以及&lt;code&gt;string&lt;/code&gt;对象）的下标运算符，只能对确知已存在的元素执行下标操作，不能用于添加元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代器-iterator&#34;&gt;迭代器 iterator&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;所有标准库容器都可以使用迭代器。&lt;/li&gt;
&lt;li&gt;类似于指针类型，迭代器也提供了对对象的间接访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用迭代器&#34;&gt;使用迭代器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&amp;lt;int&amp;gt;::iterator iter&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto b = v.begin();&lt;/code&gt;返回指向第一个元素的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto e = v.end();&lt;/code&gt;返回指向最后一个元素的下一个（哨兵，尾后,one past the end）的迭代器（off the end）。&lt;/li&gt;
&lt;li&gt;如果容器为空， &lt;code&gt;begin()&lt;/code&gt;和 &lt;code&gt;end()&lt;/code&gt;返回的是同一个迭代器，都是尾后迭代器。&lt;/li&gt;
&lt;li&gt;使用解引用符&lt;code&gt;*&lt;/code&gt;访问迭代器指向的元素。&lt;/li&gt;
&lt;li&gt;养成使用迭代器和&lt;code&gt;!=&lt;/code&gt;的习惯（泛型编程）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;容器&lt;/strong&gt;：可以包含其他对象；但所有的对象必须类型相同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;迭代器（iterator）&lt;/strong&gt;：每种标准容器都有自己的迭代器。&lt;code&gt;C++&lt;/code&gt;倾向于用迭代器而不是下标遍历元素。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;const_iterator&lt;/strong&gt;：只能读取容器内元素不能改变。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;箭头运算符&lt;/strong&gt;： 解引用 + 成员访问，&lt;code&gt;it-&amp;gt;mem&lt;/code&gt;等价于 &lt;code&gt;(*it).mem&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;谨记&lt;/strong&gt;：但凡是使用了&lt;strong&gt;迭代器&lt;/strong&gt;的循环体，都&lt;strong&gt;不要&lt;/strong&gt;向迭代器所属的容器&lt;strong&gt;添加元素&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准容器迭代器的运算符:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*iter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回迭代器&lt;code&gt;iter&lt;/code&gt;所指向的&lt;strong&gt;元素的引用&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iter-&amp;gt;mem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;(*iter).mem&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;++iter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;令&lt;code&gt;iter&lt;/code&gt;指示容器中的下一个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--iter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;令&lt;code&gt;iter&lt;/code&gt;指示容器中的上一个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iter1 == iter2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断两个迭代器是否相等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;迭代器运算&#34;&gt;迭代器运算&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;迭代器支持的运算：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iter + n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;迭代器加上一个整数值仍得到一个迭代器，迭代器指示的新位置和原来相比向前移动了若干个元素。结果迭代器或者指示容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iter - n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;迭代器减去一个证书仍得到一个迭代器，迭代器指示的新位置比原来向后移动了若干个元素。结果迭代器或者指向容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iter1 += n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;迭代器加法的复合赋值语句，将&lt;code&gt;iter1&lt;/code&gt;加 n 的结果赋给&lt;code&gt;iter1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iter1 -= n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;迭代器减法的复合赋值语句，将&lt;code&gt;iter2&lt;/code&gt;减 n 的加过赋给&lt;code&gt;iter1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iter1 - iter2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;两个迭代器相减的结果是它们之间的距离，也就是说，将运算符右侧的迭代器向前移动差值个元素后得到左侧的迭代器。参与运算的两个迭代器必须指向的是同一个容器中的元素或者尾元素的下一位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、&lt;code&gt;&amp;lt;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;迭代器的关系运算符，如果某迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;difference_type&lt;/strong&gt;：保证足够大以存储任何两个迭代器对象间的距离，可正可负。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;数组&#34;&gt;数组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;相当于 vector 的低级版，&lt;strong&gt;长度固定&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定义和初始化内置数组&#34;&gt;定义和初始化内置数组&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;初始化：&lt;code&gt;char input_buffer[buffer_size];&lt;/code&gt;，长度必须是 const 表达式，或者不写，让编译器自己推断。&lt;/li&gt;
&lt;li&gt;数组不允许直接赋值给另一个数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问数组元素&#34;&gt;访问数组元素&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;数组下标的类型：&lt;code&gt;size_t&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;字符数组的特殊性：结尾处有一个空字符，如 &lt;code&gt;char a[] = &amp;quot;hello&amp;quot;;&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;用数组初始化 &lt;code&gt;vector&lt;/code&gt;： &lt;code&gt;int a[] = {1,2,3,4,5}; vector&amp;lt;int&amp;gt; v(begin(a), end(a));&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数组和指针&#34;&gt;数组和指针&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用数组时，编译器一般会把它转换成指针。&lt;/li&gt;
&lt;li&gt;标准库类型限定使用的下标必须是无符号类型，而内置的下标可以处理负值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针访问数组&lt;/strong&gt;：在表达式中使用数组名时，名字会自动转换成指向数组的第一个元素的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c-风格字符串&#34;&gt;C 风格字符串&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;从 C 继承来的字符串。&lt;/li&gt;
&lt;li&gt;用空字符结束（&lt;code&gt;\0&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;对大多数应用来说，使用标准库 &lt;code&gt;string&lt;/code&gt;比使用 C 风格字符串更安全、更高效。&lt;/li&gt;
&lt;li&gt;获取 &lt;code&gt;string&lt;/code&gt; 中的 &lt;code&gt;cstring&lt;/code&gt;： &lt;code&gt;const char *str = s.c_str();&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C 标准库 String 函数，定义在&lt;code&gt;&amp;lt;cstring&amp;gt;&lt;/code&gt; 中：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strlen(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;的长度，空字符不计算在内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strcmp(p1, p2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较&lt;code&gt;p1&lt;/code&gt;和&lt;code&gt;p2&lt;/code&gt;的相等性。如果&lt;code&gt;p1==p2&lt;/code&gt;，返回 0；如果&lt;code&gt;p1&amp;gt;p2&lt;/code&gt;，返回一个正值；如果&lt;code&gt;p1&amp;lt;p2&lt;/code&gt;，返回一个负值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strcat(p1, p2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;p2&lt;/code&gt;附加到&lt;code&gt;p1&lt;/code&gt;之后，返回&lt;code&gt;p1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strcpy(p1, p2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;p2&lt;/code&gt;拷贝给&lt;code&gt;p1&lt;/code&gt;，返回&lt;code&gt;p1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;尽量使用 vector 和迭代器，少用数组&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;多维数组&#34;&gt;多维数组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;多维数组的初始化&lt;/strong&gt;： &lt;code&gt;int ia[3][4] = {{0,1,2,3}, ...}&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用范围 for 语句时，除了最内层的循环外，其他所有循环的控制变量都应该是&lt;strong&gt;引用&lt;/strong&gt;类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指针-vs-引用&#34;&gt;指针 vs 引用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;引用总是指向某个对象，定义引用时没有初始化是错的。&lt;/li&gt;
&lt;li&gt;给引用赋值，修改的是该引用所关联的对象的值，而不是让引用和另一个对象相关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;指向指针的指针&#34;&gt;指向指针的指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义： &lt;code&gt;int **ppi = &amp;amp;pi;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;解引用：&lt;code&gt;**ppi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态数组&#34;&gt;动态数组&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;new&lt;/code&gt;和 &lt;code&gt;delete&lt;/code&gt;表达和 c 中&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;类似的功能，即在堆（自由存储区）中分配存储空间。&lt;/li&gt;
&lt;li&gt;定义： &lt;code&gt;int *pia = new int[10];&lt;/code&gt; 10 可以被一个变量替代。&lt;/li&gt;
&lt;li&gt;释放： &lt;code&gt;delete [] pia;&lt;/code&gt;，注意不要忘记&lt;code&gt;[]&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>04.表达式</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/04.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/04.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;第四章-表达式&#34;&gt;第四章 表达式&lt;/h1&gt;
&lt;h2 id=&#34;表达式基础&#34;&gt;表达式基础&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;运算对象转换&lt;/strong&gt;：小整数类型会被提升为较大的整数类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重载运算符&lt;/strong&gt;：当运算符作用在类类型的运算对象时，用户可以自行定义其含义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;左值和右值&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;C 中原意：左值&lt;strong&gt;可以&lt;/strong&gt;在表达式左边，右值不能。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++&lt;/code&gt;：当一个对象被用作&lt;strong&gt;右值&lt;/strong&gt;的时候，用的是对象的&lt;strong&gt;值&lt;/strong&gt;（内容）；&lt;/li&gt;
&lt;li&gt;被用做&lt;strong&gt;左值&lt;/strong&gt;时，用的是对象的&lt;strong&gt;身份&lt;/strong&gt;（在内存中的位置）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;求值顺序&lt;/strong&gt;：&lt;code&gt;int i = f1() + f2()&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;先计算&lt;code&gt;f1() + f2()&lt;/code&gt;,再计算&lt;code&gt;int i = f1() + f2()&lt;/code&gt;。但是 f1 和 f2 的计算&lt;strong&gt;先后不确定&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;但是，如果 f1、f2 都对同一对象进行了修改，因为顺序不确定，所以会编译出错，显示未定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算术运算符&#34;&gt;算术运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;溢出&lt;/strong&gt;：当计算的结果超出该类型所能表示的范围时就会产生溢出。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bool 类型不应该参与计算&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;//仍然为true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//b为true，提升为对应int=1，-b=-1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//b2=-1≠0，所以b2仍未true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;取余运算 m%n，结果符号与 m 相同&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;逻辑运算符&#34;&gt;逻辑运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;短路求值&lt;/strong&gt;：逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。&lt;strong&gt;先左再右&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;小技巧，声明为引用类型可以避免对元素的拷贝，如下，如 string 特别大时可以节省大量时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nl&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;赋值运算符&#34;&gt;赋值运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;赋值运算的&lt;strong&gt;返回结果时它的左侧运算对象&lt;/strong&gt;，且是一个左值。类型也就是左侧对象的类型。&lt;/li&gt;
&lt;li&gt;如果赋值运算的左右侧运算对象类型不同，则右侧运算对象将转换成左侧运算对象的类型。&lt;/li&gt;
&lt;li&gt;赋值运算符满足&lt;strong&gt;右结合律&lt;/strong&gt;，这点和其他二元运算符不一样。&lt;code&gt;ival = jval = 0;&lt;/code&gt;等价于&lt;code&gt;ival = (jval = 0);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;赋值运算优先级比较低，使用其当条件时应该加括号。&lt;/li&gt;
&lt;li&gt;复合赋值运算符，&lt;strong&gt;复合运算符只求值一次&lt;/strong&gt;，普通运算符求值两次。（对性能有一点点点点影响）
任意复合运算符 op 等价于&lt;code&gt;a = a op b;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;递增递减运算符&#34;&gt;递增递减运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;前置版本&lt;code&gt;j = ++i&lt;/code&gt;，先加一后赋值&lt;/li&gt;
&lt;li&gt;后置版本&lt;code&gt;j = i++&lt;/code&gt;，先赋值后加一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;优先使用前置&lt;/strong&gt;版本，后置多一步储存原始值。（除非需要变化前的值）&lt;/p&gt;
&lt;h3 id=&#34;混用解引用和递增运算符&#34;&gt;混用解引用和递增运算符&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;*iter++&lt;/code&gt;等价于&lt;code&gt;*(iter++)&lt;/code&gt;，递增优先级较高&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;vi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// 输出当前值，指针向前移1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;简介是一种美德&lt;/strong&gt;，追求简洁能降低程序出错可能性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;成员访问运算符&#34;&gt;成员访问运算符&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ptr-&amp;gt;mem&lt;/code&gt;等价于&lt;code&gt;(*ptr).mem&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;.&lt;/code&gt;运算符优先级大于&lt;code&gt;*&lt;/code&gt;，所以记得加括号&lt;/p&gt;
&lt;h2 id=&#34;条件运算符&#34;&gt;条件运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件运算符（&lt;code&gt;?:&lt;/code&gt;）允许我们把简单的&lt;code&gt;if-else&lt;/code&gt;逻辑嵌入到单个表达式中去，按照如下形式：&lt;code&gt;cond? expr1: expr2&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以嵌套使用，&lt;strong&gt;右结合律&lt;/strong&gt;，从右向左顺序组合&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;finalgrade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;high pass&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;//等价于
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;finalgrade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;high pass&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;（&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grade&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;fail&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pass&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;）&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;输出表达式使用条件运算符记得加括号，条件运算符优先级太低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;位运算符&#34;&gt;位运算符&lt;/h2&gt;
&lt;p&gt;用于检查和设置二进制位的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;位运算符是作用于&lt;strong&gt;整数类型&lt;/strong&gt;的运算对象。&lt;/li&gt;
&lt;li&gt;二进制位向左移（&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;）或者向右移（&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;），移出边界外的位就被舍弃掉了。&lt;/li&gt;
&lt;li&gt;位取反（&lt;code&gt;~&lt;/code&gt;）（逐位求反）、与（&lt;code&gt;&amp;amp;&lt;/code&gt;）、或（&lt;code&gt;|&lt;/code&gt;）、异或（&lt;code&gt;^&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有符号数负值可能移位后变号，所以强烈建议&lt;strong&gt;位运算符仅用于无符号数&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;应用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 每一位代表一个学生是否通过考试
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 代表第12个学生通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 将第12个学生置为已通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;~&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 将第12个学生修改为未通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stu12&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;quiz1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1UL&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 判断第12个学生是否通过
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;位运算符使用较少，但是重载 cout、cin 大家都用过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;位运算符满足左结合律，优先级介于中间，使用时尽量加括号。&lt;/p&gt;
&lt;h2 id=&#34;sizeof-运算符&#34;&gt;sizeof 运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;返回一条表达式或一个类型名字所占的&lt;strong&gt;字节数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;返回的类型是 &lt;code&gt;size_t&lt;/code&gt;的常量表达式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeof&lt;/code&gt;并不实际计算其运算对象的值。&lt;/li&gt;
&lt;li&gt;两种形式：
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;sizeof (type)&lt;/code&gt;，给出类型名&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeof expr&lt;/code&gt;，给出表达式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;可用 sizeof 返回数组的大小&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// sizeof(ia)返回整个数组所占空间的大小
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// sizeof(ia)/sizeof(*ia)返回数组的大小
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;constexpr&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ia&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;逗号运算符&#34;&gt;逗号运算符&lt;/h2&gt;
&lt;p&gt;从左向右依次求值。&lt;/p&gt;
&lt;p&gt;左侧求值结果丢弃，逗号运算符&lt;strong&gt;结果是右侧表达式&lt;/strong&gt;的值。&lt;/p&gt;
&lt;h2 id=&#34;类型转换&#34;&gt;类型转换&lt;/h2&gt;
&lt;h3 id=&#34;隐式类型转换&#34;&gt;隐式类型转换&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;设计为尽可能避免损失精度，即转换为更精细类型。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;比 &lt;code&gt;int&lt;/code&gt;类型小的整数值先提升为较大的整数类型。&lt;/li&gt;
&lt;li&gt;条件中，非布尔转换成布尔。&lt;/li&gt;
&lt;li&gt;初始化中，初始值转换成变量的类型。&lt;/li&gt;
&lt;li&gt;算术运算或者关系运算的运算对象有多种类型，要转换成同一种类型。&lt;/li&gt;
&lt;li&gt;函数调用时也会有转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;算术转换&#34;&gt;算术转换&lt;/h4&gt;
&lt;h5 id=&#34;整型提升&#34;&gt;整型提升&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;常见的 char、bool、short 能存在 int 就会转换成 int，否则提升为&lt;code&gt;unsigned int&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;wchar_t,char16_t,char32_t&lt;/code&gt;提升为整型中&lt;code&gt;int,long,long long ……&lt;/code&gt;最小的，且能容纳原类型所有可能值的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;其他转换&#34;&gt;其他转换&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;p143&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;显式类型转换尽量避免&#34;&gt;显式类型转换（尽量避免）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;static_cast&lt;/strong&gt;：任何明确定义的类型转换，只要不包含底层 const，都可以使用。&lt;code&gt;double slope = static_cast&amp;lt;double&amp;gt;(j);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;dynamic_cast&lt;/strong&gt;：支持运行时类型识别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;const_cast&lt;/strong&gt;：只能改变运算对象的底层 const，一般可用于去除 const 性质。&lt;code&gt;const char *pc; char *p = const_cast&amp;lt;char*&amp;gt;(pc)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;只有其可以改变常量属性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;reinterpret_cast&lt;/strong&gt;：通常为运算对象的位模式提供低层次上的重新解释。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;旧式强制类型转换&#34;&gt;旧式强制类型转换&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;type expr&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;运算符优先级表&#34;&gt;运算符优先级表&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;p147&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>05.语句</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/05.%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/05.%E8%AF%AD%E5%8F%A5/</guid>
      <description>&lt;h1 id=&#34;第五章-语句&#34;&gt;第五章 语句&lt;/h1&gt;
&lt;h2 id=&#34;简单语句&#34;&gt;简单语句&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表达式语句&lt;/strong&gt;：一个表达式末尾加上分号，就变成了表达式语句。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;空语句&lt;/strong&gt;：只有一个单独的分号。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复合语句（块）&lt;/strong&gt;：用花括号 &lt;code&gt;{}&lt;/code&gt;包裹起来的语句和声明的序列。一个块就是一个作用域。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;条件语句&#34;&gt;条件语句&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;悬垂 else&lt;/strong&gt;（dangling else）：用来描述在嵌套的&lt;code&gt;if else&lt;/code&gt;语句中，如果&lt;code&gt;if&lt;/code&gt;比&lt;code&gt;else&lt;/code&gt;多时如何处理的问题。C++使用的方法是&lt;code&gt;else&lt;/code&gt;匹配最近没有配对的&lt;code&gt;if&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;迭代语句&#34;&gt;迭代语句&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;while&lt;/strong&gt;：当不确定到底要迭代多少次时，使用 &lt;code&gt;while&lt;/code&gt;循环比较合适，比如读取输入的内容。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;for&lt;/strong&gt;： &lt;code&gt;for&lt;/code&gt;语句可以省略掉 &lt;code&gt;init-statement&lt;/code&gt;， &lt;code&gt;condition&lt;/code&gt;和 &lt;code&gt;expression&lt;/code&gt;的任何一个；&lt;strong&gt;甚至全部&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;范围 for&lt;/strong&gt;： &lt;code&gt;for (declaration: expression) statement&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;跳转语句&#34;&gt;跳转语句&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;break&lt;/strong&gt;：&lt;code&gt;break&lt;/code&gt;语句负责终止离它最近的&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;do while&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;或者&lt;code&gt;switch&lt;/code&gt;语句，并从这些语句之后的第一条语句开始继续执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;continue&lt;/strong&gt;：终止最近的循环中的当前迭代并立即开始下一次迭代。只能在&lt;code&gt;while&lt;/code&gt;、&lt;code&gt;do while&lt;/code&gt;、&lt;code&gt;for&lt;/code&gt;循环的内部。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;try-语句块和异常处理&#34;&gt;try 语句块和异常处理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;throw 表达式&lt;/strong&gt;：异常检测部分使用 &lt;code&gt;throw&lt;/code&gt;表达式来表示它遇到了无法处理的问题。我们说 &lt;code&gt;throw&lt;/code&gt;引发 &lt;code&gt;raise&lt;/code&gt;了异常。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;try 语句块&lt;/strong&gt;：以 &lt;code&gt;try&lt;/code&gt;关键词开始，以一个或多个 &lt;code&gt;catch&lt;/code&gt;字句结束。&lt;code&gt;try&lt;/code&gt;语句块中的代码抛出的异常通常会被某个 &lt;code&gt;catch&lt;/code&gt;捕获并处理。&lt;code&gt;catch&lt;/code&gt;子句也被称为&lt;strong&gt;异常处理代码&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;异常类&lt;/strong&gt;：用于在 &lt;code&gt;throw&lt;/code&gt;表达式和相关的 &lt;code&gt;catch&lt;/code&gt;子句之间传递异常的具体信息。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>06.函数</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/06.%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/06.%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h1 id=&#34;第六章-函数&#34;&gt;第六章 函数&lt;/h1&gt;
&lt;h2 id=&#34;函数基础&#34;&gt;函数基础&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;函数定义&lt;/strong&gt;：包括返回类型、函数名字和 0 个或者多个&lt;strong&gt;形参&lt;/strong&gt;（parameter）组成的列表和函数体。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;调用运算符&lt;/strong&gt;：调用运算符的形式是一对圆括号 &lt;code&gt;()&lt;/code&gt;，作用于一个表达式，该表达式是函数或者指向函数的指针。&lt;/li&gt;
&lt;li&gt;圆括号内是用逗号隔开的&lt;strong&gt;实参&lt;/strong&gt;（argument）列表。&lt;/li&gt;
&lt;li&gt;函数调用过程：
&lt;ul&gt;
&lt;li&gt;1.主调函数（calling function）的执行被中断。&lt;/li&gt;
&lt;li&gt;2.被调函数（called function）开始执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;形参和实参&lt;/strong&gt;：形参和实参的&lt;strong&gt;个数&lt;/strong&gt;和&lt;strong&gt;类型&lt;/strong&gt;必须匹配上。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回类型&lt;/strong&gt;： &lt;code&gt;void&lt;/code&gt;表示函数不返回任何值。函数的返回类型不能是数组类型或者函数类型，但可以是指向数组或者函数的指针。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;名字&lt;/strong&gt;：名字的作用于是程序文本的一部分，名字在其中可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;局部对象&#34;&gt;局部对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;生命周期&lt;/strong&gt;：对象的生命周期是程序执行过程中该对象存在的一段时间。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部变量&lt;/strong&gt;（local variable）：形参和函数体内部定义的变量统称为局部变量。它对函数而言是局部的，对函数外部而言是&lt;strong&gt;隐藏&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;自动对象&lt;/strong&gt;：只存在于块执行期间的对象。当块的执行结束后，它的值就变成&lt;strong&gt;未定义&lt;/strong&gt;的了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部静态对象&lt;/strong&gt;： &lt;code&gt;static&lt;/code&gt;类型的局部变量，生命周期贯穿函数调用前后。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数声明&#34;&gt;函数声明&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;函数声明&lt;/strong&gt;：函数的声明和定义唯一的区别是声明无需函数体，用一个分号替代。函数声明主要用于描述函数的接口，也称&lt;strong&gt;函数原型&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;在头文件中进行函数声明&lt;/strong&gt;：建议变量在头文件中声明；在源文件中定义。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分离编译&lt;/strong&gt;： &lt;code&gt;CC a.cc b.cc&lt;/code&gt;直接编译生成可执行文件；&lt;code&gt;CC -c a.cc b.cc&lt;/code&gt;编译生成对象代码&lt;code&gt;a.o b.o&lt;/code&gt;； &lt;code&gt;CC a.o b.o&lt;/code&gt;编译生成可执行文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参数传递&#34;&gt;参数传递&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;形参初始化的机理和变量初始化一样。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用传递&lt;/strong&gt;（passed by reference）：又称传引用调用（called by reference），指&lt;strong&gt;形参是引用类型&lt;/strong&gt;，引用形参是它对应的实参的别名。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;值传递&lt;/strong&gt;（passed by value）：又称传值调用（called by value），指实参的值是通过&lt;strong&gt;拷贝&lt;/strong&gt;传递给形参。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;传值参数&#34;&gt;传值参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当初始化一个非引用类型的变量时，初始值被拷贝给变量。&lt;/li&gt;
&lt;li&gt;函数对形参做的所有操作都不会影响实参。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;指针形参&lt;/strong&gt;：常用在 C 中，&lt;code&gt;C++&lt;/code&gt;建议使用引用类型的形参代替指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;传引用参数&#34;&gt;传引用参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通过使用引用形参，允许函数改变一个或多个实参的值。&lt;/li&gt;
&lt;li&gt;引用形参直接关联到绑定的对象，而非对象的副本。&lt;/li&gt;
&lt;li&gt;使用引用形参可以用于&lt;strong&gt;返回额外的信息&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;经常用引用形参来避免不必要的复制。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void swap(int &amp;amp;v1, int &amp;amp;v2)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果无需改变引用形参的值，最好将其声明为常量引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;const-形参和实参&#34;&gt;const 形参和实参&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;形参的顶层&lt;code&gt;const&lt;/code&gt;被忽略。&lt;code&gt;void func(const int i);&lt;/code&gt;调用时既可以传入&lt;code&gt;const int&lt;/code&gt;也可以传入&lt;code&gt;int&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;我们可以使用非常量初始化一个底层&lt;code&gt;const&lt;/code&gt;对象，但是反过来不行。&lt;/li&gt;
&lt;li&gt;在函数中，不能改变实参的&lt;strong&gt;局部副本&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;尽量使用常量引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数组形参&#34;&gt;数组形参&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当我们为函数传递一个数组时，实际上传递的是指向数组首元素的指针。&lt;/li&gt;
&lt;li&gt;要注意数组的实际长度，不能越界。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;main-处理命令行选项&#34;&gt;main 处理命令行选项&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int main(int argc, char *argv[]){...}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;第一个形参代表参数的个数；第二个形参是参数 C 风格字符串数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可变形参&#34;&gt;可变形参&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;initializer_list&lt;/code&gt;提供的操作（&lt;code&gt;C++11&lt;/code&gt;）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;initializer_list&amp;lt;T&amp;gt; lst;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认初始化；&lt;code&gt;T&lt;/code&gt;类型元素的空列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;initializer_list&amp;lt;T&amp;gt; lst{a,b,c...};&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lst&lt;/code&gt;的元素数量和初始值一样多；&lt;code&gt;lst&lt;/code&gt;的元素是对应初始值的副本；列表中的元素是&lt;code&gt;const&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst2(lst)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;拷贝或赋值一个&lt;code&gt;initializer_list&lt;/code&gt;对象不会拷贝列表中的元素；拷贝后，原始列表和副本共享元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst2 = lst&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列表中的元素数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.begin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回指向&lt;code&gt;lst&lt;/code&gt;中首元素的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.end()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回指向&lt;code&gt;lst&lt;/code&gt;中微元素下一位置的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;initializer_list&lt;/code&gt;使用 demo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;err_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ErrCode&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initializer_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;il&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;msg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;il&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;il&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;beg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;beg&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;err_msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ErrCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;functionX&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;okay});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;所有实参类型相同，可以使用 &lt;code&gt;initializer_list&lt;/code&gt;的标准库类型。&lt;/li&gt;
&lt;li&gt;实参类型不同，可以使用&lt;code&gt;可变参数模板&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;省略形参符： &lt;code&gt;...&lt;/code&gt;，便于&lt;code&gt;C++&lt;/code&gt;访问某些 C 代码，这些 C 代码使用了 &lt;code&gt;varargs&lt;/code&gt;的 C 标准功能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;返回类型和-return-语句&#34;&gt;返回类型和 return 语句&lt;/h2&gt;
&lt;h3 id=&#34;无返回值函数&#34;&gt;无返回值函数&lt;/h3&gt;
&lt;p&gt;没有返回值的 &lt;code&gt;return&lt;/code&gt;语句只能用在返回类型是 &lt;code&gt;void&lt;/code&gt;的函数中，返回 &lt;code&gt;void&lt;/code&gt;的函数不要求非得有 &lt;code&gt;return&lt;/code&gt;语句。&lt;/p&gt;
&lt;h3 id=&#34;有返回值函数&#34;&gt;有返回值函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;return&lt;/code&gt;语句的返回值的类型必须和函数的返回类型相同，或者能够&lt;strong&gt;隐式地&lt;/strong&gt;转换成函数的返回类型。&lt;/li&gt;
&lt;li&gt;值的返回：返回的值用于初始化调用点的一个&lt;strong&gt;临时量&lt;/strong&gt;，该临时量就是函数调用的结果。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不要返回局部对象的引用或指针&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用返回左值&lt;/strong&gt;：函数的返回类型决定函数调用是否是左值。调用一个返回引用的函数得到左值；其他返回类型得到右值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;列表初始化返回值&lt;/strong&gt;：函数可以返回花括号包围的值的列表。（&lt;code&gt;C++11&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;主函数 main 的返回值&lt;/strong&gt;：如果结尾没有&lt;code&gt;return&lt;/code&gt;，编译器将隐式地插入一条返回 0 的&lt;code&gt;return&lt;/code&gt;语句。返回 0 代表执行成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;返回数组指针&#34;&gt;返回数组指针&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type (*function (parameter_list))[dimension]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用类型别名： &lt;code&gt;typedef int arrT[10];&lt;/code&gt; 或者 &lt;code&gt;using arrT = int[10;]&lt;/code&gt;，然后 &lt;code&gt;arrT* func() {...}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;decltype&lt;/code&gt;： &lt;code&gt;decltype(odd) *arrPtr(int i) {...}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;尾置返回类型&lt;/strong&gt;： 在形参列表后面以一个&lt;code&gt;-&amp;gt;&lt;/code&gt;开始：&lt;code&gt;auto func(int i) -&amp;gt; int(*)[10]&lt;/code&gt;（&lt;code&gt;C++11&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数重载&#34;&gt;函数重载&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重载&lt;/strong&gt;：如果同一作用域内几个函数名字相同但形参列表不同，我们称之为重载（overload）函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main&lt;/code&gt;函数不能重载。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重载和 const 形参&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;一个有顶层 const 的形参和没有它的函数无法区分。&lt;code&gt;Record lookup(Phone* const)&lt;/code&gt;和 &lt;code&gt;Record lookup(Phone*)&lt;/code&gt;无法区分。&lt;/li&gt;
&lt;li&gt;相反，是否有某个底层 const 形参可以区分。&lt;code&gt;Record lookup(Account*)&lt;/code&gt;和 &lt;code&gt;Record lookup(const Account*)&lt;/code&gt;可以区分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;重载和作用域&lt;/strong&gt;：若在内层作用域中声明名字，它将隐藏外层作用域中声明的同名实体，在不同的作用域中无法重载函数名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特殊用途语言特性&#34;&gt;特殊用途语言特性&lt;/h2&gt;
&lt;h3 id=&#34;默认实参&#34;&gt;默认实参&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string screen(sz ht = 24, sz wid = 80, char backgrnd = &#39; &#39;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一旦某个形参被赋予了默认值，那么它之后的形参都必须要有默认值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;内联inline函数&#34;&gt;内联（inline）函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;普通函数的缺点：调用函数比求解等价表达式要慢得多。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;函数可以避免函数调用的开销，可以让编译器在编译时&lt;strong&gt;内联地展开&lt;/strong&gt;该函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;函数应该在头文件中定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;constexpr-函数&#34;&gt;constexpr 函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;指能用于常量表达式的函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constexpr int new_sz() {return 42;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;函数的返回类型及所有形参类型都要是字面值类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;函数应该在头文件中定义。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;调试帮助&#34;&gt;调试帮助&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;assert&lt;/code&gt;预处理宏（preprocessor macro）：&lt;code&gt;assert(expr);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开关调试状态：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CC -D NDEBUG main.c&lt;/code&gt;可以定义这个变量&lt;code&gt;NDEBUG&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cp&#34;&gt;#ifndef NDEBUG
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;cerr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;__func__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;函数匹配&#34;&gt;函数匹配&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重载函数匹配的&lt;strong&gt;三个步骤&lt;/strong&gt;：1.候选函数；2.可行函数；3.寻找最佳匹配。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;候选函数&lt;/strong&gt;：选定本次调用对应的重载函数集，集合中的函数称为候选函数（candidate function）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可行函数&lt;/strong&gt;：考察本次调用提供的实参，选出可以被这组实参调用的函数，新选出的函数称为可行函数（viable function）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;寻找最佳匹配&lt;/strong&gt;：基本思想：实参类型和形参类型越接近，它们匹配地越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数指针&#34;&gt;函数指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;函数指针&lt;/strong&gt;：是指向函数的指针。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool (*pf)(const string &amp;amp;, const string &amp;amp;);&lt;/code&gt; 注：两端的括号不可少。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;函数指针形参&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;形参中使用函数定义或者函数指针定义效果一样。&lt;/li&gt;
&lt;li&gt;使用类型别名或者&lt;code&gt;decltype&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;返回指向函数的指针&lt;/strong&gt;：1.类型别名；2.尾置返回类型。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>07.类</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/07.%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/07.%E7%B1%BB/</guid>
      <description>&lt;h1 id=&#34;第七章-类-class&#34;&gt;第七章 类 （Class）&lt;/h1&gt;
&lt;h2 id=&#34;定义抽象数据类型&#34;&gt;定义抽象数据类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类背后的基本思想&lt;/strong&gt;：&lt;strong&gt;数据抽象&lt;/strong&gt;（data abstraction）和&lt;strong&gt;封装&lt;/strong&gt;（encapsulation）。&lt;/li&gt;
&lt;li&gt;数据抽象是一种依赖于&lt;strong&gt;接口&lt;/strong&gt;（interface）和&lt;strong&gt;实现&lt;/strong&gt;（implementation）分离的编程技术。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类成员-member&#34;&gt;类成员 （Member）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;必须在类的内部声明，不能在其他地方增加成员。&lt;/li&gt;
&lt;li&gt;成员可以是数据，函数，类型别名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类的成员函数&#34;&gt;类的成员函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;成员函数的&lt;strong&gt;声明&lt;/strong&gt;必须在类的内部。&lt;/li&gt;
&lt;li&gt;成员函数的&lt;strong&gt;定义&lt;/strong&gt;既可以在类的内部也可以在外部。&lt;/li&gt;
&lt;li&gt;使用点运算符 &lt;code&gt;.&lt;/code&gt; 调用成员函数。&lt;/li&gt;
&lt;li&gt;必须对任何&lt;code&gt;const&lt;/code&gt;或引用类型成员以及没有默认构造函数的类类型的任何成员使用初始化式。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ConstRef::ConstRef(int ii): i(ii), ci(i), ri(ii) { }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认实参： &lt;code&gt;Sales_item(const std::string &amp;amp;book): isbn(book), units_sold(0), revenue(0.0) { }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;*this&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;每个成员函数都有一个额外的，隐含的形参&lt;code&gt;this&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;this&lt;/code&gt;总是指向当前对象，因此&lt;code&gt;this&lt;/code&gt;是一个常量指针。&lt;/li&gt;
&lt;li&gt;形参表后面的&lt;code&gt;const&lt;/code&gt;，改变了隐含的&lt;code&gt;this&lt;/code&gt;形参的类型，如 &lt;code&gt;bool same_isbn(const Sales_item &amp;amp;rhs) const&lt;/code&gt;，这种函数称为“常量成员函数”（&lt;code&gt;this&lt;/code&gt;指向的当前对象是常量）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return *this;&lt;/code&gt;可以让成员函数连续调用。&lt;/li&gt;
&lt;li&gt;普通的非&lt;code&gt;const&lt;/code&gt;成员函数：&lt;code&gt;this&lt;/code&gt;是指向类类型的&lt;code&gt;const&lt;/code&gt;指针（可以改变&lt;code&gt;this&lt;/code&gt;所指向的值，不能改变&lt;code&gt;this&lt;/code&gt;保存的地址）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;成员函数：&lt;code&gt;this&lt;/code&gt;是指向 const 类类型的&lt;code&gt;const&lt;/code&gt;指针（既不能改变&lt;code&gt;this&lt;/code&gt;所指向的值，也不能改变&lt;code&gt;this&lt;/code&gt;保存的地址）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;非成员函数&#34;&gt;非成员函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和类相关的非成员函数，定义和声明都应该在类的外部。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类的构造函数&#34;&gt;类的构造函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做&lt;strong&gt;构造函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;构造函数是特殊的成员函数。&lt;/li&gt;
&lt;li&gt;构造函数放在类的&lt;code&gt;public&lt;/code&gt;部分。&lt;/li&gt;
&lt;li&gt;与类同名的成员函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sales_item(): units_sold(0), revenue(0.0) { }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;=default&lt;/code&gt;要求编译器合成默认的构造函数。(&lt;code&gt;C++11&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;初始化列表：冒号和花括号之间的代码： &lt;code&gt;Sales_item(): units_sold(0), revenue(0.0) { }&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;访问控制与封装&#34;&gt;访问控制与封装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;访问说明符&lt;/strong&gt;（access specifiers）：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public&lt;/code&gt;：定义在 &lt;code&gt;public&lt;/code&gt;后面的成员在整个程序内可以被访问； &lt;code&gt;public&lt;/code&gt;成员定义类的接口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;：定义在 &lt;code&gt;private&lt;/code&gt;后面的成员可以被类的成员函数访问，但不能被使用该类的代码访问； &lt;code&gt;private&lt;/code&gt;隐藏了类的实现细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;class&lt;/code&gt;或者 &lt;code&gt;struct&lt;/code&gt;：都可以被用于定义一个类。唯一的却别在于访问权限。
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;class&lt;/code&gt;：在第一个访问说明符之前的成员是 &lt;code&gt;priavte&lt;/code&gt;的。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;struct&lt;/code&gt;：在第一个访问说明符之前的成员是 &lt;code&gt;public&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;友元&#34;&gt;友元&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;允许特定的&lt;strong&gt;非成员函数&lt;/strong&gt;访问一个类的&lt;strong&gt;私有成员&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;友元的声明以关键字 &lt;code&gt;friend&lt;/code&gt;开始。&lt;code&gt;friend Sales_data add(const Sales_data&amp;amp;, const Sales_data&amp;amp;);&lt;/code&gt;表示非成员函数&lt;code&gt;add&lt;/code&gt;可以访问类的非公有成员。&lt;/li&gt;
&lt;li&gt;通常将友元声明成组地放在&lt;strong&gt;类定义的开始或者结尾&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;类之间的友元：
&lt;ul&gt;
&lt;li&gt;如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;封装的益处&#34;&gt;封装的益处&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;确保用户的代码不会无意间破坏封装对象的状态。&lt;/li&gt;
&lt;li&gt;被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类的其他特性&#34;&gt;类的其他特性&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;成员函数作为内联函数 &lt;code&gt;inline&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;在类的内部，常有一些规模较小的函数适合于被声明成内联函数。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义&lt;/strong&gt;在类内部的函数是&lt;strong&gt;自动内联&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;在类外部定义的成员函数，也可以在声明时显式地加上 &lt;code&gt;inline&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;可变数据成员&lt;/strong&gt; （mutable data member）：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mutable size_t access_ctr;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;永远不会是&lt;code&gt;const&lt;/code&gt;，即使它是&lt;code&gt;const&lt;/code&gt;对象的成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;类类型&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;每个类定义了唯一的类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类的作用域&#34;&gt;类的作用域&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个类都会定义它自己的作用域。在类的作用域之外，普通的数据和函数成员只能由引用、对象、指针使用成员访问运算符来访问。&lt;/li&gt;
&lt;li&gt;函数的&lt;strong&gt;返回类型&lt;/strong&gt;通常在函数名前面，因此当成员函数定义在类的外部时，返回类型中使用的名字都位于类的作用域之外。&lt;/li&gt;
&lt;li&gt;如果成员使用了外层作用域中的某个名字，而该名字代表一种&lt;strong&gt;类型&lt;/strong&gt;，则类不能在之后重新定义该名字。&lt;/li&gt;
&lt;li&gt;类中的&lt;strong&gt;类型名定义&lt;/strong&gt;都要放在一开始。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构造函数再探&#34;&gt;构造函数再探&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;构造函数初始值列表：
&lt;ul&gt;
&lt;li&gt;类似&lt;code&gt;python&lt;/code&gt;使用赋值的方式有时候不行，比如&lt;code&gt;const&lt;/code&gt;或者引用类型的数据，只能初始化，不能赋值。（注意初始化和赋值的区别）&lt;/li&gt;
&lt;li&gt;最好让构造函数初始值的顺序和成员声明的顺序保持一致。&lt;/li&gt;
&lt;li&gt;如果一个构造函数为所有参数都提供了默认参数，那么它实际上也定义了默认的构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;委托构造函数-delegating-constructor-c11&#34;&gt;委托构造函数 （delegating constructor, &lt;code&gt;C++11&lt;/code&gt;）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;委托构造函数将自己的职责委托给了其他构造函数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Sale_data(): Sale_data(&amp;quot;&amp;quot;, 0, 0) {}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;隐式的类型转换&#34;&gt;隐式的类型转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果构造函数&lt;strong&gt;只接受一个实参&lt;/strong&gt;，则它实际上定义了转换为此类类型的&lt;strong&gt;隐式转换机制&lt;/strong&gt;。这种构造函数又叫&lt;strong&gt;转换构造函数&lt;/strong&gt;（converting constructor）。&lt;/li&gt;
&lt;li&gt;编译器只会自动地执行&lt;code&gt;仅一步&lt;/code&gt;类型转换。&lt;/li&gt;
&lt;li&gt;抑制构造函数定义的隐式转换：
&lt;ul&gt;
&lt;li&gt;将构造函数声明为&lt;code&gt;explicit&lt;/code&gt;加以阻止。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit&lt;/code&gt;构造函数只能用于直接初始化，不能用于拷贝形式的初始化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;聚合类-aggregate-class&#34;&gt;聚合类 （aggregate class）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;满足以下所有条件：
&lt;ul&gt;
&lt;li&gt;所有成员都是&lt;code&gt;public&lt;/code&gt;的。&lt;/li&gt;
&lt;li&gt;没有定义任何构造函数。&lt;/li&gt;
&lt;li&gt;没有类内初始值。&lt;/li&gt;
&lt;li&gt;没有基类，也没有&lt;code&gt;virtual&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;可以使用一个花括号括起来的成员初始值列表，初始值的顺序必须和声明的顺序一致。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字面值常量类&#34;&gt;字面值常量类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;constexpr&lt;/code&gt;函数的参数和返回值必须是字面值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字面值类型&lt;/strong&gt;：除了算术类型、引用和指针外，某些类也是字面值类型。&lt;/li&gt;
&lt;li&gt;数据成员都是字面值类型的聚合类是字面值常量类。&lt;/li&gt;
&lt;li&gt;如果不是聚合类，则必须满足下面所有条件：
&lt;ul&gt;
&lt;li&gt;数据成员都必须是字面值类型。&lt;/li&gt;
&lt;li&gt;类必须至少含有一个&lt;code&gt;constexpr&lt;/code&gt;构造函数。&lt;/li&gt;
&lt;li&gt;如果一个数据成员含有类内部初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的&lt;code&gt;constexpr&lt;/code&gt;构造函数。&lt;/li&gt;
&lt;li&gt;类必须使用析构函数的默认定义，该成员负责销毁类的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;类的静态成员&#34;&gt;类的静态成员&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;非&lt;code&gt;static&lt;/code&gt;数据成员存在于类类型的每个对象中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt;数据成员独立于该类的任意对象而存在。&lt;/li&gt;
&lt;li&gt;每个&lt;code&gt;static&lt;/code&gt;数据成员是与类关联的对象，并不与该类的对象相关联。&lt;/li&gt;
&lt;li&gt;声明：
&lt;ul&gt;
&lt;li&gt;声明之前加上关键词&lt;code&gt;static&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用：
&lt;ul&gt;
&lt;li&gt;使用&lt;strong&gt;作用域运算符&lt;/strong&gt;&lt;code&gt;::&lt;/code&gt;直接访问静态成员:&lt;code&gt;r = Account::rate();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;也可以使用对象访问：&lt;code&gt;r = ac.rate();&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;定义：
&lt;ul&gt;
&lt;li&gt;在类外部定义时不用加&lt;code&gt;static&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;初始化：
&lt;ul&gt;
&lt;li&gt;通常不在类的内部初始化，而是在定义时进行初始化，如 &lt;code&gt;double Account::interestRate = initRate();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果一定要在类内部定义，则要求必须是字面值常量类型的&lt;code&gt;constexpr&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>08.IO 库</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/08.io-%E5%BA%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/08.io-%E5%BA%93/</guid>
      <description>&lt;h1 id=&#34;第八章-io-库&#34;&gt;第八章 IO 库&lt;/h1&gt;
&lt;h2 id=&#34;前面章节已经在用的-io-库设施&#34;&gt;前面章节已经在用的 IO 库设施&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;istream&lt;/strong&gt;：输入流类型，提供输入操作。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ostream&lt;/strong&gt;：输出流类型，提供输出操作&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cin&lt;/strong&gt;：一个&lt;code&gt;istream&lt;/code&gt;对象，从标准输入读取数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cout&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准输出写入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;cerr&lt;/strong&gt;：一个&lt;code&gt;ostream&lt;/code&gt;对象，向标准错误写入消息。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;raquo;运算符&lt;/strong&gt;：用来从一个&lt;code&gt;istream&lt;/code&gt;对象中读取输入数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;laquo;运算符&lt;/strong&gt;：用来向一个&lt;code&gt;ostream&lt;/code&gt;对象中写入输出数据。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;getline 函数&lt;/strong&gt;：从一个给定的&lt;code&gt;istream&lt;/code&gt;对象中读取一行数据，存入到一个给定的&lt;code&gt;string&lt;/code&gt;对象中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;io-类&#34;&gt;IO 类&lt;/h2&gt;
&lt;h3 id=&#34;标准库定义的-io-类型&#34;&gt;标准库定义的 IO 类型&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;iostream&lt;/code&gt;头文件：从标准流中读写数据，&lt;code&gt;istream&lt;/code&gt;、&lt;code&gt;ostream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;头文件：从文件中读写数据，&lt;code&gt;ifstream&lt;/code&gt;、&lt;code&gt;ofstream&lt;/code&gt;等。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sstream&lt;/code&gt;头文件：从字符串中读写数据，&lt;code&gt;istringstream&lt;/code&gt;、&lt;code&gt;ostringstream&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;io-对象不可复制或赋值&#34;&gt;IO 对象不可复制或赋值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;1.IO 对象不能存在容器里.&lt;/li&gt;
&lt;li&gt;2.形参和返回类型也不能是流类型。&lt;/li&gt;
&lt;li&gt;3.形参和返回类型一般是流的&lt;strong&gt;引用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;4.读写一个 IO 对象会改变其状态，因此传递和返回的引用不能是&lt;code&gt;const&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;条件状态&#34;&gt;条件状态&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strm:iostate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是一种机器无关的&lt;strong&gt;类型&lt;/strong&gt;，提供了表达条件状态的完整功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strm:badbit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用来指出流已经崩溃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strm:failbit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用来指出一个 IO 操作失败了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strm:eofbit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用来指出流到达了文件结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strm:goodbit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用来指出流未处于错误状态，此值保证为零&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.eof()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;eofbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.fail()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;failbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.bad()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;的&lt;code&gt;badbit&lt;/code&gt;置位，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.good()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若流&lt;code&gt;s&lt;/code&gt;处于有效状态，则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.clear()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中所有条件状态位复位，将流的状态设置成有效，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.clear(flags)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将流&lt;code&gt;s&lt;/code&gt;中指定的条件状态位复位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.setstate(flags)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据给定的标志位，将流&lt;code&gt;s&lt;/code&gt;中对应的条件状态位置位，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.rdstate()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回流&lt;code&gt;s&lt;/code&gt;的当前条件状态，返回值类型为&lt;code&gt;strm::iostate&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;strm&lt;/code&gt;是一种 IO 类型，（如&lt;code&gt;istream&lt;/code&gt;）， &lt;code&gt;s&lt;/code&gt;是一个流对象。&lt;/p&gt;
&lt;h3 id=&#34;管理输出缓冲&#34;&gt;管理输出缓冲&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;每个输出流都管理一个缓冲区，执行输出的代码，文本串可能立即打印出来，也可能被操作系统保存在缓冲区内，随后再打印。&lt;/li&gt;
&lt;li&gt;刷新缓冲区，可以使用如下 IO 操纵符：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;endl&lt;/code&gt;：输出一个换行符并刷新缓冲区。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flush&lt;/code&gt;：刷新流，单不添加任何字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ends&lt;/code&gt;：在缓冲区插入空字符&lt;code&gt;null&lt;/code&gt;，然后刷新。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unitbuf&lt;/code&gt;：告诉流接下来每次操作之后都要进行一次&lt;code&gt;flush&lt;/code&gt;操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nounitbuf&lt;/code&gt;：回到正常的缓冲方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文件输入输出&#34;&gt;文件输入输出&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;fstream&lt;/code&gt;定义了三个类型来支持文件 IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ifstream&lt;/code&gt;从一个给定文件读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ofstream&lt;/code&gt;向一个给定文件写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fstream&lt;/code&gt;可以读写给定文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文件流&lt;/strong&gt;：需要读写文件时，必须定义自己的文件流对象，并绑定在需要的文件上。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;fstream-特有的操作&#34;&gt;fstream 特有的操作&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fstream fstrm;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个未绑定的文件流。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fstream fstrm(s);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个文件流，并打开名为&lt;code&gt;s&lt;/code&gt;的文件，&lt;code&gt;s&lt;/code&gt;可以是&lt;code&gt;string&lt;/code&gt;也可以是&lt;code&gt;char&lt;/code&gt;指针&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fstream fstrm(s, mode);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与前一个构造函数类似，但按指定&lt;code&gt;mode&lt;/code&gt;打开文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fstrm.open(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打开名为&lt;code&gt;s&lt;/code&gt;的文件，并和&lt;code&gt;fstrm&lt;/code&gt;绑定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fstrm.close()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭和&lt;code&gt;fstrm&lt;/code&gt;绑定的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fstrm.is_open()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;bool&lt;/code&gt;值，指出与&lt;code&gt;fstrm&lt;/code&gt;关联的文件是否成功打开且尚未关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中，&lt;code&gt;fstream&lt;/code&gt;是头文件&lt;code&gt;fstream&lt;/code&gt;中定义的一个类型，&lt;code&gt;fstrm&lt;/code&gt;是一个文件流对象。&lt;/p&gt;
&lt;h3 id=&#34;文件模式&#34;&gt;文件模式&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件模式&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以读的方式打开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;out&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以写的方式打开&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;app&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每次写操作前均定位到文件末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打开文件后立即定位到文件末尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;截断文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;binary&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以二进制方式进行 IO 操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;string-流&#34;&gt;string 流&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;头文件&lt;code&gt;sstream&lt;/code&gt;定义了三个类型来支持内存 IO：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;istringstream&lt;/code&gt;从&lt;code&gt;string&lt;/code&gt;读取数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ostringstream&lt;/code&gt;向&lt;code&gt;string&lt;/code&gt;写入数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringstream&lt;/code&gt;可以读写给定&lt;code&gt;string&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;stringstream-特有的操作&#34;&gt;stringstream 特有的操作&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sstream strm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义一个未绑定的&lt;code&gt;stringstream&lt;/code&gt;对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sstream strm(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用&lt;code&gt;s&lt;/code&gt;初始化对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strm.str()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;strm&lt;/code&gt;所保存的&lt;code&gt;string&lt;/code&gt;的拷贝&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;strm.str(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;s&lt;/code&gt;拷贝到&lt;code&gt;strm&lt;/code&gt;中，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;上表中&lt;code&gt;sstream&lt;/code&gt;是头文件&lt;code&gt;sstream&lt;/code&gt;中任意一个类型。&lt;code&gt;s&lt;/code&gt;是一个&lt;code&gt;string&lt;/code&gt;。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>09.顺序容器</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/09.%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/09.%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;第九章-顺序容器&#34;&gt;第九章 顺序容器&lt;/h1&gt;
&lt;h2 id=&#34;顺序容器概述&#34;&gt;顺序容器概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;顺序容器&lt;/strong&gt;（sequential container）：为程序员提供了控制元素存储和访问顺序的能力。这种顺序不依赖于元素的值，而是与元素加入容器时的位置相对应。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;顺序容器类型&#34;&gt;顺序容器类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;容器类型&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vector&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;deque&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;双向链表。只支持双向顺序访问。在&lt;code&gt;list&lt;/code&gt;中任何位置进行插入/删除操作速度都很快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;forward_list&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;array&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;固定大小数组。支持快速随机访问。不能添加或者删除元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与&lt;code&gt;vector&lt;/code&gt;相似的容器，但专门用于保存字符。随机访问块。在尾部插入/删除速度快。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;除了固定大小的&lt;code&gt;array&lt;/code&gt;外，其他容器都提供高效、灵活的内存管理。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;和&lt;code&gt;array&lt;/code&gt;是新 C++标准增加的类型。&lt;/li&gt;
&lt;li&gt;通常使用&lt;code&gt;vector&lt;/code&gt;是最好的选择，除非你有很好的理由选择其他容器。&lt;/li&gt;
&lt;li&gt;新标准库的容器比旧版的快得多。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器操作&#34;&gt;容器操作&lt;/h2&gt;
&lt;h3 id=&#34;类型&#34;&gt;类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此容器类型的迭代器类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可以读取元素但不能修改元素的迭代器类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;无符号整数类型，足够保存此种容器类型最大可能的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;difference_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;带符号整数类型，足够保存两个迭代器之间的距离&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的左值类型；和&lt;code&gt;value_type &amp;amp;&lt;/code&gt;含义相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的&lt;code&gt;const&lt;/code&gt;左值类型，即&lt;code&gt;const value_type &amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;构造函数&#34;&gt;构造函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C c;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认构造函数，构造空容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C c1(c2);&lt;/code&gt;或&lt;code&gt;C c1 = c2;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;构造&lt;code&gt;c2&lt;/code&gt;的拷贝&lt;code&gt;c1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C c(b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;构造&lt;code&gt;c&lt;/code&gt;，将迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;指定范围内的所有元素拷贝到&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C c(a, b, c...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;列表初始化&lt;code&gt;c&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C c(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;只支持顺序容器，且不包括&lt;code&gt;array&lt;/code&gt;，包含&lt;code&gt;n&lt;/code&gt;个元素，这些元素进行了值初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;C c(n, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;包含&lt;code&gt;n&lt;/code&gt;个初始值为&lt;code&gt;t&lt;/code&gt;的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;只有顺序容器的构造函数才接受大小参数，关联容器并不支持。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array&lt;/code&gt;具有固定大小。&lt;/li&gt;
&lt;li&gt;和其他容器不同，默认构造的&lt;code&gt;array&lt;/code&gt;是非空的。&lt;/li&gt;
&lt;li&gt;直接复制：将一个容器复制给另一个容器时，类型必须匹配：容器类型和元素类型都必须相同。&lt;/li&gt;
&lt;li&gt;使用迭代器复制：不要求容器类型相同，容器内的元素类型也可以不同。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;赋值和swap&#34;&gt;赋值和&lt;code&gt;swap&lt;/code&gt;&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c1 = c2;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;c1&lt;/code&gt;中的元素替换成&lt;code&gt;c2&lt;/code&gt;中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c1 = {a, b, c...}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;c1&lt;/code&gt;中的元素替换成列表中的元素（不适用于&lt;code&gt;array&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;交换&lt;code&gt;c1&lt;/code&gt;和&lt;code&gt;c2&lt;/code&gt;的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap(c1, c2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;c1.swap(c2)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.assign(b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;c&lt;/code&gt;中的元素替换成迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;表示范围中的元素，&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;不能指向&lt;code&gt;c&lt;/code&gt;中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.assign(il)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;c&lt;/code&gt;中的元素替换成初始化列表&lt;code&gt;il&lt;/code&gt;中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.assign(n, r)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;c&lt;/code&gt;中的元素替换为&lt;code&gt;n&lt;/code&gt;个值是&lt;code&gt;t&lt;/code&gt;的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;使用非成员版本的&lt;code&gt;swap&lt;/code&gt;是一个好习惯。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;assign&lt;/code&gt;操作不适用于关联容器和&lt;code&gt;array&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;大小&#34;&gt;大小&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt;中元素的数目（不支持&lt;code&gt;forward_list&lt;/code&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.max_size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt;中可保存的最大元素数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若&lt;code&gt;c&lt;/code&gt;中存储了元素，返回&lt;code&gt;false&lt;/code&gt;，否则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;添加元素&#34;&gt;添加元素&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.push_back(t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;c&lt;/code&gt;尾部创建一个值为&lt;code&gt;t&lt;/code&gt;的元素，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.emplace_back(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.push_front(t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;c&lt;/code&gt;头部创建一个值为&lt;code&gt;t&lt;/code&gt;的元素，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.emplace_front(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.insert(p, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;指向的元素之前创建一个值是&lt;code&gt;t&lt;/code&gt;的元素，返回指向新元素的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.emplace(p, args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.insert(p, n, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;指向的元素之前插入&lt;code&gt;n&lt;/code&gt;个值为&lt;code&gt;t&lt;/code&gt;的元素，返回指向第一个新元素的迭代器；如果&lt;code&gt;n&lt;/code&gt;是 0，则返回&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.insert(p, b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;范围内的元素，插入到&lt;code&gt;p&lt;/code&gt;指向的元素之前；如果范围为空，则返回&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.insert(p, il)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;il&lt;/code&gt;是一个花括号包围中的元素值列表，将其插入到&lt;code&gt;p&lt;/code&gt;指向的元素之前；如果&lt;code&gt;il&lt;/code&gt;是空，则返回&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;因为这些操作会改变大小，因此不适用于&lt;code&gt;array&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;有自己专有版本的&lt;code&gt;insert&lt;/code&gt;和&lt;code&gt;emplace&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;不支持&lt;code&gt;push_back&lt;/code&gt;和&lt;code&gt;emplace_back&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;当我们用一个对象去初始化容器或者将对象插入到容器时，实际上放入的是对象的拷贝。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;emplace&lt;/code&gt;开头的函数是新标准引入的，这些操作是构造而不是拷贝元素。&lt;/li&gt;
&lt;li&gt;传递给&lt;code&gt;emplace&lt;/code&gt;的参数必须和元素类型的构造函数相匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;访问元素&#34;&gt;访问元素&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.back()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;c&lt;/code&gt;中尾元素的引用。若&lt;code&gt;c&lt;/code&gt;为空，函数行为未定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.front()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;c&lt;/code&gt;中头元素的引用。若&lt;code&gt;c&lt;/code&gt;为空，函数行为未定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c[n]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;c&lt;/code&gt;中下标是&lt;code&gt;n&lt;/code&gt;的元素的引用，&lt;code&gt;n&lt;/code&gt;时候一个无符号证书。若&lt;code&gt;n&amp;gt;=c.size()&lt;/code&gt;，则函数行为未定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.at(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回下标为&lt;code&gt;n&lt;/code&gt;的元素引用。如果下标越界，则抛出&lt;code&gt;out_of_range&lt;/code&gt;异常&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;访问成员函数返回的是引用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;at&lt;/code&gt;和下标操作只适用于&lt;code&gt;string&lt;/code&gt;、&lt;code&gt;vector&lt;/code&gt;、&lt;code&gt;deque&lt;/code&gt;、&lt;code&gt;array&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;back&lt;/code&gt;不适用于&lt;code&gt;forward_list&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果希望下标是合法的，可以使用&lt;code&gt;at&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除元素&#34;&gt;删除元素&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.pop_back()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除&lt;code&gt;c&lt;/code&gt;中尾元素，若&lt;code&gt;c&lt;/code&gt;为空，则函数行为未定义。函数返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.pop_front()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除&lt;code&gt;c&lt;/code&gt;中首元素，若&lt;code&gt;c&lt;/code&gt;为空，则函数行为未定义。函数返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.erase(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除迭代器&lt;code&gt;p&lt;/code&gt;指向的元素，返回一个指向被删除元素之后的元素的迭代器，若&lt;code&gt;p&lt;/code&gt;本身是尾后迭代器，则函数行为未定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.erase(b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;范围内的元素，返回指向最后一个被删元素之后元素的迭代器，若&lt;code&gt;e&lt;/code&gt;本身就是尾后迭代器，则返回尾后迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.clear()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除&lt;code&gt;c&lt;/code&gt;中所有元素，返回&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;会改变容器大小，不适用于&lt;code&gt;array&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;有特殊版本的&lt;code&gt;erase&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;不支持&lt;code&gt;pop_back&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;不支持&lt;code&gt;pop_front&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;特殊的-forwad_list-操作&#34;&gt;特殊的 forwad_list 操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;链表在删除元素时需要修改前置节点的内容，双向链表会前驱的指针，但是单向链表没有保存，因此需要增加获取前置节点的方法。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward_list&lt;/code&gt;定义了&lt;code&gt;before_begin&lt;/code&gt;，即首前（off-the-begining）迭代器，允许我们再在首元素之前添加或删除元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.before_begin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回指向链表首元素之前不存在的元素的迭代器，此迭代器不能解引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.cbefore_begin()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上，但是返回的是常量迭代器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.insert_after(p, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。&lt;code&gt;t&lt;/code&gt;是一个对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.insert_after(p, n, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。&lt;code&gt;t&lt;/code&gt;是一个对象，&lt;code&gt;n&lt;/code&gt;是数量。若&lt;code&gt;n&lt;/code&gt;是 0 则函数行为未定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.insert_after(p, b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。由迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;指定范围。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.insert_after(p, il)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在迭代器&lt;code&gt;p&lt;/code&gt;之后插入元素。由&lt;code&gt;il&lt;/code&gt;指定初始化列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;emplace_after(p, args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;args&lt;/code&gt;在&lt;code&gt;p&lt;/code&gt;之后的位置，创建一个元素，返回一个指向这个新元素的迭代器。若&lt;code&gt;p&lt;/code&gt;为尾后迭代器，则函数行为未定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.erase_after(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除&lt;code&gt;p&lt;/code&gt;指向位置之后的元素，返回一个指向被删元素之后的元素的迭代器，若&lt;code&gt;p&lt;/code&gt;指向&lt;code&gt;lst&lt;/code&gt;的尾元素或者是一个尾后迭代器，则函数行为未定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.erase_after(b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;类似上面，删除对象换成从&lt;code&gt;b&lt;/code&gt;到&lt;code&gt;e&lt;/code&gt;指定的范围。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;改变容器大小&#34;&gt;改变容器大小&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.resize(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调整&lt;code&gt;c&lt;/code&gt;的大小为&lt;code&gt;n&lt;/code&gt;个元素，若&lt;code&gt;n&amp;lt;c.size()&lt;/code&gt;，则多出的元素被丢弃。若必须添加新元素，对新元素进行值初始化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.resize(n, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调整&lt;code&gt;c&lt;/code&gt;的大小为&lt;code&gt;n&lt;/code&gt;个元素，任何新添加的元素都初始化为值&lt;code&gt;t&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;获取迭代器&#34;&gt;获取迭代器&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.begin()&lt;/code&gt;, &lt;code&gt;c.end()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回指向&lt;code&gt;c&lt;/code&gt;的首元素和尾元素之后位置的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.cbegin()&lt;/code&gt;, &lt;code&gt;c.cend()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;const_iterator&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;以&lt;code&gt;c&lt;/code&gt;开头的版本是 C++11 新标准引入的&lt;/li&gt;
&lt;li&gt;当不需要写访问时，应该使用&lt;code&gt;cbegin&lt;/code&gt;和&lt;code&gt;cend&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;反向容器的额外成员&#34;&gt;反向容器的额外成员&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按逆序寻址元素的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不能修改元素的逆序迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.rbegin()&lt;/code&gt;, &lt;code&gt;c.rend()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回指向&lt;code&gt;c&lt;/code&gt;的尾元素和首元素之前位置的迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.crbegin()&lt;/code&gt;, &lt;code&gt;c.crend()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;const_reverse_iterator&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;不支持&lt;code&gt;forward_list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;迭代器&#34;&gt;迭代器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;迭代器范围：&lt;code&gt;begin&lt;/code&gt;到&lt;code&gt;end&lt;/code&gt;，即第一个元素到最后一个元素的后面一个位置。&lt;/li&gt;
&lt;li&gt;左闭合区间：&lt;code&gt;[begin, end)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;左闭合范围蕴含的编程设定：
&lt;ul&gt;
&lt;li&gt;如果&lt;code&gt;begin&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;相等，则范围为空。&lt;/li&gt;
&lt;li&gt;如果二者不等，则范围至少包含一个元素，且&lt;code&gt;begin&lt;/code&gt;指向该范围中的第一个元素。&lt;/li&gt;
&lt;li&gt;可以对&lt;code&gt;begin&lt;/code&gt;递增若干次，使得&lt;code&gt;begin == end&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器操作可能使迭代器失效&#34;&gt;容器操作可能使迭代器失效&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在向容器添加元素后：
&lt;ul&gt;
&lt;li&gt;如果容器是&lt;code&gt;vector&lt;/code&gt;或&lt;code&gt;string&lt;/code&gt;，且存储空间被重新分配，则指向容器的迭代器、指针、引用都会失效。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;deque&lt;/code&gt;，插入到除首尾位置之外的任何位置都会导致指向容器的迭代器、指针、引用失效。如果在首尾位置添加元素，迭代器会失效，但指向存在元素的引用和指针不会失效。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;list&lt;/code&gt;和&lt;code&gt;forward_list&lt;/code&gt;，指向容器的迭代器、指针和引用依然有效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;在从一个容器中删除元素后：
&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;list&lt;/code&gt;和&lt;code&gt;forward_list&lt;/code&gt;，指向容器其他位置的迭代器、引用和指针仍然有效。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;deque&lt;/code&gt;，如果在首尾之外的任何位置删除元素，那么指向被删除元素外其他元素的迭代器、指针、引用都会失效；如果是删除&lt;code&gt;deque&lt;/code&gt;的尾元素，则尾后迭代器会失效，但其他不受影响；如果删除的是&lt;code&gt;deque&lt;/code&gt;的头元素，这些也不会受影响。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;，指向被删元素之前的迭代器、引用、指针仍然有效。&lt;/li&gt;
&lt;li&gt;注意：当我们删除元素时，尾后迭代器总是会失效。&lt;/li&gt;
&lt;li&gt;注意：使用失效的迭代器、指针、引用是严重的运行时错误！&lt;/li&gt;
&lt;li&gt;建议：将要求迭代器必须保持有效的程序片段最小化。&lt;/li&gt;
&lt;li&gt;建议：不要保存&lt;code&gt;end&lt;/code&gt;返回的迭代器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;容器内元素的类型约束&#34;&gt;容器内元素的类型约束&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;元素类型必须支持赋值运算；&lt;/li&gt;
&lt;li&gt;元素类型的对象必须可以复制。&lt;/li&gt;
&lt;li&gt;除了输入输出标准库类型外，其他所有标准库类型都是有效的容器元素类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;vector-对象是如何增长的&#34;&gt;vector 对象是如何增长的&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;在内存中是连续保存的，如果原先分配的内存位置已经使用完，则需要重新分配新空间，将已有元素从就位置移动到新空间中，然后添加新元素。&lt;/p&gt;
&lt;h3 id=&#34;管理容量的成员函数&#34;&gt;管理容量的成员函数&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.shrink_to_fit()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;capacity()&lt;/code&gt;减少到和&lt;code&gt;size()&lt;/code&gt;相同大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.capacity()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不重新分配内存空间的话，&lt;code&gt;c&lt;/code&gt;可以保存多少个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.reverse(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分配至少能容纳&lt;code&gt;n&lt;/code&gt;个元素的内存空间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shrink_to_fit&lt;/code&gt;只适用于&lt;code&gt;vector&lt;/code&gt;、&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;deque&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;capacity&lt;/code&gt;和&lt;code&gt;reverse&lt;/code&gt;只适用于&lt;code&gt;vector&lt;/code&gt;和&lt;code&gt;string&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;额外的-string-操作&#34;&gt;额外的 string 操作&lt;/h2&gt;
&lt;h3 id=&#34;构造-string-的其他方法&#34;&gt;构造 string 的其他方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s(cp, n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;是&lt;code&gt;cp&lt;/code&gt;指向的数组中前&lt;code&gt;n&lt;/code&gt;个字符的拷贝，此数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s(s2, pos2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;是&lt;code&gt;string s2&lt;/code&gt;从下标&lt;code&gt;pos2&lt;/code&gt;开始的字符的拷贝。若&lt;code&gt;pos2 &amp;gt; s2.size()&lt;/code&gt;，则构造函数的行为未定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;string s(s2, pos2, len2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;s&lt;/code&gt;是&lt;code&gt;string s2&lt;/code&gt;从下标&lt;code&gt;pos2&lt;/code&gt;开始的&lt;code&gt;len2&lt;/code&gt;个字符的拷贝。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;,&lt;code&gt;len2&lt;/code&gt;,&lt;code&gt;pos2&lt;/code&gt;都是无符号值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;substr-操作&#34;&gt;substr 操作&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.substr(pos, n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;string&lt;/code&gt;，包含&lt;code&gt;s&lt;/code&gt;中从&lt;code&gt;pos&lt;/code&gt;开始的&lt;code&gt;n&lt;/code&gt;个字符的拷贝。&lt;code&gt;pos&lt;/code&gt;的默认值是 0，&lt;code&gt;n&lt;/code&gt;的默认值是&lt;code&gt;s.size() - pos&lt;/code&gt;，即拷贝从&lt;code&gt;pos&lt;/code&gt;开始的所有字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;改变-string-的其他方法&#34;&gt;改变 string 的其他方法&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.insert(pos, args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;pos&lt;/code&gt;之前插入&lt;code&gt;args&lt;/code&gt;指定的字符。&lt;code&gt;pos&lt;/code&gt;可以使是下标或者迭代器。接受下标的版本返回指向&lt;code&gt;s&lt;/code&gt;的引用；接受迭代器的版本返回指向第一个插入字符的迭代器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.erase(pos, len)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除从&lt;code&gt;pos&lt;/code&gt;开始的&lt;code&gt;len&lt;/code&gt;个字符，如果&lt;code&gt;len&lt;/code&gt;被省略，则删除后面所有字符，返回指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.assign(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;s&lt;/code&gt;中的字符替换成&lt;code&gt;args&lt;/code&gt;指定的字符。返回一个指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.append(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;args&lt;/code&gt;指定的字符追加到&lt;code&gt;s&lt;/code&gt;，返回一个指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.replace(range, args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除&lt;code&gt;s&lt;/code&gt;中范围&lt;code&gt;range&lt;/code&gt;中的字符，替换成&lt;code&gt;args&lt;/code&gt;指定的字符。返回一个指向&lt;code&gt;s&lt;/code&gt;的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;string-搜索操作&#34;&gt;string 搜索操作&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;类提供了 6 个不同的搜索函数，每个函数都有 4 个重载版本。&lt;/li&gt;
&lt;li&gt;每个搜索操作都返回一个&lt;code&gt;string::size_type&lt;/code&gt;值，表示匹配发生位置的下标。如果搜索失败则返回一个名为&lt;code&gt;string::npos&lt;/code&gt;的&lt;code&gt;static&lt;/code&gt;成员（类型是&lt;code&gt;string::size_type&lt;/code&gt;，初始化值是-1，也就是&lt;code&gt;string&lt;/code&gt;最大的可能大小）。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;搜索操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.find(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找&lt;code&gt;s&lt;/code&gt;中&lt;code&gt;args&lt;/code&gt;第一次出现的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.rfind(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找&lt;code&gt;s&lt;/code&gt;中&lt;code&gt;args&lt;/code&gt;最后一次出现的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.find_first_of(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找&lt;code&gt;args&lt;/code&gt;中任何一个字符第一次出现的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.find_last_of(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找&lt;code&gt;args&lt;/code&gt;中任何一个字符最后一次出现的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.find_first_not_of(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找第一个不在&lt;code&gt;args&lt;/code&gt;中的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.find_first_not_of(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;s&lt;/code&gt;中查找最后一个不在&lt;code&gt;args&lt;/code&gt;中的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;args 必须是一下的形式之一：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;args&lt;/code&gt;形式&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c, pos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找字符&lt;code&gt;c&lt;/code&gt;。&lt;code&gt;pos&lt;/code&gt;默认是 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s2, pos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找字符串&lt;code&gt;s&lt;/code&gt;。&lt;code&gt;pos&lt;/code&gt;默认是 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp, pos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找指针&lt;code&gt;cp&lt;/code&gt;指向的以空字符结尾的 C 风格字符串。&lt;code&gt;pos&lt;/code&gt;默认是 0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp, pos, n&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;s&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;开始查找指针&lt;code&gt;cp&lt;/code&gt;指向的前&lt;code&gt;n&lt;/code&gt;个字符。&lt;code&gt;pos&lt;/code&gt;和&lt;code&gt;n&lt;/code&gt;无默认值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;scompare-的几种参数形式&#34;&gt;s.compare 的几种参数形式&lt;/h3&gt;
&lt;p&gt;逻辑类似于 C 标准库的&lt;code&gt;strcmp&lt;/code&gt;函数，根据&lt;code&gt;s&lt;/code&gt;是等于、大于还是小于参数指定的字符串，&lt;code&gt;s.compare&lt;/code&gt;返回 0、正数或负数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数形式&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;和&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pos1, n1, s2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pos1, n1, s2, pos2, n2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;s2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;和&lt;code&gt;cp&lt;/code&gt;指向的以空字符结尾的字符数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pos1, n1, cp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;cp&lt;/code&gt;指向的以空字符结尾的字符数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pos1, n1, cp, n2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;比较&lt;code&gt;s&lt;/code&gt;从&lt;code&gt;pos1&lt;/code&gt;开始的&lt;code&gt;n1&lt;/code&gt;个字符和&lt;code&gt;cp&lt;/code&gt;指向的地址开始&lt;code&gt;n2&lt;/code&gt;个字符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;string-和数值转换&#34;&gt;string 和数值转换&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;转换&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;to_string(val)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一组重载函数，返回数值&lt;code&gt;val&lt;/code&gt;的&lt;code&gt;string&lt;/code&gt;表示。&lt;code&gt;val&lt;/code&gt;可以使任何算术类型。对每个浮点类型和&lt;code&gt;int&lt;/code&gt;或更大的整型，都有相应版本的&lt;code&gt;to_string()&lt;/code&gt;。和往常一样，小整型会被提升。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stoi(s, p, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;起始子串（表示整数内容）的数值，&lt;code&gt;p&lt;/code&gt;是&lt;code&gt;s&lt;/code&gt;中第一个非数值字符的下标，默认是 0，&lt;code&gt;b&lt;/code&gt;是转换所用的基数。返回&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stol(s, p, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stoul(s, p, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;unsigned long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stoll(s, p, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;long long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stoull(s, p, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;unsigned long long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stof(s, p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;s&lt;/code&gt;起始子串（表示浮点数内容）的数值，&lt;code&gt;p&lt;/code&gt;是&lt;code&gt;s&lt;/code&gt;中第一个非数值字符的下标，默认是 0。返回&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stod(s, p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;double&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stold(s, p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;long double&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;容器适配器adapter&#34;&gt;容器适配器（adapter）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;适配器是使一事物的行为类似于另一事物的行为的一种机制，例如&lt;code&gt;stack&lt;/code&gt;可以使任何一种顺序容器以栈的方式工作。&lt;/li&gt;
&lt;li&gt;初始化 &lt;code&gt;deque&amp;lt;int&amp;gt; deq; stack&amp;lt;int&amp;gt; stk(deq);&lt;/code&gt; 从&lt;code&gt;deq&lt;/code&gt;拷贝元素到&lt;code&gt;stk&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;创建适配器时，指定一个顺序容器，可以覆盖默认的基础容器： &lt;code&gt;stack&amp;lt;string, vector&amp;lt;string&amp;gt; &amp;gt; str_stk;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;适配器的通用操作和类型&#34;&gt;适配器的通用操作和类型&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一种类型，须以保存当前类型的最大对象的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;container_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;实现适配器的底层容器类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A a;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个名为&lt;code&gt;a&lt;/code&gt;的空适配器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;A a(c)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个名为&lt;code&gt;a&lt;/code&gt;的适配器，带有容器&lt;code&gt;c&lt;/code&gt;的一个拷贝&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;关系运算符&lt;/td&gt;
&lt;td&gt;每个适配器都支持所有关系运算符：&lt;code&gt;==&lt;/code&gt;、&lt;code&gt;!=&lt;/code&gt;、&lt;code&gt;&amp;lt;&lt;/code&gt;、 &lt;code&gt;&amp;lt;=&lt;/code&gt;、&lt;code&gt;&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;gt;=&lt;/code&gt;这些运算符返回底层容器的比较结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若&lt;code&gt;a&lt;/code&gt;包含任何元素，返回&lt;code&gt;false&lt;/code&gt;;否则返回&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a.size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;a&lt;/code&gt;中的元素数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap(a, b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;交换&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;的内容，&lt;code&gt;a&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;必须有相同类型，包括底层容器类型也必须相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a.swap(b)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;stack&#34;&gt;stack&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.pop()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除栈顶元素，不返回。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.push(item)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个新元素，压入栈顶，该元素通过拷贝或移动&lt;code&gt;item&lt;/code&gt;而来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.emplace(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上，但元素由&lt;code&gt;args&lt;/code&gt;来构造。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s.top()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回栈顶元素，不删除。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;定义在&lt;code&gt;stack&lt;/code&gt;头文件中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stack&lt;/code&gt;默认基于&lt;code&gt;deque&lt;/code&gt;实现，也可以在&lt;code&gt;list&lt;/code&gt;或&lt;code&gt;vector&lt;/code&gt;之上实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;queue-和-priority_queue&#34;&gt;queue 和 priority_queue&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q.pop()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除队首元素，但不返回。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q.front()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回队首元素的值，不删除。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q.back()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回队尾元素的值，不删除。只适用于&lt;code&gt;queue&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q.top()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回具有最高优先级的元素值，不删除。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q.push(item)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在队尾压入一个新元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q.emplace(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;定义在&lt;code&gt;queue&lt;/code&gt;头文件中。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queue&lt;/code&gt;默认基于&lt;code&gt;deque&lt;/code&gt;实现，&lt;code&gt;priority_queue&lt;/code&gt;默认基于&lt;code&gt;vector&lt;/code&gt;实现。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;queue&lt;/code&gt;可以在&lt;code&gt;list&lt;/code&gt;或&lt;code&gt;vector&lt;/code&gt;之上实现，&lt;code&gt;priority_queue&lt;/code&gt;也可以用&lt;code&gt;deque&lt;/code&gt;实现。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>10.泛型算法</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/10.%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/10.%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;第十章-泛型算法&#34;&gt;第十章 泛型算法&lt;/h1&gt;
&lt;h2 id=&#34;泛型算法&#34;&gt;泛型算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;因为它们实现共同的操作，所以称之为“&lt;strong&gt;算法&lt;/strong&gt;”；而“&lt;strong&gt;泛型&lt;/strong&gt;”、指的是它们可以操作在多种容器类型上。&lt;/li&gt;
&lt;li&gt;泛型算法本身不执行容器操作，只是单独依赖迭代器和迭代器操作实现。&lt;/li&gt;
&lt;li&gt;头文件： &lt;code&gt;#include &amp;lt;algorithm&amp;gt;&lt;/code&gt;或者 &lt;code&gt;#include &amp;lt;numeric&amp;gt;&lt;/code&gt;(算数相关)&lt;/li&gt;
&lt;li&gt;大多数算法是通过遍历两个迭代器标记的一段元素来实现其功能。&lt;/li&gt;
&lt;li&gt;必要的编程假定：算法永远不会改变底层容器的大小。算法可能改变容器中保存的元素的值，也可能在容器内移动元素，但不能直接添加或者删除元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;find&#34;&gt;find&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vector&amp;lt;int&amp;gt;::const_iterator result = find(vec.begin(), vec.end(), search_value);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入：两个标记范围的迭代器和目标查找值。返回：如果找到，返回对应的迭代器，否则返回第二个参数，即标记结尾的迭代器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;初识泛型算法&#34;&gt;初识泛型算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;标准库提供了超过 100 个算法，但这些算法有一致的结构。&lt;/li&gt;
&lt;li&gt;理解算法的最基本的方法是了解它们是否读取元素、改变元素、重排元素顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;只读算法&#34;&gt;只读算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只读取范围中的元素，不改变元素。&lt;/li&gt;
&lt;li&gt;如 &lt;code&gt;find&lt;/code&gt;和 &lt;code&gt;accumulate&lt;/code&gt;（在&lt;code&gt;numeric&lt;/code&gt;中定义，求和）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;find_first_of&lt;/code&gt;，输入：两对迭代器标记两段范围，在第一段中找第二段中任意元素，返回第一个匹配的元素，找不到返回第一段的&lt;code&gt;end&lt;/code&gt;迭代器。&lt;/li&gt;
&lt;li&gt;通常最好使用&lt;code&gt;cbegin&lt;/code&gt;和&lt;code&gt;cend&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;equal&lt;/code&gt;：确定两个序列是否保存相同的值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;写容器元素的算法&#34;&gt;写容器元素的算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一些算法将新值赋予序列中的元素。&lt;/li&gt;
&lt;li&gt;算法不检查写操作。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fill&lt;/code&gt;： &lt;code&gt;fill(vec.begin(), vec.end(), 0);&lt;/code&gt; 将每个元素重置为 0&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fill_n&lt;/code&gt;： &lt;code&gt;fill_n(vec.begin(), 10, 0);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;插入迭代器&lt;code&gt;back_inserter&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;用来确保算法有足够的空间存储数据。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#include &amp;lt;iterator&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;back_inserter(vec)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;拷贝算法&lt;code&gt;copy&lt;/code&gt;：&lt;/li&gt;
&lt;li&gt;输入：前两个参数指定输入范围，第三个指向目标序列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy (ilst.begin(), ilst.end(), back_inserter(ivec));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;copy&lt;/code&gt;时必须保证目标目的序列至少要包含与输入序列一样多的元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重排容器元素的算法&#34;&gt;重排容器元素的算法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;这些算法会重排容器中元素的顺序。&lt;/li&gt;
&lt;li&gt;排序算法&lt;code&gt;sort&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;接受两个迭代器，表示要排序的元素范围。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;消除重复&lt;code&gt;unique&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;之前要先调用&lt;code&gt;sort&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;返回的迭代器指向最后一个不重复元素之后的位置。&lt;/li&gt;
&lt;li&gt;顺序会变，重复的元素被“删除”。&lt;/li&gt;
&lt;li&gt;并没有真正删除，真正删除必须使用容器操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定制操作&#34;&gt;定制操作&lt;/h2&gt;
&lt;h3 id=&#34;向算法传递函数&#34;&gt;向算法传递函数：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;谓词（&lt;code&gt;predicate&lt;/code&gt;）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是一个&lt;strong&gt;可调用的表达式&lt;/strong&gt;，返回结果是一个能用作条件的值&lt;/li&gt;
&lt;li&gt;一元谓词：接受一个参数&lt;/li&gt;
&lt;li&gt;二元谓词：接受两个参数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stable_sort&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;保留相等元素的原始相对位置。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stable_sort(words.begin(), words.end(), isShorter);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lambda-表达式&#34;&gt;lambda 表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;有时可能希望操作可以接受更多的参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt;表达式表示一个可调用的代码单元，可以理解成是一个未命名的内联函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;形式：&lt;code&gt;[capture list](parameter list) -&amp;gt; return type {function body}&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其中&lt;code&gt;capture list&lt;/code&gt;捕获列表是一个&lt;code&gt;lambda&lt;/code&gt;所在函数定义的局部变量的列表（通常为空）。不可忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return type&lt;/code&gt;是返回类型。可忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parameter&lt;/code&gt;是参数列表。可忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function body&lt;/code&gt;是函数体。不可忽略。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto f = [] {return 42;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;find_if&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;接受一对表示范围的迭代器和一个谓词，用来查找第一个满足特定要求的元素。返回第一个使谓词返回非 0 值的元素。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto wc = find_if(words.begin(), words.end(), [sz](const string &amp;amp;a){return a.size() &amp;gt;= sz;});&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for_each&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;接受一个可调用对象，并对序列中每个元素调用此对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for_each(wc, words.end(), [](const string &amp;amp;s){cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;quot; &amp;quot;;})&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lambda-捕获和返回&#34;&gt;lambda 捕获和返回&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定义&lt;code&gt;lambda&lt;/code&gt;时会生成一个新的类类型和该类型的一个对象。&lt;/li&gt;
&lt;li&gt;默认情况下，从&lt;code&gt;lambda&lt;/code&gt;生成的类都包含一个对应该&lt;code&gt;lambda&lt;/code&gt;所捕获的变量的数据成员，在&lt;code&gt;lambda&lt;/code&gt;对象创建时被初始化。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;值捕获&lt;/strong&gt;：前提是变量可以拷贝，&lt;code&gt;size_t v1 = 42; auto f = [v1] {return v1;};&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;引用捕获&lt;/strong&gt;：必须保证在&lt;code&gt;lambda&lt;/code&gt;执行时，变量是存在的，&lt;code&gt;auto f2 = [&amp;amp;v1] {return v1;};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尽量减少捕获的数据量，尽可能避免捕获指针或引用。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隐式捕获&lt;/strong&gt;：让编译器推断捕获列表，在捕获列表中写一个&lt;code&gt;&amp;amp;&lt;/code&gt;（引用方式）或&lt;code&gt;=&lt;/code&gt;（值方式）。&lt;code&gt;auto f3 = [=] {return v1;}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;lambda 捕获列表&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;捕获列表&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空捕获列表。&lt;code&gt;lambda&lt;/code&gt;不能使用所在函数中的变量。一个&lt;code&gt;lambda&lt;/code&gt;只有在捕获变量后才能使用它们。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[names]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;names&lt;/code&gt;是一个逗号分隔的名字列表，这些名字都是在&lt;code&gt;lambda&lt;/code&gt;所在函数的局部变量，捕获列表中的变量都被拷贝，名字前如果使用了&lt;code&gt;&amp;amp;&lt;/code&gt;，则采用引用捕获方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[&amp;amp;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隐式捕获列表，采用引用捕获方式。&lt;code&gt;lambda&lt;/code&gt;体中所使用的来自所在函数的实体都采用引用方式使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[=]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;隐式捕获列表，采用值捕获方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[&amp;amp;, identifier_list]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;identifier_list&lt;/code&gt;是一个逗号分隔的列表，包含 0 个或多个来自所在函数的变量。这些变量采用值捕获方式，而任何隐式捕获的变量都采用引用方式捕获。&lt;code&gt;identifier_list&lt;/code&gt;中的名字前面不能使用&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[=, identifier_list]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;identifier_list&lt;/code&gt;中的变量采用引用方式捕获，而任何隐式捕获的变量都采用值方式捕获。&lt;code&gt;identifier_list&lt;/code&gt;中的名字不能包括&lt;code&gt;this&lt;/code&gt;，且前面必须使用&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;参数绑定&#34;&gt;参数绑定&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lambda&lt;/code&gt;表达式更适合在一两个地方使用的简单操作。&lt;/li&gt;
&lt;li&gt;如果是很多地方使用相同的操作，还是需要定义函数。&lt;/li&gt;
&lt;li&gt;函数如何包装成一元谓词？使用参数绑定。&lt;/li&gt;
&lt;li&gt;标准库&lt;code&gt;bind&lt;/code&gt;函数：
&lt;ul&gt;
&lt;li&gt;定义在头文件&lt;code&gt;functional&lt;/code&gt;中，可以看做为一个通用的函数适配器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto newCallable = bind(callable, arg_list);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;我们再调用&lt;code&gt;newCallable&lt;/code&gt;的时候，&lt;code&gt;newCallable&lt;/code&gt;会调用&lt;code&gt;callable&lt;/code&gt;并传递给它&lt;code&gt;arg_list&lt;/code&gt;中的参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_n&lt;/code&gt;代表第 n 个位置的参数。定义在&lt;code&gt;placeholders&lt;/code&gt;的命名空间中。&lt;code&gt;using std::placeholder::_1;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto g = bind(f, a, b, _2, c, _1);&lt;/code&gt;，调用&lt;code&gt;g(_1, _2)&lt;/code&gt;实际上调用&lt;code&gt;f(a, b, _2, c, _1)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;非占位符的参数要使用引用传参，必须使用标准库&lt;code&gt;ref&lt;/code&gt;函数或者&lt;code&gt;cref&lt;/code&gt;函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;再探迭代器&#34;&gt;再探迭代器&lt;/h2&gt;
&lt;h3 id=&#34;插入迭代器&#34;&gt;插入迭代器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;插入器是一种迭代器适配器，接受一个容器，生成一个迭代器，能实现向给定容器添加元素。&lt;/li&gt;
&lt;li&gt;三种类型：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;back_inserter&lt;/code&gt;：创建一个使用&lt;code&gt;push_back&lt;/code&gt;的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;front_inserter&lt;/code&gt;创建一个使用&lt;code&gt;push_front&lt;/code&gt;的迭代器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inserter&lt;/code&gt;创建一个使用&lt;code&gt;insert&lt;/code&gt;的迭代器。接受第二个参数，即一个指向给定容器的迭代器，元素会被查到迭代器所指向的元素之前。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;插入迭代器操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;it=t&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;it&lt;/code&gt;指定的当前位置插入值&lt;code&gt;t&lt;/code&gt;。假定&lt;code&gt;c&lt;/code&gt;是&lt;code&gt;it&lt;/code&gt;绑定的容器，依赖于插入迭代器的不同种类，此赋值会分别调用&lt;code&gt;c.push_back(t)&lt;/code&gt;、&lt;code&gt;c.push_front(t)&lt;/code&gt;、&lt;code&gt;c.insert(t, p)&lt;/code&gt;，其中&lt;code&gt;p&lt;/code&gt;是传递给&lt;code&gt;inserter&lt;/code&gt;的迭代器位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*it, ++it, it++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这些操作虽然存在，但不会对&lt;code&gt;it&lt;/code&gt;做任何事情，每个操作都返回&lt;code&gt;it&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;iostream-迭代器&#34;&gt;iostream 迭代器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;迭代器可与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。&lt;/li&gt;
&lt;li&gt;通过使用流迭代器，我们可以用泛型算法从流对象中读取数据以及向其写入数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;istream_iterator 的操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;istream_iterator&amp;lt;T&amp;gt; in(is);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;in&lt;/code&gt;从输入流&lt;code&gt;is&lt;/code&gt;读取类型为&lt;code&gt;T&lt;/code&gt;的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;istream_iterator&amp;lt;T&amp;gt; end;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取类型是&lt;code&gt;T&lt;/code&gt;的值的&lt;code&gt;istream_iterator&lt;/code&gt;迭代器，表示尾后位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in1 == in2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;in1&lt;/code&gt;和&lt;code&gt;in2&lt;/code&gt;必须读取相同类型。如果他们都是尾后迭代器，或绑定到相同的输入，则两者相等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in1 != in2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;类似上条&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*in&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回从流中读取的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in-&amp;gt;mem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与&lt;code&gt;*(in).mem&lt;/code&gt;含义相同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;++in, in++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用元素类型所定义的&lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;运算符从流中读取下一个值。前置版本返回一个指向递增后迭代器的引用，后置版本返回旧值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;ostream_iterator 的操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ostream_iterator&amp;lt;T&amp;gt; out(os);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;out&lt;/code&gt;将类型为&lt;code&gt;T&lt;/code&gt;的值写到输出流&lt;code&gt;os&lt;/code&gt;中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ostream_iterator&amp;lt;T&amp;gt; out(os, d);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;out&lt;/code&gt;将类型为&lt;code&gt;T&lt;/code&gt;的值写到输出流&lt;code&gt;os&lt;/code&gt;中，每个值后面都输出一个&lt;code&gt;d&lt;/code&gt;。&lt;code&gt;d&lt;/code&gt;指向一个空字符结尾的字符数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;out = val&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;运算符将&lt;code&gt;val&lt;/code&gt;写入到&lt;code&gt;out&lt;/code&gt;所绑定的&lt;code&gt;ostream&lt;/code&gt;中。&lt;code&gt;val&lt;/code&gt;的类型必须和&lt;code&gt;out&lt;/code&gt;可写的类型兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*out, ++out, out++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;这些运算符是存在的，但不对&lt;code&gt;out&lt;/code&gt;做任何事情。每个运算符都返回&lt;code&gt;out&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;反向迭代器&#34;&gt;反向迭代器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;反向迭代器就是在容器中从尾元素向首元素反向移动的迭代器。&lt;/li&gt;
&lt;li&gt;对于反向迭代器，递增和递减的操作含义会颠倒。&lt;/li&gt;
&lt;li&gt;实现向后遍历，配合&lt;code&gt;rbegin&lt;/code&gt;和&lt;code&gt;rend&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;泛型算法结构&#34;&gt;泛型算法结构&lt;/h2&gt;
&lt;h3 id=&#34;5-类迭代器&#34;&gt;5 类迭代器&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;迭代器类别&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;支持的操作&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;输入迭代器&lt;/td&gt;
&lt;td&gt;只读，不写；单遍扫描，只能递增&lt;/td&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;,&lt;code&gt;!=&lt;/code&gt;,&lt;code&gt;++&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt;,&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;输出迭代器&lt;/td&gt;
&lt;td&gt;只写，不读；单遍扫描，只能递增&lt;/td&gt;
&lt;td&gt;&lt;code&gt;++&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;前向迭代器&lt;/td&gt;
&lt;td&gt;可读写；多遍扫描，只能递增&lt;/td&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;,&lt;code&gt;!=&lt;/code&gt;,&lt;code&gt;++&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt;,&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;双向迭代器&lt;/td&gt;
&lt;td&gt;可读写；多遍扫描，可递增递减&lt;/td&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;,&lt;code&gt;!=&lt;/code&gt;,&lt;code&gt;++&lt;/code&gt;,&lt;code&gt;--&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt;,&lt;code&gt;-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;随机访问迭代器&lt;/td&gt;
&lt;td&gt;可读写，多遍扫描，支持全部迭代器运算&lt;/td&gt;
&lt;td&gt;&lt;code&gt;==&lt;/code&gt;,&lt;code&gt;!=&lt;/code&gt;,&lt;code&gt;&amp;lt;&lt;/code&gt;,&lt;code&gt;&amp;lt;=&lt;/code&gt;,&lt;code&gt;&amp;gt;&lt;/code&gt;,&lt;code&gt;&amp;gt;=&lt;/code&gt;,&lt;code&gt;++&lt;/code&gt;,&lt;code&gt;--&lt;/code&gt;,&lt;code&gt;+&lt;/code&gt;,&lt;code&gt;+=&lt;/code&gt;,&lt;code&gt;-&lt;/code&gt;,&lt;code&gt;-=&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt;,&lt;code&gt;-&amp;gt;&lt;/code&gt;,&lt;code&gt;iter[n]&lt;/code&gt;==&lt;code&gt;*(iter[n])&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;算法的形参模式&#34;&gt;算法的形参模式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, other args);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, dest, other args);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, beg2, other args);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alg(beg, end, beg2, end2, other args);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，&lt;code&gt;alg&lt;/code&gt;是算法名称，&lt;code&gt;beg&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;表示算法所操作的输入范围。&lt;code&gt;dest&lt;/code&gt;、&lt;code&gt;beg2&lt;/code&gt;、&lt;code&gt;end2&lt;/code&gt;都是迭代器参数，是否使用要依赖于执行的操作。&lt;/p&gt;
&lt;h3 id=&#34;算法命名规范&#34;&gt;算法命名规范&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;一些算法使用重载形式传递一个谓词。&lt;/li&gt;
&lt;li&gt;接受一个元素值的算法通常有一个&lt;strong&gt;不同名&lt;/strong&gt;的版本：加&lt;code&gt;_if&lt;/code&gt;，接受一个谓词代替元素值。&lt;/li&gt;
&lt;li&gt;区分拷贝元素的版本和不拷贝的版本：拷贝版本通常加&lt;code&gt;_copy&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;特定容器算法&#34;&gt;特定容器算法&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对于&lt;code&gt;list&lt;/code&gt;和&lt;code&gt;forward_list&lt;/code&gt;，优先使用成员函数版本的算法而不是通用算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;list 和 forward_list 成员函数版本的算法&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.merge(lst2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将来自&lt;code&gt;lst2&lt;/code&gt;的元素合并入&lt;code&gt;lst&lt;/code&gt;，二者都必须是有序的，元素将从&lt;code&gt;lst2&lt;/code&gt;中删除。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.merge(lst2, comp)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上，给定比较操作。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.remove(val)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调用&lt;code&gt;erase&lt;/code&gt;删除掉与给定值相等(==)的每个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.remove_if(pred)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调用&lt;code&gt;erase&lt;/code&gt;删除掉令一元谓词为真的每个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.reverse()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;反转&lt;code&gt;lst&lt;/code&gt;中元素的顺序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.sort()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;&amp;lt;&lt;/code&gt;排序元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.sort(comp)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用给定比较操作排序元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.unique()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调用&lt;code&gt;erase&lt;/code&gt;删除同一个值的连续拷贝。使用&lt;code&gt;==&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lst.unique(pred)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调用&lt;code&gt;erase&lt;/code&gt;删除同一个值的连续拷贝。使用给定的二元谓词。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;上面的操作都返回&lt;code&gt;void&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;list 和 forward_list 的 splice 成员函数版本的参数&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(p, lst2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;是一个指向&lt;code&gt;lst&lt;/code&gt;中元素的迭代器，或者一个指向&lt;code&gt;flst&lt;/code&gt;首前位置的迭代器。函数将&lt;code&gt;lst2&lt;/code&gt;中的所有元素移动到&lt;code&gt;lst&lt;/code&gt;中&lt;code&gt;p&lt;/code&gt;之前的位置或是&lt;code&gt;flst&lt;/code&gt;中&lt;code&gt;p&lt;/code&gt;之后的位置。将元素从&lt;code&gt;lst2&lt;/code&gt;中删除。&lt;code&gt;lst2&lt;/code&gt;的类型必须和&lt;code&gt;lst&lt;/code&gt;相同，而且不能是同一个链表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(p, lst2, p2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上，&lt;code&gt;p2&lt;/code&gt;是一个指向&lt;code&gt;lst2&lt;/code&gt;中位置的有效的迭代器，将&lt;code&gt;p2&lt;/code&gt;指向的元素移动到&lt;code&gt;lst&lt;/code&gt;中，或将&lt;code&gt;p2&lt;/code&gt;之后的元素移动到&lt;code&gt;flst&lt;/code&gt;中。&lt;code&gt;lst2&lt;/code&gt;可以是于&lt;code&gt;lst&lt;/code&gt;或&lt;code&gt;flst&lt;/code&gt;相同的链表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(p, lst2, b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;表示&lt;code&gt;lst2&lt;/code&gt;中的合法范围。将给定范围中的元素从&lt;code&gt;lst2&lt;/code&gt;移动到&lt;code&gt;lst&lt;/code&gt;或&lt;code&gt;first&lt;/code&gt;中。&lt;code&gt;lst2&lt;/code&gt;与&lt;code&gt;lst&lt;/code&gt;可以使相同的链表，但&lt;code&gt;p&lt;/code&gt;不能指向给定范围中的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;使用&lt;code&gt;lst.splice(args)&lt;/code&gt;或&lt;code&gt;flst.splice_after(args)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>11.关联容器</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/11.%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/11.%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;第十一章-关联容器&#34;&gt;第十一章 关联容器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;关联容器和顺序容器的不同：关联容器中的元素时按照&lt;strong&gt;关键字&lt;/strong&gt;来保存和访问的。&lt;/li&gt;
&lt;li&gt;关联容器支持通过关键字来高效地查找和读取元素，基本的关联容器类型是 &lt;code&gt;map&lt;/code&gt;和 &lt;code&gt;set&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;关联容器类型&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;容器类型&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;按顺序存储&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关键数组：保存&lt;code&gt;关键字-值&lt;/code&gt;对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关键字即值，即只保存关键字的容器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multimap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;支持同一个键多次出现的&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multiset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;支持同一个键多次出现的&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;无序集合&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unordered_map&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用哈希函数组织的&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unordered_set&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用哈希函数组织的&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unordered_multimap&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;哈希组织的&lt;code&gt;map&lt;/code&gt;，关键字可以重复出现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unordered_multiset&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;哈希组织的&lt;code&gt;set&lt;/code&gt;，关键字可以重复出现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;关联容器概述&#34;&gt;关联容器概述&lt;/h2&gt;
&lt;h3 id=&#34;定义关联容器&#34;&gt;定义关联容器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要指定元素类型。&lt;/li&gt;
&lt;li&gt;列表初始化：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;map&lt;/code&gt;：&lt;code&gt;map&amp;lt;string, int&amp;gt; word_count = {{&amp;quot;a&amp;quot;, 1}, {&amp;quot;b&amp;quot;, 2}};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;：&lt;code&gt;set&amp;lt;string&amp;gt; exclude = {&amp;quot;the&amp;quot;, &amp;quot;a&amp;quot;};&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关键字类型的要求&#34;&gt;关键字类型的要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于有序容器，关键字类型必须定义元素比较的方法。默认是&lt;code&gt;&amp;lt;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;如果想传递一个比较的函数，可以这样定义：&lt;code&gt;multiset&amp;lt;Sales_data, decltype(compareIsbn)*&amp;gt; bookstore(compareIsbn);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;pair&#34;&gt;pair&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;utility&lt;/code&gt;头文件中定义。&lt;/li&gt;
&lt;li&gt;一个&lt;code&gt;pair&lt;/code&gt;保存两个数据成员，两个类型不要求一样。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;pair 的操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt; p;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;是一个&lt;code&gt;pair&lt;/code&gt;，两个类型分别是&lt;code&gt;T1&lt;/code&gt;和&lt;code&gt;T2&lt;/code&gt;的成员都进行了值初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt; p(v1, v2);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;first&lt;/code&gt;和&lt;code&gt;second&lt;/code&gt;分别用&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;进行初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pair&amp;lt;T1, T2&amp;gt;p = {v1, v2};&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于`p(v1, v2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;make_pair(v1, v2);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pair&lt;/code&gt;的类型从&lt;code&gt;v1&lt;/code&gt;和&lt;code&gt;v2&lt;/code&gt;的类型推断出来。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.first&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;的名为&lt;code&gt;first&lt;/code&gt;的数据成员。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.second&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;的名为&lt;code&gt;second&lt;/code&gt;的数据成员。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p1 relop p2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;运算关系符按字典序定义。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p1 == p2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;必须两对元素两两相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p1 != p2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;关联容器操作&#34;&gt;关联容器操作&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关联容器额外的类型别名&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型别名&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;key_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此容器类型的关键字类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;mapped_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每个关键字关联的类型，只适用于&lt;code&gt;map&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对于&lt;code&gt;map&lt;/code&gt;，是&lt;code&gt;pair&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code&gt;; 对于&lt;code&gt;set&lt;/code&gt;，和&lt;code&gt;key_type&lt;/code&gt;相同。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;关联容器迭代器&#34;&gt;关联容器迭代器&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解引用一个关联容器迭代器时，会得到一个类型为容器的&lt;code&gt;value_type&lt;/code&gt;的值的引用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;的迭代器是&lt;code&gt;const&lt;/code&gt;的。&lt;/li&gt;
&lt;li&gt;遍历关联容器：使用&lt;code&gt;begin&lt;/code&gt;和&lt;code&gt;end&lt;/code&gt;，遍历&lt;code&gt;map&lt;/code&gt;、&lt;code&gt;multimap&lt;/code&gt;、&lt;code&gt;set&lt;/code&gt;、&lt;code&gt;multiset&lt;/code&gt;时，迭代器按&lt;strong&gt;关键字升序&lt;/strong&gt;遍历元素。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;添加元素&#34;&gt;添加元素&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;关联容器&lt;code&gt;insert&lt;/code&gt;操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;code&gt;insert&lt;/code&gt;操作&lt;/th&gt;
&lt;th&gt;关联容器&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.insert(v)&lt;/code&gt; &lt;code&gt;c.emplace(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v&lt;/code&gt;是&lt;code&gt;value_type&lt;/code&gt;类型的对象；&lt;code&gt;args&lt;/code&gt;用来构造一个元素。对于&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;，只有元素的关键字不存在&lt;code&gt;c&lt;/code&gt;中才插入或构造元素。函数返回一个&lt;code&gt;pair&lt;/code&gt;，包含一个迭代器，指向具有指定关键字的元素，以及一个指示插入是否成功的&lt;code&gt;bool&lt;/code&gt;值。对于&lt;code&gt;multimap&lt;/code&gt;和&lt;code&gt;multiset&lt;/code&gt;则会插入范围中的每个元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.insert(b, e)&lt;/code&gt; &lt;code&gt;c.insert(il)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;是迭代器，表示一个&lt;code&gt;c::value_type&lt;/code&gt; 类型值的范围；&lt;code&gt;il&lt;/code&gt;是这种值的花括号列表。函数返回&lt;code&gt;void&lt;/code&gt;。对于 &lt;code&gt;map&lt;/code&gt;和&lt;code&gt;set&lt;/code&gt;，只插入关键字不在&lt;code&gt;c&lt;/code&gt;中的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.insert(p, v)&lt;/code&gt; &lt;code&gt;c.emplace(p, args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;类似&lt;code&gt;insert(v)&lt;/code&gt;，但将迭代器&lt;code&gt;p&lt;/code&gt;作为一个提示，指出从哪里开始搜索新元素应该存储的位置。返回一个迭代器，指向具有给定关键字的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;向&lt;code&gt;map&lt;/code&gt;添加元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;word_count.insert({word, 1});&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word_count.insert(make_pair(word, 1));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word_count.insert(pair&amp;lt;string, size_t&amp;gt;(word, 1));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;word_count.insert(map&amp;lt;string, size_t&amp;gt;::value_type (word, 1));&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;删除元素&#34;&gt;删除元素&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;从关联容器中删除元素&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.erase(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;c&lt;/code&gt;中删除每个关键字为&lt;code&gt;k&lt;/code&gt;的元素。返回一个&lt;code&gt;size_type&lt;/code&gt;值，指出删除的元素的数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.erase(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;c&lt;/code&gt;中删除迭代器&lt;code&gt;p&lt;/code&gt;指定的元素。&lt;code&gt;p&lt;/code&gt;必须指向&lt;code&gt;c&lt;/code&gt;中一个真实元素，不能等于&lt;code&gt;c.end()&lt;/code&gt;。返回一个指向&lt;code&gt;p&lt;/code&gt;之后元素的迭代器，若&lt;code&gt;p&lt;/code&gt;指向&lt;code&gt;c&lt;/code&gt;中的尾元素，则返回&lt;code&gt;c.end()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.erase(b, e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除迭代器对&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;所表示范围中的元素。返回&lt;code&gt;e&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;下标操作&#34;&gt;下标操作&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;unordered_map&lt;/code&gt;的下标操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c[k]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回关键字为&lt;code&gt;k&lt;/code&gt;的元素；如果&lt;code&gt;k&lt;/code&gt;不在&lt;code&gt;c&lt;/code&gt;中，添加一个关键字为&lt;code&gt;k&lt;/code&gt;的元素，对其值初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.at(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;访问关键字为&lt;code&gt;k&lt;/code&gt;的元素，带参数检查；若&lt;code&gt;k&lt;/code&gt;不存在在&lt;code&gt;c&lt;/code&gt;中，抛出一个&lt;code&gt;out_of_range&lt;/code&gt;异常。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;查找元素&#34;&gt;查找元素&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;在一个关联容器中查找元素&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.find(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个迭代器，指向第一个关键字为&lt;code&gt;k&lt;/code&gt;的元素，若&lt;code&gt;k&lt;/code&gt;不在容器中，则返回尾后迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.count(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回关键字等于&lt;code&gt;k&lt;/code&gt;的元素的数量。对于不允许重复关键字的容器，返回值永远是 0 或 1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.lower_bound(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个迭代器，指向第一个关键字&lt;strong&gt;不小于&lt;/strong&gt;&lt;code&gt;k&lt;/code&gt;的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.upper_bound(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个迭代器，指向第一个关键字&lt;strong&gt;大于&lt;/strong&gt;&lt;code&gt;k&lt;/code&gt;的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.equal_range(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个迭代器&lt;code&gt;pair&lt;/code&gt;，表示关键字等于&lt;code&gt;k&lt;/code&gt;的元素的范围。若&lt;code&gt;k&lt;/code&gt;不存在，&lt;code&gt;pair&lt;/code&gt;的两个成员均等于&lt;code&gt;c.end()&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lower_bound&lt;/code&gt;和&lt;code&gt;upper_bound&lt;/code&gt;不适用于无序容器。&lt;/li&gt;
&lt;li&gt;下标和&lt;code&gt;at&lt;/code&gt;操作只适用于非&lt;code&gt;const&lt;/code&gt;的&lt;code&gt;map&lt;/code&gt;和&lt;code&gt;unordered_map&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;无序容器&#34;&gt;无序容器&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有序容器使用比较运算符来组织元素；无序容器使用哈希函数和关键字类型的&lt;code&gt;==&lt;/code&gt;运算符。&lt;/li&gt;
&lt;li&gt;理论上哈希技术可以获得更好的性能。&lt;/li&gt;
&lt;li&gt;无序容器在存储上组织为一组桶(bucket)，每个桶保存零个或多个元素。无序容器使用一个哈希函数将元素映射到桶。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;无序容器管理操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;桶接口&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.bucket_count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;正在使用的桶的数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.max_bucket_count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;容器能容纳的最多的桶的数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.bucket_size(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第&lt;code&gt;n&lt;/code&gt;个桶中有多少个元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.bucket(k)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关键字为&lt;code&gt;k&lt;/code&gt;的元素在哪个桶中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;桶迭代&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;local_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;可以用来访问桶中元素的迭代器类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;const_local_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;桶迭代器的&lt;code&gt;const&lt;/code&gt;版本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.begin(n)&lt;/code&gt;，&lt;code&gt;c.end(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;桶&lt;code&gt;n&lt;/code&gt;的首元素迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.cbegin(n)&lt;/code&gt;，&lt;code&gt;c.cend(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与前两个函数类似，但返回&lt;code&gt;const_local_iterator&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;哈希策略&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.load_factor()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每个桶的平均元素数量，返回&lt;code&gt;float&lt;/code&gt;值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.max_load_factor()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;c&lt;/code&gt;试图维护的平均比桶大小，返回&lt;code&gt;float&lt;/code&gt;值。&lt;code&gt;c&lt;/code&gt;会在需要时添加新的桶，以使得&lt;code&gt;load_factor&amp;lt;=max_load_factor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.rehash(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重组存储，使得&lt;code&gt;bucket_count&amp;gt;=n&lt;/code&gt;，且&lt;code&gt;bucket_count&amp;gt;size/max_load_factor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;c.reverse(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重组存储，使得&lt;code&gt;c&lt;/code&gt;可以保存&lt;code&gt;n&lt;/code&gt;个元素且不必&lt;code&gt;rehash&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>12.动态内存</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/12.%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/12.%E5%8A%A8%E6%80%81%E5%86%85%E5%AD%98/</guid>
      <description>&lt;h1 id=&#34;第十二章-动态内存&#34;&gt;第十二章 动态内存&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对象的生命周期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局对象在程序启动时分配，结束时销毁。&lt;/li&gt;
&lt;li&gt;局部对象在进入程序块时创建，离开块时销毁。&lt;/li&gt;
&lt;li&gt;局部&lt;code&gt;static&lt;/code&gt;对象在第一次使用前分配，在程序结束时销毁。&lt;/li&gt;
&lt;li&gt;动态分配对象：只能显式地被释放。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对象的内存位置：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态内存&lt;/strong&gt;用来保存局部&lt;code&gt;static&lt;/code&gt;对象、类&lt;code&gt;static&lt;/code&gt;对象、定义在任何函数之外的变量。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;栈内存&lt;/strong&gt;用来保存定义在函数内的非&lt;code&gt;static&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;堆内存&lt;/strong&gt;，又称自由空间，用来存储&lt;strong&gt;动态分配&lt;/strong&gt;的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;动态内存与智能指针&#34;&gt;动态内存与智能指针&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;动态内存管理：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;：在动态内存中为对象分配空间并返回一个指向该对象的指针。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;：接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;智能指针：
&lt;ul&gt;
&lt;li&gt;管理动态对象。&lt;/li&gt;
&lt;li&gt;行为类似常规指针。&lt;/li&gt;
&lt;li&gt;负责自动释放所指向的对象。&lt;/li&gt;
&lt;li&gt;智能指针也是模板。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shared_ptr-类&#34;&gt;shared_ptr 类&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;shared_ptr 和 unique_ptr 都支持的操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt; sp&lt;/code&gt; &lt;code&gt;unique_ptr&amp;lt;T&amp;gt; up&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空智能指针，可以指向类型是&lt;code&gt;T&lt;/code&gt;的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;p&lt;/code&gt;用作一个条件判断，若&lt;code&gt;p&lt;/code&gt;指向一个对象，则为&lt;code&gt;true&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;解引用&lt;code&gt;p&lt;/code&gt;，获得它指向的对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p-&amp;gt;mem&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;(*p).mem&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.get()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;p&lt;/code&gt;中保存的指针，要小心使用，若智能指针释放了对象，返回的指针所指向的对象也就消失了。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;swap(p, q)&lt;/code&gt; &lt;code&gt;p.swap(q)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;交换&lt;code&gt;p&lt;/code&gt;和&lt;code&gt;q&lt;/code&gt;中的指针&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;shared_ptr 独有的操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;make_shared&amp;lt;T&amp;gt;(args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;shared_ptr&lt;/code&gt;，指向一个动态分配的类型为&lt;code&gt;T&lt;/code&gt;的对象。使用&lt;code&gt;args&lt;/code&gt;初始化此对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt;p(q)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;是&lt;code&gt;shared_ptr q&lt;/code&gt;的拷贝；此操作会&lt;strong&gt;递增&lt;/strong&gt;&lt;code&gt;q&lt;/code&gt;中的计数器。&lt;code&gt;q&lt;/code&gt;中的指针必须能转换为&lt;code&gt;T*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p = q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;和&lt;code&gt;q&lt;/code&gt;都是&lt;code&gt;shared_ptr&lt;/code&gt;，所保存的指针必须能互相转换。此操作会&lt;strong&gt;递减&lt;/strong&gt;&lt;code&gt;p&lt;/code&gt;的引用计数，&lt;strong&gt;递增&lt;/strong&gt;&lt;code&gt;q&lt;/code&gt;的引用计数；若&lt;code&gt;p&lt;/code&gt;的引用计数变为 0，则将其管理的原内存释放。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.unique()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若&lt;code&gt;p.use_count()&lt;/code&gt;是 1，返回&lt;code&gt;true&lt;/code&gt;；否则返回&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.use_count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回与&lt;code&gt;p&lt;/code&gt;共享对象的智能指针数量；可能很慢，主要用于调试。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用动态内存的三种原因&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;程序不知道自己需要使用多少对象（比如容器类）。&lt;/li&gt;
&lt;li&gt;程序不知道所需要对象的准确类型。&lt;/li&gt;
&lt;li&gt;程序需要在多个对象间共享数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;直接管理内存&#34;&gt;直接管理内存&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;new&lt;/code&gt;动态分配和初始化对象。
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;无法为分配的对象命名（因为自由空间分配的内存是无名的），因此是返回一个指向该对象的指针。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int *pi = new int(123);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一旦内存耗尽，会抛出类型是&lt;code&gt;bad_alloc&lt;/code&gt;的异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;delete&lt;/code&gt;将动态内存归还给系统。
&lt;ul&gt;
&lt;li&gt;接受一个指针，指向要释放的对象。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;delete&lt;/code&gt;后的指针称为空悬指针（dangling pointer）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;new&lt;/code&gt;和&lt;code&gt;delete&lt;/code&gt;管理动态内存存在三个常见问题：
&lt;ul&gt;
&lt;li&gt;1.忘记&lt;code&gt;delete&lt;/code&gt;内存。&lt;/li&gt;
&lt;li&gt;2.使用已经释放掉的对象。&lt;/li&gt;
&lt;li&gt;3.同一块内存释放两次。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;坚持只使用智能指针可以避免上述所有问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;shared_ptr-和-new-结合使用&#34;&gt;shared_ptr 和 new 结合使用&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;定义和改变 shared_ptr 的其他方法&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt; p(q)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;管理内置指针&lt;code&gt;q&lt;/code&gt;所指向的对象；&lt;code&gt;q&lt;/code&gt;必须指向&lt;code&gt;new&lt;/code&gt;分配的内存，且能够转换为&lt;code&gt;T*&lt;/code&gt;类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt; p(u)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;从&lt;code&gt;unique_ptr u&lt;/code&gt;那里接管了对象的所有权；将&lt;code&gt;u&lt;/code&gt;置为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt; p(q, d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;接管了内置指针&lt;code&gt;q&lt;/code&gt;所指向的对象的所有权。&lt;code&gt;q&lt;/code&gt;必须能转换为&lt;code&gt;T*&lt;/code&gt;类型。&lt;code&gt;p&lt;/code&gt;将使用可调用对象&lt;code&gt;d&lt;/code&gt;来代替&lt;code&gt;delete&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;shared_ptr&amp;lt;T&amp;gt; p(p2, d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;是&lt;code&gt;shared_ptr p2&lt;/code&gt;的拷贝，唯一的区别是&lt;code&gt;p&lt;/code&gt;将可调用对象&lt;code&gt;d&lt;/code&gt;来代替&lt;code&gt;delete&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.reset()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若&lt;code&gt;p&lt;/code&gt;是唯一指向其对象的&lt;code&gt;shared_ptr&lt;/code&gt;，&lt;code&gt;reset&lt;/code&gt;会释放此对象。若传递了可选的参数内置指针&lt;code&gt;q&lt;/code&gt;，会令&lt;code&gt;p&lt;/code&gt;指向&lt;code&gt;q&lt;/code&gt;，否则会将&lt;code&gt;p&lt;/code&gt;置空。若还传递了参数&lt;code&gt;d&lt;/code&gt;，则会调用&lt;code&gt;d&lt;/code&gt;而不是&lt;code&gt;delete&lt;/code&gt;来释放&lt;code&gt;q&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.reset(q)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;p.reset(q, d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同上&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;智能指针和异常&#34;&gt;智能指针和异常&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果使用智能指针，即使程序块由于异常过早结束，智能指针类也能确保在内存不需要的时候将其释放。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;智能指针陷阱&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;不用相同的内置指针初始化（或&lt;code&gt;reset&lt;/code&gt;）多个智能指针&lt;/li&gt;
&lt;li&gt;不&lt;code&gt;delete get()&lt;/code&gt;返回的指针。&lt;/li&gt;
&lt;li&gt;如果你使用&lt;code&gt;get()&lt;/code&gt;返回的指针，记得当最后一个对应的智能指针销毁后，你的指针就无效了。&lt;/li&gt;
&lt;li&gt;如果你使用智能指针管理的资源不是&lt;code&gt;new&lt;/code&gt;分配的内存，记住传递给它一个删除器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;unique_ptr&#34;&gt;unique_ptr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某一个时刻只能有一个&lt;code&gt;unique_ptr&lt;/code&gt;指向一个给定的对象。&lt;/li&gt;
&lt;li&gt;不支持拷贝或者赋值操作。&lt;/li&gt;
&lt;li&gt;向后兼容：&lt;code&gt;auto_ptr&lt;/code&gt;：老版本，具有&lt;code&gt;unique_ptr&lt;/code&gt;的部分特性。特别是，不能在容器中保存&lt;code&gt;auto_ptr&lt;/code&gt;，也不能从函数返回&lt;code&gt;auto_ptr&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;unique_ptr 操作&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&amp;lt;T&amp;gt; u1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空&lt;code&gt;unique_ptr&lt;/code&gt;，可以指向类型是&lt;code&gt;T&lt;/code&gt;的对象。&lt;code&gt;u1&lt;/code&gt;会使用&lt;code&gt;delete&lt;/code&gt;来是释放它的指针。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&amp;lt;T, D&amp;gt; u2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;u2&lt;/code&gt;会使用一个类型为&lt;code&gt;D&lt;/code&gt;的可调用对象来释放它的指针。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&amp;lt;T, D&amp;gt; u(d)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空&lt;code&gt;unique_ptr&lt;/code&gt;，指向类型为&lt;code&gt;T&lt;/code&gt;的对象，用类型为&lt;code&gt;D&lt;/code&gt;的对象&lt;code&gt;d&lt;/code&gt;代替&lt;code&gt;delete&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u = nullptr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;释放&lt;code&gt;u&lt;/code&gt;指向的对象，将&lt;code&gt;u&lt;/code&gt;置为空。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.release()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;放弃对指针的控制权，返回指针，并将&lt;code&gt;u&lt;/code&gt;置空。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.reset()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;释放&lt;code&gt;u&lt;/code&gt;指向的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.reset(q)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;令&lt;code&gt;u&lt;/code&gt;指向&lt;code&gt;q&lt;/code&gt;指向的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u.reset(nullptr)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;u&lt;/code&gt;置空&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;weak_ptr&#34;&gt;weak_ptr&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;weak_ptr&lt;/code&gt;是一种不控制所指向对象生存期的智能指针。&lt;/li&gt;
&lt;li&gt;指向一个由&lt;code&gt;shared_ptr&lt;/code&gt;管理的对象，不改变&lt;code&gt;shared_ptr&lt;/code&gt;的引用计数。&lt;/li&gt;
&lt;li&gt;一旦最后一个指向对象的&lt;code&gt;shared_ptr&lt;/code&gt;被销毁，对象就会被释放，不管有没有&lt;code&gt;weak_ptr&lt;/code&gt;指向该对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;weak_ptr 操作&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;weak_ptr&amp;lt;T&amp;gt; w&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;空&lt;code&gt;weak_ptr&lt;/code&gt;可以指向类型为&lt;code&gt;T&lt;/code&gt;的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;weak_ptr&amp;lt;T&amp;gt; w(sp)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与&lt;code&gt;shared_ptr&lt;/code&gt;指向相同对象的&lt;code&gt;weak_ptr&lt;/code&gt;。&lt;code&gt;T&lt;/code&gt;必须能转换为&lt;code&gt;sp&lt;/code&gt;指向的类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w = p&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;可以是&lt;code&gt;shared_ptr&lt;/code&gt;或一个&lt;code&gt;weak_ptr&lt;/code&gt;。赋值后&lt;code&gt;w&lt;/code&gt;和&lt;code&gt;p&lt;/code&gt;共享对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w.reset()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;w&lt;/code&gt;置为空。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w.use_count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与&lt;code&gt;w&lt;/code&gt;共享对象的&lt;code&gt;shared_ptr&lt;/code&gt;的数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w.expired()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;若&lt;code&gt;w.use_count()&lt;/code&gt;为 0，返回&lt;code&gt;true&lt;/code&gt;，否则返回&lt;code&gt;false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;w.lock()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果&lt;code&gt;expired&lt;/code&gt;为&lt;code&gt;true&lt;/code&gt;，则返回一个空&lt;code&gt;shared_ptr&lt;/code&gt;；否则返回一个指向&lt;code&gt;w&lt;/code&gt;的对象的&lt;code&gt;shared_ptr&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;动态数组&#34;&gt;动态数组&lt;/h2&gt;
&lt;h3 id=&#34;new-和数组&#34;&gt;new 和数组&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;new&lt;/code&gt;一个动态数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;类型名之后加一对方括号，指明分配的对象数目（必须是整型，不必是常量）。&lt;/li&gt;
&lt;li&gt;返回&lt;strong&gt;指向第一个对象的指针&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int *p = new int[size];&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;delete&lt;/code&gt;一个动态数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;delete [] p;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;unique_ptr&lt;/code&gt;和数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指向数组的&lt;code&gt;unique_ptr&lt;/code&gt;不支持成员访问运算符（点和箭头）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&amp;lt;T[]&amp;gt; u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;可以指向一个动态分配的数组，整数元素类型为&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unique_ptr&amp;lt;T[]&amp;gt; u(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;u&lt;/code&gt;指向内置指针&lt;code&gt;p&lt;/code&gt;所指向的动态分配的数组。&lt;code&gt;p&lt;/code&gt;必须能转换为类型&lt;code&gt;T*&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;u[i]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;u&lt;/code&gt;拥有的数组中位置&lt;code&gt;i&lt;/code&gt;处的对象。&lt;code&gt;u&lt;/code&gt;必须指向一个数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;allocator-类&#34;&gt;allocator 类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;标准库&lt;code&gt;allocator&lt;/code&gt;类定义在头文件&lt;code&gt;memory&lt;/code&gt;中，帮助我们将内存分配和对象构造分离开。&lt;/li&gt;
&lt;li&gt;分配的是原始的、未构造的内存。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocator&lt;/code&gt;是一个模板。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;allocator&amp;lt;string&amp;gt; alloc;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;标准库 allocator 类及其算法&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allocator&amp;lt;T&amp;gt; a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义了一个名为&lt;code&gt;a&lt;/code&gt;的&lt;code&gt;allocator&lt;/code&gt;对象，它可以为类型为&lt;code&gt;T&lt;/code&gt;的对象分配内存&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a.allocate(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;分配一段原始的、未构造的内存，保存&lt;code&gt;n&lt;/code&gt;个类型为&lt;code&gt;T&lt;/code&gt;的对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a.deallocate(p, n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;释放从&lt;code&gt;T*&lt;/code&gt;指针&lt;code&gt;p&lt;/code&gt;中地址开始的内存，这块内存保存了&lt;code&gt;n&lt;/code&gt;个类型为&lt;code&gt;T&lt;/code&gt;的对象；&lt;code&gt;p&lt;/code&gt;必须是一个先前由&lt;code&gt;allocate&lt;/code&gt;返回的指针。且&lt;code&gt;n&lt;/code&gt;必须是&lt;code&gt;p&lt;/code&gt;创建时所要求的大小。在调用&lt;code&gt;deallocate&lt;/code&gt;之前，用户必须对每个在这块内存中创建的对象调用&lt;code&gt;destroy&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a.construct(p, args)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;必须是一个类型是&lt;code&gt;T*&lt;/code&gt;的指针，指向一块原始内存；&lt;code&gt;args&lt;/code&gt;被传递给类型为&lt;code&gt;T&lt;/code&gt;的构造函数，用来在&lt;code&gt;p&lt;/code&gt;指向的内存中构造一个对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;a.destroy(p)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;p&lt;/code&gt;为&lt;code&gt;T*&lt;/code&gt;类型的指针，此算法对&lt;code&gt;p&lt;/code&gt;指向的对象执行析构函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;allocator 伴随算法&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uninitialized_copy(b, e, b2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;给定的输入范围中拷贝元素到迭代器&lt;code&gt;b2&lt;/code&gt;指定的未构造的原始内存中。&lt;code&gt;b2&lt;/code&gt;指向的内存必须足够大，能够容纳输入序列中元素的拷贝。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uninitialized_copy_n(b, n, b2)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从迭代器&lt;code&gt;b&lt;/code&gt;指向的元素开始，拷贝&lt;code&gt;n&lt;/code&gt;个元素到&lt;code&gt;b2&lt;/code&gt;开始的内存中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uninitialized_fill(b, e, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;执行的原始内存范围中创建对象，对象的值均为&lt;code&gt;t&lt;/code&gt;的拷贝。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uninitialized_fill_n(b, n, t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从迭代器&lt;code&gt;b&lt;/code&gt;指向的内存地址开始创建&lt;code&gt;n&lt;/code&gt;个对象。&lt;code&gt;b&lt;/code&gt;必须指向足够大的未构造的原始内存，能够容纳给定数量的对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;定义在头文件&lt;code&gt;memory&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;在给定目的位置创建元素，而不是由系统分配内存给他们。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>13.拷贝控制</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/13.%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/13.%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6/</guid>
      <description>&lt;h1 id=&#34;第十三章-拷贝控制&#34;&gt;第十三章 拷贝控制&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;拷贝控制操作&lt;/strong&gt;（copy control）:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;拷贝构造函数（copy constructor）&lt;/li&gt;
&lt;li&gt;拷贝赋值运算符（copy-assignment operator）&lt;/li&gt;
&lt;li&gt;移动构造函数（move constructor）&lt;/li&gt;
&lt;li&gt;移动赋值函数（move-assignement operator）&lt;/li&gt;
&lt;li&gt;析构函数（destructor）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拷贝赋值和销毁&#34;&gt;拷贝、赋值和销毁&lt;/h2&gt;
&lt;h3 id=&#34;拷贝构造函数&#34;&gt;拷贝构造函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果一个构造函数的第一个参数是&lt;strong&gt;自身类类型的引用&lt;/strong&gt;，且任何额外参数都有默认值，则此构造函数是&lt;strong&gt;拷贝构造函数&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;class Foo{ public: Foo(const Foo&amp;amp;); }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合成的拷贝构造函数&lt;/strong&gt;（synthesized copy constructor）：会将参数的成员逐个拷贝到正在创建的对象中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;拷贝初始化&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将右侧运算对象拷贝到正在创建的对象中，如果需要，还需进行类型转换。&lt;/li&gt;
&lt;li&gt;通常使用拷贝构造函数完成。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string book = &amp;quot;9-99&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;出现场景：
&lt;ul&gt;
&lt;li&gt;用&lt;code&gt;=&lt;/code&gt;定义变量时。&lt;/li&gt;
&lt;li&gt;将一个对象作为实参传递给一个非引用类型的形参。&lt;/li&gt;
&lt;li&gt;从一个返回类型为非引用类型的函数返回一个对象。&lt;/li&gt;
&lt;li&gt;用花括号列表初始化一个数组中的元素或者一个聚合类中的成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;拷贝赋值运算符&#34;&gt;拷贝赋值运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;重载赋值运算符&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;重写一个名为&lt;code&gt;operator=&lt;/code&gt;的函数.&lt;/li&gt;
&lt;li&gt;通常返回一个指向其左侧运算对象的引用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Foo&amp;amp; operator=(const Foo&amp;amp;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合成拷贝赋值运算符&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;将右侧运算对象的每个非&lt;code&gt;static&lt;/code&gt;成员赋予左侧运算对象的对应成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;析构函数&#34;&gt;析构函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;释放对象所使用的资源，并销毁对象的非&lt;code&gt;static&lt;/code&gt;数据成员。&lt;/li&gt;
&lt;li&gt;名字由波浪号接类名构成。没有返回值，也不接受参数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;~Foo();&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;调用时机：
&lt;ul&gt;
&lt;li&gt;变量在离开其作用域时。&lt;/li&gt;
&lt;li&gt;当一个对象被销毁时，其成员被销毁。&lt;/li&gt;
&lt;li&gt;容器被销毁时，其元素被销毁。&lt;/li&gt;
&lt;li&gt;动态分配的对象，当对指向它的指针应用&lt;code&gt;delete&lt;/code&gt;运算符时。&lt;/li&gt;
&lt;li&gt;对于临时对象，当创建它的完整表达式结束时。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;合成析构函数&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;空函数体执行完后，&lt;strong&gt;成员会被自动销毁。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;注意：析构函数体本身并不直接销毁成员。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;三五法则&#34;&gt;三/五法则&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;需要析构函数的类也需要拷贝和赋值操作。&lt;/li&gt;
&lt;li&gt;需要拷贝操作的类也需要赋值操作，反之亦然。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用default&#34;&gt;使用=default&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可以通过将拷贝控制成员定义为&lt;code&gt;=default&lt;/code&gt;来显式地要求编译器生成合成的版本。&lt;/li&gt;
&lt;li&gt;合成的函数将隐式地声明为内联的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;阻止拷贝&#34;&gt;阻止拷贝&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;大多数类应该定义默认构造函数、拷贝构造函数和拷贝赋值运算符，无论是隐式地还是显式地。&lt;/li&gt;
&lt;li&gt;定义删除的函数：&lt;code&gt;=delete&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;虽然声明了它们，但是不能以任何方式使用它们。&lt;/li&gt;
&lt;li&gt;析构函数不能是删除的成员。&lt;/li&gt;
&lt;li&gt;如果一个类有数据成员不能默认构造、拷贝、复制或者销毁，则对应的成员函数将被定义为删除的。&lt;/li&gt;
&lt;li&gt;老版本使用&lt;code&gt;private&lt;/code&gt;声明来阻止拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拷贝控制和资源管理&#34;&gt;拷贝控制和资源管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类的行为可以像一个值，也可以像一个指针。
&lt;ul&gt;
&lt;li&gt;行为像值：对象有自己的状态，副本和原对象是完全独立的。&lt;/li&gt;
&lt;li&gt;行为像指针：共享状态，拷贝一个这种类的对象时，副本和原对象使用相同的底层数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;交换操作&#34;&gt;交换操作&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;管理资源的类通常还定义一个名为&lt;code&gt;swap&lt;/code&gt;的函数。&lt;/li&gt;
&lt;li&gt;经常用于重排元素顺序的算法。&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;swap&lt;/code&gt;而不是&lt;code&gt;std::swap&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;对象移动&#34;&gt;对象移动&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;很多拷贝操作后，原对象会被销毁，因此引入移动操作可以大幅度提升性能。&lt;/li&gt;
&lt;li&gt;在新标准中，我们可以用容器保存不可拷贝的类型，只要它们可以被移动即可。&lt;/li&gt;
&lt;li&gt;标准库容器、&lt;code&gt;string&lt;/code&gt;和&lt;code&gt;shared_ptr&lt;/code&gt;类既可以支持移动也支持拷贝。&lt;code&gt;IO&lt;/code&gt;类和&lt;code&gt;unique_ptr&lt;/code&gt;类可以移动但不能拷贝。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;右值引用&#34;&gt;右值引用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新标准引入右值引用以支持移动操作。&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;获得右值引用。&lt;/li&gt;
&lt;li&gt;只能绑定到一个将要销毁的对象。&lt;/li&gt;
&lt;li&gt;常规引用可以称之为左值引用。&lt;/li&gt;
&lt;li&gt;左值持久，右值短暂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;move 函数&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int &amp;amp;&amp;amp;rr2 = std::move(rr1);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;move&lt;/code&gt;告诉编译器，我们有一个左值，但我希望像右值一样处理它。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;move&lt;/code&gt;意味着：除了对&lt;code&gt;rr1&lt;/code&gt;赋值或者销毁它外，我们将不再使用它。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;移动构造函数和移动赋值运算符&#34;&gt;移动构造函数和移动赋值运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;移动构造函数&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;第一个参数是该类类型的一个引用，关键是，这个引用参数是一个&lt;strong&gt;右值引用&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StrVec::StrVec(StrVec &amp;amp;&amp;amp;s) noexcept{}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;不分配任何新内存，只是接管给定的内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;移动赋值运算符&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StrVec&amp;amp; StrVec::operator=(StrVec &amp;amp;&amp;amp; rhs) noexcept{}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;移动右值，拷贝左值。&lt;/li&gt;
&lt;li&gt;如果没有移动构造函数，右值也被拷贝。&lt;/li&gt;
&lt;li&gt;更新三/五法则：如果一个类定义了任何一个拷贝操作，它就应该定义所有五个操作。&lt;/li&gt;
&lt;li&gt;移动迭代器：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;make_move_iterator&lt;/code&gt;函数讲一个普通迭代器转换为一个移动迭代器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;建议：小心地使用移动操作，以获得性能提升。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;右值引用和成员函数&#34;&gt;右值引用和成员函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;区分移动和拷贝的重载函数通常有一个版本接受一个&lt;code&gt;const T&amp;amp;&lt;/code&gt;，而另一个版本接受一个&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;引用限定符：
&lt;ul&gt;
&lt;li&gt;在参数列表后面防止一个&lt;code&gt;&amp;amp;&lt;/code&gt;，限定只能向可修改的左值赋值而不能向右值赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>14.重载运算与类型转换</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/14.%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/14.%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E4%B8%8E%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid>
      <description>&lt;h1 id=&#34;第十四章-重载运算与类型转换&#34;&gt;第十四章 重载运算与类型转换&lt;/h1&gt;
&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;重载运算符是具有特殊名字的函数：由关键字&lt;code&gt;operator&lt;/code&gt;和其后要定义的运算符号共同组成。&lt;/li&gt;
&lt;li&gt;当一个重载的运算符是成员函数时，&lt;code&gt;this&lt;/code&gt;绑定到左侧运算对象。动态运算符符函数的参数数量比运算对象的数量&lt;strong&gt;少一个&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;只能重载大多数的运算符，而不能发明新的运算符号。&lt;/li&gt;
&lt;li&gt;重载运算符的优先级和结合律跟对应的内置运算符保持一致。&lt;/li&gt;
&lt;li&gt;调用方式：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;data1 + data2;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator+(data1, data2);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;是否是成员函数：
&lt;ul&gt;
&lt;li&gt;赋值（&lt;code&gt;=&lt;/code&gt;）、下标（&lt;code&gt;[]&lt;/code&gt;）、调用（&lt;code&gt;()&lt;/code&gt;）和成员访问箭头（&lt;code&gt;-&amp;gt;&lt;/code&gt;）运算符必须是成员。&lt;/li&gt;
&lt;li&gt;复合赋值运算符一般来说是成员。&lt;/li&gt;
&lt;li&gt;改变对象状态的运算符或者和给定类型密切相关的运算符通常是成员，如递增、解引用。&lt;/li&gt;
&lt;li&gt;具有对称性的运算符如算术、相等性、关系和位运算符等，通常是非成员函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;运算符&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;可以被重载&lt;/th&gt;
&lt;th&gt;不可以被重载&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;::&lt;/code&gt;, &lt;code&gt;.*&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;, &lt;code&gt;? :&lt;/code&gt;,&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;, `&lt;/td&gt;
&lt;td&gt;&lt;code&gt;, &lt;/code&gt;~&lt;code&gt;, &lt;/code&gt;!&lt;code&gt;, &lt;/code&gt;,&lt;code&gt;, &lt;/code&gt;=`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;--&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, `&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;+=&lt;/code&gt;, &lt;code&gt;-=&lt;/code&gt;, &lt;code&gt;/=&lt;/code&gt;, &lt;code&gt;%=&lt;/code&gt;, &lt;code&gt;^=&lt;/code&gt;, &lt;code&gt;&amp;amp;=&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|=, &lt;code&gt;*=&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&amp;gt;&lt;/code&gt;, &lt;code&gt;-&amp;gt;*&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;new[]&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;delete[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;输入和输出运算符&#34;&gt;输入和输出运算符&lt;/h2&gt;
&lt;h3 id=&#34;重载输出运算符&#34;&gt;重载输出运算符&amp;laquo;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一个形参通常是一个非常量的&lt;code&gt;ostream&lt;/code&gt;对象的引用。非常量是因为向流中写入会改变其状态；而引用是因为我们无法复制一个&lt;code&gt;ostream&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;输入输出运算符必须是非成员函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;重载输入运算符&#34;&gt;重载输入运算符&amp;raquo;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;第一个形参通常是运算符将要读取的流的引用，第二个形参是将要读取到的（非常量）对象的引用。&lt;/li&gt;
&lt;li&gt;输入运算符必须处理输入可能失败的情况，而输出运算符不需要。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;算数和关系运算符-&#34;&gt;算数和关系运算符（+、-、*、/）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;如果类同时定义了算数运算符和相关的复合赋值运算符，则通常情况下应该使用复合赋值来实现算数运算符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;相等运算符&#34;&gt;相等运算符==&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果定义了&lt;code&gt;operator==&lt;/code&gt;，则这个类也应该定义&lt;code&gt;operator!=&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;相等运算符和不等运算符的一个应该把工作委托给另一个。&lt;/li&gt;
&lt;li&gt;相等运算符应该具有传递性。&lt;/li&gt;
&lt;li&gt;如果某个类在逻辑上有相等性的含义，则该类应该定义&lt;code&gt;operator==&lt;/code&gt;，这样做可以使用户更容易使用标准库算法来处理这个类。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;关系运算符&#34;&gt;关系运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果存在唯一一种逻辑可靠的&lt;code&gt;&amp;lt;&lt;/code&gt;定义，则应该考虑为这个类定义&lt;code&gt;&amp;lt;&lt;/code&gt;运算符。如果同时还包含&lt;code&gt;==&lt;/code&gt;，则当且晋档&lt;code&gt;&amp;lt;&lt;/code&gt;的定义和&lt;code&gt;++&lt;/code&gt;产生的结果一直时才定义&lt;code&gt;&amp;lt;&lt;/code&gt;运算符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;赋值运算符&#34;&gt;赋值运算符=&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;我们可以重载赋值运算符。不论形参的类型是什么，赋值运算符都必须定义为成员函数。&lt;/li&gt;
&lt;li&gt;赋值运算符必须定义成类的成员，复合赋值运算符通常情况下也应该这么做。这两类运算符都应该返回左侧运算对象的引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;下标运算符&#34;&gt;下标运算符[]&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;下标运算符必须是成员函数。&lt;/li&gt;
&lt;li&gt;一般会定义两个版本：
&lt;ul&gt;
&lt;li&gt;1.返回普通引用。&lt;/li&gt;
&lt;li&gt;2.类的常量成员，并返回常量引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;递增和递减运算符--&#34;&gt;递增和递减运算符（++、&amp;ndash;）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义递增和递减运算符的类应该同时定义前置版本和后置版本。&lt;/li&gt;
&lt;li&gt;通常应该被定义成类的成员。&lt;/li&gt;
&lt;li&gt;为了和内置版本保持一致，前置运算符应该返回递增或递减后对象的引用。&lt;/li&gt;
&lt;li&gt;同样为了和内置版本保持一致，后置运算符应该返回递增或递减前对象的值，而不是引用。&lt;/li&gt;
&lt;li&gt;后置版本接受一个额外的，不被使用的&lt;code&gt;int&lt;/code&gt;类型的形参。因为不会用到，所以无需命名。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;成员访问运算符-&#34;&gt;成员访问运算符（*、-&amp;gt;）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;箭头运算符必须是类的成员。解引用运算符通常也是类的成员，尽管并非必须如此。&lt;/li&gt;
&lt;li&gt;重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的某个类的对象。&lt;/li&gt;
&lt;li&gt;解引用和乘法的区别是一个是一元运算符，一个是二元运算符。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;函数调用运算符&#34;&gt;函数调用运算符&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;可以像使用函数一样，调用该类的对象。因为这样对待类同时也能存储状态，所以与普通函数相比更加灵活。&lt;/li&gt;
&lt;li&gt;函数调用运算符必须是成员函数。&lt;/li&gt;
&lt;li&gt;一个类可以定义多个不同版本的调用运算符，相互之间应该在参数数量或类型上有所区别。&lt;/li&gt;
&lt;li&gt;如果累定义了调用运算符，则该类的对象称作&lt;strong&gt;函数对象&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lambda是函数对象&#34;&gt;&lt;code&gt;lambda&lt;/code&gt;是函数对象&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;lambda&lt;/code&gt;捕获变量：&lt;code&gt;lambda&lt;/code&gt;产生的类必须为每个值捕获的变量建立对应的数据成员，同时创建构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;标准库定义的函数对象&#34;&gt;标准库定义的函数对象&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;标准库函数对象&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;算术&lt;/th&gt;
&lt;th&gt;关系&lt;/th&gt;
&lt;th&gt;逻辑&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;plus&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;equal_to&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logical_and&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minus&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;not_equal_to&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logical_or&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multiplies&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greater&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;logical_not&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;divides&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;greater_equal&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;modulus&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;less&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;negate&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;less_equal&amp;lt;Type&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;可以在算法中使用标准库函数对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;可调用对象与-function&#34;&gt;可调用对象与 function&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;标准库 function 类型&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;function&amp;lt;T&amp;gt; f;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;f&lt;/code&gt;是一个用来存储可调用对象的空&lt;code&gt;function&lt;/code&gt;，这些可调用对象的调用形式应该与类型&lt;code&gt;T&lt;/code&gt;相同。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;function&amp;lt;T&amp;gt; f(nullptr);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显式地构造一个空&lt;code&gt;function&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;function&amp;lt;T&amp;gt; f(obj)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在&lt;code&gt;f&lt;/code&gt;中存储可调用对象&lt;code&gt;obj&lt;/code&gt;的副本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;f&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;f&lt;/code&gt;作为条件：当&lt;code&gt;f&lt;/code&gt;含有一个可调用对象时为真；否则为假。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;定义为&lt;code&gt;function&amp;lt;T&amp;gt;&lt;/code&gt;的成员的类型&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该&lt;code&gt;function&lt;/code&gt;类型的可调用对象返回的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当&lt;code&gt;T&lt;/code&gt;有一个或两个实参时定义的类型。如果&lt;code&gt;T&lt;/code&gt;只有一个实参，则&lt;code&gt;argument_type&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第一个实参的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;second_argument_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第二个实参的类型&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;例如：声明一个&lt;code&gt;function&lt;/code&gt;类型，它可以表示接受两个&lt;code&gt;int&lt;/code&gt;，返回一个&lt;code&gt;int&lt;/code&gt;的可调用对象。&lt;code&gt;function&amp;lt;int(int, int)&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重载类型转换运算符&#34;&gt;重载、类型转换、运算符&lt;/h2&gt;
&lt;h3 id=&#34;类型转换运算符&#34;&gt;类型转换运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类型转换运算符是类的一种特殊成员函数，它负责将一个类类型的值转换成其他类型。类型转换函数的一般形式如下：&lt;code&gt;operator type() const;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;一个类型转换函数必须是类的成员函数；它不能声明返回类型，形参列表也必须为空。类型转换函数通常应该是&lt;code&gt;const&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;避免过度使用类型转换函数。&lt;/li&gt;
&lt;li&gt;C++11 引入了显式的类型转换运算符。&lt;/li&gt;
&lt;li&gt;向&lt;code&gt;bool&lt;/code&gt;的类型转换通常用在条件部分，因此&lt;code&gt;operator bool&lt;/code&gt;一般定义成&lt;code&gt;explicit&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;避免有二义性的类型转换&#34;&gt;避免有二义性的类型转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;通常，不要为类第几个亿相同的类型转换，也不要在类中定义两个及以上转换源或转换目标是算术类型的转换。&lt;/li&gt;
&lt;li&gt;在调用重载函数时，如果需要额外的标准类型转换，则该转换的级别只有当所有可行函数都请求同一个用户定义的类型转换时才有用。如果所需的用户定义的类型转换不止一个，则该调用具有二义性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数匹配与重载运算符&#34;&gt;函数匹配与重载运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;如果&lt;code&gt;a&lt;/code&gt;是一种类型，则表达式&lt;code&gt;a sym b&lt;/code&gt;可能是：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a.operatorsym(b);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operatorsym(a,b);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果我们队同一个类既提供了转换目标是算术类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>15.面向对象程序设计</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/15.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/15.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;第十五章-面向对象程序设计&#34;&gt;第十五章 面向对象程序设计&lt;/h1&gt;
&lt;h2 id=&#34;oop概述&#34;&gt;OOP：概述&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;面向对象程序设计（object-oriented programming）的核心思想是数据抽象、继承和动态绑定。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;继承&lt;/strong&gt;（inheritance）：
&lt;ul&gt;
&lt;li&gt;通过继承联系在一起的类构成一种层次关系。&lt;/li&gt;
&lt;li&gt;通常在层次关系的根部有一个&lt;strong&gt;基类&lt;/strong&gt;（base class）。&lt;/li&gt;
&lt;li&gt;其他类直接或者简介从基类继承而来，这些继承得到的类成为&lt;strong&gt;派生类&lt;/strong&gt;（derived class）。&lt;/li&gt;
&lt;li&gt;基类负责定义在层次关系中所有类共同拥有的成员，而每个派生类定义各自特有的成员。&lt;/li&gt;
&lt;li&gt;对于某些函数，基类希望它的派生类个自定义适合自己的版本，此时基类就将这些函数声明成&lt;strong&gt;虚函数&lt;/strong&gt;（virtual function）。&lt;/li&gt;
&lt;li&gt;派生类必须通过使用&lt;strong&gt;类派生列表&lt;/strong&gt;（class derivation list）明确指出它是从哪个基类继承而来。形式：一个冒号，后面紧跟以逗号分隔的基类列表，每个基类前都可以有访问说明符。&lt;code&gt;class Bulk_quote : public Quote{};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上&lt;code&gt;virtual&lt;/code&gt;关键字，也可以不加。C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个&lt;code&gt;override&lt;/code&gt;关键字。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;动态绑定&lt;/strong&gt;（dynamic binding，又称运行时绑定）：
&lt;ul&gt;
&lt;li&gt;使用同一段代码可以分别处理基类和派生类的对象。&lt;/li&gt;
&lt;li&gt;函数的运行版本由实参决定，即在运行时选择函数的版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定义基类和派生类&#34;&gt;定义基类和派生类&lt;/h2&gt;
&lt;h3 id=&#34;定义基类&#34;&gt;定义基类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。&lt;/li&gt;
&lt;li&gt;基类通过在其成员函数的声明语句前加上关键字&lt;code&gt;virtual&lt;/code&gt;使得该函数执行&lt;strong&gt;动态绑定&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果成员函数没有被声明为虚函数，则解析过程发生在编译时而非运行时。&lt;/li&gt;
&lt;li&gt;访问控制：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;： 基类和和其派生类还有友元可以访问。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;private&lt;/code&gt;： 只有基类本身和友元可以访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;定义派生类&#34;&gt;定义派生类&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;派生类必须通过类派生列表（class derivation list）明确指出它是从哪个基类继承而来。形式：冒号，后面紧跟以逗号分隔的基类列表，每个基类前面可以有一下三种访问说明符的一个：&lt;code&gt;public&lt;/code&gt;、&lt;code&gt;protected&lt;/code&gt;、&lt;code&gt;private&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个&lt;code&gt;override&lt;/code&gt;关键字。&lt;/li&gt;
&lt;li&gt;派生类构造函数：派生类必须使用基类的构造函数去初始化它的基类部分。&lt;/li&gt;
&lt;li&gt;静态成员：如果基类定义了一个基类成员，则在整个继承体系中只存在该成员的唯一定义。&lt;/li&gt;
&lt;li&gt;派生类的声明：声明中不包含它的派生列表。&lt;/li&gt;
&lt;li&gt;C++11 新标准提供了一种防止继承的方法，在类名后面跟一个关键字&lt;code&gt;final&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型转换与继承&#34;&gt;类型转换与继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;理解基类和派生类之间的类型抓换是理解 C++语言面向对象编程的关键所在。&lt;/li&gt;
&lt;li&gt;可以将基类的指针或引用绑定到派生类对象上。&lt;/li&gt;
&lt;li&gt;不存在从基类向派生类的隐式类型转换。&lt;/li&gt;
&lt;li&gt;派生类向基类的自动类型转换只对指针或引用类型有效，对象之间不存在类型转换。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;虚函数&#34;&gt;虚函数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使用虚函数可以执行动态绑定。&lt;/li&gt;
&lt;li&gt;OOP 的核心思想是多态性（polymorphism）。&lt;/li&gt;
&lt;li&gt;当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。&lt;/li&gt;
&lt;li&gt;派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上&lt;code&gt;virtual&lt;/code&gt;关键字，也可以不加。&lt;/li&gt;
&lt;li&gt;C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个&lt;code&gt;override&lt;/code&gt;关键字。&lt;/li&gt;
&lt;li&gt;如果我们想覆盖某个虚函数，但不小心把形参列表弄错了，这个时候就不会覆盖基类中的虚函数。加上&lt;code&gt;override&lt;/code&gt;可以明确程序员的意图，让编译器帮忙确认参数列表是否出错。&lt;/li&gt;
&lt;li&gt;如果虚函数使用默认实参，则基类和派生类中定义的默认实参最好一致。&lt;/li&gt;
&lt;li&gt;通常，只有成员函数（或友元）中的代码才需要使用&lt;strong&gt;作用域运算符&lt;/strong&gt;（&lt;code&gt;::&lt;/code&gt;）来回避虚函数的机制。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;抽象基类&#34;&gt;抽象基类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;纯虚函数&lt;/strong&gt;（pure virtual）：清晰地告诉用户当前的函数是没有实际意义的。纯虚函数无需定义，只用在函数体的位置前书写&lt;code&gt;=0&lt;/code&gt;就可以将一个虚函数说明为纯虚函数。&lt;/li&gt;
&lt;li&gt;含有纯虚函数的类是&lt;strong&gt;抽象基类&lt;/strong&gt;（abstract base class）。不能创建抽象基类的对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;访问控制与继承&#34;&gt;访问控制与继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;受保护的成员：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;protected&lt;/code&gt;说明符可以看做是&lt;code&gt;public&lt;/code&gt;和&lt;code&gt;private&lt;/code&gt;中的产物。&lt;/li&gt;
&lt;li&gt;类似于私有成员，受保护的成员对类的用户来说是不可访问的。&lt;/li&gt;
&lt;li&gt;类似于公有成员，受保护的成员对于派生类的成员和友元来说是可访问的。&lt;/li&gt;
&lt;li&gt;派生类的成员或友元只能通过派生类对象来访问基类的受保护成员。派生类对于一个基类对象中的受保护成员没有任何访问特权。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;派生访问说明符：
&lt;ul&gt;
&lt;li&gt;对于派生类的成员（及友元）能否访问其直接积累的成员没什么影响。&lt;/li&gt;
&lt;li&gt;派生访问说明符的目的是：控制派生类用户对于基类成员的访问权限。比如&lt;code&gt;struct Priv_Drev: private Base{}&lt;/code&gt;意味着在派生类&lt;code&gt;Priv_Drev&lt;/code&gt;中，从&lt;code&gt;Base&lt;/code&gt;继承而来的部分都是&lt;code&gt;private&lt;/code&gt;的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;友元关系不能继承。&lt;/li&gt;
&lt;li&gt;改变个别成员的可访问性：使用&lt;code&gt;using&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;默认情况下，使用&lt;code&gt;class&lt;/code&gt;关键字定义的派生类是私有继承的；使用&lt;code&gt;struct&lt;/code&gt;关键字定义的派生类是公有继承的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;继承中的类作用域&#34;&gt;继承中的类作用域&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;每个类定义自己的作用域，在这个作用域内我们定义类的成员。当存在继承关系时，派生类的作用域嵌套在其基类的作用域之内。&lt;/li&gt;
&lt;li&gt;派生类的成员将隐藏同名的基类成员。&lt;/li&gt;
&lt;li&gt;除了覆盖继承而来的虚函数之外，派生类最好不要重用其他定义在基类中的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;构造函数与拷贝控制&#34;&gt;构造函数与拷贝控制&lt;/h2&gt;
&lt;h3 id=&#34;虚析构函数&#34;&gt;虚析构函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基类通常应该定义一个虚析构函数，这样我们就能动态分配继承体系中的对象了。&lt;/li&gt;
&lt;li&gt;如果基类的析构函数不是虚函数，则&lt;code&gt;delete&lt;/code&gt;一个指向派生类对象的基类指针将产生未定义的行为。&lt;/li&gt;
&lt;li&gt;虚析构函数将阻止合成移动操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;合成拷贝控制与继承&#34;&gt;合成拷贝控制与继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;基类或派生类的合成拷贝控制成员的行为和其他合成的构造函数、赋值运算符或析构函数类似：他们对类本身的成员依次进行初始化、赋值或销毁的操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;派生类的拷贝控制成员&#34;&gt;派生类的拷贝控制成员&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当派生类定义了拷贝或移动操作时，该操作负责拷贝或移动包括基类部分成员在内的整个对象。&lt;/li&gt;
&lt;li&gt;派生类析构函数：派生类析构函数先执行，然后执行基类的析构函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;继承的构造函数&#34;&gt;继承的构造函数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;C++11 新标准中，派生类可以重用其直接基类定义的构造函数。&lt;/li&gt;
&lt;li&gt;如&lt;code&gt;using Disc_quote::Disc_quote;&lt;/code&gt;，注明了要继承&lt;code&gt;Disc_quote&lt;/code&gt;的构造函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;容器与继承&#34;&gt;容器与继承&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;当我们使用容器存放继承体系中的对象时，通常必须采用间接存储的方式。&lt;/li&gt;
&lt;li&gt;派生类对象直接赋值给积累对象，其中的派生类部分会被切掉。&lt;/li&gt;
&lt;li&gt;在容器中放置（智能）指针而非对象。&lt;/li&gt;
&lt;li&gt;对于 C++面向对象的编程来说，一个悖论是我们无法直接使用对象进行面向对象编程。相反，我们必须使用指针和引用。因为指针会增加程序的复杂性，所以经常定义一些辅助的类来处理这些复杂的情况。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;文本查询程序再探&#34;&gt;文本查询程序再探&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;使系统支持：单词查询、逻辑非查询、逻辑或查询、逻辑与查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;面向对象的解决方案&#34;&gt;面向对象的解决方案&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;将几种不同的查询建模成相互独立的类，这些类共享一个公共基类：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WordQuery&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NotQuery&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OrQuery&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AndQuery&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这些类包含两个操作：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval&lt;/code&gt;：接受一个&lt;code&gt;TextQuery&lt;/code&gt;对象并返回一个&lt;code&gt;QueryResult&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rep&lt;/code&gt;：返回基础查询的&lt;code&gt;string&lt;/code&gt;表示形式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;继承和组合：
&lt;ul&gt;
&lt;li&gt;当我们令一个类公有地继承另一个类时，派生类应当反映与基类的“是一种（Is A）”的关系。&lt;/li&gt;
&lt;li&gt;类型之间另一种常见的关系是“有一个（Has A）”的关系。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于面向对象编程的新手来说，想要理解一个程序，最困难的部分往往是理解程序的设计思路。一旦掌握了设计思路，接下来的实现也就水到渠成了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Query 程序设计&lt;/strong&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Query&lt;/code&gt;程序接口类和操作&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;TextQuery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该类读入给定的文件并构建一个查找图。包含一个&lt;code&gt;query&lt;/code&gt;操作，它接受一个&lt;code&gt;string&lt;/code&gt;实参，返回一个&lt;code&gt;QueryResult&lt;/code&gt;对象；该&lt;code&gt;QueryResult&lt;/code&gt;对象表示&lt;code&gt;string&lt;/code&gt;出现的行。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;QueryResult&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;该类保存一个&lt;code&gt;query&lt;/code&gt;操作的结果。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;是一个接口类，指向&lt;code&gt;Query_base&lt;/code&gt;派生类的对象。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Query q(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;Query&lt;/code&gt;对象&lt;code&gt;q&lt;/code&gt;绑定到一个存放着&lt;code&gt;string s&lt;/code&gt;的新&lt;code&gt;WordQuery&lt;/code&gt;对象上。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;q1 &amp;amp; q2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;Query&lt;/code&gt;对象，该&lt;code&gt;Query&lt;/code&gt;绑定到一个存放&lt;code&gt;q1&lt;/code&gt;和&lt;code&gt;q2&lt;/code&gt;的新&lt;code&gt;AndQuery&lt;/code&gt;对象上。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`q1&lt;/td&gt;
&lt;td&gt;q2`&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;Query&lt;/code&gt;对象，该&lt;code&gt;Query&lt;/code&gt;绑定到一个存放&lt;code&gt;q1&lt;/code&gt;和&lt;code&gt;q2&lt;/code&gt;的新&lt;code&gt;OrQuery&lt;/code&gt;对象上。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;~q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;Query&lt;/code&gt;对象，该&lt;code&gt;Query&lt;/code&gt;绑定到一个存放&lt;code&gt;q&lt;/code&gt;的新&lt;code&gt;NotQuery&lt;/code&gt;对象上。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Query&lt;/code&gt;程序实现类&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Query_base&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查询类的抽象基类&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;WordQuery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Query_base&lt;/code&gt;的派生类，用于查找一个给定的单词&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;NotQuery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Query_base&lt;/code&gt;的派生类，用于查找一个给定的单词&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BinaryQuery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Query_base&lt;/code&gt;的派生类，查询结果是&lt;code&gt;Query&lt;/code&gt;运算对象没有出现的行的集合&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;OrQuery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Query_base&lt;/code&gt;的派生类，返回它的两个运算对象分别出现的行的并集&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;AndQuery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Query_base&lt;/code&gt;的派生类，返回它的两个运算对象分别出现的行的交集&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>16.模板和泛型编程</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/16.%E6%A8%A1%E6%9D%BF%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/16.%E6%A8%A1%E6%9D%BF%E5%92%8C%E6%B3%9B%E5%9E%8B%E7%BC%96%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;第十六章-模板和泛型编程&#34;&gt;第十六章 模板和泛型编程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;面向对象编程和泛型编程都能处理在编写程序时不知道类型的情况。
&lt;ul&gt;
&lt;li&gt;OOP 能处理类型在程序运行之前都未知的情况；&lt;/li&gt;
&lt;li&gt;泛型编程中，在编译时就可以获知类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定义模板&#34;&gt;定义模板&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;模板&lt;/strong&gt;：模板是泛型编程的基础。一个模板就是一个创建类或函数的蓝图或者说公式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数模板&#34;&gt;函数模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt; int compare(const T &amp;amp;v1, const T &amp;amp;v2){}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模板定义以关键字 &lt;code&gt;template&lt;/code&gt;开始，后接&lt;strong&gt;模板形参表&lt;/strong&gt;，模板形参表是用&lt;strong&gt;尖括号&lt;/strong&gt;&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;括住的一个或多个&lt;strong&gt;模板形参&lt;/strong&gt;的列表，用逗号分隔，&lt;strong&gt;不能为空&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;使用模板时，我们显式或隐式地指定模板实参，将其绑定到模板参数上。&lt;/li&gt;
&lt;li&gt;模板类型参数：类型参数前必须使用关键字&lt;code&gt;class&lt;/code&gt;或者&lt;code&gt;typename&lt;/code&gt;，这两个关键字含义相同，可以互换使用。旧的程序只能使用&lt;code&gt;class&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;非类型模板参数：表示一个值而非一个类型。实参必须是常量表达式。&lt;code&gt;template &amp;lt;class T, size_t N&amp;gt; void array_init(T (&amp;amp;parm)[N]){}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;内联函数模板： &lt;code&gt;template &amp;lt;typename T&amp;gt; inline T min(const T&amp;amp;, const T&amp;amp;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;模板程序应该尽量减少对实参类型的要求。&lt;/li&gt;
&lt;li&gt;函数模板和类模板成员函数的定义通常放在头文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类模板&#34;&gt;类模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类模板用于生成类的蓝图。&lt;/li&gt;
&lt;li&gt;不同于函数模板，编译器不能推断模板参数类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;定义类模板&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;class Type&amp;gt; class Queue {};&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;实例化类模板：提供显式模板实参列表，来实例化出特定的类。&lt;/li&gt;
&lt;li&gt;一个类模板中所有的实例都形成一个独立的类。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;模板形参作用域&lt;/strong&gt;：模板形参的名字可以在声明为模板形参之后直到模板声明或定义的末尾处使用。&lt;/li&gt;
&lt;li&gt;类模板的成员函数：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt; ret-type Blob::member-name(parm-list)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;默认情况下，对于一个实例化了的类模板，其成员只有在使用时才被实例化。&lt;/li&gt;
&lt;li&gt;新标准允许模板将自己的类型参数成为友元。&lt;code&gt;template &amp;lt;typename T&amp;gt; class Bar{friend T;};&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;模板类型别名：因为模板不是一个类型，因此无法定义一个&lt;code&gt;typedef&lt;/code&gt;引用一个模板，但是新标准允许我们为类模板定义一个类型别名：&lt;code&gt;template&amp;lt;typename T&amp;gt; using twin = pair&amp;lt;T, T&amp;gt;;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模板参数&#34;&gt;模板参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;模板参数与作用域：一个模板参数名的可用范围是在声明之后，至模板声明或定义结束前。&lt;/li&gt;
&lt;li&gt;一个特定文件所需要的所有模板的声明通常一起放置在文件开始位置。&lt;/li&gt;
&lt;li&gt;当我们希望通知编译器一个名字表示类型时，必须使用关键字&lt;code&gt;typename&lt;/code&gt;，而不能使用&lt;code&gt;class&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;默认模板实参：&lt;code&gt;template &amp;lt;class T = int&amp;gt; class Numbers{}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;成员模板&#34;&gt;成员模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;成员模板（member template）：本身是模板的函数成员。
&lt;ul&gt;
&lt;li&gt;普通（非模板）类的成员模板。&lt;/li&gt;
&lt;li&gt;类模板的成员模板。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;控制实例化&#34;&gt;控制实例化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;动机：在多个文件中实例化相同模板的额外开销可能非常严重。&lt;/li&gt;
&lt;li&gt;显式实例化：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;extern template declaration;  // 实例化声明&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template declaration;  // 实例化定义&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;效率与灵活性&#34;&gt;效率与灵活性&lt;/h3&gt;
&lt;h2 id=&#34;模板实参推断&#34;&gt;模板实参推断&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对函数模板，编译器利用调用中的函数实参来确定其模板参数，这个过程叫&lt;strong&gt;模板实参推断&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;类型转换与模板类型参数&#34;&gt;类型转换与模板类型参数&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;能够自动转换类型的只有：
&lt;ul&gt;
&lt;li&gt;和其他函数一样，顶层&lt;code&gt;const&lt;/code&gt;会被忽略。&lt;/li&gt;
&lt;li&gt;数组实参或函数实参转换为指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;函数模板显式实参&#34;&gt;函数模板显式实参&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;某些情况下，编译器无法推断出模板实参的类型。&lt;/li&gt;
&lt;li&gt;定义：&lt;code&gt;template &amp;lt;typename T1, typename T2, typename T3&amp;gt; T1 sum(T2, T3);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用函数显式实参调用：&lt;code&gt;auto val3 = sum&amp;lt;long long&amp;gt;(i, lng); // T1是显式指定，T2和T3都是从函数实参类型推断而来&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意&lt;/strong&gt;：正常类型转换可以应用于显式指定的实参。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;尾置返回类型与类型转换&#34;&gt;尾置返回类型与类型转换&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用场景：并不清楚返回结果的准确类型，但知道所需类型是和参数相关的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;typename It&amp;gt; auto fcn(It beg, It end) -&amp;gt; decltype(*beg)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;尾置返回允许我们在参数列表之后声明返回类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;标准库的&lt;strong&gt;类型转换&lt;/strong&gt;模板：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义在头文件&lt;code&gt;type_traits&lt;/code&gt;中。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;对&lt;code&gt;Mod&amp;lt;T&amp;gt;&lt;/code&gt;，其中&lt;code&gt;Mod&lt;/code&gt;是：&lt;/th&gt;
&lt;th&gt;若&lt;code&gt;T&lt;/code&gt;是：&lt;/th&gt;
&lt;th&gt;则&lt;code&gt;Mod&amp;lt;T&amp;gt;::type&lt;/code&gt;是：&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remove_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&amp;amp;&lt;/code&gt;或&lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add_const&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&amp;amp;&lt;/code&gt;或&lt;code&gt;const X&lt;/code&gt;或函数&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;const T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add_lvalue_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add_rvalue_reference&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&amp;amp;&lt;/code&gt;或&lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remove_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add_pointer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&amp;amp;&lt;/code&gt;或&lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T*&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;make_signed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unsigned X&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;make_unsigned&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;带符号类型&lt;/td&gt;
&lt;td&gt;&lt;code&gt;unsigned X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remove_extent&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X[n]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;remove_all_extents&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X[n1][n2]...&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;X&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;否则&lt;/td&gt;
&lt;td&gt;&lt;code&gt;T&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;函数指针和实参推断&#34;&gt;函数指针和实参推断&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当使用一个函数模板初始化一个函数指针或为一个函数指针赋值时，编译器使用指针的类型来推断模板实参。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;模板实参推断和引用&#34;&gt;模板实参推断和引用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;从左值引用函数推断类型：若形如&lt;code&gt;T&amp;amp;&lt;/code&gt;，则只能传递给它一个左值。但如果是&lt;code&gt;const T&amp;amp;&lt;/code&gt;，则可以接受一个右值。&lt;/li&gt;
&lt;li&gt;从右值引用函数推断类型：若形如&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;，则只能传递给它一个右值。&lt;/li&gt;
&lt;li&gt;引用折叠和右值引用参数：
&lt;ul&gt;
&lt;li&gt;规则 1：当我们将一个左值传递给函数的右值引用参数，且右值引用指向模板类型参数时（如&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;），编译器会推断模板类型参数为实参的左值引用类型。&lt;/li&gt;
&lt;li&gt;规则 2：如果我们间接创造一个引用的引用，则这些引用形成了&lt;strong&gt;折叠&lt;/strong&gt;。折叠引用只能应用在间接创造的引用的引用，如类型别名或模板参数。对于一个给定类型&lt;code&gt;X&lt;/code&gt;：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&amp;amp; &amp;amp;&lt;/code&gt;、&lt;code&gt;X&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt;和&lt;code&gt;X&amp;amp;&amp;amp; &amp;amp;&lt;/code&gt;都折叠成类型&lt;code&gt;X&amp;amp;&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;类型&lt;code&gt;X&amp;amp;&amp;amp; &amp;amp;&amp;amp;&lt;/code&gt;折叠成&lt;code&gt;X&amp;amp;&amp;amp;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;上面两个例外规则导致两个重要结果：
&lt;ul&gt;
&lt;li&gt;1.如果一个函数参数是一个指向模板类型参数的右值引用（如&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;），则它可以被绑定到一个左值上；&lt;/li&gt;
&lt;li&gt;2.如果实参是一个左值，则推断出的模板实参类型将是一个左值引用，且函数参数将被实例化为一个左值引用参数（&lt;code&gt;T&amp;amp;&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;理解-stdmove&#34;&gt;理解 std::move&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;标准库&lt;code&gt;move&lt;/code&gt;函数是使用右值引用的模板的一个很好的例子。&lt;/li&gt;
&lt;li&gt;从一个左值&lt;code&gt;static_cast&lt;/code&gt;到一个右值引用是允许的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remove_reference&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;move&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;remove_reference&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;转发&#34;&gt;转发&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用一个名为&lt;code&gt;forward&lt;/code&gt;的新标准库设施来传递参数，它能够保持原始实参的类型。&lt;/li&gt;
&lt;li&gt;定义在头文件&lt;code&gt;utility&lt;/code&gt;中。&lt;/li&gt;
&lt;li&gt;必须通过显式模板实参来调用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forward&lt;/code&gt;返回显式实参类型的右值引用。即，&lt;code&gt;forward&amp;lt;T&amp;gt;&lt;/code&gt;的返回类型是&lt;code&gt;T&amp;amp;&amp;amp;&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;重载与模板&#34;&gt;重载与模板&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;多个可行模板：当有多个重载模板对一个调用提供同样好的匹配时，会选择最特例化的版本。&lt;/li&gt;
&lt;li&gt;非模板和模板重载：对于一个调用，如果一个非函数模板与一个函数模板提供同样好的匹配，则选择非模板版本。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;可变参数模板&#34;&gt;可变参数模板&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;可变参数模板&lt;/strong&gt;就是一个接受可变数目参数的模板函数或模板类。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可变数目的参数被称为参数包。
&lt;ul&gt;
&lt;li&gt;模板参数包：标识另个或多个模板参数。&lt;/li&gt;
&lt;li&gt;函数参数包：标识另个或者多个函数参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用一个省略号来指出一个模板参数或函数参数，表示一个包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;template &amp;lt;typename T, typename... Args&amp;gt;&lt;/code&gt;，&lt;code&gt;Args&lt;/code&gt;第一个模板参数包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void foo(const T &amp;amp;t, const Args&amp;amp; ... rest);&lt;/code&gt;，&lt;code&gt;rest&lt;/code&gt;是一个函数参数包。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sizeof...&lt;/code&gt;运算符，返回参数的数目。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;编写可变参数函数模板&#34;&gt;编写可变参数函数模板&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;可变参数函数通常是递归的：第一步调用处理包中的第一个实参，然后用剩余实参调用自身。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;包扩展&#34;&gt;包扩展&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;对于一个参数包，除了获取它的大小，唯一能做的事情就是&lt;strong&gt;扩展&lt;/strong&gt;（expand）。&lt;/li&gt;
&lt;li&gt;扩展一个包时，还要提供用于每个扩展元素的&lt;strong&gt;模式&lt;/strong&gt;（pattern）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;转发参数包&#34;&gt;转发参数包&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;新标准下可以组合使用可变参数模板和&lt;code&gt;forward&lt;/code&gt;机制，实现将实参不变地传递给其他函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;模板特例化specializations&#34;&gt;模板特例化（Specializations）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;定义函数模板特例化：关键字&lt;code&gt;template&lt;/code&gt;后面跟一个空尖括号对（&lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;特例化的本质是实例化一个模板，而不是重载它。特例化不影响函数匹配。&lt;/li&gt;
&lt;li&gt;模板及其特例化版本应该声明在同一个头文件中。所有同名模板的声明应该放在前面，然后是特例化版本。&lt;/li&gt;
&lt;li&gt;我们可以部分特例化类模板，但不能部分特例化函数模板。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>17.标准库特殊设施</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/17.%E6%A0%87%E5%87%86%E5%BA%93%E7%89%B9%E6%AE%8A%E8%AE%BE%E6%96%BD/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/17.%E6%A0%87%E5%87%86%E5%BA%93%E7%89%B9%E6%AE%8A%E8%AE%BE%E6%96%BD/</guid>
      <description>&lt;h1 id=&#34;第十七章-标准库特殊设施&#34;&gt;第十七章 标准库特殊设施&lt;/h1&gt;
&lt;h2 id=&#34;tuple-类型&#34;&gt;tuple 类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tuple&lt;/code&gt;是类似&lt;code&gt;pair&lt;/code&gt;的模板，每个成员类型都可以不同，但&lt;code&gt;tuple&lt;/code&gt;可以有任意数量的成员。&lt;/li&gt;
&lt;li&gt;但每个确定的&lt;code&gt;tuple&lt;/code&gt;类型的成员数目是固定的。&lt;/li&gt;
&lt;li&gt;我们可以将&lt;code&gt;tuple&lt;/code&gt;看做一个“快速而随意”的数据结构。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;tuple 支持的操作&lt;/strong&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&amp;lt;T1, T2, ..., Tn&amp;gt; t;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;t&lt;/code&gt;是一个&lt;code&gt;tuple&lt;/code&gt;，成员数为&lt;code&gt;n&lt;/code&gt;，第&lt;code&gt;i&lt;/code&gt;个成员的类型是&lt;code&gt;Ti&lt;/code&gt;所有成员都进行值初始化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple&amp;lt;T1, T2, ..., Tn&amp;gt; t(v1, v2, ..., vn);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每个成员用对应的初始值&lt;code&gt;vi&lt;/code&gt;进行初始化。此构造函数是&lt;code&gt;explicit&lt;/code&gt;的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;make_tuple(v1, v2, ..., vn)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个用给定初始值初始化的&lt;code&gt;tuple&lt;/code&gt;。&lt;code&gt;tuple&lt;/code&gt;的类型从初始值的类型&lt;strong&gt;推断&lt;/strong&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t1 == t2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当两个&lt;code&gt;tuple&lt;/code&gt;具有相同数量的成员且成员对应相等时，两个&lt;code&gt;tuple&lt;/code&gt;相等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;t1 relop t2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;tuple&lt;/code&gt;的关系运算使用&lt;strong&gt;字典序&lt;/strong&gt;。两个&lt;code&gt;tuple&lt;/code&gt;必须具有相同数量的成员。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get&amp;lt;i&amp;gt;(t)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;t&lt;/code&gt;的第&lt;code&gt;i&lt;/code&gt;个数据成员的引用：如果&lt;code&gt;t&lt;/code&gt;是一个左值，结果是一个左值引用；否则，结果是一个右值引用。&lt;code&gt;tuple&lt;/code&gt;的所有成员都是&lt;code&gt;public&lt;/code&gt;的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple_size&amp;lt;tupleType&amp;gt;::value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个类模板，可以通过一个&lt;code&gt;tuple&lt;/code&gt;类型来初始化。它有一个名为&lt;code&gt;value&lt;/code&gt;的&lt;code&gt;public constexpr static&lt;/code&gt;数据成员，类型为&lt;code&gt;size_t&lt;/code&gt;，表示给定&lt;code&gt;tuple&lt;/code&gt;类型中成员的数量。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tuple_element&amp;lt;i, tupleType&amp;gt;::type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个类模板，可以通过一个整型常量和一个&lt;code&gt;tuple&lt;/code&gt;类型来初始化。它有一个名为&lt;code&gt;type&lt;/code&gt;的&lt;code&gt;public&lt;/code&gt;成员，表示给定&lt;code&gt;tuple&lt;/code&gt;类型中指定成员的类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;定义和初始化-tuple&#34;&gt;定义和初始化 tuple&lt;/h3&gt;
&lt;p&gt;定义和初始化示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tuple&amp;lt;size_t, size_t, size_t&amp;gt; threeD;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple&amp;lt;size_t, size_t, size_t&amp;gt; threeD{1,2,3};&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto item = make_tuple(&amp;quot;0-999-78345-X&amp;quot;, 3, 2.00)；&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;访问 tuple 成员：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto book = get&amp;lt;0&amp;gt;(item);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get&amp;lt;2&amp;gt;(item) *= 0.8;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用-tuple-返回多个值&#34;&gt;使用 tuple 返回多个值&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tuple&lt;/code&gt;最常见的用途是从一个函数返回多个值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;bitset-类型&#34;&gt;bitset 类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;处理二进制位的有序集；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitset&lt;/code&gt;也是类模板，但尖括号中输入的是&lt;code&gt;bitset&lt;/code&gt;的长度而不是元素类型，因为元素类型是固定的，都是一个二进制位。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;初始化&lt;code&gt;bitset&lt;/code&gt;的方法：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bitset&amp;lt;n&amp;gt; b;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;有&lt;code&gt;n&lt;/code&gt;位；每一位均是 0.此构造函数是一个&lt;code&gt;constexpr&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bitset&amp;lt;n&amp;gt; b(u);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;是&lt;code&gt;unsigned long long&lt;/code&gt;值&lt;code&gt;u&lt;/code&gt;的低&lt;code&gt;n&lt;/code&gt;位的拷贝。如果&lt;code&gt;n&lt;/code&gt;大于&lt;code&gt;unsigned long long&lt;/code&gt;的大小，则&lt;code&gt;b&lt;/code&gt;中超出&lt;code&gt;unsigned long long&lt;/code&gt;的高位被置为 0。此构造函数是一个&lt;code&gt;constexpr&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bitset&amp;lt;n&amp;gt; b(s, pos, m, zero, one);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;是&lt;code&gt;string s&lt;/code&gt;从位置&lt;code&gt;pos&lt;/code&gt;开始&lt;code&gt;m&lt;/code&gt;个字符的拷贝。&lt;code&gt;s&lt;/code&gt;只能包含字符&lt;code&gt;zero&lt;/code&gt;或&lt;code&gt;one&lt;/code&gt;：如果&lt;code&gt;s&lt;/code&gt;包含任何其他字符，构造函数会抛出&lt;code&gt;invalid_argument&lt;/code&gt;异常。字符在&lt;code&gt;b&lt;/code&gt;中分别保存为&lt;code&gt;zero&lt;/code&gt;和&lt;code&gt;one&lt;/code&gt;。&lt;code&gt;pos&lt;/code&gt;默认为 0，&lt;code&gt;m&lt;/code&gt;默认为&lt;code&gt;string::npos&lt;/code&gt;，&lt;code&gt;zero&lt;/code&gt;默认为&#39;0&amp;rsquo;，&lt;code&gt;one&lt;/code&gt;默认为&#39;1&amp;rsquo;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;bitset&amp;lt;n&amp;gt; b(cp, pos, m, zero, one);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;和上一个构造函数相同，但从&lt;code&gt;cp&lt;/code&gt;指向的字符数组中拷贝字符。如果未提供&lt;code&gt;m&lt;/code&gt;，则&lt;code&gt;cp&lt;/code&gt;必须指向一个&lt;code&gt;C&lt;/code&gt;风格字符串。如果提供了&lt;code&gt;m&lt;/code&gt;，则从&lt;code&gt;cp&lt;/code&gt;开始必须至少有&lt;code&gt;m&lt;/code&gt;个&lt;code&gt;zero&lt;/code&gt;或&lt;code&gt;one&lt;/code&gt;字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;初始化案例；&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bitset&amp;lt;13&amp;gt; bitvec1(0xbeef);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bitset&amp;lt;32&amp;gt; bitvec4(&amp;quot;1100&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;bitset&lt;/code&gt;操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.any()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;中是否存在 1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.all()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;中都是 1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.none()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;中是否没有 1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;b&lt;/code&gt;中 1 的个数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.test(pos)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pos&lt;/code&gt;下标是否是 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.set(pos)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pos&lt;/code&gt;置 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.set()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;所有都置 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.reset(pos)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将位置&lt;code&gt;pos&lt;/code&gt;处的位复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.reset()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;b&lt;/code&gt;中所有位复位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.flip(pos)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将位置&lt;code&gt;pos&lt;/code&gt;处的位取反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.flip()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;b&lt;/code&gt;中所有位取反&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b[pos]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;访问&lt;code&gt;b&lt;/code&gt;中位置&lt;code&gt;pos&lt;/code&gt;处的位；如果&lt;code&gt;b&lt;/code&gt;是&lt;code&gt;const&lt;/code&gt;的，则当该位置位时，返回&lt;code&gt;true&lt;/code&gt;；否则返回&lt;code&gt;false&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.to_ulong()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;unsigned long&lt;/code&gt;值，其位模式和&lt;code&gt;b&lt;/code&gt;相同。如果&lt;code&gt;b&lt;/code&gt;中位模式不能放入指定的结果类型，则抛出一个&lt;code&gt;overflow_error&lt;/code&gt;异常。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.to_ullong()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;类似上面，返回一个&lt;code&gt;unsigned long long&lt;/code&gt;值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;b.to_string(zero, one)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个&lt;code&gt;string&lt;/code&gt;，表示&lt;code&gt;b&lt;/code&gt;中位模式。&lt;code&gt;zero&lt;/code&gt;和&lt;code&gt;one&lt;/code&gt;默认为 0 和 1。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os &amp;lt;&amp;lt; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;b&lt;/code&gt;中二进制位打印为字符&lt;code&gt;1&lt;/code&gt;或&lt;code&gt;0&lt;/code&gt;，打印到流&lt;code&gt;os&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is &amp;gt;&amp;gt; b&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;is&lt;/code&gt;读取字符存入&lt;code&gt;b&lt;/code&gt;。当下一个字符不是 1 或 0 时，或是已经读入&lt;code&gt;b.size()&lt;/code&gt;个位时，读取过程停止。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;正则表达式&#34;&gt;正则表达式&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式（reqular expression）是一种描述字符序列的方法，是一种很强大的工具。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;正则表达式库组件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;组件&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示一个正则表达式的类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_match&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将一个字符序列与一个正则表达式匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_search&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;寻找第一个与正则表达式匹配的子序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex_replace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用给定格式替换一个正则表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;迭代器适配器，调用&lt;code&gt;regex_searcg&lt;/code&gt;来遍历一个&lt;code&gt;string&lt;/code&gt;中所有匹配的子串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;smatch&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;容器类，保存在&lt;code&gt;string&lt;/code&gt;中搜索的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ssub_match&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;中匹配的子表达式的结果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;regex_match&lt;/code&gt;和&lt;code&gt;regex_search&lt;/code&gt;的参数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(seq, m, r, mft)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在字符序列&lt;code&gt;seq&lt;/code&gt;中查找&lt;code&gt;regex&lt;/code&gt;对象&lt;code&gt;r&lt;/code&gt;中的正则表达式。&lt;code&gt;seq&lt;/code&gt;可以是一个&lt;code&gt;string&lt;/code&gt;、标识范围的一对迭代器、一个指向空字符结尾的字符数组的指针。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;(seq, r, mft)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;m&lt;/code&gt;是一个&lt;code&gt;match&lt;/code&gt;对象，用来保存匹配结果的相关细节。&lt;code&gt;m&lt;/code&gt;和&lt;code&gt;seq&lt;/code&gt;必须具有兼容的类型。&lt;code&gt;mft&lt;/code&gt;是一个可选的&lt;code&gt;regex_constants::match_flag_type&lt;/code&gt;值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;这些操作会返回&lt;code&gt;bool&lt;/code&gt;值，指出是否找到匹配。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;使用正则表达式库&#34;&gt;使用正则表达式库&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;regex&lt;/code&gt;使用的正则表达式语言是&lt;code&gt;ECMAScript&lt;/code&gt;，模式&lt;code&gt;[[::alpha::]]&lt;/code&gt;匹配任意字母。&lt;/li&gt;
&lt;li&gt;由于反斜线是 C++中的特殊字符，在模式中每次出现&lt;code&gt;\&lt;/code&gt;的地方，必须用一个额外的反斜线&lt;code&gt;\\&lt;/code&gt;告知 C++我们需要一个反斜线字符。&lt;/li&gt;
&lt;li&gt;简单案例：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string pattern(&amp;quot;[^c]ei&amp;quot;); pattern = &amp;quot;[[:alpha:]]*&amp;quot; + pattern + &amp;quot;[[:alpha:]]*&amp;quot;&lt;/code&gt; 查找不在字符 c 之后的字符串 ei&lt;/li&gt;
&lt;li&gt;&lt;code&gt;regex r(pattern);&lt;/code&gt; 构造一个用于查找模式的 regex&lt;/li&gt;
&lt;li&gt;&lt;code&gt;smatch results;&lt;/code&gt; 定义一个对象保存搜索结果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;string test_str = &amp;quot;receipt freind theif receive&amp;quot;;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if (regex_search(test_str, results, r)) cout &amp;lt;&amp;lt; results.str() &amp;lt;&amp;lt; endl;&lt;/code&gt; 如有匹配子串，打印匹配的单词。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;regex&lt;/code&gt;（和&lt;code&gt;wregex&lt;/code&gt;）选项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;regex r(re)&lt;/code&gt; &lt;code&gt;regex r(re, f)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;re&lt;/code&gt;表示一个正则表达式，它可以是一个&lt;code&gt;string&lt;/code&gt;、一对表示字符范围的迭代器、一个指向空字符结尾的字符数组的指针、一个字符指针和一个计数器、一个花括号包围的字符列表。&lt;code&gt;f&lt;/code&gt;是指出对象如何处理的标志。&lt;code&gt;f&lt;/code&gt;通过下面列出来的值来设置。如果未指定&lt;code&gt;f&lt;/code&gt;，其默认值为&lt;code&gt;ECMAScript&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r1 = re&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;r1&lt;/code&gt;中的正则表达式替换 Wie&lt;code&gt;re&lt;/code&gt;。&lt;code&gt;re&lt;/code&gt;表示一个正则表达式，它可以是另一个&lt;code&gt;regex&lt;/code&gt;对象、一个&lt;code&gt;string&lt;/code&gt;、一个指向空字符结尾的字符数组的指针或是一个花括号包围的字符列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r1.assign(re, f)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;和使用赋值运算符（=）的效果相同：可选的标志&lt;code&gt;f&lt;/code&gt;也和&lt;code&gt;regex&lt;/code&gt;的构造函数中对应的参数含义相同。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r.mark_count()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;r&lt;/code&gt;中子表达式的数目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;r.flags()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;r&lt;/code&gt;的标志集&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;定义&lt;code&gt;regex&lt;/code&gt;时指定的标志：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;icase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在匹配过程中忽略大小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;nosubs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不保存匹配的子表达式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;optimize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;执行速度优先于构造速度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ECMAScript&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;ECMA-262&lt;/code&gt;指定的语法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;basic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;POSIX&lt;/code&gt;基本的正则表达式语法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extended&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;POSIX&lt;/code&gt;扩展的正则表达式语法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;awk&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;POSIX&lt;/code&gt;版本的&lt;code&gt;awk&lt;/code&gt;语言的语法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;grep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;POSIX&lt;/code&gt;版本的&lt;code&gt;grep&lt;/code&gt;的语法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;egrep&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;POSIX&lt;/code&gt;版本的&lt;code&gt;egrep&lt;/code&gt;的语法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;可以将正则表达式本身看做是一种简单程序语言设计的程序。在运行时，当一个&lt;code&gt;regex&lt;/code&gt;对象被初始化或被赋予新模式时，才被“编译”。&lt;/li&gt;
&lt;li&gt;如果编写的正则表达式存在错误，会在运行时抛出一个&lt;code&gt;regex_error&lt;/code&gt;的异常。&lt;/li&gt;
&lt;li&gt;避免创建不必要的正则表达式。构建一个&lt;code&gt;regex&lt;/code&gt;对象可能比较耗时。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;匹配与-regex-迭代器类型&#34;&gt;匹配与 regex 迭代器类型&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;sregex_iterator&lt;/code&gt;操作（用来获得所有匹配）：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator it(b, e, r);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个&lt;code&gt;sregex_iterator&lt;/code&gt;，遍历迭代器&lt;code&gt;b&lt;/code&gt;和&lt;code&gt;e&lt;/code&gt;表示的&lt;code&gt;string&lt;/code&gt;。它调用&lt;code&gt;sregex_search(b, e, r)&lt;/code&gt;将&lt;code&gt;it&lt;/code&gt;定位到输入中第一个匹配的位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator end;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;sregex_iterator&lt;/code&gt;的尾后迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*it&lt;/code&gt;， &lt;code&gt;it-&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据最后一个调用&lt;code&gt;regex_search&lt;/code&gt;的结果，返回一个&lt;code&gt;smatch&lt;/code&gt;对象的引用或一个指向&lt;code&gt;smatch&lt;/code&gt;对象的指针。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;++it&lt;/code&gt; ， &lt;code&gt;it++&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从输入序列当前匹配位置开始调用&lt;code&gt;regex_search&lt;/code&gt;。前置版本返回递增后迭代器；后置版本返回旧值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;it1 == it2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果两个&lt;code&gt;sregex_iterator&lt;/code&gt;都是尾后迭代器，则它们相等。两个非尾后迭代器是从相同的输入序列和&lt;code&gt;regex&lt;/code&gt;对象构造，则它们相等。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 将字符串file中所有匹配模式r的子串输出
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sregex_iterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end_it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;smatch&lt;/code&gt;操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.ready()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果已经通过调用&lt;code&gt;regex_search&lt;/code&gt;或&lt;code&gt;regex_match&lt;/code&gt;设置了&lt;code&gt;m&lt;/code&gt;，则返回&lt;code&gt;true&lt;/code&gt;；否则返回&lt;code&gt;false&lt;/code&gt;。如果&lt;code&gt;ready&lt;/code&gt;返回&lt;code&gt;false&lt;/code&gt;，则对&lt;code&gt;m&lt;/code&gt;进行操作是未定义的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.size()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果匹配失败，则返回 0，；否则返回最近一次匹配的正则表达式中子表达式的数目。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.empty()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;m.size() == 0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.prefix()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个&lt;code&gt;ssub_match&lt;/code&gt;对象，标识当前匹配之前的序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.suffix()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个&lt;code&gt;ssub_match&lt;/code&gt;对象，标识当前匹配之后的部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.format(...)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.length(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第&lt;code&gt;n&lt;/code&gt;个匹配的子表达式的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.position(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第&lt;code&gt;n&lt;/code&gt;个子表达式距离序列开始的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.str(n)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;第&lt;code&gt;n&lt;/code&gt;个子表达式匹配的&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m[n]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对应第&lt;code&gt;n&lt;/code&gt;个子表达式的&lt;code&gt;ssub_match&lt;/code&gt;对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.begin(), m.end()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;表示&lt;code&gt;m&lt;/code&gt;中&lt;code&gt;ssub_match&lt;/code&gt;元素范围的迭代器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.cbegin(), m.cend()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;常量迭代器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;使用子表达式&#34;&gt;使用子表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式语法通常用括号表示子表达式。&lt;/li&gt;
&lt;li&gt;子表达式的索引从 1 开始。&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;fmt&lt;/code&gt;中用&lt;code&gt;$&lt;/code&gt;后跟子表达式的索引号来标识一个特定的子表达式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex_search&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// .str(1)获取第一个子表达式匹配结果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;ssub_match&lt;/code&gt;子匹配操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;matched&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;一个&lt;code&gt;public bool&lt;/code&gt;数据成员，指出&lt;code&gt;ssub_match&lt;/code&gt;是否匹配了&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;first&lt;/code&gt;， &lt;code&gt;second&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;public&lt;/code&gt;数据成员，指向匹配序列首元素和尾后位置的迭代器。如果未匹配，则&lt;code&gt;first&lt;/code&gt;和&lt;code&gt;second&lt;/code&gt;是相等的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;length()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配的大小，如果&lt;code&gt;matched&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;，则返回 0。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个包含输入中匹配部分的&lt;code&gt;string&lt;/code&gt;。如果&lt;code&gt;matched&lt;/code&gt;为&lt;code&gt;false&lt;/code&gt;，则返回空&lt;code&gt;string&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;s = ssub&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;ssub_match&lt;/code&gt;对象&lt;code&gt;ssub&lt;/code&gt;转化为&lt;code&gt;string&lt;/code&gt;对象&lt;code&gt;s&lt;/code&gt;。等价于&lt;code&gt;s=ssub.str()&lt;/code&gt;，转换运算符不是&lt;code&gt;explicit&lt;/code&gt;的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;使用-regex_replace&#34;&gt;使用 regex_replace&lt;/h3&gt;
&lt;p&gt;正则表达式替换操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;m.format(dest, fmt, mft)&lt;/code&gt;, &lt;code&gt;m.format(fmt, mft)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用格式字符串&lt;code&gt;fmt&lt;/code&gt;生成格式化输出，匹配在&lt;code&gt;m&lt;/code&gt;中，可选的&lt;code&gt;match_flag_type&lt;/code&gt;标志在&lt;code&gt;mft&lt;/code&gt;中。第一个版本写入迭代器&lt;code&gt;dest&lt;/code&gt;指向的目的为止，并接受&lt;code&gt;fmt&lt;/code&gt;参数，可以是一个&lt;code&gt;string&lt;/code&gt;，也可以是一个指向空字符结尾的字符数组的指针。&lt;code&gt;mft&lt;/code&gt;的默认值是&lt;code&gt;format_default&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rege_replace(dest, seq, r, fmt, mft)&lt;/code&gt;， &lt;code&gt;regex_replace(seq, r, fmt, mft)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;遍历&lt;code&gt;seq&lt;/code&gt;，用&lt;code&gt;regex_search&lt;/code&gt;查找与&lt;code&gt;regex&lt;/code&gt;对象&lt;code&gt;r&lt;/code&gt;相匹配的子串，使用格式字符串&lt;code&gt;fmt&lt;/code&gt;和可选的&lt;code&gt;match_flag_type&lt;/code&gt;标志来生成输出。&lt;code&gt;mft&lt;/code&gt;的默认值是&lt;code&gt;match_default&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;()?(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d{3})(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;))?([-. ])?(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d{3})([-. ]?)(&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\\&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;d{4})&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;$2.$5.$7&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 将号码格式改为ddd.ddd.dddd
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;regex&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;phone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 用来寻找模式的regex对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;(908) 555-1800&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;regex_replace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;匹配标志：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;等价于&lt;code&gt;format_default&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不将首字符作为行首处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eol&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不将尾字符作为行尾处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_bow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不将首字符作为单词首处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_eow&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不将尾字符作为单词尾处理&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_any&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;如果存在多于一个匹配，则可以返回任意一个匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_not_null&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不匹配任何空序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_continuous&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配必须从输入的首字符开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;match_prev_avail&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;输入序列包含第一个匹配之前的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_default&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用&lt;code&gt;ECMAScript&lt;/code&gt;规则替换字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_sed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用&lt;code&gt;POSIX sed&lt;/code&gt;规则替换字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_no_copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不输出输入序列中未匹配的部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;format_first_only&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;只替换子表达式的第一次出现&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;随机数&#34;&gt;随机数&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;新标准之前，C 和 C++都依赖一个简单的 C 库函数&lt;code&gt;rand&lt;/code&gt;来生成随机数，且只符合均匀分布。&lt;/li&gt;
&lt;li&gt;新标准：&lt;strong&gt;随机数引擎&lt;/strong&gt; + &lt;strong&gt;随机数分布类&lt;/strong&gt;， 定义在 &lt;code&gt;random&lt;/code&gt;头文件中。&lt;/li&gt;
&lt;li&gt;C++程序应该使用&lt;code&gt;default_random_engine&lt;/code&gt;类和恰当的分布类对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;随机数引擎和分布&#34;&gt;随机数引擎和分布&lt;/h3&gt;
&lt;p&gt;随机数引擎操作&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Engine e;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认构造函数；使用该引擎类型默认的种子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Engine e(s);&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用整型值&lt;code&gt;s&lt;/code&gt;作为种子&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;e.seed(s)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;使用种子&lt;code&gt;s&lt;/code&gt;重置引擎的状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;e.min()&lt;/code&gt;，&lt;code&gt;e.max()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此引擎可生成的最小值和最大值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Engine::result_type&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;此引擎生成的&lt;code&gt;unsigned&lt;/code&gt;整型类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;e.discard(u)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将引擎推进&lt;code&gt;u&lt;/code&gt;步；&lt;code&gt;u&lt;/code&gt;的类型为&lt;code&gt;unsigned long long&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 初始化分布类型
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;uniform_int_distribution&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 初始化引擎
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;default_random_engine&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 随机生成0-9的无符号整数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;endl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;设置随机数发生器种子&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;种子就是一个数值，引擎可以利用它从序列中一个新位置重新开始生成随机数。&lt;/li&gt;
&lt;li&gt;种子可以使用系统函数&lt;code&gt;time(0)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;其他随机数分布&#34;&gt;其他随机数分布&lt;/h3&gt;
&lt;p&gt;分布类型的操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Dist d;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;默认够赞函数；使&lt;code&gt;d&lt;/code&gt;准备好被使用。其他构造函数依赖于&lt;code&gt;Dist&lt;/code&gt;的类型；分布类型的构造函数是&lt;code&gt;explicit&lt;/code&gt;的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d(e)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用相同的&lt;code&gt;e&lt;/code&gt;连续调用&lt;code&gt;d&lt;/code&gt;的话，会根据&lt;code&gt;d&lt;/code&gt;的分布式类型生成一个随机数序列；&lt;code&gt;e&lt;/code&gt;是一个随机数引擎对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d.min()&lt;/code&gt;,&lt;code&gt;d.max()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回&lt;code&gt;d(e)&lt;/code&gt;能生成的最小值和最大值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;d.reset()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重建&lt;code&gt;d&lt;/code&gt;的状态，是的随后对&lt;code&gt;d&lt;/code&gt;的使用不依赖于&lt;code&gt;d&lt;/code&gt;已经生成的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;io-库再探&#34;&gt;IO 库再探&lt;/h2&gt;
&lt;h3 id=&#34;格式化输入与输出&#34;&gt;格式化输入与输出&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;使用操纵符改变格式状态。&lt;/li&gt;
&lt;li&gt;控制布尔值的格式： &lt;code&gt;cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; true &amp;lt;&amp;lt; endl;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定整型的进制：&lt;code&gt;cout &amp;lt;&amp;lt; dec &amp;lt;&amp;lt; 20 &amp;lt;&amp;lt; endl;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;定义在&lt;code&gt;iostream&lt;/code&gt;中的操纵符：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操纵符&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;boolalpha&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;输出为字符串&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* noboolalpha&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;true&lt;/code&gt;和&lt;code&gt;false&lt;/code&gt;输出为 1,0&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;showbase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对整型值输出表示进制的前缀&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* noshowbase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不生成表示进制的前缀&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;showpoint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对浮点值总是显示小数点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* noshowpoint&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;只有当浮点值包含小数部分时才显示小数点&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;showpos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对非负数显示&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* noshowpos&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对非负数不显示&lt;code&gt;+&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;uppercase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在十六进制中打印&lt;code&gt;0X&lt;/code&gt;，在科学计数法中打印&lt;code&gt;E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* nouppercase&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在十六进制中打印&lt;code&gt;0x&lt;/code&gt;，在科学计数法中打印&lt;code&gt;e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* dec&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整型值显示为十进制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整型值显示为十六进制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;oct&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整型值显示为八进制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;left&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在值的右侧添加填充字符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;right&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在值的左侧添加填充字符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;internal&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在符号和值之间添加填充字符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fixed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮点值显示为定点十进制&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;scientific&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮点值显示为科学计数法&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hexfloat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浮点值显示为十六进制（C++11）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;defaultfloat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;充值浮点数格式为十进制（C++11）&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unitbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;每次输出操作后都刷新缓冲区&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;&lt;code&gt;* nounitbuf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;恢复正常的缓冲区刷新模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;* skipws&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;输入运算符跳过空白符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;noskipws&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;输入运算符不跳过空白符&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flush&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;刷新&lt;code&gt;ostream&lt;/code&gt;缓冲区&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ends&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;插入空字符，然后刷新&lt;code&gt;ostream&lt;/code&gt;缓冲区&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;endl&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;插入换行，然后刷新&lt;code&gt;ostream&lt;/code&gt;缓冲区&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中&lt;code&gt;*&lt;/code&gt;表示默认的流状态。&lt;/p&gt;
&lt;h3 id=&#34;未格式化的输入输出操作&#34;&gt;未格式化的输入/输出操作&lt;/h3&gt;
&lt;p&gt;单字节低层 IO 操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.get(ch)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;istream is&lt;/code&gt;读取下一个字节存入字符&lt;code&gt;cn&lt;/code&gt;中。返回&lt;code&gt;is&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os.put(ch)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符&lt;code&gt;ch&lt;/code&gt;输出到&lt;code&gt;ostream os&lt;/code&gt;。返回&lt;code&gt;os&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.get()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;is&lt;/code&gt;的下一个字节作为&lt;code&gt;int&lt;/code&gt;返回&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.putback(ch)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符&lt;code&gt;ch&lt;/code&gt;放回&lt;code&gt;is&lt;/code&gt;。返回&lt;code&gt;is&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.unget()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将&lt;code&gt;is&lt;/code&gt;向后移动一个字节。返回&lt;code&gt;is&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.peek()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将下一个字节作为&lt;code&gt;int&lt;/code&gt;返回，但不从流中删除它。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;多字节低层 IO 操作：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.get(sink, size, delim)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;从&lt;code&gt;is&lt;/code&gt;中读取最多&lt;code&gt;size&lt;/code&gt;个字节，并保存在字符数组中，字符数组的起始地址由&lt;code&gt;sink&lt;/code&gt;给出。读取过程直到遇到字符&lt;code&gt;delim&lt;/code&gt;或读取了&lt;code&gt;size&lt;/code&gt;个字节或遇到文件尾时停止。如果遇到了&lt;code&gt;delim&lt;/code&gt;，则将其留在输入流中，不读取出来存入&lt;code&gt;sink&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.getline(sink, size, delim)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与接收三个参数的&lt;code&gt;get&lt;/code&gt;版本类似，但会读取并丢弃&lt;code&gt;delim&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.read(sink, size)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取最多&lt;code&gt;size&lt;/code&gt;个字节，存入字符数组&lt;code&gt;sink&lt;/code&gt;中。返回&lt;code&gt;is&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.gcount()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回上一个未格式化读取从&lt;code&gt;is&lt;/code&gt;读取的字节数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;os.write(source, size)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将字符数组&lt;code&gt;source&lt;/code&gt;中的&lt;code&gt;size&lt;/code&gt;个字节写入&lt;code&gt;os&lt;/code&gt;。返回&lt;code&gt;os&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is.ignore(size, delim)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;读取并忽略最多&lt;code&gt;size&lt;/code&gt;个字符，包括&lt;code&gt;delim&lt;/code&gt;。与其他未格式化函数不同，&lt;code&gt;ignore&lt;/code&gt;有默认参数：&lt;code&gt;size&lt;/code&gt;默认值是 1，&lt;code&gt;delim&lt;/code&gt;的默认值为文件尾。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;注意：一般情况下，主张使用标准库提供的高层抽象，低层函数容易出错。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;流随机访问&#34;&gt;流随机访问&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;只适用于&lt;code&gt;fstream&lt;/code&gt;和&lt;code&gt;sstream&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;通过将标记&lt;code&gt;seek&lt;/code&gt;到一个给定位置来重定位它。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tell&lt;/code&gt;告诉我们标记的当前位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;操作&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tellg()&lt;/code&gt;，&lt;code&gt;tellp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个输入流中（&lt;code&gt;tellg&lt;/code&gt;）或输出流中（&lt;code&gt;tellp&lt;/code&gt;）标记的当前位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;seekg(pos)&lt;/code&gt;，&lt;code&gt;seekp(pos)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在一个输入流或输出流中将标记重定位到给定的绝对地址。&lt;code&gt;pos&lt;/code&gt;通常是一个当前&lt;code&gt;teelg&lt;/code&gt;或&lt;code&gt;tellp&lt;/code&gt;返回的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;seekp(off, from)&lt;/code&gt;，&lt;code&gt;seekg(off, from)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在一个输入流或输出流中将标记定位到&lt;code&gt;from&lt;/code&gt;之前或之后&lt;code&gt;off&lt;/code&gt;个字符，&lt;code&gt;from&lt;/code&gt;可以是下列值之一：&lt;code&gt;beg&lt;/code&gt;，偏移量相对于流开始位置；&lt;code&gt;cur&lt;/code&gt;，偏移量相对于流当前位置；&lt;code&gt;end&lt;/code&gt;，偏移量相对于流结尾位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>18.用于大型程序的工具</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/18.%E7%94%A8%E4%BA%8E%E5%A4%A7%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/18.%E7%94%A8%E4%BA%8E%E5%A4%A7%E5%9E%8B%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h1 id=&#34;第十八章-用于大型程序的工具&#34;&gt;第十八章 用于大型程序的工具&lt;/h1&gt;
&lt;p&gt;大规模应用程序的特殊要求包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在独立开发的子系统之间协同处理错误的能力。&lt;/li&gt;
&lt;li&gt;使用各种库进行协同开发的能力。&lt;/li&gt;
&lt;li&gt;对比较复杂的应用概念建模的能力。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;异常处理&#34;&gt;异常处理&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;异常处理&lt;/strong&gt;（exception handling）机制允许程序中独立开发的部分能够在运行时就出现的问题进行通信并作出相应的处理。&lt;/p&gt;
&lt;h3 id=&#34;抛出异常&#34;&gt;抛出异常&lt;/h3&gt;
&lt;p&gt;在 C++语言中，我们通过&lt;strong&gt;抛出&lt;/strong&gt;（throwing）一条表达式来&lt;strong&gt;引发&lt;/strong&gt;（raised）一个异常。异常类型和当前的调用链决定了哪段&lt;strong&gt;处理代码&lt;/strong&gt;（handler）将用来处理该异常。&lt;/p&gt;
&lt;p&gt;程序的控制权从&lt;code&gt;throw&lt;/code&gt;转移到&lt;code&gt;catch&lt;/code&gt;模块。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;栈展开&lt;/strong&gt;：当&lt;code&gt;throw&lt;/code&gt;出现在一个&lt;code&gt;try语句块&lt;/code&gt;时，检查该&lt;code&gt;try语句块&lt;/code&gt;相关的&lt;code&gt;catch&lt;/code&gt;字句，若有匹配则处理；若无匹配，则继续检查外层的&lt;code&gt;try&lt;/code&gt;匹配的&lt;code&gt;catch&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;若一个异常没有被捕获，则它将终止当前的程序。&lt;/p&gt;
&lt;p&gt;对象销毁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;块退出后，它的局部对象将被销毁。&lt;/li&gt;
&lt;li&gt;若异常发生在构造函数中，即使某个对象只构造了一部分，也要确保已构造的成员正确地被销毁。&lt;/li&gt;
&lt;li&gt;将资源释放放在类的析构函数中，以保证资源能被正确释放。析构函数本身不会引发异常。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;捕获异常&#34;&gt;捕获异常&lt;/h3&gt;
&lt;p&gt;若无需访问抛出的异常对象，则可以忽略捕获形参的名字。&lt;/p&gt;
&lt;p&gt;通常，若&lt;code&gt;catch&lt;/code&gt;接受的异常与某个继承体系有关，则最好将该&lt;code&gt;catch&lt;/code&gt;的参数定义成引用类型。&lt;/p&gt;
&lt;p&gt;搜索&lt;code&gt;catch&lt;/code&gt;未必是最佳匹配，而是第一个匹配，因此，越细化的&lt;code&gt;catch&lt;/code&gt;越应该放在&lt;code&gt;catch&lt;/code&gt;列表前段。&lt;/p&gt;
&lt;p&gt;重新抛出：&lt;code&gt;catch&lt;/code&gt;代码执行一条&lt;code&gt;throw;&lt;/code&gt;将异常传递给另一个&lt;code&gt;catch&lt;/code&gt;语句。&lt;/p&gt;
&lt;p&gt;捕获所有异常：&lt;code&gt;catch(...)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;构造函数&#34;&gt;构造函数&lt;/h3&gt;
&lt;p&gt;处理构造函数初始值异常的唯一方法是将构造函数协程函数&lt;code&gt;try&lt;/code&gt;语句块。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;template&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typename&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Blob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Blob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initializer_list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;il&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;make_shared&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;il&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;cm&#34;&gt;/*函数体*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bad_alloc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;handle_out_of_memory&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;noexcept-异常说明&#34;&gt;noexcept 异常说明&lt;/h3&gt;
&lt;p&gt;使用&lt;code&gt;noexcept&lt;/code&gt;说明指定某个函数不会抛出异常。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;recoup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//C++11
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;coid&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;recoup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//老版本
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;异常类层次&#34;&gt;异常类层次&lt;/h3&gt;
&lt;p&gt;标准 exception 层次：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;exception
&lt;ul&gt;
&lt;li&gt;bad_cast&lt;/li&gt;
&lt;li&gt;bad_alloc&lt;/li&gt;
&lt;li&gt;runtime_error
&lt;ul&gt;
&lt;li&gt;overflow_error&lt;/li&gt;
&lt;li&gt;underflow_error&lt;/li&gt;
&lt;li&gt;range_error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;logic_error
&lt;ul&gt;
&lt;li&gt;domain_error&lt;/li&gt;
&lt;li&gt;invalid_argument&lt;/li&gt;
&lt;li&gt;out_of_range&lt;/li&gt;
&lt;li&gt;length_error&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自定义异常类：&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;out_of_stock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runtime_error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;explicit&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;out_of_stock&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;runtime_error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;命名空间&#34;&gt;命名空间&lt;/h2&gt;
&lt;p&gt;多个库将名字放置在全局命名空间中将引发&lt;strong&gt;命名空间污染&lt;/strong&gt;（namespace pollution）。&lt;strong&gt;命名空间&lt;/strong&gt;（namespace）分割了全局命名空间，其中每个命名空间是一个作用域。&lt;/p&gt;
&lt;h3 id=&#34;命名空间定义&#34;&gt;命名空间定义&lt;/h3&gt;
&lt;p&gt;命名空间的定义包含两部分：1.关键字&lt;code&gt;namespace&lt;/code&gt;；2.命名空间名称。后面是一系列由花括号括起来的声明和定义。命名空间作用域后面无需分号。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cplusplus_primer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每个命名空间都是一个&lt;strong&gt;作用域&lt;/strong&gt;。定义在某个命名空间内的名字可以被该命名空间内的其他成员直接访问，也可以被这些成员内嵌套作用域中的任何单位访问。位于该命名空间之外的代码必须明确指出所用的名字是属于哪个命名空间的。&lt;/p&gt;
&lt;p&gt;命名空间可以是&lt;strong&gt;不连续&lt;/strong&gt;的。这点不同于其他作用域，意味着同一命名空间可以在多处出现。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内联命名空间&lt;/strong&gt;（C++11）：&lt;/p&gt;
&lt;p&gt;无需使用该命名空间的前缀，通过外层命名空间就可以直接访问。&lt;/p&gt;
&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cplusplus_primer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;inline&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FifthEd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 表示本书第5版代码
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Query_base&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;cplusplus_primer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Query_base&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;qb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;未命名的命名空间&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;指关键字&lt;code&gt;namespace&lt;/code&gt;后面紧跟花括号的用法。未命名的命名空间中定义的变量拥有静态的声明周期：在第一次使用前创建，直到程序结束才销毁。不能跨越多个文件。&lt;/p&gt;
&lt;h3 id=&#34;使用命名空间成员&#34;&gt;使用命名空间成员&lt;/h3&gt;
&lt;p&gt;像&lt;code&gt;namespace_name::member_name&lt;/code&gt;这样使用命名空间的成员非常繁琐。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;命名空间的别名&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;primer&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cplusplus_primer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;using 声明&lt;/strong&gt;（using declaration）：&lt;/p&gt;
&lt;p&gt;一条&lt;code&gt;using&lt;/code&gt;声明语句一次只引入命名空间的一个成员。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;using 指示&lt;/strong&gt;（using directive）：&lt;/p&gt;
&lt;p&gt;使得某个特定的命名空间中所有的名字都可见。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;类命名空间与作用域&#34;&gt;类、命名空间与作用域&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;C1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;f3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;重载与命名空间&#34;&gt;重载与命名空间&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;using&lt;/code&gt;声明语句声明的是一个名字，而非特定的函数，也就是包括该函数的所有版本，都被引入到当前作用域中。&lt;/p&gt;
&lt;h2 id=&#34;多重继承与虚继承&#34;&gt;多重继承与虚继承&lt;/h2&gt;
&lt;h3 id=&#34;多重继承&#34;&gt;多重继承&lt;/h3&gt;
&lt;h3 id=&#34;类型转换与多个基类&#34;&gt;类型转换与多个基类&lt;/h3&gt;
&lt;h3 id=&#34;多重继承下的类作用域&#34;&gt;多重继承下的类作用域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当一个类拥有多个基类时，有可能出现派生类从两个或更多基类中继承了同名成员的情况。此时，不加前缀限定符直接使用该名字将引发二义性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;虚继承&#34;&gt;虚继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;虚继承的目的是令某个类做出声明，承诺愿意共享它的基类。其中，共享的基类子对象成为&lt;strong&gt;虚基类&lt;/strong&gt;。在这种机制下，不论虚基类在继承体系中出现了多少次，在派生类中都只包含唯一一个共享的虚基类子对象。&lt;/li&gt;
&lt;li&gt;虚派生只影响从指定了虚基类的派生类中进一步派生出的类，它不会影响派生类本身。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;构造函数与虚继承&#34;&gt;构造函数与虚继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;h 含有虚基类的对象的构造顺序与一般的顺序稍有&lt;strong&gt;区别&lt;/strong&gt;：首先使用提供给最底层派生类构造函数的初始值初始化该对象的虚基类子部分，接下来按照直接基类在派生列表中出现的次序对其进行初始化。&lt;/li&gt;
&lt;li&gt;虚基类总是先于非虚基类构造，与它们在继承体系中的次序和位置无关。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>19.特殊工具与技术</title>
      <link>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/19.%E7%89%B9%E6%AE%8A%E5%B7%A5%E5%85%B7%E4%B8%8E%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cpp-notes/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c&#43;&#43;-primer/19.%E7%89%B9%E6%AE%8A%E5%B7%A5%E5%85%B7%E4%B8%8E%E6%8A%80%E6%9C%AF/</guid>
      <description>&lt;h1 id=&#34;第十九章-特殊工具与技术&#34;&gt;第十九章 特殊工具与技术&lt;/h1&gt;
&lt;h2 id=&#34;控制内存分配&#34;&gt;控制内存分配&lt;/h2&gt;
&lt;h3 id=&#34;重载-new-和-delete&#34;&gt;重载 new 和 delete&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;new&lt;/code&gt;表达式的工作机理&lt;/strong&gt;：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//分配并初始化一个string对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 分配10个默认初始化的string对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;上述代码实际执行了&lt;strong&gt;三步操作&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;new&lt;/code&gt;表达式调用一个名为&lt;code&gt;operator new&lt;/code&gt;(或&lt;code&gt;operator new []&lt;/code&gt;)的标准库函数，它分配一块&lt;strong&gt;足够大的&lt;/strong&gt;、&lt;strong&gt;原始的&lt;/strong&gt;、&lt;strong&gt;未命名的&lt;/strong&gt;内存空间以便存储特定类型的对象(或对象的数组)。&lt;/li&gt;
&lt;li&gt;编译器运行相应的构造函数以构造这些对象，并为其传入初始值。&lt;/li&gt;
&lt;li&gt;对象被分配了空间并构造完成，返回一个指向该对象的指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;delete&lt;/code&gt;表达式的工作机理&lt;/strong&gt;：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 销毁*sp，然后释放sp指向的内存空间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 销毁数组中的元素，然后释放对应的内存空间
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;上述代码实际执行了&lt;strong&gt;两步操作&lt;/strong&gt;：
&lt;ul&gt;
&lt;li&gt;对&lt;code&gt;sp&lt;/code&gt;所指向的对象或者&lt;code&gt;arr&lt;/code&gt;所指的数组中的元素执行对应的析构函数。&lt;/li&gt;
&lt;li&gt;编译器调用名为&lt;code&gt;operator delete&lt;/code&gt;(或&lt;code&gt;operator delete[]&lt;/code&gt;)的标准库函数释放内存空间。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;当自定义了全局的&lt;code&gt;operator new&lt;/code&gt;函数和&lt;code&gt;operator delete&lt;/code&gt;函数后，我们就担负起了控制动态内存分配的职责。这两个函数&lt;strong&gt;必须是正确的&lt;/strong&gt;。因为它们是程序整个处理过程中至关重要的一部分。&lt;/li&gt;
&lt;li&gt;标准库定义了&lt;code&gt;operator new&lt;/code&gt;函数和&lt;code&gt;operator delete&lt;/code&gt;函数的 8 个重载版本：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 这些版本可能抛出异常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 分配一个对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 分配一个数组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// 释放一个对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 释放一个数组
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 这些版本承诺不会抛出异常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nothrow_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nothrow_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nothrow_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[](&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nothrow_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;应用程序可以自定义上面函数版本中的任意一个，前提是自定义的版本必须位于&lt;strong&gt;全局作用域&lt;/strong&gt;或者&lt;strong&gt;类作用域&lt;/strong&gt;中。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt; 提供新的&lt;code&gt;operator new&lt;/code&gt;函数和&lt;code&gt;operator delete&lt;/code&gt;函数的目的在于改变内存分配的方式，但是不管怎样，都不能改变&lt;code&gt;new&lt;/code&gt;运算符和&lt;code&gt;delete&lt;/code&gt;运算符的基本含义。&lt;/li&gt;
&lt;li&gt;使用从 C 语言继承的函数&lt;code&gt;malloc&lt;/code&gt;和&lt;code&gt;free&lt;/code&gt;函数能实现以某种方式执行分配内存和释放内存的操作：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;cstdlib&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;malloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bad_alloc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;noexcept&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;定位-new-表达式&#34;&gt;定位 new 表达式&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;应该使用 new 的定位&lt;code&gt;new(placement new)&lt;/code&gt;形式传递一个地址，定位&lt;code&gt;new&lt;/code&gt;的形式如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;place_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;place_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;initializers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;place_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;place_address&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;braced&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;initializer&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// place_address必须是一个指针，同时在initializers中提供一个(可能为空的)以逗号分隔的初始值列表，该初始值列表将用于构造新分配的对象。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;当只传入一个指针类型的实参时，定位&lt;code&gt;new&lt;/code&gt;表达式构造对象但是不分配内存。&lt;/li&gt;
&lt;li&gt;调用析构函数会销毁对象，但是不会释放内存。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 分配并初始化一个string对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;~&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;运行时类型识别&#34;&gt;运行时类型识别&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;运行时类型识别&lt;code&gt;(run-time type identification, RTTI)&lt;/code&gt;的功能由两个运算符实现：
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeid&lt;/code&gt;运算符， 用于返回表达式的类型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dynamic_cast&lt;/code&gt;运算符，用于将基类的指针或引用安全地转换曾派生类的指针或引用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;RTTI&lt;/code&gt;必须要加倍小心。在可能的情况下，最好定义虚函数而非直接接管类型管理的重任。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;dynamic_cast-运算符&#34;&gt;dynamic_cast 运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dynamic_cast 运算符的使用形式如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// e必须是一个有效的指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// e必须是一个左值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// e不能是左值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 以上，type类型必须时一个类类型，并且通常情况下该类型应该含有虚函数。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// e的类型必须符合三个条件中的任意一个，它们是：
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 1. e的类型是目标type的公有派生类；
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 2. e的类型是目标type的共有基类；
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 3. e的类型就是目标type的类型；
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 指针类型的dynamic_cast
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 假设Base类至少含有一个虚函数，Derived是Base的共有派生类。
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 使用dp指向的Derived对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// bp指向一个Base对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 使用dp指向的Base对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 引用类型的dynamic_cast
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 使用b引用的Derived对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bad_cast&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// 处理类型转换失败的情况
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;可以对一个空指针执行&lt;code&gt;dynamic_cast&lt;/code&gt;，结果是所需类型的空指针。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;typeid-运算符&#34;&gt;typeid 运算符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;typeid运算符(typeid operator)&lt;/code&gt;，它允许程序向表达式提问：&lt;strong&gt;你的对象是什么类型？&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typeid&lt;/code&gt;表达式的形式是&lt;code&gt;typeid(e)&lt;/code&gt;，其中&lt;code&gt;e&lt;/code&gt;可以是任意表达式或类型的名字，它操作的结果是一个常量对象的引用。它可以作用于任意类型的表达式。&lt;/li&gt;
&lt;li&gt;通常情况下，使用 typeid 比较两条表达式的类型是否相同，或者比较一条表达式的类型是否与指定类型相同：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// bp和dp指向同一类型的对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// bp实际指向Derived对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;当 typeid 作用于指针时(而非指针所指向的对象)，返回的结果是该指针的静态编译时类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 下面的检查永远是失败的：bp的类型是指向Base的指针
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 永远不会执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用-rtti&#34;&gt;使用 RTTI&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用途：为具有继承关系的类实现相等运算符时。对于两个对象来说，如果它们的类型相同并且对应的数据成员取值相同，则说这两个对象是相等的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 类的层次关系
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;friend&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Base的接口成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;virtual&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Base的数据成员和其他用于实现的成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Derived的其他接口成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Derived的数据成员和其他用于实现的成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 类型敏感的相等运算符
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 如果typeid不相同，返回false；否则虚调用equal
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 虚equal函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;dynamic_cast&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Derived&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 执行比较两个Derived对象的操作并返回结果
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 基类equal函数
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Base&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rhs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 执行比较Base对象的操作
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;type_info-类&#34;&gt;type_info 类&lt;/h3&gt;
&lt;h2 id=&#34;枚举类型&#34;&gt;枚举类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;枚举类型&lt;code&gt;(enumeration)&lt;/code&gt;使我们可以将一组整型常量组织在一起。枚举属于字面值常量类型。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;限定作用域的枚举类型(scoped enumeration)&lt;/strong&gt;：首先是关键字&lt;code&gt;enum class(或enum struct)&lt;/code&gt;，随后是枚举类型名字以及用花括号括起来的以逗号分隔的枚举成员列表，最后是一个分号。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;open_modes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;input&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;不限定作用域的枚举类型&lt;code&gt;(unscoped enumeration)&lt;/code&gt;：省略关键字&lt;code&gt;class(或struct)&lt;/code&gt;，枚举类型的名字是可选的。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;color&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;red&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yellow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;green&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;floatPrec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;doublePrec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;double_doublePrec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;类成员指针&#34;&gt;类成员指针&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;成员指针&lt;/strong&gt;：指可以指向类的非静态成员的指针。&lt;/p&gt;
&lt;h3 id=&#34;数据成员指针&#34;&gt;数据成员指针&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;和其他指针一样，在声明成员指针时也使用*来表示当前声明的名字是一个指针。与普通指针不同的时，成员指针还必须包含成员所属的类。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// pdata可以指向一个常量(非常量)Screen对象的string成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// C++11
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;当我们初始化一个成员指针或为成员指针赋值时，该指针没有指向任何数据。成员指针指定了成员而非该成员所属的对象，只有当解引用成员指针时才提供对象的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Screen&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myScreen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pScreen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;myScreen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myScreen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pScreen&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pdata&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;成员函数指针&#34;&gt;成员函数指针&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;因为函数调用运算符的优先级较高，所以在声明指向成员函数的指针并使用这些的指针进行函数调用时，括号必不可少：&lt;code&gt;(C::*p)(parms)&lt;/code&gt;和&lt;code&gt;(obj.*p)(args)&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;将成员函数用作可调用对象&#34;&gt;将成员函数用作可调用对象&lt;/h3&gt;
&lt;h2 id=&#34;嵌套类&#34;&gt;嵌套类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;一个类可以定义在另一个类的内部，前者称为嵌套类(nested class)或嵌套类型(nested type)。&lt;strong&gt;嵌套类常用于定义作为实现部分的类&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;嵌套类是一个独立的类，与外层类基本没有什么关系。特别是，外层类的对象和嵌套类的对象是相互独立的。&lt;/li&gt;
&lt;li&gt;嵌套类的名字在外层类作用域中是可见的，在外层类作用域之外不可见。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;union一种节省空间的类&#34;&gt;union：一种节省空间的类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;联合(union)&lt;/code&gt;是一种特殊的类。一个&lt;code&gt;union&lt;/code&gt;可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。&lt;strong&gt;它不能含有引用类型的成员和虚函数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Token类型的对象只有一个成员，该成员的类型可能是下列类型中的任意一种
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Token&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// 默认情况下成员是共有的
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;匿名union(anonymous union)&lt;/code&gt;是一个未命名的&lt;code&gt;union&lt;/code&gt;，并且在右花括号和分号之间没有任何声明。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;union&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ival&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 可以直接访问它的成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ival&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;42&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;注意：&lt;/strong&gt; &lt;code&gt;匿名union&lt;/code&gt;不能包含受保护的成员或私有成员，也不能定义成员函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;局部类&#34;&gt;局部类&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;局部类(local class)&lt;/code&gt;：可以定义在某个函数的内部的类。它的类型只在定义它的作用域内可见。和嵌套类不同，局部类的成员受到严格限制。&lt;/li&gt;
&lt;li&gt;局部类的所有成员(包括函数在内)都必须完整定义在类的内部。因此，局部类的作用与嵌套类相比相差很远。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;局部类不能使用函数作用域中的变量。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inti&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;loc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// Bar是foo的局部类
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Loc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;locVal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 正确：使用一个局部类型名
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;barVal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Loc&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;l&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 正确：默认实参是Loc::a
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;barVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 错误：val是foo的局部变量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;barVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 正确：使用一个全局对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;barVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;si&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 正确：使用一个静态局部对象
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;            &lt;span class=&#34;n&#34;&gt;locVal&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 正确：使用一个枚举成员
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;；&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;固有的不可移植的特性&#34;&gt;固有的不可移植的特性&lt;/h2&gt;
&lt;p&gt;所谓不可移植的特性是指&lt;strong&gt;因机器而异的特性&lt;/strong&gt;，当将含有不可移植特性的程序从一台机器转移到另一台机器上时，通常需要重新编写该程序。&lt;/p&gt;
&lt;h3 id=&#34;位域&#34;&gt;位域&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;类可以将其(非静态)数据成员定义成&lt;strong&gt;位域(bit-field)&lt;/strong&gt;，在一个位域中含有一定数量的二进制位。当一个程序需要向其他程序或硬件设备传递二进制数据时，通常会用到位域。&lt;/li&gt;
&lt;li&gt;位域在内存中的布局是与机器相关的。&lt;/li&gt;
&lt;li&gt;位域的类型必须是整型或枚举类型。因为带符号位域的行为是由具体实现确定的，通常情况下我们使用无符号类型保存一个位域。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;typedef&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;unsigned&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Bit&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Bit&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;modified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Bit&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;prot_owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Bit&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;prot_group&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;Bit&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;prot_world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;modes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;READ&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;01&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WRITE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;02&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EXECUTE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;03&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;isRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;setWrite&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 使用位域
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;modified&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;modified&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;// ...保存内容
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;modes&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;READ&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 按默认方式设置READ
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// 其他处理
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WRITE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// 如果打开了READ和WRITE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// 按照读/写方式打开文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;volatile-限定符&#34;&gt;volatile 限定符&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;当对象的值可能在程序的控制或检测之外被改变时，应该将该对象声明为&lt;code&gt;volatile&lt;/code&gt;。关键字&lt;code&gt;volatile&lt;/code&gt;告诉编译器不应对这样的对象进行优化。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;和&lt;code&gt;volatile&lt;/code&gt;的一个重要区别是不能使用合成的拷贝/移动构造函数及赋值运算符初始化&lt;code&gt;volatile&lt;/code&gt;对象或者从&lt;code&gt;volatile&lt;/code&gt;对象赋值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;链接指示extern-c&#34;&gt;链接指示：extern &amp;ldquo;C&amp;rdquo;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C++&lt;/code&gt;使用&lt;code&gt;链接指示(linkage directive)&lt;/code&gt;指出任意非&lt;code&gt;C++&lt;/code&gt;函数所用的语言。&lt;/li&gt;
&lt;li&gt;要想把&lt;code&gt;C++&lt;/code&gt;代码和其他语言(包括&lt;code&gt;C&lt;/code&gt;语言)编写的代码放在一起使用，要求我们必须有权访问该语言的编译器，并且这个编译器与当前的&lt;code&gt;C++&lt;/code&gt;编译器是兼容的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C++&lt;/code&gt;从 C 语言继承的标准库函数可以定义为&lt;code&gt;C&lt;/code&gt;函数，但并非必须：决定使用&lt;code&gt;C&lt;/code&gt;还是&lt;code&gt;C++&lt;/code&gt;实现的&lt;code&gt;C&lt;/code&gt;标准库，是每个&lt;code&gt;C++&lt;/code&gt;实现的事情。&lt;/li&gt;
&lt;li&gt;有时需要在 C 和 C++中编译同一个源文件，为了实现这一目的，在编译 C++版本的程序时预处理器定义&lt;code&gt;__cplusplus&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#ifdef __cplusplus
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;extern&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;C&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strcmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
