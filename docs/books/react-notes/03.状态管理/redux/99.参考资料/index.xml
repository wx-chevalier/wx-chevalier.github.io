<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>99.参考资料 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/react-notes/03.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/redux/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link><atom:link href="https://ng-tech.icu/books/react-notes/03.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/redux/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml"/><description>99.参考资料</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>99.参考资料</title><link>https://ng-tech.icu/books/react-notes/03.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/redux/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link></image><item><title>2020-Stale props and zombie children in Redux</title><link>https://ng-tech.icu/books/react-notes/03.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/redux/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-stale-props-and-zombie-children-in-redux/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/react-notes/03.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/redux/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-stale-props-and-zombie-children-in-redux/</guid><description>&lt;blockquote>
&lt;p>&lt;a href="https://kaihao.dev/posts/Stale-props-and-zombie-children-in-Redux" target="_blank" rel="noopener">Original&lt;/a>，&lt;a href="https://github.com/xitu/gold-miner/blob/master/article/2020/Stale-props-and-zombie-children-in-Redux.md" target="_blank" rel="noopener">中文翻译&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="stale-props-and-zombie-children-in-redux">Stale props and zombie children in Redux&lt;/h1>
&lt;p>如果你读了 &lt;code>react-redux&lt;/code> v7 发行版本的文档，你可能会碰到&lt;a href="https://react-redux.js.org/api/hooks#stale-props-and-zombie-children" target="_blank" rel="noopener">过时的 props 和“僵尸子节点”&lt;/a>这篇文章中提到的部分问题。即使它已经写的非常清晰明了，但对于不熟悉这个问题的人来说会感到迷茫。这篇文章深入探究了这个问题，并讲解了 &lt;code>react-redux&lt;/code> 是如何解决的。&lt;/p>
&lt;h2 id="理解-react-redux">理解 &lt;code>react-redux&lt;/code>&lt;/h2>
&lt;p>要理解这个问题，我们必须先理解 &lt;code>Redux&lt;/code>，或者更具体的来说是 &lt;code>react-redux&lt;/code>。我们将通过重新实现 &lt;code>Redux&lt;/code> 和 &lt;code>react-redux&lt;/code> 的核心功能来进行理解。注意，这只是为了演示的目的，因此我们不会重构每一个功能并对其进行优化，只是足以让我们理解我们需要解决的问题。&lt;/p>
&lt;p>&lt;code>Redux&lt;/code> 的核心是一个在全局状态级别上强制使用 Flux 模式操作的订阅模型。在 JavaScript 中一个订阅模型通常通过利用事件监听器来实现的。我们 &lt;code>subscribe&lt;/code> 更改并通过 &lt;code>reducers&lt;/code> 改变状态，并发布结果给每一个监听者以执行更新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">createStore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">reducer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">initialState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">initialState&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">listeners&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getState&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Returns an unsubscribe function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dispatch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">reducer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">action&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listener&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面是一个 &lt;code>Redux&lt;/code> 的 &lt;code>createStore&lt;/code> API 的简单实现，我们创建的 &lt;code>store&lt;/code> 可以使用 &lt;code>getState()&lt;/code> 来获取状态，通过 &lt;code>subscribe(listener)&lt;/code> 来订阅监听器，以及通过 &lt;code>dispatch(action)&lt;/code> 来分发动作（dispatch action），就像我们习惯使用的官方 API 一样。&lt;/p>
&lt;p>下一步是弄明白如何将其和 &lt;code>React&lt;/code> 集成。我们将构建一个 &lt;a href="https://react-redux.js.org/api/provider" target="_blank" rel="noopener">&lt;code>&amp;lt;Provider&amp;gt;&lt;/code>&lt;/a> 组件通过上下文传递 &lt;code>store&lt;/code>，一个 &lt;a href="https://react-redux.js.org/api/connect" target="_blank" rel="noopener">&lt;code>connect&lt;/code>&lt;/a> 高阶组件用于包装展示组件，最近的版本中，&lt;a href="https://react-redux.js.org/api/hooks#useselector" target="_blank" rel="noopener">&lt;code>useSelector&lt;/code>&lt;/a> 钩子在大多数情况下取代 &lt;code>connect&lt;/code>。&lt;/p>
&lt;p>&lt;code>&amp;lt;Provider&amp;gt;&lt;/code> API 相对简单，我们只需要通过 &lt;code>React&lt;/code> 上下文传递由 &lt;code>createStore&lt;/code> 创建的 &lt;code>store&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createContext&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Provider&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Context.Provider&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">}&amp;gt;{&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">Context.Provider&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在我们进入 &lt;code>connect&lt;/code> 和 &lt;code>useSelector&lt;/code> 的实现之前，最好通过一个实例来回顾一下我们正在处理的问题。实现细节很大程度上取决于 &lt;code>Redux&lt;/code> 的历史，如果我们对要解决的问题有扎实的背景会更好，这样我们就可以更轻松的讨论实现的演变。&lt;/p>
&lt;h2 id="问题">问题&lt;/h2>
&lt;p>让我们快速回顾一下我们要解决的问题的&lt;a href="https://react-redux.js.org/api/hooks#stale-props-and-zombie-children" target="_blank" rel="noopener">定义&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>过时的 props&lt;/strong> 意味着在任何情况下：&lt;/p>
&lt;ul>
&lt;li>选择器函数依赖于此组件的 props 来提取数据&lt;/li>
&lt;li>动作的结果会导致父组件&lt;strong>将&lt;/strong>重新渲染并传递新的 props&lt;/li>
&lt;li>但是，在该组件有机会使用那些新的 props 重渲染之前，这个组件的选择器函数就会执行&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>僵尸子节点&lt;/strong>专门指以下情况：&lt;/p>
&lt;ul>
&lt;li>首先，挂载了多个嵌套且相关联的组件，导致子组件在父组件前订阅了 &lt;code>store&lt;/code>&lt;/li>
&lt;li>分发一个从 &lt;code>store&lt;/code> 中删除数据的动作，例如删除一个 todo 项&lt;/li>
&lt;li>父组件将因此停止渲染该子组件&lt;/li>
&lt;li>但是，由于子组件先进行了订阅，它的订阅执行于父组件停止渲染它之前，当它基于 props 从 &lt;code>store&lt;/code> 中读取一个值时，这个数据不复存在，并且如果读取逻辑不完善的话，则可能引发错误。&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>如果你仔细的阅读以上内容，你可能已经注意到了，这些问题不是两个分开的问题，而是一个单独的问题。他们都是&lt;strong>过时的 props&lt;/strong> 问题，&lt;strong>僵尸子节点&lt;/strong>描述了一个特定场景常见的子问题。&lt;/p>
&lt;p>我们现在还不必了解所有定义。我们在这里提供一个示例来演示代码问题。&lt;/p>
&lt;h2 id="一个例子">一个例子&lt;/h2>
&lt;p>我们将构建的示例是一个非常简单的 Todo 应用程序（我知道，duh），这个应用程序将简单的渲染一组 &lt;code>todos&lt;/code>，我们可以通过分发 &lt;code>DELETE&lt;/code> 动作来删除其中的一个。&lt;/p>
&lt;p>首先，我们继续，创建一个 &lt;code>store&lt;/code> 和对应的 &lt;code>reducer&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">reducer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">action&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;DELETE&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todos&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">filter&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="nx">action&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">payload&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">createStore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reducer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todos&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">[{&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;A&amp;#34;&lt;/span> &lt;span class="p">}],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后，让我们创建一个 &lt;code>&amp;lt;todo&amp;gt;&lt;/code> 组件，并使用 &lt;code>connect&lt;/code> 进行包装（&lt;strong>我们在这仅使用 &lt;code>connect&lt;/code> 高阶组件构建 API。稍后再讨论 &lt;code>useSelector&lt;/code>&lt;/strong>）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Todo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dispatch&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dispatch&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DELETE&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">payload&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">TodoContainer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">connect&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ownProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">content&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">ownProps&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}))(&lt;/span>&lt;span class="nx">Todo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">TodoList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">TodoContainer&lt;/span> &lt;span class="na">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">))}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">TodoListContainer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">connect&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">todos&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}))(&lt;/span>&lt;span class="nx">TodoList&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">ReactDOM&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Provider&lt;/span> &lt;span class="na">store&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">TodoListContainer&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Provider&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;root&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们首先创建两个展示组件 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 和 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code>，然后用 &lt;code>connect&lt;/code> 高阶组件进行包装。这只是使用 &lt;code>Redux&lt;/code> 模式进行编写的一个非常简单基础的 Todo 应用程序的示例，没有什么特别的。&lt;/p>
&lt;p>如果我们运行这个应用程序并点击任何 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 项，我们希望将其删除。&lt;/p>
&lt;p>现在，我们了解了我们的应用程序规范，我们将在 &lt;code>react-redux&lt;/code> 中构建我们的 &lt;code>connect&lt;/code> 高阶组件。&lt;/p>
&lt;h2 id="第一种方法">第一种方法&lt;/h2>
&lt;p>我们先从 &lt;code>react-redux&lt;/code> v4 版本开始，这时事情变得更简单，并且 API 首次是&lt;strong>完整&lt;/strong>和&lt;strong>稳定&lt;/strong>的。让我们构建更简单版本的 &lt;code>connect&lt;/code> 高阶组件 API。&lt;strong>我们正在使用钩子和其他现代的 React 特性来实现，但是应该与基于类的 API 大致相同。是关于未来生活的一件好事，对吧？&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// For demonstration purpose, we intentionally omit `mapDispatchToProps`,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// since it&amp;#39;s almost the same as `mapStateToProps`.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Instead, we just pass down `dispatch` as a prop.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">propsRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useRef&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">propsRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">propsRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">propsRef&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">WrappedComponent&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...props&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...state&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="na">dispatch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dispatch&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不需要进行优化的话，这可能是 &lt;code>connect&lt;/code> 最直接的实现。&lt;/p>
&lt;p>让我们点击 Todo 项去删除它，看是否有效工作。嗯，好吧，一切都崩溃了。它不能工作了，出什么问题了？&lt;/p>
&lt;p>我们像 JavaScript 运行时一样一步一步完成这个过程，看看到底发生了什么。&lt;/p>
&lt;ol>
&lt;li>在第一次渲染时，&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 和 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 在 &lt;code>useEffect&lt;/code> 中订阅了 &lt;code>store&lt;/code>。因为 &lt;code>useEffect&lt;/code> （或者 &lt;code>componentDidMount&lt;/code>）从下往上触发，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 首先进行订阅，然后是 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code>。&lt;/li>
&lt;li>用户点击 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 组件，向 &lt;code>store&lt;/code> 分发了一个 &lt;code>DELETE&lt;/code> 动作，期待该项被删除。&lt;/li>
&lt;li>&lt;code>store&lt;/code> 接收到这个动作后，通过 &lt;strong>reducer&lt;/strong> 来运行，然后把 &lt;code>todos&lt;/code> 的状态改为空数组 &lt;code>{ todos: [] }&lt;/code>。&lt;/li>
&lt;li>然后 &lt;code>store&lt;/code> 调用已订阅的监听器。因为 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 先进行的订阅，因此也会先调用监听器。&lt;/li>
&lt;li>&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 中的 &lt;code>connect&lt;/code> 高阶组件触发监听器，调用带有最新的 state（&lt;code>store.getState()&lt;/code>）和最新的 props（&lt;code>propsRef.current&lt;/code>）的 &lt;code>mapStateToProps&lt;/code>。&lt;/li>
&lt;li>&lt;strong>因为最新的 state 不再有 &lt;code>todos&lt;/code> 的 state，尝试去访问 &lt;code>state.todos[ownProps.id]&lt;/code> 导致为 &lt;code>undefined&lt;/code>。调用 &lt;code>(undefined).content&lt;/code> 将导致错误 💥。&lt;/strong>&lt;/li>
&lt;/ol>
&lt;p>这就是在动作中著名的&lt;code>僵尸子节点&lt;/code>问题。&lt;strong>在 Redux 分发后，state 会同步改变，但是渲染则不会。当我们尝试在 &lt;code>mapStateToProps&lt;/code> 函数中访问 &lt;code>ownProps&lt;/code>，我们可能会在其中运行过时的 props&lt;/strong>。这是类似的原因（之一）&lt;a href="https://github.com/facebook/react/issues/11527#issuecomment-360199710" target="_blank" rel="noopener">为什么 &lt;code>setState&lt;/code> 不是同步的&lt;/a>，管理 &lt;code>React&lt;/code> 世界之外的一些状态通常需要注意一些陷阱。&lt;/p>
&lt;p>我们应该如何进行修复？如果是因为我们管理了 &lt;code>React&lt;/code> &lt;strong>之外&lt;/strong>的状态，是否我们可能把状态放到 &lt;code>React&lt;/code> &lt;strong>内部&lt;/strong>？我们希望 &lt;code>props&lt;/code> 始终保持最新，这仅在 &lt;code>React&lt;/code> 使用最新的 props 渲染组件时发生。那么为什么不这样做呢？我们可以把 &lt;code>mapStateToProps&lt;/code> 改到渲染阶段，我们只需要在监听器回调中触发更新来强制重新渲染。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">WrappedComponent&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...props&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...state&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="na">dispatch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dispatch&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在，当我们点击该项时，他成功删除了自己，万岁 🎉！&lt;/p>
&lt;p>稍后，PM 来询问我们是否可以将删除延迟到 1 秒，也就是说，单击该项后不会立即删除，而是 1 秒后将其删除。&lt;/p>
&lt;p>嗯，听起来很简单！是吧？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">const Todo = ({ id, content, dispatch }) =&amp;gt; (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;li
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onClick={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- dispatch({ type: &amp;#39;DELETE&amp;#39;, payload: id });
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ setTimeout(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ dispatch({ type: &amp;#39;DELETE&amp;#39;, payload: id });
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ }, 1000);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {content}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/li&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们非常有信心它会工作，我们进行保存，提交，甚至没有测试（你永远不要这样做）直接发布。此后不久，我们收到了大量的投诉，每个人都惊慌失措。当用户点击并等待 1 秒后，应用程序崩溃了，整个应用程序都崩溃了&lt;/p>
&lt;h2 id="unstable_batchedupdates">&lt;code>unstable_batchedUpdates&lt;/code>&lt;/h2>
&lt;p>为什么添加一个简单的 &lt;code>setTimeout&lt;/code> 会导致整个应用程序崩溃呢？要研究这个问题，我们需要返回并再次执行每个步骤、我们可以通过在代码中添加一堆 &lt;code>console.log&lt;/code> 来验证输出，但是为了节省时间，在这里只提供结果。前 4 步和之前相同，因此我们直接从第 5 步开始。&lt;/p>
&lt;p>&lt;strong>在添加 &lt;code>setTimeout&lt;/code> 之前：&lt;/strong>&lt;/p>
&lt;ol start="5">
&lt;li>&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 中的 &lt;code>connect&lt;/code> 高阶组件触发监听器，调用 &lt;code>forceUpdate()&lt;/code> 来调度重渲染。&lt;/li>
&lt;li>&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 中的 &lt;code>connect&lt;/code> 高阶组件触发监听器，调用 &lt;code>forceUpdate()&lt;/code> 来调度重渲染。&lt;/li>
&lt;li>&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 渲染，返回的元素是一个空数组 &lt;code>[]&lt;/code>，只渲染 &lt;code>&amp;lt;ul&amp;gt;&lt;/code> 容器，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 组件不会渲染。&lt;/li>
&lt;/ol>
&lt;p>没有错误，它正常工作。现在，让我们看看当我们添加 &lt;code>setTimeout&lt;/code> 后，何时会分发动作。前 4 步也是相同的，唯一的区别是在 &lt;strong>（1）&lt;/strong> 和 &lt;strong>（2）&lt;/strong> 直接存在 1 秒延迟。&lt;/p>
&lt;p>&lt;strong>在添加 &lt;code>setTimeout&lt;/code> 之后：&lt;/strong>&lt;/p>
&lt;ol start="5">
&lt;li>&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 中的 &lt;code>connect&lt;/code> 高阶组件触发监听器，调用 &lt;code>forceUpdate()&lt;/code> 来调度重渲染。&lt;/li>
&lt;li>&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 渲染，调用带有最新的 state 和最新的 props 的 &lt;code>mapStateToProps&lt;/code>。&lt;/li>
&lt;li>因为父组件（&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code>）还没有渲染，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 中的 props 实际上是&lt;strong>过时的 props&lt;/strong>，但是 state 已经是最新的了。调用 &lt;code>state.todos[ownProps.id]&lt;/code> 导致为 &lt;code>undefined&lt;/code>，调用 &lt;code>(undefined).content&lt;/code> 导致一个错误。&lt;/li>
&lt;/ol>
&lt;p>请注意，在这两种情况下，第六步是不同的。前者在父组件（&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code>）中调用另一个监视器，而后者首先渲染子组件（&lt;code>&amp;lt;Todo&amp;gt;&lt;/code>）。 &lt;strong>似乎是调用 &lt;code>forceUpdate()&lt;/code> 不久后，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 同步重渲染了！&lt;/strong>&lt;/p>
&lt;p>“等等，我以为 &lt;code>setState&lt;/code> 是异步的？” 是的，当然不会。在大多数情况下， &lt;code>setState&lt;/code> 实际上是异步的，&lt;a href="https://twitter.com/dan_abramov/status/959507572951797761" target="_blank" rel="noopener">只要 &lt;code>setState&lt;/code> 在 React 事件处理回调中调用即可&lt;/a>，React 将确保在事件处理回调中&lt;strong>批处理&lt;/strong>所有的更新，并一次异步执行所有的渲染。通过在 &lt;code>setTimeout&lt;/code> 回调中包装 &lt;code>setState&lt;/code>，我们&lt;strong>选择取消&lt;/strong> 这个特性，并使 &lt;code>setState&lt;/code> 同步。&lt;/p>
&lt;p>在我们上面的例子中，React 把 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 组件的 &lt;code>forceUpdate()&lt;/code> 和 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 组件的 &lt;code>forceUpdate()&lt;/code> 放在一个事件处理回调中，然后最终让它们一次进行渲染。**这里另一个重要的说明是，在重渲染过程中，React 将确保从下到上执行。**这就是为什么父组件（&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code>）首先进行重渲染，然后跳过 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 渲染的原因。&lt;/p>
&lt;p>幸运的是，在将来的某个版本中，&lt;a href="https://twitter.com/dan_abramov/status/959557687158689792" target="_blank" rel="noopener">React 将可能确保所有的 &lt;code>setState&lt;/code> 都是异步的&lt;/a>，这意味着即使我们把 &lt;code>setState&lt;/code> 放到 &lt;code>setTimeout&lt;/code> 里面，更新仍然将分批进行。&lt;/p>
&lt;p>所以我们仅仅是进行等待吗？当然不是。现在还有另一种解决方法。&lt;/p>
&lt;p>React，或者更准确的说，&lt;code>react-dom&lt;/code>，有一个隐藏特性：&lt;code>unstable_batchedUpdates&lt;/code>，能够精确的实现我们想要确保的更新在一起批处理。&lt;a href="https://react-redux.js.org/api/batch" target="_blank" rel="noopener">React 中事件处理程序已经在内部使用此 API&lt;/a>，这是为什么在事件处理中 &lt;code>setState&lt;/code> 将是异步的。&lt;strong>(正如他的名字暗示的那样，我们应该完全理解后再使用它。我们已经被警告了。&lt;/strong>)&lt;/p>
&lt;p>我们简单的在 &lt;code>unstable_batchedUpdates&lt;/code> 回调中来包装我们的 &lt;code>dispatch&lt;/code> 方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+import { unstable_batchedUpdates } from &amp;#39;react-dom&amp;#39;;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">const Todo = ({ id, content, dispatch }) =&amp;gt; (
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;li
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> onClick={() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> setTimeout(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">- dispatch({ type: &amp;#39;DELETE&amp;#39;, payload: id });
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gd">&lt;/span>&lt;span class="gi">+ unstable_batchedUpdates(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ dispatch({ type: &amp;#39;DELETE&amp;#39;, payload: id });
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ });
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> }, 1000);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {content}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;/li&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">);
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还有另一个地方我们可以添加 &lt;code>unstable_batchedUpdates&lt;/code>。我们也可以简单的包装我们 store 分发方法，来代替包装每个带有 &lt;code>unstable_batchedUpdates&lt;/code> 的 &lt;code>dispatch&lt;/code> 调用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-diff" data-lang="diff">&lt;span class="line">&lt;span class="cl">dispatch(action) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> state = reducer(state, action);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ unstable_batchedUpdates(() =&amp;gt; {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span> listeners.forEach(listener =&amp;gt; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> listener();
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> });
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">+ });
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="gi">&lt;/span>},
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它工作良好。这实际上就是 &lt;code>react-redux&lt;/code> v4 的实现，没有许多其他必要的优化，像&lt;a href="https://github.com/reduxjs/react-redux/blob/v4.4.0/src/components/connect.js#L238-L270" target="_blank" rel="noopener">记住返回的元素&lt;/a>，或者&lt;a href="https://github.com/reduxjs/react-redux/pull/348" target="_blank" rel="noopener">如果 &lt;code>mapStateToProps&lt;/code> 函数不依赖于 &lt;code>ownProps&lt;/code>，则尽早进行更新&lt;/a>。 即使进行了这些优化，在最坏的情况下，每次状态更改时，我们仍然会强制容器组件进行重渲染。对于一个很小的应用程序，它应该还不错，但是对于一个可扩展的全局状态管理库，它很快就变得无法接受。&lt;/p>
&lt;h2 id="嵌套订阅模型">嵌套订阅模型&lt;/h2>
&lt;p>我们希望最小化容器组件中的渲染调用，因此我们想出一种方法来在 &lt;code>forceUpdate()&lt;/code> 调用之前的监听器回调中尽早跳过更新。我们还想强制执行&lt;strong>自上而下的命令&lt;/strong>，这样我们就不会再提出过时的 props 和僵尸子节点问题。&lt;/p>
&lt;p>Redux 团队提出了一种有趣的方法来解决 &lt;code>react-redux&lt;/code> v5 中的问题。通过使用&lt;strong>嵌套订阅模型&lt;/strong>，我们可以尽早跳过更新，还可以避免过时的 props 问题。&lt;/p>
&lt;p>&lt;strong>基本思想是，我们延迟监听器回调的触发，直到父级完全重渲染为止，用来代替分批地进行更新以使其自上而下&lt;/strong>。这样，我们可以确保更新始终是自上而下的，孩子不会在监听器回调中获得&lt;strong>过时的 props&lt;/strong>，因为当我们触发回调时，props 已经是最新的了。&lt;/p>
&lt;p>一个代码片段价值一千句话。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">createSubscription&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">listeners&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Returns an unsubscribe function
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">splice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">notifyUpdates&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listeners&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">forEach&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">listener&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们创建一个 &lt;code>createSubscription&lt;/code>，它和 &lt;code>createStore&lt;/code> 函数非常像，它也有监听器，和 &lt;code>subscribe&lt;/code> 函数。不同之处是它不保存任何的状态，也有一个 &lt;code>notifyUpdates()&lt;/code> 方法。这个 &lt;code>notifyUpdates()&lt;/code> 方法用来通知它的所有的孩子节点，来触发它们的监听器回调，我们将在之后进行更多的讨论。&lt;/p>
&lt;p>你可能会注意到，这只是创建事件触发器的函数，这是非常正确的，并且它就这么的简单。下一步是编写新的 &lt;code>connect&lt;/code> 高阶组件，并将其 &lt;code>mapStateToProps&lt;/code> 放入监听器回调中，以尽早跳过更新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">subStore&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useMemo&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">createSubscription&lt;/span>&lt;span class="p">(),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[,&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useReducer&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">stateRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useRef&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">stateRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">propsRef&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useRef&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">propsRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="nx">propsRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">shallowEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">stateRef&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">nextState&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Bail out updates early, immediately notify updates to children
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">subStore&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifyUpdates&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">propsRef&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">stateRef&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">subStore&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">subStore&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">notifyUpdates&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span> &lt;span class="c1">// Don&amp;#39;t pass dependencies so that it will run after every re-render
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Provider&lt;/span> &lt;span class="na">store&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">subStore&lt;/span>&lt;span class="p">}&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">WrappedComponent&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="na">...props&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="na">...stateRef.current&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">dispatch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dispatch&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Provider&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里有很多事情，让我们一一分解。基本实现有点类似于我们的第一种方法。我们通过创建一个我们刚刚实现的 &lt;code>subscription&lt;/code> 来创建一个新的 &lt;code>subStore&lt;/code>，并将其与原始的 &lt;code>store&lt;/code> 合并。结果，该 &lt;code>subscribe&lt;/code> 方法将覆盖 &lt;code>store&lt;/code> 中原始的 &lt;code>subscribe&lt;/code> 方法，并添加一个名为的 &lt;code>notifyUpdates&lt;/code> 的新方法。&lt;/p>
&lt;p>我们在 2 个地方运行 &lt;code>mapStateToProps&lt;/code> 选择器。我们在渲染阶段运行我们的 &lt;code>mapStateToProps&lt;/code>，以便在回调中调用 &lt;code>forceUpdate()&lt;/code> 之后总是获得最新的 props。在我们的监听器回调中，我们可以看到我们也直接在它内部使用 &lt;code>mapStateToProps&lt;/code>，并且进行了一个浅对比，以确定如果映射状态不变，是否可以跳过更新。&lt;/p>
&lt;p>在 return 语句中，我们再次用该 &lt;code>&amp;lt;Provider&amp;gt;&lt;/code> 组件包装我们的组件，并用新创建的 &lt;code>subStore&lt;/code> 来显式覆盖 store 上下文。这样组件树下的每个组件都将获得 &lt;code>subStore&lt;/code> 而不是最顶层的 &lt;code>store&lt;/code>。&lt;/p>
&lt;p>最后，我们创建另一个叫做 &lt;code>subStore.notifyUpdates()&lt;/code> 的副作用，以便&lt;strong>在每次渲染之后&lt;/strong>调用组件树下的所有子级。&lt;strong>直到下一个渲染中最新的 props 已经传递给子节点时，才会调用子节点的回调&lt;/strong>，从而消除了&lt;strong>过时的 props&lt;/strong> 问题。&lt;/p>
&lt;p>再次单击该项，该项现在将成功删除而不会引发任何错误。为了使流程更清晰，我们可以再次执行每个步骤，以确保其按预期工作。&lt;/p>
&lt;ol>
&lt;li>在第一次渲染后，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 订阅 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 创建的 &lt;code>subStore&lt;/code> 然后通过 &lt;code>useEffect&lt;/code> 中的 &lt;code>Provider&lt;/code> 向下传递。&lt;/li>
&lt;li>然后 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 订阅在它的 &lt;code>useEffect&lt;/code> 中通过 &lt;code>createStore&lt;/code> 创建的全局的 &lt;code>store&lt;/code>。&lt;/li>
&lt;li>用户点击 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code>，向 store 分发一个 &lt;code>DELETE&lt;/code> 动作，期望该项被删除。&lt;/li>
&lt;li>store 收到这个动作，通过 &lt;strong>reducer&lt;/strong> 运行它。并将 &lt;code>todos&lt;/code> 状态更改为一个空数组 &lt;code>{ todos: [] }&lt;/code>。&lt;/li>
&lt;li>&lt;code>store&lt;/code> 然后调用订阅监听器。因为仅有一个监听器订阅了 &lt;code>store&lt;/code>，仅仅 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 的监听器将调用，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 的则不会。&lt;/li>
&lt;li>&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 调用监听器回调，调用带有最新状态（&lt;code>store.getState()&lt;/code>）和最新 props （&lt;code>propsRef.current&lt;/code>）的 &lt;code>mapStateToProps&lt;/code>。&lt;/li>
&lt;li>映射状态并不完全相等，因此我们计划使用 &lt;code>forceUpdate()&lt;/code> 进行更新。&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 然后在渲染阶段再次调用 &lt;code>mapStateToProps&lt;/code> 并返回一个空的 &lt;code>&amp;lt;ul&amp;gt;&lt;/code> 因为列表中不再有任何项。&lt;/li>
&lt;li>&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 将会卸载，因此它将调用副作用中的 &lt;code>unsubscribe&lt;/code> 函数，从 &lt;code>subStore&lt;/code> 中的 &lt;code>listeners&lt;/code> 数组中移除它的监听器回调。&lt;/li>
&lt;li>&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 调用副作用并在渲染后运行 &lt;code>subStore.notifyUpdates()&lt;/code>，因为我们没有在 &lt;code>subStore&lt;/code> 中留下任何要调用的侦听器，因此整个过程成功完成。&lt;/li>
&lt;/ol>
&lt;p>对于仍然剩下一些子节点的情况，每个子节点将随后调用它们的监听器回调。因为它们将在渲染后被调用，所以它们将从父组件那里获得最新的 props。&lt;/p>
&lt;p>有趣的是，我们在子组件中运行了两次 &lt;code>mapStateToProps&lt;/code>，一次是在监听器回调内，而另一次是由父组件的重渲染触发的。后者应该在前者之前发生，但是状态和 props 都应该是最新的，并且在每次运行中都应该相同。为了进一步优化性能，我们可以记住这个 &lt;code>mapStateToProps&lt;/code> 函数，以便在这种情况下不必调用两次。&lt;/p>
&lt;p>注意，我们甚至不必在 &lt;code>notifyUpdates&lt;/code> 函数中使用 &lt;code>unstable_batchedUpdates&lt;/code>。同一层次结构调用中的更新被&lt;strong>划分&lt;/strong>到不同的 &lt;code>subStore&lt;/code>，子组件仅在父组件完成重渲染后才调用监听器回调，因此无需将它们一起批处理。&lt;/p>
&lt;p>这是 &lt;code>react-redux&lt;/code> 在 v5 和 v7 中实现嵌套订阅模型的基本思想（当然，缺少大量的优化）。&lt;a href="https://github.com/reduxjs/react-redux/pull/416" target="_blank" rel="noopener">当我们可以提早批准更新并且不必尽可能调用 React 的时候，结果将大大提高性能&lt;/a>。另外，我们可以摆脱 &lt;code>unstable_batchedUpdates&lt;/code>，这是很难包含在 &lt;code>react-redux&lt;/code>中的（它来自 &lt;code>react-dom&lt;/code> 但 &lt;code>react-redux&lt;/code> 也可以在其他渲染器中使用）。这是一个巨大的胜利！&lt;/p>
&lt;h2 id="react-上下文">React 上下文&lt;/h2>
&lt;p>有一个更简单的方法可以通过使用 React 上下文来解决。我们已经在使用它来传递 &lt;code>store&lt;/code> 实例，为什么不让它也对状态更改做出反应？当 React 上下文的稳定版本首次出现时，&lt;code>react-context&lt;/code> v6 采用这种方法。该方法似乎容易得多，并且由于状态渲染传播是由 React 处理的，因此我们轻松获得了自上而下的更新。没有更多的 &lt;code>unstable_batchedUpdates&lt;/code>，没有更多的嵌套订阅模型。事件监听器的数量也减少到了一个，我们不再需要订阅每个 connect 高阶组件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Again, there&amp;#39;re lack of many optimizations and error handlings
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// in this implementation for demonstration purpose.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">Provider&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">context&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useMemo&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Context.Provider&lt;/span> &lt;span class="na">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">context&lt;/span>&lt;span class="p">}&amp;gt;{&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&amp;lt;/&lt;/span>&lt;span class="nt">Context.Provider&lt;/span>&lt;span class="p">&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">connect&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">WrappedComponent&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dispatch&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">mappedState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">mapStateToProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">props&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">WrappedComponent&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...props&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="na">...mappedState&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="na">dispatch&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">dispatch&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一切看起来都如此完美，实现看起来很简单，我们仍然可以像第一种方法（&lt;code>react-redux&lt;/code> v4）一样进行优化，我们不再需要处理过时的 props 和僵尸子节点问题。从本质上讲，这就是我们通常在用户区域中所做的事情，以及一些受欢迎的库，像 &lt;a href="https://github.com/jamiebuilds/unstated-next" target="_blank" rel="noopener">&lt;code>unstated-next&lt;/code>&lt;/a> 为我们所做的事情。不过，对于只有一个全局 store 的 &lt;code>Redux&lt;/code> 来说，拥有多个更小的 store 可能是一个完美的解决方案。性能成本非常高，足以迫使我们再次对其进行迭代。&lt;/p>
&lt;p>还记得为什么我们要从第一种方法迭代到嵌套订阅模型吗？这样一来，我们甚至可以在调用 &lt;code>setState&lt;/code> 和重渲染组件之前就尽早跳过更新。在这种方法中，由于我们只能在渲染阶段获得整个状态，&lt;strong>因此这意味着我们必须始终先调用 &lt;code>setState&lt;/code> 然后重渲染组件才能在之后获得最新状态&lt;/strong>。只有到那时，我们才能调用 &lt;code>mapStateToProps&lt;/code> 来获得组件关心的映射状态。实际上，在 &lt;code>react-redux&lt;/code> v6 首次发布时，有一些&lt;a href="https://github.com/reduxjs/react-redux/issues/1164" target="_blank" rel="noopener">性能下降事件&lt;/a>。此外，&lt;a href="https://github.com/facebook/react/issues/14110#issuecomment-448074060" target="_blank" rel="noopener">React 团队甚至提到他们不建议当时使用 React 上下文进行类似 flux 的状态传播&lt;/a>。&lt;/p>
&lt;h2 id="hooks">Hooks&lt;/h2>
&lt;p>React 上下文不是 React 家族中的最新成员，我们还有 hook（钩子）！&lt;code>react-redux&lt;/code> v7 引入了新的基于钩子的 API，这些 API 使代码更加简单易懂。最重要的钩子可能是 &lt;code>useSelector&lt;/code> 钩子。&lt;/p>
&lt;p>但是首先，我们将重写我们的 Todo 应用程序以使用钩子。更具体地说，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 和 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 组件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">Todo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">({&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="p">})&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">content&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useSelector&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">find&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">id&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">content&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">dispatch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useDispatch&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dispatch&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">type&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;DELETE&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">payload&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">id&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">content&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">TodoList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">todos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">useSelector&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">todos&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">map&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Todo&lt;/span> &lt;span class="na">key&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">todo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">))}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们不再需要那些带有钩子的高阶函数容器，我们可以调用 &lt;code>useSelector&lt;/code> 和 &lt;code>useDispatch&lt;/code> 来获取选定的状态和分发方法。请注意一个微小的差别在普通的旧的 &lt;code>mapStateToProps&lt;/code> 和 &lt;code>useSelector&lt;/code> 之间的是我们不再获取状态（state）的&lt;strong>对象&lt;/strong>，并将其传播到 props，而是仅仅得到状态本身。因此代替获得 &lt;code>{ content }&lt;/code>，我们只需要得到 &lt;code>content&lt;/code>。在我们的 &lt;code>setState&lt;/code> 中会稍微改变我们的相等性检查。&lt;/p>
&lt;p>&lt;code>useDispatch&lt;/code> 钩子实现也很简单。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">useDispatch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Content&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">dispatch&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以轻松创建我们的 &lt;code>useSelector&lt;/code> 钩子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">useSelector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">selector&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[,&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useReducer&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，它甚至还不能立即使用。每次状态更新时，我们都会重渲染所有的 &lt;strong>connected&lt;/strong> 组件。使用钩子 API 会更加糟糕，因为我们没有一个中间容器组件，该组件通常能进行廉价的渲染，可以挽救通常更昂贵的包装组件的更新。与以前的权衡取舍不同，我们有点必须把 &lt;code>selector&lt;/code> 放入监听器回调中以尽早跳过更新。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">useSelector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">selector&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useState&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">selector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">setState&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个版本只是简单的打破。我们在整个文章中再次提到&lt;strong>过时的 props 和僵尸子节点&lt;/strong>问题。与往常一样，我们将遍历每个步骤，以查看错误的出处和原因。&lt;/p>
&lt;ol>
&lt;li>在第一次渲染后，&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 和 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 组件在 &lt;code>useEffect&lt;/code> 中订阅 store。因为 &lt;code>useEffect&lt;/code> 自上而下触发，&lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 首先订阅，然后是 &lt;code>&amp;lt;TodoList&amp;gt;&lt;/code>。&lt;/li>
&lt;li>用户点击 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code>，向 store 分发一个 &lt;code>DELETE&lt;/code> 动作，期待该项被删除。&lt;/li>
&lt;li>store 收到这个动作,通过 &lt;strong>reducer&lt;/strong> 运行它，然后将 &lt;code>todos&lt;/code> 状态更改为空数组 &lt;code>{ todos: [] }&lt;/code>。&lt;/li>
&lt;li>然后，store 调用已订阅的监听器。由于 &lt;code>&amp;lt;Todo&amp;gt;&lt;/code> 先订阅，因此也会先调用它的监听器。&lt;/li>
&lt;li>&lt;strong>由于我们在渲染阶段传递 &lt;code>props&lt;/code> 给 &lt;code>listener&lt;/code>，在那时其形成了封闭的 &lt;code>props&lt;/code>。它们是过时的 props&lt;/strong>。访问 &lt;code>state.todos[ownProps.id]&lt;/code> 将导致 &lt;code>undefined&lt;/code>，然后调用 &lt;code>(undefined).content&lt;/code> 将导致一个错误 💥。&lt;/li>
&lt;/ol>
&lt;p>回想一下到目前为止我们对过时的 props 问题的了解。&lt;strong>当子节点们使用从 store 派生的 props 时，过时的 props 将在同步订阅模型中发生&lt;/strong>。到目前为止，有 2 个解决方案。&lt;/p>
&lt;ol>
&lt;li>移动 &lt;code>selector&lt;/code> 到渲染阶段和使用 &lt;code>unstable_batchedUpdates&lt;/code>&lt;/li>
&lt;li>使用嵌套订阅模型&lt;/li>
&lt;/ol>
&lt;p>钩子无法更改渲染树，因此我们无法为每个组件添加一个新的 &lt;code>&amp;lt;Provider&amp;gt;&lt;/code>，以使其传播到最近的父级 subStore。我们可以快速排除第二种解决方案。&lt;/p>
&lt;p>对于第一个解决方案，当我们仅在渲染阶段使用 &lt;code>selector&lt;/code>，它的性能不佳，会导致每次更改都需要重渲染，因此我们必须在监听器回调中尽早跳过更新。再者，如果我们在监听器回调中调用过时的 props 则可能会导致 &lt;code>selector&lt;/code> 抛出错误。&lt;/p>
&lt;p>我们的双手被束缚，尚无解决方案，我们必须做出一些妥协。&lt;/p>
&lt;p>如果我们忽略该错误会发生什么？我们首先要问自己一个问题：何时会发生错误？大约有 2 种情况。错误可能是由于选择器本身的错误而引起的，或者因为僵尸子节点问题导致了意外错误。无论哪种方式，我们都希望通过重新渲染组件并在渲染阶段应用 &lt;code>selector(store.getState())&lt;/code> 以获取最新状态来安全地处理它们。前一种情况将在渲染阶段&lt;strong>重新引发&lt;/strong>错误，而后者将不会产生任何错误。&lt;/p>
&lt;p>那种不会抛出过时的 props 问题呢？我们仍然可以得到不一致状态但没有错误的情况。在这种情况下，无论如何组件仍然会在以后重新渲染，因为我们仍将处于 &lt;code>selector(store.getState())&lt;/code> 渲染阶段，因此由于我们上面提到的第一个解决方案，问题将消失。&lt;/p>
&lt;p>看起来我们可以在第 5 步中安全地忽略该错误，而在渲染阶段重试该错误。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">useSelector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">selector&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">store&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useContext&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="p">[,&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useReducer&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">currentState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useRef&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Try to get the state in the render phase to safely get the latest props
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">currentState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">useEffect&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">subscribe&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">nextState&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getState&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">nextState&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="nx">currentState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Bail out updates early
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Ignore errors
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Either way we want to force a re-render
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">store&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">forceUpdate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">currentState&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">currentState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">current&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>结合 &lt;code>unstable_batchedUpdates&lt;/code> 的技巧，我们可以在选定状态不变的情况下尽早跳过更新，并安全地防止过时的 props 和僵尸子节点问题。我们再次运行代码，并检查一切是否正常运行。前 4 个步骤相同，因此我们从第 5 步开始。&lt;/p>
&lt;ol start="5">
&lt;li>由于我们在渲染阶段传递 &lt;code>props&lt;/code> 给 &lt;code>listener&lt;/code>，在那时，其形成了封闭的 &lt;code>props&lt;/code>，换句话说，它是&lt;strong>过时的 props&lt;/strong>。访问 &lt;code>state.todos[ownProps.id]&lt;/code> 将导致 &lt;code>undefined&lt;/code>，然后调用 &lt;code>(undefined).content&lt;/code> 将导致错误。&lt;strong>我们故意捕获并隐藏错误，这是当我们知道要在渲染阶段选择状态，从而触发重渲染时&lt;/strong>。&lt;/li>
&lt;li>由于我们正在使用 &lt;code>unstable_batchedUpdates&lt;/code>，渲染已被批处理。&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 触发其监听器回调，&lt;code>selector(store.getState())&lt;/code> 的结果为 &lt;code>[]&lt;/code>，也计划重渲染。&lt;/li>
&lt;li>渲染从上向下进行操作，&lt;code>&amp;lt;TodoList&amp;gt;&lt;/code> 先渲染，然后再次调用 &lt;code>selector(store.getState())&lt;/code>，返回一个空的 &lt;code>&amp;lt;ul&amp;gt;&lt;/code>，完成渲染。&lt;/li>
&lt;/ol>
&lt;p>在这种方法中，我们假设用户提供的 &lt;code>selector&lt;/code> 函数必须遵循 2 条规则。&lt;/p>
&lt;ol>
&lt;li>&lt;code>selector&lt;/code> 没有任何副作用。&lt;/li>
&lt;li>代码不依赖也不期望 &lt;code>selector&lt;/code> 抛出错误。&lt;/li>
&lt;/ol>
&lt;p>简而言之，&lt;code>selector&lt;/code> 必须是一个&lt;strong>纯函数&lt;/strong>。在更新过程中，我们可能会运行 &lt;code>selector&lt;/code> 多次。只要 &lt;code>selector&lt;/code> 是纯的，那么多次运行它们就不成问题。而且，&lt;code>React.StrictMode&lt;/code> 已经执行了一段时间的渲染规则，在 &lt;code>selector&lt;/code> 中，这样做也是一种更好的做法。&lt;/p>
&lt;p>我们也可以决定以用户身份自行处理问题。谨慎地保护 &lt;code>selecto&lt;/code> 函数并适当地处理错误，虽然有点多，但是仍然是一个很好的解决方案。&lt;/p>
&lt;p>我们可以做更多的优化来增强性能，例如仅在需要时（当它有过时的 props 或选择器发生更改时）在渲染阶段才强制其调用 &lt;code>selector&lt;/code>。但是，这是 &lt;code>useSelector&lt;/code> 在后台如何工作以及为什么我们必须保持选择器为&lt;strong>纯的&lt;/strong>基本思想。&lt;/p>
&lt;h2 id="收获">收获&lt;/h2>
&lt;p>Phew！这是一段漫长的旅程。给自己一个走到最后的掌声。跟着走并不容易！&lt;/p>
&lt;p>重新创建 &lt;code>Redux&lt;/code> 看起来很简单，但要小心处理许多陷阱。在这篇文章中，我们甚至没有提到大量的优化和错误处理。&lt;/p>
&lt;p>希望这篇文章对你更好地了解 &lt;code>Redux&lt;/code> 和 &lt;code>react-redux&lt;/code> 的背后的工作原理很有帮助。也赞扬所有维护者和贡献者创建了如此出色的库并不断地对其进行改进。即使我同意你可能不需要 &lt;code>Redux&lt;/code>，它仍然为中型乃至大型团队提供了一种有用的模式，使他们可以顺利地进行协作。&lt;/p>
&lt;p>下次，当你发现其它人将 &lt;code>Redux&lt;/code> 视为理所当然时，请问他/他如何解决&lt;strong>过时的 props 和僵尸子节点&lt;/strong>问题，并向她/他展示此帖子 😉。&lt;/p>
&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.isquaredsoftware.com/2018/11/react-redux-history-implementation/" target="_blank" rel="noopener">Idiomatic Redux: The History and Implementation of React-Redux&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/reduxjs/react-redux/pull/99" target="_blank" rel="noopener">reduxjs/react-redux#99 (Fix issues with stale props #99) Where the stale props first fixed back in v4&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/reduxjs/react-redux/issues/292" target="_blank" rel="noopener">reduxjs/react-redux#292 (Can we avoid inconsistencies on non-batched dispatches?) Where Dan found that the order doesn&amp;rsquo;t matter, but batching updates does&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/reduxjs/react-redux/issues/1177" target="_blank" rel="noopener">reduxjs/react-redux#1177 (React-Redux Roadmap: v6, Context, Subscriptions, and Hooks)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://github.com/reduxjs/react-redux/issues/1177#issuecomment-468765242" target="_blank" rel="noopener">Mark explains that &lt;code>unstable_batchedUpdates&lt;/code> isn&amp;rsquo;t sufficient for fixing stale props due to performance reason&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://github.com/reduxjs/react-redux/issues/1179" target="_blank" rel="noopener">reduxjs/react-redux#1179 (Discussion: Potential hooks API design)&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://github.com/reduxjs/react-redux/issues/1179#issuecomment-482164630" target="_blank" rel="noopener">A comment by the author of the hooks API proposal&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/reduxjs/react-redux/issues/1179#issuecomment-483617153" target="_blank" rel="noopener">Example test cases for stale props with hooks&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&amp;hellip;, and many more which I simply cannot recall where I read them.&lt;/li>
&lt;/ul></description></item></channel></rss>