<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>系统设计 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/microcn-notes/03.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link><atom:link href="https://ng-tech.icu/books/microcn-notes/03.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><description>系统设计</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>系统设计</title><link>https://ng-tech.icu/books/microcn-notes/03.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link></image><item><title>框架对比</title><link>https://ng-tech.icu/books/microcn-notes/03.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/microcn-notes/03.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</guid><description>&lt;h1 id="google-的-drapper">Google 的 Drapper&lt;/h1>
&lt;p>Dapper 是 Google 生产环境下的分布式跟踪系统，Dapper 有三个设计目标：&lt;/p>
&lt;ul>
&lt;li>低消耗：跟踪系统对在线服务的影响应该做到足够小。&lt;/li>
&lt;li>应用级的透明：对于应用的程序员来说，是不需要知道有跟踪系统这回事的。如果一个跟踪系统想生效，就必须需要依赖应用的开发者主动配合，那么这个跟踪系统显然是侵入性太强的。&lt;/li>
&lt;li>延展性：Google 至少在未来几年的服务和集群的规模，监控系统都应该能完全把控住。&lt;/li>
&lt;/ul>
&lt;p>Drapper 的日志格式，用 span 来表示一个服务调用开始和结束的时间，也就是时间区间。Dapper 记录了 span 的名称以及每个 span 的 ID 和父 ID，如果一个 span 没有父 ID 被称之为 root span。所有的 span 都挂在一个特定的 trace 上，共用一个 traceID，这些 ID 用全局 64 位整数标示。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images2015.cnblogs.com/blog/524341/201607/524341-20160727205757028-1834051813.png" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Drapper 如何进行跟踪收集：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images2015.cnblogs.com/blog/524341/201607/524341-20160727205905106-1823480632.png" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>分为 3 个阶段：各个服务将 span 数据写到本机日志上；Dapper 守护进程进行拉取，将数据读到 dapper 收集器里；Dapper 收集器将结果写到 bigtable 中，一次跟踪被记录为一行。&lt;/p>
&lt;h1 id="淘宝的鹰眼">淘宝的鹰眼&lt;/h1>
&lt;p>关于淘宝的鹰眼系统，主要资料来自于内部分享，&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images2015.cnblogs.com/blog/524341/201607/524341-20160727210517138-692387667.png" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>鹰眼埋点和生成日志：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images2015.cnblogs.com/blog/524341/201607/524341-20160727210533872-2045138414.png" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>如何抓取和存储日志：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images2015.cnblogs.com/blog/524341/201607/524341-20160727210542216-2111202319.png" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>鹰眼的实现小结：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images2015.cnblogs.com/blog/524341/201607/524341-20160727210551513-1147617933.png" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>系统设计</title><link>https://ng-tech.icu/books/microcn-notes/03.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/microcn-notes/03.%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/%E5%88%86%E5%B8%83%E5%BC%8F%E8%BF%BD%E8%B8%AA/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h1 id="分布式追踪系统设计">分布式追踪系统设计&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>低侵入性，应用透明：作为非业务组件，应当尽可能少侵入或者无侵入其他业务系统，对于使用方透明，减少开发人员的负担。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>低损耗：服务调用埋点本身会带来性能损耗，这就需要调用跟踪的低损耗，实际中还会通过配置采样率的方式，选择一部分请求去分析请求路径。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大范围部署，扩展性：作为分布式系统的组件之一，一个优秀的调用跟踪系统必须支持分布式部署，具备良好的可扩展性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="关键技术点">关键技术点&lt;/h1>
&lt;h2 id="埋点和生成日志">埋点和生成日志&lt;/h2>
&lt;p>埋点即系统在当前节点的上下文信息，可以分为客户端埋点、服务端埋点，以及客户端和服务端双向型埋点。埋点日志通常要包含以下内容：TraceId、RPCId、调用的开始时间，调用类型，协议类型，调用方 ip 和端口，请求的服务名等信息；调用耗时，调用结果，异常信息，消息报文等；预留可扩展字段，为下一步扩展做准备；&lt;/p>
&lt;h2 id="抓取和存储日志">抓取和存储日志&lt;/h2>
&lt;p>日志的采集和存储有许多开源的工具可以选择，一般来说，会使用离线 + 实时的方式去存储日志，主要是分布式日志采集的方式。典型的解决方案如 Flume 结合 Kafka 等 MQ。&lt;/p>
&lt;h2 id="分析和统计调用链数据">分析和统计调用链数据&lt;/h2>
&lt;p>一条调用链的日志散落在调用经过的各个服务器上，首先需要按 TraceId 汇总日志，然后按照 RpcId 对调用链进行顺序整理。调用链数据不要求百分之百准确，可以允许中间的部分日志丢失。&lt;/p>
&lt;h2 id="计算和展示">计算和展示&lt;/h2>
&lt;p>汇总得到各个应用节点的调用链日志后，可以针对性的对各个业务线进行分析。需要对具体日志进行整理，进一步储存在 HBase 或者关系型数据库中，可以进行可视化的查询。&lt;/p></description></item></channel></rss>