<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Serverless | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/</link>
      <atom:link href="https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/index.xml" rel="self" type="application/rss+xml" />
    <description>Serverless</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>Serverless</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/</link>
    </image>
    
    <item>
      <title>BaaS</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/baas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/baas/</guid>
      <description>&lt;h1 id=&#34;baas&#34;&gt;BaaS&lt;/h1&gt;
&lt;p&gt;无服务器应用程序的另一个定义是使用 BaaS 或后端作为服务范式的应用程序。BaaS 的想法是，开发人员只编写其应用程序的客户端代码，然后依赖于托管在云中的多个软件预构建服务（可通过 API 访问）。BaaS 在移动应用程序编程中很受欢迎，开发人员可以依赖大量的后端服务来驱动应用程序的大部分功能。BaaS 服务的例子有：Firebase 和 Parse。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>FaaS</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/faas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/faas/</guid>
      <description>&lt;h1 id=&#34;faas&#34;&gt;FaaS&lt;/h1&gt;
&lt;p&gt;FaaS 的理念是，诸如亚马逊之类的云提供商甚至是诸如 Fission.io 或 funktion 之类的本地软件都可以提供服务，其中用户可以请求远程运行的功能以执行非常特定的任务。功能结束后，这些结果将返回给用户。不维护任何服务或有状态数据，并且用户将功能代码提供给运行该功能的服务。&lt;/p&gt;
&lt;p&gt;无服务器架构的优势在于，不需要配置虚拟机和/或容器来构建利用 FaaS 的应用程序部分。一旦它们的功能结束，运行这些功能的计算实例从用户的角度来看就不再存在。此外，需要由用户监控和维护的微服务和/或容器的数量减少，节省了成本、时间和精力。&lt;/p&gt;
&lt;p&gt;无服务器架构为软件工程师和架构师提供了另一种功能强大的软件构建工具，可用于设计灵活且可扩展的软件。已知的 FaaS 有 Amazon 的 AWS Lambda、Microsoft 的 Azure Functions、Google 的 Cloud Functions 等。&lt;/p&gt;
&lt;h2 id=&#34;缺陷&#34;&gt;缺陷&lt;/h2&gt;
&lt;p&gt;与微服务和云原生应用程序类似，无服务器架构并不适用于所有场景。FaaS 提供的功能本身并不保持状态，这意味着在编写功能代码时需要特别注意。这与全微服务不同——开发人员可以完全控制状态。尽管有这种限制，但在 FaaS 的情况下保持状态的一种方法是将状态传播到数据库或像 Redis 这样的内存缓存。&lt;/p&gt;
&lt;p&gt;这些功能的启动时间并不总是很快，因为要有时间分配给 FaaS 服务提供商发送请求，然后在某些情况下启动运行该功能的计算实例也需要时间。在设计无服务器应用程序时必须考虑这些延迟。FaaS 不像微服务那样持续运行，这使得它们不适合任何需要持续运行软件的任务。&lt;/p&gt;
&lt;p&gt;无服务器应用程序具有与其他云原生应用程序相同的限制，其中应用程序从一个云提供商到另一个云提供商，或从云到本地环境的可移植性因供应商锁定而变得具有挑战性。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Serverless 发展历程</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/serverless-%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/04.%E4%BA%91%E5%8E%9F%E7%94%9F/serverless/serverless-%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;serverless-发展历程&#34;&gt;Serverless 发展历程&lt;/h1&gt;
&lt;p&gt;通常意义上来讲，Serverless 可以看作是一种云计算服务模型，它允许开发者在不需要管理服务器的情况下通过事件驱动的方式运行代码。与传统应用服务开发模式不同，开发者只需编写并上传他们的应用代码到云服务商提供的平台上，云平台会自动为应用分配资源，并处理应用的部署、扩缩容。这使得开发者可以更加专注于自己的业务需求和应用逻辑，而不需要考虑服务资源的申请、创建、管理和维护等。&lt;/p&gt;
&lt;p&gt;从这个意义上讲，我们也可以认为 Serverless 是一个计算范式，它解决资源托管、调度、运维管理等一系列平台型问题，可以看作是 DevOps 的进一步延伸。从应用开发视角来看，Serverless 包括 FaaS（Function as a Service）和 BaaS（Backend as a Service）两部分。在 FaaS 中，开发者编写的代码会被封装成一个或多个函数，运行在云平台上。当请求到达时，云平台自动为函数分配计算资源，拉起函数并执行。执行完成后，平台根据一定的保活策略决定资源的复用或者释放。FaaS 模型不仅可以提高应用的可伸缩性和弹性，还可以大幅降低应用运维的成本。BaaS 则致力于更广泛意义下的 Serverless 化，包括对象存储、缓存、数据库、消息等全栈后端服务的按需弹性、按用付费等。&lt;/p&gt;
&lt;p&gt;谈到 Serverless 发展历程，从 2008 年 Google 推出 App Engine 算起，至今已有 15 年的时间，期间经历了多次迭代，主要经历了以下几个阶段。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Innovators（2008 年~2014 年）：Google App Engine 的发布，使得开发者无须再关心资源分配，也无需关心底层操作系统、硬件和网络等基础设施，对传统应用开发方式具有变革性意义，但 App Engine 并没有使 Serverless 理念流行起来，Serverless 概念本身是在 2012 年由 Iron.io 公司率先提。2014 年 AWS 发布 Lambda 之后，真正使 Serverless 流行起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Early Adoptors（2016 年~2018 年）：这期间，主流云计算平台陆续推出了 Serverless 系列产品，如 Microsoft Azure 发布 Azure Functions、Google Cloud Platform 发布 Cloud Functions 和 Firebase、华为云发布 FunctionGraph 等。2018 年 Gartner 将 Serverless 列为“十大未来将影响基础设施和运维的技术趋势之一”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Early Majority（2019 年~今）：2019 年 UC Berkeley 发表论文《Cloud Programming Simplified：A Berkeley View on Serverless Computing》，预言 Serverless 将成为云计算下一代的编程范式，提出 Serverless = FaaS + BaaS 的定义框架，并提出存储等后端的 BaaS 化、异构硬件支持、资源细粒度隔离等 Serverless 的核心问题。同期，华为云提出通用 Serverless（General-purpose Serverless）的理念，支持有状态应用、程序自动并行、大规模异构资源管理等，帮助企业解决更广泛的计算、运行与交付问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
