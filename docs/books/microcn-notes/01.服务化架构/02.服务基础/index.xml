<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>02.服务基础 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/</link>
      <atom:link href="https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    <description>02.服务基础</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>02.服务基础</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/</link>
    </image>
    
    <item>
      <title>服务间通信</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;h1 id=&#34;服务间通信&#34;&gt;服务间通信&lt;/h1&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.linkedkeeper.com/1772.html?hmsr=toutiao.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.linkedkeeper.com/1772.html?hmsr=toutiao.io&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>服务视图</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E8%A7%86%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/%E6%9C%8D%E5%8A%A1%E8%A7%86%E5%9B%BE/</guid>
      <description>&lt;h1 id=&#34;微服务的服务视图&#34;&gt;微服务的服务视图&lt;/h1&gt;
&lt;p&gt;2002 年左右，亚马逊 CEO 贝佐斯就在亚马逊内部强制推行了以下六项原则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有团队开发的程序模块都要通过 Service 接口将数据与功能开放出来。&lt;/li&gt;
&lt;li&gt;团队间程序模块的信息通信都要通过上述接口。&lt;/li&gt;
&lt;li&gt;除上述通信方式外，其他方式一概不允许使用：不能直接连接程序，不能直接读取其他团队的数据库，不能使用共享内存模式，不能使用他人模块的内部入口等。&lt;/li&gt;
&lt;li&gt;任何技术都可以使用，比如 HTTP、Corba、发布/订阅、自定义的网络协议等。&lt;/li&gt;
&lt;li&gt;所有的 Service 接口，毫无例外，都必须从骨子里到表面上被设计成能对外界开放的。也就是说，团队必须做好规划与设计，以便未来把接口开放给全世界的程序员。&lt;/li&gt;
&lt;li&gt;不按照以上要求做的人会被炒鱿鱼。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想象一个向消费者提供产品信息的分布式系统。如下图，这个服务由 7 个微服务组成，从 A 到 G。A 服务存储了用户的个人信息。B 服务存储用户的登录账户信息，如用户上一次登录的时间和访问了什么信息。C 服务是关于产品信息的。D 服务作为 API 网关处理所有来自外部的接口访问。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230418153551.png&#34; alt=&#34;多服务调用示意&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求首先进入 D 服务，即 API 服务；&lt;/li&gt;
&lt;li&gt;D 服务本身并没有所有需要的信息，所以它进一步请求 C 服务和 F 服务以获取必要的数据；&lt;/li&gt;
&lt;li&gt;C 服务和 F 服务也同时都需要更多的信息来满足请求，于是 C 服务请求 A 服务，F 服务请求了 B 服务和 G 服务；&lt;/li&gt;
&lt;li&gt;A 服务也需要访问 B 服务，B 服务需要访问 E 服务，同时 G 服务也需要访问 E 服务；&lt;/li&gt;
&lt;li&gt;对 D 服务的一个请求，扩散到了整个微服务架构里。而且当所有依赖的服务没有返回或者超时之前，API 不会向手机 App 返回响应。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在简单的系统中我们能够根据功能来对服务进行划分，而对于大型复杂系统，则会根据 Facade 接口、应用服务、领域服务和基础服务等层划分，然后各层服务协同配合，为外部提供服务。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://confluence-connect.gliffy.net/embed/image/755ec27f-38e8-467e-ba1e-b2189848dc85.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;值得一提的是，在每个具体的服务内部，我们又可以划分为接口层，应用层，领域层以及基础（数据）层等不同的层次。&lt;/p&gt;
&lt;h2 id=&#34;接口服务&#34;&gt;接口服务&lt;/h2&gt;
&lt;p&gt;接口服务位于用户接口层，用于处理用户发送的 Restful 请求和解析用户输入的配置文件等，并将信息传递给应用层。&lt;/p&gt;
&lt;h2 id=&#34;应用服务&#34;&gt;应用服务&lt;/h2&gt;
&lt;p&gt;应用服务位于应用层。用来表述应用和用户行为，负责服务的组合、编排和转发，负责处理业务用例的执行顺序以及结果的拼装。应用层的服务包括应用服务和领域事件相关服务。&lt;/p&gt;
&lt;p&gt;应用服务可对微服务内的领域服务以及微服务外的应用服务进行组合和编排，或者对基础层如文件、缓存等数据直接操作形成应用服务，对外提供粗粒度的服务。领域事件服务包括两类：领域事件的发布和订阅。通过事件总线和消息队列实现异步数据传输，实现微服务之间的解耦。&lt;/p&gt;
&lt;h2 id=&#34;领域服务&#34;&gt;领域服务&lt;/h2&gt;
&lt;p&gt;领域服务位于领域层，为完成领域中跨实体或值对象的操作转换而封装的服务，领域服务以与实体和值对象相同的方式参与实施过程。领域服务对同一个实体的一个或多个方法进行组合和封装，或对多个不同实体的操作进行组合或编排，对外暴露成领域服务。领域服务封装了核心的业务逻辑。实体自身的行为在实体类内部实现，向上封装成领域服务暴露。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;为隐藏领域层的业务逻辑实现，所有领域方法和服务等均须通过领域服务对外暴露。&lt;/li&gt;
&lt;li&gt;为实现微服务内聚合之间的解耦，原则上禁止跨聚合的领域服务调用和跨聚合的数据相互关联。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基础服务&#34;&gt;基础服务&lt;/h2&gt;
&lt;p&gt;基础服务位于基础层。为各层提供资源服务（如数据库、缓存等），实现各层的解耦，降低外部资源变化对业务逻辑的影响。基础服务主要为仓储服务，通过依赖反转的方式为各层提供基础资源服务，领域服务和应用服务调用仓储服务接口，利用仓储实现持久化数据对象或直接访问基础资源。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>中间件</title>
      <link>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/microcn-notes/01.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/02.%E6%9C%8D%E5%8A%A1%E5%9F%BA%E7%A1%80/%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>&lt;h1 id=&#34;中间件&#34;&gt;中间件&lt;/h1&gt;
&lt;p&gt;介于操作系统和应用程序之间的产品，中间件简单解释，你可以理解为面向信息系统交互，集成过程中的通用部分的集合，屏蔽了底层的通讯，交互，连接等复杂又通用化的功能，以产品的形式提供出来，系统在交互时，直接采用中间件进行连接和交互即可，避免了大量的代码开发和人工成本。其实，理论上来讲，中间件所提供的功能通过代码编写都可以实现，只不过开发的周期和需要考虑的问题太多，逐渐的，这些部分，以中间件产品的形式进行了替代。比如常见的消息中间件，即系统之间的通讯与交互的专用通道，类似于邮局，系统只需要把传输的消息交给中间件，由中间件负责传递，并保证传输过程中的各类问题，如网络问题，协议问题，两端的开发接口问题等均由消息中间件屏蔽了，出现了网络故障时，消息中间件会负责缓存消息，以避免信息丢失。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
