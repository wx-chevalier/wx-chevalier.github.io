<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>流水线模型 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/concurrent-notes/02.%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%A8%A1%E5%9E%8B/</link>
      <atom:link href="https://ng-tech.icu/books/concurrent-notes/02.%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%A8%A1%E5%9E%8B/index.xml" rel="self" type="application/rss+xml" />
    <description>流水线模型</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>流水线模型</title>
      <link>https://ng-tech.icu/books/concurrent-notes/02.%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%A8%A1%E5%9E%8B/</link>
    </image>
    
    <item>
      <title>流水线模型</title>
      <link>https://ng-tech.icu/books/concurrent-notes/02.%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%A8%A1%E5%9E%8B/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/concurrent-notes/02.%E5%B9%B6%E5%8F%91%E6%A8%A1%E5%9E%8B/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%A8%A1%E5%9E%8B/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;流水线模型&#34;&gt;流水线模型&lt;/h1&gt;
&lt;p&gt;流水线模型，特点是无状态线程，无状态也意味着无需竞争共享资源，无需等待，也就是非阻塞模型。流水线模型顾名思义就是流水线上有多个环节，每个环节完成自己的工作后就交给下一个环节，无需等待上游，周而复始的完成自己岗位上的一亩三分地就行。各个环节之间交付无需等待，完成即可交付。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2019/09/02/nPEwnJ.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而工厂的流水线也不止一条，所以有多条流水线同时工作，不同岗位的生产效率是不一样的，所以不同流水线之间也可以发生协同。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2019/09/02/nPVp40.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们说流水线模型也称为响应式模型或者事件驱动模型，其实就是流水线上上游岗位完成生产就通知下游岗位，所以完成了一个事件的通知，每完成一次就通知一下，就是响应式的意思。流水线模型总体的思想就是纵向切分任务，把任务里面耗时过久的环节单独隔离出来，避免完成一个任务需要耗费等待的时间。在实现上又分为 Actors 和 Channels 模型。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Actors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2019/09/02/nPV3Ke.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Channels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2019/09/02/nPVDKg.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;由于各个环节直接不直接交互，所以上下游之间并不知道对方是谁，好比不同环节直接用的是几条公共的传送带来接收物品，各自只需要把完成后的半成品扔到传送带，即使后面流水线优化了，去掉中间的环节，对于个体岗位来说也是无感知的，它只是周而复始的从传送带拿物品来加工。&lt;/p&gt;
&lt;h2 id=&#34;优劣分析&#34;&gt;优劣分析&lt;/h2&gt;
&lt;p&gt;流水线的优势如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;无共享状态：无需考虑资源抢占，死锁等问题&lt;/li&gt;
&lt;li&gt;独享内存：worker 可以持有内存，合并多次操作到内存后再持久化，提升效率&lt;/li&gt;
&lt;li&gt;贴合底层：单线程模式贴合硬件运行流程，便于代码维护&lt;/li&gt;
&lt;li&gt;任务顺序可预知&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其缺陷在于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不够直观：一个任务被拆分为流水线上多个环节，代码层面难以直观理解业务逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于流水线模式跟人类的顺序执行思维不一样，比较费解，基于 Java 的 Akka/Reator/Vert.x/Play/Qbit 框架，或者 Golang、Node 等语言或者框架就让我们编码的时候像写传统的多线程代码一样，而运行起来又是流水线模式。&lt;/p&gt;
&lt;p&gt;其实流水线模型背后用的也还是多线程来实现，只不过对于传统多线程模式下我们需要小心翼翼来处理跟踪资源共享问题，而流水线模式把以前一个线程做的事情拆成多个，每一个环节再用一条线程来完成，避免共享，线程直接通过管道传输消息。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
