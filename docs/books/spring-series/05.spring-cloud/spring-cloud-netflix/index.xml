<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spring Cloud Netflix | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/spring-series/05.spring-cloud/spring-cloud-netflix/</link><atom:link href="https://ng-tech.icu/books/spring-series/05.spring-cloud/spring-cloud-netflix/index.xml" rel="self" type="application/rss+xml"/><description>Spring Cloud Netflix</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Spring Cloud Netflix</title><link>https://ng-tech.icu/books/spring-series/05.spring-cloud/spring-cloud-netflix/</link></image><item><title>Spring Cloud Config</title><link>https://ng-tech.icu/books/spring-series/05.spring-cloud/spring-cloud-netflix/spring-cloud-config/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/spring-series/05.spring-cloud/spring-cloud-netflix/spring-cloud-config/</guid><description>&lt;h1 id="spring-cloud-config">Spring Cloud Config&lt;/h1>
&lt;p>在上面的例子中，我们将 Spring Boot 应用需要的配置内容都放在了项目工程中，虽然我们已经能够通过 spring.profiles.active 或是通过 Maven 来实现多环境的支持。但是，当我们的团队逐渐壮大，分工越来越细致之后，往往我们不需要让开发人员知道测试或是生成环境的细节，而是希望由每个环境各自的负责人（QA 或是运维）来集中维护这些信息。那么如果还是以这样的方式存储配置内容，对于不同环境配置的修改就不得不去获取工程内容来修改这些配置内容，当应用非常多的时候就变得非常不方便。同时，配置内容都对开发人员可见，本身这也是一种安全隐患。对此，现在出现了很多将配置内容外部化的框架和工具&lt;/p></description></item></channel></rss>