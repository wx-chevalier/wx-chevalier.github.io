<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>特性与生态 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/spring-series/1.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/%E7%89%B9%E6%80%A7%E4%B8%8E%E7%94%9F%E6%80%81/</link>
      <atom:link href="https://ng-tech.icu/books/spring-series/1.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/%E7%89%B9%E6%80%A7%E4%B8%8E%E7%94%9F%E6%80%81/index.xml" rel="self" type="application/rss+xml" />
    <description>特性与生态</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>特性与生态</title>
      <link>https://ng-tech.icu/books/spring-series/1.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/%E7%89%B9%E6%80%A7%E4%B8%8E%E7%94%9F%E6%80%81/</link>
    </image>
    
    <item>
      <title>背景特性</title>
      <link>https://ng-tech.icu/books/spring-series/1.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/%E7%89%B9%E6%80%A7%E4%B8%8E%E7%94%9F%E6%80%81/%E8%83%8C%E6%99%AF%E7%89%B9%E6%80%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/spring-series/1.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/%E7%89%B9%E6%80%A7%E4%B8%8E%E7%94%9F%E6%80%81/%E8%83%8C%E6%99%AF%E7%89%B9%E6%80%A7/</guid>
      <description>&lt;h1 id=&#34;spring-背景特性&#34;&gt;Spring 背景特性&lt;/h1&gt;
&lt;h1 id=&#34;特性&#34;&gt;特性&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;轻量非侵入：从大小与开销两方面而言，Spring 都是非常轻量的，完整的 Spring 框架可以在一个大小仅有 1M 多的 JAR 文件里发布，并且 Spring 所需要的处理开销也是微不足道的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;控制反转：Spring 通过所谓的 IoC 控制反转的技术来促进低耦合，在应用了 IoC 之后，一个对象依赖的其他对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;面向切面：Spring 支持面向切面的编程，并且把应用业务逻辑和系统服务分开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;容器：Spring 包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，我们可以基于可配置原型来配置 Bean 是如何被创建的、如何被关联的；可以设置是创建一个单独的实例或者每次需要时都生成一个新的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;框架：Spring 可以将简单的组件配置，组合成复杂的应用，在 Spring 中，应用对象被声明式地组合，典型的是在 XML 文件中进行声明。Spring 也提供了很多的基础功能（事务管理、持久化框架集成等），将应用逻辑的开发留给开发者。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;配置方式&#34;&gt;配置方式&lt;/h1&gt;
&lt;p&gt;在 Spring 1.x 的时代，主要使用 XML 来配置 Bean，我们需要频繁的在开发的类和配置文件之间切换。到了在 Spring2.x 时代，随着 JDK1.5 带来的注解支持，Spring 提供了声明 Bean 的注解（@Component,@Service 等），大大减少了配置量。而从 Spring 3.x 以后，Spring 提供了更为丰富的 Java 配置的能力（@Configuration，@Bean）等。&lt;/p&gt;
&lt;h1 id=&#34;spring-boot&#34;&gt;Spring Boot&lt;/h1&gt;
&lt;p&gt;Spring Boot 是由 Pivotal 团队提供的全新框架，其设计目的是用来简化新 Spring 应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。用我的话来理解，就是 Spring Boot 其实不是什么新的框架，它默认配置了很多框架的使用方式，就像 Maven 整合了所有的 Jar 包，Spring Boot 整合了所有的框架。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2019/09/03/nFQxUO.png&#34; alt=&#34;Spring Boot 概述&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Spring Boot 充分利用了 JavaConfig 的配置模式以及“约定优于配置”的理念，能够极大的简化基于 Spring MVC 的 Web 应用和 REST 服务开发。Spring Boot 可以使得创建独立的产品级别的基于 Spring 的应用程序变得更加简单，使得能够做到开箱即用。Spring Boot 可以用于创建能够直接用 &lt;code&gt;java -jar&lt;/code&gt; 命令运行的或者类似于传统的 war 部署方式的应用程序。同样也提供了所谓的 &lt;code&gt;spring scripts&lt;/code&gt; 这样的命令行工具。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>框架对比</title>
      <link>https://ng-tech.icu/books/spring-series/1.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/%E7%89%B9%E6%80%A7%E4%B8%8E%E7%94%9F%E6%80%81/%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/spring-series/1.%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/%E7%89%B9%E6%80%A7%E4%B8%8E%E7%94%9F%E6%80%81/%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94/</guid>
      <description>&lt;h1 id=&#34;java-web-框架对比&#34;&gt;Java Web 框架对比&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Spring MVC: This is pretty much the de facto standard. If I&amp;rsquo;m interviewing someone and they haven&amp;rsquo;t learned Spring-Core it is a definite mark against them. I don&amp;rsquo;t care if your prefer another IoC like Guice, Spring is just too popular to ignore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Boot: This is a wrapper layer around Spring MVC. It provides sensible defaults so that you can quickly get up and moving on your app. This framework is great in that you can quickly write code, but it is bad in that it will seem like magic until you&amp;rsquo;ve dug into it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Grails: If you want to dip into the groovy world, Grails is another excellent choice. It is heavily inspired by Ruby on Rails. It is great for getting an app up and running quickly. Like Rails, it requires discipline in adhering to MVC pattern to create a scalable app. Although you can get up and running quickly, it is easy to write an unmaintainable mess without guidance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Play: Another popular framework built on Akka. Favored by the scala community (although it works with plain java). Play is quite performant due to its non-blocking architecture. One of the killer features is that you can reload your changes without having to compile (although this is now available in Spring MVC/Boot with devtools). Honestly, it would be hard for me to recommend Play to someone that isn&amp;rsquo;t already invested in Scala. Scala is a great language, but it has its own learning curve that will slow you down having to pick up multiple things at once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dropwizard: A lightweight REST framework.It&amp;rsquo;s been gaining popularity lately.Having used it on several projects, I find some of the documentation lacking, but otherwise haven&amp;rsquo;t had many problems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
