<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>对象分层与转换 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/spring-series/4.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/ddd/%E5%AF%B9%E8%B1%A1%E5%88%86%E5%B1%82%E4%B8%8E%E8%BD%AC%E6%8D%A2/</link>
      <atom:link href="https://ng-tech.icu/books/spring-series/4.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/ddd/%E5%AF%B9%E8%B1%A1%E5%88%86%E5%B1%82%E4%B8%8E%E8%BD%AC%E6%8D%A2/index.xml" rel="self" type="application/rss+xml" />
    <description>对象分层与转换</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>对象分层与转换</title>
      <link>https://ng-tech.icu/books/spring-series/4.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/ddd/%E5%AF%B9%E8%B1%A1%E5%88%86%E5%B1%82%E4%B8%8E%E8%BD%AC%E6%8D%A2/</link>
    </image>
    
    <item>
      <title>对象分类</title>
      <link>https://ng-tech.icu/books/spring-series/4.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/ddd/%E5%AF%B9%E8%B1%A1%E5%88%86%E5%B1%82%E4%B8%8E%E8%BD%AC%E6%8D%A2/%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/spring-series/4.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/ddd/%E5%AF%B9%E8%B1%A1%E5%88%86%E5%B1%82%E4%B8%8E%E8%BD%AC%E6%8D%A2/%E5%AF%B9%E8%B1%A1%E5%88%86%E7%B1%BB/</guid>
      <description>&lt;h1 id=&#34;java-对象分类&#34;&gt;Java 对象分类&lt;/h1&gt;
&lt;h2 id=&#34;popersistant-object-持久对象&#34;&gt;PO(persistant object) 持久对象&lt;/h2&gt;
&lt;p&gt;在 o/r 映射的时候出现的概念，如果没有 o/r 映射，没有这个概念存在了。通常对应数据模型 ( 数据库 ), 本身还有部分业务逻辑的处理。可以看成是与数据库中的表相映射的 java 对象。最简单的 PO 就是对应数据库中某个表中的一条记录，多个记录可以用 PO 的集合。PO 中应该不包含任何对数据库的操作。&lt;/p&gt;
&lt;h2 id=&#34;dodomain-objectentity-领域对象&#34;&gt;DO（Domain Object）/Entity 领域对象&lt;/h2&gt;
&lt;p&gt;就是从现实世界中抽象出来的有形或无形的业务实体。一般和数据中的表结构对应。&lt;/p&gt;
&lt;h2 id=&#34;totransfer-object数据传输对象&#34;&gt;TO(Transfer Object)，数据传输对象&lt;/h2&gt;
&lt;p&gt;在应用程序不同 tie（关系）之间传输的对象&lt;/p&gt;
&lt;h2 id=&#34;dtodata-transfer-object数据传输对象&#34;&gt;DTO（Data Transfer Object）数据传输对象&lt;/h2&gt;
&lt;p&gt;这个概念来源于 J2EE 的设计模式，原来的目的是为了 EJB 的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。&lt;/p&gt;
&lt;h2 id=&#34;voview-object-值对象&#34;&gt;VO(view object) 值对象&lt;/h2&gt;
&lt;p&gt;视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。&lt;/p&gt;
&lt;h2 id=&#34;bobusiness-object-业务对象&#34;&gt;BO(business object) 业务对象&lt;/h2&gt;
&lt;p&gt;从业务模型的角度看, 见 UML 元件领域模型中的领域对象。封装业务逻辑的 java 对象, 通过调用 DAO 方法, 结合 PO,VO 进行业务操作。business object: 业务对象 主要作用是把业务逻辑封装为一个对象。这个对象可以包括一个或多个其它的对象。比如一个简历，有教育经历、工作经历、社会关系等等。我们可以把教育经历对应一个 PO，工作经历对应一个 PO，社会关系对应一个 PO。建立一个对应简历的 BO 对象处理简历，每个 BO 包含这些 PO。这样处理业务逻辑时，我们就可以针对 BO 去处理。&lt;/p&gt;
&lt;h2 id=&#34;pojoplain-ordinary-java-object-简单无规则-java-对象&#34;&gt;POJO(plain ordinary java object) 简单无规则 java 对象&lt;/h2&gt;
&lt;p&gt;纯的传统意义的 java 对象。就是说在一些 Object/Relation Mapping 工具中，能够做到维护数据库表记录的 persisent object 完全是一个符合 Java Bean 规范的纯 Java 对象，没有增加别的属性和方法。我的理解就是最基本的 Java Bean，只有属性字段及 setter 和 getter 方法！。&lt;/p&gt;
&lt;h2 id=&#34;daodata-access-object-数据访问对象&#34;&gt;DAO(data access object) 数据访问对象&lt;/h2&gt;
&lt;p&gt;是一个 sun 的一个标准 j2ee 设计模式，这个模式中有个接口就是 DAO，它负持久层的操作。为业务层提供接口。此对象用于访问数据库。通常和 PO 结合使用，DAO 中包含了各种数据库的操作方法。通过它的方法, 结合 PO 对数据库进行相关的操作。夹在业务逻辑与数据库资源中间。配合 VO, 提供数据库的 CRUD 操作&lt;/p&gt;
&lt;h1 id=&#34;tbd&#34;&gt;TBD&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/77478908&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/77478908&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
