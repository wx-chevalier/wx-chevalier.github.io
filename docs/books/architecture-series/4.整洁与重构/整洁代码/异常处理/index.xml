<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>异常处理 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/architecture-series/4.%E6%95%B4%E6%B4%81%E4%B8%8E%E9%87%8D%E6%9E%84/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <atom:link href="https://ng-tech.icu/books/architecture-series/4.%E6%95%B4%E6%B4%81%E4%B8%8E%E9%87%8D%E6%9E%84/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <description>异常处理</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>异常处理</title>
      <link>https://ng-tech.icu/books/architecture-series/4.%E6%95%B4%E6%B4%81%E4%B8%8E%E9%87%8D%E6%9E%84/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
    </image>
    
    <item>
      <title>异常处理</title>
      <link>https://ng-tech.icu/books/architecture-series/4.%E6%95%B4%E6%B4%81%E4%B8%8E%E9%87%8D%E6%9E%84/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/architecture-series/4.%E6%95%B4%E6%B4%81%E4%B8%8E%E9%87%8D%E6%9E%84/%E6%95%B4%E6%B4%81%E4%BB%A3%E7%A0%81/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;异常处理&#34;&gt;异常处理&lt;/h1&gt;
&lt;p&gt;不熟悉 erlang，不过 joyent 这篇讲 node.js 错误处理的文章挺有 let it crash 精髓: &lt;a href=&#34;https://www.joyent.com/node-js/production/design/errors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Joyent | Error Handling**&lt;/a&gt;》&lt;/p&gt;
&lt;p&gt;首先文章定义了 Operational Errors 和 Programmer Errors：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operational Error：表示一个正确的程序在运行时报告的错误；这些错误不是程序本身的 bug，而可能是操作系统的报错、网络错误、用户输入不正确、超时、500、内存不足等；&lt;/li&gt;
&lt;li&gt;Programmer Error：一般属于程序中的 bug，比如错误的访问 undefined 对象、错误的类型传递；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有时两者会出于同一个 root cause 而一体两面地出现：如果一个服务端出现 bug 导致崩溃，客户端收到 500 将视为 Operational Error；如果对 Operational Error 的处理不正确，这也属于 Programmer Errror。&lt;/p&gt;
&lt;p&gt;两者的重要差异在于：Operational Error 是一个正确的程序必须要处理的；而 Programmer Error 属于 bug，程序本身并不能处理。&lt;/p&gt;
&lt;p&gt;那么遇到 Programmer Error 应当怎么办呢？这就引出了 Let it crash 策略。&lt;/p&gt;
&lt;p&gt;有些 web 框架在请求中遇到 Programmer Error 的异常之后，会吞掉异常继续响应请求，这很常见，但是异常之后可能已经有奇怪的地方变得不一样了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;部分公共状态可能被污染为 null、undefined；&lt;/li&gt;
&lt;li&gt;数据库连接可能泄露，甚至可能留着一个未关闭的事务；&lt;/li&gt;
&lt;li&gt;socket 可能没有正确关闭；&lt;/li&gt;
&lt;li&gt;内存可能泄露；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些错误往往有累加效应，到最终展露症状时就很难找 root cause 了。比如，当你数据库被日积月累的连接泄露连爆的时候，引入这个连接泄露的变更在哪个 commit？&lt;/p&gt;
&lt;p&gt;文章认为从 Programmer Error 恢复的最佳方法便是立即 crash，配合一个 supervisor 之类的 restarter，出现问题时立即 crash，并重启恢复到一个干净的初始状态。此外，服务端的 Programmer Error 应被客户端视为 Operational Error，客户端应当对此作处理。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
