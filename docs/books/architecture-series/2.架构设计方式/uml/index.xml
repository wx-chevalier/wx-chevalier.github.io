<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UML | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/</link>
      <atom:link href="https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/index.xml" rel="self" type="application/rss+xml" />
    <description>UML</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>UML</title>
      <link>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/</link>
    </image>
    
    <item>
      <title>PlantUML</title>
      <link>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/plantuml/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/plantuml/</guid>
      <description>&lt;h1 id=&#34;plantuml&#34;&gt;PlantUML&lt;/h1&gt;
&lt;p&gt;PlantUML 是一个快速创建 UML 图形的组件，官网上之所以称它是一个组件，我 想主要是因为多数情况下我们都是在 Eclipse、NetBenas、Intellijidea、Emacs、Word 等软件里来使用 PlantUML。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/007DFXDhgy1g4htjnq1ovj316d0u0tf7.jpg&#34; alt=&#34;PlantUML&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PlantUML 支持的图形有：Sequence Diagram, Use case Diagram, Class Diagram, Activity Diagram (here is the new syntax), Component Diagram, State Diagram, Object Diagram, Wireframe Graphical Interface。PlantUML 通过简单和直观的语言来定义图形，它可以生成 PNG、SVG 和二进制图片。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Alice -&amp;gt; Bob: synchronous call
Alice -&amp;gt;&amp;gt; Bob: asynchronous call
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;常用模板&#34;&gt;常用模板&lt;/h1&gt;
&lt;h1 id=&#34;顺序图sequence-diagram&#34;&gt;顺序图（Sequence Diagram）&lt;/h1&gt;
&lt;p&gt;顺序图用 -&amp;gt;, &amp;ndash;&amp;gt;, &amp;lt;-, &amp;lt;&amp;ndash; 来绘制参与者（Participants）之 间的消息（Message）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Alice -&amp;gt; Bob: Authentication Request
Bob --&amp;gt; Alice: Authentication Response

Alice -&amp;gt; Bob: Another atuhentication Request
Alice &amp;lt;-- Bob: Another authentication Response
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注释语句以单引号开始头行，即是一个单行注释。多行注释可以使用&amp;quot;&amp;rsquo;&amp;ldquo;表示注释内容的开始，然后使用&amp;rdquo;&amp;rsquo;&amp;ldquo;来表示注释内容的结束。&lt;/p&gt;
&lt;h2 id=&#34;参与者&#34;&gt;参与者&lt;/h2&gt;
&lt;p&gt;可以使用 participant 关键词来申明参与者，也可以使用下面的参与者分类关键词来申明参与者：actor、boundary、control、entity、database：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;actor Foo1
boundary Foo2
control Foo3
entity Foo4
database Foo5

Foo1 -&amp;gt; Foo2 : To boundary
Foo1 -&amp;gt; Foo3 : To control
Foo1 -&amp;gt; Foo4 : To entity
Foo1 -&amp;gt; Foo5 : To database
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 as 关键词可以为参与者起一个别名，这样在对引用长名的参与者时会方便很多。在参与者申明语句后行尾可以追加背景色的设置，只要把标准的 HTML 颜色值写在后面就行了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;actor Bob #red
&amp;#39; The only defference between actor
&amp;#39; and participant is the drawing
participant Alice
participant &amp;#34;I have a really\nlong name&amp;#34; as L #99ff99

/&amp;#39; You can also declare:
    participant L as &amp;#34;I have a really\nlong name&amp;#34; #99ff99
&amp;#39;/

Alice -&amp;gt; Bob: Authentication Request
Bob -&amp;gt; Alice: Authentication Response
Bob -&amp;gt; L: Log transaction
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个参与者可以给自己发送消息，消息名如果需要有多行文本，可以用 \n 来表示换行。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Alice -&amp;gt; Alice: This is a signal to self.\nIt also demonstrates\nmultiline \ntext
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;消息与箭头&#34;&gt;消息与箭头&lt;/h2&gt;
&lt;p&gt;我们也改变箭头的样式（Change arrow style）
在用例图里可以通过以下方式来改变箭头的样式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 \或/ 来替换 &amp;lt;或&amp;gt; 可以让箭头只显示上半部分或下半部分。&lt;/li&gt;
&lt;li&gt;重复输入箭头或斜杠（&amp;raquo; //），用来绘制空心箭头。&lt;/li&gt;
&lt;li&gt;使用双横线 &amp;ndash; 替代 - 可以用来绘制点线。&lt;/li&gt;
&lt;li&gt;在箭头后面加个 o 可以在箭头前绘制一个圆圈。&lt;/li&gt;
&lt;li&gt;使用 &amp;lt;-&amp;gt; 可用来绘制双向箭头。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bob -&amp;gt; Alice
Bob -&amp;gt;&amp;gt; Alice
Bob -\ Alice
Bob \\- Alice
Bob //-- Alice

Bob -&amp;gt;o Alice
Bob o\\-- Alice

Bob &amp;lt;-&amp;gt; Alice
Bob &amp;lt;&amp;lt;-\\o Alice
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们要改变箭头的颜色，可以使用 HTML 颜色符号，参看下面的例子：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bob -[#red]&amp;gt; Alice : hello
Alice -[#0000FF]-&amp;gt;Bob : ok
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;消息序号（Message sequence numbering），关键词 autonumber 用来给自动的给消息添加上序号。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;autonumber
Bob -&amp;gt; Alice : Authentication Request
Bob &amp;lt;- Alice : Authentication Response
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果需要指定一个起始号码，可以直接在 autonumber 后面加个数字就行 了，如果要设置自增量，再在后面加一个数字就行了（autonumber start increment）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;autonumber
Bob -&amp;gt; Alice : Authentication Request
Bob &amp;lt;- Alice : Authentication Response

autonumber 15
Bob -&amp;gt; Alice : Another authentication Request
Bob &amp;lt;- Alice : Another authentication Response

autonumber 40 10
Bob -&amp;gt; Alice : Yet another authentication Request
Bob &amp;lt;- Alice : Yet another authentication Response
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可能经常会在消息的左边或右边使用注解，要添加注解，只要使用 note left 或 note right 关键词就可以了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Alice -&amp;gt; Bob : hello
note left: this is a first note

Bob -&amp;gt; Alice : ok
note right: this is anther note

Bob -&amp;gt; Bob : I am thinking
note left
    a note
    can also be defined
    on several lines
end note
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过使用关键词 note left of，note right of 或 note over，我们还可以把注解放置在与之相关的参与者的左边或右边，或下方。通过改变注解的背景色，我们还可以高亮一个注解文本块。如果要使用多行注解，可以使用关键词 end note 来表示注解的结束。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;participant Alice
participant Bob
note left of Alice #aqua
    This is displayed
    left of Alice.
end note

note right of Alice: This is displayed right of Alice.

note over Alice: This displayed over Alice.

note over Alice, Bob #FFAAAA: This is displayed\n over Bob and Alice.

note over Bob, Alice
    This is yet another
    example of
    a long note.
end note
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;其他修饰&#34;&gt;其他修饰&lt;/h2&gt;
&lt;p&gt;标题（Title）要给图形加一个标题可以用 title 关键词来设置。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;title Simple Comunication example

Alice -&amp;gt; Bob : Authentication Request
Bob --&amp;gt; Alice : Authentication Response
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 legend 和 end legend 关键词可以设置图形的图例。图例可以设 为左对齐、右对齐和居中对齐。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Alice -&amp;gt; Bob : Hello
legend right
Short
legend
endlegend
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;图形分割与分组&#34;&gt;图形分割与分组&lt;/h2&gt;
&lt;p&gt;关键词 newpage 是用来把图形分割成几个图片的。每一个被分割出来的 图片可以看作是一个新的页面（new page），如果要给新的页面添加一个标题，可以紧跟在关键词 newpage 之后来设置。使用这个方法可以方便的在 Word 里把比较长的图形分别打印到几个不同的页面上（有点分页符的概念）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Bliss -&amp;gt; Tia : I love you
Bliss -&amp;gt; Tia : I miss you

newpage

Bliss -&amp;gt; Tia : Let&amp;#39;s go home
Bliss -&amp;gt; Tia : Quick

newpage A title for the\nlast page

Tia -&amp;gt; Bliss : Give me money
Tia -&amp;gt; Bliss : No money No love
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;有时候可能需要对消息进行分组，那么可以使用下面的关键词来实现：alt/else、opt、loop、par、break、critical、group, 这个关键词后面的文字会作为组名显示在图形上。上面的关键词后可以添加一些文本用来显示在头部（注：group 除外，因 为它后面的文本用来显示在组名称的位置）。在组嵌套组的结构里可以用关 键词 end 来关闭组或者说是表示一个组符号的结束符（类似 if/endif）。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;Alice -&amp;gt; Bob: Authentication Request

alt successful case
Bob -&amp;gt; Alice: Authentication Accepted
else some kind of failure
Bob -&amp;gt; Alice: Atuhentication Failue
group My own label
    Alice -&amp;gt; Log : Log attack start
    loop 1000 times
    Alice -&amp;gt; Bob: DNS Attack
    end
    Alice -&amp;gt; Log : Loag alice end
end
else Another type of failue
Bob -&amp;gt; Alice: Please repeat
end
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;用例图&#34;&gt;用例图&lt;/h1&gt;
&lt;p&gt;用例可以用一对小括号括起来表示，也可以使用 usecase 关键词来定义；用例也可以通过使用 as 关键词来设置别名，在建立关系的时候可以使用别名。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;@startuml
(Usecase One)
(Usecase Two) as (UC2)
usecase UC3
usecase (Last\nusecase) as UC4
@enduml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义参与者时，可以把参与者的名称放在两个冒号的中间，也可以用 actor 关键词来定义参与者。同样参与着也可以使用别名。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;:Actor 1:
:Another\nactor: as Men2
actor Men3
actor :Last actor: as Men4
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;left to right direction
skinparam packageStyle rect
actor customer
actor clerk
rectangle checkout {
customer -- (checkout)
(checkout) .&amp;gt; (payment) : include
(help) .&amp;gt; (checkout) : extends
(checkout) -- clerk
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;活动图activity-diagram&#34;&gt;活动图（Activity Diagram）&lt;/h1&gt;
&lt;p&gt;在活动图中，你可以使用 &lt;code&gt;(*)&lt;/code&gt; 来表示活动开始点和结束点。使用 &amp;ndash;&amp;gt; 来表示箭头。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;(*) --&amp;gt; &amp;#34;First Activity&amp;#34;
&amp;#34;First Activity&amp;#34; --&amp;gt; (*)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;箭头与分支&#34;&gt;箭头与分支&lt;/h2&gt;
&lt;p&gt;缺省情况下，活动图的箭头是没有标注的。但我们可以通过方括号 [labels] 来设置标注，只要把它放在箭头定义的后面就可以了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;(*) --&amp;gt; &amp;#34;First Activity&amp;#34;
--&amp;gt;[You can put also labels] &amp;#34;Second Activity&amp;#34;
--&amp;gt;(*)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们可以使用 -&amp;gt; 创建一个水平箭头，也可以通过下面的方式来改变箭头 的方向：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-down-&amp;gt; 向下（这个是默认的，等同于 =–&amp;gt;=）&lt;/li&gt;
&lt;li&gt;-right-&amp;gt; 向右&lt;/li&gt;
&lt;li&gt;-left-&amp;gt; 向左&lt;/li&gt;
&lt;li&gt;-up-&amp;gt; 向上&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;(*) --&amp;gt; &amp;#34;1&amp;#34;
-right-&amp;gt; &amp;#34;2&amp;#34;
-down-&amp;gt; &amp;#34;3&amp;#34;
-left-&amp;gt; &amp;#34;4&amp;#34;
-le-&amp;gt; &amp;#34;5&amp;#34;
-up-&amp;gt; &amp;#34;6&amp;#34;
-l-&amp;gt; &amp;#34;7&amp;#34;
-do-&amp;gt; &amp;#34;8&amp;#34;
-d-&amp;gt; &amp;#34;9&amp;#34;
-&amp;gt; &amp;#34;10&amp;#34;
--&amp;gt; (*)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在描述箭头时，up|down|left|right 这几个单词的写法可以简化，用单词开头的一个或两个字母来替换就行了，比如 -down-&amp;gt; 也可以写成 -d-&amp;gt; 或者 -do-&amp;gt;。在 PlantUML 里，我们可以使用 if/then/else 关键词来定义分支。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;(*) --&amp;gt; &amp;#34;Initialisation&amp;#34;

if &amp;#34; Some Test&amp;#34; then
    --&amp;gt;[ture] &amp;#34;Some Activity&amp;#34;
    --&amp;gt; &amp;#34;Another Activity&amp;#34;
    -right-&amp;gt; (*)
else
    -&amp;gt;[false] &amp;#34;Something else&amp;#34;
    --&amp;gt;[Ending process] (*)
endif
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于多分支：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;(*) --&amp;gt; if &amp;#34;Some Test&amp;#34; then
--&amp;gt;[true] &amp;#34;1&amp;#34;

if &amp;#34;&amp;#34; then
    -&amp;gt; &amp;#34;3&amp;#34; as a3
else
    if &amp;#34;Other test&amp;#34; then
    -left-&amp;gt; &amp;#34;5&amp;#34;
    --&amp;gt; (*)
    else
    --&amp;gt; &amp;#34;6&amp;#34;
    --&amp;gt; (*)
    endif
endif

else
-&amp;gt;[false] &amp;#34;2&amp;#34;
--&amp;gt; (*)
endif

a3 --&amp;gt; if &amp;#34;last test&amp;#34; then
--&amp;gt; &amp;#34;7&amp;#34;
--&amp;gt; (*)
else
-&amp;gt; &amp;#34;8&amp;#34;
--&amp;gt; (*)
endif
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;活动描述&#34;&gt;活动描述&lt;/h2&gt;
&lt;p&gt;在定义活动的时候，有时候需要用多行文字来描述这个活动，这时我们可以 在描述里添加换行符 \n，也可以使用少量的 HTML 标签。以下是可以使用的 HTML 标签：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-t&#34; data-lang=&#34;t&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sr&#34;&gt;&amp;lt;b&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sr&#34;&gt;&amp;lt;i&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;nn&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;&amp;lt;size:nn&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;change&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;#AAAAAA&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;font&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;colorName&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sr&#34;&gt;&amp;lt;color:#AAAAAA&amp;gt;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;&amp;lt;color:colorName&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;sr&#34;&gt;&amp;lt;img:file.png&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;an&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;针对较长文本描述活动，可以起一个较短别名（如：&amp;ldquo;long text&amp;rdquo; as A1），在图形定义脚本中可以直接使用别名。PlantUML 可以通过在脚本里使用 note 来添加注释文本块。PlantUML 用上面列表里的命令来标注一个注释块的开始，然后用 end note 来标注注释块的结束。同时 note 命令也允许使用单行定义一个文本块，详见下面的例子。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;(*) --&amp;gt; &amp;#34;Some Activity&amp;#34; as s
note right: This activity has to be defined
s --&amp;gt; (*)
note left
This note is on
serveral lines
end note
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;分区partition&#34;&gt;分区（Partition）&lt;/h2&gt;
&lt;p&gt;通过分区关键词 partition 可以定义一个分区，并且可以使用 HTML 的 颜色码或颜色名来设置分区的背景色。在你申明一个活动时，PlantUML 会自动 的把这个活动对象放置到最后使用的分区中。当然，也可以使用 end partitio 关闭分区定义。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-puml&#34; data-lang=&#34;puml&#34;&gt;partition Conductor
(*) --&amp;gt; &amp;#34;Climbs on Platform&amp;#34;
--&amp;gt; === S1 ===
--&amp;gt; Bows
end partition

partition Aduience #LightSkyBlue
=== S1 === --&amp;gt; Applauds

partition Conductor
Bows --&amp;gt; === S2 ===
--&amp;gt; WavesArmes
Applauds --&amp;gt; === S2 ===
end partition

partition Orchestra #CCCCEE
WavesArmes --&amp;gt; Introduction
--&amp;gt; &amp;#34;Play music&amp;#34;
end partition
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>类关系</title>
      <link>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/%E7%B1%BB%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/%E7%B1%BB%E5%85%B3%E7%B3%BB/</guid>
      <description>&lt;h1 id=&#34;类关系&#34;&gt;类关系&lt;/h1&gt;
&lt;p&gt;下图是对于类关系的简要呈现：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://i.postimg.cc/QxNfdHRJ/image.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们首先通过某个简单的例子对类关系有基础认知：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_class_struct.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;车的类图结构为 &lt;code&gt;&amp;lt;&amp;lt;abstract&amp;gt;&amp;gt;&lt;/code&gt;，表示车是一个抽象类；&lt;/li&gt;
&lt;li&gt;它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；&lt;/li&gt;
&lt;li&gt;小汽车为与 SUV 之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；&lt;/li&gt;
&lt;li&gt;小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；&lt;/li&gt;
&lt;li&gt;学生与班级之间是聚合关系，使用带空心箭头的实线表示；&lt;/li&gt;
&lt;li&gt;学生与身份证之间为关联关系，使用一根实线表示；&lt;/li&gt;
&lt;li&gt;学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;泛化关系generalization&#34;&gt;泛化关系（Generalization）&lt;/h1&gt;
&lt;p&gt;类的继承结构表现在 UML 中为：泛化(generalize)与实现(realize)：继承关系为 is-a 的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：(..是..)。eg：自行车是车、猫是动物。泛化关系用一条带空心箭头的直接表示；如下图表示(A 继承自 B)；&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_generalization.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;eg：汽车在现实中有实现，可用汽车定义具体的对象；汽车与 SUV 之间为泛化关系；&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_generalize.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终代码中，泛化关系表现为继承非抽象类。&lt;/p&gt;
&lt;h1 id=&#34;实现关系realize&#34;&gt;实现关系（Realize）&lt;/h1&gt;
&lt;p&gt;实现关系用一条带空心箭头的虚线表示；eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象(”车”这个类在 C++中用抽象类表示，在 Java 中有接口这个概念，更容易理解)&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_realize.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终代码中，实现关系表现为继承抽象类。&lt;/p&gt;
&lt;h1 id=&#34;关联关系association&#34;&gt;关联关系（Association）&lt;/h1&gt;
&lt;p&gt;关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系，通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构；所以，关联关系是一种“强关联”的关系；比如，乘车人和车票之间就是一种关联关系；学生和学校就是一种关联关系；关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示 A 知道 B，但 B 不知道 A；&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_association.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在最终代码中，关联对象通常是以成员变量的形式实现的。&lt;/p&gt;
&lt;h1 id=&#34;聚合关系aggregation&#34;&gt;聚合关系（Aggregation）&lt;/h1&gt;
&lt;p&gt;聚合关系用一条带空心菱形箭头的直线表示，如下图表示 A 聚合到 B 上，或者说 B 由 A 组成；&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_aggregation.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成；与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如，部门撤销了，人员不会消失，他们依然存在；&lt;/p&gt;
&lt;h1 id=&#34;组合关系composition&#34;&gt;组合关系（Composition）&lt;/h1&gt;
&lt;p&gt;组合关系用一条带实心菱形箭头直线表示，如下图表示 A 组成 B，或者 B 由 A 组成；&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_composition.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与聚合关系一样，组合关系同样表示整体由部分构成的语义；比如公司由多个部门组成；但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如，公司不存在了，部门也将不存在了；&lt;/p&gt;
&lt;h1 id=&#34;依赖关系dependency&#34;&gt;依赖关系（Dependency）&lt;/h1&gt;
&lt;p&gt;依赖关系是用一套带箭头的虚线表示的；如下图表示 A 依赖于 B；他描述一个对象在运行期间会用到另一个对象的关系；&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://design-patterns.readthedocs.org/zh_CN/latest/_images/uml_dependency.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化；依赖关系也可能发生变化；显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生；注：在最终代码中，依赖关系体现为类构造方法及类方法的传入参数，箭头的指向为调用关系；依赖关系处理临时知道对方外，还是“使用”对方的方法和属性；&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>类图</title>
      <link>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/%E7%B1%BB%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/%E7%B1%BB%E5%9B%BE/</guid>
      <description>&lt;h1 id=&#34;类图&#34;&gt;类图&lt;/h1&gt;
&lt;p&gt;一般来说一个类会分为三个区域：最上面是类名称，中间部分包含类的属性，底部部分包含类的方法。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>时序图</title>
      <link>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/%E6%97%B6%E5%BA%8F%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/architecture-series/2.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/uml/%E6%97%B6%E5%BA%8F%E5%9B%BE/</guid>
      <description>&lt;h1 id=&#34;时序图&#34;&gt;时序图&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
