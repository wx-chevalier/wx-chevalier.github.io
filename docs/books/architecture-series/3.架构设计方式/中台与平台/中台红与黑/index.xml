<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>中台红与黑 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E4%B8%AD%E5%8F%B0%E4%B8%8E%E5%B9%B3%E5%8F%B0/%E4%B8%AD%E5%8F%B0%E7%BA%A2%E4%B8%8E%E9%BB%91/</link><atom:link href="https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E4%B8%AD%E5%8F%B0%E4%B8%8E%E5%B9%B3%E5%8F%B0/%E4%B8%AD%E5%8F%B0%E7%BA%A2%E4%B8%8E%E9%BB%91/index.xml" rel="self" type="application/rss+xml"/><description>中台红与黑</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>中台红与黑</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E4%B8%AD%E5%8F%B0%E4%B8%8E%E5%B9%B3%E5%8F%B0/%E4%B8%AD%E5%8F%B0%E7%BA%A2%E4%B8%8E%E9%BB%91/</link></image><item><title>中台的缺陷</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E4%B8%AD%E5%8F%B0%E4%B8%8E%E5%B9%B3%E5%8F%B0/%E4%B8%AD%E5%8F%B0%E7%BA%A2%E4%B8%8E%E9%BB%91/%E4%B8%AD%E5%8F%B0%E7%9A%84%E7%BC%BA%E9%99%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E4%B8%AD%E5%8F%B0%E4%B8%8E%E5%B9%B3%E5%8F%B0/%E4%B8%AD%E5%8F%B0%E7%BA%A2%E4%B8%8E%E9%BB%91/%E4%B8%AD%E5%8F%B0%E7%9A%84%E7%BC%BA%E9%99%B7/</guid><description>&lt;h1 id="中台的缺陷">中台的缺陷&lt;/h1>
&lt;p>建中台，组织架构一定要调整，但动组织架构就意味着在动“权力、金钱和人员”。不难看出，这个话题太敏感。&lt;/p>
&lt;h2 id="难以应对-cross-cutting-concern">难以应对 Cross cutting concern&lt;/h2>
&lt;p>根据中台进行系统拆分和部门调整之后，还是会遇到 cross cutting concern，什么是 cross cutting concern：&lt;/p>
&lt;blockquote>
&lt;p>The crosscutting concern is a concern which is applicable throughout the application and it affects the entire application. For example: logging, security and data transfer are the concerns which are needed in almost every module of an application, hence they are cross-cutting concerns.&lt;/p>
&lt;/blockquote>
&lt;p>有些需求难以避免地会影响整个流程中的所有系统：比如从技术范畴进行的一些改造(如为了完成 tracing，所有系统增加 trace id，并在 log 中默认携带)，比如从业务范畴进行的 i18n 改造。这些改造需求一般天生就是跨系统、跨组、跨部门的，事情一带上“跨”的字眼，就不好搞了。举一个典型的例子，某巨型互联网公司员工抱怨，在当前的微服务和中台架构前提下，做一个需求经常要改 20+ 个模块，苦不堪言，连上线顺序都不一定搞得清楚。当这 20+ 个模块又是跨部门的时候，就更难了。想要推动其它部门做一些短期看起来没啥收益的事，太难了。&lt;/p>
&lt;h2 id="稳定性和灵活性的矛盾">稳定性和灵活性的矛盾&lt;/h2>
&lt;p>对于一个系统来说，追求稳定性，那么必然会在修改和升级上较为消极；追求灵活性，那在功能迭代上一定会较为激进。这两方面的矛盾本来就是难以调和的。追求其中之一，在一定程度上就得放弃另一方面。有很多中台系统被剥离之后，因为用户众多，一旦出现技术上的问题，影响面巨大。&lt;/p>
&lt;p>中台的建设过程中节奏是最要命的。这其中有一个矛盾点，就是业务线在发展中是快速变化的，快速变化必然就会渴望得到各种资源支持。但是中台大部分是在缓慢建设与推进，两者之间会产生诉求与承接能力不匹配的问题。这块如何做好平衡，就涉及到先做什么、后做什么的问题。&lt;/p>
&lt;p>一个被完全中台化的业务导致集团内部过分分工，任何前台业务都被认为是中台能力的线性组合。举个例子，有的公司会有接近或超过千人的供应链中台，搜索广告中台，内容中台等等，而多数业务前台少则几个人，多不过几十人。前台团队任何一个人哪怕是全职和一个中台域对接，也无法理解该域的全貌或者是跟得上这个中台的演变。这意味着前台业务完全无法在这些中台相关的领域做创新。本来的创新业务变成无从创新，当初的动力变成了中台的最大的诅咒。有说法说，一个业务靠拖拉拽就能编排出来了，这不是创新是什么？ 事实证明这种创新完全无用。没有任何一个投资人会把自己的钱投到一个可以被大公司拖拉拽出来的商业模式的。真正的创新不是现有能力的线性组合。&lt;/p>
&lt;p>中台自身的场景往往缺乏前瞻设计，是对现有场景的抽象。而当某个创新在一个前线业务线孵化出来之后，中台团队会通过强制收编该能力来扩大自己的能力，同时强迫前台团队下线一个他们研发了很久的创新。这种行为往往造成精英人才的流失，使得本来就受到遏制的前台创新变得更为匮乏。&lt;/p>
&lt;h2 id="中台与前台的模糊业务边界距离">中台与前台的模糊业务边界、距离&lt;/h2>
&lt;p>在实际实践时，中台与 FT 的边界往往划得不清不楚。比如用户服务、用户权益、用户在各种子系统中的状态，这些内容可能并不是用户服务本身关心的内容。但往往需求也会提给用户服务，这时候用户服务就只是进行字段存储，而状态机变化则完全在外部。&lt;/p>
&lt;p>如果对系统内的个别数据不进行管理，那么有其它接入方接入时，就无法解释清楚字段的含义和使用场景。如果不接受这些不相干的数据接入，那么前台流程系统可能会在自己内部重新建立自己的数据系统，这部分系统又极有可能和中台有功能上的重叠。&lt;/p>
&lt;p>如果想要把这些数据接管过来，那么中台又需要梳理所有业务场景。或者说明需要把所有对数据进行修改的逻辑全部收拢到中台内部，这往往又会产生与中台与前台业务边界的冲突。&lt;/p>
&lt;p>中台经常以最全的最复杂的实现来应对任何一个简单的应用场景。大量成熟行业和强监管环境下的需求被带入到了创新业务中。在带来了大量的运营复杂性的同时增加了用户（买家，卖家，本地运营）的学习难度。这就是我们常讲的膨胀软件(Bloatware): 巨大，复杂，缓慢，低效。&lt;/p>
&lt;h1 id="kpi">KPI&lt;/h1>
&lt;p>“这个业务中台的考核目标是什么？”&lt;/p>
&lt;p>这块业务是做内容生态、创作者生态，但是当时只有创作、内容生产、内容审核、内容库等等从内容维度的奖励，没有内容的出口。面向 C 端的出口都在其他 BU，那这个中台业务如何进行考核？考核指标该如何制定？&lt;/p>
&lt;p>要从规模、品质、活跃、消费、互动、收益这六个维度定义十几个指标吗？
要从月 / 日均活跃账户数量、月 / 日均账户生产文章数量，再加上账号内容在端的月 / 日均播放量、阅读量等等维度进行考核吗？&lt;/p>
&lt;p>无论从哪个角度来看，都感觉不太合适。这些指标都受到端的影响，没有一个指标仅仅跟中台业务本身相关联。比如有的人提到既然是围绕创作者的生态，那就只看创作者、内容生产就好了，但实际上每一部分都有成本，如果生产出来的内容在不同端效果很差，到底是用户画像的问题，还是算法的问题，还是内容质量的问题？各个业务都要承担 KPI，自然就会打架。&lt;/p>
&lt;p>另外，以前各端的创作者奖励相当于成本，现在因为都归到中台来承担了，从财务角度只看到成本，那收益和利润该如何算呢？因为出口在各端，不同端的信息流中商业化收入会算到各端业务侧，在内容商业化探索上，也没有想象得那么容易。&lt;/p>
&lt;h1 id="阿里中台战略败点分析">阿里中台战略败点分析&lt;/h1>
&lt;h2 id="中台应当分门别类因地制宜全局中台并不适合大集团">中台应当分门别类，因地制宜，全局中台并不适合大集团&lt;/h2>
&lt;p>阿里集团业务繁杂度远高于超级细胞，中台范围应当细化，不适全局中台。治理小区和治理国家固然有一些类似的点和方法论，但是问题规模变大后，很多小规模下的方法也会变得不再适用，这是一个广泛被认可的观点。超级细胞的业务范围很专一，就是手游，所以它可以很容易就做成游戏工厂。放到阿里这样的大集团，业务种类繁杂，性质大相径庭，何必强融？像淘宝、一淘、天猫，这些其实换汤不换药，那么即便没有中台战略，架构师也知道很多业务逻辑可以复用，要说阿里架构师没有超级细胞的架构师懂？怎么可能。文献[7]中提到的第三阶段其实已经在考虑通过搭建业务平台来建设通用业务能力。而管理层想通过打造一个统一的万能中台来支撑所有集团业务前台（参考图 8），是未经深度思考的表现，从超级细胞小公司到阿里大集团，业务复杂度规模急剧增大，怎么能照搬模式呢。正如没有一个架构师可以在新问题上做出百分之一百与实际匹配的架构一样，也不会有一个统一的万能中台能在保证开闭原则的基础上适配所有业务。&lt;/p>
&lt;p>总结来说，阿里集团业务繁杂，不能把 BU 当做前台来构建大中台，每个 BU 就是一个独立的公司，有着自己独立的业务，根本“小”不了。而为各个 BU 做的那些通用的东西也是具有局限性的，只能帮助上层 BU 节省部分研发成本。过度贪求高度复用，会陷入“强求陷进”——把不该抽象的东西硬是抽象到了一起，结果就是系统的复杂度并没有降低，而是从多个地方搬到了一个地方。因此，管理层想要的“全集团大中台、小前台”，是一种理想主义，注定难以实现。&lt;/p>
&lt;h2 id="全局中台带来的新问题依赖单点和热点">全局中台带来的新问题——依赖单点和热点&lt;/h2>
&lt;p>按上文的理解，中台战略的实际意义更大的是在于提醒所有 BU，要尽量的增强能力复用，为 BU 业务创新营造一个高效低成本的环境。而如果我们把一家大集团的所有主要业务系统都放到一个事业部去管理，就会产生一个新的问题——单点甚至是热点现象。每个 BU 甚至业务线都各自有 KPI，如果某个 BU 发现中台无法支撑自己的场景（因为总会有没考虑的情况），那么势必要求中台团队做支撑，需求一多，还得排队，这和 BU 寻求自身的生存和发展势必是矛盾的。所以，复用能力涉及的业务范围越大，单点问题就越是严重，单点变热点的概率也就越大。即便中台事业部做的再大，哪怕为每个 BU 都搞一个小团队去支持，由于所背的 KPI 和汇报关系并不在所支撑的 BU，实践起来总是会存在信息断层。&lt;/p>
&lt;p>合理的复用是不会产生热点的，因为正确的抽象聚焦是的领域内的业务，设计思路会无差别的对待所有用户，要么一个用户都没法用，要么所有用户都可以用（无故障的情况下）。就好比数据库一样，任何一款数据库都不会关注数据的业务属性，电商的数据能存，金融的数据必然也能存。引入数据库就是一种数据存取能力复用——数据库属于基础设施，复用性是必要的。&lt;/p></description></item><item><title>中台的诉求</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E4%B8%AD%E5%8F%B0%E4%B8%8E%E5%B9%B3%E5%8F%B0/%E4%B8%AD%E5%8F%B0%E7%BA%A2%E4%B8%8E%E9%BB%91/%E4%B8%AD%E5%8F%B0%E7%9A%84%E8%AF%89%E6%B1%82/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E4%B8%AD%E5%8F%B0%E4%B8%8E%E5%B9%B3%E5%8F%B0/%E4%B8%AD%E5%8F%B0%E7%BA%A2%E4%B8%8E%E9%BB%91/%E4%B8%AD%E5%8F%B0%E7%9A%84%E8%AF%89%E6%B1%82/</guid><description>&lt;h1 id="业务线扩充">业务线扩充&lt;/h1>
&lt;p>软件架构从单体架构，到分布式 SOA，到微服务，到中台架构，这都是业务复杂化的结果，架构好比生产关系，业务是生产力，架构一定要随着业务发展而演化。&lt;/p>
&lt;p>0 到 1 阶段，只有一条业务线，比如出租车业务，直接根据需求实现即可。从 1 到 n 阶段，业务线逐渐增加，比如快车 / 顺风车。&lt;/p>
&lt;p>这时系统有两种做法，第一种是新业务线还是单独实现，多个业务线之家是相互独立的，系统结构整体上是”川”字型，如下图所示。但如果业务线类似，它们的核心逻辑（地图 / 调度 / 订单支付）也是类似的，子系统之间有大量的代码复制和多地维护，这是非常低效的。&lt;/p>
&lt;p>第二种做法是把核心逻辑单独抽取出来，做好通用化，共同服务于所有业务线的需求，此时对于各个业务线系统而言，包括自身的应用层和通用层两部分，定制的东西在应用层解决，共享的东西由通用层提供，再通过编排共享逻辑完成业务流程。系统结构整体上是”山”字型，这个通用层就是山字最底下一横，把各个业务线有机粘合在一起，共享业务逻辑和统一业务规则，实现最大程度的复用。&lt;/p>
&lt;p>当然搭建山字形是有难度的，什么时候转型为“山”字形？一方面和 n 值有关，比如 n&amp;gt;=3 时，应该要考虑转到山字形，另一个因素和各个业务线的相似度有关，相似度高更适合”山”字形，比如电商的 C2C 和 B2C 业务；差异比较大，适合”川”字形，比如电商业务和互联网金融业务，没必要强行扭在一起。&lt;/p>
&lt;p>从业务角度看，中台代表通用的基础业务，一个企业基础的业务能力和业务规则是相对稳固和清晰的，各个业务线可以认为具体业务场景，如小程序下单 / 三方外卖等相对复杂和多变，但可以通过组装各个基础业务，快速满足业务场景需求。对于新的业务来说，基础的东西已经差不多有了，只需要少量针对场景的定制开发。总的来说，中台收敛了业务场景，统一了业务规则，比如各个渠道的订单都归到中台的订单服务，遵循类似的订单状态流转和履单过程。&lt;/p>
&lt;p>基础业务是有限的，业务场景是无限的，特别是在移动互联网和全面数字化转型的大背景下，传统企业需要开拓大量新渠道，搭建中台，可以很好地通过有限的基础业务满足无限的业务场景。&lt;/p>
&lt;p>从系统角度看，中台相当于商业操作系统，提供标准接口给上层应用，对于传统企业来说，中台之下还有明确的后台，中台很好地把前端应用 (面向互联网) 和企业遗留系统 (面向内部管理) 衔接起来，屏蔽底层系统的复杂性和各种适配工作。&lt;/p>
&lt;p>从数据角度看，中台收敛业务场景的同时，也收敛了数据 比如自有小程序的订单和外卖订单统一到一个订单库，使用同一套数据模型（具体用到的字段可能略有差异），这为后续的数据中台搭建打下良好基础。&lt;/p>
&lt;h1 id="烟囱式平台">烟囱式平台&lt;/h1>
&lt;p>平台化解决了技术平台的问题，但是每个单元业务的执行都要跨多个领域来完成，复杂度会随之升级。比如说淘宝的宝贝，商品发布规则、交易规则、营销规则散落在各个系统中，进行一个动作时，无法做到靠一个人就能说清楚全局。结果就是一个需求要评估一个月，开发需要几天，测试又需要几天，这已经不是一个流程能够解决的，是一个比较复杂的生态协作问题。&lt;/p>
&lt;p>“大中台”的概念就是从较为复杂的协作生态上来纵向地从服务链路来做资源整合，技术中台注重能力沉淀与整合，业务中台注重链路、效率、成本、流程优化。业务中台在我的眼里变成了规则引擎执行者与定制化服务输出方，规则的输出通过对数据的控制来进行。&lt;/p>
&lt;p>大企业的很多业务在最初都会经历疯狂的扩张过程，在这个过程中由于各个 BU 自我闭环，导致大厂内部存在着很多重复造轮子的工作。比如同样在内容领域，独立 BU A 做了一款 App，独立 BU B 做了一款 App，都有很多详细功能。但是这些功能在内部的必要性又没有那么强，继续做存在着人力成本的浪费。这个时候我们会通过一个抽象出来的公共业务模块去单独处理。&lt;/p>
&lt;p>虽然这个集团是某体系当中的巨无霸，但是在内容生态这块其实还是较为薄弱的，需要一个业务中台来支撑内容生态。当时的情况是：好几个事业群都有类似的生态业务在运作。比如南方某事业群有自己的图文内容生态，北方某事业群有自己的视频内容生态，各自的生态又分别为各自客户端业务提供内容生产审核，帐户体系、内容评定标准、奖励机制各不相同。具体到数据体系上，其中两个子集团或成为事业群的业务方都有各自的数据体系，造成的问题是：&lt;/p>
&lt;ul>
&lt;li>账号没有打通，账号评估与分级体系不统一；&lt;/li>
&lt;li>内容评定标准不统一、品类不统一、标签体系不统一、奖励机制各不相同；&lt;/li>
&lt;li>审核问题，但凡做内容必须有审核，不同子公司在审核的投入上都很巨大；&lt;/li>
&lt;li>采购问题，跟 BD 采购流程不同，或签约多个主体；&lt;/li>
&lt;li>内容生态所涉及到的帐户数据、图文、视频、粉丝互动、内容库、消费数据、内容审核等较容易整合并服务化。&lt;/li>
&lt;/ul>
&lt;p>从集团角度来看，这就形成了烟囱式的建设。每一个烟囱的能力直接决定了业务的发展速度与业务创新的成本，但实际上业务的快速更新与创新更需要像乐高一样的体系去快速搭建。结合内容生态这个业务来看，根基与出发点是偏业务型的中台建设。实际上我们可以通过一点接入、多点分发的方式来支撑各端业务，做好内容生态供给。在建设过程中对信息、标准、帐户、数据做一系列打通，将业务流、内容流、分发流、数据流、商业流这些相近的单元进行业务中台化。&lt;/p></description></item></channel></rss>