<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架构域与推导 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E6%9E%B6%E6%9E%84%E5%9F%9F%E4%B8%8E%E6%8E%A8%E5%AF%BC/</link><atom:link href="https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E6%9E%B6%E6%9E%84%E5%9F%9F%E4%B8%8E%E6%8E%A8%E5%AF%BC/index.xml" rel="self" type="application/rss+xml"/><description>架构域与推导</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>架构域与推导</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E6%9E%B6%E6%9E%84%E5%9F%9F%E4%B8%8E%E6%8E%A8%E5%AF%BC/</link></image><item><title>架构域划分</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E6%9E%B6%E6%9E%84%E5%9F%9F%E4%B8%8E%E6%8E%A8%E5%AF%BC/%E6%9E%B6%E6%9E%84%E5%9F%9F%E5%88%92%E5%88%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E6%9E%B6%E6%9E%84%E5%9F%9F%E4%B8%8E%E6%8E%A8%E5%AF%BC/%E6%9E%B6%E6%9E%84%E5%9F%9F%E5%88%92%E5%88%86/</guid><description>&lt;h1 id="业务架构解决方案架构">业务架构/解决方案架构&lt;/h1>
&lt;p>核心是解决业务带来的系统复杂性，了解客户/业务方的痛点，项目定义，现有环境；梳理高阶需求和非功能性需求，进行问题域划分与领域建模等工作；沟通，方案建议，多次迭代，交付总体架构。&lt;/p>
&lt;p>业务架构就是在业务需求初期，将模糊的需求描述转变成清晰的问题域，梳理出清晰的业务流程，为产品架构提供输入。问题域是指自己的产品能够解决的所有问题的空间集合。从核心需求出发，将所有当前需要解决、未来可能要解决的问题放入产品框架的范围。能够帮助我们的产品拥有更高的可拓展性，在后续具备迭代和优化的空间。在经过问题域的罗列后，我们应该能够得到一个模糊的产品方向和功能范围。把这些问题域的答案抽象总结成一个确定的产品需求。根据核心需求和问题域的答案，梳理出业务流程。&lt;/p>
&lt;p>业务架构包括业务规划、业务模块、业务流程，对整个系统的业务进行拆分，对领域模型进行设计，把现实的业务转化成抽象对象。没有最优的架构，只有最合适的架构，一切系统设计原则都要以解决业务问题为最终目标，脱离实际业务的技术情怀架构往往是空中楼阁。业务架构必须与其面向的实际应用场景相匹配，由于每个产品或项目的业务场景均有所不同，所以每次做新的软件开发前，必须设计软件架构。试图不经分析直接套用先前的架构方案，十有八九会让当前的系统在某个点上报出大问题导致推翻重建，更不要说直接拿别人的现成架构方案了。&lt;/p>
&lt;p>例如，A 业务中有套 A 系统，恰巧 B 业务需要解决类似 A 业务的场景。此时很多情况，B 业务的人员会考虑把 A 系统直接拿过来，以为做一些简单的修改，就能在 B 业务中落地。结果在系统落地的过程中，很多功能模块不能直接使用，都要重新按照业务进行修改。最终的结果是，A 系统经过不断的重写修改变成了 B 系统。上述的案例正是由于业务架构没有做到位，没有做好软件架构的分析和设计，所以我们很难看出两个系统有多少差别，也无法确定用一个业务系统去覆盖另一个业务系统的可行性有多大。相反，对 A 和 B 业务领域进行业务架构梳理，我们就能清楚发现两者的一致与区别，就能有效的评估系统覆盖的可行性和合理性。&lt;/p>
&lt;p>经过业务架构阶段之后，需要输出的产物包括：企业战略方向图、问题域列表、业务流程图。&lt;/p>
&lt;h1 id="应用架构">应用架构&lt;/h1>
&lt;p>根据业务场景的需要，设计应用的层次结构，制定应用规范、定义接口和数据交互协议等。并尽量将应用的复杂度控制在一个可以接受的水平，从而在快速的支撑业务发展的同时，在保证系统的可用性和可维护性的同时，确保应用满足非功能属性要求（性能、安全、稳定性等）。应用架构自顶向下又会分别着眼于产品的功能模块划分、应用系统的划分以及不同功能模块、子系统所需要的技术选择。&lt;/p>
&lt;p>功能模块是用户能够完成一个操作的最小粒度的完整功能。比如一个展示可购买商品的列表页、一个修改用户密码的功能。在功能模块设计过程中，需要确保用户能通过一个功能模块完整的完成一项工作，而不是半个工作。从产品的角度来看，应用架构就是将这些不同用途的功能模块围绕特定的业务目标进行分类整合。功能模块是根据其相互之间的关系来组织的。一个产品中不同的功能模块之间的关系分直接关系和间接关系。只有直接关系的功能模块才会被组织到一起，形成一个子系统。那些存在间接关系的模块，会在不同的层级通过直接关系的模块产生联系。当具有直接关系的功能模块组合成一个子系统后，解决相同问题域的子系统就形成一个功能层级。功能层级按照接近用户实操的距离程度进行从上到下，或者从左至右的划分，这就形成了应用架构的功能分层。&lt;/p>
&lt;p>应用系统的划分着眼于实现我们的功能模块应该分哪些应用系统，应用系统间是如何集成的。在业务架构的基础上，按照解决的业务问题域，划分出不同的功能模块，再根据功能模块间的关系，组合成子系统。应用架构在产品架构的基础上考虑两个事情：第一、考虑的是子系统间的关系。第二、考虑将可复用的组件或模块进行下沉，沉淀到平台层，为业务组件提供统一的支撑。&lt;/p>
&lt;p>应用的技术架构是应接应用架构的技术需求，并根据识别的技术需求，进行技术选型，把各个关键技术和技术之间的关系描述清楚。技术架构解决的问题包括：如何进行纯技术层面的分层、开发框架的选择、开发语言的选择、涉及非功能性需求的技术选择。由于应用架构体系是分层的，那么对于的技术架构体系自然也是分层的。大的分层有微服务架构分层模型，小的分层则是单个应用的技术分层框架。大的技术体系考虑清楚后，剩下的问题就是根据实际业务场景来选择具体的技术点。各个技术点的分析、方案选择，最终形成关键技术清单，关键技术清单考虑应用架构本身的分层逻辑，最终形成一个完成的技术架构图。&lt;/p>
&lt;h1 id="数据架构">数据架构&lt;/h1>
&lt;p>专注于构建数据中台，统一数据定义规范，标准化数据表达，形成有效易维护的数据资产。打造统一的大数据处理平台，包括数据可视化运营平台、数据共享平台、数据权限管理平台等。&lt;/p>
&lt;p>企业架构由业务架构驱动，从业务架构分析业务流程、定义数据架构，流程和数据结合定义产品架构。这中间，数据架构起着至关重要的作用。企业 IT 系统的价值并不在于选取的技术有多先进，使用的硬件有多强大。而是企业业务数据的处理和存储。一家公司最宝贵的资产无疑就是数据。毫无疑问，在当今大数据的时代背景下，缺少数据资产的建设和使用，就失去与同行业争夺竞争的机会。&lt;/p>
&lt;p>数据架构主要解决三个问题：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>系统需要什么样的数据：数据是对客观事物的真实表现，企业业务过程中的所有对象的状况都可以用数据记录下来。业务运营过程中有两条重要的线索：流程和数据。业务流程离不开数据流转，业务运营状况通过数据反映。基于业务架构的端到端的流程建模过程中，会衍生出对应的业务数据对象，需要与数据架构模型对接。流程模型和数据模型对接后落实到应用层面，就形成了产品架构。数据架构中的数据包含静态数据和动态数据。相对静态部分如元数据、业务对象数据模型、主数据、共享数据。相对动态部分如数据流转、ETL、数据全生命周期管控治理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何存储这些数据：数据架构是为了建立一个共享、通用、一致的数据基础平台，解决企业信息孤岛。如何存储业务数据，需要结合自身需求，采取合适的数据分布策略。通常，数据存储的分布策略有两种：一种是集中式存储，一种是分布式存储。集中式存储就是讲数据集中存放于总部数据中心，所有的下属机构或子公司不放置和维护数据，都想总部数据中心进行访问。分布式存储就是数据分布存放于总部、分支机构或者子公司，每个分布节点需要维护和管理自己的数据。分布式的数据存储架构中，还需要考虑每个分布式节点的数据与总部节点数据进行同步、备份，做到数据资产的安全、可靠。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何进行数据架构设计：数据源自于企业的业务流程，从业务流程中我们可以找出领域对象，基于领域对象进行分析，就能得到对象的属性。根据业务关系进而抽取领取对象之间的关系。因此，领域建模是一种对数据架构很有帮助的建模思想。通过领域建模，我们不仅能清晰的反映企业的业务域，还能清晰的描绘出一幅企业的数据模型。数据模型最常用的视图就是 ER 图，它主要描述企业数据实体、属性和关系。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="中间件架构">中间件架构&lt;/h1>
&lt;p>专注于中间件系统的构建，需要解决服务器负载，分布式服务的注册和发现，消息系统，缓存系统，分布式数据库等问题，同时架构师要在 CAP 之间进行权衡。&lt;/p>
&lt;h1 id="运维架构">运维架构&lt;/h1>
&lt;p>负责运维系统的规划、选型、部署上线，建立规范化的运维体系。&lt;/p>
&lt;h1 id="物理架构">物理架构&lt;/h1>
&lt;p>物理架构关注软件元件是如何放到硬件上的，专注于基础设施，某种软硬件体系，甚至云平台，包括机房搭建、网络拓扑结构，网络分流器、代理服务器、Web 服务器、应用服务器、报表服务器、整合服务器、存储服务器和主机等。&lt;/p></description></item><item><title>业务模型推导</title><link>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E6%9E%B6%E6%9E%84%E5%9F%9F%E4%B8%8E%E6%8E%A8%E5%AF%BC/%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B%E6%8E%A8%E5%AF%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-series/3.%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%96%B9%E5%BC%8F/%E6%9E%B6%E6%9E%84%E5%9F%9F%E4%B8%8E%E6%8E%A8%E5%AF%BC/%E4%B8%9A%E5%8A%A1%E6%A8%A1%E5%9E%8B%E6%8E%A8%E5%AF%BC/</guid><description>&lt;h1 id="自顶向下构建架构">自顶向下构建架构&lt;/h1>
&lt;p>在架构设计中，往往提出问题难于解决问题，Brooks 的《The design of design》中介绍到：The hardest part of design is deciding what to design. 团队中常见典型矛盾的就是产品团队和研发团队的矛盾。作为研发团队，我们常吐槽产品团队的需求不合理的时候，不懂技术等。其实我们可以试想把自己的工作在往前移一下，不仅仅是去设计架构实现产品的需求，而是去实现客户的需求，甚至发现潜在的需求。这时我们就变成了在设计上提出问题的人，你会发现其实提出问题，很多时候需要同样深入的思考。设计一个好的问题，甚至比解决问题更难。&lt;/p>
&lt;p>首先定义问题，而定义问题中最重要的是定义客户的问题。定义问题，特别主要识别出关键问题，关键问题是对客户有体感，能够解决客户痛点，通过一定的数据化来衡量识别出来，关键问题要优先给出解决方案。问题定义务必加入时间维度，把手段/方案和问题定义区分开来；需要对问题进行升层思考后再进行升维思考，从而真正抓到问题的本质，理清和挖掘清楚需求；要善用第一性原理思维进行分析思考问题。&lt;/p>
&lt;p>问题解决原则：先解决客户的问题（使命），然后才能解决自己的问题（愿景）；务必记住不是强调我们怎么样，而是我们能为客户具体解决什么问题，然后才是我们变成什么，从而怎么样去更好得服务客户。我们应当善用多种方法对客户问题进行分析，转换成我们产品或者平台需要提供的能力，比如仓储系统 WMS 可以提供哪些商业能力。&lt;/p>
&lt;p>对我们的现有的流程和能力模型进行梳理，找到需要提升的地方，升层思考和升维思考真正明确提升部分。定义指标，并能够对指标进行拆解，然后进行数学建模，将抽象出来的能力诉求转换成技术挑战，此步对于技术人员来说相当于找到了靶子，可以进行方案的设计了，需要结合自底向上的架构推导方式。&lt;/p>
&lt;p>创新可以是业务创新，也可以是产品创新，也可以是技术创新，也可以是运营创新，升层思考、升维思考，使用第一性原理思维、生物学（进化论&amp;ndash;进化=变异+选择+隔离、熵增定律、分形和涌现）思维等哲科思维可以帮助我们在业务，产品，技术上发现不同的创新可能。可以说哲科思维是架构师的灵魂思维。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/Y9wDL8sq/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="自底向上推导应用架构">自底向上推导应用架构&lt;/h1>
&lt;p>先根据业务流程，分解出系统时序图，根据时序图开始对模块进行归纳，从而得到粒度更大的模块，模块的组合／聚合构建整个系统架构。基本上应用逻辑架构的推导有 4 个子路径，他们分别是：&lt;/p>
&lt;ul>
&lt;li>业务概念架构：业务概念架构来自于业务概念模型和业务流程。&lt;/li>
&lt;li>系统模型：来自于业务概念模型。&lt;/li>
&lt;li>系统流程：来自业务流程。&lt;/li>
&lt;li>非功能性的系统支撑：来自对性能，稳定性，成本的需要。&lt;/li>
&lt;/ul>
&lt;p>效率，稳定性，性能是最影响逻辑架构落地成物理架构的三大主要因素，所以从逻辑架构到物理架构，一定需要先对效率、稳定性和性能做出明确的量化要求。如果是产品方案已经明确，程序员需要理解这个业务需求，并根据产品方案推导出架构，此时一般使用自底向上的方法，而领域建模就是这种自底向上的分析方法。&lt;/p>
&lt;p>自底向上重度依赖于演绎和归纳，演绎，演绎就是逻辑推导，越是底层的，越需要演绎：&lt;/p>
&lt;ul>
&lt;li>从用例到业务模型就属于演绎&lt;/li>
&lt;li>从业务模型到系统模型也属于演绎&lt;/li>
&lt;li>根据目前的问题，推导出要实施某种稳定性措施，这是也是演绎&lt;/li>
&lt;/ul>
&lt;p>归纳，这里的归纳是根据事物的某个维度来进行归类，越是高层的，越需要归纳：&lt;/p>
&lt;ul>
&lt;li>问题空间模块划分属于归纳&lt;/li>
&lt;li>逻辑架构中有部分也属于归纳&lt;/li>
&lt;li>根据一堆稳定性问题，归纳出，事前，事中，事后都需要做对应的操作，是就是根据时间维度来进行归纳。&lt;/li>
&lt;/ul></description></item></channel></rss>