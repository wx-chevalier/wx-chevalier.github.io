<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>999.参考资料 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link><atom:link href="https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml"/><description>999.参考资料</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>999.参考资料</title><link>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link></image><item><title>2018-什么是架构模式和架构风格</title><link>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018-%E4%BB%80%E4%B9%88%E6%98%AF%E6%9E%B6%E6%9E%84%E6%A8%A1%E5%BC%8F%E5%92%8C%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC/</guid><description>&lt;h1 id="什么是架构模式和架构风格">什么是架构模式和架构风格&lt;/h1>
&lt;p>如果你搜索「架构模式和架构风格的区别」，你会发现答案千差万别：&lt;/p>
&lt;ul>
&lt;li>有的观点认为架构模式和架构风格是一个东西，只是叫法不同&lt;/li>
&lt;li>有的观点认为架构风格是架构模式的外在表现&lt;/li>
&lt;li>有的观点认为架构模式和架构风格是不同的两个概念（具体有什么不同，又有不同的观点）
&lt;ul>
&lt;li>有的观点认为架构模式解决问题，架构风格不解决问题(例如：建房子有建房子的模式，而无论是建成哥特风还是现代风，都还是房子)&lt;/li>
&lt;li>有的观点认为架构风格是高层级的架构模式&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>我个人的观点是：&lt;strong>架构模式是特定问题域下，架构风格的具体应用&lt;/strong>！&lt;/p>
&lt;h1 id="什么是架构模式">什么是架构模式？&lt;/h1>
&lt;p>在说架构模式之前，我们先来看看我们常挂在嘴边的设计模式是怎么定义的！&lt;/p>
&lt;p>GOF 在《Design Patterns》这本书的「What is a Design Pattern?」小节，对设计模式下了一个明确的定义：&lt;/p>
&lt;blockquote>
&lt;p>The design patterns in this book are descriptions of communicating objects and classes that are customized to solve a general design problem in a particular context.
设计模式描述了一组类和对象的关系，用以解决特定上下文内的某个常见的设计问题！&lt;/p>
&lt;/blockquote>
&lt;p>那我们可以这么定义架构模式：&lt;strong>架构模式描述了一组组件之间的关系，用以解决特定上下文内的某个常见的架构问题&lt;/strong>！&lt;/p>
&lt;p>Wiki 上也给架构模式做了类似的定义：&lt;/p>
&lt;blockquote>
&lt;p>An architectural pattern is a general, reusable solution to a commonly occurring problem in software architecture within a given context
架构模式是一个通用的、可重用的解决方案，用以解决特定上下文内的某个常见的架构问题！&lt;/p>
&lt;/blockquote>
&lt;h1 id="什么是架构风格">什么是架构风格?&lt;/h1>
&lt;p>Roy Thomas Fielding 博士，在他的 REST 论文中，对架构风格做出了定义：&lt;/p>
&lt;blockquote>
&lt;p>An architectural style is a coordinated set of architectural constraints that restricts the roles/features of architectural elements and the allowed relationships among those elements within any architecture that conforms to that style.
一种架构风格是一组协作的架构约束，这些约束限制了架构元素的角色和功能，以及在任何一个遵循该风格的架构中允许存在的元素之间的关系。&lt;/p>
&lt;/blockquote>
&lt;p>Martin Flower 在微服务文章中的说明，也间接支持了此定义。文中首先明确「微服务」是一种架构风格，然后给出了微服务所具有的特征（就是约束），具有这些约束的系统就可以说是使用了微服务架构风格！&lt;/p>
&lt;p>微软的 Azure 文档也给出了类似的定义：&lt;strong>架构风格即约束&lt;/strong>！&lt;/p>
&lt;h1 id="架构模式和架构风格的区别">架构模式和架构风格的区别&lt;/h1>
&lt;p>上面我们分别给「架构模式」和「架构风格」下了定义！那么「架构模式」和「架构风格」到底有什么区别呢？&lt;/p>
&lt;p>我们来看架构模式的定义，可以抽出几个关键词：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>模式&lt;/strong>：描述的是一种关系（类与类的关系、组件与组件的关系）！并且这种关系是可复用的！&lt;/li>
&lt;li>&lt;strong>特定上下文&lt;/strong>：说明这种关系的适用场景是有限制的，只能在特定场景下才能适用！&lt;/li>
&lt;li>&lt;strong>常见问题&lt;/strong>：说明这种关系是解决某个问题或某类问题的解决方案，是有针对性的！&lt;/li>
&lt;/ul>
&lt;p>我们再看架构风格的定义，它仅仅就是&lt;strong>约束&lt;/strong>！约束了组件之间的关系！&lt;/p>
&lt;p>所以「架构模式」和「架构风格」的区别就在这里：&lt;/p>
&lt;ul>
&lt;li>架构模式是&lt;strong>针对某个特定上下文的某类问题&lt;/strong>的解决方案&lt;/li>
&lt;li>架构风格是一个解决方案&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">架构模式&lt;/th>
&lt;th style="text-align:left">架构风格&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Three-Tier &lt;br />Multilayered architecture &lt;br />Model-View-Controller(MVC) &lt;br />Domain Driven Design &lt;br />Micro-Kernel &lt;br />Blackboard Pattern &lt;br />Sensor-Controller-Actuator &lt;br />Presentation–Abstraction–Control&lt;/td>
&lt;td style="text-align:left">CQRS &lt;br />Component-based &lt;br />Monolithic application&lt;br />Layered (or multilayered architecture) &lt;br />Pipes and Filters &lt;br />Database-Centric&lt;br />Blackboard &lt;br />Rule-based &lt;br />Event-driven aka implicit invocation &lt;br />Publish-subscribe &lt;br />Asynchronous Messaging &lt;br />Plug-Ins &lt;br />Microkernel &lt;br />Reflection &lt;br />Domain Specific Languages(DSL) &lt;br />Client-Server (2-tier, 3-tier, n-tier exhibit this style) &lt;br />Shared Nothing Architecture &lt;br />Space-based Architecture &lt;br />Object Request Broker &lt;br />Peer-to-Peer &lt;br />Representational State Transfer (REST) &lt;br />Service-Oriented &lt;br />Cloud Computing Patterns &lt;br />MicroServices&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>你会发现，架构风格中有「Multilayered」这个架构风格，架构模式里也有「Multilayered」架构模式！好像分层架构既是架构风格，也是架构模式！实际上架构模式中的「分层架构」是架构风格中的「分层架构」的实际应用。&lt;/p>
&lt;p>更具有说服力的是 CS 架构风格，可以看到此架构风格后面有个阐述「2-tier, 3-tier, n-tier exhibit this style」，意思是两层架构、三层架构、n 层架构都是 CS 架构风格的一种表现形式。而可以看到，三层架构是一个架构模式！&lt;/p>
&lt;blockquote>
&lt;p>你有没有一个疑问？两层架构、三层架构、N 层架构为什么不是分层架构风格的表现形式？而是 CS 架构风格的一种表现形式？
这个问题在后面的 CS 架构和分层架构中会具体阐述。&lt;/p>
&lt;/blockquote>
&lt;p>再具体一点，我们看看 CS 架构的约束：&lt;/p>
&lt;ul>
&lt;li>Server 组件提供了一组服务,并监听对这些服务的请求。&lt;/li>
&lt;li>Client 组件通过一个连接器将请求发送到 Server,希望执行一个服务。&lt;/li>
&lt;li>Server 可以拒绝这个请求,也可以执行这个请求并将响应发送回 Client&lt;/li>
&lt;/ul>
&lt;p>可以看到，这里只是约束了系统分为 Client 和 Server，以及 Server 和 Client 之间的行为。&lt;/p>
&lt;p>再来看三层架构模式，三层架构一般分为：&lt;/p>
&lt;ul>
&lt;li>Presentation tier 展现层&lt;/li>
&lt;li>Logic tier 业务逻辑层&lt;/li>
&lt;li>Data access tier 数据访问层&lt;/li>
&lt;/ul>
&lt;p>可以看到，三层架构模式比 CS 架构风格更具体，描述了每一层的作用。当系统有如下需求时，就可以考虑三层架构：&lt;/p>
&lt;ul>
&lt;li>需要提供用户界面（不论是本地应用这样的富客户端、还是浏览器，亦或手机 APP）&lt;/li>
&lt;li>需要访问持久层数据&lt;/li>
&lt;li>解耦（视图，业务、数据可独立进化）&lt;/li>
&lt;/ul>
&lt;h1 id="总结">总结&lt;/h1>
&lt;p>用 Renan Johannsen de Paula Venilton FalvoJr 在《Architectural Patterns and Styles》中对架构模式和架构风格的区别来总结一下：&lt;/p>
&lt;ul>
&lt;li>Architecture Pattern: { problem, context } → architecture approach;&lt;/li>
&lt;li>Architecture Style: architecture approach.&lt;/li>
&lt;/ul>
&lt;p>实际工作中，我们一般会说「架构」，而没有具体到是「架构风格」还是「架构模式」。这么做其实有几点好处：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>理解的偏差，不影响讨论和使用&lt;/strong>：虽然可能每个人对「架构风格」和「架构模式」的理解是有偏差的，但是并不会影响系统的讨论。反而，如果具体到风格还是模式，那可能就变成对「风格」还是「模式」的讨论，而不是对业务的讨论&lt;/li>
&lt;li>&lt;strong>有些情况下，风格和模式的差异并不大&lt;/strong>：「架构风格」和「架构模式」的主要区别就是是否是针对某个「问题域」和「上下文」的！当一个「架构风格」应用到了某个「问题域」和「上下文」，且这个「问题域」和「上下文」也比较常见，那么这个「架构风格」在这个「问题域」和「上下文」的应用就是「架构模式」！&lt;/li>
&lt;/ul></description></item></channel></rss>