<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>演化与变迁 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/web-api/%E6%BC%94%E5%8C%96%E4%B8%8E%E5%8F%98%E8%BF%81/</link><atom:link href="https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/web-api/%E6%BC%94%E5%8C%96%E4%B8%8E%E5%8F%98%E8%BF%81/index.xml" rel="self" type="application/rss+xml"/><description>演化与变迁</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>演化与变迁</title><link>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/web-api/%E6%BC%94%E5%8C%96%E4%B8%8E%E5%8F%98%E8%BF%81/</link></image><item><title>API 的过去，现在与未来</title><link>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/web-api/%E6%BC%94%E5%8C%96%E4%B8%8E%E5%8F%98%E8%BF%81/api-%E7%9A%84%E8%BF%87%E5%8E%BB%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/web-api/%E6%BC%94%E5%8C%96%E4%B8%8E%E5%8F%98%E8%BF%81/api-%E7%9A%84%E8%BF%87%E5%8E%BB%E7%8E%B0%E5%9C%A8%E4%B8%8E%E6%9C%AA%E6%9D%A5/</guid><description>&lt;h1 id="api-的过去现在与未来">API 的过去，现在与未来&lt;/h1>
&lt;p>随着微服务架构的流行，貌似我们已经聊了很多关于现在的 API 的设计与规范，不过能够畅想的未来的 API 又是怎样的模式呢？首先，我们需要回顾下 API 的过去与现在。&lt;/p>
&lt;p>在过去的几十年里，Web 开发经历了剧烈的变革 The best practice for web development has changed significantly over the last few years. While just a few years ago most websites used to be rendered on the server and have only relatively little client-side logic, the opposite is true of new apps today. Single-page applications and clients that implement complex logic are the new reality. In a Ruby app, your model, your view, and your controller all live on the server. Getting data from your models to your view is not an issue, because almost all the data is right there on the server, where the page is rendered. In modern javascript apps, that is no longer the case: Your controllers and your views now live mostly on the client, but most of the data is still on the server. With all but the most custom RESTful APIs, fetching data from the server is both costly and complicated: the latency is high, and chances are you will either fetch more data than you need or make more roundtrips you would like — or both! That’s where GraphQL and Falcor come to the rescue.&lt;/p>
&lt;h1 id="过去">过去&lt;/h1>
&lt;h2 id="土耳其机器人the-turk">土耳其机器人：The Turk&lt;/h2>
&lt;p>我们可以追溯到 1770 年匈牙利帝国时代的哈普斯堡王朝，匈牙利作家兼发明家沃尔夫冈 · 冯 · 肯佩伦(Wolfgang von Kempelen )建造了土耳其机器人(The Turk )，它由一个枫木箱子跟箱子后面伸出来的人形傀儡组成，傀儡穿着宽大的外衣，并戴着穆斯林的头巾。这个机器人可以下国际象棋，发明家打算让他的机器人与当时最优秀的国际象棋选手一较高下。在机器人完成之后，Kempelen 带着他的机器人来到了玛丽亚 · 特蕾西亚的宫殿，一时之间这个能自动下国际象棋的机器人风靡欧洲上流社会，包括波拿马拿破仑与本杰明富兰克林等在内的人士都见证了机器人战胜知名对手的对弈。不过当时可没有什么人工智能与机器学习技术，而是有一个实实在在的象棋大师被隐藏在盒子中，这个机器人不过是 Kempelen 的一个小把戏而已。就像魔术师一样欺骗那些观众，让他们误以为是一台真正的机器在下棋，最终在 1850 年这个把戏被揭穿。&lt;/p>
&lt;p>不过这个小把戏也为我们留下了一句俗语，从此之后人们会使用&lt;code>Mechanical Turk&lt;/code>来指代那些貌似完全自动化运行，不过还是逃不开人类介入的系统。&lt;/p>
&lt;h2 id="aliens">Aliens&lt;/h2>
&lt;p>时间又来到了 1963 年，美国心理学家与计算机科学家 J.C.R Licklider 着手编写星系网络间的成员信息沟通备忘录一文。Licklider 为计算机科学的发展做出了突出的贡献，他推进了现代界面交互程序的发展与 ARPANET 以及因特网的出现。Licklider 在他的书中提到了一个问题：应该如何与其他智慧生物建立通信？假设现在有数个横跨星际的超大型网络，那么当这些网络连接时，他们应该如何进行交流呢？答案很简单：每个网络本身都必须指明自己的协议标准，来让其他网络接入。就像 2016 年的电影 Arrival 中所描述的，不同的智慧生物之间需要首先观察，记录下相互的反应以建立常用词典，然后基于这些词典去开始有意义的会话。&lt;/p>
&lt;h2 id="deep-blue">Deep Blue&lt;/h2>
&lt;p>时间的齿轮又慢慢转过了 33 年，来到了 1996，这一年 IBM 的超级计算机 Deep Blue 在首次对战中成功战胜了国际象棋大师 Garry Kasparov，虽然后面的几局里 Garry Kasparov 扳回劣势，一城未失。不过之后的一年中 IBM 继续完善 Deep Blue，并且最终赢得了比赛的胜利，成为首个战胜世界级大师的机器。此时距离 Von Kempelen 提出 Turk 已经过去了 227 年，当初的小把戏没想到最终成为了现实。&lt;/p>
&lt;h1 id="现在">现在&lt;/h1>
&lt;p>Deep Blue 出现的三年之后，也就是 2000 年时，Roy Fielding 发布了影响深远的著名论文：Architectural Styles and the Design of Network-based Software Architectures。也就是后来广为人知的 REST API 架构风格，为广大的开发者规划出了基于 HTTP 协议的 Web APIs 蓝图。同年，Salesforce 发布了他们 Web API 的首个版本，允许第三方通过这些 Web API 自动化管理交易流程。随后，包括 eBay、Google 等在内的科技巨头纷纷发布了他们的 Web API。&lt;/p>
&lt;p>看起来已经进入了信息互联互通的盛世，机器与机器之间通过 Web APIs 进行信息交互，不过总感觉怪怪的。我们理想的情况是某个机器暴露部分接口，其他机器发现并且使用这些接口，然后现实还是很残酷的。&lt;/p>
&lt;p>在现实环境中，某个服务发布一系列接口，然后相关的开发人员编写接口规范文档然后四处播散。而另外部分的开发人员首先需要阅读文档，然后根据文档规范编写相应的程序指示机器去访问这些接口。&lt;/p>
&lt;p>在这种情况下，开发者不可避免的以中间媒介的方式介入了这种机器与机器的沟通中，就好像我们上文提到的 Mechanical Turl 类似，都有人藏在盒中操纵这些机器。因此，现阶段的 API，更应该叫做 API Turks。&lt;/p>
&lt;p>我们的视线再转回 Web APIs 本身，现在可谓进入了 Web APIs 的黄金时代，随着 World Wide Web 的迅猛发展与巨大成功，Web APIs 的数量也极速爆发。&lt;/p>
&lt;p>随着 API 数量与访问量的指数级的增长，因为人为大规模的介入 API 的开发与访问也带来了越来越多的问题。基本上每个 API 都会存在以下问题：&lt;/p>
&lt;ul>
&lt;li>Synchronicity: 同步性&lt;/li>
&lt;/ul>
&lt;p>现有模式下，在两台机器互联互通之前我们需要编写与分享 API 说明文档，即使我们忽略了因为人为沟通而导致的误解，如果 APIs 的规范发生了变化很多开发者还是会照着旧的文档编写 API 消费程序，最终导致驴头不对马嘴。在工程实践中，想要保持文档与 API 的实时一致性非常困难，需要大量的人力物力，另一方面，想要保持所有的客户端与 API 保持一致更是痴人说梦。&lt;/p>
&lt;ul>
&lt;li>Versioning: 版本控制&lt;/li>
&lt;/ul>
&lt;p>上面提及的接口同步问题也随之带来了版本控制的问题，鉴于实际上大部分的接口并没有严格遵循 Fielding 的 REST 准则，很多的 API 客户端都与这些接口强耦合。这种强耦合最终会导致一个非常脆弱、鲁棒性非常低的系统，任何 API 的变化都有可能导致客户端的崩溃。同时，API 客户端的升级也是完全依赖于开发者，这一点的代价也非常昂贵且缓慢，并且还要考虑到大量的已经部署的无法轻易升级的老版本 API 客户端。&lt;/p>
&lt;p>这林林总总的问题让我们畏惧改变，每次对代码的修改都好似埋下未知的炸弹。我们不敢去修改已存在的接口，而是不断地编写新的接口，最终导致代码库日益庞杂。我们需要投入更多的人力物力，背负更多的技术负债，以及无休止的讨论来解决版本难题。&lt;/p>
&lt;ul>
&lt;li>Scaling: 可扩展性&lt;/li>
&lt;/ul>
&lt;p>既然在 API 的发布过程中不可避免的有人类的参与，那么我们需要雇佣更多的开发者来扩展 API。人非圣贤，孰能无过，更多的开发者也就意味着更高的错误出现概率。并且大量的开发者参与进来的确可以提升编写或者阅读文档的速度，而更快地构建更多的 APIs，但是这并不意味着你就可以解决上文提及的 API 变化响应速度。总而言之，如果我们以添加人员的方式来扩展 API，那么会无限制地扩充我们的专属名词库，也增加了错误的可能性。譬如某个消费者希望得到的是 Title，另一个消费者希望得到的是博客的 Heading，其实是同一属性的不同语义表述，这样就会使得消费者陷入迷惑，或者导致数据的冗余。&lt;/p>
&lt;ul>
&lt;li>Discovery:API 发现&lt;/li>
&lt;/ul>
&lt;p>最后，我们要来聊聊 API 共享与发现这个问题(API Discovery )。我们应该如何去寻找合适的 API，特别是当我们构建一个大型系统的时候，我们不希望重复地造大量的轮子，我们就迫切的希望能找到合适的 API 来辅助开发。另一个方面，API 的提供者也不知道如何进行市场营销，很有可能存在着比 Google Places API 优秀的多的地理位置服务商，不过我们也无从找起。&lt;/p>
&lt;h1 id="未来">未来&lt;/h1>
&lt;p>在过去的数十年中，我们尝试了使用不同的程序与工具来解决上文中提及的数个问题。API Workflow、API Style Guide、API Documentation Best Practices，以及其他企业级的保持同步性、避免大规模变化与避免人为错误的标准都是我们披荆斩棘一路走来的成果。我们使用了 Swagger 这样优秀的文档生成器来尽可能保证文档与代码的一致性，我们规定了复杂的测试流程、雇佣更多的开发者来维护庞杂的 API 系统。某个大公司雇佣专门的团队来辅助 API 文档的编写与更新也是见怪不怪的事情。我把这个过程重新组织下就是：我们雇佣开发者来负责为其他开发者编写可读的 API 文档，从而辅助他们理解某个机器接口，并且编写合适的消费程序来使用这些接口。我的一个朋友是这么说的: Programmers tend to solve programming problems by more programming.&lt;/p>
&lt;p>而现在的 API 分享与发现，对于幸运的几个不差钱的公司他们可以花钱进行市场推广与营销，而其他可怜兮兮的小公司只能默默地在 Hacker News 上进行推广。&lt;/p>
&lt;h2 id="human-role-in-m2m-communication">Human role in M2M Communication&lt;/h2>
&lt;p>让我们再来回顾下前面抛出的问题，为什么我们一定需要人类参与到 API Turks 中呢？人类在机器与机器的通信中又占据了怎么不可或缺的角色？实际上人类最关键的作用在于 API 的发现与理解，我们在找到合适的服务之后需要来理解是否能用它达成预定目标以及到底应该怎么做。&lt;/p>
&lt;h2 id="autonomous-apis">Autonomous APIs&lt;/h2>
&lt;p>既然人类的介入导致了昂贵、缓慢且错误频发的后果，那是否有方法来避免这种情况？我们是否能够创建完全自动化的接口呢？首先，我们需要一个渠道来开发并且共享专用名词(Vocabularies )，然后在 API 上线之后通过某个统一的 API Discovery 进行注册发布。整个自动化的没有人类介入的流程描述如下：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>某个机器在发布接口的同时提供接口的描述文档与专属的词汇库，然后自动地在某个 API 发现服务中完成注册。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后某个需要服务支持的 API 消费者在发现服务中利用关键字进行搜索，如果找到某个匹配的服务之后则将其描述文档推送给抓取程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指定的 API 客户端能够根据请求到的词汇库自动训练与调试，这样开发者就能够利用这些 API 进行上层开发。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这些客户端更多地能够以声明式的方式完成特定的工作，而不会强耦合于某个特定的服务接口。以某个具体的程序为例，如果我们希望查询巴黎的天气：&lt;/p>
&lt;pre tabindex="0">&lt;code># Using a terms from schema.org dictionary,
# find services that offers WeatherForecast.
services = apiRegistry.find(WeatherForecast, { vocabulary: &amp;#34;http://schema.org&amp;#34;})
# Query a service for WeatherForecast at GeoCoordinates.
forecast = service.retrieve(WeatherForecast, { GeoCoordinates: … })
# Display Temperature
print forecast(Temperature)
&lt;/code>&lt;/pre>&lt;p>这样的使用方式不仅能够保证 API 消费者弹性地应对 API 变化，还能保证多个 API 之间的代码复用性。譬如，你不再需要为某个单独的地区需求开发特定的天气应用，你可以开发某个通用的客户端，它知道如何呈现天气预报，也能自动地使用譬如 AccuWeather、Weather Underground 或者任何其他特定地区的天气服务提供商来获取特定地区的天气信息。&lt;/p>
&lt;p>总结来看，自动化 API 的构建会包含以下几块：&lt;/p>
&lt;ul>
&lt;li>Vocabulary Registry&lt;/li>
&lt;li>运行时解析&lt;/li>
&lt;li>API Discovery Service&lt;/li>
&lt;li>面向 Vocabulary 而不是数据结构的编程&lt;/li>
&lt;/ul>
&lt;h2 id="即将到来的-2017">即将到来的 2017&lt;/h2>
&lt;p>上面描述的理想状态可能离我们还非常远，不过在 2017 里我们已经发现很多的进展。譬如&lt;a href="https://spring.io/understanding/HATEOAS" target="_blank" rel="noopener">HATEOAS&lt;/a>允许我们以超媒体语义的方式进行运行时解析。&lt;a href="https://blog.codeship.com/json-ld-building-meaningful-data-apis/" target="_blank" rel="noopener">JSON-LD&lt;/a>格式也被越来越多的 API 提供商接受，而类似于 Google、Microsoft、Yahoo 以及 Yandex 等 API 提供商也逐渐接受&lt;a href="https://schema.org/" target="_blank" rel="noopener">Schema.org&lt;/a>中的专属词汇。而类似于&lt;a href="http://alps.io/" target="_blank" rel="noopener">ALPS&lt;/a>这样的格式也允许我们为接口的数据与使用情景提供语义化支持，与此同时，&lt;a href="http://graphql.org/learn/schema/" target="_blank" rel="noopener">GraphQL Schema&lt;/a>也允许我们在运行时发现 GraphQL 接口的使用方式。最后，类似于&lt;a href="https://www.hitchhq.com/" target="_blank" rel="noopener">HitchHQ&lt;/a>或&lt;a href="http://rapidapi.com/" target="_blank" rel="noopener">Rapid API&lt;/a>也为统一的 API 发布与注册提供了便捷支持。&lt;/p>
&lt;h1 id="延伸阅读">延伸阅读&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000005924733" target="_blank" rel="noopener">来自于 PayPal 的 RESTful API 标准&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000006037478" target="_blank" rel="noopener">来自微软的接口设计指南&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/24476917" target="_blank" rel="noopener">2016- 我的技术之路：编程知识体系结构图&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/24575395" target="_blank" rel="noopener">2016- 我的前端之路 : 工具化与工程化&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000005766732" target="_blank" rel="noopener">GraphQL 初探 : 从 REST 到 GraphQL，更完善的数据查询定义&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>WebAPI 风格变迁</title><link>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/web-api/%E6%BC%94%E5%8C%96%E4%B8%8E%E5%8F%98%E8%BF%81/webapi-%E9%A3%8E%E6%A0%BC%E5%8F%98%E8%BF%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-series/1.%E6%9E%B6%E6%9E%84%E9%A3%8E%E6%A0%BC%E4%B8%8E%E6%A8%A1%E5%BC%8F/web-api/%E6%BC%94%E5%8C%96%E4%B8%8E%E5%8F%98%E8%BF%81/webapi-%E9%A3%8E%E6%A0%BC%E5%8F%98%E8%BF%81/</guid><description>&lt;blockquote>
&lt;p>本文是整体倾向于表述 GraphQL 相对于 REST 的一些优越性，但是并不代表笔者认为 GraphQL 就可以完全代替 REST。尺有所短，寸有所长，REST 的简单易用性导致一定缺陷的同时也方便很多需要快速开发的环境。笔者在自己的选择中会使用 REST 作为稳定的、长期的、简单的接口风格，选择 GraphQL 作为易变的、复杂的接口实现方式。另外本文篇幅略长，建议读者选择自己感兴趣的章节阅读。笔者正在进行&lt;a href="https://github.com/wx-chevalier/ConfigurableAPIServer" target="_blank" rel="noopener">ConfigurableAPIServer&lt;/a>这个开源项目，即是允许通过纯配置方式进行可审查的动态 API 配置，可以用于数据中心或者需要快速使用的业务场景。笔者拟将自己的一些最佳实践融合进去，因此也欢迎大家提意见与开 Issue。&lt;/p>
&lt;/blockquote>
&lt;h1 id="webapi-风格变迁">WebAPI 风格变迁&lt;/h1>
&lt;p>逝者如斯夫，不舍日月，软件开发的技术架构日新月异，一直处于不断地变革与迭代之中，而程序猿们一直也在简单易用与复杂可维护、优化与差不多得了、用些黑科技与不断测试保证稳定之间徘徊游离。着眼于服务端应用程序开发，或者称之为 API 开发中，我们也一直在寻找合适的方案来解决不断变革的功能逻辑需求与简单可扩展高可用之间的矛盾。随着移动端的兴起与 Web 技术的革新，富客户端程序日渐占据市场主流，从一个前端开发者的角度来看这些年的变革，我们所 Consume 的 API 的风格也经过了好几代的变迁。在早期以 WebService 为主流，SOA、XML-RPC 流行的年代里，访问远程服务需要使用某些特定的通信协议传送大量的定义严谨的结构化数据，异常复杂。后来在通信方式上以通用 Web 技术 (HTTP) 日渐成为主流，HTTP 协议也就成为了客户端 Consumer 与服务端 Server 之间主要的通信协议。从笔者的经验与个人认知而言，在服务端应用程序开发中，可以将 API 定义或者路由定义与数据库定义看做两个自变量，将实际的代码实现看做因变量。一旦 API 与数据库定义好了，那么中间的分层系统的代码实现在现有通用的架构风格或者架构模式下都是有章可循。换言之，如果我们希望能实现一个健壮、可用、可扩展、可维护的服务端应用程序，那我们就应该进行合理的 API 设计与数据库设计。在早期的架构设计中，我们习惯使用 SQLServer、Oracle 这样的单点商业级数据库，即可能一个系统的全部业务表都存放在单个关系型数据库中。此时很多业务逻辑我们实际上是通过复杂的 SQL 连接操作实现的，不可否认，这是对于性能的保障，但就像笔者在下文 CAP 理论中讨论的那样，高性能与灵活性之间本身也存在着矛盾。在这个时代，一旦数据库表划分与接口设计定了，服务端程序更像对于 CRUD 的封装。后来随着大数据时代的到来与 NoSQL 存储的兴起，无论是对于关系型数据库的垂直划分还是譬如 Redis 这样的缓存数据库的应用，导致了原本单点存储的业务数据被分散在多个存储媒介中，这也就赋予了服务端应用程序更大的灵活性。另外随着现在微服务架构的火热，使得人们更倾向于将原本巨石型的系统拆分为多个解耦的功能模块，而每个功能模块往往也会有自己独立的数据存储。&lt;strong>在这种情况下，API 风格定义，或者在某些文章中所称的路由定义，也就成了一个重要的不可避免问题。&lt;/strong>&lt;/p>
&lt;h2 id="overview--概览">Overview | 概览&lt;/h2>
&lt;p>谈到 API 风格，笔者最早期是习惯采用动作化、语义化定义，譬如描述对于登录操作的接口可以定义为：&lt;/p>
&lt;pre tabindex="0">&lt;code>http://api.com/doLogin?username=&amp;amp;password=
&lt;/code>&lt;/pre>&lt;p>此时对于 Consumer 而言，可以通过接口的定义方便的知道接口的功能与应该提交的参数，不过这种原生的方式也存在着致命的缺陷：&lt;/p>
&lt;ul>
&lt;li>命名的随意性：语义化命名最大的缺陷就是在于主观性太强，笔者在团队实践中发现每个人都有自己的命名习惯，很多在自己看来显而易见的命名在其他人看来简直就是妈的智障。这一点会使得整个前后台交互、代码管理存在极大的障碍，很多 Consumer 都抱怨压根不知道应该使用哪个 API。&lt;/li>
&lt;li>接口功能的不确定性：语义化的接口，每个接口都是为了处理某个具体的业务逻辑。譬如我们如果有获取我收藏的商品与我购买的商品这两个接口需求，那么就会定义为两个接口：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>http://api.com/getFavoriteGoods -&amp;gt; 获取我收藏的商品
http://api.com/getBuyedGoods -&amp;gt; 获取我购买的商品
&lt;/code>&lt;/pre>&lt;p>如果从资源的角度来看，这两个接口最终返回的都是商品这一资源，但是却分割为了两个 API，会让 Consumer 觉得这两个 API 返回的是完全不相关的东西，使得无论前后台都存在着冗余重复的代码。后来，REST 出现了。在 REST 的关于统一接口原则的描述中，使用了多个约束来指导 API 的行为：&lt;/p>
&lt;ul>
&lt;li>资源的识别(identification of resources )，在部分描述中也被称作 End Point，直观的理解就是一个 URL&lt;/li>
&lt;li>通过表述对资源执行的操作，直观的理解就是 HTTP 动词：GET/PUT/DELETE/POST&lt;/li>
&lt;li>自描述的消息&lt;/li>
&lt;li>作为应用状态引擎的超媒体&lt;/li>
&lt;/ul>
&lt;p>在 REST 架构风格下，服务端会决定应该传输给客户端的数据。而每个 Endpoint(URL) 会返回某个特定的资源，譬如一个用户或者一篇博客，或者一组评论的集合。而如果你需要返回一个资源的不同属性，譬如有时候在列表中只需要简略信息而有时候需要详情，那么你应该创建两个不同的 Endpoints，或者使用不过的过滤参数。笔者一直认为，REST 在这里强调的对于信息抽象的核心：资源，强调的是任何被命名的信息都能够作为一个资源，譬如一份文档或者一张图片都可以被称为资源。REST 并没有着重分析我们现在遇到的关于业务逻辑中处理对象的资源划分与资源关联 ( 实体映射 ) 问题，因此，REST 只是描述了一种简单的接口风格。譬如在上文提及的用户登录操作的 API，资源化方式应该是：&lt;/p>
&lt;pre tabindex="0">&lt;code>[GET] http://api.com/user?username=&amp;amp;password?
or
[POST] http://api.com/user_state?username=&amp;amp;password=
&lt;/code>&lt;/pre>&lt;p>即登录这个操作应该看做对于某个用户资源的获取或者对于某个用户状态资源的创建。REST 这种资源化的接口风格非常美妙，十分简单易懂。不过一旦涉及到复杂的界面呈现或者接口逻辑，问题就来了。假设我们现在正在为某个 APP 提供接口支撑，每个界面都是由多个复杂组件构成的，而每个组件都会从某个特定的 API Endpoint 中获取数据，此时无论前后台的代码都是简单而优雅的。但是，问题来了，你在一个界面上需要调用 N 个不同的 API，极大的影响了效率，被 PM 骂了一顿。因此你要为这个界面所有需要的数据提供一个单独的统一接口，在一次请求中即将所有的数据响应返回。客户端也需要重构部分请求代码，然后将获得的数据依次返回给各个组件。灾难从此开始，随着你的 APP 的业务需求、用户界面的不断迭代，你写了越来越多这样的聚合型接口，REST 是没有版本控制机制的，因此每次你在重构服务端代码的时候，你都不敢动原有的，即使已经被废弃的代码，你只敢不断地创建新的接口，然后让老接口自生自灭。最后，估计你对你的 Server，就这个一团乱麻般的感觉:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7u2q25.com1.z0.glb.clouddn.com/1-5cfW5V8SyQB54UUJecY96Q.jpeg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> 举个现实中的例子，如下图有一个列表，每个列表项都是一个卡片。当我对 Android 开发说让他先去请求下列表，获取所有 Card ID 再根据 Card ID 迭代 N 次获取 Card 详情的时候，我差点被打死:&lt;/p>
&lt;h2 id="cap--base-服务端应用程序开发中的-cap-与-base-理论">CAP &amp;amp; BASE: 服务端应用程序开发中的 CAP 与 BASE 理论&lt;/h2>
&lt;p>CAP 理论是分布式系统构建中的基础理论之一，其中的 C(Consistency)，一致性即指所有的节点都能访问同一份最新的数据副本、A(Availability)，可用性即指每个请求都能接收到一个响应，而 P(Partition Tolerance)，分区容忍性即指除了整个网络的故障外，其他的故障 ( 集 ) 都不能导致整个系统无法正确响应。CAP 理论的核心即是一个分布式系统不可能同时很好的满足一致性，可用性和分区容错性这三个需求，最多只能同时较好的满足两个。在笔者刚才描述的服务端应用程序构建的场景中，同样可以用类似于 CAP 理论的方式进行描述。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Partition Tolerance&lt;/strong>: 在上文的描述中，我们业务系统构建的一个目标是在干净整洁的代码的基础上提供灵活多变的接口，这就好像饭店一样，如果我们为 Consumer 提供了一盘做好的黄焖鸡米饭，Consumer 是很难再把它变成炒鸡杂。而如果我们提供的是原料食材，那么 Consumer 想做成什么都可以。封装程度越高的 Service/API 的可重用性与可组合性越低。笔者在上文提及，任何一个复杂的应用程序皆可以表示为简单的 CURD 操作的排列组合，而如果我们的 Service 层或者 API 层只提供最基本的，即粒度最小的操作，那么 Controller 层或者 Consumer 的自由组合的能力也就越强，整个应用系统的灵活性与可变性也就越高。总结而言，Partition Tolerance 即是衡量一个服务端应用系统可以提供对外的 API 的粒度，粒度越低代表着分割容忍性越好。最极端的情况即是 Server 只提供最基本的 CRUD 操作，就好像只是对于数据库做了简单的封装。&lt;/li>
&lt;li>&lt;strong>Consistency&lt;/strong>: 直观的说，如果我们以保证灵活性、可变性为目标，势必会减少对于数据库连接操作的使用。换言之，原本一条 SQL 语句连接查询获得的内容变成了执行两次 SQL 语句，这就导致了可能在两次查询的间隙数据已经发生了变化，最终导致返回给 Consumer 的数据存在不一致性。&lt;/li>
&lt;li>&lt;strong>Availability&lt;/strong>: 在 Server 中，可用性即指某个 API 的性能，或者说是响应时间。如果要保证分割容忍性，势必会将原本可以一次执行的 SQL 语句分为多次，导致查询效率急剧下降，也就导致了可用性受到影响。而如果要保证一致性，那么可以使用事务的方式，同样会导致可用性的减小。&lt;/li>
&lt;/ul>
&lt;p>目前绝大部分的 Server 端的实现都是以&lt;strong>CA&lt;/strong>为目标，即牺牲了分割容忍性，保证强一致性与可用性，这也是 ACID 理论的表现。很多情况下我们会发生某个 API 其实只是执行了某条及其复杂的 SQL 语句，该 SQL 语句可能连接查询了十几张表并且返回数据。这也就导致了 API 的可变性极差，你要修改 API 返回的某个字段也就意味着要修改最底层被执行的那个 SQL 语句，等于重新构建了一个新的 API。如果我们的系统目标是保证&lt;strong>CP&lt;/strong>，即牺牲可用性。那么我们可以引入事务或者锁，即在一个 Session 的多次查询中锁定全表，从而保证返回数据的一致性。如果我们的系统目标是保证&lt;strong>PA&lt;/strong>，即牺牲一致性，那么最好的方式就是引入缓存机制，可以设置在固定时间或者事件触发的情况下再进行真实查询操作，其他情况下可以从缓存中获取数据，这样就能够较好地保证用户的响应时间。&lt;/p>
&lt;p>随着分布式系统的发展，eBay 工程师提出大规模分布式系统的实践总结，在 ACM 上发表文章提出 Bash 理论是基本可用、软状态和最终一致性。不要求实时一致性，但一定要实现最后一点。笔者目前秉持的在 Server 端的开发过程中也是遵循 BASE 理论，这在下面会有详细介绍，这里还是阐述下 BASE 的内涵：&lt;/p>
&lt;ul>
&lt;li>基本可用(Basically Available )。分布式系统在故障时允许损失可用性，保证核心业务可用。音频直播或是做活动时，当业务量非常大的时候可以降级。做游戏也是，在战斗的时候最关心数值的增长，看了多少人都无所谓，缓解核心内容的压力。&lt;/li>
&lt;li>软状态(Soft State )。允许系统中出现的中间状态，中间状态不会耽误可用性。在写代码、编程业务的设计上，必须容忍有一定的临时数据同步，考虑到全局锁和数据多版本的对比，把各个节点的相关数据都上锁，这是一个悲观锁，一旦写任务，其他人都能改我的数据，这是比较悲观的心态。&lt;/li>
&lt;/ul>
&lt;h2 id="backends-for-frontends-一切为了前端">Backends For Frontends: 一切为了前端&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://samnewman.io/patterns/architectural/bff/" target="_blank" rel="noopener">Pattern: Backends For Frontends&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="general-purpose-api-backend-统一的后端接口">General-Purpose API Backend: 统一的后端接口&lt;/h3>
&lt;h3 id="consumer-oriented-response-面向消费者的响应--前端定义接口">Consumer-Oriented Response: 面向消费者的响应 / 前端定义接口&lt;/h3>
&lt;p>GraphQL 最有趣的特性之一，是它本质上是面向消费者的，响应体的结构不取决于服务端，而是完全由客户端驱动。直观的理解就是 GraphQL 规定客户端在发起请求的时候必须显示的标注所需要获得的原子资源的类型以及在返回体中的位置，这一点和 Immutable.js 中的&lt;code>update&lt;/code>函数很类似，你都需要显示指明到叶子节点。这样确实使得整个请求需要很多额外的数据参数与编码工作，但是它就将消费者解耦了，并且强迫服务端遵守 Postel 法则 ( 对自己严格，对他人宽容 )。&lt;/p>
&lt;h1 id="rest-架构风格与统一接口">REST: 架构风格与统一接口&lt;/h1>
&lt;blockquote>
&lt;p>&lt;strong>REST 做了很多，但也没做很多&lt;/strong> 本部分是对于 REST 做一个简短的回顾总结，了解的同学可以直接跳到下一章&lt;/p>
&lt;/blockquote>
&lt;p>笔者一直认为，就好像深度学习一样，REST 这个概念被神化了，人们赋予了很多它并不具备的功能。笔者认为，REST 在那个年代，最大的贡献就是提出了 CS 架构与无状态。REST 提出了资源化的接口风格，但是并没有解决真正实际应用中的复杂资源获取问题。后来也有很多关于 REST 的最佳实践，不过都没有形成一套统一的标准，还是各行其是。&lt;/p>
&lt;h2 id="从-bs-架构到-cs-架构的认知">从 BS 架构到 CS 架构的认知&lt;/h2>
&lt;h2 id="best-practices-来自-paypal-的最佳实践">Best Practices: 来自 PayPal 的最佳实践&lt;/h2>
&lt;p>笔者在上文中一直强调 REST 的简单性，但是不可忽视的是在目前的真实应用中，我们可以通过各种各样的最佳实践来解决笔者在文中描述的 CAP 问题或者 BFF 模式。&lt;/p>
&lt;h1 id="rarf-基于响应式抽象资源流的服务端应用程序架构模式">RARF: 基于响应式抽象资源流的服务端应用程序架构模式&lt;/h1>
&lt;blockquote>
&lt;p>本部分的&lt;a href="https://segmentfault.com/a/1190000004600730" target="_blank" rel="noopener">详细地址&lt;/a> 本部分是笔者基于自己的工作对于 REST 做的一些封装与改进，其核心思想介于 REST 与 GraphQL 之间，可以直接跳过&lt;/p>
&lt;/blockquote>
&lt;h2 id="motivation-动因">Motivation: 动因&lt;/h2>
&lt;p>RARF 的全称是 Reactive Abstract Resource Flow，字面意思是响应式抽象资源流，笔者把它称为基于抽象资源流的响应式处理的架构风格。一般来说，Server-Side 开发包含接口定义、具体业务逻辑处理方法、数据存储交互 (SQL+NoSQL) 这三个层次，RARF 也是面向这三个方面，提出了一些自己的设想。这边的 Reactive 表示 RFRF 同时关注了并发与异步这一方面的问题，并选择了 Reactive Programming 或者更明确一点的，FPR 来作为方法论。&lt;/p>
&lt;h3 id="面向用户的接口可读性与可用性--可组合性--的提升">面向用户的接口可读性与可用性 ( 可组合性 ) 的提升&lt;/h3>
&lt;h4 id="接口的可读性">接口的可读性&lt;/h4>
&lt;p>REST 风格的一个特征就是资源化的接口描述，譬如：&lt;/p>
&lt;pre tabindex="0">&lt;code>[GET] http://api.com/books
[GET] http://api.com/book/1
[POST] http://api.com/book
&lt;/code>&lt;/pre>&lt;p>这种资源化的接口可读性还是比较好的，通过动词与资源名的搭配很容易就能知道该接口描述的业务逻辑是啥。不过，在笔者浅薄的认知里，包括 REST 原版论文和后面看的各式各样的描述，都只针对单个资源进行了描述，即简单逻辑进行了表述。如果现在我们要添加一个购买书籍的接口，在该接口内包括了创建订单、扣费等一系列复杂逻辑操作，相信程序猿会倾向于使用：&lt;/p>
&lt;pre tabindex="0">&lt;code>http://api.com/doBookBuy
&lt;/code>&lt;/pre>&lt;p>对于单个接口而言，可读性貌似上去了，但是，这最终又会导致接口整体命名的混乱性。确实可以通过统一的规划定义来解决，但是笔者个人认为这并没有从接口风格本身来解决这个问题，还是依赖于项目经理或者程序猿的能力。笔者在 RARF 中定义了一个概念，叫 Uniform Resource Flow Path( 统一资源流动路径 ) 来增加接口的描述性，同时 URFP 也是整个 RARF 的驱动基础。&lt;/p>
&lt;h4 id="前端定制的接口-frontend-defined-apis-and-urfp-driven">前端定制的接口 (Frontend-Defined APIs And URFP-Driven)&lt;/h4>
&lt;p>无论是 WebAPP 还是 iOS 还是 Android，都需要与业务服务器进行交互，我们一般称之为消费接口，也就是所谓 Consume API 的感觉。笔者一直有个形象的感觉，现在前后端交互上，就好像去饭店吃饭，厨师把菜单拿过来，消费者按照菜单定好的来点菜。而笔者希望能在 RARF 达成的效果，就是把点菜变成自助餐，也就是所谓的前端可以根据后端提供的基本的资源的四种操作来完成自己复杂的业务逻辑。&lt;/p>
&lt;h3 id="逻辑处理函数中的状态管理">逻辑处理函数中的状态管理&lt;/h3>
&lt;h4 id="状态混乱">状态混乱&lt;/h4>
&lt;p>目前很多的 Controller 里是没有一个全局状态的，我们习惯了调用不同的 Service 然后进行判断处理在最后整合成一个结果然后返回给用户。这就导致了存在着大量的临时变量，譬如上面伪代码中的&lt;code>a,b,c&lt;/code>。笔者认为的状态管理的结果，就是在一个逻辑处理的流程中，不需要看前 N 步代码即可以判断出当前的变量状态或者可能的已知值，特别是在存在嵌套了 N 层的条件判断之下。笔者认为的状态混乱的第一个表现即是缺失这样一种全局状态，顺便插一句，如果有学过 Redux 的朋友肯定也能感受到，在有全局状态树的情况下可以更好地追踪代码执行过程并且重现错误。另一个可能引起状态混乱的原因，即是 Service 的不可控性。借用函数式编程中的概念，我们是希望每个被调用的 Service 函数都是纯函数 ( 假设把数据库输入也作为一个抽象的参数 )，不会存在 Side Effect。但是不可否认，现行的很多代码中 Service 函数会以不可预知的方式修改变量，虽然有时候是为了节约内存空间的考虑，譬如：&lt;/p>
&lt;pre tabindex="0">&lt;code>ArrayList&amp;lt;Integer&amp;gt; array = new ArrayList();
Service(array);//在Service中向array里添加了数据
&lt;/code>&lt;/pre>&lt;p>而这样一种 Side Effect 的表现之一就是我们在调试或者修改代码的时候，需要递归 N 层才能找到某变量到底是在哪边被修改了，这对于代码的可维护性、可变性都造成了很大的负担。&lt;/p>
&lt;h4 id="抽象混乱">抽象混乱&lt;/h4>
&lt;p>**因为每一个 Controller 都是面向一条完整的业务逻辑进行抽象，所以在朴素的认知下并不能很好地进行代码分割。**在符合自然认知规律的开发模式中，我们习惯先定义出接口，然后在具体的接口需要的功能时进行抽象，譬如在项目之初，我们需要一个获取所有商品列表的接口，我们可以定义为：&lt;/p>
&lt;pre tabindex="0">&lt;code>[GET]:/goodss -&amp;gt; 映射到getGoodsController
&lt;/code>&lt;/pre>&lt;p>在编写这个 getGoodsController 方法的过程中，我们发现需要去 goods 表中查询商品信息，那我们会提出一个&lt;code>selectGoodsAllService&lt;/code>的服务方法，来帮助我们进行数据查询。然后，又多了一个需求，查询所有价格小于 10 块的商品：&lt;/p>
&lt;pre tabindex="0">&lt;code>[GET]:/goods?query={&amp;#34;price&amp;#34;:&amp;#34;lt 10&amp;#34;} -&amp;gt; 映射到getGoodsController
&lt;/code>&lt;/pre>&lt;p>这时候我们就需要在 Controller 加个判断了，判断有没有附带查询条件，如果附带了，就要调用专门的 Service。或者也可以为这个查询写一个专门的 Controller：&lt;/p>
&lt;pre tabindex="0">&lt;code>[GET]:/getGoodsByPriceLess?price=10 -&amp;gt; getGoodsByPriceLessController
&lt;/code>&lt;/pre>&lt;p>同样需要编写一个根据价格查询的 Service。然后，随着业务的发展，我们需要根据商家、剩余货物量等等进行查询，然后 Service 越来越多，慢慢的，就陷入了抽象漏洞的困境，就是我们虽然抽象了，但是根本不敢去用下面的代码，因为就怕那是个大坑，比较不知道它的抽象到底是遵循了什么的规则。&lt;/p>
&lt;h4 id="依赖混乱">依赖混乱&lt;/h4>
&lt;p>上图描述了一个请求处理过程中的依赖传递问题，直观的感受是，当我们的业务逻辑系统变得日渐复杂之后，不依赖 Code Review 或者测试，特别是对于小团队而言，不敢去随便乱改一个现有的服务，宁可去为自己要处理的逻辑写一个新的服务，因为压根不知道现有的服务到底被多少个东西依赖着。牵一发而动全身啊。这就导致了随着时间的增长，系统中的函数方法越来越多，并且很多是同构的。举例而言，有时候业务需要根据不同的年龄来获取不同的用户，但是程序猿在初期接到的业务需求是查找出所有未成年的人，它就写了个方法&lt;code>getMinorsService()&lt;/code>，这个服务不用传入任何参数，直接调用就好。然后某天，有个新的需求，查找所有的没到 20 岁的人，于是又有了一个服务&lt;code>getPeopleYoungerThan20()&lt;/code>。这样系统中就多出了大量的功能交叉的服务，而这些服务之间也可能互相依赖，形成一个复杂的依赖网络。如果有一天，你要把数据库的表结构动一下 ( 譬如要把部分数据移到 NoSQL 中 )，就好像要踩 N 颗地雷一样的感觉吧。&lt;/p>
&lt;p>说到依赖，相信很多人首先想到的就是 Spring 的 DI/IoC 的概念。不过笔者认为依赖注入和本文笔者纠结的依赖混乱的问题，还是有所区别的。依赖注入的原理和使用确实非常方便，但是它还是没有解决依赖划分混乱的问题，或者需要大量的劳动力去在代码之初就把所有的依赖确定好，那么这一点和 RARF 文初假设的场景也是不一致的。&lt;/p>
&lt;p>最后，笔者在 RARF 中，不会解决依赖传递或者多重依赖的问题，只是说通过划分逻辑资源的方式，把所有的依赖项目明晰化了。譬如上面提到的 N 个具有交叉功能的 GET 函数，都会统一抽象成对于某个资源的抽象 GET 操作。换言之，以 URFP 的抽象原则进行统一调用。&lt;/p>
&lt;h3 id="挣脱数据库表结构--文档结构的束缚">挣脱数据库表结构 / 文档结构的束缚&lt;/h3>
&lt;p>在富客户端发展的大潮之下，服务端越来越像一个提供前端进行 CRUD 的工具。任何一个学过数据库，学过 SQL 的人，都知道，联表查询比分成几个单独的查询效率要来的好得多，这也是毋庸置疑的。但是，在本文所描述的情况下，联表查询会破坏原本资源之间的逻辑分割。这边先说一句废话：&lt;strong>在 MVC 中，当数据表设计和接口设计定了之后，中间的代码实现也就定了。&lt;/strong> 举例来说，我们存在两个业务需求：获取我收藏的商品列表和我购买过的商品列表，这边涉及到三个表：goods(goods_id)，goods_favorite(goods_id,user_id)，goods_order(goods_id,user_id)。在 MVC 中，我们会倾向于写上三个接口，配上三个 Service，这就是典型的提高了查询效率，并且符合人们正常开发顺序的方式。不过，如果单纯从资源的逻辑分割的角度考虑的话，对于商品查询而言，应该只有一个&lt;code>selectGoodsByGoodsId&lt;/code>这个 Service，换言之，把原来的单次查询拆分为了：先在其他表中查询出 goods_id，然后再用 goods_id 在 goods 表中查询商品详情。这样的逻辑分割是不是明晰了一点？是啊，这肯定会影响效率的，笔者也在想着能不能通过某种方法达成一个平衡。&lt;/p>
&lt;h2 id="solution-解决方案">Solution: 解决方案&lt;/h2>
&lt;p>RESTful 中也有&lt;code>all is resource&lt;/code>的概念，但是 RESTful 强调的是像超文本啊、某个音视频啊，这些都可以通过 URI 访问到，也就是可以当做一个资源然后被前端获取。这一点已经获得了广泛地认可，而在 RARF 中强调的抽象资源，就好像在电商系统中，我们都知道 goods 与 user 是两种资源，那么在描述用户收藏夹的时候，即对于 user_goods 这个表，算不算资源呢？当然算啊！换言之，描述两个资源之间关系的，无论是一对一，还是一对多，只要具备唯一标识的，就是独立的抽象资源。不过，如果哪一天逻辑设计上，把用户收藏的商品，变成了 JSON 字段然后存储在 user 表中，即成了 user 资源的一个属性，那么此时这种映射关系就不是一个资源了。因为它没有一个唯一标识。&lt;/p>
&lt;h2 id="pursuit-愿景">Pursuit: 愿景&lt;/h2>
&lt;p>缩了那么多，最后，我还是陈述下我在设计 RARF 一些莫名其妙的东西时候的愿景吧，其实看到现在机智的同学，应该能够感觉到，这个 RARF 和 MicroService 在很多设计理念上还是很类似的，这里先盗用下 MicroService 的 Benefits：&lt;/p>
&lt;blockquote>
&lt;p>Microservices do not require teams to rewrite the whole application if they want to add new features.
Smaller codebases make maintenance easier and faster. This saves a lot of development effort and time, therefore increases overall productivity.
The parts of an application can be scaled separately and are easier to deploy.&lt;/p>
&lt;/blockquote>
&lt;p>那么改造一下，RARF 的愿景就是：&lt;/p>
&lt;ul>
&lt;li>RARF 希望能够在修改或者增删某些功能时不需要把全部代码过一遍&lt;/li>
&lt;li>基于 Resource 分割的代码库会更小并且更好管理，这会大大节省开发周期，提供产品能力&lt;/li>
&lt;li>整个应用程序能够独立扩展、易于部署。就像 RARF 中，如果发现哪个 ResourceHandler 需求比较大，可以无缝扩展出去。&lt;/li>
&lt;/ul>
&lt;h1 id="graphql-面向对象图网络-object-graphs-的查询语言">GraphQL: 面向对象图网络 (Object Graphs) 的查询语言&lt;/h1>
&lt;blockquote>
&lt;p>GraphQL is a Specification.&lt;/p>
&lt;/blockquote>
&lt;p>如果说 RESTful API 给笔者最大的诱惑，那应该是在于其的简单易用，我们可以用最简单的而且遵循一定规范的约定俗成的命名方式来定义接口风格并且实现接口。不过借用 ThoughtWorks 在 2016 年初的技术雷达指引中的描述，现实世界里的 REST 实现，经常发现它被错误地当做通过客户端服务器间频繁交互来获取对象网络的手段，而 GraphQL 本身就是一种远程接收对象图网络的协议。&lt;/p></description></item></channel></rss>