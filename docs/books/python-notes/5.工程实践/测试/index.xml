<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>测试 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/python-notes/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%B5%8B%E8%AF%95/</link><atom:link href="https://ng-tech.icu/books/python-notes/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%B5%8B%E8%AF%95/index.xml" rel="self" type="application/rss+xml"/><description>测试</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>测试</title><link>https://ng-tech.icu/books/python-notes/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%B5%8B%E8%AF%95/</link></image><item><title>单元测试</title><link>https://ng-tech.icu/books/python-notes/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/python-notes/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/</guid><description>&lt;h1 id="单元测试">单元测试&lt;/h1>
&lt;p>软件系统的开发是一个很复杂的过程，随着系统复杂性的提高，代码中隐藏的 bug 也可能变得越来越多。为了保证软件的质量，测试是一个必不可少的部分，甚至还有测试驱动开发（Test-driven development, TDD）的理念，也就是先测试再编码。在计算机编程中，单元测试（Unit Testing）又称为模块测试，是针对程序模块（软件设计的最小单位）来进行正确性检验的测试工作，所谓的单元是指一个函数，一个模块，一个类等。&lt;/p>
&lt;p>在 Python 中，我们可以使用 unittest 模块编写单元测试。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">unittest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TestStringMethods&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unittest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TestCase&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_upper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s1">&amp;#39;FOO&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 判断两个值是否相等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_isupper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertTrue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;FOO&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isupper&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 判断值是否为 True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertFalse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Foo&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isupper&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 判断值是否为 False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;world&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># check that s.split fails when the separator is not a string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertRaises&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">TypeError&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 检测异常&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面，我们定义了一个 TestStringMethods 类，它从 &lt;code>unittest.TestCase&lt;/code> 继承。注意到，我们的方法名都是以 &lt;code>test&lt;/code> 开头，表明该方法是测试方法，不以 &lt;code>test&lt;/code> 开头的方法测试的时候不会被执行。&lt;/p>
&lt;p>在方法里面，我们使用了&lt;code>断言（assert）&lt;/code>判断程序运行的结果是否和预期相符。其中：&lt;/p>
&lt;ul>
&lt;li>&lt;code>assertEqual&lt;/code> 用于判断两个值是否相等；&lt;/li>
&lt;li>&lt;code>assertTrue/assertFalse&lt;/code> 用于判断表达式的值是 True 还是 False；&lt;/li>
&lt;li>&lt;code>assertRaises&lt;/code> 用于检测异常；&lt;/li>
&lt;/ul>
&lt;p>断言方法主要有三种类型：&lt;/p>
&lt;ul>
&lt;li>检测两个值的大小关系：相等，大于，小于等&lt;/li>
&lt;li>检查逻辑表达式的值：True/Flase&lt;/li>
&lt;li>检查异常&lt;/li>
&lt;/ul>
&lt;p>下面列举了部分常用的断言方法：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Method&lt;/th>
&lt;th style="text-align:left">Checks that&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">assertEqual(a, b)&lt;/td>
&lt;td style="text-align:left">a == b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertNotEqual(a, b)&lt;/td>
&lt;td style="text-align:left">a != b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertGreater(a, b)&lt;/td>
&lt;td style="text-align:left">a &amp;gt; b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertGreaterEqual(a, b)&lt;/td>
&lt;td style="text-align:left">a &amp;gt;= b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertLess(a, b)&lt;/td>
&lt;td style="text-align:left">a &amp;lt; b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertLessEqual(a, b)&lt;/td>
&lt;td style="text-align:left">a &amp;lt;= b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertTrue(x)&lt;/td>
&lt;td style="text-align:left">bool(x) is True&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertFalse(x)&lt;/td>
&lt;td style="text-align:left">bool(x) is False&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertIs(a, b)&lt;/td>
&lt;td style="text-align:left">a is b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertIsNot(a, b)&lt;/td>
&lt;td style="text-align:left">a is not b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertIsNone(x)&lt;/td>
&lt;td style="text-align:left">x is None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertIsNotNone(x)&lt;/td>
&lt;td style="text-align:left">x is not None&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertIn(a, b)&lt;/td>
&lt;td style="text-align:left">a in b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertNotIn(a, b)&lt;/td>
&lt;td style="text-align:left">a not in b&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertIsInstance(a, b)&lt;/td>
&lt;td style="text-align:left">isinstance(a, b)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">assertNotIsInstance(a, b)&lt;/td>
&lt;td style="text-align:left">not isinstance(a, b)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>现在，让我们来运行上面的单元测试，将上面的代码保存为文件 &lt;code>mytest.py&lt;/code>，通过 &lt;code>-m unittest&lt;/code> 参数运行单元测试：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python -m unittest mytest
test_isupper (mytest.TestStringMethods) ... ok
test_split (mytest.TestStringMethods) ... ok
test_upper (mytest.TestStringMethods) ... ok
&lt;/code>&lt;/pre>&lt;p>执行结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">----------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Ran&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="n">tests&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="mf">0.000&lt;/span>&lt;span class="n">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">OK&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的结果表明测试通过，我们也可以加 &lt;code>-v&lt;/code> 参数得到更加详细的测试结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="n">python&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="n">unittest&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">v&lt;/span> &lt;span class="n">mytest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_isupper&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mytest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TestStringMethods&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="n">ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_split&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mytest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TestStringMethods&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="n">ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test_upper&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">mytest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TestStringMethods&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">...&lt;/span> &lt;span class="n">ok&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">----------------------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Ran&lt;/span> &lt;span class="mi">3&lt;/span> &lt;span class="n">tests&lt;/span> &lt;span class="ow">in&lt;/span> &lt;span class="mf">0.000&lt;/span>&lt;span class="n">s&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">OK&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面这种运行单元测试的方法是我们推荐的做法，当然，你也可以在代码的最后添加两行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="vm">__name__&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s1">&amp;#39;__main__&amp;#39;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">unittest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后再直接运行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="n">python&lt;/span> &lt;span class="n">mytest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">py&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="setup-和-teardown">setUp 和 tearDown&lt;/h1>
&lt;p>在某些情况下，我们需要在每个测试方法执行前和执行后做一些相同的操作，比如我们想在每个测试方法执行前连接数据库，执行后断开数据库连接，为了避免在每个测试方法中编写同样的代码，我们可以使用 setUp 和 tearDown 方法，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -*- coding: utf-8 -*-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="nn">unittest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">TestStringMethods&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unittest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">TestCase&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">setUp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 在每个测试方法执行前被调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span> &lt;span class="s1">&amp;#39;setUp, Hello&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">tearDown&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 在每个测试方法执行后被调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">print&lt;/span> &lt;span class="s1">&amp;#39;tearDown, Bye!&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_upper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;foo&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">upper&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="s1">&amp;#39;FOO&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1"># 判断两个值是否相等&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_isupper&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertTrue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;FOO&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isupper&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 判断值是否为 True&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertFalse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;Foo&amp;#39;&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">isupper&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="c1"># 判断值是否为 False&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">def&lt;/span> &lt;span class="nf">test_split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;hello world&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertEqual&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s1">&amp;#39;hello&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s1">&amp;#39;world&amp;#39;&lt;/span>&lt;span class="p">])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># check that s.split fails when the separator is not a string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">with&lt;/span> &lt;span class="bp">self&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">assertRaises&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ne">TypeError&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="c1"># 检测异常&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">s&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">split&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看看执行结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ python -m unittest -v mytest
test_isupper (mytest.TestStringMethods) ... setUp, Hello
tearDown, Bye!
ok
test_split (mytest.TestStringMethods) ... setUp, Hello
tearDown, Bye!
ok
test_upper (mytest.TestStringMethods) ... setUp, Hello
tearDown, Bye!
ok
----------------------------------------------------------------------
Ran 3 tests in 0.000s
OK
&lt;/code>&lt;/pre></description></item></channel></rss>