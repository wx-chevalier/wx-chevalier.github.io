<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>时间与日期 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/</link><atom:link href="https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/index.xml" rel="self" type="application/rss+xml"/><description>时间与日期</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>时间与日期</title><link>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/</link></image><item><title>Date</title><link>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/date/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/date/</guid><description>&lt;h1 id="date">Date&lt;/h1>
&lt;p>JavaScript 为我们提供了不是很好用的 Date 对象作为时间日期对象，Date() 直接返回当前时间字符串，不管参数是 number 还是任何 string。而 new Date() 则是会根据参数来返回对应的值，无参数的时候，返回当前时间的字符串形式；有参数的时候返回参数所对应时间的字符串。new Date() 对参数不管是格式还是内容都要求, 且只返回字符串, 标准的构造 Date 对象的方法有&lt;/p>
&lt;pre tabindex="0">&lt;code>// 不带new操作符，像一个函数一样调用。它将忽略所有传入的参数，并返回当前日期和时间的一个字符串表示。
new Date();
// 可接受一个数字参数，该参数表示设定时间与1970年1月1日0点之间的毫秒数。
new Date(value);
// 可接受一个字符串参数，参数形式类似于Date.parse()方法。但parse()方法返回的是一个数字，而Date()函数返回的是一个对象。
new Date(dateString);
// 可接受参数形式类似于Date.UTC()方法的参数，但Date.UTC()方法返回是一个毫秒数，且是UTC时间，而Date()函数返回是一个对象，且是本地时间。
new Date(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);
---------------------------------------------------------------------------------------------------------------------
year：四位年份，如果写成两位数，则加上1900
month：表示月份，0表示一月，11表示12月
date：表示日期，1到31
hour：表示小时，0到23
minute：表示分钟，0到59
second：表示秒钟，0到59
ms：表示毫秒，0到999
&lt;/code>&lt;/pre>&lt;p>这里需要注意的是，&lt;strong>月份 month 参数，其计数方式从 0 开始，而天 day 参数，其计数方式从 1 开始&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Fri Aug 21 2015 15:51:55 GMT+0800 (中国标准时间)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1293879600000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2011-01-01T11:00:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2011/01/01 11:00:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2011&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">11&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;jan 01 2011,11 11:00:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Sat Jan 01 2011 11:00:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Sat Jan 01 2011 11:00:00 GMT+0800 (中国标准时间)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sss&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2011/01/01T11:00:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2011-01-01-11:00:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1293879600000&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//Invalid Date
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2011-01-01T11:00:00&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;1992/02/11 12:00:12&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//596069988000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="parse--解析">Parse | 解析&lt;/h2>
&lt;h3 id="timestamp--时间戳">TimeStamp | 时间戳&lt;/h3>
&lt;p>如果需要从当前的时间对象获取其相应的时间戳，我们可以使用 getTime 或者 valueOf()，返回距离 1970 年 1 月 1 日 0 点的毫秒数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">date1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2007&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">date2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2007&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">date1&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nx">date2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//false
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">date1&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">date2&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ECMAScript5新增了now()方法，该方法返回当前时间距离1970年1月1日0点UTC的毫秒数。该方法不支持传递参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">now&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">getTime&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外 Date 对象还有一个静态方法同样返回给定日期的毫秒数。但其参数并不是一个字符串，而是分别代表年、月、日、时、分、秒、毫秒的数字参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UTC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1970&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//NaN
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UTC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1970&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//0
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UTC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1970&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//86400000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UTC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1970&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//3600000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UTC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1970&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">59&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//714000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">Date&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">UTC&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1970&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">59&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">//717000
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还是需要强调下，JavaScript 内的时间戳指的是当前时间到 1970 年 1 月 1 日 00:00:00 UTC 对应的毫秒数，和 unix 时间戳不是一个概念，后者表示秒数，差了 1000 倍。&lt;code>new Date(timestamp)&lt;/code>中的时间戳必须是&lt;code>number&lt;/code>格式，&lt;code>string&lt;/code>会返回&lt;code>Invalid Date&lt;/code>。所以比如&lt;code>new Date('11111111')&lt;/code>这种写法是错的。&lt;/p>
&lt;h3 id="datetimestring--时间日期字符串">DateTimeString | 时间日期字符串&lt;/h3>
&lt;p>JavaScript 原生 Date 对于时间字符串的解析真的是槽点满满，假设我们希望以 DD/MM/YYYY 的格式进行解析，那么它是无法识别的&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;01/12/2016&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//December 1 2016 in DD/MM/YYYY format
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//&amp;#34;Tue Jan 12 2016 00:00:00 GMT-0600 (Central Standard Time)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外，在 ES5 的标准中，其对 ISO 8601 标准的字符串进行了一个神奇的断言 : 所有没有提供时区的字符串默认为标准时区。换言之，你会发现你解析出来的时间和你预期中的不一样，而且它打印的时候是按照本地时区又进行了转换&lt;/p>
&lt;pre tabindex="0">&lt;code>//US local format
const a = new Date(&amp;#39;1/1/2016&amp;#39;);
//&amp;#34;Fri Jan 01 2016 00:00:00 GMT-0600 (Central Standard Time)&amp;#34;
//ISO 8601
const a = new Date(&amp;#39;2016-01-01&amp;#39;);
//&amp;#34;Thu Dec 31 2015 18:00:00 GMT-0600 (Central Standard Time)&amp;#34;
&lt;/code>&lt;/pre>&lt;p>ES 2015 标准中则是修复了该 Bug，不过还是会让人觉得头大，毕竟你不知道你代码的最终运行环境会是 ES5 还是 ES6。Date 对象也有一个 parse 方法，用于解析一个日期字符串，参数是一个包含待解析的日期和时间的字符串，返回从 1970 年 1 月 1 日 0 点到给定日期的毫秒数。该方法会根据日期时间字符串格式规则来解析字符串的格式，除了标准格式外，以下格式也支持。如果字符串无法识别，将返回 NaN。&lt;/p>
&lt;ul>
&lt;li>&amp;rsquo; 月 / 日 / 年 &amp;rsquo; 如 6/13/2004&lt;/li>
&lt;li>&amp;rsquo; 月 日, 年 &amp;rsquo; 如 January 12,2004 或 Jan 12,2004&lt;/li>
&lt;li>&amp;rsquo; 星期 月 日 年 时 : 分 : 秒 时区 &amp;rsquo; Tue May 25 2004 00:00:00 GMT-0700&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>console.log(Date.parse(&amp;#39;6/13/2004&amp;#39;));//1087056000000
console.log(Date.parse(&amp;#39;January 12,2004&amp;#39;));//1073836800000
console.log(Date.parse(&amp;#39;Tue May 25 2004 00:00:00 GMT-0700&amp;#39;));//1085468400000
console.log(Date.parse(&amp;#39;2004-05-25T00:00:00&amp;#39;));//1085443200000
console.log(Date.parse(&amp;#39;2016&amp;#39;));//1451606400000
console.log(Date.parse(&amp;#39;T00:00:00&amp;#39;));//NaN
console.log(Date.parse());//NaN
&lt;/code>&lt;/pre>&lt;p>在 ECMAScript5 中，如果使用标准的日期时间字符串格式规则的字符串中，数学前有前置 0，则会解析为 UTC 时间，时间没有前置 0，则会解析为本地时间。其他情况一般都会解析为本地时间&lt;/p>
&lt;pre tabindex="0">&lt;code>console.log(Date.parse(&amp;#39;7/12/2016&amp;#39;));//1468252800000
console.log(Date.parse(&amp;#39;2016-7-12&amp;#39;));//1468252800000
console.log(Date.parse(&amp;#39;2016-07-12&amp;#39;));//1468281600000
&lt;/code>&lt;/pre>&lt;h2 id="manipulate--时间对象操作">Manipulate | 时间对象操作&lt;/h2>
&lt;h3 id="get--set--属性值设置">Get &amp;amp; Set | 属性值设置&lt;/h3>
&lt;p>Date 对象提供了一系列 get* 方法，用来获取实例对象某个方面的值。具体的 Get 函数列表详见附录&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-sjs" data-lang="sjs">const d = new Date(&amp;#34;January 6, 2013&amp;#34;);
d.getDate(); // 6
d.getMonth(); // 0
d.getYear(); // 113
d.getFullYear(); // 2013
d.getTimezoneOffset(); // -480
&lt;/code>&lt;/pre>&lt;p>同样的，Date 对象还提供了一系列的 Set 方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;January 6, 2013&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1359648000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">d1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Fri Feb 01 2013 00:00:00 GMT+0800 (CST)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;January 6, 2013&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1356796800000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Sun Dec 30 2012 00:00:00 GMT+0800 (CST)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="add--subtract--运算操作">Add &amp;amp; Subtract | 运算操作&lt;/h3>
&lt;p>我们可以巧用 Set 方法的特性，set* 方法的参数都会自动折算。以 setDate 为例，如果参数超过当月的最大天数，则向下一个月顺延，如果参数是负数，表示从上个月的最后一天开始减去的天数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;January 6, 2013&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1359648000000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">d1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Fri Feb 01 2013 00:00:00 GMT+0800 (CST)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;January 6, 2013&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 1356796800000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// Sun Dec 30 2012 00:00:00 GMT+0800 (CST)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将日期向后推1000天
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getDate&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将时间设为6小时后
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setHours&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getHours&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将年份设为去年
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setFullYear&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getFullYear&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="diff--计算差值">Diff | 计算差值&lt;/h3>
&lt;p>类型转换时，Date 对象的实例如果转为数值，则等于对应的毫秒数；如果转为字符串，则等于对应的日期字符串。所以，两个日期对象进行减法运算，返回的就是它们间隔的毫秒数；进行加法运算，返回的就是连接后的两个字符串。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Date&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2000&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d2&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2678400000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">d2&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">d1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &amp;#34;Sat Apr 01 2000 00:00:00 GMT+0800 (CST)Wed Mar 01 2000 00:00:00 GMT+0800 (CST)&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="display--时间展示">Display | 时间展示&lt;/h2>
&lt;ul>
&lt;li>年月日&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Input&lt;/th>
&lt;th>Example&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>YYYY&lt;/code>&lt;/td>
&lt;td>&lt;code>2014&lt;/code>&lt;/td>
&lt;td>4 or 2 digit year&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>YY&lt;/code>&lt;/td>
&lt;td>&lt;code>14&lt;/code>&lt;/td>
&lt;td>2 digit year&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Y&lt;/code>&lt;/td>
&lt;td>&lt;code>-25&lt;/code>&lt;/td>
&lt;td>Year with any number of digits and sign&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Q&lt;/code>&lt;/td>
&lt;td>&lt;code>1..4&lt;/code>&lt;/td>
&lt;td>Quarter of year. Sets month to first month in quarter.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>M MM&lt;/code>&lt;/td>
&lt;td>&lt;code>1..12&lt;/code>&lt;/td>
&lt;td>Month number&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>MMM MMMM&lt;/code>&lt;/td>
&lt;td>&lt;code>Jan..December&lt;/code>&lt;/td>
&lt;td>Month name in locale set by &lt;code>moment.locale()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>D DD&lt;/code>&lt;/td>
&lt;td>&lt;code>1..31&lt;/code>&lt;/td>
&lt;td>Day of month&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Do&lt;/code>&lt;/td>
&lt;td>&lt;code>1st..31st&lt;/code>&lt;/td>
&lt;td>Day of month with ordinal&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>DDD DDDD&lt;/code>&lt;/td>
&lt;td>&lt;code>1..365&lt;/code>&lt;/td>
&lt;td>Day of year&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>X&lt;/code>&lt;/td>
&lt;td>&lt;code>1410715640.579&lt;/code>&lt;/td>
&lt;td>Unix timestamp&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x&lt;/code>&lt;/td>
&lt;td>&lt;code>1410715640579&lt;/code>&lt;/td>
&lt;td>Unix ms timestamp&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>时分秒&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Input&lt;/th>
&lt;th>Example&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>H HH&lt;/code>&lt;/td>
&lt;td>&lt;code>0..23&lt;/code>&lt;/td>
&lt;td>24 hour time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>h hh&lt;/code>&lt;/td>
&lt;td>&lt;code>1..12&lt;/code>&lt;/td>
&lt;td>12 hour time used with &lt;code>a A&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a A&lt;/code>&lt;/td>
&lt;td>&lt;code>am pm&lt;/code>&lt;/td>
&lt;td>Post or ante meridiem (Note the one character &lt;code>a p&lt;/code> are also considered valid)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m mm&lt;/code>&lt;/td>
&lt;td>&lt;code>0..59&lt;/code>&lt;/td>
&lt;td>Minutes&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s ss&lt;/code>&lt;/td>
&lt;td>&lt;code>0..59&lt;/code>&lt;/td>
&lt;td>Seconds&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S SS SSS&lt;/code>&lt;/td>
&lt;td>&lt;code>0..999&lt;/code>&lt;/td>
&lt;td>Fractional seconds&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Z ZZ&lt;/code>&lt;/td>
&lt;td>&lt;code>+12:00&lt;/code>&lt;/td>
&lt;td>Offset from UTC as &lt;code>+-HH:mm&lt;/code>, &lt;code>+-HHmm&lt;/code>, or &lt;code>Z&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="format--格式化">Format | 格式化&lt;/h3>
&lt;p>Date 对象提供了一系列的&lt;code>to*&lt;/code>方法来支持从 Date 对象转化为字符串，具体的函数列表详见附录&lt;/p>
&lt;pre tabindex="0">&lt;code>const d = new Date(2013, 0, 1);
d.toString()
// &amp;#34;Tue Jan 01 2013 00:00:00 GMT+0800 (CST)&amp;#34;
d.toUTCString()
// &amp;#34;Mon, 31 Dec 2012 16:00:00 GMT&amp;#34;
d.toISOString()
// &amp;#34;2012-12-31T16:00:00.000Z&amp;#34;
d.toJSON()
// &amp;#34;2012-12-31T16:00:00.000Z&amp;#34;
d.toDateString() // &amp;#34;Tue Jan 01 2013&amp;#34;
d.toTimeString() // &amp;#34;00:00:00 GMT+0800 (CST)&amp;#34;
d.toLocaleDateString()
// 中文版浏览器为&amp;#34;2013年1月1日&amp;#34;
// 英文版浏览器为&amp;#34;1/1/2013&amp;#34;
d.toLocaleTimeString()
// 中文版浏览器为&amp;#34;上午12:00:00&amp;#34;
// 英文版浏览器为&amp;#34;12:00:00 AM&amp;#34;
&lt;/code>&lt;/pre>&lt;h3 id="durations-时长">Durations: 时长&lt;/h3>
&lt;pre tabindex="0">&lt;code>const nMS = 1320; //以毫秒单位表示的差值时间
const nD = Math.floor(nMS/(1000 * 60 * 60 * 24));
const nH = Math.floor(nMS/(1000*60*60)) % 24;
const nM = Math.floor(nMS/(1000*60)) % 60;
const nS = Math.floor(nMS/1000) % 60;
&lt;/code>&lt;/pre>&lt;h3 id="i18n-国际化">i18n: 国际化&lt;/h3>
&lt;p>浏览器获取当前用户所在的时区等信息只和系统的日期和时间设置里的时区以及时间有关。区域和语言设置影响的是浏览器默认时间函数 (Date.prototype.toLocaleString 等 ) 显示的格式，不会对时区等有影响。Date 有个 Date.prototype.toLocaleString() 方法可以将时间字符串返回用户本地字符串格式，这个方法还有两个子方法 Date.prototype.toLocaleDateString 和 Date.prototype.toLocaleTimeString，这两个方法返回值分别表示日期和时间，加一起就是 Date.prototype.toLocaleString 的结果。这个方法的默认参数会对时间字符串做一次转换，将其转换成用户当前所在时区的时间，并按照对应的系统设置时间格式返回字符串结果。然而不同浏览器对用户本地所使用的语言格式的判断依据是不同的。&lt;/p>
&lt;ul>
&lt;li>IE: 获取系统当前的区域和语言 - 格式中设置的格式，依照其对应的格式来显示当前时间结果 ;IE 浏览器实时查询该系统设置(即你在浏览器窗口打开后去更改系统设置也会引起返回格式变化)。假设系统语言为 ja-JP，系统 unicode 语言为 zh-CN 日期格式为 nl-NL, 浏览器语言设置(accept-language) 为 de, 浏览器界面语言为 en-US(其他条件不变，浏览器界面语言改为 zh-CN 的时候结果也是一样 )，&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>window.navigator.language
//&amp;#34;nl-NL&amp;#34;
window.navigator.systemLanguage
//&amp;#34;zh-CN&amp;#34;(设置中的非unicode程序所使用语言选项)
window.navigator.userLanguage
//&amp;#34;nl-NL&amp;#34;
window.navigator.browserLanguage
//&amp;#34;ja-JP&amp;#34;(系统菜单界面语言)
window.navigator.languages
//undefined
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>FF：获取方式和结果与 IE 浏览器相同，区别在于 FF 只会在浏览器进程第一次启动的时候获取一次系统设置，中间不管怎么系统设置怎么变化，FF 都无法获取到当前系统设置。除非重启 FF 浏览器。当浏览器界面语言为 zh-CN,accept-language 首位为 en-US 的时候：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>window.navigator.language
//&amp;#39;en-US&amp;#39;
window.navigator.languages
//[&amp;#34;en-US&amp;#34;, &amp;#34;zh-CN&amp;#34;, &amp;#34;de&amp;#34;, &amp;#34;zh&amp;#34;, &amp;#34;en&amp;#34;]
//当界面语言改为&amp;#34;en-US&amp;#34;,`accept-language`首位为`zh-CN`的时候
window.navigator.language
//&amp;#39;zh-CN&amp;#39;(`accept-language`首选值)
window.navigator.languages
//[&amp;#34;zh-CN&amp;#34;, &amp;#34;de&amp;#34;, &amp;#34;zh&amp;#34;, &amp;#34;en-US&amp;#34;, &amp;#34;en&amp;#34;]
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Chrome: 获取方式和以上两个都不同。chrome 无视系统的区域和语言 - 格式格式，只依照自己浏览器的界面设置的菜单语言来处理。( 比如英文界面则按系统 ’en-US’ 格式返回字符串，中文界面则按系统 ’zh-CN’ 格式返回结果 )。当浏览器界面语言为 zh-CN,accept-language 首位为 en-US 的时候：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>window.navigator.language
//&amp;#39;zh-CN&amp;#39;
window.navigator.languages
//[&amp;#34;en-US&amp;#34;, &amp;#34;en&amp;#34;, &amp;#34;zh-CN&amp;#34;, &amp;#34;zh&amp;#34;, &amp;#34;ja&amp;#34;, &amp;#34;zh-TW&amp;#34;, &amp;#34;de-LI&amp;#34;, &amp;#34;de&amp;#34;, &amp;#34;pl&amp;#34;]
//当界面语言改为&amp;#34;en-US&amp;#34;时
window.navigator.language
//&amp;#39;en-US&amp;#39;(浏览器界面语言)
&lt;/code>&lt;/pre>&lt;h2 id="calendar--日历操作">Calendar | 日历操作&lt;/h2></description></item><item><title>Dayjs</title><link>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/dayjs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/dayjs/</guid><description>&lt;h1 id="dayjs">Dayjs&lt;/h1></description></item><item><title>Moment.js</title><link>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/moment.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/javascript-notes/01.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%97%B6%E9%97%B4%E4%B8%8E%E6%97%A5%E6%9C%9F/moment.js/</guid><description>&lt;h1 id="momentjshttpmomentjscomguides">&lt;a href="http://momentjs.com/guides/" target="_blank" rel="noopener">Moment.js&lt;/a>&lt;/h1>
&lt;p>Moment.js 为 JavaScript Date 对象提供了封装与统一好的 API 接口，并且提供了更多的功能。首先需要了解的是，Moment 提供的 moment 对象是可变的，即当我们对该对象执行类似于增减或者设置的时候，其对象本身的值会发生变化，譬如下面这段代码&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">moment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2016-01-01&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;week&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2016-01-08T00:00:00-06:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而如果我们不希望改变原有的值，特别是在需要创建多个时间日期对象的时候，我们可以利用 clone 方法&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">moment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2016-01-01&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">clone&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;week&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">a&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;2016-01-01T00:00:00-06:00&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>笔者是习惯在 Webpack 中进行打包，类似于 Node 下的安装方式&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 安装
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">npm&lt;/span> &lt;span class="nx">install&lt;/span> &lt;span class="nx">moment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">moment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;moment&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">moment&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你需要引入某个语言包，那么可以用如下方式&lt;/p>
&lt;pre tabindex="0">&lt;code>const moment = require(&amp;#39;moment&amp;#39;);
require(&amp;#39;moment/locale/cs&amp;#39;);
console.log(moment.locale()); // cs
&lt;/code>&lt;/pre>&lt;h2 id="parse">Parse&lt;/h2>
&lt;h3 id="timestamp">TimeStamp&lt;/h3>
&lt;pre tabindex="0">&lt;code>//毫秒
const day = moment(1318781876406);
//秒
const day = moment.unix(1318781876);
&lt;/code>&lt;/pre>&lt;h3 id="datetimestring">DateTimeString&lt;/h3>
&lt;pre tabindex="0">&lt;code>moment(&amp;#34;2010-10-20 4:30&amp;#34;, &amp;#34;YYYY-MM-DD HH:mm&amp;#34;); // parsed as 4:30 local time
moment(&amp;#34;2010-10-20 4:30 +0000&amp;#34;, &amp;#34;YYYY-MM-DD HH:mm Z&amp;#34;); // parsed as 4:30 UTC
moment(&amp;#34;2010 13&amp;#34;, &amp;#34;YYYY MM&amp;#34;).isValid(); // false (not a real month)
moment(&amp;#34;2010 11 31&amp;#34;, &amp;#34;YYYY MM DD&amp;#34;).isValid(); // false (not a real day)
moment(&amp;#34;2010 2 29&amp;#34;, &amp;#34;YYYY MM DD&amp;#34;).isValid(); // false (not a leap year)
moment(&amp;#34;2010 notamonth 29&amp;#34;, &amp;#34;YYYY MMM DD&amp;#34;).isValid(); // false (not a real month name)
&lt;/code>&lt;/pre>&lt;h2 id="manipulate">Manipulate&lt;/h2>
&lt;h3 id="getset">Get/Set&lt;/h3>
&lt;pre tabindex="0">&lt;code>moment().seconds(30) === new Date().setSeconds(30);
moment().seconds() === new Date().getSeconds();
moment().get(&amp;#39;year&amp;#39;);
moment().get(&amp;#39;month&amp;#39;); // 0 to 11
moment().get(&amp;#39;date&amp;#39;);
moment().get(&amp;#39;hour&amp;#39;);
moment().get(&amp;#39;minute&amp;#39;);
moment().get(&amp;#39;second&amp;#39;);
moment().get(&amp;#39;millisecond&amp;#39;);
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>moment().set(&amp;#39;year&amp;#39;, 2013);
moment().set(&amp;#39;month&amp;#39;, 3); // April
moment().set(&amp;#39;date&amp;#39;, 1);
moment().set(&amp;#39;hour&amp;#39;, 13);
moment().set(&amp;#39;minute&amp;#39;, 20);
moment().set(&amp;#39;second&amp;#39;, 30);
moment().set(&amp;#39;millisecond&amp;#39;, 123);
moment().set({&amp;#39;year&amp;#39;: 2013, &amp;#39;month&amp;#39;: 3});
&lt;/code>&lt;/pre>&lt;h3 id="addsubtract">Add&amp;amp;Subtract&lt;/h3>
&lt;pre tabindex="0">&lt;code>moment().add(Number, String);
moment().add(Duration);
moment().add(Object);
moment().add(7, &amp;#39;days&amp;#39;);
moment().subtract(Number, String);
moment().subtract(Duration);
moment().subtract(Object);
moment().subtract(7, &amp;#39;days&amp;#39;);
&lt;/code>&lt;/pre>&lt;h3 id="comparison">Comparison&lt;/h3>
&lt;pre tabindex="0">&lt;code>moment().isBefore(Moment|String|Number|Date|Array);
moment().isBefore(Moment|String|Number|Date|Array, String);
moment(&amp;#39;2010-10-20&amp;#39;).isBefore(&amp;#39;2010-12-31&amp;#39;, &amp;#39;year&amp;#39;); // false
moment(&amp;#39;2010-10-20&amp;#39;).isBefore(&amp;#39;2011-01-01&amp;#39;, &amp;#39;year&amp;#39;); // true
&lt;/code>&lt;/pre>&lt;h3 id="diff">Diff&lt;/h3>
&lt;pre tabindex="0">&lt;code>moment().diff(Moment|String|Number|Date|Array);
moment().diff(Moment|String|Number|Date|Array, String);
moment().diff(Moment|String|Number|Date|Array, String, Boolean);
const a = moment([2007, 0, 29]);
const b = moment([2007, 0, 28]);
a.diff(b, &amp;#39;days&amp;#39;) // 1
&lt;/code>&lt;/pre>&lt;h2 id="display">Display&lt;/h2>
&lt;h3 id="format">Format&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">moment&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// &amp;#34;2014-09-08T08:02:17-05:00&amp;#34; (ISO 8601)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">moment&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;dddd, MMMM Do YYYY, h:mm:ss a&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// &amp;#34;Sunday, February 14th 2010, 3:25:50 pm&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">moment&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;ddd, hA&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// &amp;#34;Sun, 3PM&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">moment&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;gibberish&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">format&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;YYYY MM DD&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// &amp;#34;Invalid date&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="relative-format">Relative Format&lt;/h3>
&lt;pre tabindex="0">&lt;code>moment([2007, 0, 29]).fromNow(); // 4 years ago
moment([2007, 0, 29]).fromNow(true); // 4 years
&lt;/code>&lt;/pre>&lt;h3 id="duration">Duration&lt;/h3>
&lt;pre tabindex="0">&lt;code>moment.duration(1, &amp;#34;minutes&amp;#34;).humanize(); // a minute
moment.duration(2, &amp;#34;minutes&amp;#34;).humanize(); // 2 minutes
moment.duration(24, &amp;#34;hours&amp;#34;).humanize(); // a day
&lt;/code>&lt;/pre>&lt;h2 id="i18n">i18n&lt;/h2></description></item></channel></rss>