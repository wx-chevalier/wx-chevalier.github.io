<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swift | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/cs-series/swift/</link><atom:link href="https://ng-tech.icu/books/cs-series/swift/index.xml" rel="self" type="application/rss+xml"/><description>Swift</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Swift</title><link>https://ng-tech.icu/books/cs-series/swift/</link></image><item><title>初窥与语法速览</title><link>https://ng-tech.icu/books/cs-series/swift/%E5%88%9D%E7%AA%A5%E4%B8%8E%E8%AF%AD%E6%B3%95%E9%80%9F%E8%A7%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-series/swift/%E5%88%9D%E7%AA%A5%E4%B8%8E%E8%AF%AD%E6%B3%95%E9%80%9F%E8%A7%88/</guid><description>&lt;h1 id="swift-初窥与语法速览">Swift 初窥与语法速览&lt;/h1>
&lt;p>Apple 在推出 Swift 时就将其冠以先进，安全和高效的新一代编程语言之名。前两点在 Swift 的语法和语言特性中已经表现得淋漓尽致：像是尾随闭包，枚举关联值，可选值和强制的类型安全等都是 Swift 显而易见的优点。&lt;/p>
&lt;h2 id="comparison">Comparison&lt;/h2>
&lt;p>近来 Swift 与 Rust 都挺好的，一个背靠 Apple，一个是 Mozilla 的亲儿子。不可否认这二者都是工程领域的集大成者，不过笔者认为 Swift 是会比 D 或者 Rust 具有更大的可用性与吸引力，当然，他们的瞄准的目标点也不一样。D 与 Rust 适合于那些长期使用 C++并且已经适应了要去掌握 N 多的语法与概念的，但是想要使用些更加清晰明了与安全的语言。这类型的开发者往往从事着类似于游戏引擎、编译器、加解密库、HTML 渲染引擎等等类似的工作。
Swift 呢，更多意义上是一门面向于应用编程的语言，它很容易上手，在某些方面它应该与 Go、Java、Python 以及 C#相提并论。不过 Swift 比这些会更容易开始学习，它的 helloworld 只需要一行代码就好了，并且它是支持函数的(不像 Java 那样完全的 OO)。你不需要学习任何的类与对象的知识就可以开始撰写简易的 Swift 的代码。基于此，Swift 是更合适用作一种教学语言的，它还有像脚本语言一样的交互环境，也就是 REPL 以及 Xcode 本身提供的 PlayGround。
综上所述，Swift 拥有着被广泛使用以及当做第一学习语言的潜质。并且，Swift 并不是像 PHP 那样的语法特性较少的语言，它拥有足够的深度来满足 Rust 或者 D 这样的用户的需求。与 Go 相比的话，Go 背靠 Google，也是个非常容易上手的语言，并且号称自带并发。Swift 在语法层次上会更加高级，并且 Swift 并没有使用 GC 机制，因此可以与 C 更好地相兼容。也就是说，你可以用 Swift 编写任何的库来供任何语言使用，只要这些语言可以使用 C 的库。这些特质保证了 Swift 拥有着比 Java、C#、Python、Ruby 以及 Go 更广阔的适用范围。后面这几个家伙，因为有 GC 的存在，不适合为其他语言提供基本库。我也很喜欢 Go，但是毫无疑问，Swift 会是个更加严谨与安全的语言。类型检测系统会帮助处理很多的错误，Go 目前是很合适于 Web 开发但是不适合科学计算与游戏引擎这些你必须要大量自定义操作符来处理向量啊、矩阵运算这样的。
因此，Swift 可以被定义为一个安全并且用户友好的语言，并且可以像脚本语言那样方便实验与使用。&lt;/p>
&lt;h3 id="performance">Performance&lt;/h3>
&lt;p>Swift 具有一门高效语言所需要具备的绝大部分特点。与 Ruby 或者 Python 这样的解释型语言不需要再做什么对比了，相较于其前辈的 Objective-C，Swift 在编译期间就完成了方法的绑定，因此方法调用上不再是类似于 Smalltalk 的消息发送，而是直接获取方法地址并进行调用。虽然 Objective-C 对运行时查找方法的过程进行了缓存和大量的优化，但是不可否认 Swift 的调用方式会更加迅速和高效。
另外，与 Objective-C 不同，Swift 是一门强类型的语言，这意味 Swift 的运行时和代码编译期间的类型是一致的，这样编译器可以得到足够的信息来在生成中间码和机器码时进行优化。虽然都使用 LLVM 工具链进行编译，但是 Swift 的编译过程相比于 Objective-C 要多一个环节 &amp;ndash; 生成 Swift 中间代码 (Swift Intermediate Language，SIL)。SIL 中包含有很多根据类型假定的转换，这为之后进一步在更低层级优化提供了良好的基础，分析 SIL 也是我们探索 Swift 性能的有效方法。
最后，Swift 具有良好的内存使用的策略和结构。Swift 标准库中绝大部分类型都是 struct，对值类型的 使用范围之广，在近期的编程语言中可谓首屈一指。原本值类型不可变性的特点，往往导致对于值的使用和修改意味着创建新的对象，但是 Swift 巧妙地规避了不必要的值类型复制，而仅只在必要时进行内存分配。这使得 Swift 在享受不可变性带来的便利以及避免不必要的共享状态的同时，还能够保持性能上的优秀。&lt;/p>
&lt;h4 id="编译器优化">编译器优化&lt;/h4>
&lt;p>Swift 编译器十分智能，它能在编译期间帮助我们移除不需要的代码，或者将某些方法进行内联 (inline) 处理。编译器优化的强度可以在编译时通过参数进行控制，Xcode 工程默认情况下有 Debug 和 Release 两种编译配置，在 Debug 模式下，LLVM Code Generation 和 Swift Code Generation 都不开启优化，这能保证编译速度。而在 Release 模式下，LLVM 默认使用 &amp;ldquo;Fastest, Smallest [-Os]&amp;quot;，Swift Compiler 默认使用 &amp;ldquo;Fast [-O]&amp;quot;，作为优化级别。我们另外还有几个额外的优化级别可以选择，优化级别越高，编译器对于源码的改动幅度和开启的优化力度也就越大，同时编译期间消 耗的时间也就越多。虽然绝大部分情况下没有问题，但是仍然需要当心的是，一些优化等级采用的是激进的优化策略，而禁用了一些检查。这可能在源码很复杂的情 况下导致潜在的错误。如果你使用了很高的优化级别，请再三测试 Release 和 Debug 条件下程序运行的逻辑，以防止编译器优化所带来的问题。
值得一提的是，Swift 编译器有一个很有用的优化等级：&amp;ldquo;Fast, Whole Module Optimization&amp;rdquo;，也即 -O -whole-module-optimization。在这个优化等级下，Swift 编译器将会同时考虑整个 module 中所有源码的情况，并将那些没有被继承和重载的类型和方法标记为 final，这将尽可能地避免动态派发的调用，或者甚至将方法进行内联处理以加速运行。开启这个额外的优化将会大幅增加编译时间，所以应该只在应用要发布的时候打开这个选项。
虽然现在编译器在进行优化的时候已经足够智能了，但是在面对编写得非常复杂的情况时，很多本应实施的优化可能失效。因此保持代码的整洁、干净和简单，可以让编译器优化良好工作，以得到高效的机器码。&lt;/p>
&lt;h2 id="注释与换行">注释与换行&lt;/h2>
&lt;h3 id="注释">注释&lt;/h3>
&lt;p>请将你的代码中的非执行文本注释成提示或者笔记以方便你将来阅读。Swift 的编译器将会在编译代码时自动忽略掉注释部分。&lt;/p>
&lt;p>Swift 中的注释与 C 语言的注释非常相似。单行注释以双正斜杠作(//)为起始标记:&lt;/p>
&lt;pre tabindex="0">&lt;code>// 这是一个注释
&lt;/code>&lt;/pre>&lt;p>你也可以进行多行注释，其起始标记为单个正斜杠后跟随一个星号(/&lt;em>)，终止标记为一个星号后跟随单个正斜杠(&lt;/em>/):&lt;/p>
&lt;pre tabindex="0">&lt;code>/* 这是一个, 多行注释 */
&lt;/code>&lt;/pre>&lt;p>与 C 语言多行注释不同，Swift 的多行注释可以嵌套在其它的多行注释之中。你可以先生成一个多行注释块，然后在这个注释块之中再嵌套成第二个多行注释。终止注释时先插入第二个注释块的终止标记，然后再插入第一个注释块的终止标记：&lt;/p>
&lt;pre tabindex="0">&lt;code>/* 这是第一个多行注释的开头 /* 这是第二个被嵌套的多行注释 */ 这是第一个多行注释的结尾 */
&lt;/code>&lt;/pre>&lt;p>通过运用嵌套多行注释，你可以快速方便的注释掉一大段代码，即使这段代码之中已经含有了多行注释块。&lt;/p>
&lt;h2 id="语法要点">语法要点&lt;/h2>
&lt;h3 id="-vs-">! VS ?&lt;/h3>
&lt;p>在 Swift 中经常看到!与?两个操作符，譬如在类型转换、可选类型构造中都用到，用 Apple 官方的话说：&lt;/p>
&lt;blockquote>
&lt;p>It may be easiest to remember the pattern for these operators in Swift as: ! implies “this might trap,” while ?indicates “this might be nil.”&lt;/p>
&lt;/blockquote>
&lt;p>就是!操作符表示我不管你编译器，我肯定要这么做，那么有可能导致运行时崩溃。而?操作符表示这个可能是 nil，你帮我查查有没有进行完备的空检查。&lt;/p>
&lt;h1 id="quick-start">Quick Start&lt;/h1>
&lt;h2 id="objective-c-混合编程">Objective-C 混合编程&lt;/h2>
&lt;blockquote>
&lt;p>参考资料&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="http://www.ituring.com.cn/tupubarticle/2687" target="_blank" rel="noopener">从 Objective-C 到 Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://blog.csdn.net/x32sky/article/details/30239503" target="_blank" rel="noopener"> swift 与 objective-c 混编&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://developer.apple.com/library/prerelease/ios/documentation/Swift/Conceptual/BuildingCocoaApps/MixandMatch.html" target="_blank" rel="noopener">Swift and Objective-C in the Same Project&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://files.jb51.net/file_images/article/201407/201472192358089.png" alt="Swift 与 Objective-C混合调用示意图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h3 id="swift-类引用-objective-c-文件">Swift 类引用 Objective-C 文件&lt;/h3>
&lt;p>因为 Swift 没有内嵌的头文件机制，因此 Swift 调用 Objective-C 需要一个名为“&amp;lt;工程名&amp;gt;-Bridging-Header.h”的桥接头文件。桥接头文件的作用是为 Swift 调用 Objective-C 对象搭建一个桥，它的命名必须是“&amp;lt;工程名&amp;gt;- Bridging-Header.h”，我们需要在桥接头文件中引入 Objective-C 头文件，所有的 Swift 类会自动引用这个头文件。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://www.ituring.com.cn/figures/2014/Swift/19.d18z.001.png" alt="桥接文件" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://img.blog.csdn.net/20140627164025671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaHVhbmdjaGVudGFv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="桥接文件设置" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>OJC 类如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ObjcFunc.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@interface&lt;/span> &lt;span class="nc">ObjcFunc&lt;/span> : &lt;span class="nc">NSObject&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-(&lt;/span>&lt;span class="n">NSString&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">sayHello:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSString&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">greeting&lt;/span> &lt;span class="nf">withName:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">NSString&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ObjcFunc.m
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># import &amp;#34;ObjcFunc.h&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"># import &amp;#34;CombinedProgram-Swift.h&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@implementation&lt;/span> &lt;span class="nc">ObjcFunc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">NSString&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">sayHello:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSString&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">greeting&lt;/span> &lt;span class="nf">withName:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">NSString&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="nl">stringWithFormat&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;Hi,%@ %@.&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">greeting&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>Swift 类中调用&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>import Foundation
@objc class SwiftFunc: NSObject {
func sayHello() -&amp;gt; Void {
var obj : ObjcFunc = ObjcFunc()
println(obj.sayHello(&amp;#34;Hello&amp;#34;, withName: &amp;#34;Swift&amp;#34;));
return
}
}
&lt;/code>&lt;/pre>&lt;h3 id="objective-c-类引用-swift-文件">Objective-C 类引用 Swift 文件&lt;/h3>
&lt;p>(1)在 Building Settings -&amp;gt; Packaging -&amp;gt; Defining 中选定 Module Name；&lt;/p>
&lt;p>(2)在 OJC 的头文件中引入：&lt;code>#import &amp;quot;{ModuleName}-swift.h&amp;quot;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="n">SwiftFunc&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">obj&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">SwiftFunc&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="kd">init&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">obj&lt;/span> &lt;span class="n">sayHello&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>有时候会发现 Xcode 无法自动生成*-Swift.h 文件，可以参考&lt;a href="http://stackoverflow.com/questions/24062618/swift-to-objective-c-header-not-created-in-xcode-6" target="_blank" rel="noopener">StackOverflow&lt;/a>上的这篇文章。该文章总结下来，我们需要进行以下两大步检测：&lt;/p>
&lt;p>(1)检测你的 Xcode 的配置&lt;/p>
&lt;pre tabindex="0">&lt;code>Product Module Name : myproject
Defines Module : YES
Embedded Content Contains Swift : YES
Install Objective-C Compatibility Header : YES
sObjective-C Bridging Header : $(SRCROOT)/Sources/SwiftBridging.h
&lt;/code>&lt;/pre>&lt;p>(2)检查你的 Swift 类是否正规&lt;/p>
&lt;p>要保证你的 Swfit 类中已经使用@objc 关键字声明了一个继承自 NSObject 的类。Xcode 不会为存在任何编译错误的类进行编译操作。&lt;/p>
&lt;p>(3)忽略 Xcode 的报错，先编译一下&lt;/p>
&lt;h1 id="流程控制">流程控制&lt;/h1>
&lt;h2 id="分支选择">分支选择&lt;/h2>
&lt;h3 id="if">if&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="mi">2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The math checks out&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="if-let">if-let&lt;/h3>
&lt;p>可以用 if-let 语句检查一个可选变量是否包 含值。如果包含,则将这个值指定给一个常量变量,然后运行某段代码。这样可以减少很多行代码,同时又能够保证安全性&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">conditionalString&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;a string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">theString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">conditionalString&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The string is &amp;#39;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">theString&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#39;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The string is nil&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出 &amp;#34;The string is &amp;#39;a string&amp;#39;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时 if-let 也支持更复杂一点的 where 判断：&lt;/p>
&lt;pre tabindex="0">&lt;code>var conditionalString : String? = &amp;#34;a string&amp;#34;
if let theString = conditionalString where theString == &amp;#34;a&amp;#34;{
print(&amp;#34;The string is &amp;#39;\(theString)&amp;#39;&amp;#34;)
} else {
print(&amp;#34;The string is nil&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;h3 id="guard保镖模式">guard:保镖模式&lt;/h3>
&lt;p>与 if 语句相同的是，guard 也是基于一个表达式的布尔值去判断一段代码是否该被执行。与 if 语句不同的是，guard 只有在条件不满足的时候才会执行这段代码。你可以把 guard 近似的看做是 Assert，但是你可以优雅的退出而非崩溃。&lt;/p>
&lt;pre tabindex="0">&lt;code>func fooGuard(x: Int?) {
guard let x = x where x &amp;gt; 0 else {
// 变量不符合条件判断时，执行下面代码
return
}
// 使用x
x.description
}
&lt;/code>&lt;/pre>&lt;p>是对你所期望的条件做检查，而非不符合你期望的。又是和 assert 很相似。如果条件不符合，guard 的 else 语句就运行，从而退出这个函数。
如果通过了条件判断，可选类型的变量在 guard 语句被调用的范围内会被自动的拆包 - 这个例子中该范围是 fooGuard 函数内部。这是一个很重要，却有点奇怪的特性，但让 guard 语句十分实用。
对你所不期望的情况早做检查，使得你写的函数更易读，更易维护。
对非可选类型的变量这种用法也是奏效的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">fooNonOptionalGood&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">guard&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 变量不符合条件判断时，执行下面代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">fooNonOptionalBad&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 变量不符合条件判断时，执行下面代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="循环">循环&lt;/h2>
&lt;h3 id="for">for&lt;/h3>
&lt;h3 id="for-in">for-in&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">loopingArray&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">loopSum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">loopingArray&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">loopSum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">loopSum&lt;/span> &lt;span class="c1">// = 15&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">firstCounter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">..&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">firstCounter&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 循环9次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">secondCounter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 注意是三个句点,不是两个&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">secondCounter&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 循环10次&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">sum&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nv">i&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sum&lt;/span> &lt;span class="c1">// = 3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="while">while&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">countDown&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="n">countDown&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">countDown&lt;/span>&lt;span class="o">--&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">countDown&lt;/span> &lt;span class="c1">// = 0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">countUP&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">countUp&lt;/span>&lt;span class="o">++&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="n">countUp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">countUp&lt;/span> &lt;span class="c1">// = 5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="defer代码块延迟执行">defer:代码块延迟执行&lt;/h2>
&lt;p>defer 关键字可以用来包裹一段代码，这个代码块将会在当前作用域结束的时候被调用。这通常被用来对当前的代码进行一些清理工作，比如关闭打开的文件等。&lt;/p>
&lt;p>可以在同一个作用域中指定多个 defer 代码块，在当前作用域结束时，它们会以相反的顺序被调用，即先定义的后执行，后定义的先执行。&lt;/p>
&lt;p>例如下面的代码：&lt;/p>
&lt;pre tabindex="0">&lt;code>
openFile()
defer {
// defer block 1
closeFile()
}
startPortListener(42)
defer {
// defer block 2
stopPortListener(42)
}
&lt;/code>&lt;/pre>&lt;p>这段代码在作用域结束的时候，第二个 defer 块将首先被调用，其次再调用第一个 defer 块。&lt;/p>
&lt;h1 id="异常处理">异常处理&lt;/h1>
&lt;h2 id="异常捕获">异常捕获&lt;/h2>
&lt;h3 id="try">try?&lt;/h3>
&lt;p>可以使用 try?通过将错误转换成一个可选值来处理错误。如果在评估 try?表达式时一个错误被抛出，那么表达式的值就是 nil。例如下面代码中的 x 和 y 具有相同的值：&lt;/p>
&lt;pre tabindex="0">&lt;code>func someThrowingFunction() throws -&amp;gt; Int {
// ...
}
let x = try? someThrowingFunction()
let y: Int?
do {
y = try someThrowingFunction()
} catch {
y = nil
}
&lt;/code>&lt;/pre>&lt;p>如果 someThrowingFunction()抛出一个错误，x 和 y 的值是 nil。否则 x 和 y 的值就是该函数的返回值。注意，无论 someThrowingFunction()的返回值类型是什么类型，x 和 y 都是这个类型的可选类型。例子中此函数返回一个整型，所以 x 和 y 是可选整型。
如果你想对所有的错误都采用同样的方式来处理，用 try?就可以让你写出简洁的错误处理代码。例如，下面的代码用几种方式来获取数据，如果所有方式都失败了则返回 nil：&lt;/p>
&lt;pre tabindex="0">&lt;code>func fetchData() -&amp;gt; Data? {
if let data = try? fetchDataFromDisk() { return data }
if let data = try? fetchDataFromServer() { return data }
return nil
}
&lt;/code>&lt;/pre>&lt;p>譬如以 JSON 解析为例，说明 try？用法的便捷性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fromData&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">TodoList&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">guard&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">jsonDict&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="n">NSJSONSerialization&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">JSONObjectWithData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">AllowFragments&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">AnyObject&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// todoListDict is now moved up here&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">todoListDict&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;todos&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">AnyObject&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InvalidJSON&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">todoItems&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">todoListDict&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flatMap&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">TodoItemParser&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fromData&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">$0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">TodoList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">todoItems&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InvalidJSON&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">TodoListParser&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">enum&lt;/span> &lt;span class="nc">Error&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ErrorType&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">InvalidJSON&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fromData&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSData&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kr">throws&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">TodoList&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">guard&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">jsonDict&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="n">NSJSONSerialization&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">JSONObjectWithData&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">AllowFragments&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">AnyObject&lt;/span>&lt;span class="p">],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Notice the extra question mark here!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">todoListDict&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">?[&lt;/span>&lt;span class="s">&amp;#34;todos&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">AnyObject&lt;/span>&lt;span class="p">]]&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">Error&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">InvalidJSON&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">todoItems&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">todoListDict&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flatMap&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">TodoItemParser&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">fromData&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">$0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">TodoList&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">items&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">todoItems&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>调试与测试</title><link>https://ng-tech.icu/books/cs-series/swift/%E8%B0%83%E8%AF%95%E4%B8%8E%E6%B5%8B%E8%AF%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-series/swift/%E8%B0%83%E8%AF%95%E4%B8%8E%E6%B5%8B%E8%AF%95/</guid><description>&lt;h1 id="debug">Debug&lt;/h1>
&lt;h2 id="执行时间">执行时间&lt;/h2>
&lt;pre tabindex="0">&lt;code>let start = CACurrentMediaTime()
// ...
let end = CACurrentMediaTime()
print(&amp;#34;测量时间：\(end - start)&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>为了方便使用，我们还可以将这段代码封装到一个方法中，这样我们就能在项目中需要测试性能的地方方便地使用它了：&lt;/p>
&lt;pre tabindex="0">&lt;code>func measure(f: ()-&amp;gt;()) {
let start = CACurrentMediaTime()
f()
let end = CACurrentMediaTime()
print(&amp;#34;测量时间：\(end - start)&amp;#34;)
}
measure {
doSomeHeavyWork()
}
&lt;/code>&lt;/pre>&lt;p>CACurrentMediaTime 和 log 的方法适合于我们对既有代码进行探索，另一种有效的方法是使用 Instruments 的 Time Profiler 来在更高层面寻找代码的性能弱点。将程序挂载到 Time Profiler 后，每一个方法调用的耗时都将被记录。
当我们寻找到需要进行优化的代码路径后，为其建立一个单元测试来持续地检测代码的性能是很好的做法。在 Xcode 中默认的测试框架 XCTest 提供了检测并汇报性能的方法：measureBlock。通过将测试的代码块放到 measureBlock 中，Xcode 在测试时就会多次运行这段代码，并统计平均耗时。更方便的是，你可以设定一个基准，Xcode 会记录每次的耗时并在性能没有达到预期时进行提醒。这保证了随着项目开发，关键的代码路径不会发生性能上的退化。&lt;/p>
&lt;pre tabindex="0">&lt;code>func testPerformance() {
measureBlock() {
// 需要性能测试的代码
}
}
&lt;/code>&lt;/pre>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://onevcat.com/assets/images/2016/test-measure.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>泛型</title><link>https://ng-tech.icu/books/cs-series/swift/%E6%B3%9B%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-series/swift/%E6%B3%9B%E5%9E%8B/</guid><description>&lt;ul>
&lt;li>&lt;a href="http://austinzheng.com/2015/09/29/swift-generics-pt-2/" target="_blank" rel="noopener">Generics in Swift&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="swift-中的泛型编程">Swift 中的泛型编程&lt;/h1>
&lt;p>本文中，笔者旨在对于 Swift 中的泛型编程进行一个综合性描述。读者可以查看&lt;a href="http://austinzheng.com/2015/01/02/swift-generics-pt-1/" target="_blank" rel="noopener">上一篇&lt;/a> 系列中的描述来看之前笔者的论文。泛型编程是编程方式的一种，主要是一些譬如类、结构体以及枚举这样的复杂类型以及函数可以使用类型参数进行定义(type parameters)。类型参数可以看做是真实类型的占位符，当泛型或者函数被使用时才会被真实类型替换。&lt;/p>
&lt;p>在 Swift 中，对于泛型编程最直观的表现当属 Array 这个类型。在 Objective-C 中，Array 的示例 NSArray 可以包含任意类型的对象。但是，Swift 中的 Array 类型需要在声明时即指定它们包含的元素类型，，譬如 Array&lt;Int>, Array&lt;UIView>。Array 与 Int 都是一种数据类型，泛型机制允许这两种类型有机组合起来从而能够传递更多的额外的信息。&lt;/p>
&lt;p>备注：在 Swift 中惯用的声明 Array 包含了 Foo 类型的用法是&lt;code>[Foo]&lt;/code>这种语法，而本文中使用&lt;code>Array&amp;lt;Foo&amp;gt;&lt;/code>写法旨在帮助理解以及强调 Array 是一个通用泛型。&lt;/p>
&lt;h3 id="why-generics为什么使用泛型">Why generics(为什么使用泛型)？&lt;/h3>
&lt;p>这里列举出几个静态类型语言中使用泛型编程的原因：&lt;/p>
&lt;ul>
&lt;li>类型安全：类似于 Array 这样的容器类型，可以给出它们存放的具体的元素的类型，从而告知编译器可以插入容器中的对象的类型以及从容器中返回的对象的类型。这种机制作用于所有可以被当做 Array 参数的类型，并且也作用于类型之间的关系。&lt;/li>
&lt;li>减少冗余代码：有些情况下需要对多个数据类型进行相同的操作，可以用一个泛型方程来代替多个不同类型参数或者返回值的重复的方程。这样可以避免潜在的代码错误等等。&lt;/li>
&lt;li>灵活的依赖库：第三方库可以暴露一些接口，从而避免使用这些接口的开发者被强制使用或者类型或者返回值为一个固定的类型。它们可以使用泛型进行更加抽象地编程，举例来说，泛型会允许一个接口来接受不仅仅是一个 Array 参数，而是一个 Collection 参数。&lt;/li>
&lt;/ul>
&lt;h1 id="generic-entities泛型实体">Generic entities(泛型实体)&lt;/h1>
&lt;p>Swift 中的泛型编程主要表现在以下两个不同的情况下：当定义某个类型或者定义某个函数时。泛型类型的特性以及&lt;code>&amp;lt;&lt;/code>与&lt;code>&amp;gt;&lt;/code>这两个关键字往往意味着某个类型或者函数是泛型。&lt;/p>
&lt;h2 id="generic-types泛型类型">Generic types(泛型类型)&lt;/h2>
&lt;p>Swift 中主要的三个用户可自定义的类型可以被当做泛型，下面就以 Result 枚举类型为例，该类型中存放了表征成功的 Success 以及表征失败的 Failure：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">enum&lt;/span> &lt;span class="nc">Result&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">Failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">U&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Result 类型之后有两个类型参数: T 以及 U。这些类型参数将会在创建实例时被替换为真实的类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">aSuccess&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">aFailure&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Result&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">Failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;temperature too high&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>泛型类型的类型参数可以被用于以下的几个方面：&lt;/p>
&lt;ul>
&lt;li>作为属性的类型&lt;/li>
&lt;li>作为枚举体中的关联类型&lt;/li>
&lt;li>作为某个方法的返回值或者参数&lt;/li>
&lt;li>作为构造器的参数类型&lt;/li>
&lt;li>作为另一个泛型的类型参数，譬如&lt;code>Array&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>泛型可以在以下两种方式中被初始化：&lt;/p>
&lt;ul>
&lt;li>在创建新的实例时，类型参数被用户给出的真实的数据类型替换。&lt;/li>
&lt;li>类型被推导得出，通过调用初始化器或者静态方法来创建某个实例。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Queue&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// First way to instantiate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">a1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">a2&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">staticFactoryMethod&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// or just .staticFactoryMethod()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Second way to instantiate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">b1&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">b2&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">Int&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">staticFactoryMethod&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，像 T 这样的类型参数在类型定义时出现，无论这个类型何时被调用，这些类型参数都会被替换为真实的类型。举例而言，&lt;code>Array&amp;lt;String&amp;gt;&lt;/code>或者&lt;code>Array&amp;lt;UIWindow&amp;gt;&lt;/code>，便是以固定类型初始化的数组。而如果是像&lt;code>Array&amp;lt;T&amp;gt;&lt;/code>这样的，它便一直处于由其他类型或者函数作为类型参数定义的上下文中。&lt;/p>
&lt;h2 id="generic-functions泛型函数">Generic functions(泛型函数)&lt;/h2>
&lt;p>函数、方法、属性、下标以及初始化器都可以当做泛型进行处理，它们自身可以成为泛型或者存在于某个泛型类型的上下文中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Given an item, return an array with that item repeated n times&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">duplicate&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numberOfTimes&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">buffer&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">..&lt;/span>&lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">buffer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">item&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">buffer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样的，类型参数是定义在&lt;code>&amp;lt;&lt;/code>与&lt;code>&amp;gt;&lt;/code>紧跟在函数名之后。它主要可以用于以下几个方面：&lt;/p>
&lt;ul>
&lt;li>作为某个函数的参数&lt;/li>
&lt;li>作为函数的返回值&lt;/li>
&lt;li>作为另一个泛型类型的类型参数，譬如&lt;code>T&lt;/code>可以作为&lt;code>Array&amp;lt;T?&amp;gt;&lt;/code>中的一部分&lt;/li>
&lt;/ul>
&lt;p>当然，如果所有的类型参数都是未用状态编译器会不太友好。而泛型方法可以同时定义在泛型类型与非泛型类型上：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Result&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Transform the value of the &amp;#39;Result&amp;#39; using one of two mapping functions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">transform&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">V&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="kr">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">U&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="kc">self&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">Success&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kr">left&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">Failure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">let&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kr">right&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述中的&lt;code>transform&lt;/code>方法就是泛型方法，存放于泛型类型&lt;code>Result&lt;/code>中。除了由 Result 中定义的类型参数 T、U，泛型方法本身也定义了一个泛型参数 V。当调用一个泛型方程时，不一定需要指明清楚传入的类型参数。编译器的类型推导接口会自动根据参数与返回类型推导出相关信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Example use of the &amp;#39;duplicate:numberOfTimes:&amp;#39; function defined earlier.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// T is inferred to be Int.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">duplicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">52&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numberOfTimes&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>实际上，尝试去清楚地设置参数类型还会引发错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Does not compile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Error: &amp;#34;Cannot explicitly specialize a generic function&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">duplicate&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">numberOfTimes&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="associated-types关联类型">Associated types(关联类型)&lt;/h2>
&lt;p>Swift 中的 Protocol 不可以使用类型参数定义泛型，不过 Protocol 可以使用&lt;code>typealias&lt;/code>关键字来定义一些关联类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// A protocol for things that can accept food.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">FoodEatingType&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">typealias&lt;/span> &lt;span class="n">Food&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">isSatiated&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">feed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">food&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Food&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个实例中，Food 是定义在 FoodEatingType 协议中的关联类型，而某个协议中的关联类型数目可以根据实际的需求数量定义。&lt;/p>
&lt;p>关联类型，类似于类型参数，都是一种占位符。而后面如果某个类需要实现这个协议，则需要确定&lt;code>Food&lt;/code>的具体类型，是 Hay 还是 Rabbit。具体的做法就是继承并且实现协议的属性与方法，并在实现时再判断应该用哪些真实的数据类型去替换这些关联类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Koala&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">FoodEatingType&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">foodLevel&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">isSatiated&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">foodLevel&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Koalas are notoriously picky eaters&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">feed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">food&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Eucalyptus&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">isSatiated&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">foodLevel&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于&lt;code>Koala&lt;/code>这个具体的实现者，关联类型 Food 被定义为了&lt;code>Eucalyptus&lt;/code>，换言之，也就是&lt;code>Koala.Food&lt;/code>被定义为了&lt;code>Eucalyptus&lt;/code>。如果某个类型实现了多个协议，那么对于每个协议中的关联类型也都必须实现。而如果某个继承的类型也是个泛型，也可以使用类型参数去帮助确定关联类型：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Gourmand Wolf is a picky eater and will only eat his or her favorite food.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Individual wolves may prefer different foods, though.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">GourmandWolf&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">FoodType&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">FoodEatingType&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">isSatiated&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">feed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">food&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">FoodType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">meela&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">GourmandWolf&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Rabbit&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">rabbit&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Rabbit&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">meela&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">feed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rabbit&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上述代码中, &lt;code>GourmandWolf&amp;lt;Goose&amp;gt;.Food&lt;/code> 即 &lt;code>Goose&lt;/code>, 而 &lt;code>GourmandWolf&amp;lt;Sheep&amp;gt;.Food&lt;/code> 即 &lt;code>Sheep&lt;/code>。顺便说一句，协议中的关联类型虽然属于泛型，但也可以为其添加一些约束或者父类。譬如我们定义的某个协议中为 Heap 添加了一些列的操作，并且要保证所有的 Heap 的 Key 是可比较的，即必须是 Comparable 的子类或者实现，那么可以添加如下约束：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Types that conform represent simple max-heaps which use their elements as keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">MaxHeapType&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Elements must support comparison ops; e.g. &amp;#39;a is greater than b&amp;#39;.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">typealias&lt;/span> &lt;span class="n">Element&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Comparable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Element&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">findMax&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">Element&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">deleteMax&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="type-constraints类型约束">Type constraints(类型约束)&lt;/h1>
&lt;p>截至目前，我们提及的泛型，诸如 T 以及 U 可以用任意类型来替换。而标准库中的 Array 类型即是这样一种无任何约束的典型，可以由其类型参数来决断。譬如下面一个例子中，需要编写一个函数，输入一个数组而获取数组中最大的那个值并且返回：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Doesn&amp;#39;t compile.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">findLargestInArray&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">isEmpty&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">soFar&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">1.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">soFar&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">soFar&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">soFar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">soFar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过这样毫无限制的泛型对于编译器是非常不友好的，如上述代码中需要进行一个比较，即&lt;code>array[i] &amp;gt; soFar&lt;/code>，而我们只知道&lt;code>array[i]&lt;/code>是类型 T，并且&lt;code>soFar&lt;/code>也是类型 T。但是编译器根本不知道这个类型 T 能否进行比较。譬如我们创建一个空的结构体&lt;code>Foo&lt;/code>，并且把它当做类型参数传了进来，那么我们压根不知道&lt;code>&amp;gt;&lt;/code>这个比较运算符能否起作用。&lt;/p>
&lt;p>在上文对于 Protocol 的讨论中，我们已经尝试使用&lt;code>:&lt;/code>为某个关联类型设置一些约束，而在刚才的例子中，如果传入的 String 类型是可以正常编译的，但是一旦传入的是 NSView 类型，则不能正常编译了。而我们可以以如下方式添加约束：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Note that &amp;lt;T&amp;gt; became &amp;lt;T : Comparable&amp;gt;, meaning that whatever type fills in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &amp;#39;T&amp;#39; must conform to Comparable.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">findLargestInArray&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Comparable&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">isEmpty&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">soFar&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">1.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">soFar&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">soFar&lt;/span> &lt;span class="p">?&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">soFar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">soFar&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Example usage:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">arrayToTest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// We&amp;#39;re calling &amp;#39;findLargestInArray()&amp;#39; with T = Int.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">findLargestInArray&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arrayToTest&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the largest element in the array is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;the array was empty...&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// prints: &amp;#34;the largest element in the array is 100&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这是因为，在某种意义上，存在着一种悖论，越限制类型参数与添加约束，用户越能方便地使用这些参数。不加任何限制地类型参数往往只能使用在简单地交换或者从集合中添加或者删除某些元素。&lt;/p>
&lt;h2 id="简单约束">简单约束&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">example&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">U&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Equatable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Hashable&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">baz&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果需要对泛型进行细粒度的控制，首先来讨论下在哪些地方可以进行控制处理：&lt;/p>
&lt;ul>
&lt;li>类似于 U,V 这样的类型参数，即上文中的普通的泛型参数&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>类型参数的关联类型，即上文中协议里的关联类型。&lt;/li>
&lt;/ul>
&lt;p>Swift 中提供了以下三个类型的约束：&lt;/p>
&lt;ul>
&lt;li>&lt;code>T : SomeProtocol&lt;/code>：类型 T 必须遵从协议&lt;code>SomeProtocol&lt;/code>。需要注意，使用&lt;code>protocol&amp;lt;Foo,Bar&amp;gt;&lt;/code>。&lt;/li>
&lt;li>&lt;code>T==U&lt;/code>：类型参数 T 必须是类型参数或者关联类型 U。&lt;/li>
&lt;li>&lt;code>T:SomeClass&lt;/code>:T 必须是一个类，更加具体而言，T 必须是 SomeClass 的一个实例或者它的子类。&lt;/li>
&lt;/ul>
&lt;h1 id="putting-it-all-together">Putting it all together&lt;/h1>
&lt;p>上文中已经介绍了基本的泛型的用法和约束，而对于泛型类型的签名可以综合使用如下：&lt;/p>
&lt;ul>
&lt;li>声明类型参数，如果愿意的话，最好每个类型参数都要声明遵循某个协议。&lt;/li>
&lt;li>使用&lt;code>where&lt;/code>关键字。&lt;/li>
&lt;li>使用逗号分割声明约束。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">Foo&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">typealias&lt;/span> &lt;span class="n">Key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">typealias&lt;/span> &lt;span class="n">Element&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">Bar&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">typealias&lt;/span> &lt;span class="n">RawGeneratorType&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">example&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Foo&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">V&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Bar&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Key&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">RawGeneratorType&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">U&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Element&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">arg1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg3&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">V&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">U&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不要惊慌，我们会一步一步地介绍这些泛型的用法。在&lt;code>where&lt;/code>关键字之前，我们声明了三个类型参数：T，U 以及 V。其中 T 必须遵循 Foo 协议。而在 where 关键字之后，我们声明了四个约束：&lt;/p>
&lt;ul>
&lt;li>V 必须遵循 Foo 协议。&lt;/li>
&lt;li>V 也必须实现了 Bar 协议。&lt;/li>
&lt;li>由于 T 实现了 Foo 协议，T 有一个关联类型为&lt;code>T.Key&lt;/code>。V 还有另一个关联类型，V.RawGeneratorType。这两个类型必须是相同的：T.Key == V.RawGeneratorType。&lt;/li>
&lt;li>因为 V 实现了协议 Foo，V 包含一个关联类型 V.Element。这个类型必须与 U 一致，U == V.Element。&lt;/li>
&lt;/ul>
&lt;p>综上所述，无论何时使用&lt;code>example()&lt;/code>函数时，必须要选择合适的 T、U 以及 V 类型。&lt;/p>
&lt;h1 id="constrained-extensions">Constrained extensions&lt;/h1>
&lt;p>Swift 2 中新近提出了约束扩展的概念，一个更强大的能够使用泛型的语法特性。在 Swift 中，扩展允许向任意类型，即使尚未定义的类型中添加方法。同样允许向某个协议中添加默认的实现方法。同样的，这样的基于约束的扩展可以方便某些泛型的用法：&lt;/p>
&lt;ul>
&lt;li>对于像 Array 这样的泛型，可以在类型参数符合某个特定的约束的情况下添加某个方法。&lt;/li>
&lt;li>对于像 CollectionType 这样包含关联类型的协议，可以当某个关联类型符合某个约束时添加默认的实现方法。&lt;/li>
&lt;/ul>
&lt;h2 id="syntax-and-limitations语法与限制">Syntax and limitations(语法与限制)&lt;/h2>
&lt;p>基于约束的扩展语法如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Methods in this extension are only available to Arrays whose elements are&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// both hashable and comparable.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Array&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">Element&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Hashable&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">Element&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Comparable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>where 关键字跟随在类型参数之后，而后跟着以逗号分割的一系列泛型类型和参数。不过这其中的约束中并不能限定为非泛型，即：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// An extension on Array&amp;lt;Int&amp;gt;.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Error: &amp;#34;Same-type requirement makes generic parameter &amp;#39;Element&amp;#39; non-generic&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Array&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">Element&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时，也不能进行协议的传递：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">MyProtocol&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Only Arrays with comparable elements conform to MyProtocol.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Error: &amp;#34;Extension of type &amp;#39;Array&amp;#39; with constraints cannot have an inheritance clause&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">extension&lt;/span> &lt;span class="nc">Array&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">MyProtocol&lt;/span> &lt;span class="k">where&lt;/span> &lt;span class="n">Element&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Comparable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>函数</title><link>https://ng-tech.icu/books/cs-series/swift/%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-series/swift/%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="函数">函数&lt;/h1>
&lt;h2 id="函数定义">函数定义&lt;/h2>
&lt;p>当你定义一个函数时，你可以选择性地定义一个或多个名称，类型值作为函数的输入(称为形参)，或者定义一个函数结束后返回值的类型(称之为返回型)。每一个函数都有一个函数名，用来描述了函数执行的任务。要使用一个函数时，可使用它的名称进行“调用”，并通过它的输入值(称为实参&amp;ndash;argument)来匹配函数的参数类型。&lt;strong>一个函数的实参(arguments)必须始终和函数形参(parameter)顺序一致&lt;/strong>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">personName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">greeting&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello, &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">personName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">greeting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Anna&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// prints &amp;#34;Hello, Anna!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sayHello&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Brian&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// prints &amp;#34;Hello, Brian!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数返回值">函数返回值&lt;/h3>
&lt;p>由于 Swift 中存在元组类型(tuples)，所以 Swift 允许有多个返回值或者直接无返回值。&lt;/p>
&lt;h4 id="无返回值函数">无返回值函数&lt;/h4>
&lt;p>函数不需要定义一个返回类型。这里有一个版本的 sayHello 函数，称为 waveGoodbye，它会打印自己的 String 值而不是返回它：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">sayGoodbye&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">personName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Goodbye, &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">personName&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sayGoodbye&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Dave&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// prints &amp;#34;Goodbye, Dave!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>严格地说，sayGoodbye 函数确实还返回一个值，即使没有定义返回值。没有定义返回类型的函数返回了一个 Void 类型的特殊值。这仅是一个空元组，这里边没有元素，可以被写成()。&lt;/p>
&lt;h4 id="单返回值函数">单返回值函数&lt;/h4>
&lt;p>两个参数一个返回值，都为 Int&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">thirdFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">firstValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">secondValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">firstValue&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">secondValue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">thirdFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="多返回值函数">多返回值函数&lt;/h4>
&lt;p>可以使用一个元组类型作为函数的返回类型，来返回一个由多个值组成的复合返回值。下面的例子定义了一个名为 count 函数，用来计算字符串中基于标准美式英语的元音、辅音以及字符的数量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">count&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">vowels&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">consonants&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">others&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">vowels&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">consonants&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">others&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">character&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">character&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">lowercaseString&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;e&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;i&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;o&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;u&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">vowels&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s">&amp;#34;b&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;c&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;f&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;g&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;h&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;j&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;k&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;l&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;m&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;p&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;q&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;t&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;w&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;x&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;y&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;z&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">consonants&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">++&lt;/span>&lt;span class="n">others&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">vowels&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">consonants&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">others&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上文中关于元组部分讲解时也提及，可以直接利用下标或者属性名来访问元组中值，因此，多返回值也可以这么使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">fourthFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">firstValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">secondValue&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">doubled&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">quadrupled&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">firstValue&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">secondValue&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fourthFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 用数字访问:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fourthFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="c1">// = 16&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 其他相同,只是使用了名字:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">fourthFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">quadrupled&lt;/span> &lt;span class="c1">// = 16&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="函数变量">函数变量&lt;/h3>
&lt;pre tabindex="0">&lt;code>var numbersFunc: (Int, Int) -&amp;gt; Int;
// numbersFunc现在可以存储任何接受两个Int并返回一个Int的函数
numbersFunc = addNumbers
numbersFunc(2, 3) // = 5
&lt;/code>&lt;/pre>&lt;h2 id="参数调用">参数调用&lt;/h2>
&lt;h3 id="本地形参与外部形参">本地形参与外部形参&lt;/h3>
&lt;blockquote>
&lt;p>注意，全局函数中不可以使用外部形参&lt;/p>
&lt;/blockquote>
&lt;p>所有上面的函数都为其形参定义了形参名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">someFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parameterName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// function body goes here, and can use parameterName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// to refer to the argument value for that parameter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然而，这些参数名的仅能在函数本身的主体内使用，不能在调用函数时使用。这种形参类型名称被称之为本地形参名(local parameter name)，因为它们只能在函数的主体中使用。有时当你调用一个函数将每个形参进行命名是非常有用的，以表明你把每个实参传递给函数的目的。如果你希望使用你函数的人在调用函数时提供形参名称，那除了本地形参名外，你还要为每个形参定义一个外部形参名称。你写一个外部形参名称在它所支持的本地形参名称之前,之间用一个空格来分隔:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">someFunction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">externalParameterName&lt;/span> &lt;span class="n">localParameterName&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// function body goes here, and can use localParameterName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// to refer to the argument value for that parameter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">toString&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">withJoiner&lt;/span> &lt;span class="n">joiner&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">joiner&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">toString&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">withJoiner&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;, &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// returns &amp;#34;hello, world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="外部参数名称速记20-之后已经废弃">外部参数名称速记#:2.0 之后已经废弃&lt;/h4>
&lt;p>在 Swift 2.0 中已经不需要使用#来进行外部参数名称速记&lt;/p>
&lt;blockquote>
&lt;p>Swift gives the first parameter name in a method a local parameter name by default, and gives the second and subsequent parameter names both local and external parameter names by default.&lt;/p>
&lt;/blockquote>
&lt;p>如果你想为一个函数提供一个外部形参名，然而本地形参名已经使用了一个合适的名称了，那你就不需要两次书写该形参的名称。相反，你可以写一次名字，并用一个 hash 符号(＃)作为名称的前缀。这就告诉 Swift 使用名称相同的本地行参名称和外部形参名称。这个例子定义了一个名为 containsCharacter 的函数,通过在本地形参名前添加 hash 符号(#)来定义外部形参名称。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">containsCharacter&lt;/span>&lt;span class="p">(#&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">#&lt;/span>&lt;span class="n">characterToFind&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Character&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">character&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">character&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">characterToFind&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该函数对形参名的选择使得其函数主题更加清晰易读，并且在调用该函数时也不会有歧义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">containsAVee&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">containsCharacter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;aardvark&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">characterToFind&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;v&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// containsAVee equals true, because &amp;#34;aardvark&amp;#34; contains a &amp;#34;v&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="使用_来避免使用下标">使用_来避免使用下标&lt;/h4>
&lt;pre tabindex="0">&lt;code>func foo(s1: String, _ s2: String) -&amp;gt; String{
return s1 + s2;
}
&lt;/code>&lt;/pre>&lt;p>在正常的调用 foo 函数时，第二个及以后参数时要使用外部参数名。而使用_描述之后可以避免使用外部参数名：&lt;/p>
&lt;pre tabindex="0">&lt;code>bar.foo(&amp;#34;Hello&amp;#34;, &amp;#34;World&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>不过需要注意的是，在 init 函数中，从第一个参数开始，就需要使用默认的外部参数名，即：&lt;/p>
&lt;pre tabindex="0">&lt;code>//不使用_
class IntClass {
var value: Int
init(val: Int) { self.value = val }
}
var x = IntClass(val:1)
//使用_
class IntClass {
var value: Int
init(_ val: Int) { self.value = val }
}
var x = IntClass(1)
&lt;/code>&lt;/pre>&lt;h3 id="默认形参值">默认形参值&lt;/h3>
&lt;pre tabindex="0">&lt;code>你可以为任何形参定义默认值以作为函数定义的一部分。如果已经定义了默认值，那么调用函数时就可以省略该行参。
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>注意：请在函数形参列表的末尾放置带默认值的形参。这将确保所有函数调用都使用顺序相同的无默认值实参，并让在每种情况下清晰地调用相同的函数。&lt;/p>
&lt;/blockquote>
&lt;pre tabindex="0">&lt;code>这里有一个早期的join函数，并为参数joiner设置了默认值：
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">toString&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">withJoiner&lt;/span> &lt;span class="n">joiner&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">joiner&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">s2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>如果在join函数调用时为joiner提供了字符串值，那么该字符串值可以用来连接两个字符串，就跟以前一样：
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">toString&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">withJoiner&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// returns &amp;#34;hello-world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>但是，如果函数调用时没有为joiner提供值，就会使用单个空格(&amp;#34; &amp;#34;)的默认值：
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">toString&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;world&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// returns &amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="不定形参">不定形参&lt;/h3>
&lt;pre tabindex="0">&lt;code>一个可变形参可接受零个或多个指定类型的值。当函数被调用时，你可以使用可变形参来指定--形参可以用来传递任意数量的输入值。可通过在形参的类型名后边插入三个点符号(...)来编写可变形参。传递至可变形参的值在函数主体内是以适当类型的数组存在的。例如,一个可变参数的名称为numbers和类型为Double...在函数体内就作为名为numbers类型为Double[]的常量数组。
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>注意：函数最多可以有一个可变形参，而且它必须出现在参数列表的最后，以避免使用多个形参调用函数引发歧义。如果你的函数有一个或多个带有默认值的形参，并且还有可变形参，请将可变形参放在所有默认形参之后，也就是的列表的最末尾。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">arithmeticMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">...)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">total&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">numbers&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">total&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">total&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">count&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arithmeticMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// returns 3.0, which is the arithmetic mean of these five numbers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">arithmeticMean&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">8&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">19&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// returns 10.0, which is the arithmetic mean of these three numbers&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="常量形参和变量形参">常量形参和变量形参&lt;/h4>
&lt;pre tabindex="0">&lt;code>**函数的形参默认是常量**。试图在函数体内改变函数形参的值会引发一个编译时错误。这意味着你不能错误地改变形参的值。但是有时候，函数有一个形参值的变量副本是非常有用的。您可以指定一个或多个形参作为变量形参，从而避免在函数内部为自己定义一个新的变量。变量参数是变量而非常量,并给函数一个可修改的形参值副本。
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">alignRight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nv">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="bp">count&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pad&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Character&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">amountToPad&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="bp">count&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="bp">countElements&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="kc">_&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="mf">1.&lt;/span>&lt;span class="p">..&lt;/span>&lt;span class="n">amountToPad&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">string&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">pad&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">string&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">originalString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">paddedString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">alignRight&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">originalString&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;-&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// paddedString is equal to &amp;#34;-----hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// originalString is still equal to &amp;#34;hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="in-out-形参">In-Out 形参&lt;/h4>
&lt;p>如上描述，变量形参只能在函数本身内改变。如果你想让函数改变形参值，并想要在函数调用结束后保持形参值的改变，那你可以把形参定义为 in-out 形参。通过在形参定义的开始添加 inout 关键字来编写 in-out 形参。In-Out 形参有一个传递至函数的值，由函数修改，并从函数返回来替换原来的值。你只能传递一个变量作为 in-out 形参对应的实参。你不能传递一个常量或者字面量作为实参，因为常量和字面量不能被修改。当你把变量作为实参传递给 in out 形参时，需要在直接在变量前添加 &amp;amp; 符号，以表明它可以被函数修改。&lt;/p>
&lt;blockquote>
&lt;p>提示：in-out 参数不能有默认值，可变参数的参数也不能被标记为 inout。如果您标记参数为 inout，它不能同时被标记为 var 或 let。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">swapTwoInts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">inout&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">inout&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">temporaryA&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">b&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">temporaryA&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>swapTwoInts函数只是简单地交换a、b的值。该函数通过存储一个名为temporaryA临时常量的值，指定b的值到a，然后分配temporaryA到b执行该交换。你可以通过两个Int类型的变量调用swapTwoInts函数，从而交换它们的值。需要注意的是当它们被传递给swapTwoInts函数时，someInt和anotherInt名称前要加上前缀符号&amp;amp;：
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">someInt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">anotherInt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">107&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">swapTwoInts&lt;/span>&lt;span class="p">(&amp;amp;&lt;/span>&lt;span class="n">someInt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>&lt;span class="n">anotherInt&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;someInt is now &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">someInt&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">, and anotherInt is now &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">anotherInt&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// prints &amp;#34;someInt is now 107, and anotherInt is now 3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数类型">函数类型&lt;/h2>
&lt;h2 id="闭包">闭包&lt;/h2>
&lt;p>闭包可以&lt;strong>捕获&lt;/strong>和存储其所在上下文中任意常量和变量的&lt;strong>引用&lt;/strong>。这就是所谓的闭合并包裹着这些常量和变量，俗称闭包。Swift 会为您管理在&lt;strong>捕获&lt;/strong>过程中涉及到的内存操作。在 函数 章节中介绍的全局和嵌套函数实际上也是特殊的闭包，闭包采取如下三种形式之一：&lt;/p>
&lt;p>1.全局函数是一个有名字但不会捕获任何值的闭包&lt;/p>
&lt;p>2.嵌套函数是一个有名字并可以捕获其封闭函数域内值的闭包&lt;/p>
&lt;p>3.闭包表达式是一个利用轻量级语法所写的可以捕获其上下文中变量或常量值的没有名字的闭包&lt;/p>
&lt;h3 id="闭包表达式">闭包表达式&lt;/h3>
&lt;p>闭包表达式的语法有如下形式：&lt;/p>
&lt;pre tabindex="0">&lt;code>{ (parameters) -&amp;gt; returnType in
statements
}
&lt;/code>&lt;/pre>&lt;p>闭包表达式语法可以使用常量、变量和 inout 类型作为参数，但不提供默认值。也可以在参数列表的最后使用可变参数。元组也可以作为参数和返回值。下面的例子展示了之前 backwards 函数对应的闭包表达式版本的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reversed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="bp">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s2&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span> &lt;span class="k">in&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是内联闭包参数和返回值类型声明与 backwards 函数类型声明相同。在这两种方式中，都写成了 (s1: String, s2: String) -&amp;gt; Bool 类型。然而在内联闭包表达式中，函数和返回值类型都写在大括号内，而不是大括号外。闭包的函数体部分由关键字 in 引入。该关键字表示闭包的参数和返回值类型定义已经完成，闭包函数体即将开始。&lt;/p>
&lt;h4 id="根据上下文推断类型">根据上下文推断类型&lt;/h4>
&lt;p>因为排序闭包是作为函数的参数进行传入的，Swift 可以推断其参数和返回值的类型。sort 期望第二个参数是类型为 (String, String) -&amp;gt; Bool 的函数，因此实际上 String, String 和 Bool 类型并不需要作为闭包表达式定义中的一部分。因为所有的类型都可以被正确推断，返回箭头 (-&amp;gt;) 和 围绕在参数周围的括号也可以被省略：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="n">reversed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="bp">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="单行表达式闭包可以省略-return">单行表达式闭包可以省略 return&lt;/h4>
&lt;p>单行表达式闭包可以通过隐藏 return 关键字来隐式返回单行表达式的结果，如上版本的例子可以改写为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">reversed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="bp">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">s1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">s1&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">s2&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="参数名简写">参数名简写&lt;/h4>
&lt;p>Swift 自动为内联函数提供了参数名称简写功能，您可以直接通过 $0,$1,$2 等名字来引用的闭包的参数的值。如果您在闭包表达式中使用参数名称简写，您可以在闭包参数列表中省略对其的定义，并且对应参数名称简写的类型会通过函数类型进行推断。in 关键字也同样可以被省略，因为此时闭包表达式完全由闭包函数体构成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="n">reversed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="bp">sort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">names&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nv">$0&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nv">$1&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="trailing-闭包">Trailing 闭包&lt;/h4>
&lt;p>如果您需要将一个很长的闭包表达式作为最后一个参数传递给函数，可以使用 trailing 闭包来增强函数的可读性。Trailing 闭包是一个书写在函数括号之外(之后)的闭包表达式，函数支持将其作为最后一个参数调用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">someFunctionThatTakesAClosure&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">closure&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 函数体部分&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 以下是不使用 trailing 闭包进行函数调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">someFunctionThatTakesAClosure&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 闭包主体部分&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 以下是使用 trailing 闭包进行函数调用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">someFunctionThatTakesAClosure&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 闭包主体部分&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上例中作为 sort 函数参数的字符串排序闭包可以改写为：&lt;/p>
&lt;pre tabindex="0">&lt;code>reversed = sort(names) { $0 &amp;gt; $1 }
&lt;/code>&lt;/pre>&lt;h3 id="捕获capture">捕获(Capture)&lt;/h3>
&lt;p>闭包可以在其定义的上下文中捕获常量或变量。即使定义这些常量和变量的原作用域已经不存在，闭包仍然可以在闭包函数体内引用和修改这些值。Swift 最简单的闭包形式是嵌套函数，也就是定义在其他函数体内的函数。嵌套函数可以捕获其外部函数所有的参数以及定义的常量和变量。下例为一个叫做 makeIncrementor 的函数，其包含了一个叫做 incrementor 嵌套函数。嵌套函数 incrementor 从上下文中捕获了两个值，runningTotal 和 amount。之后 makeIncrementor 将 incrementor 作为闭包返回。每次调用 incrementor 时，其会以 amount 作为增量增加 runningTotal 的值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">makeIncrementor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">forIncrement&lt;/span> &lt;span class="n">amount&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">runningTotal&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">incrementor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">runningTotal&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">amount&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">runningTotal&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">incrementor&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>incrementor 函数并没有获取任何参数，但是在函数体内访问了 runningTotal 和 amount 变量。这是因为其通过捕获在包含它的函数体内已经存在的runningTotal 和 amount 变量而实现。
由于没有修改 amount 变量，incrementor 实际上捕获并存储了该变量的一个副本，而该副本随着 incrementor 一同被存储。然而，因为每次调用该函数的时候都会修改 runningTotal 的值，incrementor 捕获了当前 runningTotal 变量的引用，而不是仅仅复制该变量的初始值。捕获一个引用保证了当 makeIncrementor 结束时候并不会消失，也保证了当下一次执行 incrementor 函数时，runningTotal 可以继续增加。
&lt;/code>&lt;/pre>&lt;p>下面为一个使用 makeIncrementor 的例子：&lt;/p>
&lt;pre tabindex="0">&lt;code>let incrementByTen = makeIncrementor(forIncrement: 10)
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>该例子定义了一个叫做 incrementByTen 的常量，该常量指向一个每次调用会加10的 incrementor 函数。调用这个函数多次可以得到以下结果：
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="n">incrementByTen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 返回的值为10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">incrementByTen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 返回的值为20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">incrementByTen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 返回的值为30&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果您创建了另一个 incrementor，其会有一个属于自己的独立的 runningTotal 变量的引用。下面的例子中，incrementBySevne 捕获了一个新的 runningTotal 变量，该变量和 incrementByTen 中捕获的变量没有任何联系：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">incrementBySeven&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">makeIncrementor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">forIncrement&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">incrementBySeven&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 返回的值为7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">incrementByTen&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 返回的值为40&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>类与对象</title><link>https://ng-tech.icu/books/cs-series/swift/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-series/swift/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</guid><description>&lt;h1 id="类与对象">类与对象&lt;/h1>
&lt;h2 id="定义与实例化">定义与实例化&lt;/h2>
&lt;p>类的基本的定义方式如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Vehicle&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">maxSpeed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">description&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;A &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">color&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> vehicle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">travel&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Traveling at &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">maxSpeed&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s"> kph&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="属性properties">属性(Properties)&lt;/h3>
&lt;p>类的类型属性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">SomeClass&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">class&lt;/span> &lt;span class="nc">var&lt;/span> &lt;span class="n">computedTypeProperty&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里返回一个 Int 值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="lazy延迟存储属性">lazy:延迟存储属性&lt;/h4>
&lt;p>延迟存储属性是指当第一次被调用的时候才会计算其初始值的属性。在属性声明前使用 lazy 来标示一个延迟存储属性。&lt;/p>
&lt;blockquote>
&lt;p>注意&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>必须将延迟存储属性声明成变量(使用 var 关键字)，因为属性的初始值可能在实例构造完成之后才会得到。而常量属性在构造过程完成之前必须要有初始值，因此无法声明成延迟属性。&lt;/p>
&lt;/blockquote>
&lt;p>最简单的 lazy 的用法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//直接赋值变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">lazy&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nv">players&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">[]()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//赋值为初始化的某个对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">DataImporter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> DataImporter 是一个负责将外部文件中的数据导入的类。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> 这个类的初始化会消耗不少时间。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">fileName&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;data.txt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里会提供数据导入功能&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">DataManager&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//初始化某个对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">lazy&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nv">importer&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">DataImporter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">data&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">]()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 这里会提供数据管理功能&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">manager&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">DataManager&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">manager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Some data&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">manager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Some more data&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// DataImporter 实例的 importer 属性还没有被创建&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//使用闭包方法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">lazy&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nv">players&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">temporaryPlayers&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">[]()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">temporaryPlayers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mike Buss&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">temporaryPlayers&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//使用类方法&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">lazy&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nv">players&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">MultipeerManager&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">initialPlayers&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">func&lt;/span> &lt;span class="n">initialPlayers&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">players&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;Mike Buss&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">players&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>适合延迟加载的场景，一般而言有两种：&lt;/p>
&lt;p>(1)属性的初始值需要进行大量计算之时&lt;/p>
&lt;p>就如上面代码中提及的&lt;code>DataImporter&lt;/code>而言，完成初始化需要消耗不少时间：因为它的实例在初始化时可能要打开文件，还要读取文件内容到内存。由于使用了 lazy，importer 属性只有在第一次被访问的时候才被创建。比如访问它的属性 fileName 时：&lt;/p>
&lt;pre tabindex="0">&lt;code>
print(manager.importer.fileName)
// DataImporter 实例的 importer 属性现在被创建了
// 输出 &amp;#34;data.txt”
&lt;/code>&lt;/pre>&lt;p>(2)对象的属性的初始值依赖与其它的属性&lt;/p>
&lt;p>举例来说，你有一个 Person 类以及一个 personalizedGreeting 属性。这个 personalizedGreeting 属性需要在对象创建完成后才延迟加载，因为只有在对象创建完成后它才能知道问候的人是谁(person 的 name)。请看代码：&lt;/p>
&lt;pre tabindex="0">&lt;code>
class Person {
var name: String
@lazy var personalizedGreeting: String = {
[unowned self] in
return &amp;#34;Hello, \(self.name)!&amp;#34;
}()
init(name: String) {
self.name = name
}
}
&lt;/code>&lt;/pre>&lt;p>注意，你必须使用 [unowned self]来避免循环引用。[unowned self]定义了一个在闭包中需要使用的、存在于闭包外的属性/变量列表，又叫捕获列表(capture list)。&lt;/p>
&lt;p>当你实例化一个 person 时，他的问候语 greeting 此时并没有创建：&lt;/p>
&lt;pre tabindex="0">&lt;code>
let person = Person(name: &amp;#34;Robert Redford”)
// person.personalizedGreeting is nil
&lt;/code>&lt;/pre>&lt;p>但是当你尝试打印出问候语时，这句问候语会自动生成出来：&lt;/p>
&lt;pre tabindex="0">&lt;code>
NSLog(person.personalizedGreeting)
// personalizedGreeting is calculated when used
// and now contains the value &amp;#34;Hello, Robert Redford!&amp;#34;
&lt;/code>&lt;/pre>&lt;h4 id="property-observer属性监控">Property Observer(属性监控)&lt;/h4>
&lt;p>利用属性监视器可以在属性设置之前(willSet)以及值变动之后(didSet)进行一系列地操作，如下这个例子是 Apple 官方的例子，即是在进度条值设置变化之后进行重渲染。&lt;/p>
&lt;pre tabindex="0">&lt;code>
@IBInspectable var progress: Float = 0.75 {
didSet {
setNeedsDisplay()
}
}
&lt;/code>&lt;/pre>&lt;h3 id="方法methods">方法(Methods)&lt;/h3>
&lt;h3 id="访问控制">访问控制&lt;/h3>
&lt;p>在将一个方法或属性声明为 public 时,App 中的所有人都能看到它:&lt;/p>
&lt;pre tabindex="0">&lt;code>
// 可供所有人访问
public var publicProperty = 123
//如果将一个方法或属性声明为 private,那只能在声明它的源文件内部看到它:
// 只能在这个源文件中访问
private var privateProperty = 123
// 仅能供本模块访问
// 这里的&amp;#39;internal&amp;#39;是默认的,可以省略
internal var internalProperty = 123
&lt;/code>&lt;/pre>&lt;h3 id="静态属性方法">静态属性/方法&lt;/h3>
&lt;p>Swift 声明静态属性/方法的方式有两种，一种是利用&lt;code>class&lt;/code>关键字，声明为类属性/方法，另一种是用&lt;code>static&lt;/code>关键字。&lt;/p>
&lt;blockquote>
&lt;p>In a class declaration, the keyword static has the same effect as marking the declaration with both the class and final declaration modifiers.&lt;/p>
&lt;/blockquote>
&lt;p>举例来说：&lt;/p>
&lt;pre tabindex="0">&lt;code>class ClassA {
class func func1() -&amp;gt; String {
return &amp;#34;func1&amp;#34;
}
static func func2() -&amp;gt; String {
return &amp;#34;func2&amp;#34;
}
/* same as above
class final func func2() -&amp;gt; String {
return &amp;#34;func2&amp;#34;
}
*/
}
&lt;/code>&lt;/pre>&lt;p>&lt;code>static&lt;/code>即是&lt;code>class final&lt;/code>，即在 Swift 中，一旦声明为了&lt;code>static&lt;/code>，就不可以在子类中进行复写了：&lt;/p>
&lt;pre tabindex="0">&lt;code>class ClassB : ClassA {
override class func func1() -&amp;gt; String {
return &amp;#34;func1 in ClassB&amp;#34;
}
// ERROR: Class method overrides a &amp;#39;final` class method
override static func func2() -&amp;gt; String {
return &amp;#34;func2 in ClassB&amp;#34;
}
}
&lt;/code>&lt;/pre>&lt;h2 id="对象">对象&lt;/h2>
&lt;h3 id="实例构造">实例构造&lt;/h3>
&lt;p>在 init 方法及其重载方法中，可以对于使用 let 声明的变量进行赋值。在 Swift 中 let 声明的值是不变量，无法被写入赋值，这对于构建线程安全的 API 十分有用。而因为 Swift 的 init 只可能被调用一次，因此在 init 中我们可以为不变量进行赋值，而不会引起任何线程安全的问题。最简单的实例化方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">redVehicle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Vehicle&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">redVehicle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">color&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Red&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">redVehicle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">maxSpeed&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">90&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">redVehicle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">travel&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 输出&amp;#34;Traveling at 90 kph&amp;#34; redVehicle.description() // = &amp;#34;A Red vehicle&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以重载类的构造函数，使之能够有不同的参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">InitAndDeinitExample&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 指定的初始化器(也就是主初始化器)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I&amp;#39;ve been created!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 便捷初始化器,是调用上述指定初始化器所必需的&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">convenience&lt;/span> &lt;span class="kd">init&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 这是必需的&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I was called with the convenience initializer!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 反初始化器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">deinit&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;I&amp;#39;m going away!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">example&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">InitAndDeinitExample&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用指定的初始化器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">example&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">InitAndDeinitExample&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="c1">// 输出&amp;#34;I&amp;#39;ve been created!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">example&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="c1">// 输出&amp;#34;I&amp;#39;m going away&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用便捷初始化器&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">example&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">InitAndDeinitExample&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出&amp;#34;I&amp;#39;ve been created!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 然后输出&amp;#34;I was called with the convenience initializer&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>创建一个可以返回 nil 的初始化器(也称为可以失败的初始化器),就在 init 关键字的后面放上一个问号,并在初始化器确定它不能成功地构造该对象时,使用 return nil:&lt;/p>
&lt;pre tabindex="0">&lt;code>
convenience init? (value: Int) {
self.init()
if value &amp;gt; 5 {
// 不能初始化这个对象;返回nil,表示初始化失败 return nil
} }
&lt;/code>&lt;/pre>&lt;p>在使用一个可以失败的初始化器时,任何可以在其中存储该结果的变量都是可选的:&lt;/p>
&lt;pre tabindex="0">&lt;code>
let failableExample = InitAndDeinitExample(value: 6)
// = nil
&lt;/code>&lt;/pre>&lt;h4 id="required父类指定子类必须实现的初始化函数">required:父类指定子类必须实现的初始化函数&lt;/h4>
&lt;p>如果子类需要添加异于父类的初始化方法时，必须先要实现父类中使用 required 修饰符修饰过的初始化方法，并且也要使用 required 修饰符而不是 override。&lt;/p>
&lt;pre tabindex="0">&lt;code>
class MyClass {
var str:String
required init(str:String) {
self.str = str
}
}
class MySubClass:MyClass
{
required init(str:String) {
super.init(str: str)
}
init(i:Int) {
super.init(str:String(i))
}
}
MySubClass(i: 10)
&lt;/code>&lt;/pre>&lt;p>如果子类中不需要添加任何初始化方法，我们则可以忽略父类的 required 初始化方法：&lt;/p>
&lt;pre tabindex="0">&lt;code>
class MyClass {
var str:String
required init(str:String) {
self.str = str
}
}
class MySubClass:MyClass
{
}
MySubClass(str: &amp;#34;hello swift&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>在这种情况下，编译器不会报错，因为如果子类没有任何初始化方法时，Swift 会默认使用父类的初始化方法。在 Apple 的文档中也有相关描述：&lt;/p>
&lt;blockquote>
&lt;p>You do not have to provide an explicit implementation of a required initializer if you can satisfy the requirement with an inherited initialiser.
required 修饰符的使用规则&lt;/p>
&lt;/blockquote>
&lt;p>required 修饰符只能用于修饰类初始化方法。
当子类含有异于父类的初始化方法时(初始化方法参数类型和数量异于父类)，子类必须要实现父类的 required 初始化方法，并且也要使用 required 修饰符而不是 override。
当子类没有初始化方法时，可以不用实现父类的 required 初始化方法。&lt;/p>
&lt;h4 id="convenience调用其他方法保证非-optional-对象初始化">convenience:调用其他方法保证非 Optional 对象初始化&lt;/h4>
&lt;p>在 Objective-C 中，init 方法是非常不安全的：没有人能保证 init 只被调用一次，也没有人保证在初始化方法调用以后实例的各个变量都完成初始化，甚至如果在初始化里使用属性进行设置的话，还可能会造成各种问题，虽然 Apple 也明确说明了不应该在 init 中使用属性来访问，但是这并不是编译器强制的，因此还是会有很多开发者犯这样的错误。&lt;/p>
&lt;p>所以 Swift 有了超级严格的初始化方法。一方面，Swift 强化了 designated 初始化方法的地位。Swift 中不加修饰的 init 方法都需要在方法中保证所有非 Optional 的实例变量被赋值初始化，而在子类中也强制 (显式或者隐式地) 调用 super 版本的 designated 初始化，所以无论如何走何种路径，被初始化的对象总是可以完成完整的初始化的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">ClassA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">numA&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">numA&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">num&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">ClassB&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">ClassA&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">numB&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">override&lt;/span> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">numB&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">num&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与 designated 初始化方法对应的是在 init 前加上 convenience 关键字的初始化方法。这类方法是 Swift 初始化方法中的 “二等公民”，只作为补充和提供使用上的方便。所有的 convenience 初始化方法都必须调用同一个类中的 designated 初始化完成设置，另外 convenience 的初始化方法是不能被子类重写或者是从子类中以 super 的方式被调用的。&lt;/p>
&lt;pre tabindex="0">&lt;code>
class ClassA {
let numA: Int
init(num: Int) {
numA = num
}
convenience init(bigNum: Bool) {
self.init(num: bigNum ? 10000 : 1)
}
}
class ClassB: ClassA {
let numB: Int
override init(num: Int) {
numB = num + 1
super.init(num: num)
}
}
&lt;/code>&lt;/pre>&lt;p>只要在子类中实现重写了父类 convenience 方法所需要的 init 方法的话，我们在子类中就也可以使用父类的 convenience 初始化方法了。比如在上面的代码中，我们在 ClassB 里实现了 init(num: Int) 的重写。这样，即使在 ClassB 中没有 bigNum 版本的 convenience init(bigNum: Bool)，我们仍然还是可以用这个方法来完成子类初始化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">anObj&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">ClassB&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bigNum&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// anObj.numA = 10000, anObj.numB = 10001&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="单例模式">单例模式&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">import&lt;/span> &lt;span class="nc">UIKit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">DataCenter&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSObject&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">dataCenterObj&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">DataCenter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">DataCenter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">getDataCenter&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span>&lt;span class="n">DataCenter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">dataCenterObj&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="运算符重载">运算符重载&lt;/h3>
&lt;p>类似 C++的运算符重载&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Vector2D&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">x&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Float&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">y&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Float&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Float&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Float&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">left&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vector2D&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">right&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Vector2D&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">Vector2D&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Vector2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kr">left&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="kr">right&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kr">left&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="kr">right&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">result&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">first&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Vector2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">second&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Vector2D&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">result&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="bp">first&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">second&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="继承">继承&lt;/h2>
&lt;p>要重写一个函数,要在子类中重新声明它,并添加 override 关键字&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Car&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 继承类可以重写函数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">override&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">description&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">description&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, which is a car&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在一个被重写的函数中,可以通过 super 回调该函数在父类中的版本&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">override&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">description&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">description&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">description&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;, which is a car&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="协议">协议&lt;/h2>
&lt;p>使用协议的好处是,可以利用 Swift 的类型体系来引用任何遵守某一给定协议的对象，个人现在理解为是 Interface 概念。&lt;/p>
&lt;pre tabindex="0">&lt;code>
protocol Blinking{
var isBlinking:Bool{get}
var blinkSpeed: Double { get set }
func startBlinking(blinkSpeed: Double) -&amp;gt; Void
}
class Light:Blinking{
var isBlinking = false
var blinkSpeed = 1.2
func startBlinking(blinkSpeed: Double) {
print(&amp;#34;now my speed is \(self.blinkSpeed)&amp;#34;)
}
}
&lt;/code>&lt;/pre>&lt;h2 id="扩展">扩展&lt;/h2>
&lt;pre tabindex="0">&lt;code>
extension Int {
var doubled : Int {
return self * 2
}
func multiplyWith(anotherNumber: Int) -&amp;gt; Int {
return self * anotherNumber
} }
2.doubled // = 4
4.multiplyWith(32) // = 128
&lt;/code>&lt;/pre>&lt;p>还可以利用扩展使一个类型遵守一个协议&lt;/p>
&lt;pre tabindex="0">&lt;code>
extension Int : Blinking {
var isBlinking : Bool {
return false;
}
var blinkSpeed : Double {
get {
return 0.0; }
set {
// 不做任何事情
} }
func startBlinking(blinkSpeed : Double) {
print(&amp;#34;I am the integer \(self). I do not blink.&amp;#34;)
} }
2.isBlinking // = false
2.startBlinking(2.0) // 输出&amp;#34;I am the integer 2. I do not blink.&amp;#34;
&lt;/code>&lt;/pre>&lt;h1 id="struct结构体">Struct(结构体)&lt;/h1>
&lt;h2 id="comparison">Comparison&lt;/h2>
&lt;p>According to the very popular WWDC 2015 talk Protocol Oriented Programming in Swift (video,transcript), Swift provides a number of features that make structs better than classes in many circumstances.&lt;/p>
&lt;p>Structs are preferable if they are relatively small and copiable because copying is way safer than having multiple reference to the same instance as happens with classes. This is especially important when passing around a variable to many classes and/or in a multithreaded environment. If you can always send a copy of your variable to other places, you never have to worry about that other place changing the value of your variable underneath you.&lt;/p>
&lt;p>With Structs there is no need to worry about memory leaks or multiple threads racing to access/modify a single instance of a variable.&lt;/p>
&lt;p>Classes can also become bloated because a class can only inherit from a single superclass. That encourages us to created huge superclasses that encompass many different abilities that are only loosely related. Using protocols, especially with protocol extensions where you can provide implementations to protocols, allows you to eliminate the need for classes to achieve this sort of behavior.&lt;/p>
&lt;p>The talk lays out these scenarios where classes are preferred:&lt;/p>
&lt;p>Copying or comparing instances doesn&amp;rsquo;t make sense (e.g., Window)&lt;/p>
&lt;p>Instance lifetime is tide to external effects (e.g., TemporaryFile)&lt;/p>
&lt;p>Instances are just &amp;ldquo;sinks&amp;rdquo;&amp;ndash;write-only conduits to external state (e.g.CGContext)&lt;/p>
&lt;p>It implies that structs should be the default and classes should be a fallback.&lt;/p>
&lt;p>On the other hand, The Swift Programming Language documentation is somewhat contradictory:&lt;/p>
&lt;p>Structure instances are always passed by value, and class instances are always passed by reference. This means that they are suited to different kinds of tasks. As you consider the data constructs and functionality that you need for a project, decide whether each data construct should be defined as a class or as a structure.&lt;/p>
&lt;p>As a general guideline, consider creating a structure when one or more of these conditions apply:&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>The structure’s primary purpose is to encapsulate a few relatively simple data values.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>It is reasonable to expect that the encapsulated values will be copied rather than referenced when you assign or pass around an instance of that structure.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>Any properties stored by the structure are themselves value types, which would also be expected to be copied rather than referenced.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;blockquote>
&lt;ul>
&lt;li>The structure does not need to inherit properties or behavior from another existing type.&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>Examples of good candidates for structures include:&lt;/p>
&lt;p>The size of a geometric shape, perhaps encapsulating a width property and a height property, both of type Double.&lt;/p>
&lt;p>A way to refer to ranges within a series, perhaps encapsulating a start property and a length property, both of type Int.&lt;/p>
&lt;p>A point in a 3D coordinate system, perhaps encapsulating x, y and z properties, each of type Double.&lt;/p>
&lt;p>In all other cases, define a class, and create instances of that class to be managed and passed by reference. In practice, this means that most custom data constructs should be classes, not structures.&lt;/p>
&lt;p>Here it is claiming that we should default to using classes and use structures only in specific circumstances. Ultimately, you need to understand the real world implication of value types v.s. reference types and then you can make an informed decision about when to use structs or classes. Also keep in mind that these concepts are always evolving and The Swift Programming Language documentation was written before the Protocol Oriented Programming talk was given.&lt;/p>
&lt;p>My personal advice, is to always default to using a struct because they greatly reduce complexity and fallback to classes if the Struct becomes very large or requires some feature that structs and protocols cannot provide, most notably the ability to have multiple variables reference the same data。&lt;/p>
&lt;h3 id="performance">Performance&lt;/h3>
&lt;p>One big advantage is performance. Since struct instances are allocated on stack, and class instances are allocated on heap, structs can be drastically faster.&lt;/p>
&lt;p>Consider the following example, which demonstrates 2 strategies of wrapping Int data type (e.g. as part of a mathematics library)&lt;/p>
&lt;pre tabindex="0">&lt;code>
class IntClass {
var value: Int
init(_ val: Int) { self.value = val }
}
struct IntStruct {
var value: Int
init(_ val: Int) { self.value = val }
}
func + (x: IntClass, y: IntClass) -&amp;gt; IntClass {
return IntClass(x.value + y.value)
}
func + (x: IntStruct, y: IntStruct) -&amp;gt; IntStruct {
return IntStruct(x.value + y.value)
}
&lt;/code>&lt;/pre>&lt;p>and measure the performance using&lt;/p>
&lt;pre tabindex="0">&lt;code>
// Test 1: IntClass
var x = IntClass(0)
for i in 1...10000000 {
x = x + IntClass(1)
}
// Test 2: IntStruct
var y = IntStruct(0)
for i in 1...10000000 {
y = y + IntStruct(1)
}
&lt;/code>&lt;/pre>&lt;p>UPDATE (1 June 2014):&lt;/p>
&lt;p>As of Swift 1.2, XCode 6.3.2, running Release build on iPhone 5S, iOS 8.3, averaged over 5 runs&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The class version took 9.788332333s&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The struct version took 0.010532942s&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>That&amp;rsquo;s 900 times faster.&lt;/p>
&lt;h2 id="differences">Differences&lt;/h2>
&lt;h3 id="inheritance">Inheritance&lt;/h3>
&lt;p>structures can&amp;rsquo;t inherit in swift. If you want&lt;/p>
&lt;p>class Vehicle{&lt;/p>
&lt;p>}&lt;/p>
&lt;p>class Car : Vehicle{&lt;/p>
&lt;p>}&lt;/p>
&lt;p>Go for an class.&lt;/p>
&lt;h3 id="pass-by">Pass By&lt;/h3>
&lt;p>Swift structures pass by value and class instances pass by reference.&lt;/p>
&lt;h3 id="contextual-differences">Contextual Differences&lt;/h3>
&lt;p>Struct constant and variables&lt;/p>
&lt;p>Example (Used at WWDC 2014)&lt;/p>
&lt;pre tabindex="0">&lt;code>
struct Point{
var x = 0.0;
var y = 0.0;
}
&lt;/code>&lt;/pre>&lt;p>Defines a struct called Point.&lt;/p>
&lt;pre tabindex="0">&lt;code>
var point = Point(x:0.0,y:2.0)
&lt;/code>&lt;/pre>&lt;p>Now if I try to change the x. Its a valid expression.&lt;/p>
&lt;pre tabindex="0">&lt;code>
point.x = 5
&lt;/code>&lt;/pre>&lt;p>But if I defined a point as constant.&lt;/p>
&lt;pre tabindex="0">&lt;code>
let point = Point(x:0.0,y:2.0)
point.x = 5 //This will give compile time error.
&lt;/code>&lt;/pre>&lt;p>In this case entire point is immutable constant.&lt;/p>
&lt;p>If I used a class Point instead this is a valid expression. Because in a class immutable constant is the reference to the class itself not its instance variables (Unless those variables defined as constants)&lt;/p>
&lt;h2 id="struct-vs-inheritance">Struct Vs Inheritance&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// #!Swift-1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">import&lt;/span> &lt;span class="nc">Foundation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &lt;/span>&lt;span class="cs">MARK:&lt;/span>&lt;span class="c1"> - (1) classes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Solution 1:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// - Use classes instead of struct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Issue: Violate the concept of moving model to the value layer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// http://realm.io/news/andy-matuschak-controlling-complexity/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">typealias&lt;/span> &lt;span class="n">JSONDict&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSObject&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">AnyObject&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Vehicle1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">color&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Car1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">horsepower&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">license_plate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">override&lt;/span> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">horsepower&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;horsepower&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">license_plate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;license_plate&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">Bicycle1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle1&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">chainrings&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">sprockets&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">override&lt;/span> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">super&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chainrings&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;chainrings&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sprockets&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;sprockets&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &lt;/span>&lt;span class="cs">MARK:&lt;/span>&lt;span class="c1"> - (2) struct + composition&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Solution 2:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// - keep value types&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// - use composition.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Issue: We violate the encapsulation principle, exposing the internal composition to the outside world&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Vehicle2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">color&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Car2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">vehicle&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">horsepower&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">license_plate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vehicle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Vehicle2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">horsepower&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;horsepower&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">license_plate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;license_plate&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Bicycle2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">vehicle&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">chainrings&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">sprockets&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vehicle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">Vehicle2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chainrings&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;chainrings&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sprockets&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;sprockets&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &lt;/span>&lt;span class="cs">MARK:&lt;/span>&lt;span class="c1"> - (3) struct, protocol + composition for parsing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Solution 3:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// - keep value types, use a protocol&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// - use intermediate struct only for parsing to keep encapsulation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Issue: None… except code verbosity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">Vehicle3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">struct&lt;/span> &lt;span class="nc">VehicleFields3&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">color&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Car3&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">horsepower&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">license_plate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">vehicle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">VehicleFields3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vehicle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">color&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vehicle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">horsepower&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;horsepower&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">license_plate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;license_plate&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Bicycle3&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle3&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">chainrings&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">sprockets&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">vehicle&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">VehicleFields3&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">model&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vehicle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">model&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">color&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">vehicle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">color&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chainrings&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;chainrings&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sprockets&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;sprockets&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &lt;/span>&lt;span class="cs">MARK:&lt;/span>&lt;span class="c1"> - (4) struct, protocols + global function for parsing&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Solution 4: [Does not compile]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// - keep value types, use a protocol&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// - use a global function to fill the objects&amp;#39;s fields conforming to the protocol&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Issue: does not work (it seems we can&amp;#39;t pass &amp;#39;self&amp;#39; as inout in the init() method)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// exposes the setter in the protocol and the structs anyway (so bad access protection)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">protocol&lt;/span> &lt;span class="nc">Vehicle4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="kr">set&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="kr">get&lt;/span> &lt;span class="kr">set&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">private&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">parseVehicle4Fields&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">inout&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">model&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;model&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">color&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;color&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Car4&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">horsepower&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">license_plate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parseVehicle4Fields&lt;/span>&lt;span class="p">(&amp;amp;&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Error: Car4 is not identical to Vehicle4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">horsepower&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;horsepower&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Double&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">license_plate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;license_plate&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Bicycle4&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">Vehicle4&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">model&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">chainrings&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">sprockets&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDict&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">JSONDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">parseVehicle4Fields&lt;/span>&lt;span class="p">(&amp;amp;&lt;/span>&lt;span class="kc">self&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// Error: Bicycle4 is not identical to Vehicle4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">chainrings&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;chainrings&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sprockets&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">jsonDict&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;sprockets&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>数据结构</title><link>https://ng-tech.icu/books/cs-series/swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-series/swift/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid><description>&lt;h1 id="变量与常量">变量与常量&lt;/h1>
&lt;p>常量和变量把一个名字(比如 maximumNumberOfLoginAttempts 或者 welcomeMessage)和一个指定类型的值(比如数字 10 或者字符串&amp;quot;Hello&amp;quot;)关联起来。常量的值一旦设定就不能改变，而变量的值可以随意更改。常量和变量必须在使用前声明，用 let 来声明常量，用 var 来声明变量。下面的例子展示了如何用常量和变量来记录用户尝试登录的次数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//基本使用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">maximumNumberOfLoginAttempts&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">currentLoginAttempt&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//定义变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">myVariable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//定义常量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">myConstantVariable&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">123&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 隐式指定整数类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">anInteger&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 明确指定整数类型&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">anExplicitInteger&lt;/span> &lt;span class="p">:&lt;/span>&lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>你可以在一行中声明多个常量或者多个变量，用逗号隔开：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">z&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mf">0.0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>常量与变量名不能包含数学符号，箭头，保留的(或者非法的)Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。一旦你将常量或者变量声明为确定的类型，你就不能使用相同的名字再次进行声明，或者改变其存储的值的类型。同时，你也不能将常量与变量进行互转。&lt;/p>
&lt;h2 id="类型标注">类型标注&lt;/h2>
&lt;pre tabindex="0">&lt;code>当你声明常量或者变量的时候可以加上类型标注(type annotation)，说明常量或者变量中要存储的值的类型。如果要添加类型标注，需要在常量或者变量名后面加上一个冒号和空格，然后加上类型名称。
&lt;/code>&lt;/pre>&lt;h3 id="类型安全与类型推测">类型安全与类型推测&lt;/h3>
&lt;pre tabindex="0">&lt;code>Swift 是一个类型安全(type safe )的语言。类型安全的语言可以让你清楚地知道代码要处理的值的类型。如果你的代码需要一个String，你绝对不可能不小心传进去一个Int。由于 Swift 是类型安全的，所以它会在编译你的代码时进行类型检查(type checks)，并把不匹配的类型标记为错误。这可以让你在开发的时候尽早发现并修复错误。当你要处理不同类型的值时，类型检查可以帮你避免错误。然而，这并不是说你每次声明常量和变量的时候都需要显式指定类型。如果你没有显式指定类型，Swift 会使用类型推测(type inference)来选择合适的类型。有了类型推测，编译器可以在编译代码的时候自动推测出表达式的类型。原理很简单，只要检查你赋的值即可。
因为有类型推测，和 C 或者 Objective-C 比起来 Swift 很少需要声明类型。常量和变量虽然需要明确类型，但是大部分工作并不需要你自己来完成。当你声明常量或者变量并赋初值的时候类型推测非常有用。当你在声明常量或者变量的时候赋给它们一个字面量(literal value或literal)即可触发类型推测。(字面量就是会直接出现在你代码中的值，比如42和3.14159。)
&lt;/code>&lt;/pre>&lt;h2 id="别名">别名&lt;/h2>
&lt;pre tabindex="0">&lt;code>类型别名(type aliases)就是给现有类型定义另一个名字。你可以使用typealias关键字来定义类型别名。当你想要给现有类型起一个更有意义的名字时，类型别名非常有用。假设你正在处理特定长度的外部资源的数据：
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>typealias AudioSample = UInt16
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>定义了一个类型别名之后，你可以在任何使用原始名的地方使用别名：
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>var maxAmplitudeFound = AudioSample.min // maxAmplitudeFound 现在是 0
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>本例中，AudioSample被定义为UInt16的一个别名。因为它是别名，AudioSample.min实际上是UInt16.min，所以会给maxAmplitudeFound赋一个初值0。
&lt;/code>&lt;/pre>&lt;h2 id="类型判断与转换">类型判断与转换&lt;/h2>
&lt;h3 id="asasas">as、as?、as!&lt;/h3>
&lt;p>在 Swift 1.2 版本之前，都是使用&lt;code>as&lt;/code>关键字来进行类型的转换，而是否是强制转换则是根据上下文而定，在 Swift 1.2 之后，将&lt;code>as&lt;/code>关键字拆分为了&lt;code>as!&lt;/code>与&lt;code>as?&lt;/code>这两个单独的操作符，其具体的用法可以参考如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>class Animal {}
class Dog: Animal {}
let a: Animal = Dog()
a as Dog // now raises the error: &amp;#34;&amp;#39;Animal is not convertible to &amp;#39;Dog&amp;#39;;
// ... did you mean to use &amp;#39;as!&amp;#39; to force downcast?&amp;#34;
a as! Dog // forced downcast is allowed
let d = Dog()
d as Animal // upcast succeeds
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>class Animal {}
class Cat: Animal {}
class Dog: Animal {
var name = &amp;#34;Spot&amp;#34;
}
let dog: Dog? = nil
dog?.name // evaluates to nil
dog!.name // triggers a runtime error
let animal: Animal = Cat()
animal as? Dog // evaluates to nil
animal as! Dog // triggers a runtime error
&lt;/code>&lt;/pre>&lt;h1 id="基本类型">基本类型&lt;/h1>
&lt;h2 id="anyobject">AnyObject&lt;/h2>
&lt;h2 id="数值类型">数值类型&lt;/h2>
&lt;p>整数就是没有小数部分的数字，比如 42 和-23。整数可以是有符号(正、负、零)或者无符号(正、零)。Swift 提供了 8，16，32 和 64 位的有符号和无符号整数类型。这些整数类型和 C 语言的命名方式很像，比如 8 位无符号整数类型是 UInt8，32 位有符号整数类型是 Int32。就像 Swift 的其他类型一样，整数类型采用大写命名法。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>整数范围&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>你可以访问不同整数类型的 min 和 max 属性来获取对应类型的最大值和最小值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">minValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">UInt8&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="bp">min&lt;/span> &lt;span class="c1">// minValue 为 0，是 UInt8 类型的最小值 let maxValue = UInt8.max // maxValue 为 255，是 UInt8 类型的最大值&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>长度&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Int&lt;/td>
&lt;td>-2147483648~2147483647&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>UInt&lt;/td>
&lt;td>&lt;/td>
&lt;td>注意：尽量不要使用 UInt，除非你真的需要存储一个和当前平台原生字长相同的无符号整数。除了这种情况，最好使用 Int，即使你要存储的值已知是非负的。统一使用 Int 可以提高代码的可复用性，避免不同类型数字之间的转换，并且匹配数字的类型推测，请参考类型安全和类型推测&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>浮点数&lt;/td>
&lt;td>Double 表示 64 位浮点数。当你需要存储很大或者很高精度的浮点数时请使用此类型。Float 表示 32 位浮点数。精度要求不高的话可以使用此类型&lt;/td>
&lt;td>Double 精确度很高，至少有 15 位数字，而 Float 最少只有 6 位数字。选择哪个类型取决于你的代码需要处理的值的范围&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="随机数">随机数&lt;/h3>
&lt;h3 id="科学计算">科学计算&lt;/h3>
&lt;h3 id="类型转换">类型转换&lt;/h3>
&lt;h2 id="布尔类型">布尔类型&lt;/h2>
&lt;pre tabindex="0">&lt;code>Swift 有一个基本的布尔(Boolean)类型，叫做Bool。布尔值指逻辑上的(logical)，因为它们只能是真或者假。Swift 有两个布尔常量，true和false：
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>let orangesAreOrange = true let turnipsAreDelicious = false
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>orangesAreOrange和turnipsAreDelicious的类型会被推测为Bool，因为它们的初值是布尔字面量。就像之前提到的Int和Double一样，如果你创建变量的时候给它们赋值true或者false，那你不需要将常量或者变量声明为Bool类型。初始化常量或者变量的时候如果所赋的值类型已知，就可以触发类型推测，这让 Swift 代码更加简洁并且可读性更高。
当你编写条件语句比如if语句的时候，布尔值非常有用:
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">turnipsAreDelicious&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Mmm, tasty turnips!&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Eww, turnips are horrible.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 输出 &amp;#34;Eww, turnips are horrible.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>条件语句，例如 if，请参考控制流。如果你在需要使用 Bool 类型的地方使用了非布尔值，Swift 的类型安全机制会报错。下面的例子会报告一个编译时错误:&lt;/p>
&lt;pre tabindex="0">&lt;code>let i = 1 if i { // 这个例子不会通过编译，会报错 }
&lt;/code>&lt;/pre>&lt;p>然而，下面的例子是合法的：&lt;/p>
&lt;pre tabindex="0">&lt;code>let i = 1 if i == 1 { // 这个例子会编译成功 }
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>i == 1的比较结果是Bool类型，所以第二个例子可以通过类型检查。类似i == 1这样的比较，请参考基本操作符。和 Swift 中的其他类型安全的例子一样，这个方法可以避免错误并保证这块代码的意图总是清晰的。
&lt;/code>&lt;/pre>&lt;h2 id="空类型">空类型&lt;/h2>
&lt;h2 id="可选类型optional">可选类型(Optional)&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://joeyio.com/ios/2014/06/04/swift---/" target="_blank" rel="noopener">Swift 之 ? 和 !&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Swift 语言使用 var 定义变量，但和别的语言不同，Swift 里不会自动给变量赋初始值，也就是说变量不会有默认值，所以要求使用变量之前必须要对其初始化。如果在使用变量之前不进行初始化就会报错：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">stringValue&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//error: variable &amp;#39;stringValue&amp;#39; used before being initialized&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//let hashValue = stringValue.hashValue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">hashValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">stringValue&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">hashValue&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Optional 其实是个&lt;code>enum&lt;/code>，里面有&lt;code>None&lt;/code>和&lt;code>Some&lt;/code>两种类型。其实所谓的 nil 就是&lt;code>Optional.None&lt;/code>, 非 nil 就是&lt;code>Optional.Some&lt;/code>, 然后会通过&lt;code>Some(T)&lt;/code>包装(wrap)原始值，这也是为什么在使用 Optional 的时候要拆包(从 enum 里取出来原始值)的原因, 也是 PlayGround 会把 Optional 值显示为类似&lt;code>{Some &amp;quot;hello world&amp;quot;}&lt;/code>的原因，这里是 enum Optional 的定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">enum&lt;/span> &lt;span class="nc">Optional&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="n">LogicValue&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">Reflectable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">None&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="n">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="n">some&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">/// Allow use in a Boolean context.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">getLogicValue&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="nb">Bool&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">/// Haskell&amp;#39;s fmap, which was mis-named&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">map&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">U&lt;/span>&lt;span class="p">&amp;gt;(&lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">U&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">getMirror&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">-&amp;gt;&lt;/span> &lt;span class="n">Mirror&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>声明为 Optional 只需要在类型后面&lt;strong>紧跟&lt;/strong>一个&lt;code>?&lt;/code>即可。如:&lt;/p>
&lt;pre tabindex="0">&lt;code>var strValue: String? //?相当于下面这种写法的语法糖
var strValue: Optional&amp;lt;String&amp;gt;
&lt;/code>&lt;/pre>&lt;blockquote>
&lt;p>上面这个 Optional 的声明，意思不是”我声明了一个 Optional 的 String 值”, 而是”我声明了一个 Optional 类型值，它可能包含一个 String 值，也可能什么都不包含”，也就是说实际上我们声明的是 Optional 类型，而不是声明了一个 String 类型，这一点需要铭记在心。&lt;/p>
&lt;/blockquote>
&lt;p>一旦声明为 Optional 的，如果不显式的赋值就会有个默认值 nil。判断一个 Optional 的值是否有值，可以用 if 来判断：&lt;/p>
&lt;pre tabindex="0">&lt;code>if strValue {
//do sth with strValue
}
&lt;/code>&lt;/pre>&lt;h3 id="缘由">缘由&lt;/h3>
&lt;p>为什么要这么设计呢？苹果官方给出的解释是，因为 Swift 是一门类型安全的语言。从前面的例子中可以看出，Swift 的可选类型会进行编译检查，防止一些常见的运行时错误。让我们看一看下面的例子，这样可以更好地理解。
比如说，在 Objective-C 中有如下代码：&lt;/p>
&lt;pre tabindex="0">&lt;code>- (NSString *)findStockCode:(NSString *)company {
if ([company isEqualToString:@&amp;#34;Apple&amp;#34;]) {
return @&amp;#34;AAPL&amp;#34;;
} else if ([company isEqualToString:@&amp;#34;Google&amp;#34;]) {
return @&amp;#34;GOOG&amp;#34;;
}
return nil;
}
&lt;/code>&lt;/pre>&lt;p>在上面的方法里，你可以用 findStockCode 方法来获取到股票的代码，显然只有 Apple 和 Google 的查询会返回值，其他情况都会返回 nil。
假设我们在下面的代码中会调用这个方法：&lt;/p>
&lt;pre tabindex="0">&lt;code>NSString *stockCode = [self findStockCode:@&amp;#34;Facebook&amp;#34;]; // nil is returned
NSString *text = @&amp;#34;Stock Code - &amp;#34;;
NSString *message = [text stringByAppendingString:stockCode]; // runtime error
NSLog(@&amp;#34;%@&amp;#34;, message);
&lt;/code>&lt;/pre>&lt;p>这段代码在编译时不会有任何问题，但是如果输入的是 Facbook 则会返回 nil，导致运行时错误。而在 Swift 里，和运行时错误不用，Swift 会在编译时就提示错误信息，我们可以把上面的代码在 Swift 中重写：&lt;/p>
&lt;pre tabindex="0">&lt;code>func findStockCode(company: String) -&amp;gt; String? {
if (company == &amp;#34;Apple&amp;#34;) {
return &amp;#34;AAPL&amp;#34;
} else if (company == &amp;#34;Google&amp;#34;) {
return &amp;#34;GOOG&amp;#34;
}
return nil
}
var stockCode:String? = findStockCode(&amp;#34;Facebook&amp;#34;)
let text = &amp;#34;Stock Code - &amp;#34;
let message = text + stockCode // compile-time error
println(message)
&lt;/code>&lt;/pre>&lt;p>在上面的代码里，stockCode 被定义成了可选类型，这意味着它可以有一个 string 的值，也可以为 nil。代码无法通过编译，会提示一个错误：value of optional type String? is not unwrapped。正如你在例子中看到的，Swift 的可选类型加强了 nil 检测，为开发者提供了编译时的检查，合理的使用可选类型可以有效地提高代码质量。&lt;/p>
&lt;h3 id="强制解析">强制解析&lt;/h3>
&lt;p>注意，一旦声明为可选类型，就不再是原来的普通类型了，虽然只是简单的加了个?。对于 Optional 值，不能直接进行操作，否则会报错：&lt;/p>
&lt;pre tabindex="0">&lt;code>//error: &amp;#39;String?&amp;#39; does not have a member named &amp;#39;hashValue&amp;#39;
//let hashValue = strValue.hashValue
// ^ ~~~~~~~~~
let hashValue = strValue.hashValue
&lt;/code>&lt;/pre>&lt;p>如果需要获取到可选类型中的值，就要用到了!表达式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">hashValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">strValue&lt;/span>&lt;span class="p">!.&lt;/span>&lt;span class="n">hashValue&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//对于上面的股票代码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">stockCode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">findStockCode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Facebook&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">text&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Stock Code - &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">stockCode&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">message&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">text&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">stockCode&lt;/span>&lt;span class="p">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="可选绑定">可选绑定&lt;/h3>
&lt;p>除了强制解析，可选绑定 (optional binding) 是一个更值得推荐的解析方案。你可以用可选绑定来检测一个可选类型的值有没有值，如果有值则解析出来并存储到一个临时的变量里。&lt;/p>
&lt;pre tabindex="0">&lt;code>var stockCode:String? = findStockCode(&amp;#34;Facebook&amp;#34;)
let text = &amp;#34;Stock Code - &amp;#34;
if let tempStockCode = stockCode {
let message = text + tempStockCode
println(message)
}
&lt;/code>&lt;/pre>&lt;p>代码中的 if let (或者 if var ) 是可选绑定的两个关键词。翻译成人类语言，大概是这个样子：“如果 stackCode 它有值，把它的值存到 tempStackCode 里，然后继续执行接下来的代码块。如果它没值，跳过后面的代码块。” 因为 tempStockCode 是一个新的常量，所以你不再需要添加 ! 后缀。&lt;/p>
&lt;h3 id="可选链">可选链&lt;/h3>
&lt;p>可选链用于在类包裹的多个可选类型的层次调用中，譬如上面的获取股票的函数如果放到一个类中：&lt;/p>
&lt;pre tabindex="0">&lt;code>class Stock {
var code: String?
var price: Double?
}
func findStockCode(company: String) -&amp;gt; Stock? {
if (company == &amp;#34;Apple&amp;#34;) {
let aapl: Stock = Stock()
aapl.code = &amp;#34;AAPL&amp;#34;
aapl.price = 90.32
return aapl
} else if (company == &amp;#34;Google&amp;#34;) {
let goog: Stock = Stock()
goog.code = &amp;#34;GOOG&amp;#34;
goog.price = 556.36
return goog
}
return nil
}
&lt;/code>&lt;/pre>&lt;p>接下来，我们先用 findStockCode 函数查找股票的代码，然后计算购买 100 股所需要的总价：&lt;/p>
&lt;pre tabindex="0">&lt;code>if let stock = findStockCode(&amp;#34;Apple&amp;#34;) {
if let sharePrice = stock.price {
let totalCost = sharePrice * 100
println(totalCost)
}
}
&lt;/code>&lt;/pre>&lt;p>函数的返回值是可选类型，我们通过可选绑定来检测是否有值，显然股票的价格也是一个可选类型，于是我们继续使用 if let 来检测它是否有值。上面的代码没有任何问题，不过这一层一层的 if 嵌套实在是太麻烦了，如果可选类型层次多点，很可能形成下面的情况：&lt;/p>
&lt;pre tabindex="0">&lt;code>if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
if let x = xxx() {
}
}
}
}
}
}
}
}
}
}
}
}
&lt;/code>&lt;/pre>&lt;p>除了使用 if let，我们可以通过可选链来简化代码。我们可以用问号将多个可选类型串联起来：&lt;/p>
&lt;pre tabindex="0">&lt;code>
if let sharePrice = findStockCode(&amp;#34;Apple&amp;#34;)?.price {
let totalCost = sharePrice * 100
println(totalCost)
}
&lt;/code>&lt;/pre>&lt;p>可选链提供了访问变量的另一种方式，代码现在看上去也更加的干净整洁。上面只是一个基础的使用，更加深入的学习可以参考官方文档。&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;h4 id="可选类型用于-protocol-可选方法">可选类型用于 Protocol 可选方法&lt;/h4>
&lt;h4 id="可选类型用于未实例化控件">可选类型用于未实例化控件&lt;/h4>
&lt;p>考虑下这一种情况，我们有一个自定义的&lt;code>MyViewController&lt;/code>类，类中有一个属性是&lt;code>myLabel&lt;/code>，myLabel 是在 viewDidLoad 中进行初始化。因为是在 viewDidLoad 中初始化，所以不能直接声明为普通值：&lt;code>var myLabel : UILabel&lt;/code>，因为非 Optional 的变量必须在声明时或者构造器中进行初始化，但我们是想在 viewDidLoad 中初始化，所以就只能声明为 Optional：&lt;code>var myLabel: UILabel?&lt;/code>, 虽然我们确定在 viewDidLoad 中会初始化，并且在 ViewController 的生命周期内不会置为 nil，但是在对 myLabel 操作时，每次依然要加上&lt;code>!&lt;/code>来强制拆包，比如:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="n">myLabel&lt;/span>&lt;span class="p">!.&lt;/span>&lt;span class="n">text&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;text&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">myLabel&lt;/span>&lt;span class="p">!.&lt;/span>&lt;span class="n">frame&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">CGRectMake&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="时间日期">时间日期&lt;/h2>
&lt;h3 id="nsdate">NSDate&lt;/h3>
&lt;p>在 Objective-C 中，可以使用如下的代码创建一个 UTC 的时间：&lt;/p>
&lt;pre tabindex="0">&lt;code>NSDate *currentUTCDate = [NSDate date]
&lt;/code>&lt;/pre>&lt;p>但是在 Swift 中，如果使用如下方式：&lt;/p>
&lt;pre tabindex="0">&lt;code>let date = NSDate()
&lt;/code>&lt;/pre>&lt;p>获取到的会是本地时间。&lt;/p>
&lt;h4 id="utc-时间与本地化时间">UTC 时间与本地化时间&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">import&lt;/span> &lt;span class="nc">UIKit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">date&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSDate&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &amp;#34;Apr 1, 2015, 8:53 AM&amp;#34; &amp;lt;-- local without seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">formatter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSDateFormatter&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">formatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateFormat&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;yyyy-MM-dd HH:mm:ss ZZZ&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">defaultTimeZoneStr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">formatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stringFromDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &amp;#34;2015-04-01 08:52:00 -0400&amp;#34; &amp;lt;-- same date, local, but with seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">formatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">timeZone&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSTimeZone&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">abbreviation&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;UTC&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">utcTimeZoneStr&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">formatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">stringFromDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">date&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// &amp;#34;2015-04-01 12:52:00 +0000&amp;#34; &amp;lt;-- same date, now in UTC&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="时间比较">时间比较&lt;/h4>
&lt;p>如果需要比较两个日期，可以使用如下方法，在如下代码中已经展示了如何处理不同的返回结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Date comparision to compare current date and end date.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">dateComparisionResult&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSComparisonResult&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSDate&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">compare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">endDate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">dateComparisionResult&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">NSComparisonResult&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OrderedAscending&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Current date is smaller than end date.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">dateComparisionResult&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">NSComparisonResult&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OrderedDescending&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Current date is greater than end date.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">dateComparisionResult&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">NSComparisonResult&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">OrderedSame&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Current date and end date are same.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="timestamp">TimeStamp&lt;/h4>
&lt;p>如果需要将某个 TimeStamp(&amp;quot;/Date(1427909016000-0800)”)转化为 NSDate 对象，那么可以使用如下的扩展工具，该扩展将会把 TimeStamp 转化为本地化时间。其中 1427909016000 表示从 Unix 计时以来的毫秒数，而-0800 表示时区：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">extension&lt;/span> &lt;span class="nc">NSDate&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">convenience&lt;/span> &lt;span class="kd">init&lt;/span>&lt;span class="p">?(&lt;/span>&lt;span class="n">jsonDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">prefix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;/Date(&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">suffix&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;)/&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">scanner&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSScanner&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">jsonDate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Check prefix:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">scanString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kr">prefix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">intoString&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Read milliseconds part:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">milliseconds&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Int64&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">scanLongLong&lt;/span>&lt;span class="p">(&amp;amp;&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Milliseconds to seconds:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">timeStamp&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSTimeInterval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">milliseconds&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mf">1000.0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Read optional timezone part:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">timeZoneOffset&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">scanInteger&lt;/span>&lt;span class="p">(&amp;amp;&lt;/span>&lt;span class="n">timeZoneOffset&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">hours&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">timeZoneOffset&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">minutes&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">timeZoneOffset&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Adjust timestamp according to timezone:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">timeStamp&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">NSTimeInterval&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3600&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">hours&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">minutes&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Check suffix:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">scanner&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">scanString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">suffix&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">intoString&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Success! Create NSDate and return.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeIntervalSince1970&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">timeStamp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Wrong format, return nil. (The compiler requires us to&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// do an initialization first.)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kc">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="kd">init&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">timeIntervalSince1970&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用的例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="kd">let&lt;/span> &lt;span class="nv">theDate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSDate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">jsonDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="s">&amp;#34;/Date(1427909016000-0800)/&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">theDate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;wrong format&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nsdateformatter格式化时间">NSDateFormatter：格式化时间&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">dataString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;April 1, 2015&amp;#34;&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="nb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">dateFormatter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSDateFormatter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dateFormatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateFormat&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;MM-dd-yyyy&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dateFormatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">timeZone&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSTimeZone&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">localTimeZone&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// convert string into date&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">dateValue&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dateFormatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateFromString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dataString&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">as&lt;/span> &lt;span class="n">NSDate&lt;/span>&lt;span class="p">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dateValue&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://www.brianjcoleman.com/wp-content/uploads/2015/04/Sg0tZ.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h3 id="nscalendar">NSCalendar&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Playground - noun: a place where people can play&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">import&lt;/span> &lt;span class="nc">UIKit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Setup the calendar object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">calendar&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSCalendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">currentCalendar&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Set up date object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">date&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSDate&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create an NSDate for the first and last day of the month&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//let components = calendar.components(NSCalendarUnit.CalendarUnitYear |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// NSCalendarUnit.CalendarUnitMonth |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// NSCalendarUnit.WeekdayCalendarUnit |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// NSCalendarUnit.WeekCalendarUnit |&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// NSCalendarUnit.CalendarUnitDay,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// fromDate: date)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Create an NSDate for the first and last day of the month&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">components&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSCalendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">currentCalendar&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSCalendarUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CalendarUnitMonth&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fromDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">components&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">month&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Getting the First and Last date of the month&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">components&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">day&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">firstDateOfMonth&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSDate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">calendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateFromComponents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">components&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">month&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">components&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">day&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">lastDateOfMonth&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSDate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">calendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateFromComponents&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">unitFlags&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSCalendarUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WeekOfMonthCalendarUnit&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSCalendarUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">WeekdayCalendarUnit&lt;/span> &lt;span class="o">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSCalendarUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CalendarUnitDay&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">firstDateComponents&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">calendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unitFlags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fromDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">firstDateOfMonth&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">lastDateComponents&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">calendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">unitFlags&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fromDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">lastDateOfMonth&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Sun = 1, Sat = 7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">firstWeek&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">firstDateComponents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">weekOfMonth&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">lastWeek&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">lastDateComponents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">weekOfMonth&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">numOfDatesToPrepend&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">firstDateComponents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">weekday&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">numOfDatesToAppend&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">7&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">lastDateComponents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">weekday&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">6&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">lastDateComponents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">weekOfMonth&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">7&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">startDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSDate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">calendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateByAddingUnit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSCalendarUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CalendarUnitDay&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">numOfDatesToPrepend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">firstDateOfMonth&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">endDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSDate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">calendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateByAddingUnit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSCalendarUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CalendarUnitDay&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">numOfDatesToAppend&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">lastDateOfMonth&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">Array&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mf">0.&lt;/span>&lt;span class="p">.&amp;lt;&lt;/span>&lt;span class="mi">42&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">calendar&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateByAddingUnit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSCalendarUnit&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">CalendarUnitDay&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nv">$0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">toDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">startDate&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">options&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">nil&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">components&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">year&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">dateString&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;2014-10-3&amp;#34;&lt;/span> &lt;span class="c1">// change to your date format&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">dateFormatter&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">NSDateFormatter&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">dateFormatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateFormat&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;YYYY-MM-dd&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nv">someDate&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">dateFormatter&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dateFromString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">dateString&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">someDate&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="字符串">字符串&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">string1&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">let&lt;/span> &lt;span class="nv">string2&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hel&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34;lo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">string1&lt;/span> &lt;span class="p">==&lt;/span> &lt;span class="n">string2&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The strings are equal&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="创建增删">创建增删&lt;/h2>
&lt;h3 id="字符串插值">字符串插值&lt;/h3>
&lt;p>Swift 用字符串插值(string interpolation)的方式把常量名或者变量名当做占位符加入到长字符串中，Swift 会用当前常量或变量的值替换这些占位符。将常量或变量名放入圆括号中，并在开括号前使用反斜杠将其转义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The current value of friendlyWelcome is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">friendlyWelcome&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出 &amp;#34;The current value of friendlyWelcome is Bonjour!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="索引遍历">索引遍历&lt;/h2>
&lt;h3 id="存在判断">存在判断&lt;/h3>
&lt;pre tabindex="0">&lt;code> if string1.hasPrefix(&amp;#34;H&amp;#34;) {
println(&amp;#34;String begins with an H&amp;#34;)
}
if string1.hasSuffix(&amp;#34;llo&amp;#34;) {
println(&amp;#34;String ends in &amp;#39;llo&amp;#39;&amp;#34;)
}
&lt;/code>&lt;/pre>&lt;h2 id="类型编码">类型编码&lt;/h2>
&lt;h3 id="编解码">编解码&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">stringToConvert&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="s">&amp;#34;Hello, Swift&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">data&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">stringToConvert&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">dataUsingEncoding&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSUTF8StringEncoding&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="indexed-collections">Indexed Collections&lt;/h1>
&lt;h2 id="数组array">数组(Array)&lt;/h2>
&lt;pre tabindex="0">&lt;code>var arrayOfIntegers : [Int] = [1,2,3]
// 隐式指定
var implicitArrayOfIntegers = [1,2,3]
// 也可以创建空数组,但必须提供其类型
let anotherArray = [Int]()
//使用 append 函数向数组的末尾追加对象
myArray.append(4)
//数组中的任意位置插入对象
myArray.insert(5, atIndex: 0)
&lt;/code>&lt;/pre>&lt;h2 id="元组tuples">元组(Tuples)&lt;/h2>
&lt;p>元组(tuples)把多个值组合成一个复合值。元组内的值可以使任意类型，并不要求是相同类型。下面这个例子中，(404, &amp;ldquo;Not Found&amp;rdquo;)是一个描述 HTTP 状态码(HTTP status code)的元组。HTTP 状态码是当你请求网页的时候 web 服务器返回的一个特殊值。如果你请求的网页不存在就会返回一个 404 Not Found 状态码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="nv">http404Error&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">404&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;Not Found&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// http404Error 的类型是 (Int, String)，值是 (404, &amp;#34;Not Found&amp;#34;)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(404, &amp;ldquo;Not Found&amp;rdquo;)元组把一个 Int 值和一个 String 值组合起来表示 HTTP 状态码的两个部分：一个数字和一个人类可读的描述。这个元组可以被描述为“一个类型为(Int, String)的元组”。你可以把任意顺序的类型组合成一个元组，这个元组可以包含所有类型。只要你想，你可以创建一个类型为(Int, Int, Int)或者(String, Bool)或者其他任何你想要的组合的元组。&lt;/p>
&lt;p>你可以将一个元组的内容分解(decompose)成单独的常量和变量，然后你就可以正常使用它们了：&lt;/p>
&lt;pre tabindex="0">&lt;code>let (statusCode, statusMessage) = http404Error
println(&amp;#34;The status code is \(statusCode)&amp;#34;)
// 输出 &amp;#34;The status code is 404&amp;#34;
println(&amp;#34;The status message is \(statusMessage)&amp;#34;)
// 输出 &amp;#34;The status message is Not Found&amp;#34;
&lt;/code>&lt;/pre>&lt;p>如果你只需要一部分元组值，分解的时候可以把要忽略的部分用下划线(_)标记：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">let&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">justTheStatusCode&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">_&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">http404Error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The status code is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">justTheStatusCode&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出 &amp;#34;The status code is 404&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="索引遍历-1">索引遍历&lt;/h3>
&lt;p>你还可以通过下标来访问元组中的单个元素，下标从零开始：&lt;/p>
&lt;pre tabindex="0">&lt;code>println(&amp;#34;The status code is \(http404Error.0)&amp;#34;)
// 输出 &amp;#34;The status code is 404&amp;#34;
println(&amp;#34;The status message is \(http404Error.1)&amp;#34;)
// 输出 &amp;#34;The status message is Not Found&amp;#34;
&lt;/code>&lt;/pre>&lt;p>你可以在定义元组的时候给单个元素命名：&lt;/p>
&lt;pre tabindex="0">&lt;code>let http200Status = (statusCode: 200, description: &amp;#34;OK&amp;#34;)
&lt;/code>&lt;/pre>&lt;p>给元组中的元素命名后，你可以通过名字来获取这些元素的值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The status code is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">http200Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">statusCode&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出 &amp;#34;The status code is 200&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="bp">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The status message is &lt;/span>&lt;span class="si">\(&lt;/span>&lt;span class="n">http200Status&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">description&lt;/span>&lt;span class="si">)&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 输出 &amp;#34;The status message is OK&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>作为函数返回值时，元组非常有用。一个用来获取网页的函数可能会返回一个(Int, String)元组来描述是否获取成功。和只能返回一个类型的值比较起来，一个包含两个不同类型值的元组可以让函数的返回信息更有用。请参考[函数参数与返回值(06_Functions.html#Function_Parameters_and_Return_Values)。注意：元组在临时组织值的时候很有用，但是并不适合创建复杂的数据结构。如果你的数据结构并不是临时使用，请使用类或者结构体而不是元组。请参考类和结构体。&lt;/p>
&lt;h2 id="序列操作">序列操作&lt;/h2>
&lt;p>Swift 增加了一些方法，帮助我们对集合进行简洁的查询和修改。这些集合方法受到了函数式语言的启发。我们使用集合将多个值保存到一个单独的数据结构中，通常我们也会查询和修改集合。这些函数是基于 Swift 的标准数据库构建，协助简化常见的任务。为了协助诠释下面这些函数，我们使用了这些样例：&lt;/p>
&lt;pre tabindex="0">&lt;code>let ints = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]。
&lt;/code>&lt;/pre>&lt;p>对集合中的每个值执行闭包映射(map)，之后返回填充有映射值的映射结果类型数组。下面我们将 Int 数组转化为字符串数据：&lt;/p>
&lt;pre tabindex="0">&lt;code> let strings = ints.map { return String($0) }
print(&amp;#34;strings: \(strings)&amp;#34;) // prints: strings: [&amp;#34;0&amp;#34;, &amp;#34;1&amp;#34;, &amp;#34;2&amp;#34;, &amp;#34;3&amp;#34;, &amp;#34;4&amp;#34;, &amp;#34;5&amp;#34;, &amp;#34;6&amp;#34;, &amp;#34;7&amp;#34;, &amp;#34;8&amp;#34;, &amp;#34;9&amp;#34;]
&lt;/code>&lt;/pre>&lt;p>对数组中的每个值执行函数筛选(filter)，返回 Bool 值。在结果数组中，只会返回 true 值，而不会返回 false 值。下面我们从 ints 数组中筛选奇数：&lt;/p>
&lt;pre tabindex="0">&lt;code> let evenInts = ints.filter { return ($0 % 2 == 0) }
print(&amp;#34;evenInts: \(evenInts)&amp;#34;) // prints: evenInts: [0, 2, 4, 6, 8]
&lt;/code>&lt;/pre>&lt;p>reduce 比 map 和 filter 更复杂，不过因为非常有用，花时间学习也是有价值的。第一个参数就是第一个 reduce 值(在下面的案例中为 0)。第二个参数是访问之前 reduce 值和数组现值的函数。在本例中，我们的函数是将之前的函数值简单加到数组的现值中。&lt;/p>
&lt;pre tabindex="0">&lt;code> let reducedInts = ints.reduce(0, combine: +)
print(&amp;#34;reducedInts: \(reducedInts)&amp;#34;) // prints: reducedInts: 45
// defined another way:
let reducedIntsAlt = ints.reduce(0) { (previousValue: Int, currentValue: Int) -&amp;gt; Int in
return previousValue + currentValue
}
print(&amp;#34;reducedIntsAlt: \(reducedIntsAlt)&amp;#34;) // prints: reducedIntsAlt: 45
&lt;/code>&lt;/pre>&lt;p>通过 map，filter，reduce 方面的技巧，就能减少筛选时和处理集合时的工作量，并增加可读性，方便以后的人维护。&lt;/p>
&lt;h1 id="keyed-collections">Keyed Collections&lt;/h1>
&lt;h2 id="字典">字典&lt;/h2>
&lt;p>字典是一种将键映射到值的类型，类似 Java 的 Map,PHP 的数组&lt;/p>
&lt;pre tabindex="0">&lt;code> var crew = [
&amp;#34;Caption&amp;#34;: &amp;#34;Jean-Luc Picard&amp;#34;,
&amp;#34;First officer&amp;#34;: &amp;#34;William Riker&amp;#34;,
&amp;#34;Second Officer&amp;#34;: &amp;#34;Data&amp;#34;
];
crew[&amp;#34;Captain&amp;#34;]
// = &amp;#34;Jean-Luc Picard&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>序列化</title><link>https://ng-tech.icu/books/cs-series/swift/%E5%BA%8F%E5%88%97%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-series/swift/%E5%BA%8F%E5%88%97%E5%8C%96/</guid><description>&lt;h1 id="json">JSON&lt;/h1>
&lt;h2 id="modelmapper模型映射">ModelMapper(模型映射)&lt;/h2>
&lt;h3 id="objectmapperhttpsgithubcomhearst-ddobjectmapper">&lt;a href="https://github.com/Hearst-DD/ObjectMapper" target="_blank" rel="noopener">ObjectMapper&lt;/a>&lt;/h3>
&lt;p>ObjectMapper can be added to your project using CocoaPods 0.36 or later by adding the following line to your Podfile:&lt;/p>
&lt;pre tabindex="0">&lt;code>pod &amp;#39;ObjectMapper&amp;#39;, &amp;#39;~&amp;gt; 1.1&amp;#39;
&lt;/code>&lt;/pre>&lt;p>If you&amp;rsquo;re using Carthage you can add a dependency on ObjectMapper by adding it to your Cartfile:&lt;/p>
&lt;pre tabindex="0">&lt;code>github &amp;#34;Hearst-DD/ObjectMapper&amp;#34; ~&amp;gt; 1.1
&lt;/code>&lt;/pre>&lt;p>为了支持这种映射，一个类或者结构体必须实现 Mappable 这个接口。&lt;/p>
&lt;pre tabindex="0">&lt;code>public protocol Mappable {
init?(_ map: Map)
mutating func mapping(map: Map)
}
&lt;/code>&lt;/pre>&lt;p>ObjectMapper 使用&lt;code>&amp;lt;-&lt;/code>操作符来定义如何将属性从 JSON 映射到对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-swift" data-lang="swift">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">class&lt;/span> &lt;span class="nc">User&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Mappable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">username&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">String&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">age&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Int&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">weight&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">array&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">AnyObject&lt;/span>&lt;span class="p">]?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">dictionary&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">String&lt;/span> &lt;span class="p">:&lt;/span> &lt;span class="nb">AnyObject&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[:]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">bestFriend&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">User&lt;/span>&lt;span class="p">?&lt;/span> &lt;span class="c1">// Nested User object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">friends&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">User&lt;/span>&lt;span class="p">]?&lt;/span> &lt;span class="c1">// Array of Users&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">birthday&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">NSDate&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">required&lt;/span> &lt;span class="kd">init&lt;/span>&lt;span class="p">?(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Mappable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">func&lt;/span> &lt;span class="nf">mapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">map&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">username&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;username&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">age&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;age&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">weight&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;weight&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">array&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;arr&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dictionary&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;dict&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">bestFriend&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;best_friend&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">friends&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;friends&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">birthday&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;birthday&amp;#34;&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">DateTransform&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">struct&lt;/span> &lt;span class="nc">Temperature&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Mappable&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">celsius&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nv">fahrenheit&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">Double&lt;/span>&lt;span class="p">?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">init&lt;/span>&lt;span class="p">?(&lt;/span>&lt;span class="kc">_&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">mutating&lt;/span> &lt;span class="kd">func&lt;/span> &lt;span class="nf">mapping&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">map&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">celsius&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;celsius&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fahrenheit&lt;/span> &lt;span class="o">&amp;lt;-&lt;/span> &lt;span class="bp">map&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;fahrenheit&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>