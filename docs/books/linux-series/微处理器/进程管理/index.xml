<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>进程管理 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <atom:link href="https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <description>进程管理</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>进程管理</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
    </image>
    
    <item>
      <title>COW</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/cow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/cow/</guid>
      <description>&lt;h1 id=&#34;copy-on-write--写时复制&#34;&gt;Copy on Write | 写时复制&lt;/h1&gt;
&lt;p&gt;在 Linux 程序中，&lt;code&gt;fork()&lt;/code&gt; 会产生一个和父进程完全相同的子进程，但子进程在此后多会 exec 系统调用，出于效率考虑，Linux 中引入了写时复制技术，也就是只有进程空间的各段的内容要发生变化时，才会将父进程的内容复制一份给子进程。写时复制（Copy-on-write）是一种可以推迟甚至免除拷贝数据的技术。内核此时并不复制整个进程空间，而是让父进程和子进程共享同一个拷贝。只有在需要写入的时候，数据才会被复制，从而使各个进程拥有各自的拷贝。&lt;/p&gt;
&lt;p&gt;也就是说，资源的复制只有在需要写入的时候才进行，在此之前，以只读方式共享。这种技术使地址空间上页的拷贝被推迟到实际发生写入的时候。有时共享页根本不会被写入，例如，&lt;code&gt;fork()&lt;/code&gt; 后立即调用 &lt;code&gt;exec()&lt;/code&gt;，就无须复制父进程的页了。&lt;code&gt;fork()&lt;/code&gt; 的实际开销就是复制父进程的页表以及给子进程创建唯一的 PCB。这种优化可以避免拷贝大量根本就不会使用的数据(地址空间里常常包含数十兆的数据)。&lt;/p&gt;
&lt;h1 id=&#34;fork-实现&#34;&gt;fork 实现&lt;/h1&gt;
&lt;p&gt;传统的 fork()系统调用直接把所有的资源复制给新创建的进程。这种实现过于简单并且效率低下，因为它拷贝的数据也许并不共享，更糟的情况是，如果新进程打算立即执行一个新的映像，那么所有的拷贝都将前功尽弃。Linux 的 fork() 使用写时拷贝（copy-on-write）页实现。写时拷贝是一种可以推迟甚至免除拷贝数据的技术。内核此时并不复制整个进程地址空间，而是让父进程和子进程共享同一个拷贝。只有在需要写入的时候，数据才会被复制，从而使各个进程拥有各自的拷贝。也就是说，资源的复制只有在需要写入的时候才进行，在此之前，只是以只读方式共享。这种技术使地址空间上的页的拷贝被推迟到实际发生写入的时候。在页根本不会被写入的情况下—举例来说，fork()后立即调用 exec()—它们就无需复制了。fork()的实际开销就是复制父进程的页表以及给子进程创建惟一的进程描述符。在一般情况下，进程创建后都会马上运行一个可执行的文件，这种优化可以避免拷贝大量根本就不会被使用的数据（地址空间里常常包含数十兆的数据）。由于 Unix 强调进程快速执行的能力，所以这个优化是很重要的。这里补充一点：Linux COW 与 exec 没有必然联系。&lt;/p&gt;
&lt;p&gt;在 fork 之后 exec 之前两个进程用的是相同的物理空间（内存区），子进程的代码段、数据段、堆栈都是指向父进程的物理空间，也就是说，两者的虚拟空间不同，但其对应的物理空间是同一个。当父子进程中有更改相应段的行为发生时，再为子进程相应的段分配物理空间，如果不是因为 exec，内核会给子进程的数据段、堆栈段分配相应的物理空间（至此两者有各自的进程空间，互不影响），而代码段继续共享父进程的物理空间（两者的代码完全相同）。而如果是因为 exec，由于两者执行的代码不同，子进程的代码段也会分配单独的物理空间。不过，fork 之后内核会通过将子进程放在队列的前面，以让子进程先执行，以免父进程执行导致写时复制，而后子进程执行 exec 系统调用，因无意义的复制而造成效率的下降。&lt;/p&gt;
&lt;p&gt;实际上 COW 技术不仅仅在 Linux 进程上有应用，其他例如 C++的 String 在有的 IDE 环境下也支持 COW 技术，即例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;hello world&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;str1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;str2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在开始的两个语句后，str1 和 str2 存放数据的地址是一样的，而在修改内容后，str1 的地址发生了变化，而 str2 的地址还是原来的,这就是 C++中的 COW 技术的应用，不过 VS2005 似乎已经不支持 COW。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meltdown</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/meltdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/meltdown/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://inews.co.uk/wp-content/uploads/2018/01/meltdownspectre-1376x1032.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;meltdown-简述&#34;&gt;Meltdown 简述&lt;/h1&gt;
&lt;p&gt;近日现代 CPU 的 Meltdown &amp;amp; Spectre 漏洞沸沸扬扬，最早是 Google 研究员发现&lt;a href=&#34;https://googleprojectzero.blogspot.de/2018/01/reading-privileged-memory-with-side.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;可以通过内存侧信道时序攻击来获取隐私数据&lt;/a&gt;，后续 &lt;a href=&#34;https://www.chromium.org/Home/chromium-security/ssca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chromium&lt;/a&gt;, &lt;a href=&#34;https://support.apple.com/en-us/HT208394&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apple&lt;/a&gt; 以及 &lt;a href=&#34;https://blog.mozilla.org/security/2018/01/03/mitigations-landing-new-class-timing-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mozilla&lt;/a&gt; 都发文讨论了其对各个平台的影响与应对方案。网上讨论该漏洞的文章也很多，笔者个人感觉 &lt;a href=&#34;https://dev.to/isaacandsuch/how-meltdown-works-28j2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This is how Meltdown works&lt;/a&gt;, &lt;a href=&#34;http://t.cn/RH3DVKj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why Raspberry Pi Isn&amp;rsquo;t Vulnerable to Spectre or Meltdown&lt;/a&gt; 讲解的不错，而本文则翻译自 &lt;a href=&#34;https://hackernoon.com/meltdown-in-a-nutshell-bda0b79f84a2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Meltdown in a nutshell&lt;/a&gt; 这个简述；本文归纳于 &lt;a href=&#34;https://parg.co/UMI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 配置使用、内部原理与 Shell 编程&lt;/a&gt;系列。&lt;/p&gt;
&lt;p&gt;对于如下伪代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;memory_location_of_os_where_secret_lies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 抛出异常
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4096&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 基于 x 读取本地内存
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;应用程序会被编译或者解释为 CPU 指令，第一行对于敏感内存的读取最终会抛出异常，不过由于 CPU 的推测执行(Speculative Execution)优化，第二行代码会在 CPU 进行权限检测前执行，即 y 的值实际上已经被读取到了 CPU 缓存中。如果 x 的值是 &lt;code&gt;s&lt;/code&gt;，那么内存 arr[&lt;code&gt;s&lt;/code&gt; * 4096] 即会被 CPU 读取。CPU 发现进程无权读取后，即会清除 x 与 y 的值，不过 CPU 为了优化读取速度，会将本次的读取值缓存到 CPU 本地。攻击者即利用这一特性发起了旁路攻击，攻击者使用类似暴力破解的方式，遍历所有可能的 arr[x *4096] 地址；根据计时器来判断哪个地址的读取速度最快，即可以获取到 x 的值 &lt;code&gt;s&lt;/code&gt;。依次类推可以获得 ‘e’, ‘c’,’r’,’e’,’t’ 等值。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>管理命令</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</guid>
      <description>&lt;h1 id=&#34;ulimit&#34;&gt;ulimit&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;ulimint -a&lt;/code&gt; 用来显示当前的各种用户进程限制，其语法为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;ulimit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-aHS&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-c &amp;lt;core文件上限&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-d &amp;lt;数据节区大小&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-f &amp;lt;文件大小&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-m &amp;lt;内存大小&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-n &amp;lt;文件数目&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-p &amp;lt;缓冲区大小&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-s &amp;lt;堆叠大小&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-t &amp;lt;CPU时间&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-u &amp;lt;程序数目&amp;gt;&lt;span class=&#34;o&#34;&gt;][&lt;/span&gt;-v &amp;lt;虚拟内存大小&amp;gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-H 设置硬件资源限制.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-S 设置软件资源限制.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-a 显示当前所有的资源限制.
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-c size:设置core文件的最大值.单位:blocks
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-d size:设置数据段的最大值.单位:kbytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-f size:设置创建文件的最大值.单位:blocks
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-l size:设置在内存中锁定进程的最大值.单位:kbytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-m size:设置可以使用的常驻内存的最大值.单位:kbytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-n size:设置内核可以同时打开的文件描述符的最大值.单位:n
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-p size:设置管道缓冲区的最大值.单位:kbytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-s size:设置堆栈的最大值.单位:kbytes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-t size:设置CPU使用时间的最大上限.单位:seconds
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-v size:设置虚拟内存的最大值.单位:kbytes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
