<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>系统服务 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/</link>
      <atom:link href="https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <description>系统服务</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>系统服务</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/</link>
    </image>
    
    <item>
      <title>BootLoader</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/bootloader/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/bootloader/</guid>
      <description>&lt;h1 id=&#34;bootloader&#34;&gt;BootLoader&lt;/h1&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/82357200&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/82357200&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Systemd</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/systemd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/systemd/</guid>
      <description>&lt;h1 id=&#34;systemd&#34;&gt;Systemd&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;./Linux-CheatSheet.md&#34;&gt;init 进程&lt;/a&gt;是 Linux 系统 Booting 之后的首个进程，其作为守护进程运行直至系统关闭；传统的 Linux 中的服务控制方式也主要依赖于 sysvinit 机制:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo /etc/init.d/apache2 start
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 或者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ service apache2 start
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;当 sysvinit 系统初始化的时候，它是串行启动，并且会将所有可能用到的后台服务进程全部启动运行；系统必须等待所有的服务都启动就绪之后，才允许用户登录，导致启动时间过长与系统资源浪费。并且 init 进程只是执行启动脚本，不管其他事情，脚本需要自己处理各种情况，使得脚本复杂度增加很多。Systemd 就是为了解决这些问题而诞生的。它的设计目标是，为系统的启动和管理提供一套完整的解决方案；Systemd 并不是一个命令，而是一组命令，涉及到系统管理的方方面面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看 Systemd 的版本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemctl --version
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重启系统&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl reboot
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 关闭系统，切断电源&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl poweroff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# CPU 停止工作&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl halt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看启动耗时&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemd-analyze
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看每个服务的启动耗时&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemd-analyze blame
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示瀑布状的启动过程流&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemd-analyze critical-chain
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示指定服务的启动流&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemd-analyze critical-chain atd.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Systemd 可以管理所有系统资源。不同的资源统称为 Unit(单位)，Unit 一共分成 12 种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Service unit：系统服务&lt;/li&gt;
&lt;li&gt;Target unit：多个 Unit 构成的一个组&lt;/li&gt;
&lt;li&gt;Device Unit：硬件设备&lt;/li&gt;
&lt;li&gt;Mount Unit：文件系统的挂载点&lt;/li&gt;
&lt;li&gt;Automount Unit：自动挂载点&lt;/li&gt;
&lt;li&gt;Path Unit：文件或路径&lt;/li&gt;
&lt;li&gt;Scope Unit：不是由 Systemd 启动的外部进程&lt;/li&gt;
&lt;li&gt;Slice Unit：进程组&lt;/li&gt;
&lt;li&gt;Snapshot Unit：Systemd 快照，可以切回某个快照&lt;/li&gt;
&lt;li&gt;Socket Unit：进程间通信的 socket&lt;/li&gt;
&lt;li&gt;Swap Unit：swap 文件&lt;/li&gt;
&lt;li&gt;Timer Unit：定时器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;systemctl status 命令用于查看系统状态和单个 Unit 的状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示系统状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemctl status
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示单个 Unit 的状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sysystemctl status bluetooth.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示远程主机的某个 Unit 的状态&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemctl -H root@rhel7.example.com status httpd.service
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们最常用的就是 Unit 管理命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 立即启动一个服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl start apache.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 立即停止一个服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl stop apache.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重启一个服务&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl restart apache.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 杀死一个服务的所有子进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; apache.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重新加载一个服务的配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl reload apache.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 重载所有修改过的配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl daemon-reload
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示某个 Unit 的所有底层参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemctl show httpd.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示某个 Unit 的指定属性的值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ systemctl show -p CPUShares httpd.service
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 设置某个 Unit 的指定属性&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo systemctl set-property httpd.service &lt;span class=&#34;nv&#34;&gt;CPUShares&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;500&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每一个 Unit 都有一个配置文件，告诉 Systemd 怎么启动这个 Unit。Systemd 默认从目录 &lt;code&gt;/etc/systemd/system/&lt;/code&gt; 读取配置文件。但是，里面存放的大部分文件都是符号链接，指向目录 &lt;code&gt;/usr/lib/systemd/system/&lt;/code&gt;，真正的配置文件存放在那个目录。systemctl enable 命令用于在上面两个目录之间，建立符号链接关系。配置文件的基础格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Unit&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;Description&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;ATD daemon
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Service&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;forking
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;ExecStart&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/bin/atd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;Install&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;WantedBy&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;multi-user.target
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;centos 7 以上是用 Systemd 进行系统初始化的，Systemd 是 Linux 系统中最新的初始化系统(init)，它主要的设计目标是克服 sysvinit 固有的缺点，提高系统的启动速度。关于 Systemd 的详情介绍在&lt;a href=&#34;http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;Systemd 服务文件以.service 结尾，比如现在要建立 nginx 为开机启动，如果用 yum install 命令安装的，yum 命令会自动创建 nginx.service 文件，直接用命令&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemcel enable nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设置开机启动即可。&lt;/p&gt;
&lt;p&gt;设置开机启动即可。在这里我是用源码编译安装的，所以要手动创建 nginx.service 服务文件。&lt;/p&gt;
&lt;p&gt;设置开机启动即可。在这里我是用源码编译安装的，所以要手动创建 nginx.service 服务文件。开机没有登陆情况下就能运行的程序，存在系统服务(system)里，即：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;/lib/systemd/system/&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;1.在系统服务目录里创建 nginx.service 文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;vim /lib/systemd/system/nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;内容如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;12345678910111213&lt;/th&gt;
&lt;th&gt;[Unit] Description=nginx After=network.target [Service] Type=forking ExecStart=/usr/local/nginx/sbin/nginx ExecReload=/usr/local/nginx/sbin/nginx -s reload ExecStop=/usr/local/nginx/sbin/nginx -s quitPrivateTmp=true [Install] WantedBy=multi-user.target&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;
[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking 是后台运行的形式&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking 是后台运行的形式
ExecStart 为服务的具体运行命令&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking 是后台运行的形式
ExecStart 为服务的具体运行命令
ExecReload 为重启命令&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking 是后台运行的形式
ExecStart 为服务的具体运行命令
ExecReload 为重启命令
ExecStop 为停止命令&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking 是后台运行的形式
ExecStart 为服务的具体运行命令
ExecReload 为重启命令
ExecStop 为停止命令
PrivateTmp=True 表示给服务分配独立的临时空间&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking 是后台运行的形式
ExecStart 为服务的具体运行命令
ExecReload 为重启命令
ExecStop 为停止命令
PrivateTmp=True 表示给服务分配独立的临时空间注意：[Service]的启动、重启、停止命令全部要求使用绝对路径&lt;/p&gt;
&lt;p&gt;[]: Unit &amp;ldquo;服务的说明&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Description:描述服务
After:描述服务类别
[Service]服务运行参数的设置
Type=forking 是后台运行的形式
ExecStart 为服务的具体运行命令
ExecReload 为重启命令
ExecStop 为停止命令
PrivateTmp=True 表示给服务分配独立的临时空间注意：[Service]的启动、重启、停止命令全部要求使用绝对路径
[Install]运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为 3&lt;/p&gt;
&lt;p&gt;保存退出。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.设置开机启动&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemctl enable nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;3.其它命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3.其它命令&lt;/strong&gt;
启动 nginx 服务&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemctl start nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;设置开机自启动&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemctl enable nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;停止开机自启动&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemctl disable nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;查看服务当前状态&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemctl status nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;重新启动服务&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemctl restart nginx.service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;查看所有已启动的服务&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1&lt;/th&gt;
&lt;th&gt;systemctl list-units &amp;ndash;type=service&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;4.Systemd 命令和 sysvinit 命令的对照表&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sysvinit 命令&lt;/th&gt;
&lt;th&gt;Systemd 命令&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;service foo start&lt;/td&gt;
&lt;td&gt;systemctl start foo.service&lt;/td&gt;
&lt;td&gt;用来启动一个服务 (并不会重启现有的)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo stop&lt;/td&gt;
&lt;td&gt;systemctl stop foo.service&lt;/td&gt;
&lt;td&gt;用来停止一个服务 (并不会重启现有的)，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo restart&lt;/td&gt;
&lt;td&gt;systemctl restart foo.service&lt;/td&gt;
&lt;td&gt;用来停止并启动一个服务，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo reload&lt;/td&gt;
&lt;td&gt;systemctl reload foo.service&lt;/td&gt;
&lt;td&gt;当支持时，重新装载配置文件而不中断等待操作，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo condrestart&lt;/td&gt;
&lt;td&gt;systemctl condrestart foo.service&lt;/td&gt;
&lt;td&gt;如果服务正在运行那么重启它，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;service foo status&lt;/td&gt;
&lt;td&gt;systemctl status foo.service&lt;/td&gt;
&lt;td&gt;汇报服务是否正在运行，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ls /etc/rc.d/init.d/&lt;/td&gt;
&lt;td&gt;systemctl list-unit-files –type=service&lt;/td&gt;
&lt;td&gt;用来列出可以启动或停止的服务列表，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo on&lt;/td&gt;
&lt;td&gt;systemctl enable foo.service&lt;/td&gt;
&lt;td&gt;在下次启动时或满足其他触发条件时设置服务为启用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo off&lt;/td&gt;
&lt;td&gt;systemctl disable foo.service&lt;/td&gt;
&lt;td&gt;在下次启动时或满足其他触发条件时设置服务为禁用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo&lt;/td&gt;
&lt;td&gt;systemctl is-enabled foo.service&lt;/td&gt;
&lt;td&gt;用来检查一个服务在当前环境下被配置为启用还是禁用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig –list&lt;/td&gt;
&lt;td&gt;systemctl list-unit-files –type=service&lt;/td&gt;
&lt;td&gt;输出在各个运行级别下服务的启用和禁用情况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo –list&lt;/td&gt;
&lt;td&gt;ls /etc/systemd/system/*.wants/foo.service&lt;/td&gt;
&lt;td&gt;用来列出该服务在哪些运行级别下启用和禁用，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chkconfig foo –add&lt;/td&gt;
&lt;td&gt;systemctl daemon-reload&lt;/td&gt;
&lt;td&gt;当您创建新服务文件或者变更设置时使用，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;telinit 3&lt;/td&gt;
&lt;td&gt;systemctl isolate multi-user.target (OR systemctl isolate runlevel3.target OR telinit 3)&lt;/td&gt;
&lt;td&gt;改变至多用户运行级别，&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;5.Sysvinit 运行级别和 systemd 目标的对应表&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sysvinit 运行级别&lt;/th&gt;
&lt;th&gt;Systemd 目标&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;runlevel0.target, poweroff.target&lt;/td&gt;
&lt;td&gt;关闭系统，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1, s, single&lt;/td&gt;
&lt;td&gt;runlevel1.target, rescue.target&lt;/td&gt;
&lt;td&gt;单用户模式，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2, 4&lt;/td&gt;
&lt;td&gt;runlevel2.target, runlevel4.target, multi-user.target&lt;/td&gt;
&lt;td&gt;用户定义/域特定运行级别。默认等同于 3，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;runlevel3.target, multi-user.target&lt;/td&gt;
&lt;td&gt;多用户，非图形化。用户可以通过多个控制台或网络登录，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;runlevel5.target, graphical.target&lt;/td&gt;
&lt;td&gt;多用户，图形化。通常为所有运行级别 3 的服务外加图形化登录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;runlevel6.target, reboot.target&lt;/td&gt;
&lt;td&gt;重启&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;emergency&lt;/td&gt;
&lt;td&gt;emergency.target&lt;/td&gt;
&lt;td&gt;紧急 Shell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.linuxeye.com/400.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Systemd 详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>服务与初始化</title>
      <link>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-series/%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8/%E7%B3%BB%E7%BB%9F%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E4%B8%8E%E5%88%9D%E5%A7%8B%E5%8C%96/</guid>
      <description>&lt;h1 id=&#34;linux-系统中的服务与初始化&#34;&gt;Linux 系统中的服务与初始化&lt;/h1&gt;
&lt;p&gt;自启动服务非常重要，例如&lt;/p&gt;
&lt;p&gt;(1)需要手动添加希望自启的服务，如安装 svn 后没有自动添加，就需要我们手动加入&lt;/p&gt;
&lt;p&gt;(2)安装某些程序后，自动加到自启动了，但我们不需要，需要手动移除&lt;/p&gt;
&lt;p&gt;(3)很多恶意程序都会把自己加入自启动，需要我们排查删除&lt;/p&gt;
&lt;p&gt;运行级别的原理&lt;/p&gt;
&lt;p&gt;涉及到自启动操作时，就会接触到 /etc/rc.d/rc[0-6].d 这 7 个目录&lt;/p&gt;
&lt;p&gt;这几个目录代表着 linux 的 7 个运行级别&lt;/p&gt;
&lt;p&gt;在 /etc/inittab 文件中指定了系统启动时默认进入哪个级别&lt;/p&gt;
&lt;p&gt;Linux 进入运行级别后，就会进入对应的 rcN.d 目录，按照文件名顺序检索目录下的文件&lt;/p&gt;
&lt;p&gt;rcN.d 目录下都是一些链接文件，这些链接文件都指向 /etc/init.d 目录下的 service 脚本文件，例如&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://static.webhek.com/techug-res/uploads/2016/08/640.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;命名规则为:
K+nn+服务名，或 S+nn+服务名&lt;/p&gt;
&lt;p&gt;K – 系统将终止对应的服务&lt;/p&gt;
&lt;p&gt;S – 系统将启动对应的服务&lt;/p&gt;
&lt;p&gt;nn – 两位数字，执行顺序&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://static.webhek.com/techug-res/uploads/2016/08/640-1.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;
7 个运行级别是什么？&lt;/p&gt;
&lt;p&gt;0 – 停机&lt;/p&gt;
&lt;p&gt;1 – 单用户模式，root 权限，用于系统维护，禁止远程登陆
2 – 多用户状态，没有 NFS&lt;/p&gt;
&lt;p&gt;3 – 标准多用户模式，登陆后进入命令行模式&lt;/p&gt;
&lt;p&gt;4 – 系统未使用，保留&lt;/p&gt;
&lt;p&gt;5 – 多用户图形模式，登陆后进入图形 GUI 模式&lt;/p&gt;
&lt;p&gt;6 – 重新启动&lt;/p&gt;
&lt;p&gt;服务器一般都是命令行模式，所以默认运行级别为 3&lt;/p&gt;
&lt;p&gt;如何添加自启程序？&lt;/p&gt;
&lt;p&gt;(1)/etc/init.d 目录中添加&lt;/p&gt;
&lt;p&gt;以启动 SVN 为例&lt;/p&gt;
&lt;p&gt;1)在 /etc/init.d 目录下创建启动服务的脚本&lt;/p&gt;
&lt;p&gt;vim /etc/init.d/svn&lt;/p&gt;
&lt;p&gt;内容&lt;/p&gt;
&lt;p&gt;#!/bin/bash
svnserve -d -r /svn 仓库路径&lt;/p&gt;
&lt;p&gt;设置执行权限&lt;/p&gt;
&lt;p&gt;chmod 755 /etc/init.d/svn&lt;/p&gt;
&lt;p&gt;2)把这个脚本软链接到 /etc/rc.d/rc3.d&lt;/p&gt;
&lt;p&gt;ln -s /etc/init.d/svn /etc/rc.d/rc3.d/S101svn&lt;/p&gt;
&lt;p&gt;S 代表是要执行这个脚本，101 是执行顺序，通常要大于 60，这样可以保证基础服务都已经启动完成&lt;/p&gt;
&lt;p&gt;重启 linux 测试&lt;/p&gt;
&lt;p&gt;(2)/etc/rc.local 文件中添加&lt;/p&gt;
&lt;p&gt;直接修改 /etc/rc.local&lt;/p&gt;
&lt;p&gt;该脚本是在系统初始化级别脚本运行之后再执行的，因此可以在里面添加想在系统启动之后执行的脚本&lt;/p&gt;
&lt;p&gt;(3)chkconfig 命令添加&lt;/p&gt;
&lt;p&gt;如何禁止自启程序？&lt;/p&gt;
&lt;p&gt;(1)直接删除 /etc/rc.d/rcN.d 目录的目标链接文件&lt;/p&gt;
&lt;p&gt;(2)删除 /etc/rc.local 文件中定义的启动脚本&lt;/p&gt;
&lt;p&gt;(3)查看自启动服务列表，从中选择目标服务执行禁止操作&lt;/p&gt;
&lt;p&gt;chkconfig –list&lt;/p&gt;
&lt;p&gt;chkconfig –del 服务名&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
