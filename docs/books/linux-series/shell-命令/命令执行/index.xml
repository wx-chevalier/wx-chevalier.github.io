<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>命令执行 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link><atom:link href="https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/index.xml" rel="self" type="application/rss+xml"/><description>命令执行</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>命令执行</title><link>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link></image><item><title>参数与返回</title><link>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E5%8F%82%E6%95%B0%E4%B8%8E%E8%BF%94%E5%9B%9E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E5%8F%82%E6%95%B0%E4%B8%8E%E8%BF%94%E5%9B%9E/</guid><description>&lt;h1 id="脚本参数">脚本参数&lt;/h1>
&lt;h1 id="命令行参数">命令行参数&lt;/h1>
&lt;p>所有命令行参数（位置参数）都可以通过特殊的外壳变量 $1，$2，$3，&amp;hellip;，$9 获得。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The script name : &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The value of the first argument to the script : &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The value of the second argument to the script : &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The value of the third argument to the script : &lt;/span>&lt;span class="nv">$3&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The number of arguments passed to the script : &lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The value of all command-line arguments (\$* version) : &lt;/span>&lt;span class="nv">$*&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The value of all command-line arguments (\$@ version) : &lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./cmdargs.sh bmw ford toyota&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The script name : ./cmdargs.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The value of the first argument to the script : bmw
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The value of the second argument to the script : ford
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The value of the third argument to the script : toyota
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The number of arguments passed to the script : &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The value of all command-line arguments &lt;span class="o">(&lt;/span>&lt;span class="nv">$*&lt;/span> version&lt;span class="o">)&lt;/span> : bmw ford toyota
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The value of all command-line arguments &lt;span class="o">(&lt;/span>&lt;span class="nv">$@&lt;/span> version&lt;span class="o">)&lt;/span> : bmw ford toyota
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里对 &lt;code>$@&lt;/code> 与 &lt;code>$*&lt;/code> 的异同再次进行阐述：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://bash.cyberciti.biz/guide/$@" target="_blank" rel="noopener">&lt;code>$@&lt;/code>&lt;/a> expanded as &amp;ldquo;$1&amp;rdquo; &amp;ldquo;$2&amp;rdquo; &amp;ldquo;$3&amp;rdquo; &amp;hellip; &amp;ldquo;$n&amp;rdquo;&lt;/li>
&lt;li>&lt;a href="https://bash.cyberciti.biz/guide/$*" target="_blank" rel="noopener">&lt;code>$*&lt;/code>&lt;/a> expanded as &amp;ldquo;$1y$2y$3y&amp;hellip;$n&amp;rdquo;, where y is the value of &lt;a href="https://bash.cyberciti.biz/guide/$IFS" target="_blank" rel="noopener">&lt;code>$IFS&lt;/code>&lt;/a> variable i.e. &amp;ldquo;&lt;code>$*&lt;/code>&amp;rdquo; is one long string and &lt;code>$IFS&lt;/code> act as an separator or token delimiters.&lt;/li>
&lt;/ul>
&lt;p>相对完整的示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nb">test&lt;/span> &lt;span class="nv">$#&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">start&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">finish&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">elif&lt;/span> &lt;span class="nb">test&lt;/span> &lt;span class="nv">$#&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">start&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">finish&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Usage: &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> &amp;lt;start&amp;gt; &amp;lt;finish&amp;gt;&amp;#34;&lt;/span> 1&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> argument in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$argument&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> egrep -v &lt;span class="s1">&amp;#39;^-?[0-9]+$&amp;#39;&lt;/span> &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2">: argument &amp;#39;&lt;/span>&lt;span class="nv">$argument&lt;/span>&lt;span class="s2">&amp;#39; is not an integer&amp;#34;&lt;/span> 1&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$start&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="nb">test&lt;/span> &lt;span class="nv">$number&lt;/span> -le &lt;span class="nv">$finish&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$number&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">number&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="nv">$number&lt;/span> + 1&lt;span class="sb">`&lt;/span> &lt;span class="c1"># or number=$(($number + 1))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="使用说明">使用说明&lt;/h2>
&lt;p>您可以使用 if 命令来检查命令行参数。未通过必需的命令行选项时，许多 Linux 命令都会显示错误或使用情况信息。例如，尝试以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gcc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># gcc: no input files&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>取决于用户输入的 shell 脚本必须：验证传递给它的参数数量。如果未将参数或输入传递给脚本，则显示错误或用法消息。您的 shell 脚本还可以使用 if 命令和 &lt;code>$#&lt;/code> 特殊的 shell 变量参数来创建此类用法消息。创建一个名为 userlookup.sh 的外壳脚本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1"># A shell script to lookup usernames in /etc/passwd file&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Written by: Vivek Gite&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Last updated on: Sep/10/2003&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># -------------------------------------------------------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set vars&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">user&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span> &lt;span class="c1"># first command line argument&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">passwddb&lt;/span>&lt;span class="o">=&lt;/span>/etc/passwd
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Verify the type of input and number of values&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Display an error message if the username (input) is not correct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Exit the shell script with a status of 1 using exit 1 command.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -eq &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Usage: &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> username&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exit&lt;/span> 1&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">grep &lt;span class="s2">&amp;#34;^&lt;/span>&lt;span class="nv">$user&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="nv">$passwddb&lt;/span> &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">retval&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$?&lt;/span> &lt;span class="c1"># store exit status of grep&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># If grep found username, it sets exit status to zero&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Use exit status to make the decision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> &lt;span class="nv">$retval&lt;/span> -eq &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$user&lt;/span>&lt;span class="s2"> found&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$user&lt;/span>&lt;span class="s2"> not found&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="shell-参数">Shell 参数&lt;/h1>
&lt;ul>
&lt;li>All command line parameters or arguments can be accessed via $1, $2, $3,&amp;hellip;, $9.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://bash.cyberciti.biz/guide/$*" target="_blank" rel="noopener">&lt;code>$*&lt;/code>&lt;/a>&lt;/strong> holds all command line parameters or arguments.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://bash.cyberciti.biz/guide/$" target="_blank" rel="noopener">&lt;code>$#&lt;/code>&lt;/a>&lt;/strong> holds the number of positional parameters.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://bash.cyberciti.biz/guide/$-" target="_blank" rel="noopener">&lt;code>$-&lt;/code>&lt;/a>&lt;/strong> holds flags supplied to the shell.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://bash.cyberciti.biz/guide/$%3F" target="_blank" rel="noopener">&lt;code>$?&lt;/code>&lt;/a>&lt;/strong> holds the return value set by the previously executed command.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://bash.cyberciti.biz/guide/$$" target="_blank" rel="noopener">&lt;code>$$&lt;/code>&lt;/a>&lt;/strong> holds the process number of the shell (current shell).&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://bash.cyberciti.biz/guide/$!" target="_blank" rel="noopener">&lt;code>$!&lt;/code>&lt;/a>&lt;/strong> hold the process number of the last background command.&lt;/li>
&lt;li>&lt;strong>&lt;a href="https://bash.cyberciti.biz/guide/$@" target="_blank" rel="noopener">&lt;code>$@&lt;/code>&lt;/a>&lt;/strong> holds all command line parameters or arguments.&lt;/li>
&lt;/ul>
&lt;h1 id="exit">exit&lt;/h1>
&lt;p>每个 Linux 命令正常或异常终止时都会返回一个状态。您可以在 shell 脚本中使用退出状态的值来显示错误消息或采取某种措施。例如，如果 tar 命令不成功，它将返回一个代码，该代码告诉 Shell 脚本向 sysadmin 发送电子邮件。Shell 脚本或用户执行的每个 Linux 命令都具有退出状态。退出状态是整数。Linux 手册页统计了每个命令的退出状态。退出状态为 0 表示命令成功执行，没有任何错误。非零（1-255 值）的退出状态表示命令失败。您可以使用名为 &lt;code>$&lt;/code> 的特殊 shell 变量。获取先前执行的命令的退出状态。要打印 &lt;code>$&lt;/code> 变量使用 echo 命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date &lt;span class="c1"># run date command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span> &lt;span class="c1"># print exit status&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">foobar123 &lt;span class="c1"># not a valid command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span> &lt;span class="c1"># print exit status&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls -l /tmp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">status&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;ls command exit stats - &lt;/span>&lt;span class="nv">$status&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>退出状态不仅限于 Shell 脚本。每次命令终止的 Shell 程序都会获得一个退出代码，以指示命令的成功或失败。因此，我们可以使用特定的 bash 变量 &lt;code>$?&lt;/code> 来获取命令的退出状态。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ping -q -c &lt;span class="m">4&lt;/span> www.cyberciti.biz &amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在此示例中，我们将仅看到最后一个命令（command3）的退出状态：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">command1 &lt;span class="p">|&lt;/span> command2 &lt;span class="p">|&lt;/span> command3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## will get the exit status of the last command in the pipeline ##&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>管道与连接</title><link>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E7%AE%A1%E9%81%93%E4%B8%8E%E8%BF%9E%E6%8E%A5/</guid><description>&lt;h1 id="管道与连接">管道与连接&lt;/h1>
&lt;h1 id="命令连接">命令连接&lt;/h1>
&lt;p>在 Bash 下，您可以创建一个由以下操作符之一分隔的一个或多个命令序列：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Operator&lt;/th>
&lt;th>Syntax&lt;/th>
&lt;th>Description&lt;/th>
&lt;th>Example&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>;&lt;/td>
&lt;td>command1; command2&lt;/td>
&lt;td>Separates commands that are executed in sequence.&lt;/td>
&lt;td>In this example, pwd is executed only after date command completes. &lt;code>date ; pwd&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;&lt;/td>
&lt;td>command arg &amp;amp;&lt;/td>
&lt;td>The shell executes the command in the background in a subshell. The shell does not wait for the command to finish, and the return status is 0. The &amp;amp; operator runs the command in background while freeing up your terminal for other work.&lt;/td>
&lt;td>In this example, find command is executed in background while freeing up your shell prompt. &lt;code>find / -iname &amp;quot;*.pdf&amp;quot; &amp;gt;/tmp/output.txt &amp;amp;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;&amp;amp;&lt;/td>
&lt;td>command1 &amp;amp;&amp;amp; command2&lt;/td>
&lt;td>command2 is executed if, and only if, command1 returns an exit status of zero i.e. command2 only runs if first command1 run successfully.&lt;/td>
&lt;td>&lt;code>[ ! -d /backup ] &amp;amp;&amp;amp; mkdir -p /backup&lt;/code> See &lt;a href="https://bash.cyberciti.biz/guide/Logical_AND" target="_blank" rel="noopener">Logical AND&lt;/a> section for examples.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>||&lt;/td>
&lt;td>command1 || command2&lt;/td>
&lt;td>command2 is executed if and only if command1 returns a non-zero exit status i.e. command2 only runs if first command fails.&lt;/td>
&lt;td>`tar cvf /dev/st0 /home || mail -s &amp;lsquo;Backup failed&amp;rsquo; &lt;a href="mailto:you@example.com">you@example.com&lt;/a> See &lt;a href="https://bash.cyberciti.biz/guide/Logical_OR" target="_blank" rel="noopener">Logical OR&lt;/a> section for examples.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>|&lt;/td>
&lt;td>command1 | command2&lt;/td>
&lt;td>Linux shell pipes join the standard output of command1 to the standard input of command2.&lt;/td>
&lt;td>In this example, output of the &lt;a href="https://bash.cyberciti.biz/guide/Ps_command" target="_blank" rel="noopener">ps command&lt;/a> is provided as the standard input to the &lt;a href="https://bash.cyberciti.biz/guide/Grep_command" target="_blank" rel="noopener">grep command&lt;/a> `ps aux&lt;/td>
&lt;td>grep httpd`&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="heading">;&lt;/h2>
&lt;p>您可以使用 ; 建立命令序列。字符（运算符）和语法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">command1 &lt;span class="p">;&lt;/span> command2 &lt;span class="p">;&lt;/span> commandN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># OR&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">{&lt;/span> command1&lt;span class="p">;&lt;/span> command2 &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，您可以一个接一个地运行命令。在以下示例中，如果未传递足够的命令行参数（math.sh），shell 脚本将显示错误消息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">op&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ans&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># display usage&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># run commands one after the other using ; chracter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -eq &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;Usage: &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> num1 op num2\n\t &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2"> 1 + 5&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exit&lt;/span> 1&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nv">$op&lt;/span> in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> +&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ans&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="o">(&lt;/span> a+b &lt;span class="k">))&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ans&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="o">(&lt;/span> a-b &lt;span class="k">))&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ans&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="o">(&lt;/span> a/b &lt;span class="k">))&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="se">\*&lt;/span>&lt;span class="p">|&lt;/span>x&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">ans&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="o">(&lt;/span> a*b &lt;span class="k">))&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Unknown operator.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span> 2&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">esac&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$op&lt;/span>&lt;span class="s2"> &lt;/span>&lt;span class="nv">$b&lt;/span>&lt;span class="s2"> = &lt;/span>&lt;span class="nv">$ans&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="heading-1">&amp;amp;&amp;amp;&lt;/h2>
&lt;p>如果使用逻辑 AND（&amp;amp;&amp;amp;）运算符成功执行 command1，请运行 command2：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">command1 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> command2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如，如果存在 wget 命令则执行 echo 命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">type&lt;/span> -a wget &amp;gt;/dev/null &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;wget command found. Download the Linux kernel ...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="heading-2">||&lt;/h2>
&lt;p>类似地，仅当 foo 命令使用逻辑 OR 运算符返回非零退出状态时，才执行 bar 命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ foo &lt;span class="o">||&lt;/span> bar
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="示例">示例&lt;/h2>
&lt;p>因此，我们可以结合 bash 退出命令和退出代码来构建快速逻辑，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ my_command &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Done&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Failed&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ /usr/bin/rsnapshot daily &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Backup successful&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Backup failed. Alerting OPS team...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir /opt/kernel &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">cd&lt;/span> &lt;span class="nv">$_&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Directory created and you are in &lt;/span>&lt;span class="nv">$PWD&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们还可以将某些命令合并编组：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> -f /path/to/file &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;File found. Starting ...&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /path/to/command2&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /path/to/command3 arg1 arg2&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## another example ##&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$value&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;Yes&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">_errs&lt;/span>&lt;span class="o">=(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">_errs&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;p&amp;gt;The I/O thread for reading the master&amp;#39;s binary log not found (&lt;/span>&lt;span class="nv">$v&lt;/span>&lt;span class="s2">: &lt;/span>&lt;span class="nv">$value&lt;/span>&lt;span class="s2">)&amp;lt;/p&amp;gt;&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">_is_error_found&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以参考如下相对完整的示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BAK&lt;/span>&lt;span class="o">=&lt;/span>/data2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TAPE&lt;/span>&lt;span class="o">=&lt;/span>/dev/st0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Trying to backup &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">BAK&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> directory to tape device &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">TAPE&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2"> ..&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># See if $BAK directory exists or not, else die&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set unsuccessful shell script termination with exit status # 1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> ! -d &lt;span class="nv">$BAK&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Source backup directory &lt;/span>&lt;span class="nv">$BAK&lt;/span>&lt;span class="s2"> not found.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exit&lt;/span> 1&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># See if $TAPE device exists or not, else die&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Set unsuccessful shell script termination with exit status # 2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> ! -b &lt;span class="nv">$TAPE&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Backup tape drive &lt;/span>&lt;span class="nv">$TAPE&lt;/span>&lt;span class="s2"> not found or configured.&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exit&lt;/span> 2&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Okay back it up&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">tar cvf &lt;span class="nv">$TAPE&lt;/span> &lt;span class="nv">$BAK&lt;/span> 2&amp;gt; /tmp/error.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> -ne &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1"># die with unsuccessful shell script termination exit status # 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;An error occurred while making a tape backup, see /tmp/error.log file&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span> &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Terminate our shell script with success message i.e. backup done!&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chmod +x datatapebackup.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./datatapebackup.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>成功或异常终止时，我们所有的 shell 命令都将返回退出代码。我们可以在 shell 脚本中使用 exit 命令提供退出代码。我们还学习了如何利用退出状态的功能在 Shell 脚本或命令行中构建逻辑。&lt;/p>
&lt;h1 id="管道">管道&lt;/h1>
&lt;p>Shell 管道是一种将一个程序的输出连接到另一个程序的输入而无需任何临时文件的方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">command1 &lt;span class="p">|&lt;/span> command2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command1 &lt;span class="p">|&lt;/span> command2 &lt;span class="p">|&lt;/span> commandN
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command1 arg1 &lt;span class="p">|&lt;/span> command2 arg1 arg2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">get_data_command &lt;span class="p">|&lt;/span> verify_data_command &lt;span class="p">|&lt;/span> process_data_command &lt;span class="p">|&lt;/span> format_data_command &amp;gt; output.data.file
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">get_data_command &amp;lt; input.data.file &lt;span class="p">|&lt;/span> verify_data_command &lt;span class="p">|&lt;/span> process_data_command &lt;span class="p">|&lt;/span> format_data_command &amp;gt; output.data.file
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以一次连接两个或多个命令。连接两个程序的数据路径称为管道。竖线（|）是管道符号。Shell 管道更全面地支持 Unix 链接程序的哲学，以完成复杂的任务。也允许在管道中重定向。数据路径仅在一个方向上起作用：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/06/17/NARrOx.png" alt="Pipe" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>在两个命令之间使用竖线（|）。在此示例中，将 ls 命令输出发送到 grep 命令，即确定是否有数据.txt 文件是否在当前工作目录中退出：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>ls | grep &amp;#34;data.txt&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在命令名称之后但在竖线之前列出的所有命令行参数（参数）：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>ls -al | grep &amp;#34;data.txt&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>无需在命令名称和竖线之间放置空格，这是可选的：&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>ls -al|grep &amp;#34;data.txt&amp;#34;
&lt;/code>&lt;/pre>&lt;p>但是，我建议在命令名称和竖线之间使用空格，以提高可读性。您可以将管道输出重定向到文件（带有 &amp;gt; 符号的输出重定向）:&lt;/p>
&lt;pre tabindex="0">&lt;code>ps aux | grep httpd &amp;gt; /tmp/ps.output.log
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>暂停 ls 命令输出&lt;/li>
&lt;/ul>
&lt;p>Send output of the &lt;a href="https://bash.cyberciti.biz/guide/Ls_command" target="_blank" rel="noopener">ls command&lt;/a> as input to the &lt;a href="https://bash.cyberciti.biz/wiki/index.php?title=More_command&amp;amp;action=edit&amp;amp;redlink=1" target="_blank" rel="noopener">more command&lt;/a>. So that output is printed one screen full page at a time:&lt;/p>
&lt;pre tabindex="0">&lt;code>ls -l | more
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>显示已登录用户的排序列表&lt;/li>
&lt;/ul>
&lt;p>将 who 命令的输出作为 sort 命令的输入。这样它将打印出用户的排序列表：&lt;/p>
&lt;pre tabindex="0">&lt;code>who | sort
who | sort &amp;gt; sorted_list.txt
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>计算已登录的用户&lt;/li>
&lt;/ul>
&lt;p>who 命令的输出作为 wc 命令的输入给出，因此它将是登录到系统的用户数：&lt;/p>
&lt;pre tabindex="0">&lt;code>who | wc -l
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>找出用户 vivek 是否登录&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>who | grep -i vivek
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>计算当前目录中的文件总数&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>ls -l | wc -l
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>在给定时间执行关机命令&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>echo &amp;#34;shutdown -h now&amp;#34; | at 12am tomorrow
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>挂载命令的格式输出&lt;/li>
&lt;/ul>
&lt;p>以良好的格式显示安装命令输出&lt;/p>
&lt;pre tabindex="0">&lt;code>mount | column -t
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Backup (tar over ssh)&lt;/li>
&lt;/ul>
&lt;p>在安全的 ssh 会话上使用 tar 命令来备份本地 /home 文件系统：&lt;/p>
&lt;pre tabindex="0">&lt;code>tar zcvf - /home | ssh user@server &amp;#34;cat &amp;gt; /backup/home_fs.workstation_sep_21_09.tar.gz&amp;#34;
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>大小写转换&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">v&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Unix Philosophy&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$v&lt;/span> &lt;span class="p">|&lt;/span> tr &lt;span class="s1">&amp;#39;[:lower:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;[:upper:]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;tHIs IS A TeSt&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> tr &lt;span class="s1">&amp;#39;[:upper:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;[:lower:]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>生日电子邮件提醒&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;/usr/bin/mail -s &amp;#39;Birthday gift for Julia&amp;#39; vivek@gite.in &amp;lt; /dev/null&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> at 17:45
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>创建一个 ISO CD 映像&lt;/li>
&lt;/ul>
&lt;p>从 /home/vivek/photos 目录的内容创建一个 ISO cdrom 映像：&lt;/p>
&lt;pre tabindex="0">&lt;code>mkisofs -V Photos -r /home/vivek/photos | gzip -9 &amp;gt; /tmp/photos.iso.cd.gz
&lt;/code>&lt;/pre>&lt;p>您可以使用以下语法刻录 ISO cdrom 映像：&lt;/p>
&lt;pre tabindex="0">&lt;code>gzip -dc /tmp/photos.iso.cd.gz | cdrecord -v dev=/dev/dvdrw -
&lt;/code>&lt;/pre>&lt;p>也可以创建 ISO 映像并将其直接刻录到 cd：&lt;/p>
&lt;pre tabindex="0">&lt;code>mkisofs -V Photos -r /home/vivek/photos | cdrecord -v dev=/dev/dvdrw -
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>创建一个随机密码&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>tr -dc A-Za-z0-9_ &amp;lt; /dev/urandom | head -c12 | xargs
&lt;/code>&lt;/pre>&lt;h1 id="filter">Filter&lt;/h1>
&lt;p>如果 Linux 命令从标准输入接受其输入数据并在标准输出上产生其输出（结果），则称为过滤器。过滤器通常与 Linux 管道一起使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">command1 &lt;span class="p">|&lt;/span> command2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command1 file.txt &lt;span class="p">|&lt;/span> command2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command1 args &amp;lt; input.txt &lt;span class="p">|&lt;/span> command2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，command2 是过滤器命令。在此示例中，grep 命令充当过滤器（它将从其输入中过滤出名称 vivek）：&lt;/p>
&lt;pre tabindex="0">&lt;code>cut -d: -f1 /etc/passwd | sort | uniq | grep vivek
&lt;/code>&lt;/pre>&lt;p>使用 grep 命令过滤 ps 命令输出：&lt;/p>
&lt;pre tabindex="0">&lt;code>ps aux | grep php-cgi
&lt;/code>&lt;/pre>&lt;p>考虑以下示例：&lt;/p>
&lt;pre tabindex="0">&lt;code>sort &amp;lt; sname | uniq &amp;gt; u_sname
&lt;/code>&lt;/pre>&lt;p>uniq 命令是 filter，它从 sort 命令获取输入并将输出作为输入传递给 uniq 命令；然后，uniq 命令输出重定向到 u_sname 文件。在 Linux 和 UNIX 之类的操作系统下，grep 命令被认为是最受欢迎的过滤器之一。&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.vegardstikbakke.com/how-do-pipes-work-sigpipe/" target="_blank" rel="noopener">https://www.vegardstikbakke.com/how-do-pipes-work-sigpipe/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>输入与输出</title><link>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E8%BE%93%E5%85%A5%E4%B8%8E%E8%BE%93%E5%87%BA/</guid><description>&lt;h1 id="用户键盘输入">用户键盘输入&lt;/h1>
&lt;p>您可以使用 read 命令接受键盘输入，并将输入值分配给用户定义的 shell 变量。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Prompt&amp;#34;&lt;/span> variable1 variable2 variableN
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>简单的示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Enter your name : &amp;#34;&lt;/span> name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hi, &lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">. Let us be friends!&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Enter your name : Vivek Gite
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hi, Vivek Gite. Let us be friends!
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># read three numbers and assigned them to 3 vars&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Enter number one : &amp;#34;&lt;/span> n1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Enter number two : &amp;#34;&lt;/span> n2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Enter number three : &amp;#34;&lt;/span> n3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># display back 3 numbers - punched by user.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Number1 - &lt;/span>&lt;span class="nv">$n1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Number2 - &lt;/span>&lt;span class="nv">$n2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Number3 - &lt;/span>&lt;span class="nv">$n3&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># A shell script to display the Internet domain name owner information (domain.sh):&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Enter the Internet domain name (e.g. nixcraft.com) : &amp;#34;&lt;/span> domain_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">whois &lt;span class="nv">$domain_name&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以使用 -t 选项使读取命令超时。如果未在 TIMEOUT 秒内读取完整的输入行，则会导致读取超时并返回失败。例如，如果在 10 秒内未提供任何输入，则程序将中止：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -t &lt;span class="m">10&lt;/span> -p &lt;span class="s2">&amp;#34;Enter the Internet domain name (e.g. nixcraft.com) : &amp;#34;&lt;/span> domain_name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">whois &lt;span class="nv">$domain_name&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>-s 选项导致来自终端的输入不会显示在屏幕上。这对于密码处理很有用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">read&lt;/span> -s -p &lt;span class="s2">&amp;#34;Enter Password : &amp;#34;&lt;/span> my_password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Your password - &lt;/span>&lt;span class="nv">$my_password&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="echo--printf">echo &amp;amp; printf&lt;/h1>
&lt;p>在 Shell 中，echo 与 printf 都可以用来输出内容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$varName&lt;/span> &lt;span class="c1"># not advisable unless you know what the variable contains&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$varName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%s\n&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$varName&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 echo 命令显示一行文本或一个变量值。它不提供格式化选项。当您知道变量的内容不会引起问题时，这是显示简单输出的好命令。对于大多数用途，首选 printf。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1"># Display welcome message, computer name and date&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* Backup Shell Script *&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* Run time: &lt;/span>&lt;span class="k">$(&lt;/span>date&lt;span class="k">)&lt;/span>&lt;span class="s2"> @ &lt;/span>&lt;span class="k">$(&lt;/span>hostname&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Define variables&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">BACKUP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/nas05&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">NOW&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>date +&lt;span class="s2">&amp;#34;%d-%m-%Y&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Let us start backup&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* Dumping MySQL Database to &lt;/span>&lt;span class="nv">$BACKUP&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="nv">$NOW&lt;/span>&lt;span class="s2">...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Just sleep for 3 secs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sleep &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># And we are done...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;* Backup wrote to &lt;/span>&lt;span class="nv">$BACKUP&lt;/span>&lt;span class="s2">/&lt;/span>&lt;span class="nv">$NOW&lt;/span>&lt;span class="s2">/latest.tar.gz&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您也可以使用通配符和 echo 命令打印文件名：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /etc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> *.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">aatv.conf adduser.conf apg.conf argus.conf atool.conf brltty.conf ca-certificates.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">chkrootkit.conf cowpoke.conf cvs-cron.conf cvs-pserver.conf dconf.conf dconf-custom.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">debconf.conf deluser.conf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">....
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">..
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">wodim.conf wpa_supplicant.conf wvdial.conf xorg.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>printf 命令格式并在屏幕上显示数据。但是，printf 不提供新行。您需要使用％指令提供格式字符串，并使用转义符以与 C printf() 函数最相似的方式来格式化数字和字符串参数。使用 printf 生成格式化的输出。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">FORMAT&lt;/span> &lt;span class="n">controls&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">output&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">in&lt;/span> &lt;span class="n">C&lt;/span> &lt;span class="n">printf.&lt;/span> &lt;span class="n">Interpreted&lt;/span> &lt;span class="n">sequences&lt;/span> &lt;span class="n">are&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="err"> double quote&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\NNN&lt;/span> &lt;span class="n">character&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">octal&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="nf">NNN &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="n">digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\\&lt;/span> &lt;span class="n">backslash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\a&lt;/span> &lt;span class="nf">alert &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">BEL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\b&lt;/span> &lt;span class="n">backspace&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\c&lt;/span> &lt;span class="n">produce&lt;/span> &lt;span class="n">no&lt;/span> &lt;span class="n">further&lt;/span> &lt;span class="n">output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\f&lt;/span> &lt;span class="n">form&lt;/span> &lt;span class="n">feed&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\n&lt;/span> &lt;span class="n">new&lt;/span> &lt;span class="n">line&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\r&lt;/span> &lt;span class="n">carriage&lt;/span> &lt;span class="n">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\t&lt;/span> &lt;span class="n">horizontal&lt;/span> &lt;span class="n">tab&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\v&lt;/span> &lt;span class="n">vertical&lt;/span> &lt;span class="n">tab&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\xHH&lt;/span> &lt;span class="n">byte&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">hexadecimal&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="nf">HH &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="n">digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\uHHHH&lt;/span> &lt;span class="nf">Unicode &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ISO&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">IEC&lt;/span> &lt;span class="m">10646&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">character&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">hex&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="nf">HHHH &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="n">digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\UHHHHHHHH&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Unicode&lt;/span> &lt;span class="n">character&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">hex&lt;/span> &lt;span class="n">value&lt;/span> &lt;span class="nf">HHHHHHHH &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">8&lt;/span> &lt;span class="n">digits&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">%%&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">single&lt;/span> &lt;span class="o">%
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o"> %&lt;/span>&lt;span class="n">b&lt;/span> &lt;span class="n">ARGUMENT&lt;/span> &lt;span class="n">as&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="s">&amp;#39;&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="s">&amp;#39;&lt;/span> &lt;span class="n">escapes&lt;/span> &lt;span class="n">interpreted&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">except&lt;/span> &lt;span class="n">that&lt;/span> &lt;span class="n">octal&lt;/span> &lt;span class="n">escapes&lt;/span> &lt;span class="n">are&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">form&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">\0&lt;/span> &lt;span class="n">or&lt;/span> &lt;span class="n">\0NNN&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">all&lt;/span> &lt;span class="n">C&lt;/span> &lt;span class="n">format&lt;/span> &lt;span class="n">specifications&lt;/span> &lt;span class="n">ending&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">one&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">diouxXfeEgGcs&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">with&lt;/span> &lt;span class="n">ARGUMENTs&lt;/span> &lt;span class="n">converted&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">proper&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="n">first.&lt;/span> &lt;span class="n">Variable&lt;/span> &lt;span class="n">widths&lt;/span> &lt;span class="n">are&lt;/span> &lt;span class="n">handled.&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>printf 更详细的示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">vech&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Car&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%s\n&amp;#34;&lt;/span> &lt;span class="nv">$vech&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%1s\n&amp;#34;&lt;/span> &lt;span class="nv">$vech&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%1.1s\n&amp;#34;&lt;/span> &lt;span class="nv">$vech&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%1.2s\n&amp;#34;&lt;/span> &lt;span class="nv">$vech&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%1.3s\n&amp;#34;&lt;/span> &lt;span class="nv">$vech&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%10.3s\n&amp;#34;&lt;/span> &lt;span class="nv">$vech&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%10.1s\n&amp;#34;&lt;/span> &lt;span class="nv">$vech&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">no&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%d\n&amp;#34;&lt;/span> &lt;span class="nv">$no&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">big&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5355765&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%e\n&amp;#34;&lt;/span> &lt;span class="nv">$big&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%5.2e\n&amp;#34;&lt;/span> &lt;span class="nv">$big&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sales&lt;/span>&lt;span class="o">=&lt;/span>54245.22
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%f\n&amp;#34;&lt;/span> &lt;span class="nv">$sales&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">printf&lt;/span> &lt;span class="s2">&amp;#34;%.2f\n&amp;#34;&lt;/span> &lt;span class="nv">$sales&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>执行环境</title><link>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E6%89%A7%E8%A1%8C%E7%8E%AF%E5%A2%83/</guid><description>&lt;h1 id="shell-脚本执行环境">Shell 脚本执行环境&lt;/h1>
&lt;p>在写脚本时，在一开始（Shebang 之后）就加上这一句，或者它的缩略版：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">set&lt;/span> -xeuo pipefail
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这能避免很多问题，更重要的是能让很多隐藏的问题暴露出来。&lt;/p>
&lt;h1 id="异常处理">异常处理&lt;/h1>
&lt;p>在 Shell 脚本中，通过插入 &lt;code>set -e&lt;/code> 可以设置在有命令失败时候退出，我们还可以通过添加 DEBUG 以及 EXIT 注解来在脚本退出前执行某些命令，通过该语句可以输出最末执行的存在问题的语句：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 脚本执行配置: https://intoli.com/blog/exit-on-errors-in-bash-scripts/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># keep track of the last executed command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;last_command=$current_command; current_command=$BASH_COMMAND;&amp;#39;&lt;/span> DEBUG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># echo an error message before exiting&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s1">&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">err_code=$?;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">err_command=${last_command};
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">if [ &amp;#34;$err_code&amp;#34; != &amp;#34;0&amp;#34; ]; then
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1"> echo &amp;#34;\&amp;#34;${err_command}\&amp;#34; 命令异常退出 $err_code.&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">fi
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">&amp;#39;&lt;/span> EXIT
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以指定在某个语句失败的时候输出错误：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">exit_on_error&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">exit_code&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">last_command&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="p">@:&lt;/span>&lt;span class="nv">2&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$exit_code&lt;/span> -ne &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;\&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">last_command&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">\&amp;#34; command failed with exit code &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">exit_code&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">exit&lt;/span> &lt;span class="nv">$exit_code&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># enable !! command completion&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o &lt;span class="nb">history&lt;/span> -o histexpand
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>-u 参数则是试图使用未定义的变量，就立即退出。如果在 bash 里使用一个未定义的变量，默认是会展开成一个空串。有时这种行为会导致问题，比如：&lt;code>rm -rf $MYDIR/data&lt;/code>，如果 MYDIR 变量因为某种原因没有赋值，这条命令就会变成 &lt;code>rm -rf /data&lt;/code>，使用 -u 可以避免这种情况。&lt;/p>
&lt;p>但有时候在已经设置了 -u 后，某些地方还是希望能把未定义变量展开为空串，可以这样写：&lt;code>${SOME_VAR:-}&lt;/code>。还有一种情况是在管道执行中，我们可以设置如果管道的某个命令出错则直接抛出异常：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o pipefail
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>set -o pipefail 会在某个管道（譬如 curl -s &lt;a href="https://sipb.mit.edu/" target="_blank" rel="noopener">https://sipb.mit.edu/&lt;/a> | grep foo）中的任意命令出错时候返回整体错误，而不是仅当最后一个命令异常时候才抛出异常。这样和 -e 参数搭配使用的时候，会在任意管道中的命令出错时候抛出异常。&lt;/p>
&lt;h1 id="防止重叠运行">防止重叠运行&lt;/h1>
&lt;p>在一些场景中，我们通常不希望一个脚本有多个实例在同时运行。比如用 crontab 周期性运行脚本时，有时不希望上一个轮次还没运行完，下一个轮次就开始运行了。这时可以用 flock 命令来解决。flock 通过文件锁的方式来保证独占运行，并且还有一个好处是进程退出时，文件锁也会自动释放，不需要额外处理。&lt;/p>
&lt;p>用法 1：假设你的入口脚本是 myscript.sh，可以新建一个脚本，通过 flock 来运行它：&lt;/p>
&lt;pre tabindex="0">&lt;code># flock --wait 超时时间 -e 锁文件 -c &amp;#34;要执行的命令&amp;#34;
# 例如：
flock --wait 5 -e &amp;#34;lock_myscript&amp;#34; -c &amp;#34;bash myscript.sh&amp;#34;
&lt;/code>&lt;/pre>&lt;p>用法 2：也可以在原有脚本里使用 flock。可以把文件打开为一个文件描述符，然后使用 flock 对它上锁（flock 可以接受文件描述符参数）。&lt;/p>
&lt;pre tabindex="0">&lt;code>exec 123&amp;lt;&amp;gt;lock_myscript # 把lock_myscript打开为文件描述符123
flock --wait 5 123 || { echo &amp;#39;cannot get lock, exit&amp;#39;; exit 1; }
&lt;/code>&lt;/pre>&lt;h1 id="脚本调试">脚本调试&lt;/h1>
&lt;h2 id="调试模式">调试模式&lt;/h2>
&lt;p>我们可以在执行脚本的时候添加 x 参数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ bash -x script-name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ bash -xv script-name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#!/bin/bash -x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">LOGNAME&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Today is &lt;/span>&lt;span class="k">$(&lt;/span>date&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Users currently on the machine, and their processes:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">w
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="set-指令">set 指令&lt;/h2>
&lt;p>Bash shell 提供了调试选项，可以使用 set 命令打开或关闭它。&lt;/p>
&lt;ul>
&lt;li>set -x：在执行命令时显示命令及其参数。&lt;/li>
&lt;li>set -v：显示读取的外壳程序输入行。&lt;/li>
&lt;li>set -n：读取命令，但不执行。这可用于检查 shell 脚本中的语法错误。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">### Turn on debug mode ###&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Run shell commands&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello &lt;/span>&lt;span class="k">$(&lt;/span>LOGNAME&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Today is &lt;/span>&lt;span class="k">$(&lt;/span>date&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Users currently on the machine, and their processes:&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### Turn OFF debug mode ###&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> +x
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add more commands without debug mode&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>另一个例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">set&lt;/span> -n &lt;span class="c1"># only read command but do not execute them&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">set&lt;/span> -o noexec
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;This is a test&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># no file is created as bash will only read commands but do not executes them&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;gt;/tmp/debug.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="连续管道日志">连续管道日志&lt;/h2>
&lt;p>有时候我们会用到把好多条命令用管道串在一起的情况。如 &lt;code>cmd1 | cmd2 | cmd3 | ...&lt;/code> 这样会让问题变得难以排查，因为中间数据我们都看不到。如果改成这样的格式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cmd1 &amp;gt; out1.dat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat out1 &lt;span class="p">|&lt;/span> cmd2 &amp;gt; out2.dat
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat out2 &lt;span class="p">|&lt;/span> cmd3 &amp;gt; out3.dat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>性能又不太好，因为这样 cmd1, cmd2, cmd3 是串行运行的，这时可以用 tee 命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cmd1 &lt;span class="p">|&lt;/span> tee out1.dat &lt;span class="p">|&lt;/span> cmd2 &lt;span class="p">|&lt;/span> tee out2.dat &lt;span class="p">|&lt;/span> cmd3 &amp;gt; out3.dat
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="其他技巧">其他技巧&lt;/h1>
&lt;h2 id="意外退出时杀掉所有子进程">意外退出时杀掉所有子进程&lt;/h2>
&lt;p>我们的脚本通常会启动好多子脚本和子进程，当父脚本意外退出时，子进程其实并不会退出，而是继续运行着。如果脚本是周期性运行的，有可能发生一些意想不到的问题。在 StackOverflow 上找到的一个方法，原理就是利用 trap 命令在脚本退出时 kill 掉它整个进程组。把下面的代码加在脚本开头区，实测管用：&lt;/p>
&lt;pre tabindex="0">&lt;code>trap &amp;#34;trap - SIGTERM &amp;amp;&amp;amp; kill -- -\$\$&amp;#34; SIGINT SIGTERM EXIT
&lt;/code>&lt;/pre>&lt;p>不过如果父进程是用 SIGKILL (kill -9) 杀掉的，就不行了。因为 SIGKILL 时，进程是没有机会运行任何代码的。&lt;/p>
&lt;h2 id="timeout-限制运行时间">timeout 限制运行时间&lt;/h2>
&lt;p>有时候需要对命令设置一个超时时间。这时可以使用 timeout 命令，用法很简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">timeout 600s some_command arg1 arg2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令在超时时间内运行结束时，返回码为 0，否则会返回一个非零返回码。&lt;/p>
&lt;p>timeout 在超时时默认会发送 TERM 信号，也可以用 -s 参数让它发送其它信号。&lt;/p>
&lt;h1 id="后台执行">后台执行&lt;/h1>
&lt;p>Linux 支持并行或串行执行多个进程。您总是在 Linux 系统上以运行 bash 作为 shell 的单个进程开始您的第一个会话（登录会话）。大多数 Linux 命令，例如编辑文件，替换当前日期和时间，登录用户等，都可以使用各种 Linux 命令来完成。您在 shell 提示符下一一键入所有命令。这些程序始终控制着屏幕，完成后，您将返回 S Shell 提示符以键入一组新命令。但是，有时您需要在后台执行任务并将终端用于其他目的。例如，在编写 C 程序时，找到存储在磁盘上的所有 mp3 文件。&lt;/p>
&lt;p>Bash shell 允许您使用称为作业控制的工具在后台运行任务（或命令）。作业控制是指选择性地停止，挂起进程的执行并在以后继续（恢复）其执行的能力。用户通常通过系统终端驱动程序和 bash 共同提供的交互式界面来使用此功能。&lt;/p>
&lt;p>在作业控制设备的影响下的过程称为作业。每个作业都有一个唯一的 ID，称为作业编号。您可以使用以下命令来控制作业：&lt;/p>
&lt;ul>
&lt;li>fg - Place job in the foreground.&lt;/li>
&lt;li>bg - Place job in the background.&lt;/li>
&lt;li>jobs - Lists the active jobs on screen.&lt;/li>
&lt;/ul>
&lt;p>非连续调度的命令称为后台进程。您无法在屏幕上看到后台进程。例如，Apache httpd 服务器在后台运行以提供网页。您可以将 Shell 脚本或任何命令放在后台。您可以在屏幕上看到该命令的命令称为前台进程。将作业置于后台的语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">command&lt;/span> &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">command&lt;/span> arg1 arg2 &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command1 &lt;span class="p">|&lt;/span> command2 arg1 &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command1 &lt;span class="p">|&lt;/span> command2 arg1 &amp;gt; output &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>＆ 运算符将命令放在后台，并释放终端。在后台运行的命令称为作业。您可以在后台命令运行时键入其他命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ find /nas -name &lt;span class="s2">&amp;#34;*.mp3&amp;#34;&lt;/span> &amp;gt; /tmp/filelist.txt &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># [1] 1307&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>find 命令现在在后台运行。当 bash 在后台启动作业时，它将打印一行，显示作业号（[1]）和进程标识号（PID-1307）。作业在完成时向终端发送一条消息，如下所示，通过其编号标识该作业并显示其已完成：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>+ Done find /share/ -name &lt;span class="s2">&amp;#34;*.mp3&amp;#34;&lt;/span> &amp;gt; /tmp/filelist
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="subshell">Subshell&lt;/h1>
&lt;p>每当您运行 shell 脚本时，它都会创建一个名为 subshel​​l 的新进程，并且您的脚本将使用 subshel​​l 执行。Subshel​​l 可用于执行并行处理。如果您在当前 shell 之上启动另一个 shell，则可以将其称为子 shell。键入以下命令以查看子 shell 值：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$BASH_SUBSHELL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Current shell: &lt;/span>&lt;span class="nv">$BASH_SUBSHELL&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Running du in subshell: &lt;/span>&lt;span class="nv">$BASH_SUBSHELL&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">;&lt;/span>&lt;span class="nb">cd&lt;/span> /tmp&lt;span class="p">;&lt;/span> du 2&amp;gt;/tmp/error 1&amp;gt;/tmp/output&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>子 Shell 程序不会继承变量的设置。使用 export 命令将变量和函数导出到 subshel​​l：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">WWWJAIL&lt;/span>&lt;span class="o">=&lt;/span>/apache.jail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> WWWJAIL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">die&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">exit&lt;/span> 2&lt;span class="p">;&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> -f die
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># now call script that will access die() and $WWWJAIL&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/etc/nixcraft/setupjail -d cyberciti.com
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>但是，环境变量（例如 $HOME，$MAIL 等）将传递给子 Shell。您可以使用 exec 命令来避免使用 subshel​​l。exec 命令用指定程序替换该 Shell 程序，而无需交换新的子 Shell 程序或进程。例如，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exec&lt;/span> &lt;span class="nb">command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># redirect the shells stderr to null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exec&lt;/span> 2&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the--dot-command-and-subshell">The . (dot) Command and Subshell&lt;/h2>
&lt;p>. (dot) 该命令用于运行 shell 脚本，如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code>. script.sh
&lt;/code>&lt;/pre>&lt;p>dot 命令允许您修改当前的 Shell 变量。例如，创建一个名为 /tmp/dottest.sh 的 shell 脚本，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;In script before : &lt;/span>&lt;span class="nv">$WWWJAIL&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">WWWJAIL&lt;/span>&lt;span class="o">=&lt;/span>/apache.jail
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;In script after : &lt;/span>&lt;span class="nv">$WWWJAIL&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>关闭并保存文件。如下运行：&lt;/p>
&lt;pre tabindex="0">&lt;code>chmod +x /tmp/dottest.sh
&lt;/code>&lt;/pre>&lt;p>现在，在 Shell 提示符下定义一个名为 WWWJAIL 的变量：&lt;/p>
&lt;pre tabindex="0">&lt;code>WWWJAIL=/foobar
echo $WWWJAIL
&lt;/code>&lt;/pre>&lt;p>样本输出：&lt;/p>
&lt;pre tabindex="0">&lt;code>/foobar
&lt;/code>&lt;/pre>&lt;p>运行脚本：&lt;/p>
&lt;pre tabindex="0">&lt;code>/tmp/dottest.sh
&lt;/code>&lt;/pre>&lt;p>检查 WWWJAIL 的值：&lt;/p>
&lt;pre tabindex="0">&lt;code>echo $WWWJAIL
&lt;/code>&lt;/pre>&lt;p>您应该看到 $WWWJAIL（/ foobar）的原始值，因为该 Shell 脚本是在子 Shell 中执行的。现在，尝试点命令：&lt;/p>
&lt;pre tabindex="0">&lt;code> . /tmp/dottest.sh
echo $WWWJAIL
&lt;/code>&lt;/pre>&lt;p>Sample outputs:&lt;/p>
&lt;pre tabindex="0">&lt;code>/apache.jail
&lt;/code>&lt;/pre>&lt;p>$WWWJAIL（/apache.jail）的值已更改，因为使用 dot 命令在当前 Shell 中运行了脚本。&lt;/p></description></item><item><title>重定向</title><link>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%87%8D%E5%AE%9A%E5%90%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/linux-series/shell-%E5%91%BD%E4%BB%A4/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/%E9%87%8D%E5%AE%9A%E5%90%91/</guid><description>&lt;h1 id="重定向">重定向&lt;/h1>
&lt;p>几乎所有命令都会将输出产生到屏幕上或从键盘上获取输入，但是在 Linux 中，可以将输出发送到文件或从文件读取输入。每个 shell 命令都有其自己的输入和输出。在执行命令之前，可以使用由 Shell 解释的特殊符号来重定向其输入和输出。例如，将 date 命令的输出发送到文件而不是发送到屏幕。更改输入或输出的默认路径称为重定向。&lt;/p>
&lt;p>在 Linux 中，所有内容都是文件。以上三个数字是标准 POSIX 编号，也称为文件描述符（FD）。每个 Linux 命令至少都打开上述流以与用户或其他系统程序对话。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Standard File&lt;/th>
&lt;th>File Descriptor Number&lt;/th>
&lt;th>Meaning&lt;/th>
&lt;th>Example (type at shell prompt)&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>stdin&lt;/td>
&lt;td>0&lt;/td>
&lt;td>Read input from a file (the default is keyboard)&lt;/td>
&lt;td>&lt;code>cat &amp;lt; filename&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stdout&lt;/td>
&lt;td>1&lt;/td>
&lt;td>Send data to a file (the default is screen).&lt;/td>
&lt;td>&lt;code>date &amp;gt; output.txtcat output.txt&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>stderr&lt;/td>
&lt;td>2&lt;/td>
&lt;td>Send all error messages to a file (the default is screen).&lt;/td>
&lt;td>&lt;code>rm /tmp/4815162342.txt 2&amp;gt;error.txtcat error.txt&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="标准输入">标准输入&lt;/h2>
&lt;p>标准输入是默认输入法，所有命令都使用它来读取其输入。用零数字（0）表示。也称为 stdin。默认的标准输入是键盘。&amp;lt; 是输入重定向符号，语法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">command&lt;/span> &amp;lt; filename
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat &amp;lt; /etc/passwd
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/06/16/NFHI56.png" alt="标准输入" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="标准输出">标准输出&lt;/h2>
&lt;p>命令使用标准输出来写入（显示）其输出。默认为屏幕，用一个数字（1）表示。也称为标准输出。默认的标准输出是屏幕。&amp;gt; 是输出重定向符号，语法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">command&lt;/span> &amp;gt; output.file.name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ls &amp;gt; /tmp/output.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/06/16/NFqG6g.png" alt="标准输出" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>要简单地重定向输出，请使用以下语法：&lt;/p>
&lt;pre tabindex="0">&lt;code>command &amp;gt; /path/to/file
/path/to/script.sh &amp;gt; output.txt
&lt;/code>&lt;/pre>&lt;p>例如，将 date 命令的输出发送到名为 now.txt 的文件：&lt;/p>
&lt;pre tabindex="0">&lt;code>date &amp;gt; now.txt
&lt;/code>&lt;/pre>&lt;p>You can also use the &amp;gt; operator to print file, enter:&lt;/p>
&lt;pre tabindex="0">&lt;code>cat file.txt &amp;gt; /dev/lp0
&lt;/code>&lt;/pre>&lt;p>OR&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo bash -c &amp;#34;cat file.txt &amp;gt; /dev/lp0&amp;#34;
&lt;/code>&lt;/pre>&lt;p>To make a usage listing of the directories in the /home partition, enter:&lt;/p>
&lt;pre tabindex="0">&lt;code>sudo bash -c &amp;#34;cd /home ; du -s *│ sort -rn &amp;gt;/tmp/usage&amp;#34;
&lt;/code>&lt;/pre>&lt;p>You can also use the following syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>echo &amp;#34;Today is $(date)&amp;#34; 1&amp;gt;/tmp/now.txt
&lt;/code>&lt;/pre>&lt;p>You can append the output to the same file using &amp;raquo; operator, enter:&lt;/p>
&lt;pre tabindex="0">&lt;code>date &amp;gt;&amp;gt; now.txt
cat now.txt
&lt;/code>&lt;/pre>&lt;p>You can also use the following syntax:&lt;/p>
&lt;pre tabindex="0">&lt;code>echo &amp;#34;Today is $(date)&amp;#34; 1&amp;gt;&amp;gt;/tmp/now.txt
&lt;/code>&lt;/pre>&lt;h2 id="标准异常">标准异常&lt;/h2>
&lt;p>标准错误是默认错误输出设备，用于写入所有系统错误消息。用两个数字（2）表示，也称为 stderr。默认的标准错误设备是屏幕或监视器，2&amp;gt; 是输入重定向符号，语法为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">command&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">errors.txt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例如，将查找命令错误发送到名为 fileerrors.txt 的文件，以便以后可以查看错误，输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">find / -iname &lt;span class="s2">&amp;#34;*.conf&amp;#34;&lt;/span> 2&amp;gt;fileerrors.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat fileerrors.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/06/16/Nkj2X8.png" alt="Error" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>要将标准错误重定向到名为 error.log 的文件中，请输入：&lt;/p>
&lt;pre tabindex="0">&lt;code>command-name 2&amp;gt;error.log
&lt;/code>&lt;/pre>&lt;p>在 /home 目录中找到所有 .profile 文件，并将错误记录到 /tmp/error 文件中，输入：&lt;/p>
&lt;pre tabindex="0">&lt;code>find /home -name .profile 2&amp;gt;/tmp/error
&lt;/code>&lt;/pre>&lt;p>样本输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">t2&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">.profile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vivek&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ttt&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">skel&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">.profile&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要查看错误，请输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">more&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">tmp&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">error&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>样本输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">find&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">`/home/vivek/.cpan/build/Acme-POE-Tree-1.01-qqmq77&amp;#39;: Permission denied
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">find: `&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vivek&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">.cpan&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Lchown&lt;/span>&lt;span class="m">-1.00&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">uOM4tb&lt;/span>&lt;span class="s">&amp;#39;: Permission denied
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">find: `/home/vivek/.cpan/build/IO-Tty-1.07-F9rDy3&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Permission&lt;/span> &lt;span class="n">denied&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">find&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">`/home/vivek/.cpan/build/POE-Test-Loops-1.002-9AjIro&amp;#39;: Permission denied
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">find: `&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vivek&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">.cpan&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">build&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">POE&lt;/span>&lt;span class="m">-1.003&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">KwXVB1&lt;/span>&lt;span class="s">&amp;#39;: Permission denied
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">find: `/home/vivek/.cpan/build/Curses-1.27-ZLo169&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Permission&lt;/span> &lt;span class="n">denied&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以将脚本错误重定向到名为 scripts.err 的日志文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">./script.sh 2&amp;gt;scripts.err
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/path/to/example.pl 2&amp;gt;scripts.err
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以使用 &amp;raquo; 运算符将标准错误附加到 error.log 文件的末尾：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">command-name 2&amp;gt;&amp;gt;error.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./script.sh 2&amp;gt;&amp;gt;error.log
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/path/to/example.pl 2&amp;gt;&amp;gt;error.log
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以使用以下语法将 stdout 和 stderr 都重定向到文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">command-name &lt;span class="p">&amp;amp;&lt;/span>&amp;gt;filename
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command-name &amp;gt;cmd.log 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">command-name &amp;gt;/dev/null 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此语法通常用于 cron 作业：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">@hourly /scripts/backup/nas.backup &amp;gt;/dev/null 2&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@hourly /scripts/backup/nas.backup &lt;span class="p">&amp;amp;&lt;/span>&amp;gt;/dev/null
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>