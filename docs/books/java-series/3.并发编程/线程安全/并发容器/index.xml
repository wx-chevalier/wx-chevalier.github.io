<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>并发容器 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/java-series/3.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</link><atom:link href="https://ng-tech.icu/books/java-series/3.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><description>并发容器</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>并发容器</title><link>https://ng-tech.icu/books/java-series/3.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</link></image><item><title>ConcurrentSkipListMap</title><link>https://ng-tech.icu/books/java-series/3.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/concurrentskiplistmap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-series/3.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/concurrentskiplistmap/</guid><description>&lt;p>ConcurrentSkipListMap 其内部采用 SkipLis 数据结构实现。为了实现 SkipList，ConcurrentSkipListMap 提供了三个内部类来构建这样的链表结构：Node、Index、HeadIndex。其中 Node 表示最底层的单链表有序节点、Index 表示为基于 Node 的索引层，HeadIndex 用来维护索引层次。到这里我们可以这样说 ConcurrentSkipListMap 是通过 HeadIndex 维护索引层次，通过 Index 从最上层开始往下层查找，一步一步缩小查询范围，最后到达最底层 Node 时，就只需要比较很小一部分数据了。&lt;/p></description></item><item><title>CopyOnWrite</title><link>https://ng-tech.icu/books/java-series/3.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/copyonwrite/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-series/3.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/copyonwrite/</guid><description>&lt;h1 id="copyonwrite">CopyOnWrite&lt;/h1>
&lt;p>Copy-On-Write 简称 COW，是一种用于程序设计中的优化策略。其基本思路是，从一开始大家都在共享同一个内容，当某个人想要修改这个内容的时候，才会真正把内容 Copy 出去形成一个新的内容然后再改，这是一种延时懒惰策略。从 JDK1.5 开始 Java 并发包里提供了两个使用 CopyOnWrite 机制实现的并发容器,它们是 CopyOnWriteArrayList 和 CopyOnWriteArraySet。&lt;/p>
&lt;p>CopyOnWrite 容器即写时复制的容器，当我们往一个容器添加元素的时候，不直接往当前容器添加，而是先将当前容器进行 Copy，复制出一个新的容器，然后新的容器里添加元素，添加完元素之后，再将原容器的引用指向新的容器。它是典型的读写分离思想的实践，我们可以对 CopyOnWrite 容器进行并发的读，而不需要加锁。&lt;/p>
&lt;h1 id="语法应用">语法应用&lt;/h1>
&lt;h1 id="copyonwritearraylist-的内部实现">CopyOnWriteArrayList 的内部实现&lt;/h1>
&lt;p>读的时候不需要加锁，如果读的时候有多个线程正在向 CopyOnWriteArrayList 添加数据，读还是会读到旧的数据，因为写的时候不会锁住旧的 CopyOnWriteArrayList。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/Xv8c9A4E_DOSkI1jBhr-rg" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/Xv8c9A4E_DOSkI1jBhr-rg&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>