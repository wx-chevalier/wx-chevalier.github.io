<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开发环境 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/java-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <atom:link href="https://ng-tech.icu/books/java-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/index.xml" rel="self" type="application/rss+xml" />
    <description>开发环境</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>开发环境</title>
      <link>https://ng-tech.icu/books/java-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
    </image>
    
    <item>
      <title>Jetbrains Idea</title>
      <link>https://ng-tech.icu/books/java-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/jetbrains-idea/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/jetbrains-idea/</guid>
      <description>&lt;h1 id=&#34;idea&#34;&gt;IDEA&lt;/h1&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/_jqWd9YQBmIzyrqL4Mum4Q?from=groupmessage&amp;amp;isappinstalled=0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mp.weixin.qq.com/s/_jqWd9YQBmIzyrqL4Mum4Q?from=groupmessage&amp;isappinstalled=0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/393258908&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/393258908&lt;/a&gt; IntelliJ idea 高效使用教程，一劳永逸！&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>工具链</title>
      <link>https://ng-tech.icu/books/java-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E5%B7%A5%E5%85%B7%E9%93%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/1.%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/%E5%B7%A5%E5%85%B7%E9%93%BE/</guid>
      <description>&lt;h1 id=&#34;javap&#34;&gt;javap&lt;/h1&gt;
&lt;p&gt;The javap command is called the Java “disassembler”* *because it takes apart class files and tells you what’s inside them. You won’t use this command often, but using it to find out how a particular Java statement works is fun, sometimes. You can also use it to find out what methods are available for a class if you don’t have the source code that was used to create the class.&lt;/p&gt;
&lt;p&gt;Here is the general format:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;javap filename [options]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following is typical of the information you get when you run the javap command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:javasamples&amp;gt;javap HelloApp
Compiled from &amp;#34;HelloApp.java&amp;#34;
public class HelloApp extends java.lang.Object{
    public HelloApp();
    public static void main(java.lang.String[]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As you can see, the javap command indicates that the HelloApp class was compiled from the HelloApp.java file and that it consists of a HelloApp public class and a main public method.&lt;/p&gt;
&lt;p&gt;You may want to use two options with the javap command. If you use the -c option, the javap command displays the actual Java bytecodes created by the compiler for the class. (&lt;em&gt;Java bytecode&lt;/em&gt; is the executable program compiled from your Java source file.)&lt;/p&gt;
&lt;p&gt;And if you use the -verbose option, the bytecodes — plus a ton of other fascinating information about the innards of the class — are displayed. Here’s the -c output for a class named HelloApp:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:javasamples&amp;gt;javap HelloApp -c
Compiled from &amp;#34;HelloApp.java&amp;#34;
public class HelloApp extends java.lang.Object{
public HelloApp();
  Code:
   0:   aload_0
   1:   invokespecial   #1; //Method
   java/lang/Object.&amp;#34;&amp;lt;init&amp;gt;&amp;#34;:()V
   4:   return
public static void main(java.lang.String[]);
  Code:
   0:   getstatic       #2; //Field
   java/lang/System.out:Ljava/io/PrintStream;
   3:   ldc     #3; //String Hello, World!
   5:   invokevirtual   #4; //Method
   java/io/PrintStream.println:(Ljava/lang/String;)V
   8:   return
}
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
