<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2.类与加载器 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/java-series/6.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.%E7%B1%BB%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%99%A8/</link><atom:link href="https://ng-tech.icu/books/java-series/6.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.%E7%B1%BB%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><description>2.类与加载器</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>2.类与加载器</title><link>https://ng-tech.icu/books/java-series/6.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.%E7%B1%BB%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%99%A8/</link></image><item><title>类加载流程</title><link>https://ng-tech.icu/books/java-series/6.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.%E7%B1%BB%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-series/6.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.%E7%B1%BB%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/</guid><description>&lt;h1 id="classloading">ClassLoading&lt;/h1>
&lt;p>Java 类从被虚拟机加载开始，到卸载出内存为止，它的整个生命周期包括：加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）7 个阶段；其中验证、准备和解析又统称为连接（Linking）阶段。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/01/KbBK2V.png" alt="类的生命周期" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>类文件结构</title><link>https://ng-tech.icu/books/java-series/6.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.%E7%B1%BB%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-series/6.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/2.%E7%B1%BB%E4%B8%8E%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84/</guid><description>&lt;h1 id="类文件结构">类文件结构&lt;/h1>
&lt;p>一个编译后的类文件包含下面的结构：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ClassFile&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u4&lt;/span> &lt;span class="n">magic&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">minor_version&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">major_version&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">constant_pool_count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cp_info&lt;/span> &lt;span class="n">contant_pool&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">constant_pool_count&lt;/span> &lt;span class="err">–&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">access_flags&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">this_class&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">super_class&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">interfaces_count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">interfaces&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">interfaces_count&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">fields_count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">field_info&lt;/span> &lt;span class="n">fields&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">fields_count&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">methods_count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">method_info&lt;/span> &lt;span class="n">methods&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">methods_count&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">u2&lt;/span> &lt;span class="n">attributes_count&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">attribute_info&lt;/span> &lt;span class="n">attributes&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">attributes_count&lt;/span>&lt;span class="o">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>magic, minor_version, major_version&lt;/th>
&lt;th>类文件的版本信息和用于编译这个类的 JDK 版本&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>constant_pool&lt;/td>
&lt;td>类似于符号表，尽管它包含更多数据。下面有更多的详细描述，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>access_flags&lt;/td>
&lt;td>提供这个类的描述符列表，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>this_class&lt;/td>
&lt;td>提供这个类全名的常量池(constant_pool)索引，比如 org/jamesdbloom/foo/Bar，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>super_class&lt;/td>
&lt;td>提供这个类的父类符号引用的常量池索引，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>interfaces&lt;/td>
&lt;td>指向常量池的索引数组，提供那些被实现的接口的符号引用，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>fields&lt;/td>
&lt;td>提供每个字段完整描述的常量池索引数组，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>methods&lt;/td>
&lt;td>指向 constant_pool 的索引数组，用于表示每个方法签名的完整描述。如果这个方法不是抽象方法也不是 native 方法，那么就会显示这个函数的字节码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>attributes&lt;/td>
&lt;td>不同值的数组，表示这个类的附加信息，包括 RetentionPolicy.CLASS 和 RetentionPolicy.RUNTIME 注解，&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>可以用 javap 查看编译后的 java class 文件字节码。如果你编译下面这个简单的类：&lt;/p>
&lt;pre tabindex="0">&lt;code>package org.jvminternals;
public class SimpleClass {
public void sayHello() {
System.out.println(&amp;#34;Hello&amp;#34;);
}
}
&lt;/code>&lt;/pre>&lt;p>运行下面的命令，就可以得到下面的结果输出: javap -v -p -s -sysinfo -constants classes/org/jvminternals/SimpleClass.class。&lt;/p>
&lt;pre tabindex="0">&lt;code>public class org.jvminternals.SimpleClass
SourceFile: &amp;#34;SimpleClass.java&amp;#34;
minor version: 0
major version: 51
flags: ACC_PUBLIC, ACC_SUPER
Constant pool:
#1 = Methodref #6.#17 // java/lang/Object.&amp;#34;&amp;amp;lt;init&amp;amp;gt;&amp;#34;:()V
#2 = Fieldref #18.#19 // java/lang/System.out:Ljava/io/PrintStream;
#3 = String #20 // &amp;#34;Hello&amp;#34;
#4 = Methodref #21.#22 // java/io/PrintStream.println:(Ljava/lang/String;)V
#5 = Class #23 // org/jvminternals/SimpleClass
#6 = Class #24 // java/lang/Object
#7 = Utf8 &amp;amp;lt;init&amp;amp;gt;
#8 = Utf8 ()V
#9 = Utf8 Code
#10 = Utf8 LineNumberTable
#11 = Utf8 LocalVariableTable
#12 = Utf8 this
#13 = Utf8 Lorg/jvminternals/SimpleClass;
#14 = Utf8 sayHello
#15 = Utf8 SourceFile
#16 = Utf8 SimpleClass.java
#17 = NameAndType #7:#8 // &amp;#34;&amp;amp;lt;init&amp;amp;gt;&amp;#34;:()V
#18 = Class #25 // java/lang/System
#19 = NameAndType #26:#27 // out:Ljava/io/PrintStream;
#20 = Utf8 Hello
#21 = Class #28 // java/io/PrintStream
#22 = NameAndType #29:#30 // println:(Ljava/lang/String;)V
#23 = Utf8 org/jvminternals/SimpleClass
#24 = Utf8 java/lang/Object
#25 = Utf8 java/lang/System
#26 = Utf8 out
#27 = Utf8 Ljava/io/PrintStream;
#28 = Utf8 java/io/PrintStream
#29 = Utf8 println
#30 = Utf8 (Ljava/lang/String;)V
{
public org.jvminternals.SimpleClass();
Signature: ()V
flags: ACC_PUBLIC
Code:
stack=1, locals=1, args_size=1
0: aload_0
1: invokespecial #1 // Method java/lang/Object.&amp;#34;&amp;amp;lt;init&amp;amp;gt;&amp;#34;:()V
4: return
LineNumberTable:
line 3: 0
LocalVariableTable:
Start Length Slot Name Signature
0 5 0 this Lorg/jvminternals/SimpleClass;
public void sayHello();
Signature: ()V
flags: ACC_PUBLIC
Code:
stack=2, locals=1, args_size=1
0: getstatic #2 // Field java/lang/System.out:Ljava/io/PrintStream;
3: ldc #3 // String &amp;#34;Hello&amp;#34;
5: invokevirtual #4 // Method java/io/PrintStream.println:(Ljava/lang/String;)V
8: return
LineNumberTable:
line 6: 0
line 7: 8
LocalVariableTable:
Start Length Slot Name Signature
0 9 0 this Lorg/jvminternals/SimpleClass;
}
&lt;/code>&lt;/pre>&lt;p>这个 class 文件展示了三个主要部分：常量池、构造器方法和 sayHello 方法。&lt;/p>
&lt;ul>
&lt;li>**常量池：**提供了通常由符号表提供的相同信息，详细描述见下文。&lt;/li>
&lt;li>**方法：**每一个方法包含四个区域，签名和访问标签字节码 LineNumberTable：为调试器提供源码中的每一行对应的字节码信息。上面的例子中，Java 源码里的第 6 行与 sayHello 函数字节码序号 0 相关，第 7 行与字节码序号 8 相关。LocalVariableTable：列出了所有栈帧中的局部变量。上面两个例子中，唯一的局部变量就是 this。&lt;/li>
&lt;/ul>
&lt;p>这个 class 文件用到下面这些字节码操作符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>aload&lt;em>0&lt;/em>&lt;/th>
&lt;th>这个操作码是 aload 格式操作码中的一个。它们用来把对象引用加载到操作码栈。表示正在被访问的局部变量数组的位置，但只能是 0、1、2、3 中的一个。还有一些其它类似的操作码用来载入非对象引用的数据，如 iload, lload, float 和 dload。其中 i 表示 int，l 表示 long，f 表示 float，d 表示 double。局部变量数组位置大于 3 的局部变量可以用 iload, lload, float, dload 和 aload 载入。这些操作码都只需要一个操作数，即数组中的位置&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ldc&lt;/td>
&lt;td>这个操作码用来将常量从运行时常量池压栈到操作数栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>getstatic&lt;/td>
&lt;td>这个操作码用来把一个静态变量从运行时常量池的静态变量列表中压栈到操作数栈&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>invokespecial, invokevirtual&lt;/td>
&lt;td>这些操作码属于一组函数调用的操作码，包括：invokedynamic、invokeinterface、invokespecial、invokestatic、invokevirtual。在这个 class 文件中，invokespecial 和 invokevirutal 两个指令都用到了，两者的区别是，invokevirutal 指令调用一个对象的实例方法，invokespecial 指令调用实例初始化方法、私有方法、父类方法，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>return&lt;/td>
&lt;td>这个操作码属于 ireturn、lreturn、freturn、dreturn、areturn 和 return 操作码组。每个操作码返回一种类型的返回值，其中 i 表示 int，l 表示 long，f 表示 float，d 表示 double，a 表示 对象引用。没有前缀类型字母的 return 表示返回 void&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>跟任何典型的字节码一样，操作数与局部变量、操作数栈、运行时常量池的主要交互如下所示。构造器函数包含两个指令。首先，this 变量被压栈到操作数栈，然后父类的构造器函数被调用，而这个构造器会消费 this，之后 this 被弹出操作数栈。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://incdn1.b0.upaiyun.com/2016/02/2de41f30abe1e66e98211e54cc110024-1024x846.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>sayHello() 方法更加复杂，正如之前解释的那样，因为它需要用运行时常量池中的指向符号引用的真实引用。第一个操作码 getstatic 从 System 类中将 out 静态变量压到操作数栈。下一个操作码 ldc 把字符串 “Hello” 压栈到操作数栈。最后 invokevirtual 操作符会调用 System.out 变量的 println 方法，从操作数栈作弹出”Hello” 变量作为 println 的一个参数，并在当前线程开辟一个新栈帧。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://incdn1.b0.upaiyun.com/2016/02/81fee9586ec0b61b5dde85b99e114fd9-646x1024.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://www.importnew.com/17086.html" target="_blank" rel="noopener">实例探索 Class 文件&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://rednaxelafx.iteye.com/blog/652719" target="_blank" rel="noopener">实例构造器是不是静态方法？&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>