<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ListenableFuture | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/java-series/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/guava/%E5%B9%B6%E5%8F%91/listenablefuture/</link><atom:link href="https://ng-tech.icu/books/java-series/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/guava/%E5%B9%B6%E5%8F%91/listenablefuture/index.xml" rel="self" type="application/rss+xml"/><description>ListenableFuture</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>ListenableFuture</title><link>https://ng-tech.icu/books/java-series/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/guava/%E5%B9%B6%E5%8F%91/listenablefuture/</link></image><item><title>SettableFuture</title><link>https://ng-tech.icu/books/java-series/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/guava/%E5%B9%B6%E5%8F%91/listenablefuture/settablefuture/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-series/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/guava/%E5%B9%B6%E5%8F%91/listenablefuture/settablefuture/</guid><description>&lt;h1 id="settablefuture">SettableFuture&lt;/h1>
&lt;p>SettableFuture 继承了 AbstractFuture 抽象 类，AbstractFuture 抽象类实现了 ListenableFuture 接口，所以 SettableFuture 类也是 ListenableFuture 接口的一种实现，源码相当的简单，其中只包含了三个方法，一个用于创建 SettableFuture 实例的静态 create()方法；set 方法用于设置 Future 的值，返回是否设置成功，如果 Future 的值已经被设置或任务被取消，会返回 false；setException 与 set 方法类似，用于设置 Future 返回特定的异常信息，返回 exception 是否设置成功。&lt;/p>
&lt;p>SettableFuture 类是 ListenableFuture 接口的一种实现，我们可以通过 SettableFuture 设置 Future 的返回 值，或者设置 Future 返回特定的异常信息，可以通过 SettableFuture 内部提供的静态方法 create()创建一个 SettableFuture 实例，下面是一个简单的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">SettableFuture&lt;/span> &lt;span class="n">sf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SettableFuture&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">create&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设置成功后返回指定的信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">set&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;SUCCESS&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设置失败后返回特定的异常信息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Fails&amp;#34;&lt;/span>&lt;span class="o">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过上面的例子，我们看到，通过 create()方法，我们可以创建一个默认的 ettableFuture 实例，当我们需要为 Future 实例设置一个返 回值时，我们可以通过 set 方法，设置的值就是 Future 实例在执行成功后将要返回的值；另外，当我们想要设置一个异常导致 Future 执行失败，我们 可以通过调用 setException 方法，我们将给 Future 实例设置指定的异常返回。&lt;/p>
&lt;p>当我们有一个方法返回 Future 实例时，SettableFuture 会显得更有价值，但是已经有了 Future 的返回值，我们也不需要再去执行异步任务获取返回值。&lt;/p></description></item></channel></rss>