<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02.程序编译 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/java-series/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02.%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/</link><atom:link href="https://ng-tech.icu/books/java-series/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02.%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/index.xml" rel="self" type="application/rss+xml"/><description>02.程序编译</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>02.程序编译</title><link>https://ng-tech.icu/books/java-series/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02.%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/</link></image><item><title>分层编译</title><link>https://ng-tech.icu/books/java-series/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02.%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/%E5%88%86%E5%B1%82%E7%BC%96%E8%AF%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-series/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02.%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/%E5%88%86%E5%B1%82%E7%BC%96%E8%AF%91/</guid><description>&lt;h1 id="分层编译">分层编译&lt;/h1>
&lt;p>随着代码的执行，JVM 的 JIT 编译器会将部分热点代码编译为目标机器代码；JVM 提供了一个参数 &lt;code>-Xcomp&lt;/code> ,这个参数可以使 JVM 运行在纯编译的模式，所有的方法在第一次调用的时候就会编成机器代码，但是设置了这个参数之后系统启动负载的确没有上升，但是启动的时间是原来的两倍多。&lt;/p>
&lt;p>除了纯编译和默认的 mixed 之外，JVM 从 jdk6u25 之后，引入了分层编译(-XX:+TieredCompilation)。HotSpot 内置两种编译器，分别是 client 启动时的 c1 编译器和 server 启动时的 c2 编译器，c2 在将代码编译成机器代码的时候需要搜集大量的统计信息以便在编译的时候进行优化，因此编译出来的代码执行效率比较高，代价是程序启动时间比较长，而且需要执行比较长的时间，才能达到最高性能；与之相反，c1 的目标是使程序尽快进入编译执行的阶段，所以在编译前需要搜集的信息比 c2 要少，编译速度因此提高很多，但是付出的代价是编译之后的代码执行效率比较低，但尽管如此，c1 编译出来的代码在性能上比解释执行的性能已经有很大的提升，所以所谓的分层编译，就是一种折中方式，在系统执行初期，执行频率比较高的代码先被 c1 编译器编译，以便尽快进入编译执行，然后随着时间的推移，执行频率较高的代码再被 c2 编译器编译，以达到最高的性能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// globalDefinitions.hpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">CompLevel&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CompLevel_any&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CompLevel_all&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CompLevel_none&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// Interpreter
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CompLevel_simple&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// C1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CompLevel_limited_profile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// C1, invocation &amp;amp; backedge counters
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CompLevel_full_profile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// C1, invocation &amp;amp; backedge counters + mdo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">CompLevel_full_optimization&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// C2 or Shark
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>目前分层编译包括五个编译层次：Level 0 - Level 4。大家可以在启动参数中加入-XX:+PrintCompilation 来查看被编译的方法及其层次：&lt;/p>
&lt;ul>
&lt;li>Level0 即解释执行，由解释器负责执行 java 方法。这种方式无编译开销，但速度很慢；解释器并不开启性能监控功能，可触发第一层编译。&lt;/li>
&lt;li>Level1 程序由 C1 编译器编译为本地机器指令执行，C1 编译器会对字节码进行简单和可靠的优化，以达到更快的编译速度。编译方法受限，编译开销比较低，性能比 Level4 差，但强于其他层次。&lt;/li>
&lt;li>Level2 程序由 C1 编译器编译为本地机器指令执行，但 C2 编译器会启动一些编译耗时更长的优化（代码将有可能被重复编译多次），甚至有可能根据性能监控信息进行一些不可靠的激进优化。编译开销比较低，性能差于 Level4 和 Level1。&lt;/li>
&lt;li>Level3 由 C1 负责编译，除了方法执行次数和回边次数的统计外，还加入了对方法内部执行信息的统计，如一个分枝是否执行跳转，一个虚函数调用最终调用到哪个方法等信息。Level3 性能较差，仅比 Level0 快，但是 Level3 是 Level4 编译的必要步骤。程序由 C1 编译器编译为本地机器指令执行，采集性能数据进行优化措施；&lt;/li>
&lt;li>Level4 由 C2 负责编译，它利用 level3 收集的信息，对方法进行完全的优化，性能最好，但是编译开销也最大。程序由 C2 编译器编译为本地机器指令执行，进行完全优化。&lt;/li>
&lt;/ul>
&lt;p>下述列举了判断一个方法是否需要触发编译的及编译到哪个层次的具体公式:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>说明&lt;/th>
&lt;th>默认值&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Tier3InvocationThreshold&lt;/td>
&lt;td>一个方法被调用多少次之后会进行 level3 编译&lt;/td>
&lt;td>200&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier4InvocationThreshold&lt;/td>
&lt;td>一个方法被调用多少次之后会进行 level4 编译&lt;/td>
&lt;td>5000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier3CompileThreshold&lt;/td>
&lt;td>考虑回边的情况下，一个方法执行多少次之后会进行 level3 编译&lt;/td>
&lt;td>2000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier4CompileThreshold&lt;/td>
&lt;td>考虑回边的情况下，一个方法执行多少次之后会进行 level4 编译&lt;/td>
&lt;td>15000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier3BackEdgeThreshold&lt;/td>
&lt;td>一个方法中回边执行多少次会进行 OSR level3 编译&lt;/td>
&lt;td>60000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier4BackEdgeThreshold&lt;/td>
&lt;td>一个方法中回边执行多少次会进行 OSR level4 编译&lt;/td>
&lt;td>40000&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CICompilerCount&lt;/td>
&lt;td>编译线程数目&lt;/td>
&lt;td>无&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier3LoadFeedback&lt;/td>
&lt;td>用来动态调整 level3 编译阈值的值&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier4LoadFeedback&lt;/td>
&lt;td>用来动态调整 level4 编译阈值的值&lt;/td>
&lt;td>3&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier3DelayOn&lt;/td>
&lt;td>平均每个 C2 编译线程排队个数达到多少个时停止 level3 编译&lt;/td>
&lt;td>5&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Tier3DelayOff&lt;/td>
&lt;td>平均每个 C2 编译线程排队个数降低到多少个时恢复 level3 编译&lt;/td>
&lt;td>2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>最常见的 0 -&amp;gt; 3 -&amp;gt; 4 编译，高 C2 编译压力下的 0 -&amp;gt; 2 -&amp;gt; 3 -&amp;gt; 4 编译；level2 的性能比 level3 好。当 C2 的编译压力很大的情况下，新编译的 level3 方法可能方法会长时间的运行在效率相对比较低的代码上而不能及时晋升到 level4。在这种情况下，将待编译的方法编译成 level2 而不是 level3 会是一个更好的方法。总体上，C2 编译压力比较大的情况下是先解释执行，达到一定次数编译成 level2，然后等 C2 编译压力变小的时候会晋升成 level3，最后如果执行次数足够多的话会晋升成 level4。&lt;/p>
&lt;p>Level1 与 level2 和 level3 不同，它是一个不收集运行数据的最终编译状态。
当一个方法需要进行编译的时候，我们会首先判断它是否符合以下条件：&lt;/p>
&lt;ul>
&lt;li>这个方法只是用来获取类中的某个域的值的&lt;/li>
&lt;li>这个方法只是用来获取常量的&lt;/li>
&lt;li>这个方法很小&lt;/li>
&lt;/ul>
&lt;p>满足这三个条件其中之一的方法会直接被编译成 level1 并且不会晋升为其他 level。由于 C2 编译耗时较多，往往要达到几百毫秒甚至超过一秒，因此在高峰期行 Level4 编译通常并不划算，因此 JVM 参数的调整的思路是增大 level4 阈值，减少 level4 编译。具体的，可以通过增大 Tier4InvocationThreshold 和 Tier4CompileThreshold 来增大阈值。编译开销主要在于 C2 的编译线程，因此通过一定的手段限制 C2 编译线程的 CPU 使用可以减少高峰期编译开销。在本次测试中，使用在每编译完成一个方法后，sleep 200ms 的方法来限制 C2 编译线程 CPU 使用率。&lt;/p></description></item><item><title>字节码</title><link>https://ng-tech.icu/books/java-series/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02.%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/%E5%AD%97%E8%8A%82%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-series/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/02.%E7%A8%8B%E5%BA%8F%E7%BC%96%E8%AF%91/%E5%AD%97%E8%8A%82%E7%A0%81/</guid><description>&lt;h1 id="字节码">字节码&lt;/h1>
&lt;p>如下简单的 Java 代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// javac Test.java
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// javap -v Test.class
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译而来的字节码如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main 方法的签名
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">lang&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">String&lt;/span>&lt;span class="o">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 第二部分的 descriptor 表示方法拥有一个类型为 [Ljava/lang/String; 的参数，返回值类型是 V
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">descriptor:&lt;/span> &lt;span class="o">([&lt;/span>&lt;span class="n">Ljava&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lang&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">;)&lt;/span>&lt;span class="n">V&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 一系列指示符，ACC_PUBLIC 表明方法是 public 类型，ACC_STATIC 表明方法是 static 类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">flags:&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="mh">0x0009&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">ACC_PUBLIC&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ACC_STATIC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 代码区
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nl">Code:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// stack 表示操作栈的最大深度，locals 表示本地变量数组的长度，args_size 表示参数的个数。在指令执行过程中，所有局部变量会陆续被操作，但 args 除外，它固定放在本地变量数组索引等于 0 的位置。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">locals&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">args_size&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 常量 1 推入操作栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iconst_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从操作栈弹出一个 int 值，存入索引为 1 的本地变量中，对应源码中的变量 a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将常量 2 推入操作栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iconst_2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从操作栈弹出一个 int 值，存入索引为 2 的本地变量中，对应源码中的变量 b
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从索引为 1 的本地变量中取出 int 值，推入操作栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iload_1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从索引为 2 的本地变量中取出 int 值，推入操作栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iload_2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从操作栈弹出两个 int 值，然后相加，并将结果推入操作栈
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">6&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">iadd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 从操作栈弹出 int 值，存入索引为 3 的本地变量中，对应源码中的变量c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">7&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">istore_3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">8&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">return&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/CH9D-E7fxuu462Q2S3t0AA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/CH9D-E7fxuu462Q2S3t0AA&lt;/a> Java 字节码增强探秘&lt;/li>
&lt;/ul></description></item></channel></rss>