<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库设计 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</link>
      <atom:link href="https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml" />
    <description>数据库设计</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>数据库设计</title>
      <link>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</link>
    </image>
    
    <item>
      <title>设计规约</title>
      <link>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E8%A7%84%E7%BA%A6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/%E8%AE%BE%E8%AE%A1%E8%A7%84%E7%BA%A6/</guid>
      <description>&lt;h1 id=&#34;表与索引规约&#34;&gt;表与索引规约&lt;/h1&gt;
&lt;p&gt;参考阿里的 &lt;a href=&#34;https://github.com/alibaba/p3c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;p3c&lt;/a&gt; 规范。&lt;/p&gt;
&lt;h1 id=&#34;命名&#34;&gt;命名&lt;/h1&gt;
&lt;p&gt;数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。MySQL 在 Windows 下不区分大小写，但在 Linux 下默认是区分大小写；因此，数据库名、表名、字段名，都不允许出现任何大写字母，避免节外生枝。&lt;/p&gt;
&lt;p&gt;表名应该仅仅表示表里面的实体内容，不应该表示实体数量，对应于 DO 类名也是单数形式，不使用复数名词，符合表达习惯。单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。&lt;/p&gt;
&lt;h1 id=&#34;字段&#34;&gt;字段&lt;/h1&gt;
&lt;p&gt;表必备三字段：id, gmt_create, gmt_modified。其中 id 必为主键，类型为 unsigned bigint、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 datetime 类型，前者现在时表示主动创建，后者过去分词表示被动更新。&lt;/p&gt;
&lt;p&gt;任何字段如果为非负数，必须是 unsigned。小数类型为 decimal，禁止使用 float 和 double。float 和 double 在存储的时候，存在精度损失的问题，很可能在值的比较时，得到不正确的结果。如果存储的数据范围超过 decimal 的范围，建议将数据拆成整数和小数分开存储。&lt;/p&gt;
&lt;p&gt;表达是与否概念的字段，必须使用 is_xxx 的方式命名，数据类型是 unsigned tinyint(1 表示是，0 表示否)。但是 POJO 类的布尔属性不能加 is，要求在 resultMap 中进行字段与属性之间的映射。&lt;/p&gt;
&lt;h1 id=&#34;索引&#34;&gt;索引&lt;/h1&gt;
&lt;p&gt;主键索引名为 &lt;code&gt;pk_&lt;/code&gt; 字段名；唯一索引名为 &lt;code&gt;uk_&lt;/code&gt; 字段名；普通索引名则为 &lt;code&gt;idx_&lt;/code&gt; 字段名。业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引。&lt;/p&gt;
&lt;p&gt;在 varchar 字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可。索引的长度与区分度是一对矛盾体，一般对字符串类型数据，长度为 20 的索引，区分度会高达 90%以上，可以使用&lt;code&gt;count(distinct left(列名, 索引长度))/count(*)&lt;/code&gt;的区分度来确定。&lt;/p&gt;
&lt;h1 id=&#34;外键&#34;&gt;外键&lt;/h1&gt;
&lt;p&gt;1、要设置外键的字段不能为主键&lt;/p&gt;
&lt;p&gt;2、改建所参考的字段必须为主键&lt;/p&gt;
&lt;p&gt;3、两个字段必须具有相同的数据类型和约束&lt;/p&gt;
&lt;p&gt;满足这三个条件一般在创建外键的时候就不会报错，而这里报错了 cannot add foreign key constraint 大多数是因为第三个条件不满足。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>数据建模</title>
      <link>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BB%BA%E6%A8%A1/</guid>
      <description>&lt;h1 id=&#34;数据建模&#34;&gt;数据建模&lt;/h1&gt;
&lt;p&gt;每个 DBMS，无论是 NoSQL 还是 SQL，最终，都是把无意义的物理状态（高电压和低电压，或者开和关）和有意义的事物建立映射关系，从而表示数据。我们把这个映射称为物理表示。在更高的层次上，我们使用表、图形和文档等结构来表示关系。理解的关键是逻辑数据模型应该完全忽略这些物理映射问题。逻辑数据模型应该把重点完全放在数据的含义上以及数据如何按照逻辑表示问题域内的数据。但是，在从逻辑模型转移到物理模型时，保留从物理模型到逻辑模型的映射关系以及物理表示设计都变得至关重要了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>数据库范式</title>
      <link>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/mysql-notes/01.sql/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/%E6%95%B0%E6%8D%AE%E5%BA%93%E8%8C%83%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;数据库范式&#34;&gt;数据库范式&lt;/h1&gt;
&lt;p&gt;数据库的设计可以分为以下几类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一范式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二范式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三范式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Boyce-Codd 范式&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些类别就像代理人一样，对设计的好坏进行分类&lt;/p&gt;
&lt;h1 id=&#34;第一范式确保每列保持原子性&#34;&gt;第一范式(确保每列保持原子性)&lt;/h1&gt;
&lt;p&gt;第一范式是最基本的范式，简而言之，第一范式就是无重复的列。如果数据库表中的所有字段值都是不可分解的原子值，就说明该数据库表满足了第一范式。同一列中不能有多个值，即实体中的某个属性不能有多个值或者不能有重复的属性。如果出现重复的属性，就可能需要定义一个新的实体，新的实体由重复的属性构成，新实体与原实体之间为一对多关系。在第一范式(1NF)中表的每一行只包含一 个实例的信息。在任何一个关系数据库中，第一范式(1NF)是对关系模式的基本要求，不满足第一范式(1NF)的数据库就不是关系数据库。&lt;/p&gt;
&lt;p&gt;第一范式的合理遵循需要根据系统的实际需求来 定。比如某些数据库系统中需要用到“地址”这个属性，本来直接将“地址”属性设计成一个数据库表的字段就行。但是如果系统经常会访问“地址”属性中的“城 市”部分，那么就非要将“地址”这个属性重新拆分为省份、城市、详细地址等多个部分进行存储，这样在对地址中某一部分操作的时候将非常方便。这样设计才算 满足了数据库的第一范式，如下表所示。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://pic002.cnblogs.com/images/2012/270324/2012040114023352.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;第二范式2nf属性完全依赖于主键消除部分子函数依赖&#34;&gt;第二范式(2NF)属性完全依赖于主键(消除部分子函数依赖)&lt;/h1&gt;
&lt;p&gt;第二范式(2NF)是在第一范式(1NF)的基 础上建立起来的，即满足第二范式(2NF)必须先满足第一范式(1NF)。第二范式(2NF)要求数据库表中的每个实例或行必须可以被惟一地区分。为实现 区分通常需要为表加上一个列，以存储各个实例的惟一标识。
例如员工信息表中加上了员工编号(emp_id)列，因为每个员工的员工编号是惟一的，因此每个员工可以被惟一区分。这个惟一属性列被称为主关键字或主键、主码。
第二范式(2NF)要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性，如果存在，那么这个属性和主关键字的 这一部分应该分离出来形成一个新的实体，新实体与原实体之间是一对多的关系。为实现区分通常需要为表加上一个列，以存储各个实例的惟一标识。简而言之，第二范式就是属性完全依赖于主键。&lt;/p&gt;
&lt;p&gt;比如要设计一个订单信息表，因为订单中可能会有多种商品，所以要将订单编号和商品编号作为数据库表的联合主键，如下表所示。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://pic002.cnblogs.com/images/2012/270324/2012040114063976.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样就产生一个问题：这个表中是以订单编号和商品编号作为联合主键。这样在该表中商品名称、单位、商品价格等信息不与该表的主键相关，而仅仅是与商品编号相关。所以在这里违反了第二范式的设计原则。而如果把这个订单信息表进行拆分，把商品信息分离到另一个表中，把订单项目表也分离到另一个表中，就非常完美了。如下所示。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://pic002.cnblogs.com/images/2012/270324/2012040114082156.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;第三范式3nf属性不依赖于其它非主属性消除传递依赖&#34;&gt;第三范式(3NF)属性不依赖于其它非主属性[消除传递依赖]&lt;/h3&gt;
&lt;p&gt;满足第三范式(3NF)必须先满足第二范式(2NF)。简而言之，第三范式(3NF)要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。例如，存在一个部门信息表，其中每个部门有部门编号(dept_id)、部门名称、部门简介等信息。
那么在的员工信息表中列出部门编号后就不能再将部门名称、部门简介等与部门有关的信息再加入员工信息表中。如果不存在部门信息表，则根据第三范式(3NF)也应该构建它，否则就会有大量的数据冗余。简而言之，第三范式就是属性不依赖于其它非主属性。&lt;/p&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/11dorpD57vtUF2bhucveYg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mp.weixin.qq.com/s/11dorpD57vtUF2bhucveYg&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/MNjrjEivjQpVx40C00nPtw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mp.weixin.qq.com/s/MNjrjEivjQpVx40C00nPtw&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mikealche.com/software-development/a-humble-guide-to-database-schema-design&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.mikealche.com/software-development/a-humble-guide-to-database-schema-design&lt;/a&gt; 提取其中 Use at least third normal form&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
