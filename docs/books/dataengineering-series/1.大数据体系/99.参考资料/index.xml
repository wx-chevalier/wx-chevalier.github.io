<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>99.参考资料 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/dataengineering-series/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link><atom:link href="https://ng-tech.icu/books/dataengineering-series/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml"/><description>99.参考资料</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>99.参考资料</title><link>https://ng-tech.icu/books/dataengineering-series/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link></image><item><title>2021-松子-一文遍历大数据架构变迁史</title><link>https://ng-tech.icu/books/dataengineering-series/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2021-%E6%9D%BE%E5%AD%90-%E4%B8%80%E6%96%87%E9%81%8D%E5%8E%86%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81%E5%8F%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/dataengineering-series/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2021-%E6%9D%BE%E5%AD%90-%E4%B8%80%E6%96%87%E9%81%8D%E5%8E%86%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81%E5%8F%B2/</guid><description>&lt;h1 id="一文遍历大数据架构变迁史">一文遍历大数据架构变迁史&lt;/h1>
&lt;p>从现在的企业发展来看，大家的诉求重点已经从经营与分析转为数据化的精细运营。在如何做好精细化运营过程中，企业也面临着来自创新、发展、内卷等的各方面压力。随着业务量、数据量增长，大家对数据粒度需求从之前的高汇总逐渐转为过程化的细粒度明细数据，以及从 T+1 的数据转为近乎实时的数据诉求。大量的数据需求、海量的临时需求，让分析师、数据开发疲惫不堪。这些职位也变成了企业资源的瓶颈，传统 BI 中的 Report、OLAP 等工具也都无法满足互联网行业个性化的数据需求。大家开始考虑如何把需求固定为一个面向最终用户自助式、半自助的产品，来快速获取数据并分析得到结果，数据通过各类数据产品对外更有针对性的数据价值传递。&lt;/p>
&lt;p>在这十几年中，影响数据仓库、数据平台、数据中台、数据湖的演进变革的因素也很多，比如不断快速迭代的业务模式与膨胀的群体规模所带来的数据量的冲击，新的大数据处理技术的驱动。还有落地在数据中台上各种数据产品的建设，比如工具化数据产品体系、各种自助式的数据产品、平台化各种数据产品的建设。这些数据建设能力的泛化，也让更多的大众参与数据中台的建设中 ，比如一些懂 SQL 的用户以及分析师参与数据平台直接建设比重增加 。还有一些原本数据中台具备的能力也有一些逐步地被前置到业务系统进行处理。&lt;/p>
&lt;p>数据仓库在国外发展多年，于大约在 1998-1999 年传入中国。进入中国以后，发展出了很多专有名词，比如数据仓库、数据中心、数据平台、数据中台、数据湖等，从大数据架构角度来看可用三个时代九种架构来做总结，其中前四代是传统数据仓库时代的架构，后面五代是大数据架构模式。其中有两个承前启后的地方：&lt;/p>
&lt;ul>
&lt;li>一个特殊地方是，传统行业第三代架构与大数据第一代架构在架构形式上基本相似。传统行业的第三代架构可以算是用大数据处理技术重新实现了一遍。&lt;/li>
&lt;li>传统行业第四代的架构中实时部分在现代用大数据实时方式做了新的落地。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230323161242.png" alt="大数据架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>三个时代：非互联网、互联网、移动互联网时代，每一种时代的业务特点、数据量、数据类型各不相同，自然数据架构也是有显著差异的。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>行业域&lt;/th>
&lt;th>非互联网&lt;/th>
&lt;th>互联网&lt;/th>
&lt;th>移动互联网&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>数据来源(相对于数据平台来讲)&lt;/td>
&lt;td>结构化各类数据库(DB 系统)、结构化文本、Excel 表格等，少量 word&lt;/td>
&lt;td>Web、自定义、系统的日志，各类结构化 DB 数据、长文本、视频 主要是来自网页&lt;/td>
&lt;td>除了互联网那些外还含有大量定位数据、自动化传感器、嵌入式设备、自动化设备等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据包含信息&lt;/td>
&lt;td>CRM 客户信息、事务性 ERP/MRPII 数据、资金账务数据 等。&lt;/td>
&lt;td>除了传统企业数据信息外，还含有用户各类点击日志、社交数据、多媒体、搜索、电邮数据等等&lt;/td>
&lt;td>除了传统互联网的数据外，还含有 Gps、穿戴设备、传感器各类采集数据、自动化传感器采集数据等等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据结构特性&lt;/td>
&lt;td>几乎都是结构化数据&lt;/td>
&lt;td>非结构化数据居多&lt;/td>
&lt;td>非结构化数据居多&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据存储/数据量&lt;/td>
&lt;td>主要以 DB 结构化存储为主，从几百兆到 百 G 级别&lt;/td>
&lt;td>文件形式、DB 形式，流方式、 从 TB 到 PB&lt;/td>
&lt;td>文件形式、流方式、DB 范式，非结构化 从 TB 到 PB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>产生周期&lt;/td>
&lt;td>慢，几天甚至周为单位&lt;/td>
&lt;td>秒或更小为单位&lt;/td>
&lt;td>秒或更小为单位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>对消费者行为采集与还原&lt;/td>
&lt;td>粒度粗&lt;/td>
&lt;td>粒度较细&lt;/td>
&lt;td>粒度非常细&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据价值&lt;/td>
&lt;td>长期有效&lt;/td>
&lt;td>随着时间衰减&lt;/td>
&lt;td>随着时间快速衰减&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="从数据到大数据的数据架构总结">从数据到大数据的数据架构总结&lt;/h1>
&lt;p>我自己对传统数据仓库的发展，简单抽象为为五个时代、四种架构（或许也不是那么严谨）。五个时代大概，按照两位数据仓库大师 Ralph kilmball、Bill Innmon 在数据仓库建设理念上碰撞阶段来作为小的分界线：&lt;/p>
&lt;ul>
&lt;li>大概在 1991 年之前，数据仓库的实施基本采用全企业集成的模式。&lt;/li>
&lt;li>大概在 1992 年企业在数据仓库实施基本采用 EDW 的方式，Bill Innmon 博士出版了《如何构建数据仓库》，里面清晰的阐述了 EDW 架构与实施方式。&lt;/li>
&lt;li>1994-1996 年是数据集市时代，这个时代另外一种维度建模、数据集市的方式较为盛行起来，其主要代表之一 Ralph Kimball 博士出版了他的第一本书“The DataWarehouse Toolkit”（《数据仓库工具箱》），里面非常清晰的定义了数据集市、维度建模。&lt;/li>
&lt;li>大概在 1996-1997 年左右的两个架构竞争时代。&lt;/li>
&lt;li>1998-2001 年左右的合并年代。&lt;/li>
&lt;/ul>
&lt;p>在主要历史事件中提到了两位经典代表人物：Bill Innmon、Ralph kilmball。这两位在数据界可以算是元祖级别的人物。现在数据中台/平台的很多设计理念依然受到他俩 90 年代所提出方法论为依据。&lt;/p>
&lt;h2 id="经典的-bill-inmon-和-ralph-kilmball-争论">经典的 BIll Inmon 和 Ralph kilmball 争论&lt;/h2>
&lt;p>Bill Inmon 提出的遵循的是自上而下的建设原则，Ralph kilmball 提出自下而上的建设原则，两种方法拥护者会在不同场合争论哪一种方法论更有优势。两位大师对于建设方法争论要点：&lt;/p>
&lt;ol>
&lt;li>其中 Bill Inmon 的方法论：认为仅仅有数据集市是不够的，提倡先必须得从企业级的数据模型角度入手来构建。企业级模型就有较为完善的业务主题域划分、逻辑模型划分，在解决某个业务单元问题时可以很容易的选择不同数据路径来组成数据集市。后来数据仓库在千禧年传到中国后，几个大实施厂商都是遵守该原则的实施方法，也逐渐的演进成了现在大家熟悉的数据架构中关于数据层次的划分：&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>Ods-&amp;gt; DW-&amp;gt; ST-&amp;gt;应用&lt;/li>
&lt;li>Ods-&amp;gt;DWD-&amp;gt;DW-&amp;gt;DM -&amp;gt;应用&lt;/li>
&lt;li>Ods-&amp;gt;DWD-&amp;gt;DWB-&amp;gt;DWS -&amp;gt;应用&lt;/li>
&lt;li>Ods-&amp;gt;DWD-&amp;gt;DW-&amp;gt;ST（ADM）-&amp;gt;应用&lt;/li>
&lt;/ul>
&lt;p>上个 10 年的国内实施数据仓库以及数据平台企业，有几家专业的厂商：IBM、Teradata、埃森哲、菲奈特 (被东南收购)、亚信等。这些厂商针对自己领域服务的客户，从方案特点等一系列角度出发，在实施中对 ODS 层、EDW、DM 等不同数据层逐步地赋予了各种不同的功能与含义。现在大家熟知的数据模型层次划分，基本上也是传承原有的 Bill Inmon 的方法论。&lt;/p>
&lt;ol start="2">
&lt;li>数据集市年代的代表人物为 Ralph kilmball，他的代表作是 《The Data Warehouse Toolkit》。这本书就是大名鼎鼎的《数据仓库工具箱》。企业级数据的建设方法主张自下而上建立数据仓库，极力推崇创建数据集市，认为数据仓库是数据集市的集合，信息总是被存储在多维模型中。这种思想从业务或部门入手，设计面向业务或部门主题数据集市。随着更多的不同业务或部门数据集市实施落地，此时企业可以根据需要来合并不同的数据集市，并逐步形成企业级的数据仓库，这种方式被称为自下而上(Botton-up)方法。这个方法在当时刚好与 Bill Innmon 的自上而下建设方法相反。&lt;/li>
&lt;/ol>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类比&lt;/th>
&lt;th>BIll Inmon 提出的方法论&lt;/th>
&lt;th>Ralph kilmball 提出的方法论&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>建设周期&lt;/td>
&lt;td>需要花费大量时间&lt;/td>
&lt;td>建设周期短、花费较少时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>维护难易度&lt;/td>
&lt;td>容易维护&lt;/td>
&lt;td>维护成本高&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>建设成本&lt;/td>
&lt;td>前期投入大，后期建设成本低&lt;/td>
&lt;td>前期投入较少，后续迭代成本与之前投入差不多&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>建设周期&lt;/td>
&lt;td>周期长，见效慢&lt;/td>
&lt;td>短、平、快&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>需要的团队类型&lt;/td>
&lt;td>专业团队搭建&lt;/td>
&lt;td>比较专业团队搭建，少量人参与&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据集成需求&lt;/td>
&lt;td>全企业生命周期数据集成&lt;/td>
&lt;td>企业垂直业务领域数据集成&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>面向用户群体&lt;/td>
&lt;td>潜在的全企业用户&lt;/td>
&lt;td>业务需求部门&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>专业术语&lt;/td>
&lt;td>面向主题、随时间而变化、保留历史、数据集成&lt;/td>
&lt;td>面向具体业务部门的一份比较窄的数据快照，维度建模、雪花模型、星型模型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据模型&lt;/td>
&lt;td>准三范式设计原则&lt;/td>
&lt;td>星型结构、雪花结构&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>随着数据仓库的不断实践与迭代发展，从争吵期进入到了合并的时代，其实争吵的结果要么一方妥协，要么新的结论出现。Bill inmon 与 Ralph kilmball 的争吵没有结论，干脆提出一种新的架构包含对方，也就是后来 Bill Inmon 提出的 CIF（corporation information factory）信息工厂的架构模式，这个架构模式将 Ralph kilmball 的数据集市包含了进来，有关两种数据仓库实施方法论的争吵才逐步地平息下来。&lt;/p>
&lt;h2 id="非互联网四代架构">非互联网四代架构&lt;/h2>
&lt;h3 id="第一代-edw-架构">第一代 edw 架构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230324172051.png" alt="第一代 EDW" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>现在数据建设中使用到的“商业智能” 、“信息仓库”等很多专业术语、方法论，基本上是在上世纪 60 年代至 90 年代出现的。比如“维度模型”这个词是上世纪 60 年代 GM 与 Darmouth College 大学第一次提出， “DatawareHouse”、“事实” 是在上个世纪 70 年代 BIll Inmon 明确定义出来的，后来 90 年代 BIll Inmon 出版《如何构建数据仓库》一书更加体系化的与明确定义了如何构建数据仓库，这套方法在落地上形成了第一代数据仓库架构。&lt;/p>
&lt;p>在第一代的数据仓库中，清晰地定义了数据仓库(Data Warehouse) 是一个面向主题的(Subject Oriented) 、集成的( Integrate ) 、相对稳定的(Non -Volatile ) 、反映历史变化( Time Variant) 的数据集合，用于支持管理决策（Decision Marking Support）。首先，数据仓库(Data Warehouse)是用来支持决策的、面向主题的用来支撑分析型数据处理的，这里有别于企业使用的数据库。数据库、数据仓库小的区别：&lt;/p>
&lt;ul>
&lt;li>数据库系统的设计目标是事务处理。数据库系统是为记录更新和事务处理而设计，数据的访问的特点是基于主键，大量原子，隔离的小事务，并发和可恢复是关键属性，最大事务吞吐量是关键指标，因此数据库的设计都反映了这些需求。&lt;/li>
&lt;li>数据仓库的设计目标是决策支持。历史的、摘要的、聚合的数据比原始的记录重要的多。查询负载主要集中在即席查询和包含连接，聚合等复杂查询操作上。&lt;/li>
&lt;li>其次，数据仓库(Data Warehouse)是对多种异构数据源进行有效集成与处理，是按照主题的方式对数据进行重新整合，且包一般不怎么修改的历史数据，一句话总结面向主题、集成性、稳定性和时变性。&lt;/li>
&lt;/ul>
&lt;p>数据仓库(Data Warehouse)从特点上来看：&lt;/p>
&lt;ul>
&lt;li>数据仓库是面向主题的。&lt;/li>
&lt;li>数据仓库是集成的，数据仓库的数据有来自于分散的操作型数据，将所需数据从原来的数据中抽取出来，进行加工与集成，统一与综合之后才能进入数据仓库。&lt;/li>
&lt;li>数据仓库是不可更新的，数据仓库主要是为决策分析提供数据，所涉及的操作主要是数据的查询。&lt;/li>
&lt;li>数据仓库是随时间而变化的，传统的关系数据库系统比较适合处理格式化的数据，能够较好的满足商业商务处理的需求，它在商业领域取得了巨大的成功。&lt;/li>
&lt;/ul>
&lt;p>数据仓库和数据库系统的区别，一言蔽之：OLAP 和 OLTP 的区别。数据库支持是 OLTP，数据仓库支持的是 OLAP。&lt;/p>
&lt;h3 id="第二代大集市架构">第二代大集市架构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230324172644.png" alt="第二代大集市架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>第二代就是 Ralph kilmball 的大集市的架构。第二代架构基本可以成为总线型架构，从业务或部门入手，设计面向业务或部门主题数据集市。Kilmball 的这种构建方式可以不用考虑其它正在进行的数据类项目实施，只要快速满足当前部门的需求即可，这种实施的好处是阻力较小且路径很短。但是考虑到在实施中可能会存在多个并行的项目，是需要在数据标准化、模型阶段是需要进行维度归一化处理，需要有一套标准来定义公共维度，让不同的数据集市项目都遵守相同的标准，在后面的多个数据集市做合并时可以平滑处理。比如业务中相似的名词、不同系统的枚举值、相似的业务规则都需要做统一命名，这里在现在的中台就是全域统一 ID 之类的东西。&lt;/p>
&lt;p>主要核心：&lt;/p>
&lt;ul>
&lt;li>一致的维度，以进行集成和全面支持。一致的维度具有一致的描述性属性名称、值和含义。&lt;/li>
&lt;li>一致的事实是一致定义的；如果不是一致的业务规则，那么将为其指定一个独特的名称。业务中相似的名词、不同系统的枚举值、相似的业务规则都需要做统一命名。&lt;/li>
&lt;li>建模方式：星型模型、雪花模型。&lt;/li>
&lt;/ul>
&lt;h3 id="第三代汇总维度集市-cif20-数仓结构">第三代汇总维度集市 &amp;amp;CIF2.0 数仓结构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230324173843.png" alt="汇总维度集市的标准数据仓库" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230324173921.png" alt="第三代 cif 2.0 架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>CIF（corporation information factor）信息工厂（作者备注，关于 Cif 的英文版文章名字 Corporate Information Factory (CIF) Overview），Bill Inmon 认为企业的发展会随着信息资源重要性会逐步的提升，会出现一种信息处理架构，类似工厂一样能满足所有信息的需求与请求。这个信息工厂的功能包含了数据存储与处理（活跃数据、沉默数据），支持跨部门甚至跨企业的数据访问与整合，同时也要保证数据安全性等。刚好 CIF 架构模式也逐步的变成了数据仓库第三代架构。为什么把这个 CIF 架构定义成一个经典架构呢，因为 CIF 的这种架构总结了前面提到的两种架构的同时，又把架构的不同层次定义得非常明确。&lt;/p>
&lt;p>例如 CIF 2.0 主要包括集成转换层（Integrated and Transformation Layer）、操作数据存储（Operational Data Store）、数据仓库（Enterprise Data Warehouse）、数据集市（Data Mart）、探索仓库（Exploration Warehouse）等部件。Data Mart 分为后台（Back Room）和前台（Front Room）两部分。后台主要负责数据准备工作，称为数据准备区（Staging Area），前台主要负责数据展示工作，称为数据集市（Data Mart）。&lt;/p>
&lt;p>这个经典的架构在后来 2006 年~2012 年进入到这个领域的从业者，乃至现在有些互联网企业的数据平台架构也是相似的。&lt;/p>
&lt;h3 id="第四代-opdm-操作实时数仓">第四代 OPDM 操作实时数仓&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230324174555.png" alt="OPDM 操作实时数仓" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>OPDM 大约是在 2011 年提出来的，严格上来说，Opdm 操作型数据集市（仓库）是实时数据仓库的一种，他更多的是面向操作型数据而非历史数据查询与分析。在这里很多人会问到什么是操作型数据？比如财务系统、CRM 系统、营销系统生产系统，通过某一种机制实时的把这些数据在各数据孤岛按照业务的某个层次有机的自动化整合在一起，提供业务监控与指导。&lt;/p>
&lt;h2 id="互联网的五代大数据处理架构">互联网的五代大数据处理架构&lt;/h2>
&lt;p>在文章的开头有提过，传统行业第三代架构与大数据第一代架构在架构形式上基本相似，只不过是通过大数据的处理技术尝试对传统第三架构进行落地的。比如说在 Hadoop&amp;amp;Hive 刚兴起的阶段，有用 SyaseIQ、Greenplum 等技术来作为大数据处理技术，后来 Hadoop&amp;amp;hive 以及 Facebook Scribe、Linkedin kafka 等逐步开源后又产生了新的适应互联网大数据的架构模式。&lt;/p>
&lt;p>后续阿里巴巴淘系的 TimeTunnel 等更多的近百种大数据处理的开源技术，进一步促进了整个大数据处理架构与技术框架的发展，我在后面会给出一个比较完善截止到目前所有技术的数据处理框架。按照大数据的使用场景、数据量、数据的类型，在架构上也基本上分为流式处理技术框架、批处理技术框架等， 所以互联网这五代的大数据处理框架基本上是围绕着批处理、流式处理以及混合型架构这三种来做演进。&lt;/p>
&lt;h3 id="第一代离线大数据统计分析技术架构">第一代离线大数据统计分析技术架构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230324174903.png" alt="离线统计分析技术架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>这个结构与第三代的数据处理架构非常相似，具体如下图所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>数据阶段&lt;/th>
&lt;th>传统行业第三代架构&lt;/th>
&lt;th>第一代离线大数据统计架构&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>数据源&lt;/td>
&lt;td>结构化数据为主(数据库数据、内部办公数据、财务数据等)、非结构化数据很少或者是没有&lt;/td>
&lt;td>结构化数据为主(数据库数据、内部办公数据、财务数据等)、结构化数据开始多起来&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据处理&lt;/td>
&lt;td>名词：ETL 为主，在数据如中央仓库之前已经开始很多的数据转换、归一化的处理技术：Datastage、informa、Dts、C、脚本等等&lt;/td>
&lt;td>名词：ELT 为主，主要是数据采集传输与归集、很少做数据归一化以及转换处理 。主要是把数据先归集到中央库自作处理技术：kafka、Datax 等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据中央处理&lt;/td>
&lt;td>技术：Oracle、DB2、SybaseIQ、Teradata 数据模型：维度模型、准三范式&lt;/td>
&lt;td>技术：hadoop、hive、spark 数据模型：维度模型、大宽表等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>数据应用&lt;/td>
&lt;td>成型的解决方案产品：Report、OLAP、在线分析等&lt;/td>
&lt;td>成型的软件产品变少、开源技术、自助研发产品变多起来&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="第二代流式架构">第二代流式架构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325140925.png" alt="流式技术架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>流式的应用场景非常广泛， 比如搜索、推荐、信息流等都是在线化的，对数据实时性的要求变更高，自然计算与使用是同步进行的。随着业务的复杂化，数据的处理逻辑更加复杂，比如各种维度交叉、关联、聚类，以及需要更多算法或机器学习。这些应用场景可以完全地分为两类：事件流、持续计算。&lt;/p>
&lt;ul>
&lt;li>事件流，就是业务相对固定，只是数据在业务的规则下不断的变化。&lt;/li>
&lt;li>持续计算，适合购物网站等场景。&lt;/li>
&lt;/ul>
&lt;p>流失处理架构比上一代离线处理框架相比省掉了原有的 ETL/ELT 过程，数据流留过数据处理通道并进行实时处理与计算，处理结果通过消息的方式推送数据消费者。流式计算框架舍弃了大数据离线批量处理模式，只有很少的数据存储，所以数据保存周期非常短。如果有历史数据场景或很复杂历史数据参与计算的场景，实现起来难度就比较大。&lt;/p>
&lt;p>现在一些场景，会把流式计算的结果数据周期性地存到批处理的数据存储区域。如果有场景需要使用历史数据，流式计算框架会把保存的历史结果用更新的方式进行加载，再做进一步处理。&lt;/p>
&lt;h3 id="第三代-lambda-大数据架构">第三代 Lambda 大数据架构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325141204.png" alt="Lambda 技术架构整体" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Lambda 架构是由 Twitter 工程师南森·马茨（Nathan Marz）提出的，是一种经典的、实施广泛的技术架构。后来出现的其他大数据处理架构也是 Lambda 架构的优化或升级版。Lambda 架构有两条数据链路，一条兼顾处理批量、离线数据结构，一条是实时流式处理技术 。&lt;/p>
&lt;ul>
&lt;li>批量离线处理流在构建时大部分还是采用一些经典的大数据统计分析方法论，在保证数据一致性、完整性的同时还会对数据按照不同应用场景进行分层。&lt;/li>
&lt;li>实时流式处理主要是增量计算，也会跑一些机器学习模型等。为了保证数据的一致性， 实时流处理结果与批量处理结果会有一个合并动作。&lt;/li>
&lt;/ul>
&lt;p>Lambda 架构主要的组成是批处理、流式处理、数据服务层这三部分。&lt;/p>
&lt;ul>
&lt;li>批处理层(Bathchlayer)：Lambda 架构核心层之一，批处理接收过来的数据，并保存到相应的数据模型中，这一层的数据主题、模型设计的方法论是继承面向统计分析离线大数据中的。而且一般都会按照比较经典的 ODS、DWD、DWB、ST/ADM 的层次结构来划分。&lt;/li>
&lt;li>流式处理层(Speed Layer)：Lambda 另一个核心层，为了解决比如各场景下数据需要一边计算一边应用以及各种维度交叉、关联的事件流与持续计算的问题，计算结果在最后与批处理层的结果做合并。&lt;/li>
&lt;li>服务层(Serving layer)：这是 Lambda 架构的最后一层，服务层的职责是获取批处理和流处理的结果，向用户提供统一查询视图服务。&lt;/li>
&lt;/ul>
&lt;p>Lamabda 架构理念从出现到发展这么多年，优缺点非常明显。比如稳定与性能上的优势，ETL 处理计算利用晚上时间来做，能复用部分实时计算的资源。劣势，两套数据流因为结果要做合并，所有的算法要实现两次，一次是批处理、一次是实时计算，最终两个结果还得做合并显得会很复杂。&lt;/p>
&lt;h3 id="kappa-大数据架构">Kappa 大数据架构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325142150.png" alt="Kappa 大数据架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在 Lamadba 架构下需要维护两套的代码，为了解决这个问题，LinkedIn 公司的 Jay Kreps 结合实际经验与个人思考提出了 Kappa 架构。Kappa 架构核心是通过改进流式计算架构的计算、存储部分来解决全量的问题，使得实时计算、批处理可以共用一套代码。Kappa 架构认为对于历史数据的重复计算几率是很小的，即使需要，可以通过启用不同的实例的方式来做重复计算。其中 Kappa 的核心思想是：&lt;/p>
&lt;ul>
&lt;li>用 Kafka 或者类似 MQ 队列系统收集各种各样的数据，需要几天的数据量就保存几天。&lt;/li>
&lt;li>当需要全量重新计算时，重新起一个流计算实例，从头开始读取数据进行处理，并输出到一个新的结果存储中。&lt;/li>
&lt;li>当新的实例做完后，停止老的流计算实例，并把一些老的结果删除。&lt;/li>
&lt;/ul>
&lt;p>Kappa 架构的优点在于将实时和离线代码统一起来，方便维护而且统一了数据口径。Kappa 架构与 Lamabda 架构相比，其优缺点是：&lt;/p>
&lt;ul>
&lt;li>Lambda 架构需要维护两套跑在批处理和实时流上的代码，两个结果还需要做 merge， Kappa 架构下只维护一套代码，在需要时候才跑全量数据。&lt;/li>
&lt;li>Kappa 架构下可以同时启动很多实例来做重复计算，有利于算法模型调整优化与结果对比，Lamabda 架构下，代码调整比较复杂。所以 kappa 架构下，技术人员只需要维护一个框架就可以，成本很小。&lt;/li>
&lt;li>kappa 每次接入新的数据类型格式是需要定制开发接入程序，接入周期会变长。&lt;/li>
&lt;li>Kappa 这种架构过度依赖于 Redis、Hbase 服务，两种存储结构又不是满足全量数据存储的，用来做全量存储会显得浪费资源。&lt;/li>
&lt;/ul>
&lt;h3 id="unified-大数据架构">Unified 大数据架构&lt;/h3>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325142342.png" alt="Unified 大数据架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>“Unifield 架构则更激进，将机器学习和数据处理整合为一体，Unifield 在 Lambda 基础上进行升级，在流处理层新增了机器学习层。数据经过数据通道进入数据湖，新增了模型训练部分，并且将其在流式层进行使用。同时流式层不单使用模型，也包含着对模型的持续训练。”&lt;/p>
&lt;h3 id="iota-架构">IOTA 架构&lt;/h3>
&lt;p>IOTA 大数据架构是一种基于 AI 生态下的、全新的数据架构模式，这个概念由易观于 2018 年首次提出。IOTA 的整体思路是设定标准数据模型，通过边缘计算技术把所有的计算过程分散在数据产生、计算和查询过程当中，以统一的数据模型贯穿始终，从而提高整体的计算效率，同时满足计算的需要，可以使用各种 Ad-hoc Query 来查询底层数据。&lt;/p>
&lt;p>主要有几个特点：&lt;/p>
&lt;ul>
&lt;li>去 ETL 化：ETL 和相关开发一直是大数据处理的痛点，IOTA 架构通过 Common Data Model 的设计，专注在某一个具体领域的数据计算，从而可以从 SDK 端开始计算，中央端只做采集、建立索引和查询，提高整体数据分析的效率。&lt;/li>
&lt;li>Ad-hoc 即时查询：鉴于整体的计算流程机制，在手机端、智能 IOT 事件发生之时，就可以直接传送到云端进入 real time data 区，可以被前端的 Query Engine 来查询。此时用户可以使用各种各样的查询，直接查到前几秒发生的事件，而不用在等待 ETL 或者 Streaming 的数据研发和处理。&lt;/li>
&lt;li>边缘计算（Edge-Computing）：将过去统一到中央进行整体计算，分散到数据产生、存储和查询端，数据产生既符合 Common Data Model。同时，也给与 Realtime model feedback，让客户端传送数据的同时马上进行反馈，而不需要所有事件都要到中央端处理之后再进行下发。&lt;/li>
&lt;/ul>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>大数据架构的每一代的定义与出现是有必然性的， 当然没有一个严格上的时间区分点。直接给出一个每种架构比较：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>架构&lt;/strong>&lt;/th>
&lt;th>&lt;strong>优点&lt;/strong>&lt;/th>
&lt;th>&lt;strong>缺点&lt;/strong>&lt;/th>
&lt;th>&lt;strong>适用场景&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>离线大数据统计分析技术架构&lt;/td>
&lt;td>简单，易懂，对于 BI 系统来说，基本思想没有发生变化，变化的仅仅是技术选型，用大数据架构替换掉 BI 的组件。&lt;/td>
&lt;td>对于大数据来说，没有 BI 下如此完备的 Cube 架构，虽然目前有 kylin，但是 kylin 的局限性非常明显，远远没有 BI 下的 Cube 的灵活度和稳定度，因此对业务支撑的灵活度不够，所以对于存在大量报表，或者复杂的钻取的场景，需要太多的手工定制化，同时该架构依旧以批处理为主，缺乏实时的支撑。&lt;/td>
&lt;td>数据分析需求依旧以 BI 场景为主，但是因为数据量、性能等问题无法满足日常使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>流式架构&lt;/td>
&lt;td>没有臃肿的 ETL 过程，数据的实效性非常高。&lt;/td>
&lt;td>对于流式架构来说，不存在批处理，因此对于数据的重播和历史统计无法很好的支撑。对于离线分析仅仅支撑窗口之内的分析。&lt;/td>
&lt;td>预警，监控，对数据有有实时性要求的场景。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Lambda 架构&lt;/td>
&lt;td>既有实时又有离线，对于数据分析场景涵盖的非常到位。&lt;/td>
&lt;td>离线层和实时流虽然面临的场景不相同，但是其内部处理的逻辑却是相同，因此有大量荣誉和重复的模块存在。&lt;/td>
&lt;td>同时存在实时和离线需求的情况。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Kappa 架构&lt;/td>
&lt;td>Kappa 架构解决了 Lambda 架构里面的冗余部分，以数据可重播的超凡脱俗的思想进行了设计，整个架构非常简洁。&lt;/td>
&lt;td>虽然 Kappa 架构看起来简洁，但是实施难度相对较高，尤其是对于数据重播部分。&lt;/td>
&lt;td>和 Lambda 类似，改架构是针对 Lambda 的优化。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Unifield 架构&lt;/td>
&lt;td>Unifield 架构提供了一套数据分析和机器学习结合的架构方案，非常好的解决了机器学习如何与数据平台进行结合的问题。&lt;/td>
&lt;td>Unifield 架构实施复杂度更高，对于机器学习架构来说，从软件包到硬件部署都和数据分析平台有着非常大的差别，因此在实施过程中的难度系数更高。&lt;/td>
&lt;td>有着大量数据需要分析，同时对机器学习方便又有着非常大的需求或者有规划。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>IOTA 架构&lt;/td>
&lt;td>去 ETL 化、支持 Ad-hoc 即时查询和边缘计算。&lt;/td>
&lt;td>代码漏洞较多，通过收费方式向社区提供漏洞修复代码。&lt;/td>
&lt;td>IOTA 用于物联网设备，实现万物互联、系统自治。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="大数据处理技术栈">大数据处理技术栈&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325143204.png" alt="大数据处理技术栈" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>按照数据采集-传输-落地到存储层，再通过调度调起计算数据处理任务把整合结果数据存到数据仓库以及相关存储区域中。&lt;/li>
&lt;li>通过管理层/ide 进行数据管理或数据开发。&lt;/li>
&lt;li>通过 OLAP 、分析、算法、可视化、微服务层对外提供数据服务与数据场景化应用。&lt;/li>
&lt;/ul>
&lt;p>这个技术栈暂时没有按照没有按照批处理、流式技术的分类的角度来分类，稍微有点遗憾。&lt;/p></description></item><item><title>2022-一文读懂数据仓库、数据平台、数据中台、数据湖的概念和区别</title><link>https://ng-tech.icu/books/dataengineering-series/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2022-%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E6%95%B0%E6%8D%AE%E6%B9%96%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/dataengineering-series/1.%E5%A4%A7%E6%95%B0%E6%8D%AE%E4%BD%93%E7%B3%BB/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2022-%E4%B8%80%E6%96%87%E8%AF%BB%E6%87%82%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E4%B8%AD%E5%8F%B0%E6%95%B0%E6%8D%AE%E6%B9%96%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%8C%BA%E5%88%AB/</guid><description>&lt;h1 id="一文读懂数据仓库数据平台数据中台数据湖的概念和区别">一文读懂数据仓库、数据平台、数据中台、数据湖的概念和区别&lt;/h1>
&lt;h1 id="一数据仓库">一、数据仓库&lt;/h1>
&lt;h2 id="1-数据仓库概念">1. 数据仓库概念&lt;/h2>
&lt;p>数据仓库由比尔·恩门（Bill Inmon，数据仓库之父）于 1990 年提出，主要功能是将企业系统联机事务处理（OLTP）长期壁垒的大量数据，通过数据仓库理论支持所持有的数据存储结构，做有系统的分析整理。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325160922.png" alt="数据存储的演变" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>随着企业的发展，业务系统的数据不断激增，这些存储在企业业务数据库中（也就是关系型数据库 Oracle，Microsoft SQL Sever，MySQL 等）数据会随着时间的积累越来越多，会使业务数据库会有一定的负载，导致业务系统的运行效率低，且这些数据中有很大一部分是冷数据，而我们业务系统一般对我们近期的数据，也就是热数据调用的比较频繁，对冷数据使用频率较低。&lt;/p>
&lt;p>同时随着企业数据驱动业务概念的兴起，企业需要将各业务部门的业务数据提取出来进行数据分析与挖掘，辅助高层进行分析与决策，但各部门需求的数据种类千差万别，接口错综复杂，过多的数据查询脚本以及接口的接入导致业务数据库的稳定性降低。&lt;/p>
&lt;p>为了避免冷数据与历史数据的积压对我们业务数据库效能产生影响，企业需要定期将冷数据从业务数据库中转移出来存储到一个专门存放历史数据的仓库里面，各部门可以根据自身业务特性对外提供统一的数据服务，这个仓库就是数据仓库。&lt;/p>
&lt;h2 id="2-数据仓库特点">2. 数据仓库特点&lt;/h2>
&lt;p>数据仓库（Data Warehoese）的特点：面向主题的、集成的、稳定的、反映历史数据变化的。&lt;/p>
&lt;ul>
&lt;li>面向主题的：数据仓库是用来分析特点主题域的，所以说数据仓库是面向主题的。例如，电商行业的主题域通常分为交易域、会员域、商品域等。&lt;/li>
&lt;li>集成的：数据仓库集成了多个数据源，同一主题或产品相关数据可能来自不同的系统不同类型的数据库，日志文件等。&lt;/li>
&lt;li>稳定的：数据一旦进入数据仓库，则不可改变。数据仓库的历史数据是不应该被更新的，同时存储稳定性较强&lt;/li>
&lt;li>反映历史数据变化的：数据仓库保存了长期的历史数据，这点相对 OLTP 的数据库而言。因为性能考虑后者统筹保存近期的热数据。&lt;/li>
&lt;/ul>
&lt;h2 id="3-oltp-与-olap">3. OLTP 与 OLAP&lt;/h2>
&lt;p>数据处理大致可以分成两大类：联机事务处理 OLTP（on-line transaction processing）、联机分析处理 OLAP（On-Line Analytical Processing）。OLTP 是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。OLAP 是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161338.png" alt="OLTP 与 OLAP" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161429.png" alt="OLTP 与 OLAP 区别" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>OLTP 系统强调数据库内存效率，强调内存各种指标的命令率，绑定变量，并发操作等。OLAP 系统则强调数据分析，强调 SQL 执行市场，磁盘 I/O，分区等。OLAP 和数仓的关系是依赖互补的，一般以数据仓库作为基础，既从数据仓库中抽取出详细数据的一个子集并经过必要的聚集存储到 OLAP 存储中供数据分析工具读取。&lt;/p>
&lt;h2 id="4-数据仓库的作用">4. 数据仓库的作用&lt;/h2>
&lt;p>数据仓库将来自不同来源的结构化数据聚合起来，用于业务智能领域的比较和分析，数据仓库是包含多种数据的存储库，并且是高度建模的。如下图所示：各个系统的元数据通过 ETL 同步到操作性数据仓库 ODS 中，对 ODS 数据进行面向主题域建模形成 DW（数据仓库），DM 是针对某一个业务领域建立模型，具体用户（决策层）查看 DM 生成的报表。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161545.png" alt="ETL 数据切换" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>传统的数据仓库集成处理架构是 ETL，利用 ETL 平台的能力，E=从源数据库抽取数据，L=将数据清洗（不符合规则的数据）、转化（对表按照业务需求进行不同维度、不同颗粒度、不同业务规则计算进行统计），T=将加工好的表以增量、全量、不同时间加载到数据仓库。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161701.png" alt="什么是 ETL" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>大数据背景下的架构体系是 ELT 结构，其根据上层的应用需求，随时从数据中台中抽取想要的原始数据进行建模分析。ELT 是利用数据库的处理能力，E=从源数据库抽取数据，L=把数据加载到目标库的临时表中，T=对临时表中的数据进行转换，然后加载到目标库目标表中。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161737.png" alt="什么是 ELT" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>ELT 对比 ETL 的优势：&lt;/p>
&lt;ul>
&lt;li>资源利用率的提升：ELT 主要通过数据库引擎来实现系统的可扩展性（尤其是当数据加工过程在晚上时，可以充分利用数据库引擎的资源）。&lt;/li>
&lt;li>任务运行效率的提升：ELT 可以保持所有的数据始终在数据库当中，避免数据的加载和导出，从而保证效率，提高系统的可监控性。&lt;/li>
&lt;li>并行处理优化：ELT 可以根据数据的分布情况进行并行处理优化，并可以利用数据库的固有功能优化磁盘 I/O。&lt;/li>
&lt;li>可扩展性增强：ELT 的可扩展性取决于数据库引擎和其硬件服务器的可扩展性。&lt;/li>
&lt;li>性能优化：通过对相关数据库进行性能调优，ETL 过程获得 3 到 4 倍的效率提升一般不是特别困难。&lt;/li>
&lt;/ul>
&lt;p>数据仓库系统的作用能实现跨业务条线、跨系统的数据整合，为管理分析和业务决策提供统一的数据支持。数据仓库能够从根本上帮助你把公司的运营数据转化成为高价值的可以获取的信息（或知识），并且在恰当的时候通过恰当的方式把恰当的信息传递给恰当的人。以下图为例：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161829.png" alt="客户案例" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>数据仓库的作用主要体现在企业决策、分析、计划和响应以下几个方面：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161911.png" alt="数据仓库的主要作用" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>数据仓库针对实时数据处理和非结构化数据处理能力较弱，以及在业务在预警预测等方面应用有一定的限制。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325161933.png" alt="数据仓库上下架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="二数据平台">二、数据平台&lt;/h1>
&lt;h2 id="1-数据平台概念">1. 数据平台概念&lt;/h2>
&lt;p>大数据时代，数据平台一般被称之为大数据平台。&lt;/p>
&lt;ul>
&lt;li>狭义上的数据平台：是为了解决数据仓库不能处理非结构化数据和报表开发周期长的问题，所以先撇开业务需求、把企业所有的数据都抽取出来放到一起，成为一个大的数据集，其中有结构化数据、非结构化数据等。当业务方有需求的时候，再把他们需要的若干个小数据集单独提取出来，以数据集的形式提供给数据应用。&lt;/li>
&lt;li>广义的大数据平台：广义的大数据平台通常被赋予更多的使命，以处理海量数据存储、计算及不间断流数据实时计算、离线计算、智能推荐、交互式查询、数据湖构建等场景为主的一套基础设施。典型的包括基于 Hadoop 生态构建的大数据平台。提供易于部署及管理的 Hive、Spark、HBase、Flink、StarRocks、Iceberg、Alluxio 等开源大数据计算和存储引擎。&lt;/li>
&lt;/ul>
&lt;p>狭义的数据平台和传统的数据平台（数据仓库）功能一致，区别只是技术架构和数据容量方面的不同。广义上的大数据平台是数据湖的基座，提供易于部署和管理的泛 Hadoop 生态及其他存储计算引擎的 PaaS 平台，助力企业构建企业级数据湖技术架构。&lt;/p>
&lt;h1 id="三数据中台">三、数据中台&lt;/h1>
&lt;h2 id="1-数据中台概念">1. 数据中台概念&lt;/h2>
&lt;p>数据中台的起源：2015 年年中，马云带领阿里巴巴集团高管拜访了一家芬兰的小型游戏公司 Supercell。这家仅有不到 200 名员工的小型游戏公司竟创造了高达 15 亿美元的年税前利润！而 Supercell 之所以能够支持多个团队快速、敏捷地推出高质量的游戏作品，其强大的中台能力功不可没。&lt;/p>
&lt;p>因此，在拜访 Supercell 的旅程结束之后，马云决定对阿里巴巴的组织和系统架构进行整体调整，建立阿里产品技术和数据能力的强大中台，构建“大中台，小前台”的组织和业务体制。&lt;/p>
&lt;p>数据中台的主要目的：解决企业在发展过程中，由于数据激增与业务的扩大而出现的统计口径不一致、重复开发、指标开发需求响应慢、数据质量低、数据成本高等问题。通过一系列数据工具（元数据中心、数据指标中心、数仓模型中心、数据资产中心-资产质量/治理/安全、数据服务中心等），规范数据供应链的各个环节。&lt;/p>
&lt;h2 id="2-数据中台特点">2. 数据中台特点&lt;/h2>
&lt;p>数据中台特点：以一种标准的、安全的、可靠的、统一的、共享的、解耦的、服务化的方式支持前端数据的应用。&lt;/p>
&lt;h2 id="3-数据中台作用">3. 数据中台作用&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325162347.png" alt="阿里数据中台逻辑架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325162404.png" alt="数据中台产品能力图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>数据中台通过对企业内外部多源异构的数据采集、建设、管理、分析和应用，使数据对内优化管理提高业务价值，对外进行数据合作让业务价值得到释放，使之成为企业数据资产管理中枢。数据中台建立后，会形成数据 API 服务，为企业和客户提供高效各种数据服务。数据中台对一个企业的数字化转型和可持续发展起着至关重要的作用。数据中台为解耦而生，企业建设数据中台的最大意义就是应用与数据之间的解耦，这样企业就可以不受限制地按需构建满足业务需求的数据应用。&lt;/p>
&lt;p>构建了开放、灵活、可扩展的企业级统一数据管理和分析平台， 将企业内、外部数据随需关联，打破了数据的系统界限。利用大数据智能分析、数据可视化等技术，实现了数据共享、日常报表自动生成、快速和智能分析，满足企业各级部门之间的数据分析应用需求。&lt;/p>
&lt;p>深度挖掘数据价值，助力企业数字化转型落地。实现了数据的目录、模型、标准、认责、安全、可视化、共享等管理，实现数据集中存储、处理、分类与管理，建立大数据分析工具库、算法服务库，实现报表生成自动化、数据分析敏捷化、数据挖掘可视化，实现数据质量评估、落地管理流程。&lt;/p>
&lt;h1 id="四数据湖">四、数据湖&lt;/h1>
&lt;h2 id="1-数据湖概念">1. 数据湖概念&lt;/h2>
&lt;p>数据湖起源：数据湖的起源，应该追溯到 2010 年 10 月，由 Pentaho 的创始人兼 CTO， James Dixon 所提出，他提出的目的就当时历史背景来看，其实是为了推广自家产品 Pentaho。当时核心要解决的问题是传统数据仓库报表分析面临的两个问题：&lt;/p>
&lt;ul>
&lt;li>只使用部分属性，这些数据只能回答预先定义好(pre-determined)的问题。&lt;/li>
&lt;li>数据被聚合了，最低层级的细节丢失了，能回答的问题被限制了。&lt;/li>
&lt;/ul>
&lt;p>而我们当前所讨论的数据湖，已经远远超过了当初 James Dixon 所定义的数据湖，各厂商之间也对数据湖有了更多的不同定义。&lt;/p>
&lt;h3 id="1aws">1）AWS&lt;/h3>
&lt;p>A data lake is a centralized repository that allows you to store all your structured and unstructured data at any scale. You can store your data as-is, without having to first structure the data, and run different types of analytics—from dashboards and visualizations to big data processing, real-time analytics, and machine learning to guide better decisions.&lt;/p>
&lt;p>“数据湖是一个集中式存储库，允许您以任意规模存储所有结构化和非结构化数据。您可以按原样存储数据（无需先对数据进行结构化处理），并运行不同类型的分析– 从控制面板和可视化到大数据处理、实时分析和机器学习，以指导做出更好的决策。”&lt;/p>
&lt;h3 id="2微软">2）微软&lt;/h3>
&lt;p>Azure Data Lake includes all the capabilities required to make it easy for developers, data scientists, and analysts to store data of any size, shape, and speed, and do all types of processing and analytics across platforms and languages. It removes the complexities of ingesting and storing all of your data while making it faster to get up and running with batch, streaming, and interactive analytics.&lt;/p>
&lt;p>“Azure 的数据湖包括一切使得开发者、数据科学家、分析师能更简单的存储、处理数据的能力，这些能力使得用户可以存储任意规模、任意类型、任意产生速度的数据，并且可以跨平台、跨语言的做所有类型的分析和处理。数据湖在能帮助用户加速应用数据的同时，消除了数据采集和存储的复杂性，同时也能支持批处理、流式计算、交互式分析等。”&lt;/p>
&lt;h3 id="3阿里云">3）阿里云&lt;/h3>
&lt;p>“数据湖是统一存储池，可对接多种数据输入方式，您可以存储任意规模的结构化、半结构化、非结构化数据。数据湖可无缝对接多种计算分析平台，根据业务场景不同，可以选择相应的计算引擎对数据湖中存储的数据进行数据处理与分析，从而打破孤岛，挖掘业务价值。”&lt;/p>
&lt;h2 id="2-数据湖内容">2. 数据湖内容&lt;/h2>
&lt;p>数据湖中包括来自于关系型数据库中的结构化数据（行和列）、半结构化数据（如 CSV、日志、XML、JSON）、非结构化数据（如 email、文档、PDF 等）和 二进制数据（如图像、音频、视频）。&lt;/p>
&lt;h2 id="3-数据湖的特点">3. 数据湖的特点&lt;/h2>
&lt;ul>
&lt;li>统一的数据存储，存放原始的数据。&lt;/li>
&lt;li>支持任意结构的数据存储，包括结构化、半结构化、非结构化。&lt;/li>
&lt;li>支持多种计算分析，适用多种应用场景。&lt;/li>
&lt;li>支持任意规模的数据存储与计算能力。&lt;/li>
&lt;li>目标都是为了更好，更快的发现数据价值。&lt;/li>
&lt;/ul>
&lt;h2 id="4-数据湖能够解决的问题">4. 数据湖能够解决的问题&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325162849.png" alt="数据湖整体架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>最底下是分布式文件系统；&lt;/li>
&lt;li>第二层是数据加速层。数据湖架构是一个存储计算彻底分离的架构，如果所有的数据访问都远程读取文件系统上的数据，那么性能和成本开销都很大。如果能把经常访问到的一些热点数据缓存在计算节点本地，这就非常自然的实现了冷热分离，一方面能收获到不错的本地读取性能，另一方面还节省了远程访问的带宽。&lt;/li>
&lt;li>第三层就是 Table format 层，主要是把一批数据文件封装成一个有业务意义的 table，提供 ACID、snapshot、schema、partition 等表级别的语义。&lt;/li>
&lt;li>最上层就是不同计算场景的计算引擎了。开源的一般有 Spark、Flink、Hive、Presto、Hive MR 等，这一批计算引擎是可以同时访问同一张数据湖的表的。&lt;/li>
&lt;/ul>
&lt;p>数据分散，存储散乱，形成数据孤岛，无法联合数据发现更多价值。这方面来讲，其实数据湖要解决的与数据仓库是类似的问题，但又有所不同，因为它的定义里支持对半结构化、非结构化数据的管理。而传统数据仓库仅能解决结构化数据的统一管理。在这个万物互联的时代，数据的来源多种多样，随着不同应用场景，产出的数据格式也是越来越丰富，不能再仅仅局限于结构化数据。如何统一存储这些数据，就是迫切需要解决的问题。&lt;/p>
&lt;p>数据库或数据仓库的存储受限于实现原理及硬件条件，导致存储海量数据时成本过高，而为了解决这类问题就有了 HDFS/对象存储这类技术方案。数据湖场景下如果使用这类存储成本较低的技术架构，将会为企业大大节省成本。结合生命周期管理的能力，可以更好的为湖内数据分层（冷温热存放在不同的存储介质：HDD、SSD、MEM），不用纠结在是保留数据还是删除数据节省成本的问题。&lt;/p>
&lt;p>越来越多种类的数据，意味着越来越多的分析方式，传统的 SQL 方式已经无法满足分析的需求，如何通过各种语言自定义贴近自己业务的代码，如何通过机器学习挖掘更多的数据价值。&lt;/p>
&lt;p>传统数据库等在海量数据下，如规模到 PB 级别，因为技术架构的原因，已经无法满足扩展的要求或者扩展成本极高，而这种情况下通过数据湖架构下的扩展技术能力，实现成本为 0，硬件成本也可控。业务模型不定，无法预先建模。传统数据库和数据仓库，都是 Schema-on-Write 的模式，需要提前定义 Schema 信息。而在数据湖场景下，可以先保存数据，后续待分析时，再发现 Schema，也就是 Schema-on-Read。&lt;/p>
&lt;h1 id="对比">对比&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230325163042.png" alt="1. 数据仓库 VS 数据中台 VS 数据湖" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>数据中台、数据仓库和数据湖没有直接的关系；&lt;/li>
&lt;li>数据中台、数据平台、数据仓库和数据湖在某个维度上为业务产生价值的形式有不同的侧重；&lt;/li>
&lt;li>数据仓库是数据驱动业务的逻辑概念，用于支持管理决策分析，为业务提供服务的主要方式是报表；&lt;/li>
&lt;li>数据中台是企业级的逻辑概念，体现企业数据向业务价值转化的能力，为业务提供服务的主要方式是数据 API；&lt;/li>
&lt;li>数据湖是企业级的技术逻辑概念，体现企业级数据湖架构加速数据向业务价值转化的能力，为业务提供服务的主要方式是原始数据；&lt;/li>
&lt;li>数据中台、数据湖距离业务更近，能够更快速的响应业务和应用开发需求，从而为业务提供速度更快的服务；&lt;/li>
&lt;li>数据中台可以建立在数据仓库和数据平台之上，是加速企业从数据到业务价值的过程的中间层；&lt;/li>
&lt;/ul></description></item></channel></rss>