<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>03.集群与高可用 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/messagequeue-notes/04.rocketmq/03.%E9%9B%86%E7%BE%A4%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/</link><atom:link href="https://ng-tech.icu/books/messagequeue-notes/04.rocketmq/03.%E9%9B%86%E7%BE%A4%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/index.xml" rel="self" type="application/rss+xml"/><description>03.集群与高可用</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>03.集群与高可用</title><link>https://ng-tech.icu/books/messagequeue-notes/04.rocketmq/03.%E9%9B%86%E7%BE%A4%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/</link></image><item><title>集群与高可用</title><link>https://ng-tech.icu/books/messagequeue-notes/04.rocketmq/03.%E9%9B%86%E7%BE%A4%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/%E9%9B%86%E7%BE%A4%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/messagequeue-notes/04.rocketmq/03.%E9%9B%86%E7%BE%A4%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/%E9%9B%86%E7%BE%A4%E4%B8%8E%E9%AB%98%E5%8F%AF%E7%94%A8/</guid><description>&lt;h1 id="集群与高可用">集群与高可用&lt;/h1>
&lt;h1 id="负载均衡">负载均衡&lt;/h1>
&lt;p>Producer 端的负载均衡实际是对于 Broker 的选择，目前包含以下两种：&lt;/p>
&lt;ul>
&lt;li>Round Robin 容错：即按照队列列表轮询，当上一次请求的 Broker 出现异常时，本次请求会通过简单容错机制进行跳过，这是默认的策略。&lt;/li>
&lt;li>RT 排序与延时容错：维护一个 Map，统计发送消息的每个 broker 的 RT，优先从 RT 较低的几个 broker 中选择，当某个 broker 出现异常时，通过延时容错机制，使其在一定时间内更难被选中。&lt;/li>
&lt;/ul></description></item></channel></rss>