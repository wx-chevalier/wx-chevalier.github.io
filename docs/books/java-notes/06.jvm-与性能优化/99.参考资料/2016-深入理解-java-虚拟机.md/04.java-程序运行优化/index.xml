<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>04.Java 程序运行优化 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2016-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-java-%E8%99%9A%E6%8B%9F%E6%9C%BA.md/04.java-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E4%BC%98%E5%8C%96/</link>
      <atom:link href="https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2016-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-java-%E8%99%9A%E6%8B%9F%E6%9C%BA.md/04.java-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <description>04.Java 程序运行优化</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>04.Java 程序运行优化</title>
      <link>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2016-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-java-%E8%99%9A%E6%8B%9F%E6%9C%BA.md/04.java-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E4%BC%98%E5%8C%96/</link>
    </image>
    
    <item>
      <title>00.Java 运行期优化</title>
      <link>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2016-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-java-%E8%99%9A%E6%8B%9F%E6%9C%BA.md/04.java-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E4%BC%98%E5%8C%96/00.java-%E8%BF%90%E8%A1%8C%E6%9C%9F%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2016-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-java-%E8%99%9A%E6%8B%9F%E6%9C%BA.md/04.java-%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C%E4%BC%98%E5%8C%96/00.java-%E8%BF%90%E8%A1%8C%E6%9C%9F%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;h1 id=&#34;运行期优化&#34;&gt;运行期优化&lt;/h1&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/book/understanding-the-jvm/%e8%bf%90%e8%a1%8c%e6%9c%9f%e4%bc%98%e5%8c%96.png&#34; alt=&#34;运行期优化.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们知道，Java 是解释执行的，可是解释执行毕竟还是有点慢的，这也使得 Java 一直被认为是效率低下的语言……，不过随着即时编译技术的发展，Java 的运行速度得到了很大的提升，在本篇文章中，我们将会对 Java 的运行期优化，也就是即时编译 (Just In Time, JIT) 时进行的优化进行详细的讲解，我们先来看看什么是即时编译。&lt;/p&gt;
&lt;!-- TOC --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%bf%90%e8%a1%8c%e6%9c%9f%e4%bc%98%e5%8c%96&#34;&gt;运行期优化&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%8d%b3%e6%97%b6%e7%bc%96%e8%af%91&#34;&gt;即时编译&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hotspot-%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%86%85%e7%9a%84%e5%8d%b3%e6%97%b6%e7%bc%96%e8%af%91%e5%99%a8%e8%bf%90%e4%bd%9c%e8%bf%87%e7%a8%8b&#34;&gt;HotSpot 虚拟机内的即时编译器运作过程&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%a6%81%e4%bd%bf%e7%94%a8%e8%a7%a3%e9%87%8a%e5%99%a8%e4%b8%8e%e7%bc%96%e8%af%91%e5%99%a8%e5%b9%b6%e5%ad%98%e7%9a%84%e6%9e%b6%e6%9e%84&#34;&gt;为什么要使用解释器与编译器并存的架构？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%b8%ba%e4%bb%80%e4%b9%88%e8%99%9a%e6%8b%9f%e6%9c%ba%e8%a6%81%e5%ae%9e%e7%8e%b0%e4%b8%a4%e4%b8%aa%e4%b8%8d%e5%90%8c%e7%9a%84-jit-%e7%bc%96%e8%af%91%e5%99%a8&#34;&gt;为什么虚拟机要实现两个不同的 JIT 编译器？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e8%99%9a%e6%8b%9f%e6%9c%ba%e7%9a%84%e5%88%86%e5%b1%82%e7%bc%96%e8%af%91&#34;&gt;什么是虚拟机的分层编译？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%a6%82%e4%bd%95%e5%88%a4%e6%96%ad%e7%83%ad%e7%82%b9%e4%bb%a3%e7%a0%81%e8%a7%a6%e5%8f%91%e7%bc%96%e8%af%91&#34;&gt;如何判断热点代码，触发编译？&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af%e7%83%ad%e7%82%b9%e4%bb%a3%e7%a0%81&#34;&gt;什么是热点代码？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%bb%80%e4%b9%88%e6%98%af-%e5%a4%9a%e6%ac%a1-%e6%89%a7%e8%a1%8c&#34;&gt;什么是 “多次” 执行？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hotspot-%e4%b8%ad%e6%af%8f%e4%b8%aa%e6%96%b9%e6%b3%95%e7%9a%84-2-%e4%b8%aa%e8%ae%a1%e6%95%b0%e5%99%a8&#34;&gt;HotSpot 中每个方法的 2 个计数器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hotspot-%e7%83%ad%e7%82%b9%e4%bb%a3%e7%a0%81%e6%8e%a2%e6%b5%8b%e6%b5%81%e7%a8%8b&#34;&gt;HotSpot 热点代码探测流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%83%ad%e7%82%b9%e4%bb%a3%e7%a0%81%e7%bc%96%e8%af%91%e7%9a%84%e8%bf%87%e7%a8%8b&#34;&gt;热点代码编译的过程？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e7%bb%8f%e5%85%b8%e4%bc%98%e5%8c%96%e6%8a%80%e6%9c%af%e4%bb%8b%e7%bb%8d&#34;&gt;经典优化技术介绍&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%85%ac%e5%85%b1%e5%ad%90%e8%a1%a8%e8%be%be%e5%bc%8f%e6%b6%88%e9%99%a4%e8%af%ad%e8%a8%80%e6%97%a0%e5%85%b3&#34;&gt;公共子表达式消除【语言无关】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%95%b0%e7%bb%84%e8%8c%83%e5%9b%b4%e6%a3%80%e6%9f%a5%e6%b6%88%e9%99%a4%e8%af%ad%e8%a8%80%e7%9b%b8%e5%85%b3&#34;&gt;数组范围检查消除【语言相关】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e6%96%b9%e6%b3%95%e5%86%85%e8%81%94%e6%9c%80%e9%87%8d%e8%a6%81&#34;&gt;方法内联【最重要】&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e9%80%83%e9%80%b8%e5%88%86%e6%9e%90%e6%9c%80%e5%89%8d%e6%b2%bf&#34;&gt;逃逸分析【最前沿】&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%9f%ba%e6%9c%ac%e8%a1%8c%e4%b8%ba&#34;&gt;基本行为&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e5%af%b9%e4%ba%8e%e4%b8%8d%e4%bc%9a%e9%80%83%e9%80%b8%e5%88%b0%e6%96%b9%e6%b3%95%e6%88%96%e7%ba%bf%e7%a8%8b%e5%a4%96%e7%9a%84%e5%af%b9%e8%b1%a1%e8%83%bd%e8%bf%9b%e8%a1%8c%e4%bc%98%e5%8c%96&#34;&gt;对于不会逃逸到方法或线程外的对象能进行优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e8%99%9a%e6%8b%9f%e6%9c%ba%e5%8f%82%e6%95%b0&#34;&gt;虚拟机参数&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%e4%b8%80%e4%b8%aa%e4%bc%98%e5%8c%96%e7%9a%84%e4%be%8b%e5%ad%90&#34;&gt;一个优化的例子&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- /TOC --&gt;
&lt;h2 id=&#34;即时编译&#34;&gt;即时编译&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;什么是即时编译？&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当虚拟机发现某个方法或某段代码运行的特别频繁时，会把这段代码认为成热点代码；&lt;/li&gt;
&lt;li&gt;在运行时，虚拟机会将这段代码编译成平台相关的机器码，并进行各种层次的优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;hotspot-虚拟机内的即时编译器运作过程&#34;&gt;HotSpot 虚拟机内的即时编译器运作过程&lt;/h2&gt;
&lt;p&gt;我们主要通过以下 5 个问题来了解 HotSpot 虚拟机的即时编译器。&lt;/p&gt;
&lt;h3 id=&#34;为什么要使用解释器与编译器并存的架构&#34;&gt;为什么要使用解释器与编译器并存的架构？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;解释器的优点：可以提高程序的响应速度（省去了编译的时间），并且节约内存。&lt;/li&gt;
&lt;li&gt;编译器的优点：可以提高执行效率。&lt;/li&gt;
&lt;li&gt;虚拟机参数设置：
&lt;ul&gt;
&lt;li&gt;强制运行于解析模式：&lt;code&gt;-Xint&lt;/code&gt;，编译器完全不工作；&lt;/li&gt;
&lt;li&gt;强制运行于编译模式：&lt;code&gt;-Xcomp&lt;/code&gt;，当编译器编译失败时，解释执行还是会介入的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;为什么虚拟机要实现两个不同的-jit-编译器&#34;&gt;为什么虚拟机要实现两个不同的 JIT 编译器？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Client Compiler（C1）：不激进优化；&lt;/li&gt;
&lt;li&gt;Server Compiler（C2）：激进优化，如果激进优化不成立，再退回为解释执行或者 C1 编译器执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;什么是虚拟机的分层编译&#34;&gt;什么是虚拟机的分层编译？&lt;/h3&gt;
&lt;p&gt;分层编译就是根据编译器编译、优化的规模与耗时，划分出不同的编译层次，在代码运行的过程中，可以动态的选择将某一部分代码片段提升一个编译层次或者降低一个编译层次。&lt;/p&gt;
&lt;p&gt;C1 与 C2 编译器会同时工作，许多代码可能会被多次编译。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt; 在程序的启动响应时间和运行效率间达到平衡。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编译层次的划分：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第 0 层：解释执行，不开启性能监控；&lt;/li&gt;
&lt;li&gt;第 1 层：将字节编译为机器码，但不进行激进优化，有必要时会加入性能监控；&lt;/li&gt;
&lt;li&gt;第 2 层及以上：将字节编译为机器码，会根据性能监控信息进行激进优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;如何判断热点代码触发编译&#34;&gt;如何判断热点代码，触发编译？&lt;/h3&gt;
&lt;h4 id=&#34;什么是热点代码&#34;&gt;什么是热点代码？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;被多次调用的方法；&lt;/li&gt;
&lt;li&gt;被多次执行的循环体；
&lt;ul&gt;
&lt;li&gt;虽然被判断为热点代码的是循环体，不过因为虚拟机的即时编译是以方法为单位的，所以编译器还是会将循环体所在的方法整个作为编译对象。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们发现，判断热点代码的一个要点就是： &lt;strong&gt;多次执行&lt;/strong&gt; 。那么虚拟机是如何知道一个方法或者一个循环体被多次执行的呢？&lt;/p&gt;
&lt;h4 id=&#34;什么是-多次-执行&#34;&gt;什么是 “多次” 执行？&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;基于采样的热点探测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机周期检查各个线程的栈顶，如果发现一个方法经常出现在栈顶，则该方法为热点方法。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点：&lt;/strong&gt; 容易获取方法的调用关系，且简单高效。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 无法精准的判断一个方法的热度，并且容易受到线程阻塞的影响，如果一个方法由于它所在的线程被阻塞的缘故而一直出现在栈顶，我们并不能认为这个方法被调用的十分频繁。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;基于计数器的热点探测&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;虚拟机为每一个方法（或代码块）建立一个计数器，一旦执行次数超过一定阈值，就将其判为热点代码。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;优点：&lt;/strong&gt; 精确严谨。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点：&lt;/strong&gt; 不能直接获取方法的调用关系，且实现复杂。&lt;/li&gt;
&lt;li&gt;HotSpot 使用的是这个，并且还为每个方法建立了两个计数器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hotspot-中每个方法的-2-个计数器&#34;&gt;HotSpot 中每个方法的 2 个计数器&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;方法调用计数器&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;统计方法被调用的次数，处理多次调用的方法的。&lt;/li&gt;
&lt;li&gt;默认统计的不是方法调用的绝对次数，而是方法在一段时间内被调用的次数，如果超过这个时间限制还没有达到判为热点代码的阈值，则该方法的调用计数器值减半。
&lt;ul&gt;
&lt;li&gt;关闭热度衰减：&lt;code&gt;-XX: -UseCounterDecay&lt;/code&gt;（此时方法计数器统计的是方法被调用的绝对次数）；&lt;/li&gt;
&lt;li&gt;设置半衰期时间：&lt;code&gt;-XX: CounterHalfLifeTime&lt;/code&gt;（单位是秒）；&lt;/li&gt;
&lt;li&gt;热度衰减过程是在 GC 时顺便进行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;回边计数器&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;统计一个方法中 “回边” 的次数，处理多次执行的循环体的。
&lt;ul&gt;
&lt;li&gt;回边：在字节码中遇到控制流向后跳转的指令（不是所有循环体都是回边，空循环体是自己跳向自己，没有向后跳，不算回边）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;调整回边计数器阈值：&lt;code&gt;-XX: OnStackReplacePercentage&lt;/code&gt;（OSR 比率）
&lt;ul&gt;
&lt;li&gt;Client 模式：&lt;code&gt;回边计数器的阈值 = 方法调用计数器阈值 * OSR比率 / 100&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;Server 模式：&lt;code&gt;回边计数器的阈值 = 方法调用计数器阈值 * ( OSR比率 - 解释器监控比率 ) / 100&lt;/code&gt;；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hotspot-热点代码探测流程&#34;&gt;HotSpot 热点代码探测流程&lt;/h4&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/book/understanding-the-jvm/%e5%9f%ba%e4%ba%8e%e8%ae%a1%e6%95%b0%e5%99%a8%e7%9a%84%e7%83%ad%e7%82%b9%e4%bb%a3%e7%a0%81%e6%8e%a2%e6%b5%8b%e6%b5%81%e7%a8%8b.png&#34; alt=&#34;基于计数器的热点代码探测流程.png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;热点代码编译的过程&#34;&gt;热点代码编译的过程？&lt;/h3&gt;
&lt;p&gt;虚拟机在代码编译未完成时会按照解释方式继续执行，编译动作在后台的编译线程执行。&lt;/p&gt;
&lt;p&gt;禁止后台编译：&lt;code&gt;-XX: -BackgroundCompilation&lt;/code&gt;，打开后这个开关参数后，交编译请求的线程会等待编译完成，然后执行编译器输出的本地代码。&lt;/p&gt;
&lt;h2 id=&#34;经典优化技术介绍&#34;&gt;经典优化技术介绍&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Content：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;公共子表达式消除【语言无关】&lt;/li&gt;
&lt;li&gt;数组范围检查消除【语言相关】&lt;/li&gt;
&lt;li&gt;方法内联【最重要】&lt;/li&gt;
&lt;li&gt;逃逸分析【最前沿】&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;公共子表达式消除语言无关&#34;&gt;公共子表达式消除【语言无关】&lt;/h3&gt;
&lt;p&gt;如果一个表达式 E 已经计算过了，并且从先前的计算到现在，E 中所有变量值都没有发生变化，则 E 为公共子表达式，无需再次计算，直接用之前的结果替换。&lt;/p&gt;
&lt;h3 id=&#34;数组范围检查消除语言相关&#34;&gt;数组范围检查消除【语言相关】&lt;/h3&gt;
&lt;p&gt;在循环中使用循环变量访问数组，如果可以判断循环变量的范围在数组的索引范围内，则可以消除整个循环的数组范围检查&lt;/p&gt;
&lt;h3 id=&#34;方法内联最重要&#34;&gt;方法内联【最重要】&lt;/h3&gt;
&lt;p&gt;目的是：去除方法调用的成本（如建立栈帧等），并为其他优化建立良好的基础，所以一般将方法内两放在优化序列最前端，因为它对其他优化有帮助。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;类型继承关系分析（Class Hierarchy Analysis，CHA）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;用于确定在目前已加载的类中，某个接口是否有多于一种的实现，某个类是否存在子类、子类是否为抽象类等。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;对于非虚方法：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;直接进行内联，其调用方法的版本在编译时已经确定，是根据变量的静态类型决定的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对于虚方法：&lt;/strong&gt; （激进优化，要预留“逃生门”）
&lt;ul&gt;
&lt;li&gt;向 CHA 查询此方法在当前程序下是否有多个目标可选择；
&lt;ul&gt;
&lt;li&gt;只有一个目标版本：
&lt;ul&gt;
&lt;li&gt;先对这唯一的目标进行内联；&lt;/li&gt;
&lt;li&gt;如果之后的执行中，虚拟机没有加载到会令这个方法接收者的继承关系发生改变的新类，则该内联代码可以一直使用；&lt;/li&gt;
&lt;li&gt;如果加载到导致继承关系发生变化的新类，就抛弃已编译的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;有多个目标版本：
&lt;ul&gt;
&lt;li&gt;使用内联缓存，未发生方法调用前，内联缓存为空；&lt;/li&gt;
&lt;li&gt;第一次调用发生后，记录调用方法的对象的版本信息；&lt;/li&gt;
&lt;li&gt;之后的每次调用都要先与内联缓存中的对象版本信息进行比较；
&lt;ul&gt;
&lt;li&gt;版本信息一样，继续使用内联代码；&lt;/li&gt;
&lt;li&gt;版本信息不一样，说明程序使用了虚方法的多态特性，这时取消内联，查找虚方法进行方法分派。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;逃逸分析最前沿&#34;&gt;逃逸分析【最前沿】&lt;/h3&gt;
&lt;h4 id=&#34;基本行为&#34;&gt;基本行为&lt;/h4&gt;
&lt;p&gt;分析对象的作用域，看它有没有能在当前作用域之外使用：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法逃逸：对象在方法中定义之后，能被外部方法引用，如作为参数传递到了其他方法中。&lt;/li&gt;
&lt;li&gt;线程逃逸：赋值给 static 变量，或可以在其他线程中访问的实例变量。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;对于不会逃逸到方法或线程外的对象能进行优化&#34;&gt;对于不会逃逸到方法或线程外的对象能进行优化&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;栈上分配：&lt;/strong&gt; 对于不会逃逸到方法外的对象，可以在栈上分配内存，这样这个对象所占用的空间可以随栈帧出栈而销毁，减小 GC 的压力。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标量替换（重要）：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;标量：基本数据类型和 reference。&lt;/li&gt;
&lt;li&gt;不创建对象，而是将对象拆分成一个一个标量，然后直接在栈上分配，是栈上分配的一种实现方式。&lt;/li&gt;
&lt;li&gt;HotSpot 使用的是标量替换而不是栈上分配，因为实现栈上分配需要更改大量假设了 “对象只能在堆中分配” 的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;锁消除：&lt;/strong&gt; 不会逃逸到线程外的方法不需要进行同步。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;虚拟机参数&#34;&gt;虚拟机参数&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;开启逃逸分析：&lt;code&gt;-XX: +DoEscapeAnalysis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开启标量替换：&lt;code&gt;-XX: +EliminateAnalysis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开启锁消除：&lt;code&gt;-XX: +EliminateLocks&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看分析结果：&lt;code&gt;-XX: PrintEscapeAnalysis&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;查看标量替换情况：&lt;code&gt;-XX: PrintEliminateAllocations&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;一个优化的例子&#34;&gt;一个优化的例子&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;原始代码：&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// ...do stuff...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第一步优化：&lt;/strong&gt; 方法内联（一般放在优化序列最前端，因为对其他优化有帮助）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去除方法调用的成本（如建立栈帧等）&lt;/li&gt;
&lt;li&gt;为其他优化建立良好的基础&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// ...do stuff...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第二步优化：&lt;/strong&gt; 公共子表达式消除&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// ...do stuff...  // 因为这部分并没有改变 b.value 的值
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;// 如果把 b.value 看成一个表达式，就是公共表达式消除
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// 把这一步的 b.value 替换成 y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第三步优化：&lt;/strong&gt; 复写传播&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// ...do stuff...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// z 变量与以相同，完全没有必要使用一个新的额外变量
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                       &lt;span class=&#34;c1&#34;&gt;// 所以将 z 替换为 y
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;第四步优化：&lt;/strong&gt; 无用代码消除&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;无用代码：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;永远不会执行的代码&lt;/li&gt;
&lt;li&gt;完全没有意义的代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// ...do stuff...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// y = y; 这句没有意义的，去除
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
