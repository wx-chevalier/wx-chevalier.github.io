<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>99.参考资料 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03.%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <atom:link href="https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03.%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml" />
    <description>99.参考资料</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>99.参考资料</title>
      <link>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03.%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
    </image>
    
    <item>
      <title>2020-heibaiying-JVM 性能监控之可视化工具</title>
      <link>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03.%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-heibaiying-jvm-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B9%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03.%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-heibaiying-jvm-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B9%8B%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h1 id=&#34;jvm-性能监控之可视化工具&#34;&gt;JVM 性能监控之可视化工具&lt;/h1&gt;
&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;在 JDK 安装目录的 &lt;code&gt;bin&lt;/code&gt; 文件夹下，除了提供有命令行监控工具外，还提供了几种可视化的监控工具，以方便用户直观地了解虚拟机的运行状态。常用的可视化监控工具如下：&lt;/p&gt;
&lt;h2 id=&#34;二jconsole&#34;&gt;二、JConsole&lt;/h2&gt;
&lt;h3 id=&#34;21-简介&#34;&gt;2.1 简介&lt;/h3&gt;
&lt;p&gt;JConsole（Java Monitoring and Management Console）是一款基于 JMX（Java Manage-ment Extensions）的可视化监视工具。它的主要功能是通过 JMX 的 MBean（Managed Bean）对系统信息进行收集和动态调整系统参数。JMX（Java Management Extensions）是一个为应用程序、设备、系统等植入管理功能的框架，通常用于监控系统的运行状态或管理系统的部分功能。&lt;/p&gt;
&lt;h3 id=&#34;22-使用&#34;&gt;2.2 使用&lt;/h3&gt;
&lt;p&gt;打开位于 bin 目录下的 &lt;code&gt;jconsole&lt;/code&gt; 程序后，它会自动扫描当前主机上的所有 JVM 进程：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jconsole-start.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;选中需要监控的进程后，点击连接，即可进入监控界面。监控界面包含了 &lt;em&gt;概览&lt;/em&gt;、&lt;em&gt;内存&lt;/em&gt;、&lt;em&gt;线程&lt;/em&gt;、&lt;em&gt;类&lt;/em&gt;、&lt;em&gt;VM 概要&lt;/em&gt;、&lt;em&gt;MBean&lt;/em&gt; 六个选项卡。其中概览界面显示的是 &lt;em&gt;内存&lt;/em&gt;、&lt;em&gt;线程&lt;/em&gt;、&lt;em&gt;类&lt;/em&gt; 等三个选项卡界面的概览信息，如下所示：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jconsole-概览.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;而内存界面主要用于显示堆和非堆上各个区域的使用量：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jconsole-内存.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;线程界面内主要显示各个线程的堆栈信息，最下角有一个 &lt;strong&gt;检测死锁&lt;/strong&gt; 按钮，点击后如果检测到死锁存在，则在下部的线程选项卡旁边会出现死锁选项卡：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jconsole-检测死锁.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;点击死锁选项卡则可以看到造成死锁的线程：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jconsole-死锁.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;最后的 &lt;strong&gt;类&lt;/strong&gt; 选项卡主要用于显示当前已加载和已卸载的类的数量。而 &lt;strong&gt;VM 概要&lt;/strong&gt; 选项卡则主要用于显示虚拟机的相关参数，如下所示：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jconsole-概要.png&#34;/&gt; &lt;/div&gt;
&lt;h2 id=&#34;三visualvm&#34;&gt;三、VisualVM&lt;/h2&gt;
&lt;h3 id=&#34;31-简介&#34;&gt;3.1 简介&lt;/h3&gt;
&lt;p&gt;VisualVM（All-in-One Java Troubleshooting Tool）是 Oracle 提供的功能最强大的运行监视和故障处理程序之一， 它除了支持常规的运行监视、故障处理等功能外，还能用于性能分析（Profiling）。同时因为 VisualVM 是基于 NetBeans 平台的开发工具，所以它还支持通过插件来进行功能的拓展。VisualVM 的主要功能如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示虚拟机进程及其配置信息、环境信息（与 jps、jinfo 功能类似）；&lt;/li&gt;
&lt;li&gt;监视应用程序的处理器、垃圾收集、堆、方法区以及线程的信息（与 jstat、jstack 功能类似）；&lt;/li&gt;
&lt;li&gt;dump 以及分析堆转储快照（与 jmap、jhat 功能类似）；&lt;/li&gt;
&lt;li&gt;方法级的程序运行性能分析，找出被调用最多、运行时间最长的方法；&lt;/li&gt;
&lt;li&gt;离线程序快照：可以收集程序的运行时配置、线程 dump、内存 dump 等信息来建立快照。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-使用&#34;&gt;3.2 使用&lt;/h3&gt;
&lt;p&gt;打开位于 bin 目录下的 &lt;code&gt;jvisualvm&lt;/code&gt; 程序， 它会自动扫描当前主机上的所有 JVM 进程：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;点击需要监控的进程后，右侧即会显示相关的监控信息：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-监视.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;&lt;strong&gt;1. 堆 Dump&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在监控界面点击按钮可以 &lt;strong&gt;执行垃圾回收&lt;/strong&gt; 或者 &lt;strong&gt;堆 Dump&lt;/strong&gt; 。进行堆 Dump 后，还会显示其分析结果：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-堆dump.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;&lt;strong&gt;2. 线程 Dump&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在线程界面可以查看所有线程的状态，如果出现死锁，该界面还会进行提示：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-线程.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;此时可以进行 &lt;strong&gt;线程 Dump&lt;/strong&gt; 来获取具体的线程信息，效果和 jstack 命令类似：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-dump.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;&lt;strong&gt;3. 性能分析&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Profiler 界面，可以进行 CPU 和 内存的性能分析。要开始性能分析，需要先选择 &lt;strong&gt;CPU&lt;/strong&gt; 或 &lt;strong&gt;内存&lt;/strong&gt; 按钮中的一个，VisualVM 将会开始记录应用程序执行过的所有方法：如果是进行的是 CPU 执行时间分析，将会统计每个方法的执行次数、执行耗时；如果是内存分析，则会统计每个方法关联的对象数以及这些对象所占的空间。想要结束性能分析，点击停止按钮即可：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-性能分析.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;&lt;strong&gt;4. Visual GC&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Visual GC 面板默认是不显示的，需要通过插件进行扩展。它会实时监控虚拟机的状态，在功能上类似于 jstat 命令：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-gc.png&#34;/&gt; &lt;/div&gt;
&lt;h3 id=&#34;33-安装插件&#34;&gt;3.3 安装插件&lt;/h3&gt;
&lt;p&gt;在主界面，点击 &lt;strong&gt;工具 =&amp;gt; 插件&lt;/strong&gt; ，可以打开插件面板。右击插件选项或者点击安装按钮即可完成对应插件的安装：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-插件安装.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;需要注意的是，安装插件前需要按照自己 JVM 的版本来配置插件中心，否则会抛出 ”无法连接到插件中心“ 的异常。每个版本对应的插件中心可以在该网址上查看：https://visualvm.github.io/pluginscenters.html，界面如下：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-插件中心.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;之后需要将正确的插件中心的地址配置到程序中：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-配置插件中心.png&#34;/&gt; &lt;/div&gt;
&lt;h2 id=&#34;四连接远程进程&#34;&gt;四、连接远程进程&lt;/h2&gt;
&lt;p&gt;以上演示 JConsole 和 VisualVM 时，我们都是用的本地进程，但在实际开发中，我们更多需要监控的是服务器上的远程进程。想要监控远程主机上的进程，需要进行 JMX 的相关配置，根据连接时是否需要用户名和密码，可以分为以下两种配置方式：&lt;/p&gt;
&lt;h3 id=&#34;41-不使用安全凭证&#34;&gt;4.1 不使用安全凭证&lt;/h3&gt;
&lt;p&gt;启动服务器上的 Java 进程时增加以下参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; java -Dcom.sun.management.jmxremote.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12345&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;#jmx远程连接的端口号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; -Dcom.sun.management.jmxremote.ssl&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; -Dcom.sun.management.jmxremote.authenticate&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; -jar springboot.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时只需要知道主机地址和端口号就可以连接，不需要使用用户名和密码，所以安全性比较低。&lt;/p&gt;
&lt;h3 id=&#34;42-使用安全凭证&#34;&gt;4.2 使用安全凭证&lt;/h3&gt;
&lt;p&gt;启动服务器上的 Java 进程时增加以下参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;java -Dcom.sun.management.jmxremote.port&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;12345&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Dcom.sun.management.jmxremote.ssl&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Dcom.sun.management.jmxremote.authenticate&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Dcom.sun.management.jmxremote.access.file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/jmxremote.access
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-Dcom.sun.management.jmxremote.password.file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/usr/local/jmxremote.password
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;-jar springboot.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;jmxremote.access &lt;/code&gt; 的内容如下，其中 admin 为用户名，readwrite 表示可读可写，也可以设置为 readonly（只读）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;admin readwrite
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;jmxremote.password&lt;/code&gt; 的内容如下，其中 admin 为用户名，123456 为密码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;admin &lt;span class=&#34;m&#34;&gt;123456&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;两个文件创建好后，还需要赋予其执行权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod &lt;span class=&#34;m&#34;&gt;600&lt;/span&gt; /usr/local/jmxremote.access
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chmod &lt;span class=&#34;m&#34;&gt;600&lt;/span&gt; /usr/local/jmxremote.password
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chown root:root /usr/local/jmxremote.access
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;chown root:root /usr/local/jmxremote.password
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后在使用 VisualVM 进行远程连接时，配置如下：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jvisual-连接远程主机.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;需要注意的是这里的端口号是配置的 &lt;code&gt;Dcom.sun.management.jmxremote.port&lt;/code&gt; 的值，而不是 Java 程序的端口号。连接完成后，即可查看到对应进程的监控状态。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;主要参考自：周志明 . 深入理解 Java 虚拟机（第 3 版）. 机械工业出版社 , 2019-12 ，想要深入了解虚拟机的话，推荐阅读原书。&lt;/li&gt;
&lt;li&gt;visualvm 官方文档：https://visualvm.github.io/documentation.html&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cnblogs.com/gossip/p/6141941.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java_jvisualvm 使用 JMX 连接远程机器（实践）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://my.oschina.net/mye/blog/64879&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 JMX 透过防火墙远程监控 tomcat 服务&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>2020-heibaiying-JVM 性能监控之命令行工具</title>
      <link>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03.%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-heibaiying-jvm-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-notes/06.jvm-%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/03.%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-heibaiying-jvm-%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/</guid>
      <description>&lt;h1 id=&#34;jvm-性能监控之命令行工具&#34;&gt;JVM 性能监控之命令行工具&lt;/h1&gt;
&lt;h2 id=&#34;一简介&#34;&gt;一、简介&lt;/h2&gt;
&lt;p&gt;在 JDK 安装目录的 &lt;code&gt;bin&lt;/code&gt; 文件夹下，除了提供有 &lt;code&gt;javac&lt;/code&gt; 、&lt;code&gt;java&lt;/code&gt; 这两个常用的编译和运行工具外，还提供了一系列命令行工具用于 JVM 的性能监控和故障诊断，常用的命令如下：&lt;/p&gt;
&lt;h2 id=&#34;二jps&#34;&gt;二、jps&lt;/h2&gt;
&lt;p&gt;jps（JVM Process Status Tool）用于列出正在运行的虚拟机进程的主类名称和 LVMID（Local Virtual Machine Identifier，本地虚拟机唯一标识），这里得到的 LVMID 是进行后续其它查询的基础。示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;C:/Users&amp;gt;jps
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;10848&lt;/span&gt; Main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;14560&lt;/span&gt; Jps
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;7040&lt;/span&gt; Launcher
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;11572&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;9492&lt;/span&gt; DeadLockTest
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;7868&lt;/span&gt; JConsole
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可选参数有 &lt;code&gt;-v&lt;/code&gt; ，用于输出虚拟机进程启动时的 JVM 参数。&lt;/p&gt;
&lt;h2 id=&#34;三jstat&#34;&gt;三、jstat&lt;/h2&gt;
&lt;p&gt;jstat（JVM Statistics Monitoring Tool）用于监视虚拟机的运行状态。使用格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jstat -&amp;lt;option&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-t&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-h&amp;lt;lines&amp;gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &amp;lt;vmid&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&amp;lt;interval&amp;gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&amp;lt;count&amp;gt;&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;option&lt;/code&gt; 的所有可选值如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-class&lt;/td&gt;
&lt;td&gt;监视类加载、卸载数量、总空间以及类装载所耗费的时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gc&lt;/td&gt;
&lt;td&gt;监视 Java 堆状况，包括 Eden 区、2 个 Survivor 区、老年代的容量、已用空间、垃圾收集时间等信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gccapacity&lt;/td&gt;
&lt;td&gt;与 -gc 基本相同，但主要关注的是 Java 堆各个区域使用到的最大、最小空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gcutil&lt;/td&gt;
&lt;td&gt;与 -gc 基本相同，但主要关注的是已使用空间占总空间的百分比&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gccause&lt;/td&gt;
&lt;td&gt;与 -gcutil 基本相同，但是会额外输出上一次垃圾回收的原因&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gcnew&lt;/td&gt;
&lt;td&gt;监视新生代垃圾回收的状况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gcnewcapacity&lt;/td&gt;
&lt;td&gt;与 -gcnew 基本相同，但主要关注的是使用到的最大、最小空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gcold&lt;/td&gt;
&lt;td&gt;监视老年代垃圾回收的状况&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-gcoldcapacity&lt;/td&gt;
&lt;td&gt;与 -gcold 基本相同，但主要关注的是使用到的最大、最小空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-compiler&lt;/td&gt;
&lt;td&gt;输出即时编译器编译过的方法、耗时等信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-printcompilation&lt;/td&gt;
&lt;td&gt;输出已经被即时编译的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;命令行中的 &lt;code&gt;interval&lt;/code&gt; 表示监控的时间间隔，&lt;code&gt;count&lt;/code&gt; 表示监控次数。示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jstat -gc &lt;span class=&#34;m&#34;&gt;9492&lt;/span&gt; 3s &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 每3s输出一次，一共输出5次&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jstat_gc.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;输出信息中各个参数含义分别如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S0C&lt;/strong&gt;：survivor 0 的容量大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S1C&lt;/strong&gt;：survivor 1 的容量大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S0U&lt;/strong&gt;：survivor 0 已使用的空间大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;S1U&lt;/strong&gt;：survivor 1 已使用的空间大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EC&lt;/strong&gt;：Eden 区的容量大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EU&lt;/strong&gt;：Eden 区已使用的空间大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OC&lt;/strong&gt;：老年代的容量大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;OU&lt;/strong&gt;：老年代已使用的空间大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MC&lt;/strong&gt;：Metaspace 容量大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MU&lt;/strong&gt;：Metaspace 已使用的空间大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CCSC&lt;/strong&gt;：压缩类的空间大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CCSU&lt;/strong&gt;：压缩类已使用的空间大小，单位 kB；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YGC&lt;/strong&gt;：年轻代垃圾回收的次数；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;YGCT&lt;/strong&gt;： 年轻代垃圾回收所消耗的时间；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FGC&lt;/strong&gt;：老年代垃圾回收的次数；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FGCT&lt;/strong&gt;：老年代垃圾回收所消耗的时间；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GCT&lt;/strong&gt;：垃圾回收所消耗的总时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上是 option 为 &lt;code&gt;-gc&lt;/code&gt; 时的输出结果，不同 option 的输出结果是不同的，所有输出结果及其参数解释可以参考官方文章： &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;四jinfo&#34;&gt;四、jinfo&lt;/h2&gt;
&lt;p&gt;jinfo（Configuration Info for Java）的作用是实时查看和调整虚拟机的各项参数。使用格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jinfo &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;option&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &amp;lt;pid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;option &lt;/code&gt; 支持以下可选项：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;-flag name&lt;/strong&gt; ：输出指定的虚拟机参数的值；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-flag [+|-]name&lt;/strong&gt; ：启用或禁用指定名称的虚拟机参数；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-flag name=value&lt;/strong&gt; ：设置虚拟机参数的值；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-flags&lt;/strong&gt; ：以键值对的方式输出 JVM 的相关属性；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-sysprops&lt;/strong&gt;：以键值对的方式输出 Java 相关的系统属性。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;jinfo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flags&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13604&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;jinfo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CMSInitiatingOccupancyFraction&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13604&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jinfo.png&#34;/&gt; &lt;/div&gt;
&lt;h2 id=&#34;五jmap&#34;&gt;五、jmap&lt;/h2&gt;
&lt;p&gt;jmap（Memory Map for Java）命令主要用于生成堆转储快照（一般称为 heapdump 或 dump 文件）。除此之外，它还可以用来查询 finalize 执行队列、Java 堆和方法区的详细信息，如空间使用率、当前使用的收集器等。 使用格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jmap &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;option&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &amp;lt;pid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 &lt;code&gt;option&lt;/code&gt; 支持以下可选项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-dump:[live,]format=b,file=&lt;/td&gt;
&lt;td&gt;生成 Java 堆转储快照，其中 live 用于指明是否只 dump 出存活的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-finalizerinfo&lt;/td&gt;
&lt;td&gt;显示在 F-Queue 中等待 Finalizer 线程执行 finalize 方法的对象。只在 Linux/Solaris 平台下有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-heap&lt;/td&gt;
&lt;td&gt;显示 Java 堆详细信息，如使用哪种回收器、参数配置、分代状况等。只在 Linux/Solaris 平台下有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-histo[:live]&lt;/td&gt;
&lt;td&gt;显示堆中对象的统计信息，包括类、实例数量、合计容量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-permstat&lt;/td&gt;
&lt;td&gt;以 ClassLoader 为统计口径显示永久代内存状态。只在 Linux/Solaris 平台下有效&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-F&lt;/td&gt;
&lt;td&gt;当虚拟机进程堆 -dump 选项没有响应时，可使用这个选项强制生成 dump 快照。&lt;br/&gt;只在 Linux/Solaris 平台下有效&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jmap -dump:format&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;b,file&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;test.bin &lt;span class=&#34;m&#34;&gt;3260&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jmap.png&#34;/&gt; &lt;/div&gt;
&lt;h2 id=&#34;六jhat&#34;&gt;六、jhat&lt;/h2&gt;
&lt;p&gt;jhat（JVM Heap Analysis Tool）命令主要用来分析 jmap 生成的堆转储快照。 假设我们有如下一段程序：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;StackOverFlowTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StackOverFlowTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;throws&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StackOverFlowTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//因为只是演示，所以休眠一下，避免生成的堆转储文件过大，导致分析时间过长
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其最终会抛出 &lt;code&gt;java.lang.OutOfMemoryError: Java heap space&lt;/code&gt; 异常，意味着在 JVM 堆上发生了内存溢出。在程序运行期间，我们可以使用上面的 jmap 命令生成堆转储快照，并使用 jhat 命令进行分析：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jhat.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;jhat 命令最终的分析结果会以网页的方式进行提供，端口为 7000，界面如下：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jhat_web.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;jhat 分析的结果并不够直观，因此我们还可以借助第三方工具来分析堆转储快照，这里以 JProfiler 为例，该软件可以直接从&lt;a href=&#34;https://www.ej-technologies.com/products/jprofiler/overview.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;官网&lt;/a&gt;下载并安装，安装完成后，点击 &lt;code&gt;session&lt;/code&gt; 选项卡，并使用 &lt;code&gt;Open Snapshot&lt;/code&gt; 打开 jmap 命令生成的堆转储快照：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jprofiler-1.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;之后程序会自动进行分析，分析结果如下：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jprofiler-2.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;通过以上可视化的统计结果，我们就可以很快定位到导致内存溢出的原因。&lt;/p&gt;
&lt;h2 id=&#34;七jstack&#34;&gt;七、jstack&lt;/h2&gt;
&lt;p&gt;jstack（Stack Trace for Java）命令用于生成虚拟机的线程快照（一般称为 threaddump 或者 javacore 文件）。线程快照就是每一条线程正在执行的方法堆栈的集合，线程快照可以用于定位线程长时间停顿的原因，如死锁、死循环和长时间挂起等。其使用格式如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; jstack -F &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-m&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-l&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &amp;lt;pid&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;各选项的作用如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;-F&lt;/td&gt;
&lt;td&gt;当正常输出的请求不被响应时，强制输出线程堆栈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-m&lt;/td&gt;
&lt;td&gt;除堆栈外，显示关于锁的附加信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-l&lt;/td&gt;
&lt;td&gt;如果有调用本地方法的话，则可以显示 C/C++ 的堆栈&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;假设我们的程序中存在如下死锁：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DeadLockTest&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DeadLockTest&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;deadlock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;deadlock&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;sleep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterruptedException&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;kd&#34;&gt;synchronized&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时使用 jstack 分析就能很快的定位到问题所在，示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;jstack &lt;span class=&#34;m&#34;&gt;8112&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出结果如下：&lt;/p&gt;
&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://gitee.com/heibaiying/Full-Stack-Notes/raw/master/pictures/jstack.png&#34;/&gt; &lt;/div&gt;
&lt;p&gt;从输出中结果中可以看出，出现了一个死锁，该死锁由线程 Thread-0 和 Thread-1 导致，原因是 Thread-0 锁住了对象 &lt;code&gt;&amp;lt;0x00000000d6d8d610&amp;gt;&lt;/code&gt; ，并尝试获取 &lt;code&gt;&amp;lt;0x00000000d6d8d640&amp;gt;&lt;/code&gt; 对象的锁；但是 Thread-0 却恰恰相反，锁住了对象 &lt;code&gt;&amp;lt;0x00000000d6d8d640&amp;gt;&lt;/code&gt; ，并尝试获取 &lt;code&gt;&amp;lt;0x00000000d6d8d610&amp;gt;&lt;/code&gt; 对象的锁，由此导致死锁。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;主要参考自：周志明 . 深入理解 Java 虚拟机（第 3 版）. 机械工业出版社 , 2019-12 ，想要深入了解虚拟机的话，推荐阅读原书。&lt;/li&gt;
&lt;li&gt;官方文档：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/s11-troubleshooting_tools.html#sthref327&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
