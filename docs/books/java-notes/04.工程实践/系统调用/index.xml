<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>系统调用 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
      <atom:link href="https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    <description>系统调用</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>系统调用</title>
      <link>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</link>
    </image>
    
    <item>
      <title>RMI</title>
      <link>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/rmi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/rmi/</guid>
      <description>&lt;h1 id=&#34;rmi&#34;&gt;RMI&lt;/h1&gt;
&lt;p&gt;RMI:远程方法调用(Remote Method Invocation)。能够让在某个 java 虚拟机上的对象像调用本地对象一样调用另一个 java 虚拟机中的对象上的方法。

















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://img.blog.csdn.net/20130813104359359?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTE5ODgxMDI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;RMI 远程调用步骤：&lt;/p&gt;
&lt;p&gt;1，客户对象调用客户端辅助对象上的方法&lt;/p&gt;
&lt;p&gt;2，客户端辅助对象打包调用信息(变量，方法名)，通过网络发送给服务端辅助对象&lt;/p&gt;
&lt;p&gt;3，服务端辅助对象将客户端辅助对象发送来的信息解包，找出真正被调用的方法以及该方法所在对象&lt;/p&gt;
&lt;p&gt;4，调用真正服务对象上的真正方法，并将结果返回给服务端辅助对象&lt;/p&gt;
&lt;p&gt;5，服务端辅助对象将结果打包，发送给客户端辅助对象&lt;/p&gt;
&lt;p&gt;6，客户端辅助对象将返回值解包，返回给客户对象&lt;/p&gt;
&lt;p&gt;7，客户对象获得返回值&lt;/p&gt;
&lt;p&gt;对于客户对象来说，步骤 2-6 是完全透明的&lt;/p&gt;
&lt;p&gt;搭建一个 RMI 服务的过程分为以下 7 步;&lt;/p&gt;
&lt;p&gt;1，创建远程方法接口，该接口必须继承自 Remote 接口&lt;/p&gt;
&lt;p&gt;Remote 接口是一个标识接口，用于标识所包含的方法可以从非本地虚拟机上调用的接口，Remote 接口本身不包含任何方法&lt;/p&gt;
&lt;p&gt;搭建一个 RMI 服务的过程分为以下 7 步;
1，创建远程方法接口，该接口必须继承自 Remote 接口
Remote 接口是一个标识接口，用于标识所包含的方法可以从非本地虚拟机上调用的接口，Remote 接口本身不包含任何方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    package server;

    import java.rmi.Remote;
    import java.rmi.RemoteException;

    public interface Hello extends Remote {
        public String sayHello(String name) throws RemoteException;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;由于远程方法调用的本质依然是网络通信，只不过隐藏了底层实现，网络通信是经常会出现异常的，所以接口的所有方法都必须抛出 RemoteException 以说明该方法是有风险的
2，创建远程方法接口实现类：
UnicastRemoteObject 类的构造函数抛出了 RemoteException，故其继承类不能使用默认构造函数，继承类的构造函数必须也抛出 RemoteException
由于方法参数与返回值最终都将在网络上传输，故必须是可序列化的&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    package server;

    import java.rmi.RemoteException;
    import java.rmi.server.UnicastRemoteObject;

    public class HelloImpl extends UnicastRemoteObject implements Hello {
        private static final long serialVersionUID = -271947229644133464L;

        public HelloImpl() throws RemoteException{
            super();
        }

        public String sayHello(String name) throws RemoteException {
            return &amp;#34;Hello,&amp;#34;+name;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3，利用 java 自带 rmic 工具生成 sutb 存根类(jdk1.5.0_15/bin/rmic)
jdk1.2 以后的 RMI 可以通过反射 API 可以直接将请求发送给真实类，所以不需要 skeleton 类了
sutb 存根为远程方法类在本地的代理，是在服务端代码的基础上生成的，需要 HelloImpl.class 文件，由于 HelloImpl 继承了 Hello 接口，故 Hello.class 文件也是不可少的
Test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Hello.class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;HelloImpl.class
方式一：&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[name@name Test]$ cd /home/name/Test/
[name@name Test]$ rmic server.HelloImpl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;方式二：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[name@name Test]$ rmic -classpath /home/name/Test server.HelloImpl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行成功后将会生成 HelloImpl_Stub.class 文件
4，启动 RMI 注册服务(jdk1.5.0_15/bin/rmiregistry)
方式一：后台启动 rmiregistry 服务&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    [name@name jdk]$ jdk1.5.0_15/bin/rmiregistry 12312 &amp;amp;
    [1] 22720
    [name@name jdk]$ ps -ef|grep rmiregistry
    name    22720 13763  0 16:43 pts/3    00:00:00 jdk1.5.0_15/bin/rmiregistry 12312
    name    22737 13763  0 16:43 pts/3    00:00:00 grep rmiregistry
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果不带具体端口号，则默认为 1099
方式二：人工创建 rmiregistry 服务，需要在代码中添加：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    LocateRegistry.createRegistry(12312);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5，编写服务端代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    package server;

    import java.rmi.Naming;
    import java.rmi.registry.LocateRegistry;

    public class HelloServer {
        public static void main(String[] args) {
            try{
                Hello h = new HelloImpl();

                //创建并导出接受指定port请求的本地主机上的Registry实例。
                //LocateRegistry.createRegistry(12312);

                /** Naming 类提供在对象注册表中存储和获得远程对远程对象引用的方法
                 *  Naming 类的每个方法都可将某个名称作为其一个参数，
                 *  该名称是使用以下形式的 URL 格式(没有 scheme 组件)的 java.lang.String:
                 *  //host:port/name
                 *  host：注册表所在的主机(远程或本地)，省略则默认为本地主机
                 *  port：是注册表接受调用的端口号，省略则默认为1099，RMI注册表registry使用的著名端口
                 *  name：是未经注册表解释的简单字符串
                 */
                //Naming.bind(&amp;#34;//host:port/name&amp;#34;, h);
                Naming.bind(&amp;#34;rmi://192.168.58.164:12312/Hello&amp;#34;, h);
                System.out.println(&amp;#34;HelloServer启动成功&amp;#34;);
            }catch(Exception e){
                e.printStackTrace();
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;先创建注册表，然后才能在注册表中存储远程对象信息
6，运行服务端(58.164)：
Test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Hello.class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;HelloImpl.class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;HelloServer.class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    [name@name ~]$ java server.HelloServer
    HelloServer启动成功
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然/home/name/Test 一定要在系统 CLASSPATH 中，否则会报找不到相应的.class 文件
7，编写客户端代码&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    package client;

    import java.net.MalformedURLException;
    import java.rmi.Naming;
    import java.rmi.NotBoundException;
    import java.rmi.RemoteException;

    import server.Hello;

    public class HelloClient {
        public static void main(String[] args) {
            try {
                Hello h = (Hello)Naming.lookup(&amp;#34;rmi://192.168.58.164:12312/Hello&amp;#34;);
                System.out.println(h.sayHello(&amp;#34;zx&amp;#34;));
            } catch (MalformedURLException e) {
                System.out.println(&amp;#34;url格式异常&amp;#34;);
            } catch (RemoteException e) {
                System.out.println(&amp;#34;创建对象异常&amp;#34;);
                e.printStackTrace();
            } catch (NotBoundException e) {
                System.out.println(&amp;#34;对象未绑定&amp;#34;);
            }
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8，运行客户端(58.163)：
Test&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;client&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;HelloClient.class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;server&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;Hello.class&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;HelloImpl_Stub.class//服务端生成的存根文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    [name@name client]$ java client.HelloClient
    Hello,zx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://img.blog.csdn.net/20130816094554390?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYTE5ODgxMDI5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>跨语言调用</title>
      <link>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E8%B7%A8%E8%AF%AD%E8%A8%80%E8%B0%83%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;java-跨语言调用&#34;&gt;Java 跨语言调用&lt;/h1&gt;
&lt;p&gt;JNA provides Java programs easy access to native shared libraries without writing anything but Java code - no JNI or native code is required. This functionality is comparable to Windows&amp;rsquo; Platform/Invoke and Python&amp;rsquo;s ctypes.&lt;/p&gt;
&lt;h1 id=&#34;c作为中转&#34;&gt;C++作为中转&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;http://www.iteye.com/topic/1133867&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 调用 C# DLL&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;jni4netbridge-between-java-and-net-intraprocess-fast-object-oriented-open-source&#34;&gt;jni4net:bridge between Java and .NET (intraprocess, fast, object oriented, open-source)&lt;/h1&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://jni4net.com/pics/jni4net-overview.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;quick-start&#34;&gt;Quick Start&lt;/h2&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;p&gt;Microsoft Windows (XP / 7 / 8 / 8.1) x86 or x64
This guide is currently using Microsoft Windows 7 Professional x64 and is confirmed working. You may try other versions of Windows. Jni4Net binaries and dependencies do not support Mac/Linux.&lt;/p&gt;
&lt;p&gt;Microsoft Visual Studio
Microsoft Visual Studio 2010 Ultimate will work.&lt;/p&gt;
&lt;p&gt;Microsoft .NET Framework 4
Version 4.0.30319 will work. Minimum version is 2.0.50727. Can try later versions.&lt;/p&gt;
&lt;p&gt;Java SE Development Kit
You may follow the download links and install the 32-bit version, and the rest of this process should go smoothly.&lt;/p&gt;
&lt;p&gt;Set up your JAVA_HOME environment variable.
Simply follow the instructions found on the net.&lt;/p&gt;
&lt;p&gt;Add JAVA_HOME to your system Path
by creating a new entry for JAVA_HOME, ;%JAVA_HOME%\bin;.&lt;/p&gt;
&lt;p&gt;Java commands can now be run from Windows Command Prompt. Remember to separate entries with semicolons (;) in between, then restart your computer.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/jni4net/files/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Download Jni4Net&lt;/a&gt;
Currently this guide uses &lt;a href=&#34;http://sourceforge.net/projects/jni4net/files/0.8.8/jni4net-0.8.8.0-bin.zip/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jni4net-0.8.8.0-bin.zip&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;proxygen&#34;&gt;ProxyGen&lt;/h3&gt;
&lt;p&gt;Open and extract these files to your favorite location, (the Desktop for example):
bin/proxygen.exe
bin/proxygen.exe.config
lib/jni4net.j-0.8.8.0.jar
lib/jni4net.n.w32.v40-0.8.8.0.dll
lib/jni4net.n-0.8.8.0.dll
Because proxygen.exe is causing confusion between 32-bit and 64-bit versions of Java and CLR virtual machines, the following steps are required to modify the file for easier use.
Open the Visual Studio Command Prompt. You can find it in the Start Menu via All Programs &amp;gt; Microsoft Visual Studio (*) &amp;gt; Visual Studio Tools
or simply type Visual Studio Command Prompt.
Once opened, enter:
corflags c:\users\you\desktop\proxygen.exe /32BIT+ /Force, (command and arguments are case-sensitive).
If the Command Prompt gives warning CF011, you may ignore it. The tool is ready for use in development.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jni4net/jni4net/wiki/ProxyGen-Setup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check the ProxyGen Setup guide&lt;/a&gt; if you haven&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;We will also refer to &lt;a href=&#34;http://sourceforge.net/projects/jni4net/files/0.8.8/jni4net-0.8.8.0-bin.zip/download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jni4Net version 0.8.8.0&lt;/a&gt; for the time being.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[The assembly of your choice]&lt;/em&gt;. For this guide, we will refer to a sample .NET-assembled library called &lt;code&gt;testlib.dll&lt;/code&gt;. It looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;        // Simple method that just prints a hard-coded string.
        public void Hello()
        {
            Console.WriteLine(&amp;#34;Hello Java, from .NET!&amp;#34;);
        }

        // Parameterized method that accepts a string
        public void Repeat(string line)
        {
            Console.WriteLine(line);
        }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open the Windows Command Prompt.&lt;/p&gt;
&lt;p&gt;Enter a command to &lt;code&gt;proxygen.exe&lt;/code&gt; as follows:&lt;/p&gt;
&lt;p&gt;Enter a command to &lt;code&gt;proxygen.exe&lt;/code&gt; as follows:
&lt;code&gt;c:\users\you\desktop\proxygen.exe c:\users\you\desktop\testlib.dll -wd c:\users\you\desktop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Four files and folders in total will be created:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clr\&lt;/p&gt;
&lt;p&gt;clr&lt;br&gt;
jvm\&lt;/p&gt;
&lt;p&gt;clr&lt;br&gt;
jvm&lt;br&gt;
testlib.proxygen.xml&lt;/p&gt;
&lt;p&gt;clr&lt;br&gt;
jvm&lt;br&gt;
testlib.proxygen.xml
build.cmd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Click and run the newly generated &lt;code&gt;build.cmd&lt;/code&gt; file. Your .NET and Java proxies are created:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;testlib.j4n.dll&lt;/p&gt;
&lt;p&gt;testlib.j4n.dll
testlib.j4n.jar&lt;/p&gt;
&lt;p&gt;testlib.j4n.dll
testlib.j4n.jar
target\ included&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Ready the following resources to be imported into your project:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testlib.dll&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testlib.dll
testlib.j4n.jar&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testlib.dll
testlib.j4n.jar
testlib.j4n.dll&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testlib.dll
testlib.j4n.jar
testlib.j4n.dll
jni4net.n.w32.v40-0.8.8.0.dll&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testlib.dll
testlib.j4n.jar
testlib.j4n.dll
jni4net.n.w32.v40-0.8.8.0.dll
target\ (optional)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;*&lt;em&gt;Try not to include the rest of the generated files and folders as that would just increase the size of your project explorer/pipeline.&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;JARs - Quick Example with testjar.jar&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;proxygen.exe&lt;/code&gt; with the command,&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;proxygen.exe&lt;/code&gt; with the command,
&lt;code&gt;c:\users\you\desktop\proxygen.exe c:\users\you\desktop\testjar.jar -wd c:\users\you\desktop&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;generates these to your desktop:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;clr\&lt;/p&gt;
&lt;p&gt;clr&lt;br&gt;
jvm\&lt;/p&gt;
&lt;p&gt;clr&lt;br&gt;
jvm&lt;br&gt;
testjar.proxygen.xml&lt;/p&gt;
&lt;p&gt;clr&lt;br&gt;
jvm&lt;br&gt;
testjar.proxygen.xml
build.cmd&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Run &lt;code&gt;build.cmd&lt;/code&gt; and receive,&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;testjar.j4n.dll&lt;/p&gt;
&lt;p&gt;testjar.j4n.dll
testjar.j4n.jar&lt;/p&gt;
&lt;p&gt;testjar.j4n.dll
testjar.j4n.jar
target\&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;then import these into your project:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testjar.jar&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testjar.jar
testjar.j4n.jar&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testjar.jar
testjar.j4n.jar
testjar.j4n.dll&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testjar.jar
testjar.j4n.jar
testjar.j4n.dll
jni4net.n.w32.v40-0.8.8.0.dll&lt;/p&gt;
&lt;p&gt;jni4net.j-0.8.8.0.jar
jni4net.n-0.8.8.0.dll
testjar.jar
testjar.j4n.jar
testjar.j4n.dll
jni4net.n.w32.v40-0.8.8.0.dll
target\&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>命令执行</title>
      <link>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/java-notes/04.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</guid>
      <description>&lt;h1 id=&#34;java-中命令执行&#34;&gt;Java 中命令执行&lt;/h1&gt;
&lt;p&gt;在 Java 中执行系统命令，主要是使用 ProcessBuilder 和 Runtime.getRuntime().exec()。而在这里主要是介绍两种方法的使用。&lt;/p&gt;
&lt;h1 id=&#34;runtime&#34;&gt;Runtime&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 上传之后的视频文件名为test.tmpmedia
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;mencoder test.tmpmedia -o test.flv -ofps 25 -of lavf -oac mp3lame -srate 22050 -ovc lavc -lavcopts &amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;vcodec=flv:keyint=59:vbitrate=6000:mbd=2:trell:v4mv:o=mpv_flagg=cbp_rd:last_pred=3 -vf harddup,scale=480:256&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Runtime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 读取命令的输出信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exitValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//说明命令执行失败
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//可以进入到错误处理步骤中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 打印输出信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中 waitFor()方法会阻塞当前进程，直到命令执行结束。而 exitValue 不会阻塞进程，但是调用 exitValue 的时候，如果命令没有执行完成就会报错。&lt;/p&gt;
&lt;h1 id=&#34;processbuilder&#34;&gt;ProcessBuilder&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// 将命令分解为List存储
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;commandSplit&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;List&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lcommand&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;commandSplit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;lcommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;commandSplit&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ProcessBuilder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;processBuilder&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lcommand&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;processBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;redirectErrorStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Process&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;processBuilder&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;is&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;exitValue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;//说明命令执行失败
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;//可以进入到错误处理步骤中
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;resultLog&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;ProcessBuilder 可以使用 redirectErrorStream 将标准输出和标准错误流合并，然后使用 getInputStream 获取到流，放入 BufferedReader 中打印出来，便可解决缓存区满的问题。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
