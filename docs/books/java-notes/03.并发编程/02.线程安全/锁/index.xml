<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>锁 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E9%94%81/</link><atom:link href="https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E9%94%81/index.xml" rel="self" type="application/rss+xml"/><description>锁</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>锁</title><link>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E9%94%81/</link></image><item><title>Java 中锁概览</title><link>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E9%94%81/java-%E4%B8%AD%E9%94%81%E6%A6%82%E8%A7%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/02.%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/%E9%94%81/java-%E4%B8%AD%E9%94%81%E6%A6%82%E8%A7%88/</guid><description>&lt;h1 id="java-中锁概览">Java 中锁概览&lt;/h1>
&lt;p>在读很多并发文章中，会提及各种各样锁如公平锁，乐观锁等等，这篇文章介绍各种锁的分类，介绍的内容如下：&lt;/p>
&lt;ul>
&lt;li>公平锁/非公平锁&lt;/li>
&lt;li>可重入锁/不可重入锁&lt;/li>
&lt;li>独享锁/共享锁&lt;/li>
&lt;li>互斥锁/读写锁&lt;/li>
&lt;li>乐观锁/悲观锁&lt;/li>
&lt;li>分段锁&lt;/li>
&lt;li>偏向锁/轻量级锁/重量级锁&lt;/li>
&lt;li>自旋锁&lt;/li>
&lt;/ul>
&lt;p>上面是很多锁的名词，这些分类并不是全是指锁的状态，有的指锁的特性，有的指锁的设计，下面总结的内容是对每个锁的名词进行一定的解释。&lt;/p>
&lt;h1 id="公平锁非公平锁">公平锁/非公平锁&lt;/h1>
&lt;ul>
&lt;li>公平锁: 公平锁是指多个线程按照申请锁的顺序来获取锁。&lt;/li>
&lt;li>非公平锁: 非公平锁是指多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁。有可能，会造成优先级反转或者饥饿现象。&lt;/li>
&lt;/ul>
&lt;p>对于 Java ReentrantLock 而言，通过构造函数指定该锁是否是公平锁，默认是非公平锁。非公平锁的优点在于吞吐量比公平锁大。对于 Synchronized 而言，也是一种非公平锁。由于其并不像 ReentrantLock 是通过 AQS 的来实现线程调度，所以并没有任何办法使其变成公平锁。&lt;/p>
&lt;h1 id="可重入锁不可重入锁">可重入锁/不可重入锁&lt;/h1>
&lt;h2 id="可重入锁">可重入锁&lt;/h2>
&lt;p>广义上的可重入锁指的是可重复可递归调用的锁，在外层使用锁之后，在内层仍然可以使用，并且不发生死锁（前提得是同一个对象或者 class），这样的锁就叫做可重入锁。ReentrantLock 和 synchronized 都是可重入锁。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setA&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Thread&lt;/span> &lt;span class="nf">sLeep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">setB&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setB&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Exception&lt;/span>&lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码就是一个可重入锁的一个特点，如果不是可重入锁的话，setB 可能不会被当前线程执行，可能造成死锁。&lt;/p>
&lt;h2 id="不可重入锁">不可重入锁&lt;/h2>
&lt;p>不可重入锁，与可重入锁相反，不可递归调用，递归调用就发生死锁。看到一个经典的讲解，使用自旋锁来模拟一个不可重入锁，代码如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/superbed/2021/07/18/60f391195132923bf864a42a.jpg" alt="使用自旋锁模拟不可重入" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>代码也比较简单，使用原子引用来存放线程，同一线程两次调用 lock() 方法，如果不执行 unlock() 释放锁的话，第二次调用自旋的时候就会产生死锁，这个锁就不是可重入的，而实际上同一个线程不必每次都去释放锁再来获取锁，这样的调度切换是很耗资源的。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/superbed/2021/07/18/60f391965132923bf8681369.jpg" alt="修改为可重入锁方案" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在执行每次操作之前，判断当前锁持有者是否是当前对象，采用 state 计数，不用每次去释放锁。ReentrantLock 中可重入锁（非公平）实现如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/superbed/2021/07/18/60f391e85132923bf86a4fa3.jpg" alt="ReentrantLock 实现" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在 AQS 中维护了一个 private volatile int state 来计数重入次数，避免了频繁的持有释放操作，这样既提升了效率，又避免了死锁。&lt;/p>
&lt;h1 id="独享锁共享锁">独享锁/共享锁&lt;/h1>
&lt;p>独享锁和共享锁在你去读 C.U.T 包下的 ReeReentrantLock 和 ReentrantReadWriteLock 你就会发现，它俩一个是独享一个是共享锁。&lt;/p>
&lt;ul>
&lt;li>独享锁: 该锁每一次只能被一个线程所持有。&lt;/li>
&lt;li>共享锁: 该锁可被多个线程共有，典型的就是 ReentrantReadWriteLock 里的读锁，它的读锁是可以被共享的，但是它的写锁确每次只能被独占。&lt;/li>
&lt;/ul>
&lt;p>另外读锁的共享可保证并发读是非常高效的，但是读写和写写，写读都是互斥的。独享锁与共享锁也是通过 AQS 来实现的，通过实现不同的方法，来实现独享或者共享。对于 Synchronized 而言，当然是独享锁。&lt;/p>
&lt;h1 id="互斥锁读写锁">互斥锁/读写锁&lt;/h1>
&lt;h2 id="互斥锁">互斥锁&lt;/h2>
&lt;p>在访问共享资源之前对进行加锁操作，在访问完成之后进行解锁操作。加锁后，任何其他试图再次加锁的线程会被阻塞，直到当前进程解锁。&lt;/p>
&lt;p>如果解锁时有一个以上的线程阻塞，那么所有该锁上的线程都被编程就绪状态， 第一个变为就绪状态的线程又执行加锁操作，那么其他的线程又会进入等待。在这种方式下，只有一个线程能够访问被互斥锁保护的资源&lt;/p>
&lt;h2 id="读写锁">读写锁&lt;/h2>
&lt;p>读写锁既是互斥锁，又是共享锁，read 模式是共享，write 是互斥(排它锁)的。读写锁有三种状态：读加锁状态、写加锁状态和不加锁状态。读写锁在 Java 中的具体实现就是 ReadWriteLock：一次只有一个线程可以占有写模式的读写锁，但是多个线程可以同时占有读模式的读写锁。&lt;/p>
&lt;p>只有一个线程可以占有写状态的锁，但可以有多个线程同时占有读状态锁，这也是它可以实现高并发的原因。当其处于写状态锁下，任何想要尝试获得锁的线程都会被阻塞，直到写状态锁被释放；如果是处于读状态锁下，允许其它线程获得它的读状态锁，但是不允许获得它的写状态锁，直到所有线程的读状态锁被释放；为了避免想要尝试写操作的线程一直得不到写状态锁，当读写锁感知到有线程想要获得写状态锁时，便会阻塞其后所有想要获得读状态锁的线程。所以读写锁非常适合资源的读操作远多于写操作的情况。&lt;/p>
&lt;h1 id="乐观锁悲观锁">乐观锁/悲观锁&lt;/h1>
&lt;h2 id="悲观锁">悲观锁&lt;/h2>
&lt;p>总是假设最坏的情况，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻塞直到它拿到锁（共享资源每次只给一个线程使用，其它线程阻塞，用完后再把资源转让给其它线程）。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。Java 中 synchronized 和 ReentrantLock 等独占锁就是悲观锁思想的实现。&lt;/p>
&lt;h2 id="乐观锁">乐观锁&lt;/h2>
&lt;p>总是假设最好的情况，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号机制和 CAS 算法实现。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库提供的类似于 write_condition 机制，其实都是提供的乐观锁。在 Java 中 java.util.concurrent.atomic 包下面的原子变量类就是使用了乐观锁的一种实现方式 CAS 实现的。&lt;/p>
&lt;h1 id="分段锁">分段锁&lt;/h1>
&lt;p>分段锁其实是一种锁的设计，并不是具体的一种锁，对于 ConcurrentHashMap 而言，其并发的实现就是通过分段锁的形式来实现高效的并发操作。并发容器类的加锁机制是基于粒度更小的分段锁，分段锁也是提升多并发程序性能的重要手段之一。在并发程序中，串行操作是会降低可伸缩性，并且上下文切换也会减低性能。在锁上发生竞争时将通水导致这两种问题，使用独占锁时保护受限资源的时候，基本上是采用串行方式—-每次只能有一个线程能访问它。所以对于可伸缩性来说最大的威胁就是独占锁。&lt;/p>
&lt;p>我们一般有三种方式降低锁的竞争程度：&lt;/p>
&lt;ul>
&lt;li>减少锁的持有时间&lt;/li>
&lt;li>降低锁的请求频率&lt;/li>
&lt;li>使用带有协调机制的独占锁，这些机制允许更高的并发性。&lt;/li>
&lt;/ul>
&lt;p>在某些情况下我们可以将锁分解技术进一步扩展为一组独立对象上的锁进行分解，这成为分段锁。其实说的简单一点就是：容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是 ConcurrentHashMap 所使用的锁分段技术，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。&lt;/p>
&lt;p>比如：在 ConcurrentHashMap 中使用了一个包含 16 个锁的数组，每个锁保护所有哈希桶的 1/16，其中第 N 个哈希桶由第（N mod 16）个锁来保护。假设使用合理的哈希算法使关键字能够均匀的分部，那么这大约能使对锁的请求减少到越来的 1/16。也正是这项技术使得 ConcurrentHashMap 支持多达 16 个并发的写入线程。&lt;/p>
&lt;h1 id="偏向锁轻量级锁重量级锁">偏向锁/轻量级锁/重量级锁&lt;/h1>
&lt;p>锁的状态：无锁状态、偏向锁状态、轻量级锁状态、重量级锁状态。锁的状态是通过对象监视器在对象头中的字段来表明的。四种状态会随着竞争的情况逐渐升级，而且是不可逆的过程，即不可降级。这四种状态都不是 Java 语言中的锁，而是 Jvm 为了提高锁的获取与释放效率而做的优化(使用 synchronized 时)。&lt;/p>
&lt;ul>
&lt;li>偏向锁：偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁。降低获取锁的代价。&lt;/li>
&lt;li>轻量级：轻量级锁是指当锁是偏向锁的时候，被另一个线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，提高性能。&lt;/li>
&lt;li>重量级锁：重量级锁是指当锁为轻量级锁的时候，另一个线程虽然是自旋，但自旋不会一直持续下去，当自旋一定次数的时候，还没有获取到锁，就会进入阻塞，该锁膨胀为重量级锁。重量级锁会让其他申请的线程进入阻塞，性能降低。&lt;/li>
&lt;/ul>
&lt;h1 id="自旋锁">自旋锁&lt;/h1>
&lt;p>我们知道 CAS 算法是乐观锁的一种实现方式，CAS 算法中又涉及到自旋锁，所以这里给大家讲一下什么是自旋锁。&lt;/p>
&lt;h2 id="cas-与自旋锁实现">CAS 与自旋锁实现&lt;/h2>
&lt;p>CAS 是英文单词 CompareandSwap（比较并交换），是一种有名的无锁算法。无锁编程，即不使用锁的情况下实现多线程之间的变量同步，也就是在没有线程被阻塞的情况下实现变量的同步，所以也叫非阻塞同步（ Non-blockingSynchronization）。CAS 算法涉及到三个操作数：&lt;/p>
&lt;ul>
&lt;li>需要读写的内存值 V&lt;/li>
&lt;li>进行比较的值 A&lt;/li>
&lt;li>拟写入的新值 B&lt;/li>
&lt;/ul>
&lt;p>更新一个变量的时候，只有当变量的预期值 A 和内存地址 V 当中的实际值相同时，才会将内存地址 V 对应的值修改为 B，否则不会执行任何操作。一般情况下是一个自旋操作，即不断的重试。&lt;/p>
&lt;p>自旋锁（spinlock）即是指当一个线程在获取锁的时候，如果锁已经被其它线程获取，那么该线程将循环等待，然后不断的判断锁是否能够被成功获取，直到获取到锁才会退出循环。它是为实现保护共享资源而提出一种锁机制。其实，自旋锁与互斥锁比较类似，它们都是为了解决对某项资源的互斥使用。无论是互斥锁，还是自旋锁，在任何时刻，最多只能有一个保持者，也就说，在任何时刻最多只能有一个执行单元获得锁。但是两者在调度机制上略有不同。对于互斥锁，如果资源已经被占用，资源申请者只能进入睡眠状态。但是自旋锁不会引起调用者睡眠，如果自旋锁已经被别的执行单元保持，调用者就一直循环在那里看是否该自旋锁的保持者已经释放了锁，”自旋”一词就是因此而得名。&lt;/p>
&lt;p>Java 实现自旋锁的方式如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/superbed/2021/07/18/60f393a55132923bf876d2e0.jpg" alt="自旋锁实现" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="自旋锁优劣">自旋锁优劣&lt;/h2>
&lt;p>自旋锁存在的问题如下：&lt;/p>
&lt;ul>
&lt;li>如果某个线程持有锁的时间过长，就会导致其它等待获取锁的线程进入循环等待，消耗 CPU。使用不当会造成 CPU 使用率极高。&lt;/li>
&lt;li>上面 Java 实现的自旋锁不是公平的，即无法满足等待时间最长的线程优先获取锁。不公平的锁就会存在“线程饥饿”问题。&lt;/li>
&lt;/ul>
&lt;p>自旋锁的优点如下：&lt;/p>
&lt;ul>
&lt;li>自旋锁不会使线程状态发生切换，一直处于用户态，即线程一直都是 active 的；不会使线程进入阻塞状态，减少了不必要的上下文切换，执行速度快&lt;/li>
&lt;li>非自旋锁在获取不到锁的时候会进入阻塞状态，从而进入内核态，当获取到锁的时候需要从内核态恢复，需要线程上下文切换。（线程被阻塞后便进入内核（Linux）调度状态，这个会导致系统在用户态与内核态之间来回切换，严重影响锁的性能）&lt;/li>
&lt;/ul></description></item></channel></rss>