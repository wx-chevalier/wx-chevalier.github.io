<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02.线程池 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><atom:link href="https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0/index.xml" rel="self" type="application/rss+xml"/><description>02.线程池</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>02.线程池</title><link>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link></image><item><title>线程调优</title><link>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E7%BA%BF%E7%A8%8B%E8%B0%83%E4%BC%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E7%BA%BF%E7%A8%8B%E8%B0%83%E4%BC%98/</guid><description>&lt;h1 id="java-线程调优">Java 线程调优&lt;/h1>
&lt;p>当然我们知道一个系统的吞吐量和响应时间跟外部网络，分布式架构等都存在强关联，性能优化也跟各级缓存设计，数据冗余等架构有很大关系，假设其他方面我们都已经完成了，聚焦到本文我们暂时关心的是单节点的性能优化。毕竟一屋不扫何以扫天下，整体系统的优化也有赖于各个节点的调优。从感官上来谈，当请求量很少的时候，我们可以很轻松的通过各种缓存优化来提高响应时间。但是随着用户激增，请求次数的增加，我们的服务也对应着需要并发模型来支撑。但是一个节点的并发量有个上限，当达到这个上限后，响应时间就会变长，所以我们需要探索并发到什么程度才是最优的，才能保证最高的并发数，同时响应时间又能保持在理想情况。由于我们暂时不关注节点以外的网络情况，那么下文我们特指的 RT 是指服务接收到请求后，完成计算，返回计算结果经历的时间。&lt;/p></description></item><item><title>自定义线程池</title><link>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/java-notes/03.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/01.%E7%BA%BF%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E6%B1%A0/02.%E7%BA%BF%E7%A8%8B%E6%B1%A0/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%BF%E7%A8%8B%E6%B1%A0/</guid><description>&lt;h1 id="自定义线程池">自定义线程池&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/1u5DFbkKHsn_-I_DcGPmXw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/1u5DFbkKHsn_-I_DcGPmXw&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>