<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>05.编码规约与协作 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-engineering-notes/05.%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6%E4%B8%8E%E5%8D%8F%E4%BD%9C/</link><atom:link href="https://ng-tech.icu/books/web-engineering-notes/05.%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6%E4%B8%8E%E5%8D%8F%E4%BD%9C/index.xml" rel="self" type="application/rss+xml"/><description>05.编码规约与协作</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>05.编码规约与协作</title><link>https://ng-tech.icu/books/web-engineering-notes/05.%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6%E4%B8%8E%E5%8D%8F%E4%BD%9C/</link></image><item><title>DOM 与组件</title><link>https://ng-tech.icu/books/web-engineering-notes/05.%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6%E4%B8%8E%E5%8D%8F%E4%BD%9C/dom-%E4%B8%8E%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-engineering-notes/05.%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6%E4%B8%8E%E5%8D%8F%E4%BD%9C/dom-%E4%B8%8E%E7%BB%84%E4%BB%B6/</guid><description>&lt;h1 id="syntax">Syntax&lt;/h1>
&lt;h2 id="html">HTML&lt;/h2>
&lt;h2 id="dom">DOM&lt;/h2>
&lt;h2 id="css">CSS&lt;/h2>
&lt;h1 id="react-component">React Component&lt;/h1>
&lt;h2 id="数据独立于逻辑">数据独立于逻辑&lt;/h2></description></item><item><title>布局与样式</title><link>https://ng-tech.icu/books/web-engineering-notes/05.%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6%E4%B8%8E%E5%8D%8F%E4%BD%9C/%E5%B8%83%E5%B1%80%E4%B8%8E%E6%A0%B7%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-engineering-notes/05.%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6%E4%B8%8E%E5%8D%8F%E4%BD%9C/%E5%B8%83%E5%B1%80%E4%B8%8E%E6%A0%B7%E5%BC%8F/</guid><description>&lt;h1 id="明白何谓-margin-collapse">明白何谓 Margin Collapse&lt;/h1>
&lt;p>不同于其他很多属性，盒模型中垂直方向上的 Margin 会在相遇时发生崩塌，也就是说当某个元素的底部 Margin 与另一个元素的顶部 Margin 相邻时，只有二者中的较大值会被保留下来，可以从下面这个简单的例子来学习:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">square&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">80&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">red&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#f44336&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">margin-bottom&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">blue&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#2196f3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">margin-top&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">30&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上述例子中我们会发现，红色和蓝色方块的外边距并没有相加得到 70px，而是只有红色的下外边距保留了下来。我们可以使用一些&lt;a href="http://stackoverflow.com/questions/19718634/how-to-disable-margin-collapsing" target="_blank" rel="noopener">方法&lt;/a>来避免这种行为，不过建议来说还是尽量统一使用&lt;code>margin-bottom&lt;/code>属性，这样就显得和谐多了。&lt;/p>
&lt;h1 id="使用-flexbox-进行布局">使用 Flexbox 进行布局&lt;/h1>
&lt;p>在传统的布局中我们习惯使用 Floats 或者 inline-blocks，不过它们更适合于格式化文档，而不是整个网站。而 Flexbox 则是专门的用于进行布局的工具。Flexbox 模型允许开发者使用很多便捷可扩展的属性来进行布局，估计你一旦用上就舍不得了:&lt;/p>
&lt;pre tabindex="0">&lt;code>.container {
display: flex;
/* Don&amp;#39;t forget to add prefixes for Safari */display: -webkit-flex;
}
&lt;/code>&lt;/pre>&lt;p>我们已经在 Tutorialzine 上提供了很多的关于 Flexbox 的介绍与小技巧，譬如&lt;a href="http://tutorialzine.com/2016/04/5-flexbox-techniques-you-need-to-know-about/" target="_blank" rel="noopener">5 Flexbox Techniques You Need to Know About&lt;/a>。&lt;/p>
&lt;h1 id="使用-css-reset">使用 CSS Reset&lt;/h1>
&lt;p>虽然这些年来随着浏览器的迅速发展与规范的统一，浏览器特性碎片化的情况有所改善，但是在不同的浏览器之间仍然存在着很多的行为差异。而解决这种问题的最好的办法就是使用某个 CSS Reset 来为所有的元素设置统一的样式，保证你能在相对统一干净的样式表的基础上开始工作。目前流行的 Reset 库有 &lt;a href="http://necolas.github.io/normalize.css/" target="_blank" rel="noopener">normalize.css,&lt;/a> &lt;a href="http://jgthms.com/minireset.css/" target="_blank" rel="noopener">minireset&lt;/a>以及 &lt;a href="https://github.com/filipelinhares/ress" target="_blank" rel="noopener">ress&lt;/a>，它们都可以修正很多已知的浏览器之间的差异性。而如果你不打算用某个外在的库，那么建议可以使用如下的基本规则:&lt;/p>
&lt;pre tabindex="0">&lt;code>* {
margin: 0;
padding: 0;
box-sizing: border-box;
}
&lt;/code>&lt;/pre>&lt;p>上面的规则看起来没啥用，不过如果不同的浏览器在默认情况下为你设置了不同的外边距/内边距的默认值，还是会挺麻烦的。&lt;/p>
&lt;h1 id="一切应为-border-box">一切应为 Border-box&lt;/h1>
&lt;p>虽然很多初学者并不了解&lt;code>box-sizing&lt;/code>这个属性，但是它确实相当的重要。而最好的理解它的方式就是看看它的两种取值:&lt;/p>
&lt;ul>
&lt;li>默认值为 content-box，即当我们设置某个元素的 heght/width 属性时，仅仅会作用于其内容尺寸。而所有的内边距与边都是在其之上的累加，譬如某个&lt;code>&amp;lt;div&amp;gt;&lt;/code>标签设置为宽 100，内边距为 10，那么最终元素会占用 120(100 + 2*10)的像素。&lt;/li>
&lt;li>border-box:内边距与边是包含在了 width/height 之内，譬如设置了&lt;code>width:100px&lt;/code>的&lt;code>&amp;lt;div&amp;gt;&lt;/code>无论其内边距或者边长设置为多少，其占有的大小都是 100px。&lt;/li>
&lt;/ul>
&lt;p>将元素设置为 border-box 会很方便你进行样式布局，这样的话你就可以在父元素设置高宽限制而不担心子元素的内边距或者边打破了这种限制。&lt;/p>
&lt;h1 id="以背景图方式使用-images">以背景图方式使用 Images&lt;/h1>
&lt;p>如果需要在响应式的环境下展示图片，有个简单的小技巧就是使用该图片作为某个&lt;code>&amp;lt;div&amp;gt;&lt;/code>的背景图而不是直接使用 img 标签。基于这种方式配合上&lt;code>background-size&lt;/code>与&lt;code>background-position&lt;/code>这两个属性，可以很方便地按比例缩放:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">img&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">div&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">300&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">height&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">url&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http://cdn.tutorialzine.com/wp-content/uploads/2016/08/bicycle.jpg&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-position&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">center&lt;/span> &lt;span class="kc">center&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">background-size&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">cover&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">section&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">float&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">left&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">margin&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过这种方式也是存在缺陷的，譬如你无法设置图片的懒加载、图片无法被搜索引擎或者其他类似的工具抓取到，有个不错的属性叫&lt;a href="http://tutorialzine.com/2016/04/quick-tip-get-to-know-css-object-fit-position/" target="_blank" rel="noopener">object-fit&lt;/a>可以解决这个问题，不过该属性目前的浏览器支持并不是很完善。&lt;/p>
&lt;h1 id="better-table-borders">Better Table Borders&lt;/h1>
&lt;p>HTML 中使用 Tables 进行布局一直是个很头疼的问题，它们使用起来很简单，但是无法进行响应式操作，并且也不方便进行全局样式设置。譬如，如果你打算为 Table 的边与单元的边添加样式，可能得到的结果如下:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">table&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">600&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mh">#505050&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">margin-bottom&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">color&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mh">#505050&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">td&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mh">#505050&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里存在的问题是出现了很多的重复的边，会导致视觉上不协调的情况，那么我们可以通过设置&lt;code>border-collapse:collapse&lt;/code>来进行处理:&lt;/p>
&lt;h1 id="注释格式优化">注释格式优化&lt;/h1>
&lt;p>CSS 虽然谈不上一门编程语言但是其仍然需要添加注释以保障整体代码的可读性，只要添加些简单的注释不仅可以方便你更好地组织整个样式表还能够让你的同事或者未来的自己更好地理解。对于 CSS 中整块的注释或者使用在 Media-Query 中的注释，建议是使用如下形式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="c">/*---------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> #Header
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">---------------*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">header&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">header&lt;/span> &lt;span class="nt">nav&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="c">/*---------------
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"> #Slideshow
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">---------------*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">slideshow&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而设计的细节说明或者一些不重要的组件可以用如下单行注释的方式:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="c">/* Footer Buttons */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">footer&lt;/span> &lt;span class="nt">button&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">footer&lt;/span> &lt;span class="nt">button&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nd">hover&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时，不要忘了 CSS 中是没有 &lt;code>//&lt;/code> 这种注释方式的:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="c">/* Do */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c">/*border: 1px solid #222;*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="c">/* Don&amp;#39;t */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nt">p&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">padding&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">//&lt;/span> &lt;span class="k">border&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="kt">px&lt;/span> &lt;span class="kc">solid&lt;/span> &lt;span class="mh">#222&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="使用-kebab-case-命名变量">使用 Kebab-case 命名变量&lt;/h1>
&lt;p>对于样式类名或者 ID 名的命名都需要在多个单词之间添加&lt;code>-&lt;/code>符号，CSS 本身是大小写不敏感的因此你是用不了 camelCase 的，另一方面，很久之前也不支持下划线，所以现在的默认的命名方式就是使用&lt;code>-&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="c">/* Do */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">footer-column-left&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">/* Don&amp;#39;t */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">footerColumnLeft&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">footer_column_left&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而涉及到具体的变量命名规范时，建议是使用&lt;a href="https://en.bem.info/" target="_blank" rel="noopener">BEM&lt;/a>规范，只要遵循一些简单的原则即可以保证基于组件风格的命名一致性。你也可以参考&lt;a href="https://css-tricks.com/bem-101/" target="_blank" rel="noopener">CSS Tricks&lt;/a>来获得更多的细节描述。&lt;/p>
&lt;h1 id="避免重复代码">避免重复代码&lt;/h1>
&lt;p>大部分元素的 CSS 属性都是从 DOM 树根部继承而来，这也是其命名为级联样式表的由来。我们以&lt;code>font&lt;/code>属性为例，该属性往往是继承自父属性，因此我们并不需要再单独地为元素设置该属性。我们只需要在&lt;code>html&lt;/code>或者&lt;code>body&lt;/code>中添加该属性然后使其层次传递下去即可:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">html&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">font&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="kc">normal&lt;/span> &lt;span class="mi">16&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mf">1.4&lt;/span> &lt;span class="kc">sans-serif&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="使用-transform-添加-css-animations">使用 transform 添加 CSS Animations&lt;/h1>
&lt;p>不建议直接改变元素的&lt;code>width&lt;/code>与&lt;code>height&lt;/code>属性或者&lt;code>left/top/bottom/right&lt;/code>这些属性来达到动画效果，而应该优先使用&lt;code>transform()&lt;/code>属性来提供更平滑的变换效果，并且能使得代码的可读性会更好:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-css" data-lang="css">&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">ball&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">transition&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mf">0.4&lt;/span>&lt;span class="kt">s&lt;/span> &lt;span class="kc">ease-out&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="c">/* Not Cool*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">ball&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">slide-out&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">left&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">500&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="c">/* Cool*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">.&lt;/span>&lt;span class="nc">ball&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nc">slide-out&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">transform&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">translateX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">450&lt;/span>&lt;span class="kt">px&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Transform 的几个属性&lt;code>translate&lt;/code>、&lt;code>rotate&lt;/code>、&lt;code>scale&lt;/code>都具有比较好的浏览器兼容性可以放心使用。&lt;/p>
&lt;h1 id="不要重复造轮子">不要重复造轮子&lt;/h1>
&lt;p>现在 CSS 社区已经非常庞大，并且不断地有新的各式各样的库开源出来。这些库可以帮助我们解决从小的代码片到用于构建完整的响应式应用的全框架。所以如果下次你再碰到什么 CSS 问题的时候，在打算撸起袖子自己上之前可以尝试在&lt;a href="https://github.com/" target="_blank" rel="noopener">GitHUB&lt;/a>或者&lt;a href="http://codepen.io/" target="_blank" rel="noopener">CodePen&lt;/a>上搜索可行方案。&lt;/p>
&lt;h1 id="尽可能使用低优先级的选择器">尽可能使用低优先级的选择器&lt;/h1>
&lt;p>并不是所有的 CSS 选择器的优先级都一样，很多初学者在使用 CSS 选择器的时候都是考虑以新的特性去复写全部的继承特性，不过这一点在某个元素多状态时就麻烦了，譬如下面这个例子:&lt;/p>
&lt;pre tabindex="0">&lt;code>a{
color: #fff;
padding: 15px;
}
a#blue-btn {
background-color: blue;
}
a.active {
background-color: red;
}
&lt;/code>&lt;/pre>&lt;p>我们本来希望将&lt;code>.active&lt;/code>类添加到按钮上然后使其显示为红色，不过在上面这个例子中很明显起不了作用，因为&lt;code>button&lt;/code>已经以 ID 选择器设置过了背景色，也就是所谓的&lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity" target="_blank" rel="noopener">Higher Selector Specificity&lt;/a>。一般来说，选择器的优先级顺序为：ID(#id) &amp;gt; Class(.class) &amp;gt; Type(header)&lt;/p>
&lt;h1 id="避免使用important">避免使用!important&lt;/h1>
&lt;p>认真的说，千万要避免使用!important，这可能会导致你在未来的开发中无尽的属性重写，你应该选择更合适的 CSS 选择器。而唯一的可以使用&lt;code>!important&lt;/code>属性的场景就是当你想去复写某些行内样式的时候，不过行内样式本身也是需要避免的。&lt;/p>
&lt;h1 id="使用-text-transform-属性设置文本大写">使用 text-transform 属性设置文本大写&lt;/h1>
&lt;pre tabindex="0">&lt;code>&amp;lt;div class=&amp;#34;movie-poster&amp;#34;&amp;gt;Star Wars: The Force Awakens&amp;lt;/div&amp;gt;
.movie-poster {
text-transform: uppercase;
}
&lt;/code>&lt;/pre>&lt;h1 id="em-rem-以及-pixel">Em, Rem, 以及 Pixel&lt;/h1>
&lt;p>已经有很多关于人们应该如何使用 em，rem，以及 px 作为元素尺寸与文本尺寸的讨论，而笔者认为，这三个尺寸单位都有其适用与不适用的地方。不同的开发与项目都有其特定的设置，因此并没有通用的规则来决定应该使用哪个单位，这里是我总结的几个考虑:&lt;/p>
&lt;ul>
&lt;li>em – 其基本单位即为当前元素的&lt;code>font-size&lt;/code>值，经常适用于 media-queries 中，em 是特别适用于响应式开发中。&lt;/li>
&lt;li>rem – 其是相对于&lt;code>html&lt;/code>属性的单位，可以保证文本段落真正的响应式尺寸特性。&lt;/li>
&lt;li>px – Pixels 并没有任何的动态扩展性，它们往往用于描述绝对单位，并且可以在设置值与最终的显示效果之间保留一定的一致性。&lt;/li>
&lt;/ul>
&lt;h1 id="在大型项目中使用预处理器">在大型项目中使用预处理器&lt;/h1>
&lt;p>估计你肯定听说过 &lt;a href="http://sass-lang.com/" target="_blank" rel="noopener">Sass&lt;/a>, &lt;a href="http://lesscss.org/" target="_blank" rel="noopener">Less&lt;/a>, &lt;a href="http://postcss.org/" target="_blank" rel="noopener">PostCSS&lt;/a>, &lt;a href="http://stylus-lang.com/" target="_blank" rel="noopener">Stylus&lt;/a>这些预处理器与对应的语法。Preprocessors 可以允许我们将未来的 CSS 特性应用在当前的代码开发中，譬如变量支持、函数、嵌套式的选择器以及很多其他的特性，这里我们以 Sass 为例:&lt;/p>
&lt;pre tabindex="0">&lt;code>$accent-color: #2196F3;
a {
padding: 10px 15px;
background-color: $accent-color;
}
a:hover {
background-color: darken($accent-color,10%);
}
&lt;/code>&lt;/pre>&lt;h1 id="使用-autoprefixers-来提升浏览器兼容性">使用 Autoprefixers 来提升浏览器兼容性&lt;/h1>
&lt;p>使用特定的浏览器前缀是 CSS 开发中常见的工作之一，不同的浏览器、不同的属性对于前缀的要求也不一样，这就使得我们无法在编码过程中记住所有的前缀规则。并且在写样式代码的时候还需要加上特定的浏览器前缀支持也是个麻烦活，幸亏现在也是有很多工具可以辅助我们进行这样的开发:&lt;/p>
&lt;ul>
&lt;li>Online tools: &lt;a href="https://autoprefixer.github.io/" target="_blank" rel="noopener">Autoprefixer&lt;/a>&lt;/li>
&lt;li>Text editor plugins: &lt;a href="https://github.com/sindresorhus/sublime-autoprefixer" target="_blank" rel="noopener">Sublime Text&lt;/a>, &lt;a href="https://atom.io/packages/autoprefixer" target="_blank" rel="noopener">Atom&lt;/a>&lt;/li>
&lt;li>Libraries: &lt;a href="https://github.com/postcss/autoprefixer" target="_blank" rel="noopener">Autoprefixer&lt;/a> (PostCSS)&lt;/li>
&lt;/ul>
&lt;h1 id="在生产环境下使用-minified-代码">在生产环境下使用 Minified 代码&lt;/h1>
&lt;p>为了提升页面的加载速度，在生产环境下我们应该默认使用压缩之后的资源代码。在压缩的过程中，会将所有的空白与重复剔除掉从而减少整个文件的体积大小。当然，经过压缩之后的代码毫无可读性，因此在开发阶段我们还是应该使用普通的版本。对于 CSS 的压缩有很多的现行工具:&lt;/p>
&lt;ul>
&lt;li>Online tools – &lt;a href="https://cssminifier.com/" target="_blank" rel="noopener">CSS Minifier&lt;/a> (API included), &lt;a href="http://csscompressor.com/" target="_blank" rel="noopener">CSS Compressor&lt;/a>&lt;/li>
&lt;li>Text editor plugins: &lt;a href="https://packagecontrol.io/packages/Minify" target="_blank" rel="noopener">Sublime Text&lt;/a>, &lt;a href="https://atom.io/packages/atom-minify" target="_blank" rel="noopener">Atom&lt;/a>&lt;/li>
&lt;li>Libraries: &lt;a href="https://github.com/matthiasmullie/minify" target="_blank" rel="noopener">Minfiy&lt;/a> (PHP), &lt;a href="https://github.com/css/csso" target="_blank" rel="noopener">CSSO&lt;/a> and &lt;a href="http://cssnano.co/" target="_blank" rel="noopener">CSSNano&lt;/a> (PostCSS, Grunt, Gulp)&lt;/li>
&lt;/ul>
&lt;p>选择哪个工具肯定是依赖于你自己的工作流啦~&lt;/p>
&lt;h1 id="多参阅-caniuse">多参阅 Caniuse&lt;/h1>
&lt;p>不同的浏览器在兼容性上差异很大，因此如果我们可以针对我们所需要适配的浏览器，在&lt;a href="http://caniuse.com/" target="_blank" rel="noopener">caniuse&lt;/a>上我们可以查询某个特性的浏览器版本适配性，是否需要添加特定的前缀或者在某个平台上是否存在 Bug 等等。不过光光使用 caniuse 肯定是不够的，我们还需要使用些额外的服务来进行检测。&lt;/p>
&lt;h1 id="validate校验">Validate:校验&lt;/h1>
&lt;p>对于 CSS 的校验可能不如 HTML 校验或者 JavaScript 校验那么重要，不过在正式发布之前用 Lint 工具校验一波你的 CSS 代码还是很有意义的。它会告诉你代码中潜在的错误，提示你一些不符合最佳实践的代码以及给你一些提升代码性能的建议。就像 Minifers 与 Autoprefixers，也有很多可用的工具:&lt;/p>
&lt;ul>
&lt;li>Online tools: &lt;a href="https://jigsaw.w3.org/css-validator/" target="_blank" rel="noopener">W3 Validator&lt;/a>, &lt;a href="http://csslint.net/" target="_blank" rel="noopener">CSS Lint&lt;/a>&lt;/li>
&lt;li>Text editor plugins: &lt;a href="https://packagecontrol.io/packages/W3CValidators" target="_blank" rel="noopener">Sublime Text&lt;/a>, &lt;a href="https://atom.io/packages/csslint" target="_blank" rel="noopener">Atom&lt;/a>&lt;/li>
&lt;li>Libraries: &lt;a href="http://stylelint.io/" target="_blank" rel="noopener">stylelint&lt;/a> (Node.js, PostCSS), &lt;a href="https://www.npmjs.com/package/css-validator" target="_blank" rel="noopener">css-validator&lt;/a> (Node.js)&lt;/li>
&lt;/ul></description></item></channel></rss>