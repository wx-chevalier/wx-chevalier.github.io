<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2018 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/</link><atom:link href="https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/index.xml" rel="self" type="application/rss+xml"/><description>2018</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>2018</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/</link></image><item><title>2018-我的技术之路</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/2018-%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/2018-%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</guid><description>&lt;h1 id="2018-我的技术之路-做些有趣的产品">2018-我的技术之路: 做些有趣的产品&lt;/h1>
&lt;p>年初的时候，我就在想，今年的主题词是什么；上半年考虑的较多的是所谓&lt;strong>研发效能的提升&lt;/strong>，下半年却渐渐发现自己更多的会在想&lt;strong>产品&lt;/strong>这两个字。从代码出发，在写代码的时候会想到模块/库/框架/平台等等概念，但是突兀地发现好像从未想过，做的任何东西都是产品。印象深刻的 Case 就是浏览了 &lt;a href="https://parg.co/64R" target="_blank" rel="noopener">Don’t Make Me Think&lt;/a> 及其他书籍之后，慢慢发现自己之前无论是写页面（譬如&lt;a href="http://wx-chevalier.github.io" target="_blank" rel="noopener">个人主页&lt;/a>）、PPT 还是论文，都推崇草蛇灰线，却是极大地违反了受众的习惯；为了勉励自己能在 2019 年更加的下沉到产品思考，就将本文重定位为，&lt;strong>做些有趣的产品&lt;/strong>。&lt;/p>
&lt;h1 id="github知识检索与知识图谱">Github，知识检索与知识图谱&lt;/h1>
&lt;p>今年投入精力较多的算是对于笔记/代码的重整合，使得各个模块、脉络更为清晰，也方便外化。偶尔会瞅瞅 Github 的总 Star 数，不知不觉终于要破万了，这种行为没啥大意义，但是会告诉我生活不止眼前的苟且或磅礴，还有属于自己的路。阅读，写作，编程本身就是乐趣，而不仅仅是他们的结果。生，活不难，生活却艰难，给人生多&lt;strong>几个坐标，几个赛道&lt;/strong>也是舒缓压力不错的方式。我的 &lt;a href="https://github.com/wx-chevalier" target="_blank" rel="noopener">Github 知识类仓库&lt;/a>，大概分为如下几部分：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/50385677-2996cd80-0714-11e9-8f7f-55945c435375.png" alt="default" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>前几年喜欢强调对于&lt;strong>资讯的掌握程度&lt;/strong>，以逛各种聚合阅读、博客为主，虽然想着要系统化学习，却不可否认地在这里逡巡还是只能窥冰山一角，还是需要阅读大部头的书籍，完整地学习某些课程或者自己从零开始造些玩具轮子。笔者开始降低每日的阅读量，而是尝试改为专题式的学习，每周可以定一个 Topic，专注地，不贪多贪全地去学习。这里 &lt;a href="https://github.com/wx-chevalier/Awesome-CS-Books" target="_blank" rel="noopener">Awesome-CS-Books&lt;/a> 存放了笔者阅读过的书籍以及书摘，而 &lt;a href="https://github.com/wx-chevalier/InfraS-Wheels" target="_blank" rel="noopener">InfraS-Wheels&lt;/a> 则是希望能够在重造轮子的过程中，提升自己的基础掌握与代码实践能力。&lt;/p>
&lt;p>为了方便检索，我也特地重构了&lt;a href="http://wx-chevalier.github.io" target="_blank" rel="noopener">个人主页&lt;/a>，把知识图谱、知识架构与知识检索结合到了一起：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/50374921-2b876080-0630-11e9-87b1-ef3fea261324.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>不得不说，这个个人主页做的极烂，极大地违反了 Don’t Make Me Think 这个原则。交互并不限于界面，应该是完整的用户流程；虽然笔者用了 PWA/Web Worker 等些许的优化手段，网页搜索的响应，包括每次需要打开浏览器，而无法 One Stop 一键直达等性质，让我选择自建了 &lt;a href="https://parg.co/6Vs" target="_blank" rel="noopener">alfred-sg&lt;/a> 这个工具：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/50546216-fd70d480-0c5e-11e9-9b6b-cceaf7860c58.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>可以先在 MAC 上安装效率神器 &lt;a href="https://xclient.info/s/alfred.html" target="_blank" rel="noopener">Alfred&lt;/a>，然后直接使用 NPM 安装即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ npm install -g alfred-sg
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>欢迎使用，欢迎 &lt;a href="https://github.com/wx-chevalier/xCompass/issues" target="_blank" rel="noopener">ISSUE&lt;/a>。做了许久的 MD 工程师，不知道何时能晋升到高级 MD 工程师。&lt;/p>
&lt;h1 id="数据浪潮之间的前端工程师">数据浪潮之间的前端工程师&lt;/h1>
&lt;p>现在是专门做前端的工程师，却感觉自己离前端愈来愈远；今年唯一与前端相关的总结就是&lt;a href="https://parg.co/6KA" target="_blank" rel="noopener">数据浪潮之间的前端工程师&lt;/a>了吧，写完自己却觉得索然无味。数据浪潮之后，有 Web 前端、数据富集与处理、人工智能，自己却更像 API 调用工程师，针对不同的业务场景选择合适的 API，选择合适的模型。&lt;/p>
&lt;p>这里不再赘述，笔者还是想随意说些其他的前端感想：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>No Warning&lt;/strong>，在编写 JS/TS 项目时习惯了不放过任一的 ESLint/TSLint Warning, 很多 Bug 就隐藏在 Warning 之下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>面向重构编程&lt;/strong>，使用 ts；拥抱变化，项目之处的很多规划、设计、业务可能都会改变，不畏变化，随时重构。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>圆角，阴影，边距&lt;/strong>，良好的交互源于细节，产品不仅仅可用就好。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>恰到好处地主动优化&lt;/strong>，平衡用户体感，业务价值与自我排期；过度/提前优化也是万恶之源。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>用产品思维做技术&lt;/strong>，用技术赋能产品。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>GraphQL 并非银弹&lt;/strong>，不建议直接替换客户端的状态管理，详情参看 &lt;a href="https://github.com/wx-chevalier/Awesome-CheatSheets/blob/master/Backend/Architecture/Style/GraphQL-CheatSheet.md" target="_blank" rel="noopener">GraphQL CheatSheet&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="杂谈">杂谈&lt;/h1>
&lt;p>今年年初的时候完成了跳槽，换了个吃饭的地方。即有意料之中，也有意料之外。不过自我的主观情绪确实是有很大的波动，工作的压力，自我的迷茫，更加地勤奋与分秒必争。也会要去关注主要矛盾，不能为，那些重要但是仍为支路，或者无法以主观愿望为转移的事务，过多的倾入情感，平滑这些压力或者挫折；&lt;strong>不断地自我学习，关注行业变化&lt;/strong>。&lt;/p>
&lt;p>这个冬天真的很冷，都冻掉了几层皮,希望来年能温暖一些吧。几年前从创业开始踏入社会，称兄道弟者多，能互称 SD 者少，确实很开心能在新的岗位碰到一群 &lt;strong>SD&lt;/strong>。下半年在新工作岗位上愈发忙碌，写字的时间都少了；有时候也会感慨，愈忙碌，越懒惰，越不能专注与坚持，忙忙碌碌，碌碌无为。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>阅读、记录、整理、编码，在工作的主航道之外还有些通幽曲径，让自己休憩释怀。竞争意识会降低竞争力，使你局限在某个困境或者泥潭中，从而忘记自己的规划与目标。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>思考与执行分离，充分讨论，坚决执行。使用番茄工作法 过多的碎片化信息反而会带来副作用；求全求杂，过多的碎片化工作也很难带来可感的成就感或者可度量的成长。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>我的编程能力不行，所以希望提升编程能力。编程能力是提升研发效能的重要保障，对于笔者而言，良好编程能力的外在表现是能够随时随地用合适的语言无阻塞地实现某些功能需求。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>今年恰好是上一个三年的结束，得失兼有；希望下一个三年，&lt;strong>不负韶华不负卿&lt;/strong>。希望明年，我能继续前行，不再懒惰，能做些有趣的事；有目的的，批量地处理事情，无论是工作，娱乐(刷朋资讯，看漫画)都应该专注地去做。&lt;/p></description></item><item><title>数据浪潮之间的前端工程师</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/%E6%95%B0%E6%8D%AE%E6%B5%AA%E6%BD%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/%E6%95%B0%E6%8D%AE%E6%B5%AA%E6%BD%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%88/</guid><description>&lt;h1 id="数据浪潮之间的前端工程师">数据浪潮之间的前端工程师&lt;/h1>
&lt;p>十年来，波澜壮阔的移动互联网浪潮促进了 Web 技术的迅猛发展，随着浏览器性能、网络带宽等基础设施的提升，Web 也能够承载起包含复杂交互、可视化、计算逻辑需求的富客户端应用。同时 RN, Weex, 小程序为代表的混合式开发日趋成为与 Android、iOS 原生开发并肩的开发模式之一；而 VR, AR, IoT 等新的交互方式或者媒介也正步入消费级市场，原本前端之间的隔阂逐渐消亡，我们慢慢进入了大前端的时代。笔者认为大前端不仅仅是横向地指泛 GUI 的接入端，纵向来看基于 Node.js 的全栈开发、中台化背景下的 BFF 模式，微前端架构等也是大前端的有机组成，也给予了前端工程师更广阔地舞台。&lt;/p>
&lt;h1 id="dt-时代">DT 时代&lt;/h1>
&lt;p>繁多的互联网接入端也催生了海量数据的产生与富集，开启了所谓的 DT 时代；我们利用云计算、人工智能、深度学习等手段分析数据、利用数据，将数据作为燃料，赋能新的商业模式。算法、数据与工程是优秀的智能化产品不可或缺的组成部分，前端作为与数据的产生源头&amp;ndash;用户最贴近的部分，也在未来全连接的架构里迸发出更绚烂的火花。&lt;/p>
&lt;p>前端首先能够通过埋点、监控等方式，采集到用户行为、偏好、应用运行状态等丰富的数据，我们团队(阿里南京 NUE)也自研了高性能 Web 实时录屏与回放的产品，赋能客户服务的体验提升与前端开发者的线上调试。基于数据与算法，前端也可以设计更好地人机交互模式，譬如人脸识别的登录方式、智能问答客服、智能音箱的语音控制；数据可视化也是典型的前端与数据水乳交融的领域，ECharts, G2, D3, Three.js 等框架允许我们更便捷、友好地、深刻地展现统计数据、关系数据、地理空间数据、时间序列数据与文本数据等多源异构数据集。此外，TensorFire, TensorFlow.js 等深度学习框架利用客户端的 GPU 计算能力，pix2code 或者 SketchCode 利用算法来快速实现原型界面，Guess.js 能够帮助优化构建好的包体与智能添加预抓取策略。&lt;/p>
&lt;p>值得一提的是，近几年区块链技术的爆炸性发展也促进了 Web 3.0 概念的思辨与实践，IPFS, Ethereum dApp 等工具或者开发框架允许我们便捷地编写去中心化的 Web 应用。Web 3.0 提倡以人为本，看重隐私，反垄断网络，旨在更开放的网络上进行集体贡献并实现共享利益，这也给予了前端开发者更多样化的未来。在 DT 时代，我们或许不能站在浪潮之巅，但是随波逐流顺势而下也可以找到自己的位置，或高或低地翱翔于天。&lt;/p>
&lt;h1 id="数据流驱动的界面">数据流驱动的界面&lt;/h1>
&lt;p>数据的核心操作是存储与计算，传统的 Web 应用因为单线程与离线不可用性往往是即用即走，而 PWA 这样的应用设计模式，提倡使用 Service Worker 添加离线支持，充分利用 IndexDB, CacheAPI 等进行灵活地数据存储与检索，并且给予用户贴近原生的体验。另一方面，Web Worker, WebAssembly 等亦从不同的方面释放或者增强前端的计算能力，不仅使得 Web 中运行高性能要求的应用或动画，也可以借鉴边缘计算的理念，未来将更多地数据聚合、计算的逻辑前移。感性地说，当数据逐渐活跃、富集，如百川汇海，自然需要流动起来。&lt;/p>
&lt;p>广义的数据流驱动的界面有很多的理解，其一是界面层的从以 DOM 操作为核心到逻辑分离，其二是数据交互层的前后端分离。在 jQuery 时代，我们往往将 DOM 操作与逻辑操作混杂在一起，再加上模块机制的缺乏使得代码的可读性、可测试性与可维护性极低；随着项目复杂度的增加、开发人员的增加与时间的推移，项目的维护成本会以几何级数增长。随着 ES6 Modules 的广泛应用，我们在前端开发中更易于去实践 SRP 单一职责原则，也更方便地去编写单元测试、集成测试等来保证代码质量。而像 React、Vue 这样现代的视图层库为我们提供了声明式组件，托管了从数据变化到 DOM 操作之间的映射，使得开发者能够专注于业务逻辑本身。并且 Redux, MobX 这样独立的状态管理库，又可以将产品中的视图层与逻辑层剥离，保证了逻辑代码的易于测试性与跨端迁移性，促进了前端的工程化步伐。&lt;/p>
&lt;p>近两年来随着无线技术的发展和各种智能设备的兴起，互联网应用演进到以 API 驱动的无线优先(Mobile First)和面向全渠道体验(Omni-channel Experience Oriented)的时代，BFF 这样前端优先的 API 设计模式与 GraphQL 这样的查询语言也得到了大量的关注与应用。GraphQL 是由 Facebook 开源的查询语言标准，包含了数据格式、数据关联、查询方式定义与实现等等一揽子东西的数据抽象层。GraphQL 并不能消融业务内在的复杂度，而是通过引入灵活的数据抽象层，尽量解耦前后端之间的直接关联或者阻塞；在满足日益增长不断变化的 Web/Mobile 端复杂的数据需求的同时，尽可能避免服务端内部逻辑复杂度的无序增加。&lt;/p>
&lt;h1 id="工程化与微前端">工程化与微前端&lt;/h1>
&lt;p>编程生态往往会经历三个阶段：涌现大量工具的原始阶段、复杂度提升后引入大量设计模式的框架阶段、具有更好的团队组织与协调机制的工程化阶段。大部分时候我们谈论到工程化这个概念的时候，往往指的是工具化；工具的存在是为了帮助我们应对复杂度，在技术选型的时候我们面临的抽象问题就是应用的复杂度与所使用的工具复杂度的对比。而工程化，即是面向某个产品需求的技术架构与项目组织，致力于尽可能快的速度实现可信赖的产品；尽可能短的时间包括开发速度、部署速度与重构速度，而可信赖又在于产品的可测试性、可变性以及 Bug 的重现与定位。&lt;/p>
&lt;p>在 DT 时代中，很多公司也开启了大中台，小前台的战略，即在中台中完成一系列可开放能力的聚合，赋能前端业务，加速迭代开发。工程化是中台化的基石，通过制定标准化的规范、基于元数据的可配置业务流等，完成前后端的业务衔接；而统一的服务中台又是在复杂业务场景下实现微前端/微服务的保障。微服务与微前端，都是希望将某个单一的单体应用，转化为多个可以独立运行、独立开发、独立部署、独立维护的服务或者应用的聚合，从而满足业务快速变化及分布式多团队并行开发的需求。微前端的落地，需要考虑到产品研发与发布的完整生命周期；我们会关注如何保证各个团队的独立开发与灵活的技术栈选配，如何保证代码风格、代码规范的一致性，如何合并多个独立的前端应用，如何在运行时对多个应用进行有效治理，如何保障多应用的体验一致性，如何保障个应用的可测试与可依赖性等方面。&lt;/p>
&lt;p>最后，对于个人而言，随着团队技术栈的相对稳定，关注点也会逐步从组件库的建设变化为基础设施的建设，从考虑选择怎样的技术栈到如何在立足某个技术栈更好地服务于业务规划。这个知识爆炸与终身学习/碎片化学习为主的时代，我们要进行更有效地学习，从知识广度，编程能力与知识深度等方面提升自己。&lt;/p></description></item><item><title>我在菊场这一年</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/%E6%88%91%E5%9C%A8%E8%8F%8A%E5%9C%BA%E8%BF%99%E4%B8%80%E5%B9%B4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/%E6%88%91%E5%9C%A8%E8%8F%8A%E5%9C%BA%E8%BF%99%E4%B8%80%E5%B9%B4/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-6bede989c09af527.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="我在菊场这一年">我在菊场这一年&lt;/h1>
&lt;p>尚未入职的时候我就会想，这篇文章的标题会是怎样，一年？两年？更短，或者更长。尘埃落定，虽只有大半年的时间，四舍五入下，还是写成了一年。2016 年中，彼时尚未毕业，也尚未入职，耳闻一些消息，写下了&lt;a href="https://parg.co/UTA" target="_blank" rel="noopener">怀着被抛弃的恐惧在奋斗中前行&lt;/a>；现在看来，也不过是人云亦云罢了。我读书少，却也是发自内心的敬佩公司和团队；这是一个伟大的公司，有着一致的目标与坚韧的团队，能成他人不能之事。不过其模式确实也难以复制，特别是对于初创团队，某些优秀的特性反而会是致命毒药。&lt;/p>
&lt;p>入职之前，断断续续也有个几年不成气候的数十人的创业型技术团队协调经验，也算是带着许多的疑问与求教的心加入；大半年下来，印象或者说感悟最深的，当属“研发效能”与“组织气氛”这两个词。不同公司的模式，价值观可能是截然不同的，个人浅见，菊场能够以其强力的目标管理与组织气氛，磨平棱角，将不同能力、背景的人绑合在一起，形成强大战斗力。而一些公司则是会更强调选择合适的人，充分发挥个人的主观能动性，最终形成快速突击的能力。汝之蜜糖,彼之砒霜，不同背景、能力、想法的人的最佳选择自然也是不一样的，适合的场所也是不一样；对于大部分普通人而言，尽量让自己顺势而行，莫逆流而上。&lt;/p>
&lt;p>技术人员可能会陷入自己的理想国，从四年前初创团队开始，不断地与真实进行磨合，认识到世界，或者说是人的多样性。很多时候并无法做最好的选择，只能做最合适的选择；存在即有其合理性，面对现实，忠于理想，命运还是要掌握在自己手里。&lt;/p>
&lt;p>研发效能是广泛而又直观的概念，笔者目前以该词来度量某个研发团队的真实价值，在下文有详细阐述。而组织气氛，却是笔者之前尚未认真考虑或面对过的；从学校里出来，没经历过正规军，可能会觉得大家每天开开心心就足够了。与经历过物质较为匮乏年代的 80 后相比，对于 90 后一代管理的复杂性也在不断增加；物质生活的相对富裕使得并不能简单的物质激励就能解决一切问题，我们可能会考虑个人的兴趣，考虑未来的空间等等。这也就意味着针对合适的岗位，招聘合适的人也愈发困难；才不配位，对团队与个人都有压力，太多优秀则又难以安定，往往也会给团队带来噪音，使得难以力出一孔。从工作本身，无论喜欢或者排斥，干好本职工作都应该是程序员的基本素养。我也看到了些许因为环境的不合适，或者期望落空导致的消极与抵抗，不利于自己，也不利于团队。人生苦短，及时发泄，不喜欢就转换方向，何必怨天尤人，即委屈了自己，也委屈了他人。&lt;/p>
&lt;p>时间尚短，感慨不多，本文也聊为注脚，提醒自己莫忘所得。下文是笔者的 &lt;a href="https://github.com/wx-chevalier/Awesome-Coder" target="_blank" rel="noopener">Awesome Coder&lt;/a> 的导读语，加在此处也作为笔者对于研发效能的浅述。&lt;/p>
&lt;p>在这个知识爆炸与终身学习/碎片化学习为主的时代，我们面临的问题之一就是如何进行有效学习，不仅能有效平衡广度与深度，并且能真正的积淀下来，提升自己的研发效能。笔者个人浅论，技术能力的培养主要分为三个方面：知识广度，编程能力与知识深度。&lt;/p>
&lt;p>所谓知识广度，即是为实际问题选择合适的解决方案的能力，广义来说也是眼界与格局的表现。它并不拘泥于某个技术方向或者行业领域，而需要对传统/流行的各类语言、工具、框架、库、服务等有一定的认识；能够明晰各个方案的优劣，并在较高的层次(High Level)描述相关原理。知识广度的拓展与保持需要建立在庞大的阅读量与知识沉淀能力上，笔者习惯利用碎片时间浏览 HN, Reddit, Medium, Twitter 来了解资讯文章，在维护 &lt;a href="https://parg.co/UHG" target="_blank" rel="noopener">Frontend Weekly, 每周阅读清单与前端开发周报&lt;/a>的过程中也不断强迫自己去阅读与探究。另一方面，笔者坚定地即认为，唯有建立符合自己认知方式的知识图谱，才能有效地沉淀知识，明晰知识边界并进行不断地探索。上车伊始，笔者即致力于构建自己的 &lt;a href="./MindMap">MindMap, IT 技术图谱与知识架构&lt;/a>，并在数年来不断维护与刷新；同时，笔者将日常阅读、学习与实践中发掘的优秀的资料，按照知识图谱中定义的各个领域的知识体系分门别类地存放在 &lt;a href="https://github.com/Awesome-Lists" target="_blank" rel="noopener">AwesomeList: Guide to Galaxy&lt;/a> 中，以方便快速地检索与查找。&lt;/p>
&lt;p>知识广度的拓展也并非一蹴而就之事，需得循序渐进，从初窥门径，到登堂入室，最后融会贯通；笔者这几年技术视野与能力的变迁，亦可以参考仓库中的 &lt;a href="./%e6%8a%80%e6%9c%af%e4%b9%8b%e8%b7%af">技术之路, 技术之路&lt;/a>系列文章。另一方面，乱花渐欲迷人眼，太多的碎片化知识反而会使人迷失方向；此时便需要不断阅读 &lt;a href="https://github.com/wx-chevalier/Awesome-CS-Books" target="_blank" rel="noopener">Awesome-CS-Books&lt;/a> 中收录的优秀书籍/系列。&lt;/p>
&lt;p>所谓编程能力，其外在表现之一即是能够随时随地用合适的语言无阻塞地实现某些功能需求，对于常见的语法，接口，算法，设计模式等能够做到心随意动，信手拈来。编程能力是提升研发效能的重要保障，于笔者而言也是毕生应该追求的目标与爱好之一。笔者的编程能力较弱，日常开发，特别是在多语言多框架并用的场景下，往往会需要不断地中断，查找以继续工作，也是令我颇为苦恼。笔者目前是致力于完善 &lt;a href="https://github.com/wx-chevalier/Awesome-CheatSheets" target="_blank" rel="noopener">Awesome Cheatsheet: 语法速览, 实践备忘，从零到一，上手即用&lt;/a>，对于日常开发中用到的相关知识的备忘录/清单进行总结, 快速掌握或者回顾某个语言/框架/工具的语法或使用要点。同时将常用的，有借鉴或者锻炼价值的代码片，沉淀到 &lt;a href="https://github.com/wx-chevalier/coding-snippets" target="_blank" rel="noopener">coding-snippets: Code Snippets, DataStructure, Algorithm and DesignPattern Implementations for Several Programming Language, Web, etc.&lt;/a> 中。&lt;/p>
&lt;p>所谓知识深度，即是能够对某个方面做到深入了解，并且达到融会贯通，洞若观火，可以随心所欲地加以扩展、优化、创新等改造或变换。这方面则更加的见仁见智，不同的领域与方向对于深度的定义与挖掘方向也是千差万别。笔者自知能力有限，也不敢妄加评判，根据自己浅薄的认知将常见的工程师成长路径总结在了 &lt;a href="./RoadMap">RoadMap, 成长路线图&lt;/a> 中，此外若有兴趣可以前往笔者的 &lt;a href="https://github.com/wx-chevalier?tab=repositories" target="_blank" rel="noopener">Github 笔记仓库&lt;/a>浏览指正某些领域的浅薄探究。&lt;/p>
&lt;p>感谢，菊场；你好，未来几年的伙伴们。&lt;/p></description></item><item><title>知识管理与高效学习</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E4%B8%8E%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/2018/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E4%B8%8E%E9%AB%98%E6%95%88%E5%AD%A6%E4%B9%A0/</guid><description>&lt;p>题注：欢迎关注 &lt;a href="https://zhuanlan.zhihu.com/ali-nanjing" target="_blank" rel="noopener">阿里南京技术专刊&lt;/a>，也欢迎投递简历，发送邮件到 &lt;a href="mailto:zixiong.zzx@alibaba-inc.com">zixiong.zzx@alibaba-inc.com&lt;/a>，诚邀各路大佬前来指教。&lt;/p>
&lt;h1 id="知识管理笔记系统与高效学习">知识管理，笔记系统与高效学习&lt;/h1>
&lt;p>在这个焦虑的时代，唯有不断地，自我可观测的成长，才能给予自己不断挑战地动力。知识管理是为了更高效地学习，所谓高效，一个是有效，看到的、实践的能真正沉淀下来；二个是效率高，能够用尽可能短地时间去掌握相关的知识。高效学习地目的是为了更好地转化为生产力，转化为个人或者团队的研发效能。&lt;/p>
&lt;p>&lt;strong>笔记系统，是知识管理中不可或缺的一部分。&lt;/strong>&lt;/p>
&lt;p>这是一个知识爆炸的年代，我们面对的矛盾不再是无处学习，而是学习的速度跟不上新知识产生的速度，这个时代已经容不得我们过于缓慢。弱水三千，只取一瓢；知行合一，方成大器。我看来的知行合一，也是分为两个方面，一是以更高层次的知驱动正确的行，这就是下文会提及的以高于自己当前层次的知识体系让自己更有效地学习与积累。另一个是以可以实现的行去驱动自己的认知衍化，这里的行主要就是阅读与实践，而这里的认知衍化绝不是简单的了解某个概念、名词，而是能够将知识填充到前者所谓的知识体系中，并不断地扩充、完善这个知识体系。&lt;/p>
&lt;h1 id="知识管理与知识图谱">知识管理与知识图谱&lt;/h1>
&lt;p>技术分为术与道两者，术即是具体的做事的方法，而道则是做事的逻辑抽象的原则与原理。构建专属笔记系统的目的，是为了让自己更好地管理知识，既能够避免自己重复地学习，来使自己能够接触到更广泛或者更深度的知识，探索属于自己的道；也能够通过快速命中有效方案，来提升自己及所在团队的研发效能，从而高效地利用已有的术去解决问题。于笔者自身而言，构建笔记系统的初衷并非是想让自己不去忘记什么，而是希望能够在需要的时候，以适合自己思维、理解的方式，快速地重新掌握。&lt;/p>
&lt;p>参考杰瑞德·霍瓦特的研究(引用李翔知识内参)，在互联网时代，回想记忆(Recall Memory)，也就是大脑自发地调用信息去回忆过去的能力，已经变得不那么重要了，认知记忆(Recognition Memory)，即记住大量事物、地方以及各种人物形象的能力才最重要。他说：“只要你知道在哪儿可以查到这个信息、如何查找，就不需要回忆它了。”互联网相当于我们的外部记忆(Externalized Memory)，有一项研究指出：“如果人们知道他们能在网上获取信息，那么他们回忆信息的机率就较小。” 同时，这又是一个碎片化阅读的时代，两相结合，会让我们觉得自己持续地学到了东西，却也可能只是虚假的满足感。我们既要利用这种特性，利用互联网提供的便捷的检索、阅读，去构建专属的外部记忆；就像建立缓存服务器一样，我们可以直接去获取，而不需要费时费力的重新检索、筛选。同时也需要真的沉淀下来，脱离碎片化获取带来的混淆与可能的肤浅，真的能成体系地，探究到某项技术或某个领域的深层知识、实践。&lt;/p>
&lt;p>知识管理的首个难点，在于知识的检索，与更新；直观地来说，就是当我们想到某个知识时，应该如何去找到对应的笔记，或者说当我们想去记录某些心得体会时，应该把它们放在什么地方。一般来说，目前的笔记组织结构，可以是树形层级目录式，就像思维脑图一样，从某个点展开，延伸到各个具体的技术领域；也可以是标签式，即为每个笔记进行人工地主题词提取，然后依赖于搜索功能进行检索。笔者上车伊始，即主张：知识应该放在它应该在的地方，因此数年来一直以近乎强迫的方式，去构建 &lt;a href="https://github.com/wx-chevalier/Awesome-Coder/blob/master/MindMap/README.md" target="_blank" rel="noopener">ITCS 技术体系与知识图谱&lt;/a>，并且将其作为泛笔记系统的目录规范。这种细致的划分方式，往往会随着自身对于技术世界的认知变化而不断衍化，因此也是建立在广泛的阅读、涉猎的基础上；不过磨刀不误砍材工，若能坚持下来，浇灌培育出属于自己的知识体系树，也是别有一番滋味在心头。&lt;/p>
&lt;h1 id="笔记系统与类型划分">笔记系统与类型划分&lt;/h1>
&lt;p>有了遨游星海的星图指引，我们就要开始逐个探索美丽的知识星球了。根据知识本身的特点，使用的频次，检索与更新的方式，我们又可以将笔记分为索引式、清单式、书籍式与代码式；下面我会结合自身的实践认知，来阐述这几个不同类型的笔记的构建与使用。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>索引式笔记，典型的代表是 &lt;a href="https://github.com/wx-chevalier/Awesome-Lists" target="_blank" rel="noopener">Awesome Links&lt;/a>，其按照知识图谱来将各个领域的有效的链接沉淀下来。与 Google 这样搜索引擎搜出的结果相比，其含金量会更高。一方面，纳入到 AwesomeList 当中的链接，往往都是自身阅读、筛选过的，尽可能去芜存菁，去重留一，无论是分享某个技术领域的文章给他人，还是自己学习阅读，都能够避免冗余阅读。另一方面，很多优秀的文章并不一定会出现在搜索引擎的前几页，而是需要依靠自己日常浏览中主动发现、归纳。&lt;a href="https://github.com/wx-chevalier/Awesome-Lists" target="_blank" rel="noopener">Awesome Links&lt;/a> 中还包含了很重要的一个部分，&lt;code>*-OpenSource-List&lt;/code>，是对于各个领域的常见开源项目的归档；即可以方便快速查找所需的框架与库、开发工具等，也能够提供一些优秀的，可以借鉴的开源项目来学习。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>清单式笔记，典型的代表是 &lt;a href="https://github.com/wx-chevalier/Awesome-CheatSheets" target="_blank" rel="noopener">Awesome CheatSheet&lt;/a>，即是对于某个领域、方向的精华，以及日常工作中常用知识点的归档。无论是快速学习，还是作为日常开发中的工具手册，都是极好的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>书籍式笔记，即可以是 &lt;a href="https://github.com/wx-chevalier/Awesome-CS-Books" target="_blank" rel="noopener">Awesome-CS-Books&lt;/a> 这样对于优秀书籍的搜集，也可以是 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&lt;/a>，&lt;a href="https://github.com/wx-chevalier/Distributed-Infrastructure-Series" target="_blank" rel="noopener">深入浅出分布式基础架构&lt;/a> 等这样子各个领域的自己的笔记的编排。值得一提的是，书籍式笔记，并不强调一定要遵循知识图谱的结构，而是赋予其一定灵活性，以方便记录与交流。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>代码式笔记，典型的代表是 &lt;a href="https://github.com/wx-chevalier/coding-snippets" target="_blank" rel="noopener">coding-snippets&lt;/a>, 对于程序员这个角色而言，代码也是我们笔记系统的重要组成。在这个之上，我们又可以构建出一系列小的项目。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>讲了一些，都是笔者这几年的心得体会；构建知识体系、笔记系统也并非一蹴而就之事，而且每个人皆有其独特的方式与目标，可以先读而后记，而后边读边记，最后成一家之言。每当抬头仰望浩瀚、无垠，且不断变化，有无数璀璨明星闪烁的知识星海，不免会觉得有疲惫与无力感；而正是自己这么多年构建下的知识体系与笔记系统，成为了我遨游星海，领略美景的一叶扁舟。&lt;/p></description></item></channel></rss>