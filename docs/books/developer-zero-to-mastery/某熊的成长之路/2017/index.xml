<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2017 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/</link>
      <atom:link href="https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/index.xml" rel="self" type="application/rss+xml" />
    <description>2017</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>2017</title>
      <link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/</link>
    </image>
    
    <item>
      <title>2017-Web 进阶路线图</title>
      <link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/2017-web-%E8%BF%9B%E9%98%B6%E8%B7%AF%E7%BA%BF%E5%9B%BE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/2017-web-%E8%BF%9B%E9%98%B6%E8%B7%AF%E7%BA%BF%E5%9B%BE/</guid>
      <description>&lt;h1 id=&#34;2017-web-进阶路线图&#34;&gt;2017 Web 进阶路线图&lt;/h1&gt;
&lt;h1 id=&#34;前言&#34;&gt;前言&lt;/h1&gt;
&lt;p&gt;本书囊括了笔者五年来在前端工程领域的实践总结，笔者希望对于不同等级的开发者都能有所收获。本书最核心的目标&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;希望对于没有经验的开发者能够在本书选定的最短路径上快速成为一名合格的现代前端开发者。每一小节都会讲解最基础的语法或者使用要点，但是不会长篇大论地介绍语法细节这些应该查看文档的内容。通过简单的示例快速上手之后，笔者会介绍很多工程当中的具体实践。可能刚入门的开发者并不能理解这些实践的意义或者价值，但是首先保证能用，而后在自己的实践中慢慢回味，逐渐明了。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;而对于有一定前端开发经验的开发者，本书能够帮你梳理现代纷繁复杂的前端开发状况，探寻百花齐放的工具库背后蕴藏的设计理念与编程范式，最终融会贯通，形成自己的前端工程化思想与体系。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本书最大的优势在于形成了完整的知识体系结构，让你合理归纳自己学到的知识，将知识放在它该在的地方。另外笔者想强调的是，无论 React 还是 Vue 或者 Angular2 都是非常优秀的前端框架，使用哪个框架还是属于术的范畴。本书虽然立足于 React，但是其中蕴含的设计模式与工程架构可以通用于任何框架。笔者也着力于不希望受到某个具体框架的太多的束缚，毕竟在这个日新月异的前端世界，说不准哪天就落于人后了。读者阅读完本书之后，参照 Demo 的流程可形成属于自己的组件库。&lt;/p&gt;
&lt;h1 id=&#34;序&#34;&gt;序&lt;/h1&gt;
&lt;h1 id=&#34;第一部分-初窥门径看山是山&#34;&gt;第一部分 初窥门径，看山是山&lt;/h1&gt;
&lt;h1 id=&#34;hyper-text-markup-language10-页&#34;&gt;Hyper Text Markup Language，10 页&lt;/h1&gt;
&lt;h2 id=&#34;html-语法基础5-页&#34;&gt;HTML 语法基础，5 页&lt;/h2&gt;
&lt;h3 id=&#34;html&#34;&gt;HTML&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;介绍基本的 div、p、a、script ( asyhc 属性)&lt;/li&gt;
&lt;li&gt;介绍 meta 属性 doctype viewport&lt;/li&gt;
&lt;li&gt;介绍 HTML 方面的优化小知识&lt;/li&gt;
&lt;li&gt;HTML5 Boilerplate&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;h53-页&#34;&gt;H5，3 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;介绍 HTML5 规范，讲明 H5 到底是什么&lt;/li&gt;
&lt;li&gt;介绍 H5 实现的典型事件，譬如地理位置、触感等等&lt;/li&gt;
&lt;li&gt;基本的基于 H5 的小 Demo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;semantic-html2-页&#34;&gt;Semantic HTML，2 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;介绍语义化 HTML 布局&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;css20-页&#34;&gt;CSS,20 页&lt;/h1&gt;
&lt;h2 id=&#34;css-语法基础3-页&#34;&gt;CSS 语法基础，3 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;介绍 CSS 基础选择器，包含选择器优先级&lt;/li&gt;
&lt;li&gt;CSS 引入方式&lt;/li&gt;
&lt;li&gt;介绍 BEM 命名法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-元素样式5-页&#34;&gt;CSS 元素样式，5 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;介绍基本的尺寸设置，介绍尺寸单位，还有 width、height/line-heght (垂直居中)等属性&lt;/li&gt;
&lt;li&gt;介绍基本的文本属性，包括字体大小、文本省略、文本换行等&lt;/li&gt;
&lt;li&gt;介绍基本的背景属性&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-元素定位盒模型与文档流3-页&#34;&gt;CSS 元素定位：盒模型与文档流，3 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;介绍盒模型，包括内边距，边框，外边距，连写情况下顺序(上下 左右；上右下左)，以及边距合并，百分比值效果&lt;/li&gt;
&lt;li&gt;介绍文档流，，介绍基本定位方法，提及 float&lt;/li&gt;
&lt;li&gt;介绍所谓的七种居中方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flexbox-与网格系统3-页&#34;&gt;Flexbox 与网格系统，3 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;介绍 CSS 网格系统的理念与传统做法&lt;/li&gt;
&lt;li&gt;介绍 Flexbox 基础语法&lt;/li&gt;
&lt;li&gt;介绍 Flexbox 的 Polyfill&lt;/li&gt;
&lt;li&gt;介绍 Flexbox 的使用示范&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;scss2-页&#34;&gt;SCSS，2 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SCSS 语法基础与基本用法，建议使用 node-sass 编译&lt;/li&gt;
&lt;li&gt;SCSS 文件组织与命名规范(BEM-SCSS )&lt;/li&gt;
&lt;li&gt;常用的 SCSS 辅助库，home.scss，等 Todo&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;css-工程实践4-页&#34;&gt;CSS 工程实践，4 页&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CSS 样式指南，1 页&lt;/li&gt;
&lt;li&gt;CSS Linting，1 页&lt;/li&gt;
&lt;li&gt;CSS 目录结构，1 页&lt;/li&gt;
&lt;li&gt;CSS reset，1 页&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javascript255-页&#34;&gt;JavaScript，25.5 页&lt;/h2&gt;
&lt;h3 id=&#34;javascript-语法基础9-页&#34;&gt;JavaScript 语法基础，9 页&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 和 ECMScript 的演化过程，1 页&lt;/li&gt;
&lt;li&gt;JavaScript 基本变量定义、声明(变量提升)，2 页&lt;/li&gt;
&lt;li&gt;node 环境搭建(npm，cnpm,nvm 的基本使用，babel-node 的安装),2 页&lt;/li&gt;
&lt;li&gt;es6 模块系统(简单命令行例子，babel-node 运行)，1 页&lt;/li&gt;
&lt;li&gt;介绍变量赋值方法，解构赋值，1 页&lt;/li&gt;
&lt;li&gt;常见类型列表和类型转换，2 页
&lt;h3 id=&#34;javascript-数据结构45-页&#34;&gt;JavaScript 数据结构，4.5 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;数组类型，1.5 页&lt;/li&gt;
&lt;li&gt;字符串类型，1.5 页&lt;/li&gt;
&lt;li&gt;时间与日期类型，1.5 页&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;javascript-控制流3-页&#34;&gt;JavaScript 控制流，3 页&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;循环，2 页&lt;/li&gt;
&lt;li&gt;异常处理，1 页
&lt;h3 id=&#34;javascript-函数6-页&#34;&gt;JavaScript 函数，6 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;函数定义，1 页&lt;/li&gt;
&lt;li&gt;函数参数，1 页&lt;/li&gt;
&lt;li&gt;函数调用，2 页&lt;/li&gt;
&lt;li&gt;词法作用域与闭包，2 页
&lt;h3 id=&#34;javascript-类与对象6-页&#34;&gt;JavaScript 类与对象，6 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;class，属性定义(语法糖)，1 页&lt;/li&gt;
&lt;li&gt;方法，构造器(单例模式)，原型，快速 ORM，3 页&lt;/li&gt;
&lt;li&gt;类继承，2 页
&lt;h2 id=&#34;dom165-页&#34;&gt;DOM，16.5 页&lt;/h2&gt;
&lt;h3 id=&#34;元素选择与操作45-页&#34;&gt;元素选择与操作，4.5 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;DOM 选择器，选择器 polyfill，1.5 页&lt;/li&gt;
&lt;li&gt;属性的判断和获取，1.5 页&lt;/li&gt;
&lt;li&gt;常见元素操作(元素创建、插入)，1.5 页
&lt;h3 id=&#34;事件响应4-页&#34;&gt;事件响应，4 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;event 对象与事件绑定及参数传递，2 页&lt;/li&gt;
&lt;li&gt;事件分发传递、常用事件列表，2 页
&lt;h3 id=&#34;ajax4-页&#34;&gt;Ajax，4 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;XHR 对象，1 页&lt;/li&gt;
&lt;li&gt;fetch，1 页&lt;/li&gt;
&lt;li&gt;cors，2 页
&lt;h3 id=&#34;客户端存储4-页&#34;&gt;客户端存储，4 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;Cookie，1 页&lt;/li&gt;
&lt;li&gt;localstorage，session storage，2 页&lt;/li&gt;
&lt;li&gt;websql，indexdb，1 页
&lt;h1 id=&#34;常用的前端工具库9-页&#34;&gt;常用的前端工具库，9 页&lt;/h1&gt;
&lt;h2 id=&#34;jquery5-页&#34;&gt;jQuery，5 页&lt;/h2&gt;
&lt;h3 id=&#34;jquery-基础2-页&#34;&gt;jQuery 基础，2 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;jQuery 选择器，0.5 页&lt;/li&gt;
&lt;li&gt;jQuery 元素操作，0.5 页&lt;/li&gt;
&lt;li&gt;jQuery 事件绑定，0.5 页&lt;/li&gt;
&lt;li&gt;jQuery 动画，0.5 页&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;jquery-plugins2-页&#34;&gt;jQuery Plugins，2 页&lt;/h3&gt;
&lt;p&gt;本章节介绍部分优秀的 jQuery Plugins&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fullPage.js&lt;/code&gt;，1 页&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LightBox&lt;/code&gt;，1 页
&lt;h3 id=&#34;你并不需要-jquery1-页&#34;&gt;你并不需要 jQuery，1 页&lt;/h3&gt;
&lt;h2 id=&#34;lodashunderscore2-页&#34;&gt;Lodash/Underscore，2 页&lt;/h2&gt;
&lt;h3 id=&#34;lodashunderscore-基础1-页&#34;&gt;Lodash/Underscore 基础，1 页&lt;/h3&gt;
&lt;h3 id=&#34;你并不需要-lodashunderscore1-页&#34;&gt;你并不需要 Lodash/Underscore，1 页&lt;/h3&gt;
&lt;h2 id=&#34;pattern-library2-页&#34;&gt;Pattern Library，2 页&lt;/h2&gt;
&lt;h3 id=&#34;jquery-ui1-页&#34;&gt;jQuery UI，1 页&lt;/h3&gt;
&lt;h3 id=&#34;bootstrap1-页&#34;&gt;BootStrap，1 页&lt;/h3&gt;
&lt;h1 id=&#34;react-初探&#34;&gt;React 初探&lt;/h1&gt;
&lt;h2 id=&#34;数据流驱动的页面2-页&#34;&gt;数据流驱动的页面，2 页&lt;/h2&gt;
&lt;/li&gt;
&lt;li&gt;本部分主要介绍 React 设计思想，从命令式编程到声明式编程的变化，及以 jQuery 与 React 实现相同功能的例子对比。
&lt;h2 id=&#34;搭建你的脚手架75-页&#34;&gt;搭建你的脚手架，7.5 页&lt;/h2&gt;
&lt;h3 id=&#34;create-react-app25-页&#34;&gt;create-react-app，2.5 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;引导建立 hello-world app，2 页&lt;/li&gt;
&lt;li&gt;介绍 yarn，0.5 页
&lt;h3 id=&#34;webpack-入门5-页&#34;&gt;webpack 入门，5 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;JavaScript 模块化发展历程与 webpack 介绍，1 页&lt;/li&gt;
&lt;li&gt;webpack 的 hello-world 应用引导，1.5 页&lt;/li&gt;
&lt;li&gt;基于 webpack 的 react 最简应用搭建，2.5 页&lt;/li&gt;
&lt;li&gt;列举一些 boilerplate 及评价，0.5 页
&lt;h2 id=&#34;react-组件16-页&#34;&gt;React 组件，16 页&lt;/h2&gt;
&lt;h3 id=&#34;jsx3-页&#34;&gt;JSX，3 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;JSX 基础与转化，1 页&lt;/li&gt;
&lt;li&gt;语法，2 页
&lt;h3 id=&#34;组件基本介绍4-页&#34;&gt;组件基本介绍，4 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;组件声明，说明 createClass 与继承的关系，2 页&lt;/li&gt;
&lt;li&gt;state，1 页&lt;/li&gt;
&lt;li&gt;props，1 页&lt;/li&gt;
&lt;li&gt;context，1 页
&lt;h3 id=&#34;组件生命周期3-页&#34;&gt;组件生命周期，3 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;正常生命周期，2 页&lt;/li&gt;
&lt;li&gt;无状态组件生命周期，1 页
&lt;h3 id=&#34;组件样式4-页&#34;&gt;组件样式，4 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;行内样式设定，1 页&lt;/li&gt;
&lt;li&gt;CSS 样式, 类名与模块化，2 页&lt;/li&gt;
&lt;li&gt;基于 context 的主题传递，1 页
&lt;h3 id=&#34;组件中-dom-处理2-页&#34;&gt;组件中 DOM 处理，2 页&lt;/h3&gt;
&lt;/li&gt;
&lt;li&gt;findDOMNode,0.5&lt;/li&gt;
&lt;li&gt;refs 与 jQuery 的封装使用 ,1.5 页
&lt;h2 id=&#34;react-事件交互&#34;&gt;React 事件交互&lt;/h2&gt;
&lt;h3 id=&#34;react-事件绑定与处理&#34;&gt;React 事件绑定与处理&lt;/h3&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;react-合成事件&#34;&gt;React 合成事件&lt;/h3&gt;
&lt;h3 id=&#34;react-事件列表&#34;&gt;React 事件列表&lt;/h3&gt;
&lt;h2 id=&#34;react-router&#34;&gt;React Router&lt;/h2&gt;
&lt;h3 id=&#34;路由配置&#34;&gt;路由配置&lt;/h3&gt;
&lt;h3 id=&#34;路由控制&#34;&gt;路由控制&lt;/h3&gt;
&lt;h1 id=&#34;react-技术栈&#34;&gt;React 技术栈&lt;/h1&gt;
&lt;h2 id=&#34;mobx&#34;&gt;MobX&lt;/h2&gt;
&lt;h3 id=&#34;mobx-设计思想&#34;&gt;MobX 设计思想&lt;/h3&gt;
&lt;h3 id=&#34;observable&#34;&gt;Observable&lt;/h3&gt;
&lt;h2 id=&#34;redux&#34;&gt;Redux&lt;/h2&gt;
&lt;h3 id=&#34;redux-设计思想&#34;&gt;Redux 设计思想&lt;/h3&gt;
&lt;h3 id=&#34;简单的-redux-实例&#34;&gt;简单的 Redux 实例&lt;/h3&gt;
&lt;h3 id=&#34;简单的-mobx-实例&#34;&gt;简单的 MobX 实例&lt;/h3&gt;
&lt;h1 id=&#34;第二部分-登堂入室看山不是山&#34;&gt;第二部分 登堂入室，看山不是山&lt;/h1&gt;
&lt;h1 id=&#34;第五章-深入-javascript-工程实践&#34;&gt;第五章 深入 JavaScript 工程实践&lt;/h1&gt;
&lt;h2 id=&#34;javascript-静态类型&#34;&gt;JavaScript 静态类型&lt;/h2&gt;
&lt;h2 id=&#34;javascript-函数式编程&#34;&gt;JavaScript 函数式编程&lt;/h2&gt;
&lt;h2 id=&#34;javascript-异步编程&#34;&gt;JavaScript 异步编程&lt;/h2&gt;
&lt;h3 id=&#34;promise&#34;&gt;Promise&lt;/h3&gt;
&lt;h3 id=&#34;generator&#34;&gt;Generator&lt;/h3&gt;
&lt;h3 id=&#34;asyncawait&#34;&gt;Async/Await&lt;/h3&gt;
&lt;h2 id=&#34;javascript-面向对象&#34;&gt;JavaScript 面向对象&lt;/h2&gt;
&lt;h3 id=&#34;琢磨不透的-this&#34;&gt;琢磨不透的 this&lt;/h3&gt;
&lt;h3 id=&#34;原型链与继承&#34;&gt;原型链与继承&lt;/h3&gt;
&lt;h3 id=&#34;javascript-类的几种实现方式&#34;&gt;JavaScript 类的几种实现方式&lt;/h3&gt;
&lt;h2 id=&#34;javascript-数据绑定&#34;&gt;JavaScript 数据绑定&lt;/h2&gt;
&lt;h3 id=&#34;脏检测&#34;&gt;脏检测&lt;/h3&gt;
&lt;h3 id=&#34;es6-proxy&#34;&gt;ES6 Proxy&lt;/h3&gt;
&lt;h2 id=&#34;javascript-性能优化与样式规范&#34;&gt;JavaScript 性能优化与样式规范&lt;/h2&gt;
&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;
&lt;h3 id=&#34;数据类型&#34;&gt;数据类型&lt;/h3&gt;
&lt;h3 id=&#34;函数&#34;&gt;函数&lt;/h3&gt;
&lt;h1 id=&#34;react-工程实践&#34;&gt;React 工程实践&lt;/h1&gt;
&lt;h2 id=&#34;react-设计模式与样式指南&#34;&gt;React 设计模式与样式指南&lt;/h2&gt;
&lt;h3 id=&#34;high-order-component&#34;&gt;High-Order Component&lt;/h3&gt;
&lt;h3 id=&#34;stateless-functional-component&#34;&gt;Stateless Functional Component&lt;/h3&gt;
&lt;h3 id=&#34;pretty-component&#34;&gt;Pretty Component&lt;/h3&gt;
&lt;h2 id=&#34;react-优化&#34;&gt;React 优化&lt;/h2&gt;
&lt;h3 id=&#34;包体优化&#34;&gt;包体优化&lt;/h3&gt;
&lt;h2 id=&#34;react-动画&#34;&gt;React 动画&lt;/h2&gt;
&lt;h3 id=&#34;css-动画&#34;&gt;CSS 动画&lt;/h3&gt;
&lt;h3 id=&#34;javascript-动画&#34;&gt;JavaScript 动画&lt;/h3&gt;
&lt;h3 id=&#34;react-transition&#34;&gt;React Transition&lt;/h3&gt;
&lt;h2 id=&#34;基于-react-的-pattern-library&#34;&gt;基于 React 的 Pattern Library&lt;/h2&gt;
&lt;h3 id=&#34;material-ui&#34;&gt;Material UI&lt;/h3&gt;
&lt;h3 id=&#34;antd&#34;&gt;antd&lt;/h3&gt;
&lt;h1 id=&#34;第五章-深入-react-内部原理&#34;&gt;第五章 深入 React 内部原理&lt;/h1&gt;
&lt;h2 id=&#34;简单的-virtual-dom-实现&#34;&gt;简单的 Virtual DOM 实现&lt;/h2&gt;
&lt;h2 id=&#34;react-diff-算法&#34;&gt;React Diff 算法&lt;/h2&gt;
&lt;h2 id=&#34;react-setstate&#34;&gt;React setState&lt;/h2&gt;
&lt;h2 id=&#34;react-fiber&#34;&gt;React Fiber&lt;/h2&gt;
&lt;h2 id=&#34;virtual-dom-alternatives&#34;&gt;Virtual DOM Alternatives&lt;/h2&gt;
&lt;h1 id=&#34;前端状态管理&#34;&gt;前端状态管理&lt;/h1&gt;
&lt;h2 id=&#34;redux-的得与失&#34;&gt;Redux 的得与失&lt;/h2&gt;
&lt;h2 id=&#34;渐进的前端状态管理&#34;&gt;渐进的前端状态管理&lt;/h2&gt;
&lt;h2 id=&#34;常见的状态管理模式&#34;&gt;常见的状态管理模式&lt;/h2&gt;
&lt;h2 id=&#34;合理的状态设置&#34;&gt;合理的状态设置&lt;/h2&gt;
&lt;h1 id=&#34;前端测试&#34;&gt;前端测试&lt;/h1&gt;
&lt;h2 id=&#34;单元测试&#34;&gt;单元测试&lt;/h2&gt;
&lt;h2 id=&#34;组件测试&#34;&gt;组件测试&lt;/h2&gt;
&lt;h2 id=&#34;自动化测试&#34;&gt;自动化测试&lt;/h2&gt;
&lt;h1 id=&#34;前端性能优化&#34;&gt;前端性能优化&lt;/h1&gt;
&lt;h2 id=&#34;浏览器渲染原理&#34;&gt;浏览器渲染原理&lt;/h2&gt;
&lt;h2 id=&#34;前端性能评测&#34;&gt;前端性能评测&lt;/h2&gt;
&lt;h2 id=&#34;资源加载&#34;&gt;资源加载&lt;/h2&gt;
&lt;h2 id=&#34;首页与关键路径&#34;&gt;首页与关键路径&lt;/h2&gt;
&lt;h2 id=&#34;渲染策略&#34;&gt;渲染策略&lt;/h2&gt;
&lt;h1 id=&#34;nodejs&#34;&gt;NodeJS&lt;/h1&gt;
&lt;h2 id=&#34;nodejs-初窥&#34;&gt;NodeJS 初窥&lt;/h2&gt;
&lt;h2 id=&#34;常用-nodejs-框架&#34;&gt;常用 NodeJS 框架&lt;/h2&gt;
&lt;h3 id=&#34;express&#34;&gt;Express&lt;/h3&gt;
&lt;h3 id=&#34;koa&#34;&gt;Koa&lt;/h3&gt;
&lt;h2 id=&#34;服务端渲染&#34;&gt;服务端渲染&lt;/h2&gt;
&lt;h3 id=&#34;跨平台开发利器-electron&#34;&gt;跨平台开发利器 Electron&lt;/h3&gt;
&lt;h1 id=&#34;移动开发&#34;&gt;移动开发&lt;/h1&gt;
&lt;h2 id=&#34;mobile-first&#34;&gt;Mobile First&lt;/h2&gt;
&lt;p&gt;本部分介绍移动开发的常见注意点，包括响应式尺寸、响应式布局、移动开发中存在的点击问题等。&lt;/p&gt;
&lt;h2 id=&#34;react-native&#34;&gt;React Native&lt;/h2&gt;
&lt;p&gt;介绍 React Native 的基本原理与语法，能够利用 Deco 开发一个简单的 TODOList。&lt;/p&gt;
&lt;h2 id=&#34;微信小程序&#34;&gt;微信小程序&lt;/h2&gt;
&lt;p&gt;介绍微信小程序的基本用法，能够基于微信小程序开发简单的 TODOList。&lt;/p&gt;
&lt;h1 id=&#34;第三部分-融会贯通看山还是山&#34;&gt;第三部分 融会贯通，看山还是山&lt;/h1&gt;
&lt;h1 id=&#34;gui-应用程序架构变迁&#34;&gt;GUI 应用程序架构变迁&lt;/h1&gt;
&lt;h2 id=&#34;mvc&#34;&gt;MVC&lt;/h2&gt;
&lt;h2 id=&#34;mvpmvvm&#34;&gt;MVP&amp;amp;MVVM&lt;/h2&gt;
&lt;h2 id=&#34;flux-unidirectional-data-flow&#34;&gt;Flux Unidirectional Data Flow&lt;/h2&gt;
&lt;h1 id=&#34;rest-表现层状态转化&#34;&gt;REST 表现层状态转化&lt;/h1&gt;
&lt;h2 id=&#34;hyper-text-transport-protocol&#34;&gt;Hyper Text Transport Protocol&lt;/h2&gt;
&lt;h3 id=&#34;http-协议基础&#34;&gt;HTTP 协议基础&lt;/h3&gt;
&lt;h3 id=&#34;http-请求与响应&#34;&gt;HTTP 请求与响应&lt;/h3&gt;
&lt;h3 id=&#34;http-缓存&#34;&gt;HTTP 缓存&lt;/h3&gt;
&lt;h3 id=&#34;https-与-http2&#34;&gt;HTTPS 与 HTTP/2&lt;/h3&gt;
&lt;h2 id=&#34;restful-api&#34;&gt;RESTful API&lt;/h2&gt;
&lt;h2 id=&#34;restful-api-最佳实践&#34;&gt;RESTful API 最佳实践&lt;/h2&gt;
&lt;h2 id=&#34;rest-的不足与-graphql&#34;&gt;REST 的不足与 GraphQL&lt;/h2&gt;
&lt;h1 id=&#34;前端工程化&#34;&gt;前端工程化&lt;/h1&gt;
&lt;h2 id=&#34;前后端分离与全栈&#34;&gt;前后端分离与全栈&lt;/h2&gt;
&lt;h2 id=&#34;合理的使用工具&#34;&gt;合理的使用工具&lt;/h2&gt;
&lt;h2 id=&#34;渐进式的工程架构&#34;&gt;渐进式的工程架构&lt;/h2&gt;
&lt;h2 id=&#34;微服务与微前端&#34;&gt;微服务与微前端&lt;/h2&gt;
&lt;h3 id=&#34;模块化&#34;&gt;模块化&lt;/h3&gt;
&lt;p&gt;介绍常见的模块化形式：CommonJS、AMDJS、System.import 介绍小模块难题&lt;/p&gt;
&lt;h3 id=&#34;组件化&#34;&gt;组件化&lt;/h3&gt;
&lt;p&gt;介绍 Web Components 规范(Shadow DOM，Custom Elements)以及典型的符合 Web Components 规范的框架 Polymer 分析 React 与 Web Components 规范的优劣分析 Vue 与 WebComponents 规范的优劣分析何谓好的组件&lt;/p&gt;
&lt;h1 id=&#34;数据可视化&#34;&gt;数据可视化&lt;/h1&gt;
&lt;h2 id=&#34;数据可视化范式&#34;&gt;数据可视化范式&lt;/h2&gt;
&lt;h2 id=&#34;常见的数据可视化库&#34;&gt;常见的数据可视化库&lt;/h2&gt;
&lt;h3 id=&#34;echarts&#34;&gt;ECharts&lt;/h3&gt;
&lt;h3 id=&#34;d3js&#34;&gt;D3.js&lt;/h3&gt;
&lt;h1 id=&#34;web-安全基础&#34;&gt;Web 安全基础&lt;/h1&gt;
&lt;h2 id=&#34;输入校验与内容编码&#34;&gt;输入校验与内容编码&lt;/h2&gt;
&lt;h2 id=&#34;sql-注入&#34;&gt;SQL 注入&lt;/h2&gt;
&lt;h2 id=&#34;xss-跨站脚本&#34;&gt;XSS 跨站脚本&lt;/h2&gt;
&lt;h2 id=&#34;csrf-跨域请求伪造&#34;&gt;CSRF 跨域请求伪造&lt;/h2&gt;
&lt;h1 id=&#34;web-的未来&#34;&gt;Web 的未来&lt;/h1&gt;
&lt;h2 id=&#34;webassembly&#34;&gt;WebAssembly&lt;/h2&gt;
&lt;h2 id=&#34;webvr&#34;&gt;WebVR&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>2017-我的技术之路</title>
      <link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/2017-%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/2017-%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-6bede989c09af527.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;2017-我的技术之路不忘初心夯实基础&#34;&gt;2017 我的技术之路：不忘初心，夯实基础&lt;/h1&gt;
&lt;p&gt;又一年春去冬来，到了年末盘点的时候，感觉自己今年相较于前两年沉稳了些，也愈能明晰自身的不足；所以本年的主题就定为了不忘初心，夯实基础。今年年初的时候领证结婚，未立业而先成家；从南大毕业，结束了学生生涯；从零到一组建技术团队，看着新公司逐步发展壮大；加入某厂，结束三年的创业生涯，突破现有的瓶颈。三年创业，终未成猪，也是有哭有笑；虽然算不得什么慷慨激昂大事，却也有一种渡尽劫波兄弟在，相逢一笑泯恩仇的感叹。&lt;/p&gt;
&lt;p&gt;首先来聊聊初心吧，像我这样小富即安，胸无大志的，可能也谈不上有什么初心；但是随着眼界与格局的提升，会忧虑于此生一事无成，亦担心自己浅薄而不甘平庸，反而成了痛苦的原罪。当我什么都不会的时候，心有惴惴，容易妄自菲薄；这三年的磨砺下来，只希望自己的心境圆融些，能够不卑不亢，知道自己能做什么，知道自己要做什么。很多的领域也是多奇技淫巧，像笔者这样愚钝的唯有脚踏实地，步步向前；中道而行，心无旁骛。前五年都在中小型团队，更多的承担的是团队协调的职责；在不同的业务场景、团队搭配背景下，我也慢慢地养成了自己对于团队成员的期望。而当今年自己作为校招新人进入新的团队，从零做起时，愈发体会到提升团队效能的重要意义。&lt;/p&gt;
&lt;p&gt;从大四出来开始创业至今也有四五年的时间，笔者自觉自己的技术学习历经了三个阶段；首先是只会写基础语法，使用内建接口的阶段，而后是喜欢追逐名词，不求甚解的阶段，现在是发现自己连基础语法都不会的阶段。技术一直有所谓的术道之辨，有的开发者选择了广度，有的选择了深度，但是无论如何都需要从点到面；类比知识的金字塔，唯有地基广而实，才能保证塔尖高而稳。现在又是知识爆炸的时代，借鉴未来简史中所谓自由主义的挽歌，如果我们踟蹰不前，肯定是要被抛弃的；另一方面，现在又是繁忙的时代，极少有时间能够系统化地学习，更多的还是要碎片化学习。所谓集腋成裘，聚沙成塔，但是没有能沉淀为体系，终究也是水上浮萍，经不住时间的打磨。笔者下车伊始即致力于打造完备的&lt;a href=&#34;https://parg.co/UHY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;知识图谱&lt;/a&gt;，让知识在它该在的地方，这也是笔者遨游无尽海洋的一叶方舟。越来越多的技术、工具、框架之间存在交集，特别是在微服务、分布式系统、容器编排等方面，而知识图谱不断重构地过程，在笔者看来，也是不断穿过表象看本质的淬炼。&lt;/p&gt;
&lt;p&gt;不拘于具体的技术方向或者领域，笔者认为最为珍贵的能力之一即为解决问题的能力；从技术的角度来看，就是编码能力与工程组织(等)。很多时候我会感慨于编程的时候会有阻塞感，因为需要频繁地在各个语言之间切换，很多语法特性却是无法信手拈来；另一方面，随着各种技术方案推陈出新，我们不应该追逐新颖，但是要能够为问题寻找合适的解决方案，打造面向团队的，能够提升团队整体研发效能的工程体系。年末的时候，笔者将两千多篇笔记规整到七个仓库二十余个不同的系列中，这些笔记即是以不同的组织形式，承载不同的内容，来提升、保障笔者的编码能力与工程组织意识，确保任何时候都保持自己对于知识的掌握。笔者不可避免地会陷入到不专一、容易三心二意的困局，但是任何愿意抬头看路的程序员都会关心整个产品，他山之石，可以攻玉；也不希望现在做的事情，限制了自己的发展。&lt;/p&gt;
&lt;p&gt;笔者为不同的系列取了不同的名字，各有寓意，也自然是有很多名不副实，不过也是表达了笔者的一种希冀。首先是 &lt;a href=&#34;https://parg.co/UHY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knowledge Map - IT 知识图谱与技术路线&lt;/a&gt;，指明了技术之路上漫游的方向；文末附图即是最新的知识图谱，而泛前端、Web、微服务等等细节则可以前往&lt;a href=&#34;https://parg.co/UHY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原文&lt;/a&gt;查看。其次是 &lt;a href=&#34;https://parg.co/URL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt; 与 &lt;a href=&#34;https://parg.co/URv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome CheatSheet&lt;/a&gt;，分别从不同的维度解决我知识编排的问题。&lt;a href=&#34;https://parg.co/URL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt; 记录了笔者在日常阅读、学习与实践中发掘的优秀的资料，其按照知识图谱中定义的各个领域的知识体系分门别类地存放。笔者会不断更新其中链接，去芜存菁，去重留一，希望为同仁提供优秀的、有价值的、尽可能精简的资料索引。笔者还将自己阅读，收集的，优秀的电子书集锦到了 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-CS-Books&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome-CS-Books&lt;/a&gt;，阅读书籍永远是最为系统的学习方式，能够帮助我们缓解过于碎片化带来的技能不连贯性与片面性；本仓库以 IT CS 相关书籍为主，同时也会包含一些著名的、有价值的公开课程。&lt;a href=&#34;https://parg.co/URv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome CheatSheet&lt;/a&gt; 则是致力于解决知识易忘与速学概览的需求，其目标为语法速览, 实践备忘，从零到一，上手即用；&lt;a href=&#34;https://parg.co/URv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome CheatSheet&lt;/a&gt; 会是我 2018 年里的重点项目，也是保证我编程能力的重要依仗。对于笔者往年技术之路的记述，归档在了 &lt;a href=&#34;https://parg.co/UR9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tech Road - 某熊的技术之路&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;其次是编程语言相关，主要归档在了 &lt;a href=&#34;https://parg.co/URy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Domain of ProgrammingLanguage - 编程语言语法基础与工程实践&lt;/a&gt;，存放了笔者在编程语言方面学习与实践总结而来的笔记；笔者目前首选的语言为 JavaScript / Java / Python / Rust，因此笔记也就为&lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/JavaScript/Modern-JavaScript-Development-Foundation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 开发：语法基础与工程实践&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/Java/Modern-Java-Development-Foundation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Java 开发基础&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/Java/Java-Engineering-Practices-And-Design-Pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 工程实践与设计模式&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/Java/Head-First-Java-Concurrent-Programming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Java 并发编程&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/Java/JVM-And-Performance-Tunning&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 内部原理与性能调优&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/Python/Modern-Python-Development-Foundation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Python 开发：语法基础与工程实践&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/Rust/Rust-In-Action&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust in Action&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/Domain-of-ProgrammingLanguage/blob/master/ProgrammingLanguage-Theory-Primer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;编程语言理论指南&lt;/a&gt;等几个方面。编程语言是软件开发的基石，而软件开发就是把一个复杂的问题分解为一系列简单的问题，再把一系列简单的解决方案组合成一个复杂的解决方案。笔者在 &lt;a href=&#34;https://parg.co/URe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SoftwareEngineering Essentials - 软件工程基础&lt;/a&gt;中归档了&lt;a href=&#34;https://github.com/wx-chevalier/SoftwareEngineering-Essentials/tree/master/DataStructure-And-Algorithm-Fundamentals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;数据结构与算法基础&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/SoftwareEngineering-Essentials/tree/master/Essentials-of-Collaborative-Development-And-Quality-Assurance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;团队协同开发与软件质量保障必知必会&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/SoftwareEngineering-Essentials/blob/master&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;设计模式与软件架构之禅&lt;/a&gt;等内容。&lt;/p&gt;
&lt;p&gt;笔者今年投注精力较多的 Web 领域，最令我惊讶的就是&lt;a href=&#34;https://parg.co/bh1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单系列&lt;/a&gt;；万事开头难，坚持不懈则是难上加难，我并非意志坚定的人，但是一年来前端每周阅读清单能持续更新，我也是蛮佩服自己的，经常会半夜加班赶稿；很多时候无暇发文，都是内容整理好了之后交与我夫人帮忙发布，所以来年大大们轻喷呀~ 而在系列文章方面，笔者整理了 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices/tree/master/Modern-Web-Development-Foundation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 开发基础&lt;/a&gt;、&lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 开发工程化实践&lt;/a&gt;、&lt;a href=&#34;https://parg.co/UGZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 应用架构与性能调优&lt;/a&gt;、&lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices/tree/master/React-And-Frontend-Engineering&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 开发与前端工程化实战&lt;/a&gt;、&lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices/tree/master/Vue-And-Frontend-Engineering&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue 开发与前端工程化实战&lt;/a&gt;等数个系列，归档在了 &lt;a href=&#34;https://parg.co/bMe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web-Development-And-Engineering-Practices&lt;/a&gt;之中。而对于更广阔的大前端领域，笔者在 &lt;a href=&#34;https://github.com/wx-chevalier/FrontendTechnology-Handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frontend Technology Handbook - 大前端开发相关&lt;/a&gt;中整理了 &lt;a href=&#34;https://github.com/wx-chevalier/FrontendTechnology-Handbook/blob/master/iOS-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iOS 开发基础与工程实践&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/FrontendTechnology-Handbook/blob/master/Android-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Android 开发基础与工程实践&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/FrontendTechnology-Handbook/blob/master/Hybrid-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;混合式开发基础与工程实践&lt;/a&gt;, &lt;a href=&#34;https://github.com/wx-chevalier/FrontendTechnology-Handbook/blob/master/Head-First-Data-Visualization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出数据可视化&lt;/a&gt;等内容。&lt;/p&gt;
&lt;p&gt;而在泛后端领域，笔者总结在了&lt;a href=&#34;https://parg.co/bvT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务端应用程序开发与系统架构&lt;/a&gt;、&lt;a href=&#34;https://parg.co/URz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出分布式基础架构&lt;/a&gt; 这两个仓库中，分别包含了&lt;a href=&#34;https://github.com/wx-chevalier/ServerSideApplication-Development-And-System-Architecture/blob/master/ServerSide-Application-Development-Fundamentals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务端应用程序开发基础&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/ServerSideApplication-Development-And-System-Architecture/blob/master/Head-First-Full-Stack-Node.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Node.js 全栈架构&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/ServerSideApplication-Development-And-System-Architecture/blob/master/Spring-Boot-And-Spring-Cloud-MicroService&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spring Boot 5 与 Spring Cloud 微服务实践&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/ServerSideApplication-Development-And-System-Architecture/blob/master/DevOps-And-SRE-In-Action&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DevOps 与 SRE 实战&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/ServerSideApplication-Development-And-System-Architecture/blob/master/Essentials-Of-InfoSecurity-And-PenTest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;信息安全与渗透测试必知必会&lt;/a&gt;；以及&lt;a href=&#34;https://github.com/wx-chevalier/Head-First-Distributed-Infrastructure/blob/master/Linux-Fundamentals-And-ShellProgramming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 配置使用、内部原理与 Shell 编程&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/Head-First-Distributed-Infrastructure/blob/master/MySQL-Foundation-And-Optimization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MySQL 内部原理与性能优化&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/Head-First-Distributed-Infrastructure/blob/master/DistributedStorage-And-NoSQL-DataBase-Fundamentals&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式存储与 NoSQL 数据库基础&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/Head-First-Distributed-Infrastructure/blob/master/Distributed-Container-Infrastructure-And-Orchestration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;分布式容器架构与编排&lt;/a&gt;，&lt;a href=&#34;https://github.com/wx-chevalier/Head-First-Distributed-Infrastructure/blob/master/Cloud-Computing-Systems-And-BigData-Applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云计算系统与大数据应用&lt;/a&gt;等内容。最后就是在数据科学、机器学习、深度学习等领域，笔者归档在了 &lt;a href=&#34;https://github.com/wx-chevalier/DataScience-And-MachineLearning-Handbook-For-Coders&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;程序猿的数据科学与机器学习实战手册&lt;/a&gt;，包括了 &lt;a href=&#34;https://parg.co/Ur2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python 机器学习基础&lt;/a&gt;，&lt;a href=&#34;https://parg.co/Urz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深度学习课程笔记&lt;/a&gt;，&lt;a href=&#34;https://parg.co/bjz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深度学习与自然语言处理实践&lt;/a&gt;等内容。&lt;/p&gt;
&lt;p&gt;不同人的学习方式不一样，不过对于瓶颈期的人而言，保证自己每天能阅读/浏览 30 ~ 50 篇资讯/文章，也是比较可行且容易量化的成长方式。而撰写技术文章，不仅是对自己的积淀，帮助自己更深入地理解；也是希望能够以自己的绵薄之力跟大家一起成长，不仅能用于公司内同事的共同学习，也想着能有更多的后进英才，使整个行业蓬勃发展。笔者将今年常看的一些站点列举如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资讯聚合：&lt;a href=&#34;https://news.ycombinator.com/news&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HackerNews&lt;/a&gt;、&lt;a href=&#34;https://www.reddit.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reddit&lt;/a&gt;、&lt;a href=&#34;plus.google.com&#34;&gt;Google+&lt;/a&gt;、&lt;a href=&#34;tuicool.com&#34;&gt;推酷&lt;/a&gt;、&lt;a href=&#34;https://www.techmeme.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TechMeme&lt;/a&gt;、&lt;a href=&#34;https://www.v2ex.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V2EX&lt;/a&gt;、&lt;a href=&#34;dzone.com&#34;&gt;DZone&lt;/a&gt;、&lt;a href=&#34;https://gold.xitu.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;掘金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;技术书籍：&lt;a href=&#34;https://www.gitbook.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gitbook&lt;/a&gt;、&lt;a href=&#34;https://www.safaribooksonline.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SafariBooksOnline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;技术博客：&lt;a href=&#34;https://medium.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium&lt;/a&gt;、&lt;a href=&#34;https://toutiao.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;开发者头条&lt;/a&gt;、&lt;a href=&#34;http://www.csdn.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSDN&lt;/a&gt;、&lt;a href=&#34;https://guide.freecodecamp.org/agile&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;freeCodeCamp Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;技术问答：&lt;a href=&#34;https://stackoverflow.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StackOverflow&lt;/a&gt;、&lt;a href=&#34;https://segmentfault.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SegmentFault&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开源社区：&lt;a href=&#34;https://github.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;、&lt;a href=&#34;https://git.oschina.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OSChina&lt;/a&gt;、&lt;a href=&#34;https://coding.net&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;coding.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;期刊订阅：&lt;a href=&#34;mybridge.co&#34;&gt;MyBridge&lt;/a&gt;、&lt;a href=&#34;www.infoq.com/cn&#34;&gt;InfoQ 架构师&lt;/a&gt;、&lt;a href=&#34;&#34;&gt;CSDN 程序员杂志&lt;/a&gt;、&lt;a href=&#34;http://weekly.manong.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;码农周刊&lt;/a&gt;、&lt;a href=&#34;http://www.ituring.com.cn/search?q=%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9E%B6%E6%9E%84&amp;amp;type=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;高可用架构系列&lt;/a&gt;、&lt;a href=&#34;https://assets.thoughtworks.com/assets/technology-radar-apr-2016-cn.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ThoughtWorks 技术雷达&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线学习：&lt;a href=&#34;https://www.coursera.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coursera&lt;/a&gt;、&lt;a href=&#34;https://www.edx.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;edX&lt;/a&gt;、&lt;a href=&#34;https://cn.udacity.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Udacity&lt;/a&gt;、&lt;a href=&#34;https://ocw.mit.edu/index.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT 公开课&lt;/a&gt;、&lt;a href=&#34;http://mooc.guokr.com/course/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MOOC 学院&lt;/a&gt;、&lt;a href=&#34;http://www.imooc.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;慕课网&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;在线编程：&lt;a href=&#34;https://leetcode.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LeetCode&lt;/a&gt;、&lt;a href=&#34;https://projecteuler.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Project Euler&lt;/a&gt;、&lt;a href=&#34;https://www.codingame.com/start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CodingGame&lt;/a&gt;、&lt;a href=&#34;https://www.kaggle.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kaggle&lt;/a&gt;、&lt;a href=&#34;https://www.topcoder.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Topcoder&lt;/a&gt;、牛客网、&lt;a href=&#34;https://www.hackerrank.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HackerRank&lt;/a&gt;、&lt;a href=&#34;https://jsfight.club/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JS Fight&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;大厂风范：&lt;a href=&#34;https://msdn.microsoft.com/zh-cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MSDN&lt;/a&gt;、&lt;a href=&#34;https://developers.google.cn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google 开发者 &lt;/a&gt;、&lt;a href=&#34;https://yq.aliyun.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云栖社区&lt;/a&gt;、&lt;a href=&#34;http://www.ibm.com/developerworks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IBM DeveloperWorks&lt;/a&gt;、&lt;a href=&#34;https://research.fb.com/ai-helps-facebooks-internet-drones-find-where-the-people-are/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook AI Research &lt;/a&gt;、&lt;a href=&#34;https://code.facebook.com/posts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook&lt;/a&gt;、&lt;a href=&#34;http://nerds.airbnb.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;airbnb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此外，笔者今年还尝试分享自己工作生活中编写的小工具，或者模式化的解决方案。&lt;a href=&#34;https://github.com/wx-chevalier/fractal-components&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fractal-components&lt;/a&gt; 存放了笔者以 Pure CSS / Vanilla JS / React / Vue / RN / D3 不同的形式/框架积攒的组件，&lt;a href=&#34;https://github.com/wx-chevalier/webpack-app-template&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webpack-app-template&lt;/a&gt;、&lt;a href=&#34;https://github.com/wx-chevalier/iReactPack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iReactPack&lt;/a&gt;、&lt;a href=&#34;https://github.com/wx-chevalier/iVuePack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iVuePack&lt;/a&gt;、&lt;a href=&#34;https://github.com/wx-chevalier/webpack-app-template&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webpack-app-template&lt;/a&gt; 则是前端项目组织方式的沉淀。&lt;a href=&#34;https://github.com/wx-chevalier/Modern-JavaScript-SwissGear&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern-JavaScript-SwissGear&lt;/a&gt; 中则集锦了 &lt;a href=&#34;https://github.com/wx-chevalier/Modern-JavaScript-SwissGear/tree/master/observer-x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;observer-x&lt;/a&gt; 变量响应式监控、&lt;a href=&#34;https://github.com/wx-chevalier/Modern-JavaScript-SwissGear/tree/master/decorator-x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;decorator-x&lt;/a&gt; 现代实体类注解与 Swagger API 文档生成、&lt;a href=&#34;https://github.com/wx-chevalier/Modern-JavaScript-SwissGear/tree/master/declarative-validator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;declarative-validator&lt;/a&gt; 校验、&lt;a href=&#34;https://github.com/wx-chevalier/Modern-JavaScript-SwissGear/tree/master/x-fetch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;x-fetch&lt;/a&gt; 网络请求等模块。&lt;/p&gt;
&lt;p&gt;2018 年在保证自己每天开心地做好本职工作之余，希望完成思虑(拖延)多年的 Java 并发编程与 JVM 实战系列、熟悉并且实践 Rust、真正地能将机器学习与深度学习用起来。虽然 Rust 尚未投入到生产环境中，但是笔者认为其是非常不错且合适的 JavaScript 技术栈的互补；其编译为 WebAssembly 的能力以及作为 Node.js 原生插件，都能够弥补 JavaScript 在性能上的不足。对于 Rust 的学习与使用也并非朝夕之事，还是需要较长时间的了解与实践才能用好。今年前端框架之战逐渐平静，期待明年的编译元年，为前端带来更多的可能。&lt;/p&gt;
&lt;p&gt;今年的很多时间还要来筹备婚礼，12.30 携妻手踏入婚姻的殿堂，工作繁忙之后很多的文案整理与发布也都是她帮我处理的，每天回家之后才能进行些内容写作，或者维护些项目代码。感谢尾尾，感谢川哥，谢谢一年来很多前辈同仁的提携与指导，支持与鼓励；谢谢每一位阅读我的文章，批评、指正、认可我的人，谢谢你们给予我前进的动力。山高水远，来年再见~&lt;/p&gt;
&lt;p&gt;(各领域更多内容查看 &lt;a href=&#34;https://parg.co/UHY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knowledge Map - IT 知识图谱与技术路线&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://camo.githubusercontent.com/67fb4a94d96b896206bfd4b527d680f91e7d58ef/68747470733a2f2f706172672e636f2f555a31&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2017-知识图谱</title>
      <link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/2017-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/2017-%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</guid>
      <description>&lt;h1 id=&#34;2017-我的知识图谱与技术体系&#34;&gt;2017-我的知识图谱与技术体系&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>程序员的自我修养： 我写代码这五年</title>
      <link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E6%88%91%E5%86%99%E4%BB%A3%E7%A0%81%E8%BF%99%E4%BA%94%E5%B9%B4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2017/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB-%E6%88%91%E5%86%99%E4%BB%A3%E7%A0%81%E8%BF%99%E4%BA%94%E5%B9%B4/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24884338&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【程序熊的自我修养】我写代码这五年&lt;/a&gt;。谨以此文，纪念我过去五年的技术之路，感谢陪伴我这五年的家人，感谢所有陪我一起打拼过的战友，感谢所有阅读过我文章的陌生人。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;程序员的自我修养我写代码这五年&#34;&gt;程序员的自我修养：我写代码这五年&lt;/h1&gt;
&lt;p&gt;五年里最忙的时候需要兼顾两个公司的团队，还有论文和自己待出版的书，最多的时候直接负责过二十多人的技术团队。不过从写博客以后虽然也是断断续续，但总算坚持了下来。一年多里写了两百多篇博文，各渠道总阅读量超两百万(估算)。我的成绩不值一提，我唯一觉得让我骄傲的是我比五年前的自己会更加成熟与稳健，做成了一些我希望自己去做的事情。感谢批判我的人让我及时发现自己的不足与失误，校准方向；感谢支持我的人给我不断前行的动力。五年里陪着爱人走过几个国家，看过一些风景，&lt;/p&gt;
&lt;p&gt;在对待所谓成功与经验的态度上，我是蛮欣赏勃学的态度，认清自己的同时不去盲目崇拜，不以物喜，不以己悲，。笔者在回顾自我的道路时，我觉得最大的特点会是可行的，当然也是因为我尚在起点左近吧。我没有天赋过人，当年七个月早产出生，差一点就不能跟这个世界说你好。从小略显愚笨，弱于常人，就像笔者对于数学心有畏惧，这么些年一直没学好算法结构与机器学习。笔者也没有过人的毅力与执着的态度，到现在也没能真正的好好锻炼过，也没能如预期般学完一个课程或者看完一本书。更多的时候我是想着怎么跟自己妥协，寻找到真正能够完成的，精神与肉体上都能接受的方案。&lt;/p&gt;
&lt;p&gt;贯穿笔者整个系列的方法论，概括而来就是王阳明的知行合一，心学博大精深，我也是以自己的方式与实践尝试去理解。知行合一最简单粗暴的理解就是认知与实践的相统一，不过借用韩寒的一句话，读过很多道理，却仍然过不好这一生。现代社会我们每天或多或少的都会被灌入一些鸡汤，但是那些明明很有道理的道理却是如此的难于贯彻。我自身的自制力本就不强，因此更多的思考会立足于可行性，不过做太多超乎我执行力之外的规划，梦想总是要有的，但尽可能的让它能够实现。&lt;/p&gt;
&lt;h1 id=&#34;高屋建瓴的技术知识体系&#34;&gt;高屋建瓴的技术知识体系&lt;/h1&gt;
&lt;p&gt;在物理学科中放射性元素有所谓半衰期的概念，即某种特定物质的浓度经过某种反应降低到剩下初始时一半所消耗的时间。&lt;/p&gt;
&lt;p&gt;Stay Hungry，Avoid Foolish&lt;/p&gt;
&lt;p&gt;睁眼看世界。心有多大，世界就有多大。井底之蛙&lt;/p&gt;
&lt;p&gt;笔者不喜欢别人称呼大牛或者类似的头衔，在我看到的世界里不过是刚刚上路的初学者，尚有山高水长，千难万险，若现在就称大牛，真是汗颜。&lt;/p&gt;
&lt;h2 id=&#34;知识的半衰期&#34;&gt;知识的半衰期&lt;/h2&gt;
&lt;p&gt;从系统化学习到碎片化学习、从阶段性学习到终身学习、从专业学习到通才学习。孔子曰，三人行，必有我师焉。技术中所谓的术道之分，本文提及的《人类简史》与《未来简史》，都是文学家编著的，但是其中提及的人类社会的衍化都是基于人工智能、大数据、云计算这些很技术的名词。&lt;/p&gt;
&lt;p&gt;术业有专攻，专才能有，通才难得。&lt;/p&gt;
&lt;p&gt;从指向性学习到跨界式学习从小学到大学的学习模式，所有的课程都是提前设置和规划好的，是一种序列式的指向性学习。而大学毕业以后，其实就进入了自我教育的阶段，因为工作的原因，我们不得不进行跳跃式学习。这个时候学习知识就不能太具有指向性，也就是一个知识只用来解决一个问题，而是要对知识进行跨界的迁移。回顾下我们的程序员的知识, 我是在大学里开始学习计算机知识的, 学习的操作系统原理, 算法和数据结构等这类知识的半衰期也是比较长的, 也是我们后面的跨界式学习的基础, 所以在大学里学习一定要打好基础, 可惜现今的大学已经变成了简单的培训机构 . 毕业后我的第一份工作是系统集成工作，打交道的是网络，交换机，操作系统，也是在那时的工作中结识了 Linux，从此就爱上了 Linux，不过大学专业学的计算数学，个人感觉还是搞软件更有未来，所以在那个网络很好赚钱的 2000 年我开始学习软件开发，用过 C++、Powerbuilder，看过微软推出的 C# 最顺眼，而且当时大名鼎鼎的米格尔正在搞开源项目 Mono，我就跟着米格尔开始进入 .NET 开发，开发的大部分 .NET 应用都跑在 Windows 上，也有一部分跑在 Linux 上，到了今天，微软也爱上了 Linux，今后我开发的 .NET 应用都会跑在 Linux 上，这个过程中我在 .NET 社区推广 Mono，现在推广 .NET core，逐渐的从非主流变成主流。&lt;/p&gt;
&lt;p&gt;从整体化学习到碎片化学习所谓碎片化，是一个相对概念。比如你敢一天不刷朋友圈，第二天上班同事聊天，就能一句让你插不上话，一天不看手机就会感觉整个世界都变了。另外碎片化除了占用学习时间短以外，还要能保证学习的随时随地，比如蹲厕所、等公交、开车时都可以进行学习，也就是可以满足多场景。知识的更新迭代实在是太快了，整体化学习越来越不适应市场竞争，碎片化学习的时代已经到来。所以，未来基于互联网的语音分享和视频直播，会慢慢成为人们主要的学习方式。大学里还有机会去系统的学习，工作了大部分时间被加班占据，我们的时间已经变成了碎片，每天能够抽出 30 分钟出来学习，研究新技术，日积月累，几年后就和抽不出时间的人拉开差距，这就可以很好的解释很多人工作时间越长越没有竞争力了，这么多年的时间里都没有进行学习，知识的半衰期又是这么短，经常在社区听到有人在抱怨微软的技术更新太快，“vs2017 出来了，我还在用 vs2005” 等等的论调，问题出在自身，而不反思。希望大家能够抽些时间学习最新的 .NET Core,Linux 的知识。&lt;/p&gt;
&lt;p&gt;从阶段性学习到终身式学习时间会消磨一切的价值，随着时代的演进，技术被再次突破，审美被迭代，甚至使用的场景也发生了根本性的变化，一劳永逸的学习方式一去不复返了。我们这代人，注定一生花在学习上的时间比真正花在实践上的时间多。因为终身式学习来了。现在已经进入到云计算时代，软件架构也要从单体过渡到微服务，.NET Core 就是为了适应微服务而对 .NET 进行重构，以前你构建软件的那些知识已经衰减了，需要补充新知识了，我通过运营公众号，每天推送几篇文章，很多文章都是新知识，这也是一个学习的过程，我希望通过公众号让更多的人和我一样终身学习，目前公众号有 25000 粉丝，每天文章阅读量却只有 8000，很多人关注了，并没有看过的文章，其实我推送的每篇文章都是有所考虑的，但是公众号是个单向的交流，里面的交流基本没有，我创建了一个付费的小密圈想把真正一起学习的同伴识别出来，可以一起交流。&lt;/p&gt;
&lt;h2 id=&#34;记忆宫殿有效地碎片化学习&#34;&gt;记忆宫殿：有效地碎片化学习&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Learn Everywhere, Anytime.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在如今这个知识爆炸的时代，限制我们学习的不再是知识的来源，而是我们自身的学习能力与学习方式。不可否认不同人的能力是不一致的，我们也不能奢望自己能够勤奋到囊萤映雪、凿壁偷光。不仅是大部分人的努力程度之低尚谈不上比拼天赋，而且我们几乎很少能达到自己的既定目标。对于很多工作的人而言，可能只能利用晚上或者周末时间进行学习，即使制定了详细的计划往往也会因为家庭或工作的突发事件而无疾而终。这种现实的无奈是很难以人为意志为转移，因此在无法像学校那时的完全的系统化的学习。在初级阶段，我们势必是要进行碎片化学习的，这总比不学习来得好。笔者非常支持认可碎片化学习的思想，但是否定在没有知识体系的情况下盲目的碎片化学习。特别是对于尚未建立基础知识体系与认知能力的同学，如果突发性地吸收过多的知识，反而会摧毁自己的认知能力。就好像传说中的吸星大法，乱吸的后果就是体内真气斑驳不堪，最终走火入魔，爆体而亡。另外，。在没有知识体系的情况下，学习的知识都是相互独立，难以互相借鉴，举一反三，阅读也不过是春风拂面，一掠而过，不留痕迹，知识也就难以真正的沉淀下来。&lt;/p&gt;
&lt;p&gt;从笔者自己的经历而言，最初的阅读，这个阶段非常的痛苦。在碎片化学习的过程中，我们不仅要感受到每日阅读、学习的东西，还要能够感受这些知识真正的聚沙成塔、集腋成裘，成为了你的知识体系中不可分割的一部分。&lt;/p&gt;
&lt;h2 id=&#34;知我不知穿越未来&#34;&gt;知我不知，穿越未来&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I Know What I Dont Know&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;梭罗在《瓦尔登湖》中写道：知道自己知道什么，也知道自己不知道什么，这就是真正的知识。知我所知是对于自己能力的正确认识，知我所不知则能为自己未来的路明确些方向。&lt;/p&gt;
&lt;p&gt;我们不能让已有的知识，已有的技术，已有的成就，已有的地位成为阻碍。&lt;/p&gt;
&lt;h2 id=&#34;知识在它该在的地方&#34;&gt;知识在它该在的地方&lt;/h2&gt;
&lt;p&gt;Code Complete》里面强调的 &amp;ldquo;programming into a language rather than programming in a language&amp;rdquo; 原则，即我们应该把编程的通用原则和规范应用到具体编程语言中，而不是受某门编程语言的限制而忽略了编程的通用原则。&lt;/p&gt;
&lt;h1 id=&#34;笔记与博客知识的积淀&#34;&gt;笔记与博客：知识的积淀&lt;/h1&gt;
&lt;p&gt;阳明先生朝思夕计，终于领悟了格物致知，知行合一的道理，也是他面对这个世界的方法论，从此为天地立心，为生民立命，为往圣继绝学，为万世开太平。前文所讲我们竭力地去为自己开拓&lt;/p&gt;
&lt;h2 id=&#34;生命存在的痕迹&#34;&gt;生命存在的痕迹&lt;/h2&gt;
&lt;p&gt;笔者最初做笔记的时候，很多朋友会质疑，记录的笔记真的会去看吗？是不是记录之后就能记住了？答案自然是否定的，笔者一直以来鼓励自己做笔记的动力并不是让自己不会遗忘，而是希望在下一次需要的时候能够以最快的速度学习让自己回忆起之前的东西。笔者发现身边很多人的学习能力并不弱，但是技术能力难以进步突破的问题却是在于永远都在重复学习，譬如笔者团队中秉持岗位轮换的原则，可能做几个月的服务端再轮换做一些简单的前端，但是每次都需要重新学习，看不出什么进步。&lt;/p&gt;
&lt;p&gt;罗曼罗兰说过，多数人二十或三十多岁已经死了，他们变成自己的影子，不断重复以前的自己。&lt;/p&gt;
&lt;h2 id=&#34;打造个人品牌&#34;&gt;打造个人品牌&lt;/h2&gt;
&lt;p&gt;在带领团队的时候我一直会思考，应该如何激励他人，常用的方式包括责任心、对于技术的追求以及物质的刺激。物质的刺激是笔者最不想用的，人的欲望是无穷的，物质的刺激作为额外的辅助，但是一直作为主要的刺激手段不免终有黔驴技穷的一天。回到本部分的主题，笔者在这几年里一直建议敦促身边的朋友们尝试着写写文章，不过能坚持下来的寥寥，更多的则是三分钟热度。估计很多阅读本文的读者也逃脱不了这个问题，因为繁忙的工作、因为总是觉得尚未准备好，一而再再而三的推迟文章的计划。最终在那一天蓦然回首，当初的梦想终归是梦想。&lt;/p&gt;
&lt;p&gt;因此在这里，笔者想特别陈述下文章与博客对于个人发展的重要价值。&lt;/p&gt;
&lt;p&gt;我们很多人想着去赚钱，但其实应该让自己先值钱，才能去赚钱。&lt;/p&gt;
&lt;h1 id=&#34;时刻阅读&#34;&gt;时刻阅读&lt;/h1&gt;
&lt;p&gt;Read Everywhere, Learn Anytime.&lt;/p&gt;
&lt;h2 id=&#34;按需阅读&#34;&gt;按需阅读&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Read It When You Need It&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;辩证式阅读&#34;&gt;辩证式阅读&lt;/h2&gt;
&lt;p&gt;尽信书，则不如无书，不过这并不是不去读书的理由。&lt;/p&gt;
&lt;p&gt;王安石天命不足畏, 祖宗不足法, 人言不足恤。笔者看完今年的时间的朋友跨年演讲之后，特地看了下评论中与知乎上反驳的内容，从不同的视角、不同的立场进行考虑，实在是有趣。&lt;/p&gt;
&lt;h2 id=&#34;每日阅读清单&#34;&gt;每日阅读清单&lt;/h2&gt;
&lt;h1 id=&#34;认识你自己&#34;&gt;认识你自己&lt;/h1&gt;
&lt;p&gt;对于所谓成功者或是所谓天才，爱因斯坦说过，天才是百分之一的灵感，百分之九十九的汗水；但那 1% 的灵感是最重要的，甚至比那 99% 的汗水都要重要。&lt;/p&gt;
&lt;p&gt;笔者并不敢随便置喙这个千古谜题，不过从笔者个人的成长经历而言，既然机器都可以通过大量的数据而不是算法的革新来提升自己的认知能力，那么人类在大量的训练、见过了很多的风景之后缘何不会得到提升呢？天地不仁，万物刍狗，在这样一个崇尚个人自由的年代，笔者相信只要奋斗就能提升自己成才的概率。苏格拉底有句名言叫认识你自己，而实际上以我们现有的认知能力很难去勾画出未来的自己，就好像你永远不知道未来的自己有多强大。入无法家拂士，出无敌国外患者，国恒亡，人也是这样，安逸的环境会掘下梦想的坟墓，本部分也是希望先描述笔者对于未来的担忧，来思考应该给予自己未来怎样的定位，才不会被这个时代所抛弃。&lt;/p&gt;
&lt;p&gt;对于笔者而言，我认识到自己的天赋普通，也没有傲人的背景，接受的也是一般的教育与平凡的经历。笔者不会奢求完成某些小目标，但是既然外在的力量能够通过细致的分析去发现你自己，那么我们是否能通过换位的分析来更加地了解自己呢？&lt;/p&gt;
&lt;h2 id=&#34;未来幸存者&#34;&gt;未来幸存者&lt;/h2&gt;
&lt;p&gt;2016 年的年末，笔者莫名有些恐慌的情绪，一部分来自于学业与工作的压力，另一部分却是来自于对于未来的未知的恐惧。笔者目前所在的公司是负责政府相关的一些技术服务，这个行业很明显感觉整体的技术水平与外部相差很多，就好像井底之蛙，被厚厚的壁垒与外部的江河隔开，仅看到那一方小小的天地。年会上做年度总结的时候，看着下面坐着的，跟了我三四年的那些年轻的面孔，处于对他们的责任感我很担心哪一天这个壁垒被打破之后，他们会陷入所谓的中年危机。另一方面，笔者自己在南大就读的也是人工智能与数据挖掘相关，虽然是个门外汉但看着大潮浩荡而来，许多曾经的巅峰被征服，笔者不免担心会不会未来就是巨头的天下？。这一轮人工智能深度学习的浪潮可能难再现当年互联网浪潮下千帆竞渡的盛景，也就意味着不会有那么多面向我们这些一无所有的年轻人的机会。后来听了吴恩达等大牛的演讲认识到端到端的学习尚未主导，心中不免送了一口气，又杞人忧天了一回。未来简史中分析二十一世纪会存在三种人：无用的人、没有自主的人与神人。工业革命是发挥人的生产力，而智能革命则是替代人，虽然笔者认为现阶段的人工智能的目标是辅助人工智能，但是依然会在未来取代很多行业的职位，并且这些辅助性的人工智能会比你自己更了解自己，也更能影响你自己。如果有一天我们真的成为了电影里每日衣食无忧，不用烦恼的神人，那么和过去城隍庙里被人供奉，每日享受些香火的泥塑菩萨又有什么区别？正如赫拉利所说，笔者思考这些不是希冀去预测未来，而是想把自己从过去解放出来，敢于去想象不同的命运。不求流芳百世，不愿遗臭万年，只希望生如夏花，总有那么绽放的岁月。笔者希望自己能做有价值的人，对家人、对朋友、对社会有价值的人；活在未来，不是不死，而是不会被这个时代所抛弃。&lt;/p&gt;
&lt;h3 id=&#34;独立而可变的意识&#34;&gt;独立而可变的意识&lt;/h3&gt;
&lt;h2 id=&#34;我是程序员&#34;&gt;我是程序员&lt;/h2&gt;
&lt;h3 id=&#34;程序员的自我革命&#34;&gt;程序员的自我革命&lt;/h3&gt;
&lt;p&gt;很浮躁，很多关于技术的讨论不再关注技术本身，而是要么互相吹捧，要么人身攻击。我个人很不喜欢所谓的师徒这种关系。&lt;/p&gt;
&lt;p&gt;程序员的使命就是自我革命&lt;/p&gt;
&lt;p&gt;所谓更牛，就是换个罪受，我们一生都在处于不断地向上，在资讯爆炸外部资源极大丰富的年代，更大的瓶颈还是在我们自己。&lt;/p&gt;
&lt;h3 id=&#34;他山之石求同存异&#34;&gt;他山之石，求同存异&lt;/h3&gt;
&lt;p&gt;君子慎独, 不欺暗室, 何况于网络乎？现在网络上的戾气越来越大了&lt;/p&gt;
&lt;p&gt;道不同，不相为谋。&lt;/p&gt;
&lt;p&gt;相看两不厌，唯有敬亭山。&lt;/p&gt;
&lt;p&gt;渡尽劫波兄弟在，相逢一笑泯恩仇。&lt;/p&gt;
&lt;h2 id=&#34;不想当将军的士兵不是好士兵&#34;&gt;不想当将军的士兵不是好士兵&lt;/h2&gt;
&lt;p&gt;技术与管理二者互不冲突，笔者不太提倡单纯的炫技，我们对于技术的追求本质上还是为了构建更好的产品，而伟大的产品需要伟大的团队作为支撑，当年求伯君单枪匹马睥睨天下的时代已是明日黄花。笔者经常会思考，我的价值在哪里？实际上，而是所谓格局。格局是一个很抽象的词汇，有的人写代码的时候看到的是眼前的代码，有的人看到的是一个模块，有的人看到的是一个产品，有的人则看到的是在使用着产品的用户场景。&lt;/p&gt;
&lt;p&gt;软件架构(software architecture )是一系列相关的抽象模式，用于指导大型软件系统各个方面的设计。传统软件架构描述的对象是直接构成系统的抽象组件，侧重于系统的抽象、拆分、组织方式等。&lt;/p&gt;
&lt;h3 id=&#34;定位在未来&#34;&gt;定位在未来&lt;/h3&gt;
&lt;p&gt;我至今为止没有在大公司实习或者工作过&lt;/p&gt;
&lt;h3 id=&#34;君子有责当仁不让&#34;&gt;君子有责，当仁不让&lt;/h3&gt;
&lt;p&gt;老人常说，吃亏是福。&lt;/p&gt;
&lt;p&gt;火影里鸣人穷其一生是为了获得认同，虽然有很多的羁绊，但是一生是有意义的。德国社会学家马克斯韦伯说过，人是悬挂在自己编织的意义之网上的动物。&lt;/p&gt;
&lt;p&gt;在西欧的一些高福利国家，譬如德国，很多穷人选择主动失业以获取高福利。我们工作的目标不仅仅是为了获取&lt;/p&gt;
&lt;p&gt;德国的穷人失去了自制力，变得不守时，变得懒惰与放纵。&lt;/p&gt;
&lt;p&gt;我们体面着装不是炫耀的工具，而是约束自己的工具。我们以为追求生活的美好而自律，因为自律而达成体面。&lt;/p&gt;
&lt;h1 id=&#34;路上&#34;&gt;路上&lt;/h1&gt;
&lt;p&gt;我在路上，仰望星空。&lt;/p&gt;
&lt;p&gt;2013 年 10 月我拿到了南大的保研资格，2014 年 11 月我开始了第一次创业，约球吧。不出三月失败而终，幸好有朋友接手，开始了 LiveForest 与南京运之林。一年创业之后，开始尝试转型，这个阶段参与过在线婚庆的创业，参与了 3D 打印行业的创业。自己本身在南大参与的也是机器学习相关。就像罗振宇在跨年演讲中提及的，狗真的会是最后的胜利者吗？&lt;/p&gt;
&lt;h2 id=&#34;如果时光倒流&#34;&gt;如果时光倒流&lt;/h2&gt;
&lt;h2 id=&#34;浪潮之间&#34;&gt;浪潮之间&lt;/h2&gt;
&lt;p&gt;悲悲戚戚，如丧考妣&lt;/p&gt;
&lt;h1 id=&#34;致谢&#34;&gt;致谢&lt;/h1&gt;
&lt;p&gt;本文最后，笔者还是想对于所有阅读过我的文章的朋友说声谢谢，你们的支持是我前行的动力，希望在未来的岁月里我能够继续完善我的知识体系中的内容，也希望能够帮助到所有花时间阅读我文章的人。未来的世界是时间的战场，愿意花时间阅读的朋友本身也是一种付出。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
