<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2020 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/</link><atom:link href="https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/index.xml" rel="self" type="application/rss+xml"/><description>2020</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>2020</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/</link></image><item><title>2020-我的技术之路</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/2020-%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/2020-%E6%88%91%E7%9A%84%E6%8A%80%E6%9C%AF%E4%B9%8B%E8%B7%AF/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/21/yo8jXT.png" alt="2020 NGTE Books Cover" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="2020-我的技术之路创业公司中的研发效能与技术赋能">2020-我的技术之路：创业公司中的研发效能与技术赋能&lt;/h1>
&lt;p>2020 年，诸多不易，大家都是披荆斩棘砥砺前行；在这一年我在技术、产品、行业认知上也是起起伏伏，在挫折、摔打中不断地深化自己对行业的认知，融入制造团队，打磨产品，构建更顺滑的体验与交付能力。从技术与产品的视角看，2020 我的核心关注点如下：&lt;/p>
&lt;ul>
&lt;li>研发效能，以尽可能小的技术团队保障全线产品的按时上线、交付。我们的产品涵盖了典型的 工业互联网/MES/CRM/电商系统，跨越了 Web/移动端/小程序/桌面端等多个触达点，服务于海内外客户（需要维护跨地域的公/私有云及边缘节点）。&lt;/li>
&lt;li>技术赋能，挖掘并驱动业务发展，单点突破与全线贯通齐头并进，以正合，以奇胜。我们需要某些产品点打动客户，但是如果不能给客户提供完整的解决方案，是无法得到最好的认可。&lt;/li>
&lt;/ul>
&lt;h1 id="做时间的朋友八大体系超千篇数百万字技术笔记">做时间的朋友：八大体系超千篇数百万字技术笔记&lt;/h1>
&lt;p>天地逆旅，时光飞逝，岁月如梭，年近而立也是愈发感觉有急迫感；每次回顾过去十年的职业生涯，想起自己曾经学过、做过很多，但是也忘了很多，不由地内心惶惑。此时唯有自己做的这数百万字笔记体现了技术一途上留下的痕迹：&lt;a href="https://ng-tech.icu/books-gallery/" target="_blank" rel="noopener">在线阅读：wx-chevalier.github.io/books&lt;/a>，书籍托管于 Github：https://github.com/wx-chevalier&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/21/yTSKdH.png" alt="笔记汇总" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>今年我会针对每个系列编写专门的导读文章，希望能与更多的人分享我看到的、学到的、记下的。&lt;/p>
&lt;h1 id="既能组装也能造轮子模板库项目的沉淀">既能组装也能造轮子：模板、库、项目的沉淀&lt;/h1>
&lt;p>经历了不同的大厂与创业团队，对于技术人员而言需要具备极强的机动性、灵活性；在小型的创业团队中不能墨守成规，照搬大厂的规范、流程、制度以及技术架构。另一个方面，也不能因为是小团队就忽略了对于架构、编程规范（如 Lint）、重构（如 Code Review）等的坚持，否则随着业务发展迅速增加的技术负债终会显示出它的破坏力。就如笔者在《&lt;a href="https://github.com/wx-chevalier/SoftwareArchitecture-Series?q=" target="_blank" rel="noopener">SoftwareArchitecture-Series&lt;/a>》中关于所谓复杂性的讨论，软件架构的核心价值，即是控制系统的复杂性，将核心业务逻辑和技术细节的分离与解耦；互联网软件系统架构的设计不是一蹴而就，而需要渐进、持续、多次设计的。&lt;/p>
&lt;p>作为创业团队的技术人员，核心矛盾是提高生产力，提高团队的研发效能。我们既要能发现现有的轮子，去快速组装他们，去支撑业务需求；也要能造轮子，去完成团队自身的工具化与工程化。同时也不能盲目追新，很多令人激动的新技术、新特性，但是也要考虑到新技术本身的不确定性、团队成员的学习成本。这里以 Web 开发做简单示例，在 &lt;a href="https://github.com/topics/wx-fe" target="_blank" rel="noopener">wx-fe&lt;/a> 主题下大概有十来个项目，其典型包括：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/wx-chevalier?tab=repositories&amp;amp;q=m-fe&amp;amp;type=&amp;amp;language=" target="_blank" rel="noopener">&lt;code>m-fe-*&lt;/code> 系列&lt;/a>: 微前端工程化系统项目，包含了前端开发基础脚手架、React/Vue/Node/Electron/Taro 以及各种微前端模板。&lt;/li>
&lt;li>&lt;a href="https://github.com/topics/micro-components" target="_blank" rel="noopener">micro-components 系列&lt;/a>：包含 Web 电子白板、Excel 全栈解决方案等一系列项目。&lt;/li>
&lt;li>&lt;a href="https://github.com/wx-chevalier?tab=repositories&amp;amp;q=ueme-&amp;amp;type=&amp;amp;language=" target="_blank" rel="noopener">&lt;code>ueme-*&lt;/code> 系列&lt;/a>: 构建用户体验中台系列项目。&lt;/li>
&lt;/ul>
&lt;p>这部分笔者会在单独的专题中进行讨论，此处仅引出笔者的代码库的沉淀。&lt;/p>
&lt;h1 id="杂谈程序员的职业转折小团队与大团队">杂谈：程序员的职业转折，小团队与大团队&lt;/h1>
&lt;p>不觉入行已有十年，十年苍狗，我却是一直怀着对行业的焦虑前行，35 的槛一直如达摩克里斯之剑；不过回头来看，至少对于身边认识的很多前辈，在这个时代以 IT/编程为敲门砖进入某个行业/领域是极好的选择。只要是真正的有心人，能够在日常工作中进行人脉、管理、行业等等多维度的积累，是肯定能打破职业生涯的桎梏，完成转型的。技术好的，不妨进入一些传统行业。只要跨过了行业门槛，有公平竞争的机会，以更现代化的产品与研发效率，也是有可能进行降维打击的。&lt;/p>
&lt;p>但是，需要特别强调的是，无论进入哪个行业，必须心怀敬畏；毫无行业经验的人，看了几个 PPT 就扬言要颠覆行业，不觉得是对于前人的不尊重吗？同时不能太过画饼，于己于人皆是如此，反对强行让别人为自己的梦，或者错误买单。很多人既要独断专行的权利，却不愿意承担责任义务。&lt;/p>
&lt;h2 id="职责的变化">职责的变化&lt;/h2>
&lt;p>我从 2014 年开始一直陆陆续续参与创业团队的工作，期间也在大厂工作了三年；颇有感触的一点是，创业对于纯技术背景的同学并不友好，往往技术越强，落差越大。譬如心态的转变，很多技术背景的管理者往往会不适应类似于接口协调这样的工作，觉得似乎是在浪费生命。但是需要慢慢地将自己从日常工作中抽身出来，为团队保驾护航，上善若水，水利万物而不争；然后慢慢起身远眺，做更偏重于协调，以业务整体绩效为目标的事情。此时在团队沟通上也需要注意技巧，良好的组织气氛，是提升团队研发效能的重要保障。就像玩游戏一样，对于团队、对于自己，想要翻越某些藩篱的时候，需要不断地给予正向反馈。无论是公司、团队的管理，还是自我管理，成就感都是非常不错的活力棒与路标；而保证自己在日常工作或者 Side Project 中获得成就感的一种前提，就是尽可能细粒度的切分任务。&lt;/p>
&lt;p>此外，研发往往有明确的目标、指标，但是在未知行业中，要提取、抽象出指标却并非易事，并且目标也是不断的变化；这点在大公司中往往是由 PD、PM 去屏蔽，但是在创业团队中缺颇为考验技术人员的辨识能力。譬如目标和过程的区分。最初我们以为目标是：客户能够用上我们的软件与解决方案，后来发现这只是实现最终商业目标的过程，后来发现我们需要的过程是建立联接而不是拘泥于软件使用这件事。竞争意识损害竞争力，同样达成目标的执念有时反而会损害执行力，很多开始以为的阶段目标反而会成为你要征服的最高的巅峰。&lt;/p>
&lt;h2 id="团队的组成">团队的组成&lt;/h2>
&lt;p>在创业型小团队中，团队构成不稳定。开发往往身兼数职，不仅仅实现功能，经常要处理用户反馈和投诉，还要和产品讨论需求、和设计讨论界面实现，甚至有时要修电脑、装软件、解决疑难杂症。同时创业期的产品可能质量要求不高。用户量级小，即使质量稍差也能接受。做的功能亦不太考虑可扩展性，能用就行。技术视野狭隘。整体业务场景少，技术以使用为主，很少深挖底层原理和实现。产品的生命周期不可预测。做了 1、2 年的产品，可能因为各种原因而无法上线。但是，小团队也同样具备优势。人数少的优势，使得团队易于扁平，决策层到执行层是直接关系，甚至有时执行层也参与决策。指令下达速度快，沟通成本降低。而且作为早期参与者，在渡过艰难的生存期之后，更容易成为核心人员。核心代表着股份与期权，持股干活更是动力十足。再往后，如果团队能够扩招，核心人员往往是管理人员的首选。&lt;/p>
&lt;p>合适的人才是团队的基石，招聘也是团队长久的任务与挑战；特别是对于技术负责人，往往也需要承担起招聘。早期的团队往往是内部推荐，或者以人带人，应当尽量招聘合适的人才，过低或者过高往往都会加重团队的管理成本。在第一轮快速扩张之后的平稳期，稳定是重中之重，同时注意流水不腐，户枢不蠹。同时团队无论大小，即使没有专门的 HR，也需要尽量保证面试流程的正规性，并且针对不同的面试者展示团队不同的优势：氛围良好/极客文化/快速发展/行业优势等等。不过随着团队的迅速扩张，人员扩充本身是熵增的过程，但是熵增也意味着混乱与无序，作为技术团队的领导者，需要不断地进行重新定位与角色转变。从早期的核心开发者，到渐进的团队协调者，再到团队的管理者。&lt;/p>
&lt;p>健康的团队，应该是离开任何人都可以正常运转；反过来看，如果核心成员发现自己在团队中的地位是无可替代的，反而需要有危机感，宁可牺牲些可用性，也要换取些分区容忍性。技术负责人首先要能够将任务合理划分，将业务型的与通用型的模块化切割开来，尽可能地定义明确边界与交互的接口协议。这样就能够将任务打包给兼职/实习人员，尽可能地实现调度优化。&lt;/p>
&lt;h1 id="结语">结语&lt;/h1>
&lt;p>前两日有校友撰文写道：人生之路，不似挥舞剑花那般行云流水，更若一首平仄绝句，错落有致。面对道路的蜿蜒，唯有携着“柳暗花明又一村”的笃定坚守，才能穿过眼前横亘的“山重水复”。国学大师陈寅恪曾说，“唯此独立之精神，自由之思想，历千万祀，与天壤而同久，共三光而永光。”于个人，既要失败要乘早，穷人家的孩子承担不起失败的代价。不过也要随时转换，如多年前一次失败的创业，创业痛苦的并不是灿烂热烈的死去，而是将死不死，虽静美却无心赏秋叶。&lt;/p>
&lt;p>最后，谨以此文，致敬认识的或者不认识的创业者，也是赠言给身边走在创业路上的朋友。&lt;/p></description></item><item><title>K8s 中微服务解决方案的选择，Dapr 初探</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/k8s-%E4%B8%AD%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9dapr-%E5%88%9D%E6%8E%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/k8s-%E4%B8%AD%E5%BE%AE%E6%9C%8D%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E7%9A%84%E9%80%89%E6%8B%A9dapr-%E5%88%9D%E6%8E%A2/</guid><description>&lt;h1 id="k8s-中微服务解决方案的选择dapr-初探">K8s 中微服务解决方案的选择，Dapr 初探&lt;/h1>
&lt;p>主流地微服务/RPC 方案&lt;/p>
&lt;ul>
&lt;li>
&lt;p>契合 K8s：K8s 这样的云操作系统，它的目标不仅仅是一个编排系统，而是提供一个规范，可以让你来描述集群的架构，定义服务的最终状态。在过去&lt;/p>
&lt;/li>
&lt;li>
&lt;p>跨语言友好：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支持协议 Schema：&lt;/p>
&lt;/li>
&lt;li>
&lt;p>非侵入式，多环境部署，运维简单：ServiceMesh，包括我们的公有云。Istio/Envoy 的运维还是较为复杂，不适合于还没有专业运维团队的我们。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>M 端产品设计札记</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/m-%E7%AB%AF%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E6%9C%AD%E8%AE%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/m-%E7%AB%AF%E4%BA%A7%E5%93%81%E8%AE%BE%E8%AE%A1%E6%9C%AD%E8%AE%B0/</guid><description>&lt;h1 id="设计札记">设计札记&lt;/h1>
&lt;p>&lt;a href="https://cloud.unionfab.com/landing/" target="_blank" rel="noopener">Unionfab 团队&lt;/a>在 3D 打印与工业互联领域深耕多年，希望能面向行业提供，依托 3D 打印通用技术的、综合性数字化生产、及智慧工厂解决方案。我们的愿景包含了：SDM 软件定义制造、数据驱动，工业互联、MaaS，3D 制造即服务。本文是对笔者进来在软件产品设计、开发过程中的一些想法的记述。&lt;/p>
&lt;blockquote>
&lt;p>更多产品与行业的思考参阅 &lt;a href="https://github.com/wx-chevalier/Product-Series?q=" target="_blank" rel="noopener">《Product-Series》&lt;/a>；&lt;/p>
&lt;/blockquote>
&lt;p>制造端（M 端）的场景不同于泛 B 端，其也融入了许多 C 端的设计理念与原则。所谓 M 端，其特点在于：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事：制造端必然脱离不了线下，任何的业务流程、软件系统的设计都需要考虑与线下场景的融合性，考虑人机交互的友好性；ToM 的产品，特别是含协同侧的产品，需要解决全流程（即某个可闭环流程）中的问题，其中往往涉及到譬如 CAD/CAM/CAE 等硬核科技难点，也会涉及到譬如不同设备数字化打通等生态交互的难点；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>人：制造端的很多用户往往缺乏软件相关的背景与认知，在习惯了固有的工作模式后往往抗拒改变，对系统变革过程中带来的阵痛会产生较大反弹；人员流动性大且纯软销售的商业模式不易，不适合投入大量的培训成本；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>异：不同行业、不同工厂之间的流程同中有异，不同职位、背景的人对系统的需求、期望有极大的差异；&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="中国制造业的价格黑洞">中国制造业的价格黑洞&lt;/h1>
&lt;p>任何的产品设计都脱离不了背后的商业模式，多次创业失败的经历也让笔者认识到从产品，即使是最基础的功能，设计之初就要不断思索未来的可运转的、能够产生正向现金流的商业模式。中国是世界工厂，制造业能力居世界之首，作为消费者是莫大的幸事，但是作为创业者就不可避免地经历及其残酷的价格竞争；这也就意味着想以制造业本身的利润去驱策高昂的软件研发投入，有着一定的风险。另一方面，目前国内的 ToM 软件付费的习惯，特别是在像 3D 打印这样细分领域内，还没有养成，软件想在初期即完成一定的正循环也是极难的。&lt;/p>
&lt;p>很多企业服务创业者，都面临着技术和商业路径的折中和平衡；客户不关心技术，只关心解决方案，只关心你能否体现出真正的价值，而不是你 PPT 的酷炫程度。经过十余年数字化的洗礼，很多的制造工厂已经通过 QQ、Word、Excel 完成了一定的数字化改造，这点不能忽视；现在也绝不是拿着一个看板就能忽悠企业老板付费的年代。ToM 产品设计之初需要摈弃纯技术思维、产品思维，不能脱离你的行业背景或者现在的阶段去追求纯技术上的优越或者纯产品体验的优化；也不能以技术洁癖去重复造轮子，而是要能快速组合搭配到合适的方案。不过新技术可以成为敲门砖，新技术必须要比原有的解决方案产生更好的效果；一旦某家企业能够提早实现新技术的效能，就有可能成为超额利润的来源。&lt;/p>
&lt;p>这次创业初期笔者也颇多自我怀疑，特别是以纯软方式在市场碰壁多次之后；相信很多的创业者也会有这样的漫漫长夜。这时候确实就要多想想底线思维与终局思维，所谓的底线思维，就是我们现在做的有没有价值，所处的行业是不是在发展，你自己有没有提高；即愿赌则不畏输，有所得即可。终局思维就是我们想达成的目标是不是被认可的未来的发展方向，就像云计算，就像新能源汽车，如果你笃定看到了未来的方向，那么过程中碰到的困难只要坚持了，总会有所汇报。&lt;/p>
&lt;h1 id="产品设计的一些注意点">产品设计的一些注意点&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>主动、深入的需求挖掘：如前文所述，ToM 软件产品的用户往往对软件认知较少，不像大型的科技公司，业务会积极抛出需求；在制造业中需要我们以戴目倾耳、抽丝剥茧的方式去挖掘出需求。开发不能脱离工厂，脱离一线，要以敬畏之心主动参与到生产制造环节，去梳理然后复刻那些优秀的经验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>点面结合，左冲右突：创业公司在设计产品的时候往往会有一个方向的考虑，是先以爆款单点突破还是直接推出大而全的平台型产品。笔者颇有感触的一点事，如果你只是提出像 MES、CRM、ERP 这种偏协同的信息化系统（譬如纯粹信息采集的工业互联系统），那么必然只能浮于表面，难以解决工厂真正的痛点；而如果你花费大力气解决了一两个关键节点，但是又缺乏全流程的系统支持，那么也无法让客户最终买单。在创业阶段各种资源有限的情况下，其中权衡只能是冷暖自知。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>化繁为简，降低认知门槛：软件的设计者、开发者往往很难想象自己看来很简单的几个功能，在用户看来是多么的复杂与难以理解。ToM 产品因其内在逻辑而不可避免地会包含诸多的流程、模块，我们需要做的就是如何降低用户的认知门槛，特别是对于那些可能连微信都不会的用户。笔者在这里是首要帮助用户建立角色认知，让他们将系统的功能与之前线下日常工作中的行为相勾连，逐步完成迁移。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>消息强通知与主动引导：这一点颇为重要，其核心是要让&lt;strong>用户不需要思考我要做什么，而是能够根据系统的引导、指令，知道自己要去做什么&lt;/strong>。在流动性特别大、培训周期短的制造业工厂中，软件系统从被动向主动的转变，起到真正中枢调动的作用，是其核心价值所在。但是，需要强调的是，我们也不能直接建立空中楼阁，这一点的实现还是建立在已有系统各个原子模块完善，允许用户随时干预的前提下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>灵活交互，便捷为上：所谓麻烦留给自己，便捷留给用户。这一点要求我们在对用户实际工作场景，譬如是否有电脑、是否能用手机、是否有大屏幕、是否方面输入等等，有明确认知的基础上，灵活选择交互方式。譬如对于需要录入较长文本的情况下可以选择扫码枪等，譬如不方便操作键盘鼠标的情况下采用脚踩式按钮等。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>产品思维与技术课程设计</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/%E4%BA%A7%E5%93%81%E6%80%9D%E7%BB%B4%E4%B8%8E%E6%8A%80%E6%9C%AF%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/%E4%BA%A7%E5%93%81%E6%80%9D%E7%BB%B4%E4%B8%8E%E6%8A%80%E6%9C%AF%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h1 id="产品思维与技术课程设计">产品思维与技术课程设计&lt;/h1>
&lt;p>录制课程和写文章还是有非常大的差异的。&lt;/p>
&lt;ul>
&lt;li>如何避免生硬？每个小节先展示下最终的效果，然后引导同学一起来进行编码实现。&lt;/li>
&lt;li>每门课程一定要依托于某个具体的案例。&lt;/li>
&lt;/ul></description></item><item><title>微前端 &amp; K8s，创业团队的多平台前端项目的构建之路</title><link>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/%E5%BE%AE%E5%89%8D%E7%AB%AF-k8s%E5%88%9B%E4%B8%9A%E5%9B%A2%E9%98%9F%E7%9A%84%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B9%8B%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/developer-zero-to-mastery/%E6%9F%90%E7%86%8A%E7%9A%84%E6%88%90%E9%95%BF%E4%B9%8B%E8%B7%AF/2020/%E5%BE%AE%E5%89%8D%E7%AB%AF-k8s%E5%88%9B%E4%B8%9A%E5%9B%A2%E9%98%9F%E7%9A%84%E5%A4%9A%E5%B9%B3%E5%8F%B0%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9E%84%E5%BB%BA%E4%B9%8B%E8%B7%AF/</guid><description>&lt;h1 id="微前端--k8s创业团队的多平台前端项目的构建之路">微前端 &amp;amp; K8s，创业团队的多平台前端项目的构建之路&lt;/h1>
&lt;p>本文笔者想换一种表述方式，不同于之前文章中的条分缕析，而是以问-答形式记述这半年来的一些思考。&lt;/p>
&lt;h1 id="业务-vs-技术">业务 VS 技术？&lt;/h1>
&lt;p>在《领域建模》系列文章中，&lt;/p>
&lt;p>统一认知&lt;/p>
&lt;h1 id="如何提高团队的研发效能">如何提高团队的研发效能？&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>够用的脚手架、统一的配置&lt;/p>
&lt;/li>
&lt;li>
&lt;p>所谓中台&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这两年中台的概念很火，很多公司都进行了所谓中台的落地性实践，这里我们也借用中台这个概念，笔者认为每个最小组织的团队，都应该也有自己的中台武库。还是要强调下，这里不希望形而上学，借用了所谓中台的概念，只是为了去描述为了提高整个团队，面向业务交付侧的研发效能的提升，应该做的努力。&lt;/p>
&lt;p>前端的中台，有交付向的、数据向的、体验向的（譬如 &lt;a href="https://github.com/FE-Kits/ueme" target="_blank" rel="noopener">UEME&lt;/a>）、可视化搭建向的等等，对于创业团队，可能无法很快地将某些设想系统化。典型的就像页面搭建的能力，我们也需要面向不同的客户提供不同的&lt;/p>
&lt;h1 id="不同的项目之间应该如何平衡共享-个性化之间的差异">不同的项目之间应该如何平衡共享-个性化之间的差异？&lt;/h1>
&lt;p>正如笔者在《软件系统架构》系列文章中的讨论，无论是对于微服务还是微前端，过早地进行优化绝对是潜在风险。&lt;/p>
&lt;h1 id="如何平滑团队同学间的能力差异">如何平滑团队同学间的能力差异？&lt;/h1>
&lt;ul>
&lt;li>使用 TypeScript&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://ke.qq.com/course/982020?taid=6253979190098948&amp;amp;tuin=16f17b88" target="_blank" rel="noopener">【NEXT 公开课】TypeScript 应用实践&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>使用 ESLint &amp;amp; TSLint&lt;/p>
&lt;/li>
&lt;li>
&lt;p>使用 VSCode Snippets&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="如何提高产品的体验感">如何提高产品的体验感？&lt;/h1></description></item></channel></rss>