<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>流量控制 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link><atom:link href="https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><description>流量控制</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>流量控制</title><link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link></image><item><title>Guava RateLimiter</title><link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/guava-ratelimiter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/guava-ratelimiter/</guid><description>&lt;h1 id="guava-ratelimiter">Guava RateLimiter&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/T_Sax1qFEs5vzEXNUc4ceQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/T_Sax1qFEs5vzEXNUc4ceQ&lt;/a> RateLimiter 源码分析(Guava 和 Sentinel 实现)&lt;/li>
&lt;/ul></description></item><item><title>Redis Lua 限流</title><link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/redis-lua-%E9%99%90%E6%B5%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/redis-lua-%E9%99%90%E6%B5%81/</guid><description>&lt;h1 id="redis-lua-限流">Redis Lua 限流&lt;/h1>
&lt;h1 id="links">Links&lt;/h1></description></item><item><title>限流算法</title><link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/%E9%99%90%E6%B5%81%E7%AE%97%E6%B3%95/</guid><description>&lt;h1 id="限流算法">限流算法&lt;/h1>
&lt;p>令牌桶限制的是平均流入速率（允许突发请求，只要有令牌就可以处理，支持一次拿 3 个令牌，4 个令牌），并允许一定程度突发流量；令牌桶允许一定程度的突发。而漏桶主要目的是平滑流入速率，漏桶限制的是常量流出速率（即流出速率是一个固定常量值，比如都是 1 的速率流出，而不能一次是 1，下次又是 2），从而平滑突发流入速率；&lt;/p>
&lt;ul>
&lt;li>令牌桶是按照固定速率往桶中添加令牌，请求是否被处理需要看桶中令牌是否足够，当令牌数减为零时则拒绝新的请求；&lt;/li>
&lt;li>漏桶则是按照常量固定速率流出请求，流入请求速率任意，当流入的请求数累积到漏桶容量时，则新流入的请求被拒绝；&lt;/li>
&lt;li>计数器来进行限流，主要用来限制总并发数，比如数据库连接池、线程池、秒杀的并发数；只要全局总请求数或者一定时间段的总请求数设定的阀值则进行限流，是简单粗暴的总数量限流，而不是平均速率限流。&lt;/li>
&lt;/ul>
&lt;h1 id="漏桶算法">漏桶算法&lt;/h1>
&lt;p>漏桶(Leaky Bucket)算法思路很简单,水(请求)先进入到漏桶里,漏桶以一定的速度出水(接口有响应速率),当水流入速度过大会直接溢出(访问频率超过接口响应速率),然后就拒绝请求,可以看出漏桶算法能强行限制数据的传输速率.示意图如下:&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/52053261-dd04a480-2593-11e9-9e30-c37fd831d185.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>可见这里有两个变量,一个是桶的大小,支持流量突发增多时可以存多少的水(burst),另一个是水桶漏洞的大小(rate)。因为漏桶的漏出速率是固定的参数,所以,即使网络中不存在资源冲突(没有发生拥塞),漏桶算法也不能使流突发(burst)到端口速率.因此,漏桶算法对于存在突发特性的流量来说缺乏效率。&lt;/p>
&lt;h1 id="令牌桶算法">令牌桶算法&lt;/h1>
&lt;p>令牌桶算法(Token Bucket)和 Leaky Bucket 效果一样但方向相反的算法,更加容易理解.随着时间流逝,系统会按恒定 1/QPS 时间间隔(如果 QPS=100,则间隔是 10ms)往桶里加入 Token(想象和漏洞漏水相反,有个水龙头在不断的加水),如果桶已经满了就不再加了.新请求来临时,会各自拿走一个 Token,如果没有 Token 可拿了就阻塞或者拒绝服务。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/52053269-e55cdf80-2593-11e9-984d-7ca68ef9bcbf.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>令牌桶的另外一个好处是可以方便的改变速度. 一旦需要提高速率,则按需提高放入桶中的令牌的速率. 一般会定时(比如 100 毫秒)往桶中增加一定数量的令牌, 有些变种算法则实时的计算应该增加的令牌的数量。&lt;/p>
&lt;h1 id="计数器限流">计数器限流&lt;/h1>
&lt;p>计数器法是限流算法里最简单也是最容易实现的一种算法。比如我们规定，对于 A 接口来说，我们 1 分钟的访问次数不能超过 100 个。那么我们可以这么做：在一开 始的时候，我们可以设置一个计数器 counter，每当一个请求过来的时候，counter 就加 1，如果 counter 的值大于 100 并且该请求与第一个 请求的间隔时间还在 1 分钟之内，那么说明请求数过多；如果该请求与第一个请求的间隔时间大于 1 分钟，且 counter 的值还在限流范围内，那么就重置 counter，具体算法的示意图如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/52053282-ed1c8400-2593-11e9-8137-fb1f3691780f.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item></channel></rss>