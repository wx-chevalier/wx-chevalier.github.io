<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>服务幂等 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/</link>
      <atom:link href="https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/index.xml" rel="self" type="application/rss+xml" />
    <description>服务幂等</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>服务幂等</title>
      <link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/</link>
    </image>
    
    <item>
      <title>接口幂等</title>
      <link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/%E6%8E%A5%E5%8F%A3%E5%B9%82%E7%AD%89/</guid>
      <description>&lt;h1 id=&#34;api-接口层幂等&#34;&gt;API 接口层幂等&lt;/h1&gt;
&lt;p&gt;如银联提供的付款接口：需要接入商户提交付款请求时附带：source 来源，seq 序列号。source+seq 在数据库里面做唯一索引，防止多次付款。&lt;/p&gt;
&lt;p&gt;对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源 source，一个是来源方序列号 seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>数据库幂等</title>
      <link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%82%E7%AD%89/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B9%82%E7%AD%89/</guid>
      <description>&lt;h1 id=&#34;数据库幂等&#34;&gt;数据库幂等&lt;/h1&gt;
&lt;p&gt;从读写层面来说，写请求有可能会对数据造成改变；从分层架构层面来说，数据访问层（DAO 层）可能会对数据造成改变。因此幂等设计重点考虑数据访问层的写请求。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查询对于结果是不会有改变的（无）&lt;/li&gt;
&lt;li&gt;删除操作需要根据 sql 语句来定义（绝对值的修改是幂等的比如 delete from user where age=10，相对值的修改不是幂等的比如 delete from user bottom 10）&lt;/li&gt;
&lt;li&gt;更新操作需要根据 sql 语句来定义（比如 update user set age=10 where uid=20（绝对值修改）是幂等的，而 update user set age++ where uid=20（相对值的修改）是非幂等的）&lt;/li&gt;
&lt;li&gt;insert 基本上不是幂等,除非表设计了一些约束（比如唯一主键等）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;要实现幂等技术就是要在数据服务层保证幂等。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据表使用唯一主键（unique）或者联合主键保证&lt;/li&gt;
&lt;li&gt;token 机制（redis+token）：数据提交前要向服务的申请 token，token 放到 redis，token 有效时间；提交后后台校验 token，同时删除 token，完成相关业务逻辑。&lt;/li&gt;
&lt;li&gt;通过数据库悲观锁和乐观锁机制&lt;/li&gt;
&lt;li&gt;分布式锁&lt;/li&gt;
&lt;li&gt;根据业务进行状态机幂等设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;insert-前先-select&#34;&gt;insert 前先 select&lt;/h1&gt;
&lt;p&gt;通常情况下，在保存数据的接口中，我们为了防止产生重复数据，一般会在 insert 前，先根据 name 或 code 字段 select 一下数据。如果该数据已存在，则执行 update 操作，如果不存在，才执行 insert 操作。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd701a5132923bf8acd765.jpg&#34; alt=&#34;接口幂等性&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该方案可能是我们平时在防止产生重复数据时，使用最多的方案。但是该方案不适用于并发场景，在并发场景中，要配合其他方案一起使用，否则同样会产生重复数据。我在这里提一下，是为了避免大家踩坑。&lt;/p&gt;
&lt;h1 id=&#34;加悲观锁&#34;&gt;加悲观锁&lt;/h1&gt;
&lt;p&gt;在支付场景中，用户 A 的账号余额有 150 元，想转出 100 元，正常情况下用户 A 的余额只剩 50 元。一般情况下，sql 是这样的：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果出现多次相同的请求，可能会导致用户 A 的余额变成负数。这种情况，用户 A 来可能要哭了。于此同时，系统开发人员可能也要哭了，因为这是很严重的系统 Bug。为了解决这个问题，可以加悲观锁，将用户 A 的那行数据锁住，在同一时刻只允许一个请求获得锁，更新数据，其他的请求则等待。通常情况下通过如下 sql 锁住单行数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd70745132923bf8ae1ef5.jpg&#34; alt=&#34;悲观锁&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个请求同时根据 id 查询用户信息。&lt;/li&gt;
&lt;li&gt;判断余额是否不足 100，如果余额不足，则直接返回余额不足。&lt;/li&gt;
&lt;li&gt;如果余额充足，则通过 for update 再次查询用户信息，并且尝试获取锁。&lt;/li&gt;
&lt;li&gt;只有第一个请求能获取到行锁，其余没有获取锁的请求，则等待下一次获取锁的机会。&lt;/li&gt;
&lt;li&gt;第一个请求获取到锁之后，判断余额是否不足 100，如果余额足够，则进行 update 操作。&lt;/li&gt;
&lt;li&gt;如果余额不足，说明是重复请求，则直接返回成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要特别注意的是：如果使用的是 Mysql 数据库，存储引擎必须用 InnoDB，因为它才支持事务。此外，这里 id 字段一定要是主键或者唯一索引，不然会锁住整张表。悲观锁需要在同一个事务操作过程中锁住一行数据，如果事务耗时比较长，会造成大量的请求等待，影响接口性能。此外，每次请求接口很难保证都有相同的返回值，所以不适合幂等性设计场景，但是在防重场景中是可以的使用的。&lt;/p&gt;
&lt;p&gt;在这里顺便说一下，防重设计和幂等设计，其实是有区别的。防重设计主要为了避免产生重复数据，对接口返回没有太多要求。而幂等设计除了避免产生重复数据之外，还要求每次请求都返回一样的结果。&lt;/p&gt;
&lt;h1 id=&#34;加乐观锁&#34;&gt;加乐观锁&lt;/h1&gt;
&lt;p&gt;既然悲观锁有性能问题，为了提升接口性能，我们可以使用乐观锁。需要在表中增加一个 timestamp 或者 version 字段，这里以 version 字段为例。在更新数据之前先查询一下数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;select&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果数据存在，假设查到的 version 等于 1，再使用 id 和 version 字段作为查询条件更新数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;更新数据的同时 version+1，然后判断本次 update 操作的影响行数，如果大于 0，则说明本次更新成功，如果等于 0，则说明本次更新没有让数据变更。由于第一次请求 version 等于 1 是可以成功的，操作成功后 version 变成 2 了。这时如果并发的请求过来，再执行相同的 sql：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;amount&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;该 update 操作不会真正更新数据，最终 sql 的执行结果影响行数是 0，因为 version 已经变成 2 了，where 中的 version=1 肯定无法满足条件。但为了保证接口幂等性，接口可以直接返回成功，因为 version 值已经修改了，那么前面必定已经成功过一次，后面都是重复的请求。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd712b5132923bf8b0cc9c.jpg&#34; alt=&#34;加乐观锁&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先根据 id 查询用户信息，包含 version 字段&lt;/li&gt;
&lt;li&gt;根据 id 和 version 字段值作为 where 条件的参数，更新用户信息，同时 version+1&lt;/li&gt;
&lt;li&gt;判断操作影响行数，如果影响 1 行，则说明是一次请求，可以做其他数据操作。&lt;/li&gt;
&lt;li&gt;如果影响 0 行，说明是重复请求，则直接返回成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;加唯一索引&#34;&gt;加唯一索引&lt;/h1&gt;
&lt;p&gt;绝大数情况下，为了防止重复数据的产生，我们都会在表中加唯一索引，这是一个非常简单，并且有效的方案。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;alter&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;table&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;UNIQUE&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;KEY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;un_code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;code&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;加了唯一索引之后，第一次请求数据可以插入成功。但后面的相同请求，插入数据时会报 &lt;code&gt;Duplicate entry &#39;002&#39; for key &#39;order.un_code&lt;/code&gt; 异常，表示唯一索引有冲突。虽说抛异常对数据来说没有影响，不会造成错误数据。但是为了保证接口幂等性，我们需要对该异常进行捕获，然后返回成功。如果是 java 程序需要捕获：DuplicateKeyException 异常，如果使用了 spring 框架还需要捕获：MySQLIntegrityConstraintViolationException 异常。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd71bf5132923bf8b30547.jpg&#34; alt=&#34;唯一索引&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过浏览器发起请求，服务端收集数据。&lt;/li&gt;
&lt;li&gt;将该数据插入 mysql&lt;/li&gt;
&lt;li&gt;判断是否执行成功，如果成功，则操作其他数据（可能还有其他的业务逻辑）。&lt;/li&gt;
&lt;li&gt;如果执行失败，捕获唯一索引冲突异常，直接返回成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;建防重表&#34;&gt;建防重表&lt;/h1&gt;
&lt;p&gt;有时候表中并非所有的场景都不允许产生重复的数据，只有某些特定场景才不允许。这时候，直接在表中加唯一索引，显然是不太合适的。针对这种情况，我们可以通过建防重表来解决问题。该表可以只包含两个字段：id 和 唯一索引，唯一索引可以是多个字段比如：name、code 等组合起来的唯一标识，例如：susan_0001。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd74835132923bf8bdef32.jpg&#34; alt=&#34;防重表&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过浏览器发起请求，服务端收集数据。&lt;/li&gt;
&lt;li&gt;将该数据插入 mysql 防重表&lt;/li&gt;
&lt;li&gt;判断是否执行成功，如果成功，则做 mysql 其他的数据操作（可能还有其他的业务逻辑）。&lt;/li&gt;
&lt;li&gt;如果执行失败，捕获唯一索引冲突异常，直接返回成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;根据状态机&#34;&gt;根据状态机&lt;/h1&gt;
&lt;p&gt;很多时候业务表是有状态的，比如订单表中有：1-下单、2-已支付、3-完成、4-撤销等状态。如果这些状态的值是有规律的，按照业务节点正好是从小到大，我们就能通过它来保证接口的幂等性。假如 id=123 的订单状态是已支付，现在要变成完成状态。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;update&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;where&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;and&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一次请求时，该订单的状态是已支付，值是 2，所以该 update 语句可以正常更新数据，sql 执行结果的影响行数是 1，订单状态变成了 3。后面有相同的请求过来，再执行相同的 sql 时，由于订单状态变成了 3，再用 status=2 作为条件，无法查询出需要更新的数据，所以最终 sql 执行结果的影响行数是 0，即不会真正的更新数据。但为了保证接口幂等性，影响行数是 0 时，接口也可以直接返回成功。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/26/60fd8d395132923bf82d8598.jpg&#34; alt=&#34;状态机&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过浏览器发起请求，服务端收集数据。&lt;/li&gt;
&lt;li&gt;根据 id 和当前状态作为条件，更新成下一个状态&lt;/li&gt;
&lt;li&gt;判断操作影响行数，如果影响了 1 行，说明当前操作成功，可以进行其他数据操作。&lt;/li&gt;
&lt;li&gt;如果影响了 0 行，说明是重复请求，直接返回成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要特别注意的是，该方案仅限于要更新的表有状态字段，并且刚好要更新状态字段的这种特殊情况，并非所有场景都适用。&lt;/p&gt;
&lt;h1 id=&#34;加分布式锁&#34;&gt;加分布式锁&lt;/h1&gt;
&lt;p&gt;其实前面介绍过的加唯一索引或者加防重表，本质是使用了数据库的分布式锁，也属于分布式锁的一种。但由于数据库分布式锁的性能不太好，我们可以改用：redis 或 zookeeper。鉴于现在很多公司分布式配置中心改用 apollo 或 nacos，已经很少用 zookeeper 了，我们以 redis 为例介绍分布式锁。&lt;/p&gt;
&lt;p&gt;目前主要有三种方式实现 redis 的分布式锁：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;setNx 命令&lt;/li&gt;
&lt;li&gt;set 命令&lt;/li&gt;
&lt;li&gt;Redission 框架&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体流程图如下：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/26/60fd8d9a5132923bf82f4085.jpg&#34; alt=&#34;分布式锁&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户通过浏览器发起请求，服务端会收集数据，并且生成订单号 code 作为唯一业务字段。&lt;/li&gt;
&lt;li&gt;使用 redis 的 set 命令，将该订单 code 设置到 redis 中，同时设置超时时间。&lt;/li&gt;
&lt;li&gt;判断是否设置成功，如果设置成功，说明是第一次请求，则进行数据操作。&lt;/li&gt;
&lt;li&gt;如果设置失败，说明是重复请求，则直接返回成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;需要特别注意的是：分布式锁一定要设置一个合理的过期时间，如果设置过短，无法有效的防止重复请求。如果设置过长，可能会浪费 redis 的存储空间，需要根据实际业务情况而定。&lt;/p&gt;
&lt;h1 id=&#34;获取-token&#34;&gt;获取 token&lt;/h1&gt;
&lt;p&gt;除了上述方案之外，还有最后一种使用 token 的方案。该方案跟之前的所有方案都有点不一样，需要两次请求才能完成一次业务操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一次请求获取 token&lt;/li&gt;
&lt;li&gt;第二次请求带着这个 token，完成业务操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体流程图如下：&lt;/p&gt;
&lt;p&gt;第一步，先获取 token。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/26/60fd8de95132923bf830a36b.jpg&#34; alt=&#34;获取 Token&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;第二步，做具体业务操作。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/26/60fd8e075132923bf8312a18.jpg&#34; alt=&#34;具体业务操作&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;具体步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户访问页面时，浏览器自动发起获取 token 请求。&lt;/li&gt;
&lt;li&gt;服务端生成 token，保存到 redis 中，然后返回给浏览器。&lt;/li&gt;
&lt;li&gt;用户通过浏览器发起请求时，携带该 token。&lt;/li&gt;
&lt;li&gt;在 redis 中查询该 token 是否存在，如果不存在，说明是第一次请求，做则后续的数据操作。&lt;/li&gt;
&lt;li&gt;如果存在，说明是重复请求，则直接返回成功。&lt;/li&gt;
&lt;li&gt;在 redis 中 token 会在过期时间之后，被自动删除。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上方案是针对幂等设计的。如果是防重设计，流程图要改改：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/26/60fd8e335132923bf831f49d.jpg&#34; alt=&#34;防重设计&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>无状态设计</title>
      <link>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/%E6%97%A0%E7%8A%B6%E6%80%81%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/ha-series/1.%E5%BC%B9%E6%80%A7%E6%9C%8D%E5%8A%A1/%E6%9C%8D%E5%8A%A1%E5%B9%82%E7%AD%89/%E6%97%A0%E7%8A%B6%E6%80%81%E8%AE%BE%E8%AE%A1/</guid>
      <description>&lt;h1 id=&#34;无状态设计&#34;&gt;无状态设计&lt;/h1&gt;
&lt;p&gt;单体条件下面，服务只有一个，因此状态每个时刻也就只有一种状态。在分布式集群环境下面，就存在一个状态同步问题，因此也有有状态服务设计和无状态服务设计。比如 session，如果 session 保存在每一台服务器上，那么就是有状态设计，可能会出现集群内，服务状态不一致的现象；如果 session 由专门的一台服务器来保存，就是无状态设计，服务不保存状态，需要的时候从同一的服务器中获取，保证了服务在任何时刻的状态一致。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;无状态服务（stateless service）对单次请求的处理，不依赖其他请求，也就是说，处理一次请求所需的全部信息，要么都包含在这个请求里，要么可以从外部获取到（比如说数据库），服务器本身不存储任何信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有状态服务（stateful service）则相反，它会在自身保存一些数据，先后的请求是有关联的&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;有状态的服务，会有比较明显的缺点，服务间数据需要同步，成为副本关系，逻辑复杂也浪费资源；无状态的应用服务器，不保存上下文信息，只负责对用户的每次请求提交数据进行处理然后返回处理结果。无状态应用服务器之间是对等的关系，无依赖，请求到哪个服务器，处理结果都一样的。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://i.postimg.cc/YCg68zBx/image.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;对于高可用服务的构建要求来说，快速 failover 以及快速扩容是非常重要的 服务有状态，服务当机就可能会存在数据丢失；关键是快速扩容，有状态服务会有冷启动的问题，还需要先加载数据才能对外提供服务。在进行系统设计时，时刻要有这个意识，我们的应用服务器，要设计成无状态，不保存任何上下文信息。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
