<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>统计与告警策略 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/sre-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/</link><atom:link href="https://ng-tech.icu/books/sre-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/index.xml" rel="self" type="application/rss+xml"/><description>统计与告警策略</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>统计与告警策略</title><link>https://ng-tech.icu/books/sre-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/</link></image><item><title>统计与告警策略</title><link>https://ng-tech.icu/books/sre-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/sre-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/</guid><description>&lt;h1 id="统计与告警">统计与告警&lt;/h1>
&lt;p>在搜集到时序监控指标后，我们需要对原始指标进行求和等统计操作以得到实际有意义的值。&lt;/p>
&lt;h1 id="统计策略">统计策略&lt;/h1>
&lt;p>以性能统计为例，业界对性能统计有两种方式: 1.通过分位数计算; 2.通过平均值计算. 这两种方式的优缺点恰好是相反的。&lt;/p>
&lt;ul>
&lt;li>通过分位数计算：这种方式可以很大程度上避免受到少量极端异常，举个例子，同一个页面，有四次访问，页面完全加载时间分别是 2 秒、1 秒、3 秒、100 秒，按照平均值算得出来的结果是 26.5 秒，显然没有反映出大多数用户的真实状态. 而通过 75 分位数得出的结论是 3 秒。&lt;/li>
&lt;li>通过平均值计算：平均值计算方式恰好相反，容易受到极端值干扰，但通俗易懂，是使用最广泛的统计指标。&lt;/li>
&lt;/ul>
&lt;h1 id="告警策略">告警策略&lt;/h1>
&lt;p>所以这里需要引入一个告警策略，使得告警更加的人性化，这个机制的核心就是 4 点：&lt;/p>
&lt;ul>
&lt;li>梳理不同的告警级别&lt;/li>
&lt;li>制定告警频率以及做好收敛（主要是去重、合并数量）&lt;/li>
&lt;li>决定不同的告警级别通过什么形式发出通知（短信、手机通知、邮件等）&lt;/li>
&lt;li>发给谁（比如，是不是需要“轮转”或者“逐级上报”这样）&lt;/li>
&lt;/ul></description></item><item><title>异常检测</title><link>https://ng-tech.icu/books/sre-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/sre-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%BB%9F%E8%AE%A1%E4%B8%8E%E5%91%8A%E8%AD%A6%E7%AD%96%E7%95%A5/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/</guid><description>&lt;h1 id="异常检测">异常检测&lt;/h1>
&lt;p>在定期搜集应用的多维度运行指标之后，我们即需要运用异常检测算法来发现潜在的问题目标。首先需要对于指标进行特征选取与处理，譬如关联性处理、指标转换等。然后针对稳定区间、非稳定区间，用不同的离群点检测算法来综合打分做处理。&lt;/p>
&lt;h1 id="错误">错误&lt;/h1>
&lt;p>错误是指当前系统发生的错误请求和错误率，是需要在添加监控时首要关注的指标。基础监控维度的宕机、磁盘（坏盘或文件系统错误）、进程或端口挂掉、网络丢包等故障。业务监控则较为复杂，可能包含以下方面：&lt;/p>
&lt;ul>
&lt;li>核心功能处理错误，每种系统都有特定的核心功能，比如 HDFS 的文件块读写、Zookeeper 对 Key 的读写和修改操作。&lt;/li>
&lt;li>基础功能单元丢失或异常，这里的基础功能单元是指一个系统功能上的基本单位，例如 HDFS 的 Block、Kafka 的 Message，这种基础数据的丢失一般都会对业务功能造成直接的影响。&lt;/li>
&lt;li>Master 故障，对于中心化的分布式系统来说，Master 的健康状况都是重中之重。例如 HDFS 的 NameNode、Zookeeper 的 Leader，ElasticSearch 的 MasterNode。&lt;/li>
&lt;li>可用节点数，对于分布式系统来说，可用节点数也是非常重要的，比如 Zookeeper、ETCD 等系统需要满足可用节点数大于不可用节点数才能保证功能的正常。&lt;/li>
&lt;/ul>
&lt;p>除白盒监控外，主要功能或接口、以及内部存在明显边界的功能模块和上游依赖模块，都应该添加黑盒端到端监控。&lt;/p>
&lt;ul>
&lt;li>MTTF, Mean Time To Failure，系统平均运行多长时间才发生故障，越长越好&lt;/li>
&lt;li>MTTR, Mean Time To Recover，故障平均修复时间，越短越好&lt;/li>
&lt;/ul>
&lt;p>可用性计算公式：&lt;code>Availability= MTTF /（MTTF+MTTR）&lt;/code>&lt;/p></description></item></channel></rss>