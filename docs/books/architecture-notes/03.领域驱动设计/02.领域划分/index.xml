<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02.领域划分 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/</link><atom:link href="https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/index.xml" rel="self" type="application/rss+xml"/><description>02.领域划分</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>02.领域划分</title><link>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/</link></image><item><title>提炼问题域</title><link>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/%E6%8F%90%E7%82%BC%E9%97%AE%E9%A2%98%E5%9F%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/%E6%8F%90%E7%82%BC%E9%97%AE%E9%A2%98%E5%9F%9F/</guid><description>&lt;h1 id="提炼问题域">提炼问题域&lt;/h1>
&lt;p>对于复杂问题我们本能的反应会是到一个问题给出一个回应办法，而从这些问题整体来看这种方式会阻碍团队找出最佳解决方案。DDD 帮助技术人员对需求进行本质思考和理解，最大的突破是着重明确了区分了问题域和解决方案域。对业务问题的认知不是技术人员最擅长的，很多研发在碰到需求时，脑子本能就闪现表、类、服务、架构，把解决方案当终极问题来追求，而 DDD 要求研发进行痛苦的蜕变，关注点不在是聚焦在功能上，而是理解需求的真正意图和愿景，更深层次地理解隐含的愿景才能开发出真正地解决问题和创造价值的系统来。&lt;/p>
&lt;p>同时 DDD 要求领域专家和技术人员坐在一起通力合作、密切沟通来分析和建模，领域专家对业务有着深刻的理解，技术人员擅长技术实现和架构设计，而领域专家和技术人员由于工种的差异导致交流产生障碍，开发人员满脑子是技术语言，领域专家脑子也都是业务概念，如果按照本能基于自己的专业背景进行沟通，效率太低了，即使有翻译的角色也会产生理解偏差，DDD 的一个核心原则是所有人员包括领域专家和技术的进行任何沟通都使用一种基于模型的通用语言（UL，Ubiquitous Language），在代码中也是这样。在提炼问题域过程中，领域专家和技术专家通过充分交流，进行需求分析和知识提炼，获得清晰的问题子域，识别出核心域、通用域、支撑域。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>通用(Generic)层: 通用层通常被认为已经被行业解决的问题，如架构设计中的可观测性的 Logging、Metrics 和 Tracing，各种云服务(Cloud Service)等，这些都已经有比较好的实现方案，对接就可以；如成熟的行业解决方案，如 ERP、CRM、成熟硬件系统等，直接采购即可。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>支撑(Supporting) Domain：和通用层类似，但是系统更来自内部或者还需要在通用的基础上进行一些定制开发。如一个电商系统，会员、商品、订单、物流等业务系统，当然还有一些内部开发的技术类型支撑系统。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>核心(Core)层: 也就是我们常说的业务核心，当然如果是技术产品，就是技术核心，这个也就是你最要关注的；核心域是开发该软件系统根本竞争力所在，也是领域建模的重心，建议分配最精锐的研发。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>核心域是最与众不同且花费精力比较多的，在复杂性 Y 维度，我们要避免高复杂度的通用和支撑层，这样会分散你的注意力，同时还要投入非常大的精力，如果确实需要，购买服务的方式可能最佳。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/09/13/w0LIdf.png" alt="Model Complexity vs Business Differentiation" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>该阶段领域专家只专注于问题域而不是解决方案，业务和技术人员基于 UL 沟通，并且考虑投入产出比，团队只为核心业务进行领域驱动设计并创建 UL，订单系统为下单模块进行 DDD，订单监控模块用普通的事务脚本方式来即可。需求分析时从用例开始，列出达成业务目标需要的步骤，切忌跳转到解决方案上，识别出用于构建模型的知识，通过 UML 表示分析模型和业务模型，形成业务和技术人员达成共识的通用语言。&lt;/p>
&lt;h1 id="案例桃树与保险">案例：桃树与保险&lt;/h1>
&lt;p>以研究对象“桃树”为例，其中包括：根，茎，叶 花，果实，种子。这些元素，其中 根茎叶 可放在一起，看做 “营养系统-子域”；，果实，种子 可以看做“生殖系统-子域” 如图：又可细分。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/05/y8C9TH.md.png" alt="桃树，问题域" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>我们来看一下上面这张图。这个例子是在讲如何给桃树建立一个完整的生物学知识体系。初中生物课其实早就告诉我们研究方法了。它的研究过程是这样的。&lt;/p>
&lt;ul>
&lt;li>第一步：确定研究对象，即研究领域，这里是一棵桃树。&lt;/li>
&lt;li>第二步：对研究对象进行细分，将桃树细分为器官，器官又分为营养器官和生殖器官两种。其中营养器官包括根、茎和叶，生殖器官包括花、果实和种子。桃树的知识体系是我们已经确定要研究的问题域，对应 DDD 的领域。根、茎、叶、花、果实和种子等器官则是细分后的问题子域。这个过程就是 DDD 将领域细分为多个子域的过程。&lt;/li>
&lt;li>第三步：对器官进行细分，将器官细分为组织。比如，叶子器官可细分为保护组织、营养组织和输导组织等。这个过程就是 DDD 将子域进一步细分为多个子域的过程。&lt;/li>
&lt;li>第四步：对组织进行细分，将组织细分为细胞，细胞成为我们研究的最小单元。细胞之间的细胞壁确定了单元的边界，也确定了研究的最小边界。&lt;/li>
&lt;/ul>
&lt;p>我们知道细胞核、线粒体、细胞膜等物质共同构成细胞，这些物质一起协作让细胞具有这类细胞特定的生物功能。在这里你可以把细胞理解为 DDD 的聚合，细胞内的这些物质就可以理解为聚合里面的聚合根、实体以及值对象等，在聚合内这些实体一起协作完成特定的业务功能。这个过程类似 DDD 设计时，确定微服务内功能要素和边界的过程。结一下，就是说每一个细分的领域都会有一个知识体系，也就是 DDD 的领域模型。在所有子域的研究完成后，我们就建立了全域的知识体系了，也就建立了全域的领域模型。&lt;/p>
&lt;p>保险是个比较大的领域，很早以前的保险核心系统把所有的功能都放在一个系统里来实现，这个系统就是我们常说的单体系统。后来单体系统开始无法适应保险业务的发展，因此保险公司开始了中台转型，引入分布式微服务架构来替换原来的单体系统。而分布式微服务架构就需要划分业务领域边界，建立领域模型，并实现微服务落地了。&lt;/p>
&lt;p>为实现保险领域建模和微服务建设，我们可以根据业务关联度以及流程边界将保险领域细分为：承保、收付、再保以及理赔等子域，而承保子域还可以继续细分为投保、保全（寿险）、批改（财险）等子子域。在投保这个限界上下文内可以建立投保的领域模型，投保的领域模型最后映射到系统就是投保微服务。这就是一个保险领域的细分和微服务的建设过程。那么你可能会说，我不是保险行业的人，我怎么理解这个过程呢？我认为，不同行业的业务模型可能会不一样，但领域建模和微服务建设的过程和方法基本类似，其核心思想就是将问题域逐步分解，降低业务理解和系统实现的复杂度。&lt;/p></description></item><item><title>通用语言</title><link>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/%E9%80%9A%E7%94%A8%E8%AF%AD%E8%A8%80/</guid><description>&lt;h1 id="通用语言">通用语言&lt;/h1>
&lt;p>在 DDD 领域建模和系统建设过程中，有很多的参与者，包括领域专家、产品经理、项目经理、架构师、开发经理和测试经理等。对同样的领域知识，不同的参与角色可能会有不同的理解，那大家交流起来就会有障碍，怎么办呢？因此，在 DDD 中就出现了“通用语言”和“限界上下文”这两个重要的概念。这两者相辅相成，通用语言定义上下文含义，限界上下文则定义领域边界，以确保每个上下文含义在它特定的边界内都具有唯一的含义，领域模型则存在于这个边界之内。&lt;/p>
&lt;p>怎么理解通用语言这个概念呢？在事件风暴过程中，通过团队交流达成共识的，能够简单、清晰、准确描述业务涵义和规则的语言就是通用语言。也就是说，通用语言是团队统一的语言，不管你在团队中承担什么角色，在同一个领域的软件生命周期里都使用统一的语言进行交流。那么，通用语言的价值也就很明了了，它可以解决交流障碍这个问题，使领域专家和开发人员能够协同合作，从而确保业务需求的正确表达。&lt;/p>
&lt;p>通用语言包含术语和用例场景，并且能够直接反映在代码中。通用语言中的名词可以给领域对象命名，如商品、订单等，对应实体对象；而动词则表示一个动作或事件，如商品已下单、订单已付款等，对应领域事件或者命令。通用语言贯穿 DDD 的整个设计过程。作为项目团队沟通和协商形成的统一语言，基于它，你就能够开发出可读性更好的代码，将业务需求准确转化为代码设计。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/05/y8FOED.png" alt="事件风暴建立通用语言到领域对象设计和代码落地" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在事件风暴的过程中，领域专家会和设计、开发人员一起建立领域模型，在领域建模的过程中会形成通用的业务术语和用户故事。事件风暴也是一个项目团队统一语言的过程。通过用户故事分析会形成一个个的领域对象，这些领域对象对应领域模型的业务对象，每一个业务对象和领域对象都有通用的名词术语，并且一一映射。微服务代码模型来源于领域模型，每个代码模型的代码对象跟领域对象一一对应。&lt;/p>
&lt;h1 id="语言与代码模型映射">语言与代码模型映射&lt;/h1>
&lt;p>根据事件风暴过程领域对象和关系，对产出的限界上下文、聚合、实体、值对象、仓储、事件、应用服务、领域服务等领域对象以及各对象之间的依赖关系进行梳理，确定各对象在分层架构中的位置和依赖关系，建立领域对象分层架构视图，为每个领域对象建立与代码模型对象的一一映射。&lt;/p>
&lt;p>根据领域对象在 DDD 分层架构中所在的层、领域类型、与代码对象的映射关系，定义领域对象在微服务代码模型中的包、类和方法名称等，设计微服务工程的代码层级和代码结构，明确各层间的调用关系。&lt;/p>
&lt;p>领域对象及服务矩阵主要用来记录事件风暴和微服务设计过程中产出的领域对象属性，如：各领域对象在 DDD 分层架构中的位置、属性、依赖关系以及与代码对象的映射关系等。通过建立领域对象与代码对象的映射关系，可指导软件开发人员准确无误的按照设计文档完成微服务开发。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230418155736.png" alt="领域语言与代码模型映射" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>各栏说明如下：&lt;/p>
&lt;ul>
&lt;li>层：定义领域对象位于 DDD 分层架构中的哪一层。如：接口层、应用层、领域层以及基础层等。&lt;/li>
&lt;li>聚合：在事件风暴过程中将关联紧密的实体和值对象等组合形成聚合。本栏说明聚合名称。&lt;/li>
&lt;li>领域对象名称：领域模型中领域对象的具体名称。如：“请假审批已通过”是类型为“事件”的领域对象；“请假单”是领域类型为“实体”的领域对象。&lt;/li>
&lt;li>领域类型：在领域模型中根据 DDD 知识域定义的领域对象的类型，如：限界上下文、聚合、聚合根（实体）、实体、值对象、事件、命令、应用服务、领域服务和仓储服务等。&lt;/li>
&lt;li>依赖对象名称：根据业务对象依赖或分层调用依赖关系建立的领域对象的依赖关系（如服务调用依赖、关联对象聚合等）。本栏说明领域对象需依赖的其他领域对象，如上层服务在组合和编排过程中对下层服务的调用依赖、实体之间或者实体与值对象在聚合内的依赖等。&lt;/li>
&lt;li>包名：代码模型中的包名，本栏说明领域对象所在的软件包。&lt;/li>
&lt;li>类名：代码模型中的类名，本栏说明领域对象的类名。&lt;/li>
&lt;li>方法名：代码模型中的方法名，本栏说明领域对象实现或操作的方法名。&lt;/li>
&lt;/ul>
&lt;p>再来看一个案例，表格中的这些名词术语就是项目团队在事件风暴过程中达成一致、可用于团队内部交流的通用语言。在这个表格里面我们可以看到，DDD 分析过程中所有的领域对象以及它们的属性都被记录下来了，除了 DDD 的领域对象，我们还记录了在微服务设计过程中领域对象所对应的代码对象，并将它们一一映射。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/05/y8krIe.png" alt="领域对象与代码映射" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>DDD 分析和设计过程中的每一个环节都需要保证限界上下文内术语的统一，在代码模型设计的时侯就要建立领域对象和代码对象的一一映射，从而保证业务模型和代码模型的一致，实现业务语言与代码语言的统一。&lt;/p></description></item><item><title>限界上下文</title><link>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/architecture-notes/03.%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1/02.%E9%A2%86%E5%9F%9F%E5%88%92%E5%88%86/%E9%99%90%E7%95%8C%E4%B8%8A%E4%B8%8B%E6%96%87/</guid><description>&lt;h1 id="限界上下文">限界上下文&lt;/h1>
&lt;p>对一个大型系统，领域模型的完全统一将是不可行的或者不划算的。DDD 的构建块不能盲目地应用在一个无限大的领域模型上，一个无限大的领域模型也无助于我们开发出优质的软件，限界上下文是分解领域模型的关键。限界上下文是一种分而治之的思维，也是一种高层的抽象机制，让人们对领域进行本质思考，简化问题和应对复杂性；它保证领域模型的一致性和完整性，清晰边界的控制力保证了领域的安全和稳定。&lt;/p>
&lt;p>我们可以将限界上下文拆解为两个词：限界和上下文。限界就是领域的边界，而上下文则是语义环境。通过领域的限界上下文，我们就可以在统一的领域边界内用统一的语言进行交流。限界上下文用来封装通用语言和领域对象，提供上下文环境，保证在领域之内的一些术语、业务相关对象等（通用语言）有一个确切的含义，没有二义性。这个边界定义了模型的适用范围，使团队所有成员能够明确地知道什么应该在模型中实现，什么不应该在模型中实现。&lt;/p>
&lt;p>用一个保险领域的例子来说明下术语的边界。保险业务领域有投保单、保单、批单、赔案等保险术语，它们分别应用于保险的不同业务流程。&lt;/p>
&lt;ul>
&lt;li>客户投保时，业务人员记录投保信息，系统对应有投保单实体对象。&lt;/li>
&lt;li>缴费完成后，业务人员将投保单转为保单，系统对应有保单实体对象，保单实体与投保单实体关联。&lt;/li>
&lt;li>如客户需要修改保单信息，保单变为批单，系统对应有批单实体对象，批单实体与保单实体关联。&lt;/li>
&lt;li>如果客户发生理赔，生成赔案，系统对应有报案实体对象，报案实体对象与保单或者批单实体关联。&lt;/li>
&lt;/ul>
&lt;p>投保单、保单、批单、赔案等，这些术语虽然都跟保单有关，但不能将保单这个术语作用在保险全业务领域。因为术语有它的边界，超出了边界理解上就会出现问题。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/05/y8AlQI.png" alt="保单模型案例" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>首先，领域可以拆分为多个子领域。一个领域相当于一个问题域，领域拆分为子域的过程就是大问题拆分为小问题的过程。在这个图里面保险领域被拆分为：投保、支付、保单管理和理赔四个子域。子域还可根据需要进一步拆分为子子域，比如，支付子域可继续拆分为收款和付款子子域。拆到一定程度后，有些子子域的领域边界就可能变成限界上下文的边界了。&lt;/p>
&lt;p>子域可能会包含多个限界上下文，如理赔子域就包括报案、查勘和定损等多个限界上下文（限界上下文与理赔的子子域领域边界重合）。也有可能子域本身的边界就是限界上下文边界，如投保子域。每个领域模型都有它对应的限界上下文，团队在限界上下文内用通用语言交流。领域内所有限界上下文的领域模型构成整个领域的领域模型。理论上限界上下文就是微服务的边界。我们将限界上下文内的领域模型映射到微服务，就完成了从问题域到软件的解决方案。可以说，限界上下文是微服务设计和拆分的主要依据。在领域模型中，如果不考虑技术异构、团队沟通等其它外部因素，一个限界上下文理论上就可以设计为一个微服务。&lt;/p>
&lt;h1 id="识别限界上下文">识别限界上下文&lt;/h1>
&lt;p>明确了系统的问题域和业务期望后，梳理出主要的业务流程，这些业务流程体现了各种参与者在这个过程中通过业务活动共同协作，最终完成具有业务价值的领域功能。业务流程结合了参与角色（Who）、业务活动（What）和业务价值（Why）。在业务流程的基础上，我们就可以抽象出不同的业务场景，这些业务场景又由多个业务活动组成，可以利用领域场景分析方法剖析场景，以帮助我们识别业务活动，例如采用用例对场景进行分析，此时，一个业务活动实则就是一个用例。业务流程是一个由多个用户角色参与的动态过程，而业务场景则是这些用户角色执行业务活动的静态上下文。&lt;/p>
&lt;p>接下来，我们利用领域场景分析的用例分析方法剖析这些场景。通过参与者（Actor）来驱动对用例的识别，这些参与者恰好就是参与到场景业务活动的角色。根据用例描述出来的业务活动应该与统一语言一致，最好直接从统一语言中撷取。一旦准确地用统一语言描述出这些业务活动，我们就可以从语义相关性和功能相关性两个方面识别业务边界，进而提炼出初步的限界上下文。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/04/y13oPP.png" alt="限界上下文的提炼" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>从不同角度看待限界上下文，限界上下文会呈现出对不同对象的控制力。&lt;/p>
&lt;ul>
&lt;li>领域逻辑层面：限界上下文确定了领域模型的业务边界，维护了模型的完整性与一致性，从而降低系统的业务复杂度。&lt;/li>
&lt;li>团队合作层面：限界上下文确定了团队的工作边界，建立了团队之间的合作模式，提升了团队间的协作效率，“康威定律”告诉我们，系统设计（产品结构）等同组织形式，每个设计系统的组织，其产生的设计等同于组织之间的沟通结构，限界上下文指导产生的团队结构的工作模式是最高效的。&lt;/li>
&lt;li>技术架构层面：限界上下文确定了系统架构的应用边界，保证了系统层和上下文领域层各自的一致性，建立了上下文之间的集成方式。微服务中，限界上下文指导技术人员划分微服务的边界，通常一个限界上下文作为一个在独立进程中运行的微服务。&lt;/li>
&lt;/ul>
&lt;h2 id="鲁棒图">鲁棒图&lt;/h2>
&lt;p>鲁棒图是需求设计过程中使用的一种方法（鲁棒性分析），通过鲁棒分析法可以让设计人员更清晰、全面了解需求。它通常使用在需求分析后及需求设计前做软件架构分析之用，它主要注重于功能需求的设计分析工作。需求规格说明书为其输入信息，设计模型为其输出信息。它是从功能需求向设计方案过渡的第一步，重点是识别组成软件系统的高级职责模块、规划模块之间的关系。&lt;/p>
&lt;p>鲁棒图包含三种图形：边界、控制、实体，三个图形如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230427181920.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>边界：起与外界交互的作用，它只能与控制对象和执行者有关系&lt;/li>
&lt;li>控制：对业务控制、流程控制的作用，它能与边界对象和实体对象有关系&lt;/li>
&lt;li>实体：业务元素的存储对象，与领域模型中的对象有良好的关系。它只能与控制对象有关系&lt;/li>
&lt;/ul>
&lt;p>我们在对之前识别出的每个 Use Case，都可以绘制一份鲁棒图。通过绘制鲁棒图，我们可以定义出该场景的涉及到的边界类、控制类以及这些控制类会加工/处理哪些实体对象。我们以邮箱注册账号这个 Case 为例，我们可以简单的绘制出鲁棒图如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230427182126.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="域划分评估">域划分评估&lt;/h1>
&lt;p>在领域划分之后往往可以得到一个或多个域划分的方案（或者组合），接下来就是判断哪种划分方案更为合理。主要的判定原则会参照经典的“高内聚、低耦合”的原则，即将绘制每个 Use Case 的时序图，并以域为维度来绘制生命周期线，看域与域之间的调用是否过于频繁？甚至是反复调用不同的域服务？如果存在这种情况，就意味着这两个域之间存在比较严重的耦合。这往往通过直观就能有个大致的判断。&lt;/p>
&lt;h2 id="自治单元">自治单元&lt;/h2>
&lt;p>DDD 驱动我们把每一个限界上下文设计成一个个“自治”的单元，自治要满足四个特点：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/04/y18sds.png" alt="自治单元概念示意" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>最小完备是实现自治的基本条件，指的是自治单元履行的职责是根据业务价值的完整性和最小功能集进行设计的，这让自治单元无需求助其他自治单元获得信息，避免了不必要的依赖关系，同时也避免了不必要和不合适的职责添加到该自治单元上。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>自我履行意味着由自治单元自身决定要做什么。是否应该履行某职责，由限界上下文拥有的信息来决定。站在自治单元的角度去思考：“如果我拥有了这些信息，我究竟应该履行哪些职责？”这些职责属于当前上下文的活动范围，一旦超出，就该毫不犹豫地将不属于该范围的请求转交给别的上下文。自我履行其实意味着对知识的掌握，为避免风险，你要履行的职责一定是你掌握的知识范畴之内。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>稳定空间指的是减少外界变化对限界上下文内部的影响。稳定空间符合开放封闭原则（OCP），即对修改是封闭的，对扩展是开放的，该原则其实体现了一个单元的封闭空间与开放空间。封闭空间体现为对细节的封装与隐藏，开放空间体现为对共性特征的抽象与统一，二者共同确保了整个空间的稳定。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>独立进化指的是减少限界上下文的变化对外界的影响。用限界上下文的上下游关系来阐释，则稳定空间寓意下游限界上下文，无论上游怎么变，我自岿然不动。要做到独立进化，就必须保证对外公开接口的稳定性，因为这些接口被众多消费者依赖和调用，一旦发生变更，就会牵一发而动全身。一个独立进化的限界上下文，需要一个稳定、设计良好的接口设计，并在版本上考虑了兼容与演化。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>最小完备是基础，只有赋予了限界上下文足够的信息，才能保证它的自我履行。稳定空间与独立进化则一个对内一个对外，是对变化的有效应对，而它们又是通过最小完备和自我履行来保障限界上下文受到变化的影响最小。&lt;/p>
&lt;h2 id="域依赖度">域依赖度&lt;/h2>
&lt;p>如果要从定量角度来分析，可以参考代码圈复杂度的度量算法，我们也可以设定一个“域依赖度”算法，来衡量域与域之间的依赖度。对于依赖度比较高的几个域，我们可以采用：域合并，域拆分或者提取第三方域做依赖倒置等降低耦合。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230427200425.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>通过将所有的 Use Case（至少是最关键的一级 Case）绘制完时序图后，我们基本上就可以得到一个经过平衡考量后合理的域划分。&lt;/p>
&lt;h1 id="上下文映射">上下文映射&lt;/h1>
&lt;p>限界上下文仅是一种对领域问题域的静态划分，还缺少一个重要的关注点，即：限界上下文之间是如何协作的？当我们发现彼此协作存在问题时，说明限界上下文的划分出现了问题，也是识别限界上下文的一种验证方法。Eric Evans 将这种体现限界上下文协作方式的要素称之为“上下文映射（Context Map）”，并给出了 9 种上下文映射关系：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/04/y1GkSf.png" alt="9 种上下文映射" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Open Host Service 相当于微服务之间的协作关系；防腐层（Anti-Corruption）是一种高度防御性的策略，结合门面（Facade）模式和适配器（Adapter）设计模式，将模型与其需要集成的其他模型隔离开来，以防止被频繁变更或不稳定的依赖模型污染和腐败。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/04/y1Gmwj.png" alt="防腐层辅助上下文映射" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="领域划分案例">领域划分案例&lt;/h1>
&lt;p>接下来，我们通过对所有实体对象进行分类，就可以完成域划分了。&lt;/p>
&lt;h2 id="电商系统">电商系统&lt;/h2>
&lt;p>比如，主订单、子订单对象可以归类到交易域；买家、卖家对象可以归类到商户域等：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230427200459.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>先行分析实体与事件关系，如下：&lt;/p>
&lt;ul>
&lt;li>订单：创建、付款、收款、关单、撤销、退款、查询、充转提&lt;/li>
&lt;li>商户、用户：查询、鉴权、注册&lt;/li>
&lt;li>产品：签约、制定计收费规划&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230427181717.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>当然，最终所有的对象是归类到十个域还是二十个域，从理论上看，可以看做一次排列组合过程。只是，我们往往可以根据以往的经验、业务知识，做一个初始的域划分（但不见得是靠谱的）。因此，我们可以认为一个域实际上是一个或多个实体对象的信息集合，并对所管理的实体对象的生命周期进行管理。&lt;/p>
&lt;ul>
&lt;li>一个域管理一个或多个实体对象&lt;/li>
&lt;li>一个实体对象被一个域进行管理&lt;/li>
&lt;li>如果出现一个实体对象被多个域进行管理，那么相关域的职责实际上就是存在冲突，存在耦合，相互影响。&lt;/li>
&lt;/ul>
&lt;h2 id="crm-系统">CRM 系统&lt;/h2>
&lt;p>比如在 CRM 领域，我们按照下面的战略设计图，我会自然的把 CRM 系统划分成销售服务，组织权限服务，营销服务，售卖服务：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230427181656.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="国际报税系统">国际报税系统&lt;/h2>
&lt;p>国际报税系统是为跨国公司的驻外出差雇员（系统中被称之为 Assignee）提供方便一体化的税收信息填报平台。客户是一家会计师事务所，该事务所的专员（Admin）通过该平台可以收集雇员提交的报税信息，然后对这些信息进行税务评审。如果 Admin 评审出信息有问题，则返回给 Assignee 重新修改和填报。一旦信息确认无误，则进行税收分析和计算，并获得最终的税务报告提交给当地政府以及雇员本人。&lt;/p>
&lt;p>在早期的架构设计时，架构师并没有对整个系统的问题域进行拆分，而是基于用户角色对系统进行了简单粗暴的划分，分为了两个相对独立的子系统：Frond End 与 Office End，这两个子系统单独部署，分别面向 Assignee 与 Admin。系统之间的集成则通过消息和 Web Service 进行通信。两个子系统的开发分属不同的团队，Frond End 由美国的团队负责开发与维护，而 Office End 则由印度的团队负责。整个架构如下图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/04/ylzHwn.png" alt="原架构图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>&lt;strong>采用这种架构面临的问题如下：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>庞大的代码库：整个 Front End 和 Office End 都没有做物理分解，随着需求的增多，代码库会变得格外庞大。&lt;/li>
&lt;li>分散的逻辑：系统分解的边界是不合理的，没有按照业务分解，而是按照用户的角色进行分解，因而导致大量相似的逻辑分散在两个不同的子系统中。&lt;/li>
&lt;li>重复的数据：两个子系统中存在业务重叠，因而也导致了部分数据的重复。&lt;/li>
&lt;li>复杂的集成：Front End 与 Office End 因为某些相关的业务需要彼此通信，这种集成关系是双向的，且由两个不同的团队开发，导致集成的接口混乱，消息协议多样化。&lt;/li>
&lt;li>知识未形成共享：两个团队完全独立开发，没有掌握端对端的整体流程，团队之间没有形成知识的共享。&lt;/li>
&lt;li>无法应对需求变化：新增需求包括对国际旅游、Visa 的支持，现有系统的架构无法很好地支持这些变化。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2021/02/04/ylzXWT.png" alt="划分后的图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item></channel></rss>