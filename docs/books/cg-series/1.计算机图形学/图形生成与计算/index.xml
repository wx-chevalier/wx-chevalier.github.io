<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>图形生成与计算 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/cg-series/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E4%B8%8E%E8%AE%A1%E7%AE%97/</link>
      <atom:link href="https://ng-tech.icu/books/cg-series/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E4%B8%8E%E8%AE%A1%E7%AE%97/index.xml" rel="self" type="application/rss+xml" />
    <description>图形生成与计算</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>图形生成与计算</title>
      <link>https://ng-tech.icu/books/cg-series/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E4%B8%8E%E8%AE%A1%E7%AE%97/</link>
    </image>
    
    <item>
      <title>直线</title>
      <link>https://ng-tech.icu/books/cg-series/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E4%B8%8E%E8%AE%A1%E7%AE%97/%E7%9B%B4%E7%BA%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cg-series/1.%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9B%BE%E5%BD%A2%E5%AD%A6/%E5%9B%BE%E5%BD%A2%E7%94%9F%E6%88%90%E4%B8%8E%E8%AE%A1%E7%AE%97/%E7%9B%B4%E7%BA%BF/</guid>
      <description>&lt;h1 id=&#34;直线&#34;&gt;直线&lt;/h1&gt;
&lt;p&gt;在数学上,理想的直线是没有宽度的,由无数个点构成的集合。我们只能在显示器所给定 的有限个像素组成的矩阵中,确定最佳逼近于该直线的一组像素,并且按扫描顺序,用当前的 写方式,对这些像素进行写操作。在光棚显示器的灾光屏上生成一个对象,实质上是往坝缓冲寄存器的相应单元中填人数 据。画一条从 $\left(x_{1}, y_{1}\right)$ 到 $\left(x_{2}, y_{2}\right)$ 的直线（ 注意 : 这里的坐标是显示器的坐标,以像素为单位，也可称为设备坐标),实质上是一个发现最佳逼近直线的像素序列，并填入色彩数据的过程。这个过程也称为直线光棚化。本节介绍在光棚显示器上直线光棚化的最常用的两种算法：直线 DDA 算法和直线 Bresenham 算法。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
