<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>999.参考资料 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/cg-series/3.%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E5%BA%93/web-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/three.js/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9E%8B%E5%8A%A0%E8%BD%BD/gltf/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link><atom:link href="https://ng-tech.icu/books/cg-series/3.%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E5%BA%93/web-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/three.js/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9E%8B%E5%8A%A0%E8%BD%BD/gltf/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml"/><description>999.参考资料</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>999.参考资料</title><link>https://ng-tech.icu/books/cg-series/3.%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E5%BA%93/web-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/three.js/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9E%8B%E5%8A%A0%E8%BD%BD/gltf/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link></image><item><title>2021-凹凸嫚-3D 性能优化 glTF 文件压缩</title><link>https://ng-tech.icu/books/cg-series/3.%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E5%BA%93/web-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/three.js/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9E%8B%E5%8A%A0%E8%BD%BD/gltf/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2021-%E5%87%B9%E5%87%B8%E5%AB%9A-3d-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-gltf-%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cg-series/3.%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6%E5%BA%93/web-%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/three.js/%E6%8F%92%E4%BB%B6%E7%B3%BB%E7%BB%9F/%E6%A8%A1%E5%9E%8B%E5%8A%A0%E8%BD%BD/gltf/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2021-%E5%87%B9%E5%87%B8%E5%AB%9A-3d-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96-gltf-%E6%96%87%E4%BB%B6%E5%8E%8B%E7%BC%A9/</guid><description>&lt;h1 id="3d-性能优化-gltf-文件压缩">3D 性能优化 glTF 文件压缩&lt;/h1>
&lt;h1 id="一什么是-gltf-文件">一、什么是 glTF 文件&lt;/h1>
&lt;p>glTF 全称 Graphics Language Transmission Format，是三维场景和模型的标准文件格式。glTF 核心是 JSON 文件，描述了 3D 场景的整个内容。它由场景结构本身的描述组成，其由定义场景图的节点的层次提供。&lt;/p>
&lt;p>场景中出现的 3D 对象是使用连接到节点的 meshes(网格)定义的。Materials(材料)定义对象的外观。Animations(动画)描述 3D 对象如何随着时间的推移转换 3D 对象，并且 Skins(蒙皮)定义了对物体的几何形状的方式基于骨架姿势变形。Cameras(相机)描述了渲染器的视图配置。&lt;/p>
&lt;p>除此以外，它还包括了带有二进制数据和图像文件的链接，如下图所示。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307105457.png" alt="glTF JSON 文件格式" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="二gltf-与glb">二、.gltf 与.glb&lt;/h1>
&lt;p>从 blender 文件导出中可以看出：&lt;/p>
&lt;ul>
&lt;li>glTF Binary(.glb)&lt;/li>
&lt;li>glTF Embedded(.gltf)&lt;/li>
&lt;li>glTF Separate(.gltf + .bin + textures)&lt;/li>
&lt;/ul>
&lt;p>glTF 文件有两种拓展形式，.gltf（JSON / ASCII）或.glb（二进制）。.gltf 文件可能是自包含的，也可能引用外部二进制和纹理资源，而 .glb 文件则是完全自包含的（但使用外部工具可以将其缓冲区/纹理保存为嵌入或单独的文件，后面会提到）。&lt;/p>
&lt;h2 id="21-glb-文件产生原因">2.1 .glb 文件产生原因&lt;/h2>
&lt;p>glTF 提供了两个也可以一起使用的交付选项：&lt;/p>
&lt;ul>
&lt;li>glTF JSON 指向外部二进制数据（几何、关键帧、皮肤）和图像。&lt;/li>
&lt;li>glTF JSON 嵌入 base64 编码的二进制数据，并使用数据 URI 内联图像。&lt;/li>
&lt;/ul>
&lt;p>对于这些资源，由于 base64 编码，glTF 需要单独的请求或额外的空间。Base64 编码需要额外的处理来解码并增加文件大小（编码资源增加约 33%）。虽然 gzip 减轻了文件大小的增加，但解压缩和解码仍然会增加大量的加载时间。&lt;/p>
&lt;p>为了解决这个问题，引入了一种容器格式 Binary glTF。在二进制 glTF 中，glTF 资产（JSON、.bin 和图像）可以存储在二进制 blob 中，就是.glb 文件。&lt;/p>
&lt;h2 id="22-文件对比">2.2 文件对比&lt;/h2>
&lt;h3 id="221-同一个-gltf-文件glb-格式要比gltf-小">2.2.1 同一个 glTF 文件，.glb 格式要比.gltf 小&lt;/h3>
&lt;ul>
&lt;li>自包含的：&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112441.png" alt="自包含" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>引用外部二进制和纹理资源的：&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112513.png" alt="外部资源" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h3 id="222-gltf-文件预览">2.2.2 .gltf 文件预览&lt;/h3>
&lt;ul>
&lt;li>自包含的：&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112542.png" alt="自包含" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>引用外部二进制和纹理资源：&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112608.png" alt="引用外部资源" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h3 id="223-glb-文件预览">2.2.3 glb 文件预览&lt;/h3>
&lt;ul>
&lt;li>自包含的：&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112647.png" alt="GLB 自包含" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>引用外部二进制和纹理资源：&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112711.png" alt="引用二进制与纹理资源" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>从图中可以看到，当非自包含型的时候，请求 glTF 文件时，会一同请求图片文件。&lt;/p>
&lt;h1 id="三gltf-文件拆分">三、glTF 文件拆分&lt;/h1>
&lt;p>上文提到，glTF 文件可以拆分为.gltf/.glb 文件+二进制文件+纹理图片，那么，我们就可以将其拆分出来，并对纹理图片进行单独的压缩，来进行性能的优化。&lt;/p>
&lt;p>可以使用 gltf pipeLine ，其具有以下功能：&lt;/p>
&lt;ul>
&lt;li>glTF 与 glb 的相互转换&lt;/li>
&lt;li>将缓冲区/纹理保存为嵌入或单独的文件&lt;/li>
&lt;li>将 glTF 1.0 模型转换为 glTF 2.0(使用 KHR_techniques_webgl 和 KHR_blend)&lt;/li>
&lt;li>使用 Draco 进行网格压缩&lt;/li>
&lt;/ul>
&lt;p>在这里，我们是要使用“将缓冲区/纹理保存为嵌入或单独的文件”这个功能。让我们来看看拆分出来的文件：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112931.png" alt="拆分出来的文件" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>再回顾一下，.glb 文件是这么引入外部单独的纹理与二进制文件的：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307112957.png" alt="拆分文件" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>所以，只要将拆分出来的这几个文件，放入同一个路径中，然后像之前那样引入就好了。&lt;/p>
&lt;ul>
&lt;li>压缩方式&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gltf-pipeline -i male.glb -o male-processed.glb -s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用方式（在 Three.js 中） 普普通通地用就好了，和不拆分的没什么区别&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;three/examples/jsm/loaders/GLTFLoader&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MODEL_FILE_PATH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">gltf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>性能对比&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307113100.png" alt="性能对比" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="四gltf-文件压缩">四、glTF 文件压缩&lt;/h1>
&lt;p>如上面介绍，glTF 文件包括.gltf/.glb 文件、.bin 文件以及纹理资源。glTF2.0 相关的插件主要有以下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307113214.png" alt="glTF 2.0 插件" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="41-网格压缩">4.1 网格压缩&lt;/h2>
&lt;h3 id="411-khr_draco_mesh_compression">4.1.1 KHR_draco_mesh_compression&lt;/h3>
&lt;p>最常见的一种网格压缩方式，采用开源的 Draco 算法，用于压缩和解压缩 3D 网格和点云，并且可能会改变网格中顶点的顺序和数量。压缩的使文件小得多，但是在客户端设备上需要额外的解码时间。&lt;/p>
&lt;ul>
&lt;li>压缩方式&lt;/li>
&lt;/ul>
&lt;p>可以使用 gltf-pipelinegltf 文件优化工具进行压缩：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gltf-pipeline -i male.glb -o male-processed.glb -d
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用方式（在 Three.js 中）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;three/examples/jsm/loaders/GLTFLoader&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">DRACOLoader&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;three/examples/jsm/loaders/DRACOLoader&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建解码器实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">dracoLoader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">DRACOLoader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 设置解压库文件路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">dracoLoader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setDecoderPath&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">DECODER_PATH&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 加载解码器实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setDRACOLoader&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">dracoLoader&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MODEL_FILE_PATH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">gltf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>性能分析对比&lt;/li>
&lt;/ul>
&lt;p>这个 glb 文件原大小为 3.2M，draco 压缩后为 1.8M，约为原文件的 56%。从上面的代码中可以看出，创建解码器实例需要引入额外的库来进行解码，setDecoderPath 会自动请求 wasm 文件来进行解密操作。而这两个 wasm 文件同时也增加了请求时间和请求数量，那么加上这两个文件，真实的压缩率约为 62.5%。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307113530.png" alt="请求对比" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>所以，如果一个项目需要加载多个 glTF 文件，那么可以创建一个 DRACOLoader 实例并重复使用它。但如果项目只需要加载一个 glTF 文件，那么使用 draco 算法是否具有“性价比”就值得考量了。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307113610.png" alt="性能对比" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>可见 draco 算法首次加载和解密时间，要大于原文件。而在实际项目中，这个差距更加明显，并且偶尔会出现解密堵塞的情况，需要重新进入页面才能恢复功能。&lt;/p>
&lt;p>除此以外，还有一个很直观的问题，模型画质的损失是肉眼可观的。如图，分别是在 iPhone 12 和小米 MIX2 中的样子：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307141253.png" alt="模型图片" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>总而言之，如果要将 draco 压缩算法运用到大规模项目中，需要结合实际项目进行以下对比：&lt;/p>
&lt;p>(1) 请求两个文件+解密耗时，与本身 glb 文件压缩后的体积大小相比，真实性能对比；
(2) 画质是否会出现设计师无法接受的损失。&lt;/p>
&lt;h3 id="412-khr_mesh_quantization">4.1.2 KHR_mesh_quantization&lt;/h3>
&lt;p>顶点属性通常使用 FLOAT 类型存储，将原始始浮点值转换为 16 位或 8 位存储以适应统一的 3D 或 2D 网格，也就是我们所说的 quantization 向量化，该插件主要就是将其向量化。&lt;/p>
&lt;p>例如，静态 PBR-ready 网格通常需要每个顶点 POSITION（12 字节）、TEXCOORD（8 字节）、NORMAL（12 字节）和 TANGENT（16 字节），总共 48 字节。通过此扩展，可以用于 SHORT 存储位置和纹理坐标数据（分别为 8 和 4 字节）以及 BYTE 存储法线和切线数据（各 4 字节），每个顶点总共 20 字节。&lt;/p>
&lt;ul>
&lt;li>压缩方式&lt;/li>
&lt;/ul>
&lt;p>可以使用 gltfpack 工具进行压缩：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ gltfpack -i male.glb -o male-processed.glb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用方式（在 Three.js 中）&lt;/li>
&lt;/ul>
&lt;p>普普通通地用就好了，和不压缩的没什么区别：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;three/examples/jsm/loaders/GLTFLoader&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MODEL_FILE_PATH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">gltf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>性能对比&lt;/li>
&lt;/ul>
&lt;p>原文件 3.2M，压缩后 1.9M，为原文件的 59.3%，比原模型加载速度也快上不少。放到实际项目中，没有画质损失和加载时间过长的问题。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307141830.png" alt="性能对比" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="413-ext_meshopt_compression">4.1.3 EXT_meshopt_compression&lt;/h2>
&lt;p>此插件假定缓冲区视图数据针对 GPU 效率进行了优化——使用量化并使用最佳数据顺序进行 GPU 渲染——并在 bufferView 数据之上提供一个压缩层。每个 bufferView 都是独立压缩的，这允许加载器最大程度地将数据直接解压缩到 GPU 存储中。&lt;/p>
&lt;p>除了优化压缩率之外，压缩格式还具有两个特性——非常快速的解码（使用 WebAssembly SIMD，解码器在现代桌面硬件上以约 1 GB/秒的速度运行），以及与通用压缩兼容的字节存储。也就是说，不是尽可能地减少编码大小，而是以通用压缩器可以进一步压缩它的方式构建比特流。&lt;/p>
&lt;ul>
&lt;li>压缩方式&lt;/li>
&lt;/ul>
&lt;p>可以使用 gltfpack 工具进行压缩：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gltfpack -i male.glb -o male-processed.glb -cc
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>使用方式（在 Three.js 中）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;three/examples/jsm/loaders/GLTFLoader&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">MeshoptDecoder&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;three/examples/jsm/libs/meshopt_decoder.module.js&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">loader&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">GLTFLoader&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setMeshoptDecoder&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MeshoptDecoder&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">loader&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">load&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">MODEL_FILE_PATH&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">gltf&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ....
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>性能分析对比&lt;/li>
&lt;/ul>
&lt;p>原文件 3.2M，压缩后 1.1M，为原文件的 65.6%，首次加载时间比原模型快上不少。放到实际项目中，没有画质损失和加载时间过长的问题。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230307142435.png" alt="性能对比" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item></channel></rss>