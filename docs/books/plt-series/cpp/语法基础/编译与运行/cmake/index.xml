<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CMake | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/</link><atom:link href="https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/index.xml" rel="self" type="application/rss+xml"/><description>CMake</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>CMake</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/</link></image><item><title>CMake 简单示例</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/cmake-%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/cmake-%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</guid><description>&lt;h1 id="cmake-简单示例">CMake 简单示例&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://blog.csdn.net/qq_40837929/article/details/122419649" target="_blank" rel="noopener">https://blog.csdn.net/qq_40837929/article/details/122419649&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CMakeLists.txt</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/cmakelists.txt/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/cmakelists.txt/</guid><description>&lt;h1 id="cmakeliststxt">CMakeLists.txt&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-h" data-lang="h">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//声明要求的cmake最低版本,终端输入cmake -version可查看cmake的版本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">cmake_minimum_required&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">VERSION&lt;/span> &lt;span class="mf">2.8&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//声明cmake工程名字
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">project&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">slam&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设置使用g++编译器,这是添加变量的用法set(KEY VALUE)接收两个参数，用来声明变量。在camke语法中使用${KEY}这种写法来取到VALUE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">CMAKE_CXX_COMPILER&lt;/span> &lt;span class="s">&amp;#34;g++&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设置cmake编译模式有debug和release两种PROJECT_SOURCE_DIR项目根目录也就是是CmakeLists.txt的绝对路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">CMAKE_BUILD_TYPE&lt;/span> &lt;span class="s">&amp;#34;Release&amp;#34;&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设定生成的可执行二进制文件存放的存放目录
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">EXECUTABLE_OUTPUT_PATH&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">PROJECT_SOURCE_DIR&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设定生成的库文件的存放目录
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">LIBRARY_OUTPUT_PATH&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">PROJECT_SOURCE_DIR&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//参数CMAKE_CXX_FLAGS含义是： set compiler for c++ language
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//添加c++11标准支持，*.CPP文件编译选项,-march=native指定目标程序的cpu架构来进行程序优化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//native就是相当于自检测cpu，-march是gcc优化选项,后面的-O3是用来调节编译时的优化程度的，最高为-O3,最低为-O0即不做优化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//-Ox这个参数只有在CMake -DCMAKE_BUILD_TYPE=release时有效
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//因为debug版的项目生成的可执行文件需要有调试信息并且不需要进行优化,而release版的不需要调试信息但需要优化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">CMAKE_CXX_FLAGS&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="mi">11&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">march&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">native&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">O3&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//调试手段message打印信息，类似于echo/printf，主要用于查cmake文件的语法错误
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">use_test&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">SOURCES_DIRECTORY&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">user_accounts&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cpp&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;use_test： ${use_test}&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//在CMakeLists.txt中指定安装位置, 在编译终端指定安装位置:cmake -DCMAKE_INSTALL_PREFIX=/usr ..
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CMAKE_INSTALL_PREFIX&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">install_path&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//增加子文件夹，也就是进入源代码文件夹继续构建
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">add_subdirectory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">PROJECT_SOURCE_DIR&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//添加依赖，去寻找该库的头文件位置、库文件位置以及库文件名称，并将其设为变量，返回提供给CMakeLists.txt其他部分使用。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//cmake_modules.cmake文件是把CMakeLists.txt里用来寻找特定库的内容分离出来,如果提示没有找到第三方依赖库可以尝试安装或者暴力指定路径
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 寻找OpenCV库
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">find_package&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">OpenCV&lt;/span> &lt;span class="n">REQUIRED&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//在CMakeLists.txt中使用第三方库的三部曲:find_package、include_directories、target_link_libraries
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">OpenCV_INCLUDE_DIRS&lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="c1">// 去哪里找头文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">link_directories&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="c1">// 去哪里找库文件(.so/.lib/.ddl等)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">target_link_libraries&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">OpenCV_LIBRARIES&lt;/span>&lt;span class="p">})&lt;/span>&lt;span class="c1">// 需要链接的库文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;OpenCV_INCLUDE_DIRS: &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">OpenCV_INCLUDE_DIRS&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">message&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;OpenCV_LIBS: &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="err">$&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">OpenCV_LIBS&lt;/span>&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// find_package(Eigen3 REQUIRED), 假如找不到Eigen3库，我们就设置变量来指定Eigen3的头文件位置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">set&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Eigen3_DIR&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">cmake&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">eigen3&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">Eigen3Config&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">cmake&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">include_directories&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">include&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">eigen3&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Make</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/make/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/cmake/make/</guid><description>&lt;h1 id="make">Make&lt;/h1>
&lt;p>Make 这个词，英语的意思是&amp;quot;制作&amp;quot;。Make 命令直接用了这个意思，就是要做出某个文件。比如，要做出文件 a.txt，就可以执行下面的命令。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make a.txt
&lt;/code>&lt;/pre>&lt;p>但是，如果你真的输入这条命令，它并不会起作用。因为 Make 命令本身并不知道，如何做出 a.txt，需要有人告诉它，如何调用其他命令完成这个目标。比如，假设文件 a.txt 依赖于 b.txt 和 c.txt，是后面两个文件连接（cat 命令）的产物。那么，make 需要知道下面的规则。&lt;/p>
&lt;pre tabindex="0">&lt;code> a.txt: b.txt c.txt
cat b.txt c.txt &amp;gt; a.txt
&lt;/code>&lt;/pre>&lt;p>也就是说，make a.txt 这条命令的背后，实际上分成两步：第一步，确认 b.txt 和 c.txt 必须已经存在，第二步使用 cat 命令 将这个两个文件合并，输出为新文件。像这样的规则，都写在一个叫做 Makefile 的文件中，Make 命令依赖这个文件进行构建。Makefile 文件也可以写为 makefile，或者用命令行参数指定为其他文件名。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make -f rules.txt
# 或者
$ make --file=rules.txt
&lt;/code>&lt;/pre>&lt;p>上面代码指定 make 命令依据 rules.txt 文件中的规则，进行构建。总之，make 只是一个根据指定的 Shell 命令进行构建的工具。它的规则很简单，你规定要构建哪个文件、它依赖哪些源文件，当那些文件有变动时，如何重新构建它。&lt;/p>
&lt;h1 id="make-文件格式">Make 文件格式&lt;/h1>
&lt;p>Makefile 文件由一系列规则（rules）构成。每条规则的形式如下。&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;target&amp;gt; : &amp;lt;prerequisites&amp;gt;
[tab] &amp;lt;commands&amp;gt;
&lt;/code>&lt;/pre>&lt;p>上面第一行冒号前面的部分，叫做&amp;quot;目标&amp;quot;（target），冒号后面的部分叫做&amp;quot;前置条件&amp;quot;（prerequisites）；第二行必须由一个 tab 键起首，后面跟着&amp;quot;命令&amp;quot;（commands）。&amp;ldquo;目标&amp;quot;是必需的，不可省略；&amp;ldquo;前置条件&amp;quot;和&amp;quot;命令&amp;quot;都是可选的，但是两者之中必须至少存在一个。每条规则就明确两件事：构建目标的前置条件是什么，以及如何构建。下面就详细讲解，每条规则的这三个组成部分。&lt;/p>
&lt;h2 id="目标target">目标（target）&lt;/h2>
&lt;p>一个目标（target）就构成一条规则。目标通常是文件名，指明 Make 命令所要构建的对象，比如上文的 a.txt 。目标可以是一个文件名，也可以是多个文件名，之间用空格分隔。&lt;/p>
&lt;p>除了文件名，目标还可以是某个操作的名字，这称为&amp;quot;伪目标&amp;rdquo;（phony target）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rm&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">.o&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码的目标是 clean，它不是文件名，而是一个操作的名字，属于&amp;quot;伪目标 &amp;ldquo;，作用是删除对象文件。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make clean
&lt;/code>&lt;/pre>&lt;p>但是，如果当前目录中，正好有一个文件叫做 clean，那么这个命令不会执行。因为 Make 发现 clean 文件已经存在，就认为没有必要重新构建了，就不会执行指定的 rm 命令。为了避免这种情况，可以明确声明 clean 是&amp;quot;伪目标&amp;rdquo;，写法如下。&lt;/p>
&lt;pre tabindex="0">&lt;code>.PHONY: clean
clean:
rm *.o temp
&lt;/code>&lt;/pre>&lt;p>声明 clean 是&amp;quot;伪目标&amp;quot;之后，make 就不会去检查是否存在一个叫做 clean 的文件，而是每次运行都执行对应的命令。像.PHONY 这样的内置目标名还有不少，可以查看&lt;a href="http://www.gnu.org/software/make/manual/html_node/Special-Targets.html#Special-Targets" target="_blank" rel="noopener">手册&lt;/a>。如果 Make 命令运行时没有指定目标，默认会执行 Makefile 文件的第一个目标。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make
&lt;/code>&lt;/pre>&lt;p>上面代码执行 Makefile 文件的第一个目标。&lt;/p>
&lt;h2 id="前置条件prerequisites">前置条件（prerequisites）&lt;/h2>
&lt;p>前置条件通常是一组文件名，之间用空格分隔。它指定了&amp;quot;目标&amp;quot;是否重新构建的判断标准：只要有一个前置文件不存在，或者有过更新（前置文件的 last-modification 时间戳比目标的时间戳新），&amp;ldquo;目标&amp;quot;就需要重新构建。&lt;/p>
&lt;pre tabindex="0">&lt;code>result.txt: source.txt
cp source.txt result.txt
&lt;/code>&lt;/pre>&lt;p>上面代码中，构建 result.txt 的前置条件是 source.txt 。如果当前目录中，source.txt 已经存在，那么 &lt;code>make result.txt&lt;/code> 可以正常运行，否则必须再写一条规则，来生成 source.txt 。&lt;/p>
&lt;pre tabindex="0">&lt;code>source.txt:
echo &amp;#34;this is the source&amp;#34; &amp;gt; source.txt
&lt;/code>&lt;/pre>&lt;p>上面代码中，source.txt 后面没有前置条件，就意味着它跟其他文件都无关，只要这个文件还不存在，每次调用&lt;code>make source.txt&lt;/code>，它都会生成。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make result.txt
$ make result.txt
&lt;/code>&lt;/pre>&lt;p>上面命令连续执行两次 &lt;code>make result.txt&lt;/code>。第一次执行会先新建 source.txt，然后再新建 result.txt。第二次执行，Make 发现 source.txt 没有变动（时间戳晚于 result.txt），就不会执行任何操作，result.txt 也不会重新生成。如果需要生成多个文件，往往采用下面的写法。&lt;/p>
&lt;pre tabindex="0">&lt;code>source: file1 file2 file3
&lt;/code>&lt;/pre>&lt;p>上面代码中，source 是一个伪目标，只有三个前置文件，没有任何对应的命令。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make source
&lt;/code>&lt;/pre>&lt;p>执行 &lt;code>make source&lt;/code> 命令后，就会一次性生成 file1，file2，file3 三个文件。这比下面的写法要方便很多。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make file1
$ make file2
$ make file3
&lt;/code>&lt;/pre>&lt;h2 id="命令commands">命令（commands）&lt;/h2>
&lt;p>命令（commands）表示如何更新目标文件，由一行或多行的 Shell 命令组成。它是构建&amp;quot;目标&amp;quot;的具体指令，它的运行结果通常就是生成目标文件。每行命令之前必须有一个 tab 键。如果想用其他键，可以用内置变量.RECIPEPREFIX 声明。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">.RECIPEPREFIX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">all&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">echo&lt;/span> &lt;span class="n">Hello&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">world&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码用.RECIPEPREFIX 指定，大于号（&amp;gt;）替代 tab 键。所以，每一行命令的起首变成了大于号，而不是 tab 键。&lt;/p>
&lt;p>需要注意的是，每行命令在一个单独的 shell 中执行。这些 Shell 之间没有继承关系。&lt;/p>
&lt;pre tabindex="0">&lt;code>var-lost:
export foo=bar
echo &amp;#34;foo=[$$foo]&amp;#34;
&lt;/code>&lt;/pre>&lt;p>上面代码执行后（&lt;code>make var-lost&lt;/code>），取不到 foo 的值。因为两行命令在两个不同的进程执行。一个解决办法是将两行命令写在一行，中间用分号分隔。&lt;/p>
&lt;pre tabindex="0">&lt;code>var-kept:
export foo=bar; echo &amp;#34;foo=[$$foo]&amp;#34;
&lt;/code>&lt;/pre>&lt;p>另一个解决办法是在换行符前加反斜杠转义。&lt;/p>
&lt;pre tabindex="0">&lt;code>var-kept:
export foo=bar; \
echo &amp;#34;foo=[$$foo]&amp;#34;
&lt;/code>&lt;/pre>&lt;p>最后一个方法是加上&lt;code>.ONESHELL:&lt;/code>命令。&lt;/p>
&lt;pre tabindex="0">&lt;code>.ONESHELL:
var-kept:
export foo=bar;
echo &amp;#34;foo=[$$foo]&amp;#34;
&lt;/code>&lt;/pre>&lt;h1 id="文件格式">文件格式&lt;/h1>
&lt;h2 id="注释">注释&lt;/h2>
&lt;p>井号（#）在 Makefile 中表示注释。&lt;/p>
&lt;pre tabindex="0">&lt;code># 这是注释
result.txt: source.txt
# 这是注释
cp source.txt result.txt # 这也是注释
&lt;/code>&lt;/pre>&lt;h2 id="回声echoing">回声（echoing）&lt;/h2>
&lt;p>正常情况下，make 会打印每条命令，然后再执行，这就叫做回声（echoing）。&lt;/p>
&lt;pre tabindex="0">&lt;code>test:
# 这是测试
&lt;/code>&lt;/pre>&lt;p>执行上面的规则，会得到下面的结果。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ make test
# 这是测试
&lt;/code>&lt;/pre>&lt;p>在命令的前面加上@，就可以关闭回声。&lt;/p>
&lt;pre tabindex="0">&lt;code>test:
@# 这是测试
&lt;/code>&lt;/pre>&lt;p>现在再执行 &lt;code>make test&lt;/code>，就不会有任何输出。由于在构建过程中，需要了解当前在执行哪条命令，所以通常只在注释和纯显示的 echo 命令前面加上@。&lt;/p>
&lt;pre tabindex="0">&lt;code>test:
@# 这是测试
@echo TODO
&lt;/code>&lt;/pre>&lt;h2 id="通配符">通配符&lt;/h2>
&lt;p>通配符（wildcard）用来指定一组符合条件的文件名。Makefile 的通配符与 Bash 一致，主要有星号（&lt;em>）、问号（？）和 [&amp;hellip;] 。比如，&lt;/em>.o 表示所有后缀名为 o 的文件。&lt;/p>
&lt;pre tabindex="0">&lt;code>clean:
rm -f *.o
&lt;/code>&lt;/pre>&lt;h2 id="模式匹配">模式匹配&lt;/h2>
&lt;p>Make 命令允许对文件名，进行类似正则运算的匹配，主要用到的匹配符是%。比如，假定当前目录下有 f1.c 和 f2.c 两个源码文件，需要将它们编译为对应的对象文件。&lt;/p>
&lt;pre tabindex="0">&lt;code>%.o: %.c
&lt;/code>&lt;/pre>&lt;p>等同于下面的写法。&lt;/p>
&lt;pre tabindex="0">&lt;code>f1.o: f1.c
f2.o: f2.c
&lt;/code>&lt;/pre>&lt;p>使用匹配符%，可以将大量同类型的文件，只用一条规则就完成构建。&lt;/p>
&lt;h2 id="变量和赋值符">变量和赋值符&lt;/h2>
&lt;p>Makefile 允许使用等号自定义变量。&lt;/p>
&lt;pre tabindex="0">&lt;code>txt = Hello World
test:
@echo $(txt)
&lt;/code>&lt;/pre>&lt;p>上面代码中，变量 txt 等于 Hello World。调用时，变量需要放在 $( ) 之中。&lt;/p>
&lt;p>调用 Shell 变量，需要在美元符号前，再加一个美元符号，这是因为 Make 命令会对美元符号转义。&lt;/p>
&lt;pre tabindex="0">&lt;code>test:
@echo $$HOME
&lt;/code>&lt;/pre>&lt;p>有时，变量的值可能指向另一个变量。&lt;/p>
&lt;pre tabindex="0">&lt;code>v1 = $(v2)
&lt;/code>&lt;/pre>&lt;p>上面代码中，变量 v1 的值是另一个变量 v2。这时会产生一个问题，v1 的值到底在定义时扩展（静态扩展），还是在运行时扩展（动态扩展）？如果 v2 的值是动态的，这两种扩展方式的结果可能会差异很大。为了解决类似问题，Makefile 一共提供了四个赋值运算符（=、:=、？=、+=），它们的区别请看 &lt;a href="http://stackoverflow.com/questions/448910/makefile-variable-assignment" target="_blank" rel="noopener">StackOverflow&lt;/a>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在执行时扩展，允许递归扩展。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">VARIABLE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在定义时扩展。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">VARIABLE&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 只有在该变量为空时才设置值。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">VARIABLE&lt;/span> &lt;span class="o">?=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将值追加到变量的尾端。&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">VARIABLE&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">value&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="内置变量implicit-variables">内置变量（Implicit Variables）&lt;/h2>
&lt;p>Make 命令提供一系列内置变量，比如，$(CC) 指向当前使用的编译器，$(MAKE) 指向当前使用的 Make 工具。这主要是为了跨平台的兼容性，详细的内置变量清单见&lt;a href="https://www.gnu.org/software/make/manual/html_node/Implicit-Variables.html" target="_blank" rel="noopener">手册&lt;/a>。&lt;/p>
&lt;pre tabindex="0">&lt;code>output:
$(CC) -o output input.c
&lt;/code>&lt;/pre>&lt;h2 id="自动变量automatic-variables">自动变量（Automatic Variables）&lt;/h2>
&lt;p>Make 命令还提供一些自动变量，它们的值与当前规则有关。主要有以下几个。&lt;/p>
&lt;p>&lt;strong>（1）$@&lt;/strong>&lt;/p>
&lt;p>$@指代当前目标，就是 Make 命令当前构建的那个目标。比如，&lt;code>make foo&lt;/code>的 $@ 就指代 foo。&lt;/p>
&lt;pre tabindex="0">&lt;code>a.txt b.txt:
touch $@
&lt;/code>&lt;/pre>&lt;p>等同于下面的写法。&lt;/p>
&lt;pre tabindex="0">&lt;code>a.txt:
touch a.txt
b.txt:
touch b.txt
&lt;/code>&lt;/pre>&lt;p>&lt;strong>（2）$&amp;lt;&lt;/strong>&lt;/p>
&lt;p>$&amp;lt; 指代第一个前置条件。比如，规则为 t: p1 p2，那么$&amp;lt; 就指代 p1。&lt;/p>
&lt;pre tabindex="0">&lt;code>a.txt: b.txt c.txt
cp $&amp;lt; $@
&lt;/code>&lt;/pre>&lt;p>等同于下面的写法。&lt;/p>
&lt;pre tabindex="0">&lt;code>a.txt: b.txt c.txt
cp b.txt a.txt
&lt;/code>&lt;/pre>&lt;p>&lt;strong>（3）$?&lt;/strong>&lt;/p>
&lt;p>$? 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代 p2。&lt;/p>
&lt;p>&lt;strong>（4）$^&lt;/strong>&lt;/p>
&lt;p>$^ 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。&lt;/p>
&lt;p>&lt;strong>（5）$*&lt;/strong>&lt;/p>
&lt;p>$* 指代匹配符 % 匹配的部分，比如% 匹配 f1.txt 中的f1，$* 就表示 f1。&lt;/p>
&lt;p>&lt;strong>（6）$(@D) 和 $(@F)&lt;/strong>&lt;/p>
&lt;p>$(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@是 src/input.c，那么$(@D) 的值为 src，$(@F) 的值为 input.c。&lt;/p>
&lt;p>&lt;strong>`（7）$(&lt;/strong>&lt;/p>
&lt;p>`$( 分别指向 $&amp;lt; 的目录名和文件名。&lt;/p>
&lt;p>所有的自动变量清单，请看&lt;a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html" target="_blank" rel="noopener">手册&lt;/a>。下面是自动变量的一个例子。&lt;/p>
&lt;pre tabindex="0">&lt;code>dest/%.txt: src/%.txt
@[ -d dest ] || mkdir dest
cp $&amp;lt; $@
&lt;/code>&lt;/pre>&lt;p>上面代码将 src 目录下的 txt 文件，拷贝到 dest 目录下。首先判断 dest 目录是否存在，如果不存在就新建，然后，$&amp;lt; 指代前置文件（src/%.txt），$@ 指代目标文件（dest/%.txt）。&lt;/p>
&lt;h2 id="判断和循环">判断和循环&lt;/h2>
&lt;p>Makefile 使用 Bash 语法，完成判断和循环。&lt;/p>
&lt;pre tabindex="0">&lt;code>ifeq ($(CC),gcc)
libs=$(libs_for_gcc)
else
libs=$(normal_libs)
endif
&lt;/code>&lt;/pre>&lt;p>上面代码判断当前编译器是否 gcc，然后指定不同的库文件。&lt;/p>
&lt;pre tabindex="0">&lt;code>LIST = one two three
all:
for i in $(LIST); do \
echo $$i; \
done
# 等同于
all:
for i in one two three; do \
echo $i; \
done
&lt;/code>&lt;/pre>&lt;p>上面代码的运行结果。&lt;/p>
&lt;pre tabindex="0">&lt;code>one
two
three
&lt;/code>&lt;/pre>&lt;h2 id="函数">函数&lt;/h2>
&lt;p>Makefile 还可以使用函数，格式如下。&lt;/p>
&lt;pre tabindex="0">&lt;code>$(function arguments)
# 或者
${function arguments}
&lt;/code>&lt;/pre>&lt;p>Makefile 提供了许多&lt;a href="http://www.gnu.org/software/make/manual/html_node/Functions.html" target="_blank" rel="noopener">内置函数&lt;/a>，可供调用。下面是几个常用的内置函数。&lt;/p>
&lt;p>&lt;strong>（1）shell 函数&lt;/strong>&lt;/p>
&lt;p>shell 函数用来执行 shell 命令&lt;/p>
&lt;pre tabindex="0">&lt;code>srcfiles := $(shell echo src/{00..99}.txt)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>（2）wildcard 函数&lt;/strong>&lt;/p>
&lt;p>wildcard 函数用来在 Makefile 中，替换 Bash 的通配符。&lt;/p>
&lt;pre tabindex="0">&lt;code>srcfiles := $(wildcard src/*.txt)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>（3）subst 函数&lt;/strong>&lt;/p>
&lt;p>subst 函数用来文本替换，格式如下。&lt;/p>
&lt;pre tabindex="0">&lt;code>$(subst from,to,text)
&lt;/code>&lt;/pre>&lt;p>下面的例子将字符串&amp;quot;feet on the street&amp;quot;替换成&amp;quot;fEEt on the strEEt&amp;rdquo;。&lt;/p>
&lt;pre tabindex="0">&lt;code>$(subst ee,EE,feet on the street)
&lt;/code>&lt;/pre>&lt;p>下面是一个稍微复杂的例子。&lt;/p>
&lt;pre tabindex="0">&lt;code>comma:= ,
empty:=
# space变量用两个空变量作为标识符，当中是一个空格
space:= $(empty) $(empty)
foo:= a b c
bar:= $(subst $(space),$(comma),$(foo))
# bar is now `a,b,c&amp;#39;.
&lt;/code>&lt;/pre>&lt;p>&lt;strong>（4）patsubst 函数&lt;/strong>&lt;/p>
&lt;p>patsubst 函数用于模式匹配的替换，格式如下。&lt;/p>
&lt;pre tabindex="0">&lt;code>$(patsubst pattern,replacement,text)
&lt;/code>&lt;/pre>&lt;p>下面的例子将文件名&amp;quot;x.c.c bar.c&amp;rdquo;，替换成&amp;quot;x.c.o bar.o&amp;quot;。&lt;/p>
&lt;pre tabindex="0">&lt;code>$(patsubst %.c,%.o,x.c.c bar.c)
&lt;/code>&lt;/pre>&lt;p>&lt;strong>（5）替换后缀名&lt;/strong>&lt;/p>
&lt;p>替换后缀名函数的写法是：变量名 + 冒号 + 后缀名替换规则。它实际上 patsubst 函数的一种简写形式。&lt;/p>
&lt;pre tabindex="0">&lt;code>min: $(OUTPUT:.js=.min.js)
&lt;/code>&lt;/pre>&lt;p>上面代码的意思是，将变量 OUTPUT 中的后缀名 .js 全部替换成 .min.js 。&lt;/p>
&lt;h1 id="案例">案例&lt;/h1>
&lt;h2 id="执行多个目标">执行多个目标&lt;/h2>
&lt;pre tabindex="0">&lt;code>.PHONY: cleanall cleanobj cleandiff
cleanall : cleanobj cleandiff
rm program
cleanobj
rm *.o
cleandiff
rm *.diff
&lt;/code>&lt;/pre>&lt;p>上面代码可以调用不同目标，删除不同后缀名的文件，也可以调用一个目标（cleanall），删除所有指定类型的文件。&lt;/p>
&lt;h2 id="编译-c-语言项目">编译 C 语言项目&lt;/h2>
&lt;pre tabindex="0">&lt;code>edit : main.o kbd.o command.o display.o
cc -o edit main.o kbd.o command.o display.o
main.o : main.c defs.h
cc -c main.c
kbd.o : kbd.c defs.h command.h
cc -c kbd.c
command.o : command.c defs.h command.h
cc -c command.c
display.o : display.c defs.h
cc -c display.c
clean
rm edit main.o kbd.o command.o display.o
.PHONY: edit clean
&lt;/code>&lt;/pre>&lt;p>更完整的案例参考如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Makefile for the C code in concurrent-servers.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This code is in the public domain.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">CC&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gcc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">CCFLAGS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">gnu99&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Wall&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">O3&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">g&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">DNDEBUG&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">pthread&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">LDFLAGS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">lpthread&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">pthread&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># It&amp;#39;s possible to compile uv-server after installing libuv. The full&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># instructions for installation I used (including `make install`) are from:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># https://github.com/libuv/libuv/blob/master/README.md.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># libuv compiles into a shared library which is placed alongside the .a in the&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># installation directory.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">LDLIBUV&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">luv&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Wl&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">rpath&lt;/span>&lt;span class="o">=/&lt;/span>&lt;span class="n">usr&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">local&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">EXECUTABLES&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sequential&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">select&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">epoll&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">demo&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">work&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">demo&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">isprime&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threadspammer&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">blocking&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">listener&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">nonblocking&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">listener&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">threaded&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXECUTABLES&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sequential&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">sequential&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">select&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">select&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">threaded&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">threaded&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">epoll&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">epoll&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDLIBUV&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">demo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sleep&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">demo.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDLIBUV&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">work&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">demo&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">timer&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">work&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">demo.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDLIBUV&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">isprime&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">uv&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">isprime&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">server.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDLIBUV&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">threadspammer&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">threadspammer.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">blocking&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">blocking&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">listener.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">nonblocking&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">listener&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">utils.c&lt;/span> &lt;span class="n">nonblocking&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">listener.c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CC&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">CCFLAGS&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">^&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">$@&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">LDFLAGS&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">clean&lt;/span> &lt;span class="n">format&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rm&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">f&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXECUTABLES&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">.o&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">format&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">clang&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">format&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">file&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">.c&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">.h&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>