<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>clang | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/clang/</link><atom:link href="https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/clang/index.xml" rel="self" type="application/rss+xml"/><description>clang</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>clang</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/clang/</link></image><item><title>常用指令</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/clang/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BC%96%E8%AF%91%E4%B8%8E%E8%BF%90%E8%A1%8C/clang/%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</guid><description>&lt;h1 id="clang-常用指令">clang 常用指令&lt;/h1>
&lt;p>clang 提供了一些命令,让我们可以对编译的过程进行一些配置和查看,下面我们就对一些常用的指令进行一个基本的介绍。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看编译的步骤&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ clang -ccc-print-phases main.m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">0: input, “main.m”, objective-c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">1: preprocessor, &lt;span class="o">{&lt;/span>0&lt;span class="o">}&lt;/span>, objective-c-cpp-output
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2: compiler, &lt;span class="o">{&lt;/span>1&lt;span class="o">}&lt;/span>, ir
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">3: backend, &lt;span class="o">{&lt;/span>2&lt;span class="o">}&lt;/span>, assembler
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">4: assembler, &lt;span class="o">{&lt;/span>3&lt;span class="o">}&lt;/span>, object
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">5: linker, &lt;span class="o">{&lt;/span>4&lt;span class="o">}&lt;/span>, image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">6: bind-arch, “x86_64”, &lt;span class="o">{&lt;/span>5&lt;span class="o">}&lt;/span>, image
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看编译结果&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ clang -rewrite-objc main.m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看操作内部命令，可以使用 -### 命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ clang -### main.m -o main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="代码执行步骤">代码执行步骤&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>预处理完成后就会进行词法分析，这里会把代码切成一个个 Token，比如大小括号，等于号还有字符串等。&lt;code>clang -fmodules -fsyntax-only -Xclang -dump-tokens main.m&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后是语法分析，验证语法是否正确，然后将所有节点组成抽象语法树 AST。&lt;code>clang -fmodules -fsyntax-only -Xclang -ast-dump main.m&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完成这些步骤后就可以开始 IR(intermediate representation)中间代码的生成了，CodeGen 会负责将语法树自顶向下遍历逐步翻译成 LLVM IR，IR 是编译过程的前端的输出后端的输入。&lt;code>clang -S -fobjc-arc -emit-llvm main.m -o main.ll&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这里 LLVM 会去做些优化工作，在 Xcode 的编译设置里也可以设置优化级别-01，-03，-0s，还可以写些自己的 Pass，官方有比较完整的 Pass 教程：Writing an LLVM Pass — LLVM 5 documentation 。&lt;code>clang -O3 -S -fobjc-arc -emit-llvm main.m -o main.ll&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pass 是 LLVM 优化工作的一个节点，一个节点做些事，一起加起来就构成了 LLVM 完整的优化和转化。如果开启了 bitcode 苹果会做进一步的优化，有新的后端架构还是可以用这份优化过的 bitcode 去生成。&lt;code>clang -emit-llvm -c main.m -o main.bc&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成汇编。&lt;code>clang -S -fobjc-arc main.m -o main.s&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>生成目标文件。&lt;code>clang -fmodules -c main.m -o main.o&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>