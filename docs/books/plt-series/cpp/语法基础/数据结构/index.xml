<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据结构 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link><atom:link href="https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><description>数据结构</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>数据结构</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link></image><item><title>向量</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%90%91%E9%87%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%90%91%E9%87%8F/</guid><description>&lt;p>vector 类向量容器使用动态数组存储、管理对象。因为数组是一个随机访问数据结构，所以可以随机访问向量中的元素。在数组中间或是开始处插入一个元素是费时的，特别是在数组非常大的时候更是如此。然而在数组末端插入元素却很快。实现向量容器的类名是 vector(容器是类模板)。包含 vector 类的头文件名是 vector。所以，如果要在程序里使用向量容器，就要在程序中包含下面语句：
#include &lt;vector>
此外，在定义向量类型对象时，必须指定该对象的类型，因为 vector 类是一个类模板。例如，语句：
vector&lt;int> intList;&lt;br>
将 intList 声明为一个元素类型为 int 的向量容器对象。类似地，语句：
vector&lt;string> stringList;将 stringList 声明为一个元素类型为 string 的向量容器对象。&lt;/p>
&lt;p>声明向量对象
vector 类包含了多个构造函数，其中包括默认构造函数。因此，可以通过多种方式来声明和初始化向量容器。表一描述了怎样声明和初始化指定类型的向量容器。&lt;/p>
&lt;pre>&lt;code> 表一 各种声明和初始向量容器的方法
&lt;/code>&lt;/pre>
&lt;p>语句
作用
vector&lt;elementType> vecList;
创建一个没有任何元素的空向量 vecList(使用默认构造函数)
vector&lt;elementType> vecList(otherVecList) 创建一个向量 vecList，并使用向量 otherVecList 中的元素初始化该向量。向量 vecList 与向量 otherVecList 的类型相同
vector&lt;elementType> vecLIst(size);&lt;/p>
&lt;pre>&lt;code>创建一个大小为size的向量vecList，并使用默认构造函数初始化该向量
&lt;/code>&lt;/pre>
&lt;p>vector&lt;elementType> vecList(n,elem);
创建一个大小为 n 的向量 vecList，该向量中所有的 n 个元素都初始化为 elem
vector&lt;elementType> vecList(begin,end);&lt;br>
创建一个向量 vecList，并初始化该向量(begin,end)中的元素。即，从 begin 到 end-1 之间的所有元素&lt;/p>
&lt;p>在介绍了如何声明向量顺序容器之后，让我们开始讨论如何操作向量容器中的数据。首先，必须要知道下面几种基本操作：
元素插入
元素删除
遍历向量容器中的元素假设 vecList 是一个向量类型容器。表二给出了在 vecList 中插入元素和删除元素的操作，这些操作是 vector 类的成员函数。表二还说明了如何使用这些操作。&lt;/p>
&lt;pre>&lt;code> 表二 向量容器上的各种操作
&lt;/code>&lt;/pre>
&lt;p>语句 作用
vecList.clear() 从容器中删除所有元素
vecList.erase(position)
删除由 position 指定的位置上的元素
vecList.erase(beg,end)&lt;br>
删除从 beg 到 end-1 之间的所有元素
vecList.insert(position, elem)&lt;br>
将 elem 的一个拷贝插入到由 position 指定的位置上，并返回新元素的位置
vecList.inser(position, n, elem) 将 elem 的 n 个拷贝插入到由 position 指定的位置上
vecList.insert(position, beg, end) 将从 beg 到 end-1 之间的所有元素的拷贝插入到 vecList 中由 position 指定的位置上
vecList.push_back(elem)
将 elem 的一个拷贝插入致 List 的末尾
vecList.pop_back()&lt;br>
删除最后元素
vecList.resize(num)
将元素个数改为 num。如果 size()增加，默认的构造函数负责创建这些新元素
vecList.resize(num, elem) 将元素个数改为 num。如果 size()增加，默认的构造函数将这些新元素初始化为 elem&lt;/p>
&lt;p>在向量容器中声明迭代器
vector 类包含了一个 typedef iterator，这是一个 public 成员。通过 iterator，可以声明向量容器中的迭代器。例如，语句：
vector&lt;int>::iterator intVeciter; 将 intVecIter 声明为 int 类型的向量容器迭代器。因为 iterator 是一个定义在 vector 类中的 typedef，所以必须使用容器名(vector)、容器元素类型和作用域符来使用 iterator。表达式：
++intVecIter
将迭代器 intVecIter 加１，使其指向容器中的下一个元素。表达式：&lt;em>intVecIter
返回当前迭代器位置上的元素。注意，迭代器上的这些操作和指针上的相应操作是相同的。运算符&lt;/em>作为单目运算符使用时，称为递引用运算符。下面将讨论如何使用迭代器来操作向量容器中的数据。假设有下面语句：
vector&lt;int> intList;
vector&lt;int>::iterator intVecIter;
第一行中的语句将 intList 声明为元素为 int 类型的向量容器。第二行中的语句将 intVecIter 声明为元素为 int 类型的向量容器的迭代器。&lt;/p>
&lt;p>容器与函数 begin 和 end
所有容器都包含成员函数 begin 和 end。函数 begin 返回容器中第一个元素的位置；函数 end 返回容器中最后一个元素的位置。这两个函数都没有参数。在执行下面语句：
intVecIter = intList.begin();
迭代器 intVecIter 指向容器 intList 中第一个元素。下面的 for 循环将 intList 中所有元素输出互标准输出设备上：
for (intVecIter = intList.begin(); intVecIter != intList.end();
cout&amp;laquo;*intVecList&amp;laquo;&amp;quot; &amp;ldquo;;
可以通过表三中给出的操作直接访问向量容器中的元素。&lt;/p>
&lt;p>表三　访问向量容器中元素的操作&lt;/p>
&lt;p>表达式 作用
vecList.at(index) 返回由 index 指定的位置上的元素
vecList[index]
返回由 index 指定的位置上的元素
vecList.front()&lt;br>
返回第一个元素　(不检查容器是否为空)
vecList.back()&lt;br>
返回最后一个元素(不检查容器是否为空)&lt;/p>
&lt;p>表三说明：可以按照数组的方式来处理向量中的元素(注意，在 C++中，数组下标从 0 始。，向量容器中第一个元素的位置也是 0)。徽号类中还包含：返回容器中当前元素个数的成员函数，返回可以插入到容器中的元素的最大个数的成员函数等。表四描述其中　一些操作(假设 vecCont 是向量容器)。&lt;/p>
&lt;p>表四　计算向量容器大小的操作&lt;/p>
&lt;p>表达式 作用
vecCont.capacity() 返回不重新分配空间可以插入到容器 vecCont 中的元素的最大个数
vecCont.empty()
容器 vecCont 为空，返回 true；否则，返回 false
vecCont.size()
返回容器 vecCont 中当前的个数
vecCont.max_size() 返回可以插入到容器 vecCont 中的元素的最大个数&lt;/p>
&lt;p>下面给出一个样本程序供进一步认识这些函数的用法：&lt;/p>
&lt;p>#include &lt;iostream>&lt;/p>
&lt;p>#include &lt;vector>&lt;/p>
&lt;p>using namespace std;&lt;/p>
&lt;p>int main()&lt;/p>
&lt;p>{&lt;/p>
&lt;p>vector&lt;int> intList;&lt;/p>
&lt;p>int i;&lt;/p>
&lt;p>intList.push_back(13);&lt;/p>
&lt;p>intList.push_back(75);&lt;/p>
&lt;p>intList.push_back(28);&lt;/p>
&lt;p>intList.push_back(35);&lt;/p>
&lt;p>cout&amp;laquo;&amp;ldquo;Line １: List Elements: &amp;ldquo;;&lt;/p>
&lt;p>for(i=0;i&amp;lt;4;i++)cout&amp;laquo;intList[i]&amp;laquo;&amp;rdquo; &amp;ldquo;;&lt;/p>
&lt;p>for(i=0;i&amp;lt;4;i++)intList[i] *=2;&lt;/p>
&lt;p>cout&amp;laquo;&amp;ldquo;Line ２: List Elements: &amp;ldquo;;&lt;/p>
&lt;p>for(i=0;i&amp;lt;4;i++)cout&amp;laquo;intList[i]&amp;laquo;&amp;rdquo; &amp;ldquo;;&lt;/p>
&lt;p>cout&amp;laquo;endl;&lt;/p>
&lt;p>vector&lt;int>::iterator listIt;&lt;/p>
&lt;p>cout&amp;laquo;&amp;ldquo;Line ３ 0:list Elements: &amp;ldquo;;&lt;/p>
&lt;p>for(listIt=intList.begin();listIt != intList.end();++listIt)cout&amp;laquo;*lintIt&amp;laquo;&amp;rdquo; &amp;ldquo;;&lt;/p>
&lt;p>cout&amp;laquo;endl;&lt;/p>
&lt;p>listIt=intList.begin();&lt;/p>
&lt;p>++listIt;&lt;/p>
&lt;p>++listIt;&lt;/p>
&lt;p>intList.insert(listIt,88);&lt;/p>
&lt;p>cout&amp;laquo;&amp;ldquo;Line ４:List Elements: &amp;ldquo;;&lt;/p>
&lt;p>for(listIt = intList.begin();listIt != intList.end();++listIt)cout&amp;laquo;*listIt&amp;laquo;&amp;rdquo; &amp;ldquo;;&lt;/p>
&lt;p>cout&amp;laquo;endl;&lt;/p>
&lt;p>return 0;&lt;/p>
&lt;p>}&lt;/p>
&lt;p>运行程序输出：&lt;/p>
&lt;p>Line １: List Elements: 13 75 28 35&lt;/p>
&lt;p>Line ２: List Elements: 26 150 56 70&lt;/p>
&lt;p>Line ３: List Elements: 26 150 56 70&lt;/p>
&lt;p>Line ４: List Elements: 26 150 88 56 70&lt;/p>
&lt;p>注意：当对象为常量时，只能调用类中用 const 修饰符声明的成员函数。成员函数 back()和下标运算符[]各有一个独立的实现，声明为 const。因此，这些函数可以被常量对象调用。例如：&lt;/p>
&lt;p>template&lt;typename T>&lt;/p>
&lt;p>void writeVectorEnds(const vector&lt;T>&amp;amp;v){&lt;/p>
&lt;p>if(v.size()&amp;gt;0) cout&amp;laquo;v[0]&amp;laquo;&amp;rdquo; &amp;ldquo;&amp;laquo;v.back()&amp;laquo;endl;&lt;/p>
&lt;p>}&lt;/p></description></item><item><title>序列类型</title><link>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BA%8F%E5%88%97%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/plt-series/cpp/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%BA%8F%E5%88%97%E7%B1%BB%E5%9E%8B/</guid><description>&lt;p>﻿```c++
#include &lt;iostream> 
#include &lt;vector>
using namespace std;
int main(void)
{
    vector&lt;int>array;
    array.push_back(100);
    array.push_back(300);
    array.push_back(300);
    array.push_back(300);
    array.push_back(300);
    array.push_back(500);
    vector&lt;int>::iterator itor;
    for(itor=array.begin();itor!=array.end();itor++)
    {
        if(*itor==300)
        {
            itor=array.erase(itor);
        }
    }
    for(itor=array.begin();itor!=array.end();itor++)
    {
            cout&amp;laquo;*itor&amp;laquo;&amp;quot;&amp;quot;;
    }
  return 0;
}&lt;/p>
&lt;pre tabindex="0">&lt;code>
最终输出值为 100 300 300 500。
vector::erase()：从指定容器删除指定位置的元素或某段范围内的元素
vector::erase()方法有两种重载形式
如下：
iterator erase(   iterator \_Where);
iterator erase(   iterator \_First,  
iterator \_Last);
如果是删除指定位置的元素时：
返回值是一个迭代器，指向删除元素下一个元素;
如果是删除某范围内的元素时：返回值也表示一个迭代器，指向最后一个删除元素的下一个元素;
在本题中，当*itor==300 成立时，删除第一个值为 300 的元素，同时 itor 指向下一个元素(即是第二个值为 300 的元素)，
   在 for(;;itor++)执行 itor，itor 指向第三个值为 300 的元素，进入下一个循环
  进入循环满足*itor==300，重复上面的过程，执行完循环，itor 执行值为 500 的元素。
所有整个过程中，只删除了 2 个值为 300 的元素。
&lt;/code>&lt;/pre></description></item></channel></rss>