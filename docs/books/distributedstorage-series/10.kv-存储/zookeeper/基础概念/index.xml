<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>基础概念 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link><atom:link href="https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/index.xml" rel="self" type="application/rss+xml"/><description>基础概念</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>基础概念</title><link>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link></image><item><title>ZAB</title><link>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/zab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/zab/</guid><description>&lt;h2 id="四zab-协议">四、ZAB 协议&lt;/h2>
&lt;h3 id="41-zab-协议与数据一致性">4.1 ZAB 协议与数据一致性&lt;/h3>
&lt;p>ZAB 协议是 Zookeeper 专门设计的一种支持崩溃恢复的原子广播协议。通过该协议，Zookeeper 基于主从模式的系统架构来保持集群中各个副本之间数据的一致性。具体如下：&lt;/p>
&lt;p>Zookeeper 使用一个单一的主进程来接收并处理客户端的所有事务请求，并采用原子广播协议将数据状态的变更以事务 Proposal 的形式广播到所有的副本进程上去。如下图：&lt;/p>
&lt;div align="center"> &lt;img src="https://gitee.com/heibaiying/BigData-Notes/raw/master/pictures/zookeeper-zkcomponents.jpg"/> &lt;/div>
&lt;p>具体流程如下：&lt;/p>
&lt;p>所有的事务请求必须由唯一的 Leader 服务来处理，Leader 服务将事务请求转换为事务 Proposal，并将该 Proposal 分发给集群中所有的 Follower 服务。如果有半数的 Follower 服务进行了正确的反馈，那么 Leader 就会再次向所有的 Follower 发出 Commit 消息，要求将前一个 Proposal 进行提交。&lt;/p>
&lt;h3 id="42-zab-协议的内容">4.2 ZAB 协议的内容&lt;/h3>
&lt;p>ZAB 协议包括两种基本的模式，分别是崩溃恢复和消息广播：&lt;/p>
&lt;h4 id="1-崩溃恢复">1. 崩溃恢复&lt;/h4>
&lt;p>当整个服务框架在启动过程中，或者当 Leader 服务器出现异常时，ZAB 协议就会进入恢复模式，通过过半选举机制产生新的 Leader，之后其他机器将从新的 Leader 上同步状态，当有过半机器完成状态同步后，就退出恢复模式，进入消息广播模式。&lt;/p>
&lt;h4 id="2-消息广播">2. 消息广播&lt;/h4>
&lt;p>ZAB 协议的消息广播过程使用的是原子广播协议。在整个消息的广播过程中，Leader 服务器会每个事物请求生成对应的 Proposal，并为其分配一个全局唯一的递增的事务 ID(ZXID)，之后再对其进行广播。具体过程如下：&lt;/p>
&lt;p>Leader 服务会为每一个 Follower 服务器分配一个单独的队列，然后将事务 Proposal 依次放入队列中，并根据 FIFO(先进先出) 的策略进行消息发送。Follower 服务在接收到 Proposal 后，会将其以事务日志的形式写入本地磁盘中，并在写入成功后反馈给 Leader 一个 Ack 响应。当 Leader 接收到超过半数 Follower 的 Ack 响应后，就会广播一个 Commit 消息给所有的 Follower 以通知其进行事务提交，之后 Leader 自身也会完成对事务的提交。而每一个 Follower 则在接收到 Commit 消息后，完成事务的提交。&lt;/p>
&lt;div align="center"> &lt;img src="https://gitee.com/heibaiying/BigData-Notes/raw/master/pictures/zookeeper-brocast.jpg"/> &lt;/div>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/fQzTZXoNyht6mbJYW9Ha2Q?from=groupmessage&amp;amp;isappinstalled=0" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/fQzTZXoNyht6mbJYW9Ha2Q?from=groupmessage&amp;isappinstalled=0&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>核心角色</title><link>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E6%A0%B8%E5%BF%83%E8%A7%92%E8%89%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E6%A0%B8%E5%BF%83%E8%A7%92%E8%89%B2/</guid><description>&lt;h2 id="三核心概念">三、核心概念&lt;/h2>
&lt;h3 id="31-集群角色">3.1 集群角色&lt;/h3>
&lt;p>Zookeeper 集群中的机器分为以下三种角色：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Leader&lt;/strong> ：为客户端提供读写服务，并维护集群状态，它是由集群选举所产生的；&lt;/li>
&lt;li>&lt;strong>Follower&lt;/strong> ：为客户端提供读写服务，并定期向 Leader 汇报自己的节点状态。同时也参与写操作“过半写成功”的策略和 Leader 的选举；&lt;/li>
&lt;li>&lt;strong>Observer&lt;/strong> ：为客户端提供读写服务，并定期向 Leader 汇报自己的节点状态，但不参与写操作“过半写成功”的策略和 Leader 的选举，因此 Observer 可以在不影响写性能的情况下提升集群的读性能。&lt;/li>
&lt;/ul>
&lt;h3 id="32-会话">3.2 会话&lt;/h3>
&lt;p>Zookeeper 客户端通过 TCP 长连接连接到服务集群，会话 (Session) 从第一次连接开始就已经建立，之后通过心跳检测机制来保持有效的会话状态。通过这个连接，客户端可以发送请求并接收响应，同时也可以接收到 Watch 事件的通知。&lt;/p>
&lt;p>关于会话中另外一个核心的概念是 sessionTimeOut(会话超时时间)，当由于网络故障或者客户端主动断开等原因，导致连接断开，此时只要在会话超时时间之内重新建立连接，则之前创建的会话依然有效。&lt;/p>
&lt;h3 id="33-数据节点">3.3 数据节点&lt;/h3>
&lt;p>Zookeeper 数据模型是由一系列基本数据单元 &lt;code>Znode&lt;/code>(数据节点) 组成的节点树，其中根节点为 &lt;code>/&lt;/code>。每个节点上都会保存自己的数据和节点信息。Zookeeper 中节点可以分为两大类：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>持久节点&lt;/strong> ：节点一旦创建，除非被主动删除，否则一直存在；&lt;/li>
&lt;li>&lt;strong>临时节点&lt;/strong> ：一旦创建该节点的客户端会话失效，则所有该客户端创建的临时节点都会被删除。&lt;/li>
&lt;/ul>
&lt;p>临时节点和持久节点都可以添加一个特殊的属性：&lt;code>SEQUENTIAL&lt;/code>，代表该节点是否具有递增属性。如果指定该属性，那么在这个节点创建时，Zookeeper 会自动在其节点名称后面追加一个由父节点维护的递增数字。&lt;/p>
&lt;h3 id="34-节点信息">3.4 节点信息&lt;/h3>
&lt;p>每个 ZNode 节点在存储数据的同时，都会维护一个叫做 &lt;code>Stat&lt;/code> 的数据结构，里面存储了关于该节点的全部状态信息。如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>状态属性&lt;/strong>&lt;/th>
&lt;th>&lt;strong>说明&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>czxid&lt;/td>
&lt;td>数据节点创建时的事务 ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ctime&lt;/td>
&lt;td>数据节点创建时的时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mzxid&lt;/td>
&lt;td>数据节点最后一次更新时的事务 ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>mtime&lt;/td>
&lt;td>数据节点最后一次更新时的时间&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>pzxid&lt;/td>
&lt;td>数据节点的子节点最后一次被修改时的事务 ID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cversion&lt;/td>
&lt;td>子节点的更改次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>version&lt;/td>
&lt;td>节点数据的更改次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>aversion&lt;/td>
&lt;td>节点的 ACL 的更改次数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ephemeralOwner&lt;/td>
&lt;td>如果节点是临时节点，则表示创建该节点的会话的 SessionID；如果节点是持久节点，则该属性值为 0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dataLength&lt;/td>
&lt;td>数据内容的长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>numChildren&lt;/td>
&lt;td>数据节点当前的子节点个数&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="35-watcher">3.5 Watcher&lt;/h3>
&lt;p>Zookeeper 中一个常用的功能是 Watcher(事件监听器)，它允许用户在指定节点上针对感兴趣的事件注册监听，当事件发生时，监听器会被触发，并将事件信息推送到客户端。该机制是 Zookeeper 实现分布式协调服务的重要特性。&lt;/p>
&lt;h3 id="36-acl">3.6 ACL&lt;/h3>
&lt;p>Zookeeper 采用 ACL(Access Control Lists) 策略来进行权限控制，类似于 UNIX 文件系统的权限控制。它定义了如下五种权限：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>CREATE&lt;/strong>：允许创建子节点；&lt;/li>
&lt;li>&lt;strong>READ&lt;/strong>：允许从节点获取数据并列出其子节点；&lt;/li>
&lt;li>&lt;strong>WRITE&lt;/strong>：允许为节点设置数据；&lt;/li>
&lt;li>&lt;strong>DELETE&lt;/strong>：允许删除子节点；&lt;/li>
&lt;li>&lt;strong>ADMIN&lt;/strong>：允许为节点设置权限。&lt;/li>
&lt;/ul></description></item><item><title>应用场景</title><link>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-series/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid><description>&lt;h2 id="五zookeeper-的典型应用场景">五、Zookeeper 的典型应用场景&lt;/h2>
&lt;h3 id="51-数据的发布订阅">5.1 数据的发布/订阅&lt;/h3>
&lt;p>数据的发布/订阅系统，通常也用作配置中心。在分布式系统中，你可能有成千上万个服务节点，如果想要对所有服务的某项配置进行更改，由于数据节点过多，你不可逐台进行修改，而应该在设计时采用统一的配置中心。之后发布者只需要将新的配置发送到配置中心，所有服务节点即可自动下载并进行更新，从而实现配置的集中管理和动态更新。&lt;/p>
&lt;p>Zookeeper 通过 Watcher 机制可以实现数据的发布和订阅。分布式系统的所有的服务节点可以对某个 ZNode 注册监听，之后只需要将新的配置写入该 ZNode，所有服务节点都会收到该事件。&lt;/p>
&lt;h3 id="52-命名服务">5.2 命名服务&lt;/h3>
&lt;p>在分布式系统中，通常需要一个全局唯一的名字，如生成全局唯一的订单号等，Zookeeper 可以通过顺序节点的特性来生成全局唯一 ID，从而可以对分布式系统提供命名服务。&lt;/p>
&lt;h3 id="53-master-选举">5.3 Master 选举&lt;/h3>
&lt;p>分布式系统一个重要的模式就是主从模式 (Master/Salves)，Zookeeper 可以用于该模式下的 Matser 选举。可以让所有服务节点去竞争性地创建同一个 ZNode，由于 Zookeeper 不能有路径相同的 ZNode，必然只有一个服务节点能够创建成功，这样该服务节点就可以成为 Master 节点。&lt;/p>
&lt;h3 id="54-分布式锁">5.4 分布式锁&lt;/h3>
&lt;p>可以通过 Zookeeper 的临时节点和 Watcher 机制来实现分布式锁，这里以排它锁为例进行说明：&lt;/p>
&lt;p>分布式系统的所有服务节点可以竞争性地去创建同一个临时 ZNode，由于 Zookeeper 不能有路径相同的 ZNode，必然只有一个服务节点能够创建成功，此时可以认为该节点获得了锁。其他没有获得锁的服务节点通过在该 ZNode 上注册监听，从而当锁释放时再去竞争获得锁。锁的释放情况有以下两种：&lt;/p>
&lt;ul>
&lt;li>当正常执行完业务逻辑后，客户端主动将临时 ZNode 删除，此时锁被释放；&lt;/li>
&lt;li>当获得锁的客户端发生宕机时，临时 ZNode 会被自动删除，此时认为锁已经释放。&lt;/li>
&lt;/ul>
&lt;p>当锁被释放后，其他服务节点则再次去竞争性地进行创建，但每次都只有一个服务节点能够获取到锁，这就是排他锁。&lt;/p>
&lt;h3 id="55-集群管理">5.5 集群管理&lt;/h3>
&lt;p>Zookeeper 还能解决大多数分布式系统中的问题：&lt;/p>
&lt;ul>
&lt;li>如可以通过创建临时节点来建立心跳检测机制。如果分布式系统的某个服务节点宕机了，则其持有的会话会超时，此时该临时节点会被删除，相应的监听事件就会被触发。&lt;/li>
&lt;li>分布式系统的每个服务节点还可以将自己的节点状态写入临时节点，从而完成状态报告或节点工作进度汇报。&lt;/li>
&lt;li>通过数据的订阅和发布功能，Zookeeper 还能对分布式系统进行模块的解耦和任务的调度。&lt;/li>
&lt;li>通过监听机制，还能对分布式系统的服务节点进行动态上下线，从而实现服务的动态扩容。&lt;/li>
&lt;/ul></description></item></channel></rss>