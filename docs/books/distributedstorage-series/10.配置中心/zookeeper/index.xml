<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ZooKeeper | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/</link><atom:link href="https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/index.xml" rel="self" type="application/rss+xml"/><description>ZooKeeper</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>ZooKeeper</title><link>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/</link></image><item><title>ZAB</title><link>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/zab/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/zab/</guid><description>&lt;h1 id="zab">ZAB&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/fQzTZXoNyht6mbJYW9Ha2Q?from=groupmessage&amp;amp;isappinstalled=0" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/fQzTZXoNyht6mbJYW9Ha2Q?from=groupmessage&amp;isappinstalled=0&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>部署与配置</title><link>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="quick-start">Quick Start&lt;/h1>
&lt;h2 id="installation">Installation&lt;/h2>
&lt;h3 id="linux">Linux&lt;/h3>
&lt;p>从&lt;a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="noopener">这里&lt;/a>下载，下载解压之后可以直接以独立模式运行。Server 被包含在了一个的 Jar 包中。tickTime=2000 dataDir=/var/lib/zookeeper clientPort=2181&lt;/p>
&lt;p>This file can be called anything, but for the sake of this discussion call it conf/zoo.cfg. Change the value of dataDir to specify an existing (empty to start with) directory. Here are the meanings for each of the fields:tickTime the basic time unit in milliseconds used by ZooKeeper. It is used to do heartbeats and the minimum session timeout will be twice the tickTime.dataDir the location to store the in-memory database snapshots and, unless specified otherwise, the transaction log of updates to the database.clientPort the port to listen for client connections&lt;/p>
&lt;p>Now that you created the configuration file, you can start ZooKeeper:bin/zkServer.sh start&lt;/p>
&lt;h3 id="docker">Docker&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">FROM ubuntu:vivid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN apt-get update &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get -y install git ant openjdk-8-jdk &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> apt-get clean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN mkdir /tmp/zookeeper
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">WORKDIR /tmp/zookeeper
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN git clone https://github.com/apache/zookeeper.git .
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN git checkout release-3.5.1-rc2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN ant jar
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 将zookeeper配置文件复制到指定地方&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN cp /tmp/zookeeper/conf/zoo_sample.cfg /tmp/zookeeper/conf/zoo.cfg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;standaloneEnabled=false&amp;#34;&lt;/span> &amp;gt;&amp;gt; /tmp/zookeeper/conf/zoo.cfg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RUN &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;dynamicConfigFile=/tmp/zookeeper/conf/zoo.cfg.dynamic&amp;#34;&lt;/span> &amp;gt;&amp;gt; /tmp/zookeeper/conf/zoo.cfg
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ADD zk-init.sh /usr/local/bin/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ENTRYPOINT &lt;span class="o">[&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/bin/zk-init.sh&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用以下命令构建单机版的 Docker 镜像&lt;/p>
&lt;pre tabindex="0">&lt;code>docker build -t `whoami`/zookeeper:latest .
&lt;/code>&lt;/pre>&lt;p>zk-init.sh 脚本内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">ZK&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">MYID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">IPADDRESS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>ip -4 addr show scope global dev eth0 &lt;span class="p">|&lt;/span> grep inet &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print \$2}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> cut -d / -f 1&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">cd&lt;/span> /tmp/zookeeper
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$ZK&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nv">output&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>./bin/zkCli.sh -server &lt;span class="nv">$ZK&lt;/span>:2181 get /zookeeper/config &lt;span class="p">|&lt;/span> grep ^server&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="c1"># extract all the zk-ids from the output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nb">declare&lt;/span> -a &lt;span class="nv">id_list&lt;/span>&lt;span class="o">=()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> x&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="nv">id_list&lt;/span>&lt;span class="o">+=(&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$x&lt;/span> &lt;span class="p">|&lt;/span> cut -d&lt;span class="s2">&amp;#34;=&amp;#34;&lt;/span> -f1 &lt;span class="p">|&lt;/span> cut -d&lt;span class="s2">&amp;#34;.&amp;#34;&lt;/span> -f2&lt;span class="sb">`&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="k">done&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&amp;lt;&lt;/span>&lt;span class="k">$(&lt;/span>output&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nv">sorted_id_list&lt;/span>&lt;span class="o">=(&lt;/span> &lt;span class="k">$(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">for&lt;/span> el in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">id_list&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">      &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$el&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">    &lt;span class="k">done&lt;/span> &lt;span class="p">|&lt;/span> sort -n&lt;span class="k">)&lt;/span> &lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="c1"># get the next increasing number from the sequence&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nv">MYID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$((&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">sorted_id_list&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="si">${#&lt;/span>&lt;span class="nv">sorted_id_list&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">-1]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="k">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$output&lt;/span> &amp;gt;&amp;gt; /tmp/zookeeper/conf/zoo.cfg.dynamic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;server.&lt;/span>&lt;span class="nv">$MYID&lt;/span>&lt;span class="s2">=&lt;/span>&lt;span class="nv">$IPADDRESS&lt;/span>&lt;span class="s2">:2888:3888:observer;2181&amp;#34;&lt;/span> &amp;gt;&amp;gt; /tmp/zookeeper/conf/zoo.cfg.dynamic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  cp /tmp/zookeeper/conf/zoo.cfg.dynamic /tmp/zookeeper/conf/zoo.cfg.dynamic.org
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  /tmp/zookeeper/bin/zkServer-initialize.sh --force --myid&lt;span class="o">=&lt;/span>&lt;span class="nv">$MYID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nv">ZOO_LOG_DIR&lt;/span>&lt;span class="o">=&lt;/span>/var/log &lt;span class="nv">ZOO_LOG4J_PROP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO,CONSOLE,ROLLINGFILE&amp;#39;&lt;/span> /tmp/zookeeper/bin/zkServer.sh start
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  /tmp/zookeeper/bin/zkCli.sh -server &lt;span class="nv">$ZK&lt;/span>:2181 reconfig -add &lt;span class="s2">&amp;#34;server.&lt;/span>&lt;span class="nv">$MYID&lt;/span>&lt;span class="s2">=&lt;/span>&lt;span class="nv">$IPADDRESS&lt;/span>&lt;span class="s2">:2888:3888:participant;2181&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  /tmp/zookeeper/bin/zkServer.sh stop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nv">ZOO_LOG_DIR&lt;/span>&lt;span class="o">=&lt;/span>/var/log &lt;span class="nv">ZOO_LOG4J_PROP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO,CONSOLE,ROLLINGFILE&amp;#39;&lt;/span> /tmp/zookeeper/bin/zkServer.sh start-foreground
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;server.&lt;/span>&lt;span class="nv">$MYID&lt;/span>&lt;span class="s2">=&lt;/span>&lt;span class="nv">$IPADDRESS&lt;/span>&lt;span class="s2">:2888:3888;2181&amp;#34;&lt;/span> &amp;gt;&amp;gt; /tmp/zookeeper/conf/zoo.cfg.dynamic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  /tmp/zookeeper/bin/zkServer-initialize.sh --force --myid&lt;span class="o">=&lt;/span>&lt;span class="nv">$MYID&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">  &lt;span class="nv">ZOO_LOG_DIR&lt;/span>&lt;span class="o">=&lt;/span>/var/log &lt;span class="nv">ZOO_LOG4J_PROP&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;INFO,CONSOLE,ROLLINGFILE&amp;#39;&lt;/span> /tmp/zookeeper/bin/zkServer.sh start-foreground
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>docker run --net=host --name zk1 `whoami`/zookeeper
&lt;/code>&lt;/pre>&lt;p>注意，这里使用了&lt;code>—net&lt;/code>指令，即是直接将 Zookeeper 的端口映射到了宿主机上，如果要在一台宿主机上 Run 多个 Zookeeper 实例，请使用 container 网络，建议使用 Docker-Compose 进行构建。&lt;/p>
&lt;p>We need the ip of our node. This will be the ip of your host, or in a single host setup you will need to inspect the container like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker inspect zk1|grep IPAddress
&lt;/code>&lt;/pre>&lt;p>We specify the IP address when starting the second node:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker run --net=host --name zk2 containersol/zookeeper &amp;lt;ip of the first zookeeper&amp;gt;
&lt;/code>&lt;/pre>&lt;p>This time we also see a few WARNINGS and even an ERROR, but in the end&lt;/p>
&lt;p>we have two nodes running. We throw in a third for good measure:&lt;/p>
&lt;pre tabindex="0">&lt;code>docker run --net=host --name zk3 containersol/zookeeper &amp;lt;ip of 1st zookeeper&amp;gt;
&lt;/code>&lt;/pre>&lt;p>集群建立之后，可以通过如下命令验证：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">docker &lt;span class="nb">exec&lt;/span> -it zk1 bin/zkCli.sh -server &amp;lt;ip of 1st zookeeper&amp;gt;:2181 config&lt;span class="p">|&lt;/span> grep ^server
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server.1&lt;span class="o">=&lt;/span>&amp;lt;ip of 1st zookeeper&amp;gt;:2888:3888:participant&lt;span class="p">;&lt;/span>0.0.0.0:2181
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server.2&lt;span class="o">=&lt;/span>&amp;lt;ip of 2nd zookeeper&amp;gt;:2888:3888:participant&lt;span class="p">;&lt;/span>0.0.0.0:2181
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">server.3&lt;span class="o">=&lt;/span>&amp;lt;ip of 3rd zookeeper&amp;gt;:2888:3888:participant&lt;span class="p">;&lt;/span>0.0.0.0:2181
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>架构原理</title><link>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</guid><description>&lt;h1 id="集群架构">集群架构&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0wrbva8sqj30k70ffab4.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Leader 服务器是整个 ZooKeeper 集群工作机制中的核心，其主要工作有以下两个：&lt;/p>
&lt;ul>
&lt;li>事务请求的唯一调度和处理者，保证集群事务处理的顺序性。&lt;/li>
&lt;li>集群内部各服务器的调度者。&lt;/li>
&lt;/ul>
&lt;p>从角色名字上可以看出，Follewer 服务器是 ZooKeeper 集群状态的跟随者，其主要工作有以下三个：&lt;/p>
&lt;ul>
&lt;li>处理客户端非事务请求，转发事务请求给 Leader 服务器。&lt;/li>
&lt;li>参与事务请求 Proposal 的投票。&lt;/li>
&lt;li>参与 Leader 选举投票。&lt;/li>
&lt;/ul>
&lt;p>Observer 充当了一个观察者的角色，在工作原理上基本和 Follower 一致，唯一的区别在于，它不参与任何形式的投票。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0wrbva8sqj30k70ffab4.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>在 Client 向 Follower 发出一个写请求。&lt;/li>
&lt;li>Follower 把请求转发给 Leader。&lt;/li>
&lt;li>Leader 接收到以后开始发起投票并通知 Follower 进行投票。&lt;/li>
&lt;li>Follower 把投票结果发送给 Leader。&lt;/li>
&lt;li>Leader 将结果汇总后，如果需要写入，则开始写入，同时把写入操作通知给 Follower，然后 commit。&lt;/li>
&lt;li>Follower 把请求结果返回给 Client。&lt;/li>
&lt;/ul>
&lt;h1 id="节点组件">节点组件&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0wrbva8sqj30k70ffab4.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ServerCnxnFactory，ZooKeeper 服务端网络连接工厂。在早期版本中，ZooKeeper 都是自己实现 NIO 框架，从 3.4.0 版本开始，引入了 Netty。可以通过 zookeeper.serverCnxnFactory 来指定使用具体的实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SessionTracker，ZooKeeper 服务端会话管理器。创建时，会初始化 expirationInterval、nextExpirationTime、sessionsWithTimeout（用于保存每个会话的超时时间），同时还会计算出一个初始化的 sessionID。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RequestProcessor，ZooKeeper 的请求处理方式是典型的责任链模式，在服务端，会有多个请求处理器依次来处理一个客户的请求。在服务器启动的时候，会将这些请求处理器串联起来形成一个请求处理链。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LearnerCnxAcceptor，Learner 服务器（等于 Follower 服务器）连接请求接收器。负责 Leader 服务器和 Follower 服务器保持连接，以确定集群机器存活情况，并处理连接请求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LearnerHandler，Leader 接收来自其他机器的连接创建请求后，会创建一个 LearnerHandler 实例。每个 LearnerHandler 实例都对应了一个 Leader 和 Learner 服务器之间的连接，其负责 Leader 和 Learner 服务器之间几乎所有的消息通信和数据同步。
ZKDatabase，ZooKeeper 内存数据库，负责管理 ZooKeeper 的所有会话记录以及 DataTree 和事务日志的存储。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FileTxnSnapLog，ZooKeeper 上层服务和底层数据存储之间的对接层，提供了一系列的操作数据文件的接口，包括事务文件和快照数据文件。ZooKeeper 根据 zoo.cfg 文件中解析出的快照数据目录 dataDir 和事务日志目录 dataLogDir 来创建 FileTxnSnapLog。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LeaderElection，ZooKeeper 会根据 zoo.cfg 中的配置，创建相应的 Leader 选举算法实现。在 ZooKeeper 中，默认提供了三种 Leader 选举算法的实现，分别是 LeaderElection、AuthFastLeaderElection、FastLeaderElection，可以通过配置文件中 electionAlg 属性来指定，分别用 0 ~ 3 来表示。从 3.4.0 版本开始，ZooKeeper 废弃了前两种算法，只支持 FastLeaderEletion 选举算法。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>数据操作</title><link>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-series/10.%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83/zookeeper/%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</guid><description>&lt;p>在 ZooKeeper 中，每一个节点都被称为一个 ZNode，所有 ZNode 按层次化机构进行组织，形成一棵树。ZNode 节点路径标识方式和 Unix 文件系统路径非常相似，都是由一系列使用斜杠（/）进行分割的路径表示，开发人员可以向这个节点中写入数据，也可以在节点下面创建子节点。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0wrbva8sqj30k70ffab4.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item></channel></rss>