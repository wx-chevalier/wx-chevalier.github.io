<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2.背景与特性 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/go-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.%E8%83%8C%E6%99%AF%E4%B8%8E%E7%89%B9%E6%80%A7/</link><atom:link href="https://ng-tech.icu/books/go-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.%E8%83%8C%E6%99%AF%E4%B8%8E%E7%89%B9%E6%80%A7/index.xml" rel="self" type="application/rss+xml"/><description>2.背景与特性</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>2.背景与特性</title><link>https://ng-tech.icu/books/go-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.%E8%83%8C%E6%99%AF%E4%B8%8E%E7%89%B9%E6%80%A7/</link></image><item><title>Go 简史</title><link>https://ng-tech.icu/books/go-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.%E8%83%8C%E6%99%AF%E4%B8%8E%E7%89%B9%E6%80%A7/go-%E7%AE%80%E5%8F%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/go-series/1.%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/2.%E8%83%8C%E6%99%AF%E4%B8%8E%E7%89%B9%E6%80%A7/go-%E7%AE%80%E5%8F%B2/</guid><description>&lt;h1 id="go-简史">Go 简史&lt;/h1>
&lt;p>Go 源于 Rob Pike 在 2007 年 9 月 25 号，星期二，下午 3：12 回复给 Robert Griesemer、Ken Thompson 的有关编程语言讨论主题的邮件，邮件正文大意为：在开车回家的路上我得到了些灵感。给这门编程语言取名为“go”，它很简短，易书写。工具类可以命名为：goc、gol、goa。交互式的调试工具也可以直接命名为“go”。语言文件后缀名为 .go 等等。这就是 Go 语言名字的来源，自此之后 Robert、Rob 和 Ken 三个人开始在 Google 内部进行了研发，一直到了 2009 年，Go 正式开源了，Go 项目团队将 2009 年 11 月 10 日，即该语言正式对外开源的日字作为其官方生日。源代码最初托管在 &lt;a href="http://code.google.com" target="_blank" rel="noopener">Google Code&lt;/a> 上，之后几年才逐步的迁移到 GitHub 上。&lt;/p>
&lt;p>后来 Russ Cox 在 2008 年带着他的语言设计天赋和编程技巧加入了刚成立不久的 Go 团队。Russ 发现 Go 方法的通用性意味着函数也能拥有自己的方法，这直接促成了 http.HandlerFunc 的实现，这是一个让 Go 一下子变得无限可能的特性。Russ 还提出了更多的泛化性的想法，比如 io.Reader 和 io.Writer 接口，奠定了所有 IO 库的整体结构。接下来，安全专家 Adam Langley 帮助 Go 走向 Google 外面的世界。Docker 的公司使用 Go 进行项目开发，并促进了计算机领域的容器行业，进而出现了像 Kubernetes 这样的项目。这些历史是 Go 语言如今辉煌的基石。&lt;/p>
&lt;p>《Go 语言圣经》中给出的 Go 语言的基因图谱，我们可以从中看到有哪些编程语言对 Go 语言产生了影响：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/30/QVGTdx.png" alt="Go 语言的基因图谱" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>首先看基因图谱的左边一支。可以明确看出 Go 语言的并发特性是由贝尔实验室的 Hoare 于 1978 年发布的 CSP 理论演化而来。其后，CSP 并发模型在 Squeak/NewSqueak 和 Alef 等编程语言中逐步完善并走向实际应用，最终这些设计经验被消化并吸收到了 Go 语言中。业界比较熟悉的 Erlang 编程语言的并发编程模型也是 CSP 理论的另一种实现。&lt;/p>
&lt;p>再看基因图谱的中间一支。中间一支主要包含了 Go 语言中面向对象和包特性的演化历程。Go 语言中包和接口以及面向对象等特性则继承自 Niklaus Wirth 所设计的 Pascal 语言以及其后所衍生的相关编程语言。其中包的概念、包的导入和声明等语法主要来自于 Modula-2 编程语言，面向对象特性所提供的方法的声明语法等则来自于 Oberon 编程语言。最终 Go 语言演化出了自己特有的支持鸭子面向对象模型的隐式接口等诸多特性。&lt;/p>
&lt;p>最后是基因图谱的右边一支，这是对 C 语言的致敬。Go 语言是对 C 语言最彻底的一次扬弃，不仅仅是语法和 C 语言有着很多差异，最重要的是舍弃了 C 语言中灵活但是危险的指针运算。而且，Go 语言还重新设计了 C 语言中部分不太合理运算符的优先级，并在很多细微的地方都做了必要的打磨和改变。当然，C 语言中少即是多、简单直接的暴力编程哲学则被 Go 语言更彻底地发扬光大了（Go 语言居然只有 25 个关键字，sepc 语言规范还不到 50 页)）。&lt;/p>
&lt;p>Go 语言其它的一些特性零散地来自于其他一些编程语言；比如 iota 语法是从 APL 语言借鉴，词法作用域与嵌套函数等特性来自于 Scheme 语言（和其他很多编程语言）。Go 语言中也有很多自己发明创新的设计。比如 Go 语言的切片为轻量级动态数组提供了有效的随机存取的性能，这可能会让人联想到链表的底层的共享机制。还有 Go 语言新发明的 defer 语句（Ken 发明）也是神来之笔。&lt;/p></description></item></channel></rss>