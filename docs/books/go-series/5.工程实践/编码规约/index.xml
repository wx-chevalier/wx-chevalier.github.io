<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>编码规约 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/go-series/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/</link>
      <atom:link href="https://ng-tech.icu/books/go-series/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/index.xml" rel="self" type="application/rss+xml" />
    <description>编码规约</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>编码规约</title>
      <link>https://ng-tech.icu/books/go-series/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/</link>
    </image>
    
    <item>
      <title>代码组织</title>
      <link>https://ng-tech.icu/books/go-series/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/go-series/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/%E4%BB%A3%E7%A0%81%E7%BB%84%E7%BB%87/</guid>
      <description>&lt;h1 id=&#34;代码组织&#34;&gt;代码组织&lt;/h1&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://eli.thegreenplace.net/2019/simple-go-project-layout-with-modules/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://eli.thegreenplace.net/2019/simple-go-project-layout-with-modules/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>样式规范</title>
      <link>https://ng-tech.icu/books/go-series/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/%E6%A0%B7%E5%BC%8F%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/go-series/5.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%BC%96%E7%A0%81%E8%A7%84%E7%BA%A6/%E6%A0%B7%E5%BC%8F%E8%A7%84%E8%8C%83/</guid>
      <description>&lt;h1 id=&#34;go-编码规范&#34;&gt;Go 编码规范&lt;/h1&gt;
&lt;h1 id=&#34;格式&#34;&gt;格式&lt;/h1&gt;
&lt;p&gt;使用 &lt;code&gt;gofmt&lt;/code&gt; 命令对源文件格式化。&lt;code&gt;gofmt&lt;/code&gt; 格式化细节如下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缩进
使用 tab 缩进。gofmt 命令默认使用它。除非有特殊需求，否则不要使用 space 缩进代码。&lt;/li&gt;
&lt;li&gt;行的长度
Go 对行的长度没有限制。可以换行，并插入适当的 tab 缩进。&lt;/li&gt;
&lt;li&gt;括号
比起 C 和 Java，Go 所需要的括号更好：控制结构（if、for 和 switch）在语法上并不需要括号。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;注释&#34;&gt;注释&lt;/h1&gt;
&lt;p&gt;imports 应该按照字母顺序排序，并且按照，标准库，三方，二方，一方的顺序分节。特殊情况下，如有引用顺序的需求，通过空行实现。&lt;/p&gt;
&lt;h2 id=&#34;文档注释&#34;&gt;文档注释&lt;/h2&gt;
&lt;p&gt;出现在顶级声明之前，并且也该声明之间没有空行的注释，即文档注释。
每个包都应该包含包注释。对于包含多个文件的包，包注释只需出现在其中任一文件中。
如果文档较为复杂，使用块注释。如果较为简单，则使用行注释。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;balabala
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;  ge get -u github.com/foo/bar
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;sample code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;	func main() {
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;		fmt.Println(&amp;#34;hello world&amp;#34;)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;Head
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;content http://www.google.com
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;package&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;somepkg&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文档注释生成 html 的规则非常简单：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有非空行，解释为段落&lt;/li&gt;
&lt;li&gt;带缩进的内容，将装入&lt;pre&gt;标签，一般用于样例代码&lt;/li&gt;
&lt;li&gt;url 自动解释为&lt;a&gt;标签&lt;/li&gt;
&lt;li&gt;首字母大写并且不是以“&lt;code&gt;.&lt;/code&gt;”结尾的的非空行，如果紧跟一个段落，将解释为&lt;head&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;每个非 internal 的包都需要文档注释，每个导出函数、类型、变量、方法都应该有文档注释。&lt;/p&gt;
&lt;h1 id=&#34;命名&#34;&gt;命名&lt;/h1&gt;
&lt;p&gt;正如命名在其它语言中的地位，它在 Go 中同样重要。有时它们甚至会影响语义：例如，某个名称在包外是否可见，就取决于其首个字符是否为大写字母。因此有必要花点时间来讨论 协程序中的命名约定。&lt;/p&gt;
&lt;h2 id=&#34;包名&#34;&gt;包名&lt;/h2&gt;
&lt;p&gt;当一个包被引入之后，包中的导出内容，都将通过包名访问。因此包应当有个恰当的名称。包名应该简洁明了而且易于理解。按照惯例，包应当以小写的单个单词来命名，且不应使用下划线或驼峰记法。&lt;/p&gt;
&lt;p&gt;在导入包时，可以通过添加别名的方式，避免包名冲突。请勿使用&lt;code&gt;import .&lt;/code&gt;记法，它可以简化必须在被测试包外运行的测试，除此之外应尽量避免使用。&lt;/p&gt;
&lt;h2 id=&#34;getters&#34;&gt;Getters&lt;/h2&gt;
&lt;p&gt;Go 并不对获取器（getter）和设置器（setter）提供自动支持。你应当自己提供获取器和设置器，通常很值得这样做，但若要将 Get 放到获取器的名字中，既不符合习惯，也没有必要。若你有个名为 owner（小写，未导出）的字段。其获取器应当名为 Owner（大写，可导出）而非 GetOwner。大写字母即为可导出的这种规定为区分方法和字段提供了便利。若要提供设置器方法，SetOwner 是个不错的选择。两个命名看起来都很合理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;owner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Owner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;owner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;obj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;SetOwner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;接口名&#34;&gt;接口名&lt;/h2&gt;
&lt;p&gt;按照约定，只包含一个方法的接口应当以该方法的名称加上 &lt;code&gt;-er&lt;/code&gt; 后缀来命名，如 Reader、Writer、Formatter、CloseNotifier 等。&lt;/p&gt;
&lt;p&gt;诸如此类的命名有很多，遵循它们及其代表的函数名会让事情变得简单。Read、Write、Close、Flush、String 等都具有典型的签名和意义。为避免冲突，请不要用这些名称为你的方法命名，除非你明确知道它们的签名和意义相同。反之，若你的类型实现了的方法，与一个众所周知的类型的方法拥有相同的含义，那就使用相同的命名。请将字符串转换方法命名为 &lt;code&gt;String&lt;/code&gt; 而非 &lt;code&gt;ToString&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&#34;驼峰记法&#34;&gt;驼峰记法&lt;/h2&gt;
&lt;p&gt;Go 中约定使用驼峰记法 &lt;code&gt;MixedCaps&lt;/code&gt;或&lt;code&gt;mixedCaps&lt;/code&gt; 而非下划线的方式来对多单词名称进行命名。&lt;/p&gt;
&lt;p&gt;大写开头表示导出内容（public），小写开头表示非导出内容（private）。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
