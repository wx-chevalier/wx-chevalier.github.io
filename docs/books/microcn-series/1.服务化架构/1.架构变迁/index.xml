<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1.架构变迁 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/</link><atom:link href="https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/index.xml" rel="self" type="application/rss+xml"/><description>1.架构变迁</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>1.架构变迁</title><link>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/</link></image><item><title>SOA</title><link>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/soa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/soa/</guid><description>&lt;h1 id="soa-面向服务架构">SOA 面向服务架构&lt;/h1>
&lt;p>SOA（Service-Oriented Architecture）面向服务架构，是在互联网应用规模迅速增长，集中式架构已无法做到无限制地提升系统的吞吐量的背景下，产生的涉及模块化开发、分布式扩展部署等相对宽泛的概念。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/g2sRJB03/image.png" alt="SOA 的五大触角视图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>SOA 是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。SOA 中的接口独立于实现服务的硬件平台、操作系统和编程语言，采用中立的方式进行定义。这使得构建在各种各样的系统中的服务可以以一种统一和通用的方式进行交互。面向服务架构，它可以根据需求通过网络对松散耦合的粗粒度应用组件进行分布式部署、组合和使用。服务层是 SOA 的基础，可以直接被应用调用，从而有效控制系统中与软件代理交互的人为依赖性。&lt;/p>
&lt;p>实施 SOA 的关键目标是实现企业 IT 资产的最大化作用。要实现这一目标，就要在实施 SOA 的过程中牢记以下特征：可从企业外部访问、随时可用、粗粒度的服务接口分级、松散耦合、可重用的服务、服务接口设计管理、标准化的服务接口、支持各种消息模式、精确定义的服务契约。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/pTqK6Gw2/image.png" alt="ESB 示意图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>服务消费者（Service Consumer）可以通过发送消息来调用服务，这些消息由一个服务总线（Service Bus）转换后发送给适当的服务实现。这种服务架构可以提供一个业务规则引（Business Rules Engine），该引擎容许业务规则被合并在一个服务里或多个服务里。这种架构也提供了一个服务管理基础（Service Management Infrastructure），用来管理服务，类似审核，列表（billing），日志等功能。此外，该架构给企业提供了灵活的业务流程，更好地处理控制请求（Regulatory Requirement），例如 Sarbanes Oxley（SOX），并且可以在不影响其他服务的情况下更改某项服务。&lt;/p>
&lt;p>由于分布式系统十分复杂，因此产生了大量的用于简化分布式系统开发的分布式中间件和分布式数据库，服务化的架构设计理念也被越来越多的公司所认同。如下是 Dubbo 官方文档公布了一张有关 SOA 系统演化过程的图片：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://tva1.sinaimg.cn/large/007rAy9hgy1g35rmkfy3hj30jg05ut9c.jpg" alt="Dubbo SOA 系统演化示意" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="soa-与微服务">SOA 与微服务&lt;/h1>
&lt;p>对于熟悉 SOA 的开发者，微服务也可以认为是去除了 ESB 的 SOA 的一种实现方案；ESB 是 SOA 架构中的中心总线，设计图形应该是星形的，而微服务是去中心化的分布式软件架构。SOA 更多强调重用，而微服务偏向于重写。SOA 偏向水平服务，微服务偏向垂直服务；SOA 偏向自上而下的设计，微服务偏向自下而上的设计。&lt;/p></description></item><item><title>单体架构</title><link>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/%E5%8D%95%E4%BD%93%E6%9E%B6%E6%9E%84/</guid><description>&lt;h1 id="单体分层架构">单体分层架构&lt;/h1>
&lt;p>在 Web 应用程序发展的早期，大部分工程是将所有的服务端功能模块打包到单个巨石型（Monolith）应用中，譬如很多企业的 Java 应用程序打包为 war 包，最终会形成如下的架构：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/RhHL8Q4q/image.png" alt="单体架构示意" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>巨石型应用易于搭建开发环境、易于测试、易于部署；其缺陷也非常明显，无法进行局部改动与部署，编译时间过长，回归测试周期过长，开发效率降低等。在 Web2.0 时代刚刚流行的时候，互联网应用与企业级应用并没有本质的区别，集中式架构分为标准的三层：数据访问层、服务层和 Web 层。&lt;/p>
&lt;ul>
&lt;li>数据访问层用于定义数据访问接口，实现对真实数据库的访问；&lt;/li>
&lt;li>服务层用于对应用业务逻辑进行处理；&lt;/li>
&lt;li>Web 层用于处理异常、逻辑跳转控制、页面渲染模板等。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/12/21/QxP25D.png" alt="单体架构与微服务对比" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="mvc-三层架构">MVC 三层架构&lt;/h1>
&lt;p>在 Web2.0 时代刚刚流行的时候，互联网应用与企业级应用并没有本质的区别，集中式架构分为标准的三层：数据访问层、服务层和 Web 层。&lt;/p>
&lt;ul>
&lt;li>数据访问层用于定义数据访问接口，实现对真实数据库的访问；&lt;/li>
&lt;li>服务层用于对应用业务逻辑进行处理；&lt;/li>
&lt;li>Web 层用于处理异常、逻辑跳转控制、页面渲染模板等。&lt;/li>
&lt;/ul>
&lt;h1 id="数据访问层">数据访问层&lt;/h1>
&lt;p>这三层之间既可以共享领域模型对象，又可以进行更加细致的拆分。通常的做法是，数据访问层使用实体对象(Entity)，每个实体对象对应数据库中的一条数据。实体对象和值对象（VO）组成领域模型（Domain Model），被服务层使用。而逻辑控制层由于需要和前端的 Web 页面打交道，需要封装大量的表单，因此使用由领域模型转换的数据传输对象（DTO）。服务层是整个系统的核心，它既直接提供公开的 API，也可以通过 Web 层提供 API。服务层同时可以提供部分私有实现，用于屏蔽底层实现细节。数据访问层应该只由服务层直接调用，它无须公开任何公有 API。&lt;/p>
&lt;p>由于 NoSQL 在传统三层架构模型时代还未兴起，因此数据访问层主要是对关系型数据库进行访问。在 Java 开发中，访问关系型数据库要通过统一的接口，即 JDBC。通过 JDBC 可以无缝地切换至不同的数据库。常见的关系型数据库有 Oracle、SQLServer、MySQL 和 DB2 等，这些经典的关系型数据库也一直沿用至今。&lt;/p>
&lt;p>然而存储于关系型数据库的二维关系表格数据与面向对象的域模型并不容易一一映射，因此出现了很多 ORM（Object-Relationship-Mapping）框架。MyBatis 及其前身 IBATIS，JPA 以及它的默认实现 Hibernate，这些都是 ORM 领域中开源框架的翘楚。JPA 是 Java 官方的持久化层规范，其完全以面向对象理念去操作数据库，这种方式虽然设计新颖，但实际用起来却略显笨重。因此，很多互联网公司都采用了更加轻量、可控性更高的 MyBatis 作为 ORM 框架的首选。&lt;/p>
&lt;h1 id="服务层">服务层&lt;/h1>
&lt;p>服务层用于编写应用的具体业务逻辑，它需要一个使用便捷且可以对数据访问层和 Web 层承前启后的框架。Java 官方推荐的 EJB 2.X 过于笨重，其中大量的 XML 配置以及烦琐的部署方式，使得它使用起来非常不便。虽然后来 Sun 公司又推出了 EJB 3.X，在使用上简化了很多，但依然无法成为 Java 开发的标准。&lt;/p>
&lt;p>由 RodJohnson 这位业界大神开发的 Spring Framework，极大地简化了 JavaEE 的开发，它提供的 IOC（控制反转）和 AOP（面向切面编程）特性为开发者提供了便利，并且迅速地成了 Java 后端开发的实际标准。Spring Framework 提供了一个容器，容器中的任何对象都以 Bean 的方式注入，它像胶水一样优雅地粘贴数据访问对象和其他第三方组件，它并不仅仅是一个定位于服务层的框架，而是一个贯穿于应用整个生命周期的生态圈。&lt;/p>
&lt;h1 id="web-层">Web 层&lt;/h1>
&lt;p>Web 层用于分离前端展现和后端服务。由于 Java 的标准实现——Servlet 侵入了大量的 HttpRequest、HttpResponse、HttpSession 等 API，导致基于 Servlet 开发的程序并不适合用于单元测试，而且实现配置、跳转、表单封装等操作时也需要做大量的重复工作，因此，很多 MVC 框架应运而生，用于改善开发流程。&lt;/p>
&lt;p>常见的 MVC 框架有 Strtus1.X，以及基于 WebWork 封装的 Struts 2.X 和 SpringMVC。初期 Struts 系列由于使用简单而备受青睐，后来 Spring 对 MVC 投入的力度越来越大，由于其更加清晰的设计理念以及强大的与 Spring Framework 融合的能力，使得它渐渐成为业界主流。在这种 AllinOne 的集中式架构下，每个开发者都是全栈工程师。由 Spring + Struts（Spring MVC）+Hibernate 组成的 SSH 框架套件，或由 Spring + Struts（SpringMVC）+ IBATIS（MyBatis）组成的 SSI 框架套件，成了技术选型的主流。当时的软件工程方法论主要关注质量保证和设计灵活性，TDD（测试驱动开发）和 DDD（领域驱动开发）也是时常被讨论的话题。&lt;/p></description></item><item><title>微服务</title><link>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</guid><description>&lt;h1 id="微服务">微服务&lt;/h1>
&lt;p>微服务（Microservices Architecture Pattern）由 Martin Fowler 在 2014 年提出的，是希望将某个单一的单体应用，转化为多个可以独立运行、独立开发、独立部署、独立维护的服务或者应用的聚合，从而满足业务快速变化及分布式多团队并行开发的需求。微服务的核心特征可以归纳为：围绕业务能力构建，分散治理，通过服务来实现独立自治的组件，产品化思维，数据去中心化，强终端弱管道，容错性设计，演进式设计，基础设施自动化。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/611142f65132923bf8ca4cd5.png" alt="典型的微服务之间连接" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>微服务与微前端原理和软件工程，面向对象设计中的原理同样相通，都是遵循单一职责(Single Responsibility)、关注分离(Separation of Concerns)、模块化(Modularity)与分而治之(Divide &amp;amp; Conquer)等基本的原则。同样如康威定律（Conway’s Law）所言，任何组织在设计一套系统（广义概念）时，所交付的设计方案在结构上都与该组织的通信结构保持一致，微服务与微前端不仅仅是技术架构的变化，还包含了组织方式、沟通方式的变化。&lt;/p>
&lt;h1 id="单体架构到微服务">单体架构到微服务&lt;/h1>
&lt;p>在单体架构中，也有一些方式来隔离代码和数据。例如，我们可以将模块隔离成单独的包、构建模块和源码仓库，这些模块可以由不同的团队所拥有。通过将表按照命名规则、模式、数据库实例，甚至数据库服务器的方式进行分组，我们可以实现数据的部分隔离。下图来源于 Axel Fontaine 关于伟大的模块化单体的演讲，它阐述了应用中不同的代码和数据隔离级别。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/61f251912ab3f51d91a06c8e.jpg" alt="应用程序的代码和数据隔离级别" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>云原生</title><link>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/%E4%BA%91%E5%8E%9F%E7%94%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/microcn-series/1.%E6%9C%8D%E5%8A%A1%E5%8C%96%E6%9E%B6%E6%9E%84/1.%E6%9E%B6%E6%9E%84%E5%8F%98%E8%BF%81/%E4%BA%91%E5%8E%9F%E7%94%9F/</guid><description>&lt;h1 id="云原生">云原生&lt;/h1></description></item></channel></rss>