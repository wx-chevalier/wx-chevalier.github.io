<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>系统进程 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/node-series/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/</link><atom:link href="https://ng-tech.icu/books/node-series/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><description>系统进程</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>系统进程</title><link>https://ng-tech.icu/books/node-series/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/</link></image><item><title>多进程架构</title><link>https://ng-tech.icu/books/node-series/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/node-series/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</guid><description>&lt;h1 id="nodejs-多进程架构">Node.js 多进程架构&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-use-multithreading-in-node-js" target="_blank" rel="noopener">How To Use Multithreading in Node.js&lt;/a>: In this tutorial, you’ll create a Node.js app with a CPU-intensive task that blocks the main thread. Next, you will use the worker-threads module to offload the CPU-intensive task to another thread to avoid blocking the main thread. Finally, you will divide the CPU-bound task and have four threads work on it in parallel to speed up the task.&lt;/li>
&lt;/ul></description></item><item><title>命令执行</title><link>https://ng-tech.icu/books/node-series/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/node-series/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%B3%BB%E7%BB%9F%E8%BF%9B%E7%A8%8B/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</guid><description>&lt;h1 id="sysproc">SysProc&lt;/h1>
&lt;h1 id="system">System&lt;/h1>
&lt;h2 id="内置的-process-对象">内置的 process 对象&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://javascript.ruanyifeng.com/nodejs/process.html" target="_blank" rel="noopener">process 对象&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>process&lt;/code>对象是 Node 的一个全局对象，提供当前 Node 进程的信息。它可以在脚本的任意位置使用，不必通过&lt;code>require&lt;/code>命令加载。该对象部署了&lt;code>EventEmitter&lt;/code>接口。进程退出时，会返回一个整数值，表示退出时的状态。这个整数值就叫做退出码。下面是常见的 Node 进程退出码。&lt;/p>
&lt;ul>
&lt;li>0，正常退出&lt;/li>
&lt;li>1，发生未捕获错误&lt;/li>
&lt;li>5，V8 执行错误&lt;/li>
&lt;li>8，不正确的参数&lt;/li>
&lt;li>128 + 信号值，如果 Node 接受到退出信号(比如 SIGKILL 或 SIGHUP)，它的退出码就是 128 加上信号值。由于 128 的二进制形式是 10000000, 所以退出码的后七位就是信号值。&lt;/li>
&lt;/ul>
&lt;p>process 对象提供一系列属性，用于返回系统信息。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>process.argv&lt;/strong>：返回当前进程的命令行参数数组。&lt;/li>
&lt;li>&lt;strong>process.env&lt;/strong>：返回一个对象，成员为当前 Shell 的环境变量，比如&lt;code>process.env.HOME&lt;/code>。&lt;/li>
&lt;li>&lt;strong>process.installPrefix&lt;/strong>：node 的安装路径的前缀，比如&lt;code>/usr/local&lt;/code>，则 node 的执行文件目录为&lt;code>/usr/local/bin/node&lt;/code>。&lt;/li>
&lt;li>&lt;strong>process.pid&lt;/strong>：当前进程的进程号。&lt;/li>
&lt;li>&lt;strong>process.platform&lt;/strong>：当前系统平台，比如 Linux。&lt;/li>
&lt;li>&lt;strong>process.title&lt;/strong>：默认值为“node”，可以自定义该值。&lt;/li>
&lt;li>&lt;strong>process.version&lt;/strong>：Node 的版本，比如 v0.10.18。&lt;/li>
&lt;/ul>
&lt;p>process 对象提供以下方法：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>process.chdir()&lt;/strong>：切换工作目录到指定目录。&lt;/li>
&lt;li>&lt;strong>process.cwd()&lt;/strong>：返回运行当前脚本的工作目录的路径。&lt;/li>
&lt;li>&lt;strong>process.exit()&lt;/strong>：退出当前进程。&lt;/li>
&lt;li>&lt;strong>process.getgid()&lt;/strong>：返回当前进程的组 ID(数值)。&lt;/li>
&lt;li>&lt;strong>process.getuid()&lt;/strong>：返回当前进程的用户 ID(数值)。&lt;/li>
&lt;li>&lt;strong>process.nextTick()&lt;/strong>：指定回调函数在当前执行栈的尾部、下一次 Event Loop 之前执行。&lt;/li>
&lt;li>&lt;strong>process.on()&lt;/strong>：监听事件。&lt;/li>
&lt;li>&lt;strong>process.setgid()&lt;/strong>：指定当前进程的组，可以使用数字 ID，也可以使用字符串 ID。&lt;/li>
&lt;li>&lt;strong>process.setuid()&lt;/strong>：指定当前进程的用户，可以使用数字 ID，也可以使用字符串 ID。&lt;/li>
&lt;/ul>
&lt;h2 id="shell-commands系统命令执行">Shell Commands(系统命令执行)&lt;/h2>
&lt;h3 id="windows">Windows&lt;/h3>
&lt;pre tabindex="0">&lt;code>var theJobType = &amp;#39;FOO&amp;#39;;
var exec = require(&amp;#39;child_process&amp;#39;).exec;
var child = exec(&amp;#39;Test.exe &amp;#39; + theJobType, function( error, stdout, stderr)
{
if ( error != null ) {
console.log(stderr);
// error handling &amp;amp; exit
}
// normal
});
&lt;/code>&lt;/pre>&lt;h3 id="unix-shelljshttpsgithubcomshelljsshelljs">Unix-&lt;a href="https://github.com/shelljs/shelljs" target="_blank" rel="noopener">shelljs&lt;/a>&lt;/h3>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://www.cnblogs.com/chyingp/p/node-learning-guide-child_process.html" target="_blank" rel="noopener">Nodejs 进阶：如何玩转子进程(child_process)&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>