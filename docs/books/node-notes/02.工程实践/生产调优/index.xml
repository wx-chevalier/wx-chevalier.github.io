<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>生产调优 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/</link>
      <atom:link href="https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/index.xml" rel="self" type="application/rss+xml" />
    <description>生产调优</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>生产调优</title>
      <link>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/</link>
    </image>
    
    <item>
      <title>安全加固</title>
      <link>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/%E5%AE%89%E5%85%A8%E5%8A%A0%E5%9B%BA/</guid>
      <description>&lt;h1 id=&#34;http-headers&#34;&gt;HTTP Headers&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Listening on http://localhost:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helmet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;helmet&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helmet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;express&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;express&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`Listening on http://localhost:&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PORT&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We’ll start by adding and removing a few HTTP headers that will help improve our security. To inspect these headers you can use a tool like curl by running:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;curl&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//localhost:3000 --include
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.1&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OK&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Powered&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;By&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Express&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;utf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;ETag&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;W&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;14-SsoazAISF4H46953FT6rSL7/tvU&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Wed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;01&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Nov&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2017&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;GMT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;keep&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;alive&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One header that you should keep an eye on is X-Powered-By. Generally speaking headers that start with X- are non-standard headers. This one gives away which framework you are using. For an attacker, this cuts the attack space down for them as they can concentrate on the known vulnerabilities in that framework.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;helmet&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;helmet&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;helmet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now add the helmet middleware to your application. Modify the index.js accordingly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;curl http://localhost:3000 --inspect
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;HTTP/1.1 &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X-DNS-Prefetch-Control: off
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X-Frame-Options: SAMEORIGIN
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Strict-Transport-Security: max-age&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;15552000&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; includeSubDomains
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X-Download-Options: noopen
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X-Content-Type-Options: nosniff
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;X-XSS-Protection: 1&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;block
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Type: text/html&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;utf-8
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Content-Length: &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ETag: W/&lt;span class=&#34;s2&#34;&gt;&amp;#34;14-SsoazAISF4H46953FT6rSL7/tvU&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Date: Wed, &lt;span class=&#34;m&#34;&gt;01&lt;/span&gt; Nov &lt;span class=&#34;m&#34;&gt;2017&lt;/span&gt; 13:50:42 GMT
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Connection: keep-alive
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;X-Powered-By&lt;/code&gt; header is gone, which is a good start, but now we have a bunch of new headers.&lt;/p&gt;
&lt;h2 id=&#34;x-dns-prefetch-control&#34;&gt;X-DNS-Prefetch-Control&lt;/h2&gt;
&lt;p&gt;This header isn’t much of an added security benefit as much as an added privacy benefit. By setting the value to &lt;code&gt;off&lt;/code&gt; it turns off the DNS lookups that the browser does for URLs in the page. The DNS lookups are done for performance improvements and according to MDN they can &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-DNS-Prefetch-Control&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;improve the performance of loading images by 5% or more&lt;/a&gt;. However this look up can make it appear like the user visited things they never visited.&lt;/p&gt;
&lt;p&gt;The default for this is &lt;code&gt;off&lt;/code&gt; but if you care about the added performance benefit you can enable it by passing &lt;code&gt;{ dnsPrefetchControl: { allow: true }}&lt;/code&gt; to the &lt;code&gt;helmet()&lt;/code&gt; call.&lt;/p&gt;
&lt;h2 id=&#34;x-frame-options&#34;&gt;X-Frame-Options&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;X-Frame-Options&lt;/code&gt; allows you to control whether the page can be loaded in a frame like &lt;code&gt;&amp;lt;frame/&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;iframe/&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;object/&amp;gt;&lt;/code&gt;. Unless you really need to frame your page you should just disable it entirely by passing the option to the &lt;code&gt;helmet()&lt;/code&gt;call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;use&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;helmet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;frameguard&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;deny&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://caniuse.com/#feat=x-frame-options&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;X-Frame-Options&lt;/code&gt; is supported by all modern browsers&lt;/a&gt;. It can however also be controlled via a Content Security Policy as we’ll see later.&lt;/p&gt;
&lt;h2 id=&#34;strict-transport-security&#34;&gt;Strict-Transport-Security&lt;/h2&gt;
&lt;p&gt;This is also known as HSTS (HTTP Strict Transport Security) and is used to ensure that there is no protocol downgrade when you are using HTTPS. If a user visited the website once on HTTPS it makes sure that the browser will not allow any future communication via HTTP. This feature is helpful to avoid Man-In-The-Middle attacks.&lt;/p&gt;
&lt;p&gt;You might have seen this feature in action if you tried to access a page like &lt;a href=&#34;https://google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://google.com&lt;/a&gt; while being on a public WiFi with a captive portal. The WiFi is trying to redirect you to their captive portal but since you visited &lt;code&gt;google.com&lt;/code&gt;before via HTTPS and it set the &lt;code&gt;Strict-Transport-Security&lt;/code&gt; header, the browser will block this redirect.&lt;/p&gt;
&lt;p&gt;You can read more about it on the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MDN page&lt;/a&gt; or the &lt;a href=&#34;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OWASP wiki page&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;x-download-options&#34;&gt;X-Download-Options&lt;/h2&gt;
&lt;p&gt;This header is only protecting you from an old IE security vulnerability. Basically if you host untrusted HTML files for download, users were able open these directly (rather than saving them to disk first) and they would execute in the context of your app. This header ensures that users download files before they open them so that they can’t execute in your app’s security context.&lt;/p&gt;
&lt;p&gt;You can find more information about this on the &lt;a href=&#34;https://helmetjs.github.io/docs/ienoopen/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;helmet page&lt;/a&gt; and this &lt;a href=&#34;https://blogs.msdn.microsoft.com/ie/2008/07/02/ie8-security-part-v-comprehensive-protection/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MSDN blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;x-content-type-options&#34;&gt;X-Content-Type-Options&lt;/h2&gt;
&lt;p&gt;Some browsers perform “MIME sniffing” meaning that rather than loading things based on the &lt;code&gt;Content-Type&lt;/code&gt; that the server will send, the browser will try to determine the content type based on the file content and execute it based on that.&lt;/p&gt;
&lt;p&gt;Say your page offers a way to upload pictures and an attacker uploads some HTML instead, if the browser performs MIME sniffing, it could execute the code as HTML and the attacker would have performed a successful XSS attack.&lt;/p&gt;
&lt;p&gt;By setting this header to &lt;code&gt;nosniff&lt;/code&gt; we are disabling this MIME sniffing.&lt;/p&gt;
&lt;h2 id=&#34;x-xss-protection&#34;&gt;X-XSS-Protection&lt;/h2&gt;
&lt;p&gt;This header is used to turn on basic XSS protections in the user’s browser. It can’t avoid every XSS opportunity but it can determine basic ones. For example, if it detects that the query string contains something like a script tag, the browser could block the execution of the same code in the page knowing that it’s likely an XSS attack. This header can have three different values. &lt;code&gt;0&lt;/code&gt;, &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;1; mode=block&lt;/code&gt;. If you want to learn more about which mode you should choose, make sure to &lt;a href=&#34;https://blog.innerht.ml/the-misunderstood-x-xss-protection/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;check out this blog post about &lt;code&gt;X-XSS-Protection&lt;/code&gt; and it’s potential dangers&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>吞吐量优化</title>
      <link>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/%E5%90%9E%E5%90%90%E9%87%8F%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/%E5%90%9E%E5%90%90%E9%87%8F%E4%BC%98%E5%8C%96/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25276558&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多个提高 Node.js 应用吞吐量的小优化技巧介绍&lt;/a&gt;翻译自 InfoQ 英文站的 &lt;a href=&#34;https://www.infoq.com/articles/node-micro-optimizations-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-micro-optimizations-javascript&lt;/a&gt; 一文，从属于笔者的&lt;a href=&#34;https://github.com/wx-chevalier/Web-Frontend-Introduction-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 前端入门与工程实践&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;多个提高-nodejs-应用吞吐量的小优化技巧介绍&#34;&gt;多个提高 Node.js 应用吞吐量的小优化技巧介绍&lt;/h1&gt;
&lt;h2 id=&#34;内容提点&#34;&gt;内容提点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尽可能地使用聚合 IO 操作，以批量写的方式来最小化系统调用的次数。&lt;/li&gt;
&lt;li&gt;需要将发布的开销考虑进内，清除应用中不同的定时器。&lt;/li&gt;
&lt;li&gt;CPU 分析器能够给你提高一些有用信息，但是并不能完整地反馈整个流程。&lt;/li&gt;
&lt;li&gt;谨慎使用 ECMAScript 高级语法，特别是你还未使用最新的 JavaScript 引擎或者类似于 Babel 这样的转换器的时候。&lt;/li&gt;
&lt;li&gt;要洞察你的依赖树的组成并且对你使用的依赖进行适当的性能评测&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们希望去优化某个包含了 IO 功能的应用性能时，我们需要对于应用耗费的 CPU 周期以及那些妨碍到应用并行化执行的因素了如指掌。本文则是分享我在提升 Apache Cassandra 项目中的&lt;a href=&#34;https://github.com/datastax/nodejs-driver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DataStax Node.js 驱动&lt;/a&gt;时的一些思考与总结出的导致应用吞吐量降级的关键因素。&lt;/p&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;Node.js 使用的标准 JavaScript 引擎 V8 会将 JavaScript 代码编译为机器码然后以本地代码的方式运行。V8 引擎使用了如下三个组件来同时保证较低的启动时间与最佳性能表现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能够快速将 JavaScript 代码编译为机器码的通用编译器。&lt;/li&gt;
&lt;li&gt;能够自动追踪应用中代码执行时间并且决定应该优化哪些代码模块的运行时分析器。&lt;/li&gt;
&lt;li&gt;能够自动优化被分析器标注的待优化代码的优化编译器；并且如果操作被认为是过优化，该编译器还能自动地进行逆优化操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;尽管优化编译器能够保证最佳的性能表现，但是它并不会对所有的代码进行优化，特别是那些不合适的代码编写模式。你可以参考&lt;a href=&#34;https://github.com/GoogleChrome/devtools-docs/issues/53&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 Google Chrome DevTools 团队的建议&lt;/a&gt;来了解哪些代码模式是 V8 拒绝优化的，典型的包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含&lt;code&gt;try-catch&lt;/code&gt;语句的函数&lt;/li&gt;
&lt;li&gt;使用&lt;code&gt;arguments&lt;/code&gt;对象对函数参数进行重新赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然优化编译器能够显著提升代码允许速度，但是对于典型的 IO 密集型的应用，大部分的性能优化还是依赖于指令重排以及避免高占用的调用来提高每秒的操作执行数目；这也会是我们在接下来的章节中需要讨论的部分。&lt;/p&gt;
&lt;h1 id=&#34;测试基准&#34;&gt;测试基准&lt;/h1&gt;
&lt;p&gt;为了能够更好地发现那些可以惠及最多用户的优化技巧，我们需要模拟真实用户场景，根据常用任务执行的工作量来定义测试基准。首先我们需要测试 API 入口点的吞吐量与时延；除此之外如果希望获取更多的信息，你也可以选择对于内部调用方法进行性能评测。推荐使用&lt;code&gt;process.hrtime()&lt;/code&gt;来获取实时解析与执行时长。虽然可能会对项目开发造成些许不便，但我还是建议尽可能早地在开发周期中引入性能评测。可以选择先从一些方法调用进行吞吐量测试，然后再慢慢地增加譬如时延分布这些相对复杂的测试。&lt;/p&gt;
&lt;h1 id=&#34;cpu-分析&#34;&gt;CPU 分析&lt;/h1&gt;
&lt;p&gt;目前有多种 CPU 分析器可供我们使用，其中 Node.js 本身提供的开箱即用的 CPU 分析器已经能应付大部分的使用场景。&lt;a href=&#34;https://nodejs.org/en/docs/guides/simple-profiling/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;内建的 Node.js 分析器&lt;/a&gt;源于 V8 内置的分析器，它能够以固定地频率对栈信息进行采样；你可以在运行 node 命令时使用&lt;code&gt;--prof&lt;/code&gt;参数来创建 V8 标记文件。然后你可以对分析结果进行聚合转化处理，通过使用&lt;code&gt;--prof-process&lt;/code&gt;参数将其转化为可读性更好的文本：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ node --prof-process isolate-0xnnnnnnnnnnnn-v8.log &amp;gt; processed.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在编辑器中打开经过处理的记录文件，你可以看到整个记录被划分为了部分，首先我们来看下&lt;code&gt;Summary&lt;/code&gt;部分，其格式如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; [Summary]:

  ticks   total   nonlib  name

  20109   41.2%   45.7%  JavaScript

  23548   48.3%   53.5%  C++

    805    1.7%    1.8%  GC

   4774    9.8%          Shared libraries

    356    0.7%          Unaccounted
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的值分别代表了在 JavaScript/C++代码以及垃圾收集器中的采样频次，其会随着分析代码的不同而变化。然后你可以根据需要分别查看具体的子部分(譬如[JavaScript], [C++], &amp;hellip;)来了解具体的采样信息。除此之外，分析文件中还包含一个叫做&lt;code&gt;[Bottom up (heavy) profile]&lt;/code&gt;的非常有用的部分，它以树形结构展示了买个函数的调用者，其基本格式如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;223  32%      LazyCompile: *function1 lib/file1.js:223:20

221  99%        LazyCompile: ~function2 lib/file2.js:70:57

221  100%         LazyCompile: *function3 /lib/file3.js:58:74
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的百分比代表该层调用者占目标函数所有调用者数目的比重，而函数之前的星号意味着该函数是经过优化处理的，而波浪号代表该函数是未经过优化的。在上面的例子中，&lt;code&gt;function1&lt;/code&gt;99%的调用是由&lt;code&gt;function2&lt;/code&gt;发起的，而&lt;code&gt;function3&lt;/code&gt;占据了&lt;code&gt;function2&lt;/code&gt;100%的调用占比。CPU 分析结果与&lt;a href=&#34;http://www.brendangregg.com/blog/2014-09-17/node-flame-graphs-on-linux.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;火焰图&lt;/a&gt;是非常有用的分析栈占用与 CPU 耗时的工具。不过需要注意的是，这些分析结果并不意味着全部，大量的异步 IO 操作会让分析变得不那么容易。&lt;/p&gt;
&lt;h1 id=&#34;系统调用&#34;&gt;系统调用&lt;/h1&gt;
&lt;p&gt;Node.js 利用 Libuv 提供的平台无关的接口来实现非阻塞型 IO，应用程序中所有的 IO 操作(sockets, 文件系统, &amp;hellip;)都会被转化为系统调用。而调度这些系统调用会耗费大量的时间，因此我们需要尽可能地聚合 IO 操作，以批量写的方式来最小化系统调用的次数。具体而言，我们应该将 Socket 或者文件流放入到缓冲中然后一次性处理而不是对每个操作进行单独处理。你可以使用写队列来管理你的所有写操作，常用的写队列的实现逻辑如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当我们需要进行写操作并且在某个处理窗口期内：
&lt;ul&gt;
&lt;li&gt;将该缓冲区添加到待写列表中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;连接所有的缓冲区并且一次性的写入到目标管道中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以基于总的缓冲区长度或者第一个元素进入队列的时间来定义窗口尺寸，不过在定义窗口尺寸时我们需要权衡考虑单个写操作的时延与整体写操作的时延，不能厚此薄彼。你也需要同时考虑能够聚合的写操作的最大数目以及单个写请求的开销。你可能会以千字节为单位决定一个写队列的上限，我们的经验发现 8 千字节左右是个不错的临界点；当然根据你应用的具体场景这个值肯定会有变化，你可以参考&lt;a href=&#34;https://github.com/datastax/nodejs-driver/blob/v3.1.6/lib/writers.js#L159&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我们的这个写队列的完整实现&lt;/a&gt;。总结而言，当我们采用了批量写之后系统调用的数目大大降低了，最终提升了应用的整体吞吐量。&lt;/p&gt;
&lt;h1 id=&#34;nodejs-定时器&#34;&gt;Node.js 定时器&lt;/h1&gt;
&lt;p&gt;Node.js 中的定时器与 window 中的定时器具有相同的 API，可以很方便地实现简单的调度操作；在整个生态系统中有很广泛的应用，因此我们的应用中可能充斥着大量的延时调用。类似于其他&lt;a href=&#34;http://cseweb.ucsd.edu/users/varghese/PAPERS/twheel.ps.Z&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于哈希的轮转调度器&lt;/a&gt;，Node.js 使用哈希表与链表来维护定时器实例。不过有别于其他的轮转调度器，Node.js 并没有维持固定长度的哈希表，而是根据触发时间对定时器建立索引。添加新的定时器实例时，如果 Node.js 发现已经存在了相同的键值(有相同触发事件的定时器)，那么会以 O(1)复杂度完成添加操作。如果还不存在该键值，则会创建新的桶然后将定时器添加到该桶中。需要铭记于心的是，我们应该尽可能地重用已存在的定时器存放桶，避免移除整个桶然后再创建一个新的这种耗时的操作。举例而言，如果你使用滑动延时，那么应该在使用&lt;code&gt;clearTimeout()&lt;/code&gt;移除定时器之前使用&lt;code&gt;setTimeout()&lt;/code&gt;创建新的定时器。我们对于心跳包的处理中在移除上一个定时器之前会先确定下以 O(1)复杂度调度空闲的定时器。&lt;/p&gt;
&lt;h1 id=&#34;ecmascript-语言特性&#34;&gt;Ecmascript 语言特性&lt;/h1&gt;
&lt;p&gt;当我们着眼于整体的性能保障时，我们需要避免使用部分 Ecmascript 中的高级语言特性，典型的譬如:&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_objects/Function/bind&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Function.prototype.bind()&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Object.defineProperty()&lt;/a&gt; 以及 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Object.defineProperties()&lt;/a&gt;。我们可以在 JavaScript 引擎的实现描述或者问题中发现这些特性的性能缺陷所在，譬如&lt;a href=&#34;http://v8project.blogspot.com.es/2016/07/v8-release-53.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Improvement in &lt;/a&gt;&lt;a href=&#34;http://v8project.blogspot.com.es/2016/07/v8-release-53.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Promise&lt;/a&gt;&lt;a href=&#34;http://v8project.blogspot.com.es/2016/07/v8-release-53.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; performance in V8 5.3&lt;/a&gt; 以及 &lt;a href=&#34;http://benediktmeurer.de/2015/12/25/a-new-approach-to-function-prototype-bind/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Function.prototype.bind&lt;/a&gt;&lt;a href=&#34;http://benediktmeurer.de/2015/12/25/a-new-approach-to-function-prototype-bind/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; performance in V8 5.4&lt;/a&gt;。另外你也需要谨慎使用 ES2015 或者 ESNext 中的新的语言特性，它们相较于 ECMAScript 5 中的语法会慢很多。&lt;a href=&#34;https://fhinkel.github.io/six-speed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;six-speed 项目网站&lt;/a&gt;就追踪了这些语言特性在不同的 JavaScript 引擎上的性能表现，如果你尚未发现某些特性的性能评测你也可以自己进行一些测试。V8 团队也一直致力于提高新的语言特性的性能表现，最终使其与底层实现保持一致。我们可以在&lt;a href=&#34;https://docs.google.com/document/d/1EA9EbfnydAmmU_lM8R_uEMQ-U_v4l9zulePSBkeYWmY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;性能规划&lt;/a&gt;中随时了解他们对于 ES2015 性能优化的工作进展，这里他们会收集使用者对于提升点的建议并且发布新的设计文档来阐述他们的解决方案。你也可以在&lt;a href=&#34;http://v8project.blogspot.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这个博客&lt;/a&gt;随时了解 V8 的实现进展，不过考虑到 V8 的提升可能需要较长的时间才能合并入 LTS 版本的 Node.js: 根据&lt;a href=&#34;https://github.com/nodejs/LTS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LTS 规划&lt;/a&gt;只有在 Node.js 大版本迭代时才会合并进最新的 V8 版本。你可能要等待 6-12 月才能发现新的 V8 引擎被合并进入 Node.js 的运行环境中，而目前 Node.js 的新的发布版本只会包含&lt;a href=&#34;https://nodejs.org/en/download/releases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 引擎中的部分修复&lt;/a&gt;。&lt;/p&gt;
&lt;h1 id=&#34;依赖&#34;&gt;依赖&lt;/h1&gt;
&lt;p&gt;Node.js 运行时为我们提供了完整的 IO 操作库，但是 ECMAScript 语法标准则仅提供了寥寥无几的内建数据类型，很多时候我们不得不依赖第三方的库来进行某些基本任务。没有人能保证这些第三方的库可以准确高效地工作，即使那些流行的明星模块也可能存在问题。Node.js 的生态系统是如此的繁荣茂盛，可能很多依赖模块中只包含几个你自己很方便就能实现的方法。我们需要在重复造轮子的代价与依赖带来的性能不可控之间做一个权衡。我们团队会尽可能地避免引入新的依赖，并且对所有的依赖持保守态度。不过对于&lt;a href=&#34;https://github.com/petkaantonov/bluebird/blob/master/docs/docs/benchmarks.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bluebird&lt;/a&gt;这样本身发布了可信赖的性能评测的库我们是很欢迎的。我们的项目中使用&lt;a href=&#34;https://github.com/caolan/async&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;async&lt;/a&gt;来处理异步操作，在代码库中广泛地使用了&lt;a href=&#34;https://caolan.github.io/async/docs.html#series&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;async.series()&lt;/a&gt;, &lt;a href=&#34;https://caolan.github.io/async/docs.html#waterfall&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;async.waterfall()&lt;/a&gt; 以及 &lt;a href=&#34;https://caolan.github.io/async/docs.html#whilst&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;async.whilst()&lt;/a&gt;。确实我们很难说这样连接了多个层次的异步处理库就是性能受损的罪魁祸首，幸好有很多其他开发者定位了其中存在的问题。我们也可以选择类似于&lt;a href=&#34;https://github.com/suguru03/neo-async&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;neo-async&lt;/a&gt;这样的替代库，它的运行效率明显提高并且也有公开的性能评测结果。&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;本文中提及的优化技巧有的属于常识，有的则是涉及到 Node.js 生态系统以及 JavaScript 核心引擎的实现细节与工作原理。在我们开发的客户端驱动中，通过引入这些优化手段我们达成了两倍的吞吐量的提升。考虑到我们的 Node.js 应用以单线程方式运行，我们应用占据 CPU 的时间片与指令的排布顺序会大大影响整体的吞吐量与高平行的实现程度。&lt;/p&gt;
&lt;h1 id=&#34;关于作者&#34;&gt;关于作者&lt;/h1&gt;
&lt;p&gt;Jorge Bay 是 Apache Cassandra 项目中 Node.js 以及 C#客户端驱动的核心工程师，同时还是 DataStax 的 DSE。他乐于解决问题与提供服务端解决方案，Jorge 拥有超过 15 年的专业软件开发经验，他为 Apache Cassandra 实现的 Node.js 客户端驱动同样也是 DataStax 官方驱动的基础&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>性能优化</title>
      <link>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/node-notes/02.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E7%94%9F%E4%BA%A7%E8%B0%83%E4%BC%98/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
