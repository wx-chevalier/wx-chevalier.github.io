<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Express | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/</link><atom:link href="https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/index.xml" rel="self" type="application/rss+xml"/><description>Express</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Express</title><link>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/</link></image><item><title>快速开始</title><link>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</guid><description>&lt;h1 id="express-快速开始">Express 快速开始&lt;/h1></description></item><item><title>路由与请求处理</title><link>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86/</guid><description>&lt;h1 id="express-中路由与请求处理">Express 中路由与请求处理&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">fs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;fs&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">http&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">https&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;https&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">privateKey&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sslcert/server.key&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;utf8&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">certificate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFileSync&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;sslcert/server.crt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;utf8&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">credentials&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">key&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">privateKey&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cert&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">certificate&lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">express&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;express&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">app&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">express&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">req&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">res&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">res&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 其他的 Express 配置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">httpServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">http&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">app&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">httpsServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">https&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createServer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">credentials&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">httpServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8080&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">httpsServer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">listen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">8443&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="hello-world">Hello World&lt;/h1>
&lt;p>首先假定你已经安装了 &lt;a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js&lt;/a>，接下来为你的应用创建一个目录，然后进入此目录并将其作为当前工作目录。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ mkdir myapp
$ cd myapp
&lt;/code>&lt;/pre>&lt;p>通过 &lt;code>npm init&lt;/code> 命令为你的应用创建一个 &lt;code>package.json&lt;/code> 文件。欲了解 &lt;code>package.json&lt;/code> 是如何起作用的，请参考 &lt;a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">Specifics of npm’s package.json handling&lt;/a>。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ npm init
&lt;/code>&lt;/pre>&lt;p>此命令将要求你输入几个参数，例如此应用的名称和版本。你可以直接按“回车”键接受默认设置即可，下面这个除外：&lt;/p>
&lt;pre tabindex="0">&lt;code>entry point: (index.js)
&lt;/code>&lt;/pre>&lt;p>键入 &lt;code>app.js&lt;/code> 或者你所希望的名称，这是当前应用的入口文件。如果你希望采用默认的 &lt;code>index.js&lt;/code> 文件名，只需按“回车”键即可。接下来安装 Express 并将其保存到依赖列表中：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ npm install express --save
&lt;/code>&lt;/pre>&lt;p>如果只是临时安装 Express，不想将它添加到依赖列表中，只需略去 &lt;code>--save&lt;/code> 参数即可：&lt;/p>
&lt;h2 id="helloworld">HelloWorld&lt;/h2>
&lt;pre tabindex="0">&lt;code>var express = require(&amp;#39;express&amp;#39;);
var app = express();
app.get(&amp;#39;/&amp;#39;, function (req, res) {
res.send(&amp;#39;Hello World!&amp;#39;);
});
var server = app.listen(3000, function () {
var host = server.address().address;
var port = server.address().port;
console.log(&amp;#39;Example app listening at http://%s:%s&amp;#39;, host, port);
});
&lt;/code>&lt;/pre>&lt;p>上面的代码启动一个服务并监听从 3000 端口进入的所有连接请求。他将对所有 (/) URL 或路由 返回 “Hello World!” 字符串。对于其他所有路径全部返回 404 Not Found。&lt;/p>
&lt;h2 id="hot-reload">Hot Reload&lt;/h2>
&lt;pre tabindex="0">&lt;code>var express = require(&amp;#39;express&amp;#39;)
var app = express()
var chokidar = require(&amp;#39;chokidar&amp;#39;)
var watcher = chokidar.watch(&amp;#39;./app&amp;#39;)
watcher.on(&amp;#39;ready&amp;#39;, function() {
watcher.on(&amp;#39;all&amp;#39;, function() {
console.log(&amp;#34;Clearing /dist/ module cache from server&amp;#34;)
Object.keys(require.cache).forEach(function(id) {
if (/[\/\\]app[\/\\]/.test(id)) delete require.cache[id]
})
})
})
app.use(function (req, res, next) {
require(&amp;#39;./app/index&amp;#39;)(req, res, next)
})
app.listen(9000)
&lt;/code>&lt;/pre>&lt;p>如果你希望在生产环境下不进行热加载，那么可以通过判断 NODE_ENV 的方式:&lt;/p>
&lt;pre tabindex="0">&lt;code>var production = process.env.NODE_ENV === &amp;#39;production&amp;#39;
if(!production) {
var chokidar = require(&amp;#39;chokidar&amp;#39;)
var watcher = chokidar.watch(&amp;#39;./dist&amp;#39;)
watcher.on(&amp;#39;ready&amp;#39;, function() {
watcher.on(&amp;#39;all&amp;#39;, function() {
console.log(&amp;#34;Clearing /dist/ module cache from server&amp;#34;)
Object.keys(require.cache).forEach(function(id) {
if (/[\/\\]dist[\/\\]/.test(id)) delete require.cache[id]
})
})
})
}
&lt;/code>&lt;/pre>&lt;h1 id="路由">路由&lt;/h1>
&lt;h2 id="静态路由">静态路由&lt;/h2>
&lt;h1 id="中间件">中间件&lt;/h1>
&lt;h1 id="调试与发布">调试与发布&lt;/h1>
&lt;h2 id="应用调试">应用调试&lt;/h2>
&lt;h2 id="进程管理">进程管理&lt;/h2>
&lt;h2 id="状态监控">状态监控&lt;/h2>
&lt;p>借鉴了&lt;a href="https://github.com/RafalWilinski/express-status-monitor" target="_blank" rel="noopener">express-status-monitor&lt;/a>:&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://camo.githubusercontent.com/1920f24ec0da485299d076cacc5a2606d0c6a7e3/687474703a2f2f692e696d6775722e636f6d2f4148697a4557712e676966" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>中间件</title><link>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/node-notes/03.%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8/express/%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid><description>&lt;h1 id="express-中间件使用与开发">Express 中间件使用与开发&lt;/h1></description></item></channel></rss>