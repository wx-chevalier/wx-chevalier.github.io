<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术栈 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/node-notes/04.%E5%85%A8%E6%A0%88%E4%B8%8E-graphql/%E6%8A%80%E6%9C%AF%E6%A0%88/</link>
      <atom:link href="https://ng-tech.icu/books/node-notes/04.%E5%85%A8%E6%A0%88%E4%B8%8E-graphql/%E6%8A%80%E6%9C%AF%E6%A0%88/index.xml" rel="self" type="application/rss+xml" />
    <description>技术栈</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>技术栈</title>
      <link>https://ng-tech.icu/books/node-notes/04.%E5%85%A8%E6%A0%88%E4%B8%8E-graphql/%E6%8A%80%E6%9C%AF%E6%A0%88/</link>
    </image>
    
    <item>
      <title>JAM Stack</title>
      <link>https://ng-tech.icu/books/node-notes/04.%E5%85%A8%E6%A0%88%E4%B8%8E-graphql/%E6%8A%80%E6%9C%AF%E6%A0%88/jam-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/node-notes/04.%E5%85%A8%E6%A0%88%E4%B8%8E-graphql/%E6%8A%80%E6%9C%AF%E6%A0%88/jam-stack/</guid>
      <description>&lt;h1 id=&#34;jamstack&#34;&gt;JAMStack&lt;/h1&gt;
&lt;p&gt;JAMStack 即基于客户端 JavaScript，可重用 API 和预先构建 Markup 的现代 Web 开发架构。当我们谈论“堆栈”时，我们不再谈论操作系统，特定 Web JAMStack 与特定技术无关。这是一种构建网站和应用程序的新方法，可提供更好的性能，更高的安全性，更低的扩展成本以及更好的开发人员体验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;J(JavaScript):请求/响应周期中的任何动态编程都由 JavaScript 处理，完全在客户端上运行。这可以是任何前端框架，库，甚至是 vanilla JavaScript。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A(APIs):所有服务器端进程或数据库操作都被抽象为可重用的 API，通过 HTTPS 使用 JavaScript 进行访问。这些可以是定制的或利用第三方服务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;M(Markup):模板化标记应该在部署时预先构建，通常使用内容站点的站点生成器或 Web 应用程序的构建工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依赖于客户端和服务器之间紧密耦合的任何项目都不是使用 JAMStack 构建的。这将包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用服务器端 CMS 构建的站点，如 WordPress，Drupal，Joomla 或 Squarespace。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个单片服务器运行的 Web 应用程序，它依赖于 Ruby，Node 或其他后端语言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;单页应用程序，使用同构呈现在运行时在服务器上构建视图。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;背景特性&#34;&gt;背景特性&lt;/h1&gt;
&lt;p&gt;为何选择 JAMStack？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;更好的性能：为什么要在部署时生成页面，等待页面动态构建？当谈到最小化第一个字节的时间时，没有什么能比通过 CDN 提供的预构建文件更好。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;安全性更高：将服务器端进程抽象为微服务 API，可以减少攻击的表面区域。您还可以利用专业第三方服务的专业知识。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更便宜，更容易扩展：当您的部署相当于可以在任何地方提供服务的一堆文件时，扩展就是在更多地方提供这些文件的问题。CDN 是完美的，通常包括扩展他们的所有计划。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的开发者体验：松散的耦合和控制分离允许更有针对性的开发和调试，并且为站点生成器扩展选择 CMS 选项消除了为内容和营销维护单独堆栈的需要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MEAN Stack</title>
      <link>https://ng-tech.icu/books/node-notes/04.%E5%85%A8%E6%A0%88%E4%B8%8E-graphql/%E6%8A%80%E6%9C%AF%E6%A0%88/mean-stack/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/node-notes/04.%E5%85%A8%E6%A0%88%E4%B8%8E-graphql/%E6%8A%80%E6%9C%AF%E6%A0%88/mean-stack/</guid>
      <description>&lt;h1 id=&#34;meanstack&#34;&gt;MEANStack&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
