<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>选择与操作 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-series/1.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E9%80%89%E6%8B%A9%E4%B8%8E%E6%93%8D%E4%BD%9C/</link><atom:link href="https://ng-tech.icu/books/web-series/1.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E9%80%89%E6%8B%A9%E4%B8%8E%E6%93%8D%E4%BD%9C/index.xml" rel="self" type="application/rss+xml"/><description>选择与操作</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>选择与操作</title><link>https://ng-tech.icu/books/web-series/1.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E9%80%89%E6%8B%A9%E4%B8%8E%E6%93%8D%E4%BD%9C/</link></image><item><title>元素操作</title><link>https://ng-tech.icu/books/web-series/1.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E9%80%89%E6%8B%A9%E4%B8%8E%E6%93%8D%E4%BD%9C/%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-series/1.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E9%80%89%E6%8B%A9%E4%B8%8E%E6%93%8D%E4%BD%9C/%E5%85%83%E7%B4%A0%E6%93%8D%E4%BD%9C/</guid><description>&lt;h1 id="元素操作">元素操作&lt;/h1>
&lt;p># Attributes(属性)&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 设置变量值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;--my-color&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;rebeccapurple&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 获取变量值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getPropertyValue&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;--my-color&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// =&amp;gt; &amp;#39;rebeccapurple&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 移除变量值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeProperty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;--my-color&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="属性判断与获取">属性判断与获取&lt;/h2>
&lt;p>以下方法与元素节点的属性相关。&lt;/p>
&lt;p>&lt;strong>(1)hasAttribute()&lt;/strong>&lt;/p>
&lt;p>&lt;code>hasAttribute&lt;/code>方法返回一个布尔值，表示当前元素节点是否包含指定的 HTML 属性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;div1&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hasAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;align&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">d&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;align&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码检查&lt;code>div&lt;/code>节点是否含有&lt;code>align&lt;/code>属性。如果有，则设置为“居中对齐”。&lt;/p>
&lt;p>&lt;strong>(2)getAttribute()&lt;/strong>&lt;/p>
&lt;p>&lt;code>getAttribute&lt;/code>方法返回当前元素节点的指定属性。如果指定属性不存在，则返回&lt;code>null&lt;/code>。&lt;/p>
&lt;pre tabindex="0">&lt;code>var div = document.getElementById(&amp;#39;div1&amp;#39;);
div.getAttribute(&amp;#39;align&amp;#39;) // &amp;#34;left&amp;#34;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>(3)removeAttribute()&lt;/strong>&lt;/p>
&lt;p>removeAttribute 方法用于从当前元素节点移除属性。&lt;/p>
&lt;pre tabindex="0">&lt;code>// 原来的HTML代码
// &amp;lt;div id=&amp;#34;div1&amp;#34; align=&amp;#34;left&amp;#34; width=&amp;#34;200px&amp;#34;&amp;gt;
document.getElementById(&amp;#34;div1&amp;#34;).removeAttribute(&amp;#34;align&amp;#34;);
// 现在的HTML代码
// &amp;lt;div id=&amp;#34;div1&amp;#34; width=&amp;#34;200px&amp;#34;&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>(4)setAttribute()&lt;/strong>&lt;/p>
&lt;p>&lt;code>setAttribute&lt;/code>方法用于为当前元素节点新增属性，或编辑已存在的属性。&lt;/p>
&lt;pre tabindex="0">&lt;code>var d = document.getElementById(&amp;#39;d1&amp;#39;);
d.setAttribute(&amp;#39;align&amp;#39;, &amp;#39;center&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>该方法会将所有属性名，都当作小写处理。对于那些已存在的属性，该方法是编辑操作，否则就会新建属性。下面是一个对&lt;code>img&lt;/code>元素的&lt;code>src&lt;/code>属性赋值的例子。&lt;/p>
&lt;pre tabindex="0">&lt;code>var myImage = document.querySelector(&amp;#39;img&amp;#39;);
myImage.setAttribute (&amp;#39;src&amp;#39;, &amp;#39;path/to/example.png&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>大多数情况下，直接对属性赋值比使用该方法更好。&lt;/p>
&lt;pre tabindex="0">&lt;code>el.value = &amp;#39;hello&amp;#39;;
// or
el.setAttribute(&amp;#39;value&amp;#39;, &amp;#39;hello&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>而如果是针对于没有值的属性，那么直接填入一个空字符串即可，譬如：&lt;/p>
&lt;pre tabindex="0">&lt;code>var body = document.getElementsByTagName(&amp;#39;body&amp;#39;)[0];
body.setAttribute(&amp;#34;data-body&amp;#34;,&amp;#34;&amp;#34;);
2
1var body = document.getElementsByTagName(&amp;#39;body&amp;#39;)[0];
2body.setAttribute(&amp;#34;data-body&amp;#34;,&amp;#34;&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>最后达到的效果是：&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;body data-body&amp;gt;
1&amp;lt;body data-body&amp;gt;
&lt;/code>&lt;/pre>&lt;p>##  基本属性&lt;/p>
&lt;p>&lt;strong>(1) attributes&lt;/strong>&lt;/p>
&lt;p>attributes 属性返回一个类似数组的对象，成员是当前元素节点的所有属性节点，每个数字索引对应一个属性节点(Attribute)对象。返回值中，所有成员都是动态的，即属性的变化会实时反映在结果集。下面是一个 HTML 代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;para&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello World&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>获取 attributes 成员的代码如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">para&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;para&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">attr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">para&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">attributes&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">attr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">attr&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// para
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码说明，通过 attributes 属性获取属性节点对象(attr)以后，可以通过 name 属性获取属性名(id)，通过 value 属性获取属性值(para)。注意，属性节点的 name 属性和 value 属性，等同于 nodeName 属性和 nodeValue 属性。如果需要遍历一个节点的所有属性，可以用如下方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">para&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementsByTagName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;p&amp;#34;&lt;/span>&lt;span class="p">)[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">para&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">hasAttributes&lt;/span>&lt;span class="p">())&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">attrs&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">para&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">attributes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">output&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">attrs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">output&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">attrs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;-&amp;gt;&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">attrs&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">output&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">result&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;No attributes to show&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>(2) id 属性&lt;/strong>&lt;/p>
&lt;p>id 属性返回指定元素的 id 标识。该属性可读写。&lt;/p>
&lt;p>&lt;strong>(3) tagName 属性&lt;/strong>&lt;/p>
&lt;p>tagName 属性返回指定元素的大写的标签名，与 nodeName 属性的值相等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">// 假定HTML代码如下 //
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">span&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;span&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">span&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> var span = document.getElementById(&amp;#34;span&amp;#34;);
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">span.tagName // &amp;#34;SPAN&amp;#34;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>##  文本与值属性&lt;/p>
&lt;p>### innerHTML &amp;amp; outerHTML&lt;/p>
&lt;p>innerHTML 属性返回该元素包含的 HTML 代码。该属性可读写，常用来设置某个节点的内容。如果将该属性设为空，等于删除所有它包含的所有节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">el&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码等于将 el 节点变成了一个空节点，el 原来包含的节点被全部删除。注意，如果文本节点中包含&amp;amp;、小于号(&amp;lt;)和大于号(%gt;)，innerHTML 属性会将它们转为实体形式&amp;amp;amp、&amp;amp;lt、&amp;amp;gt。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// HTML代码如下 &amp;lt;p id=&amp;#34;para&amp;#34;&amp;gt; 5 &amp;gt; 3 &amp;lt;/p&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;para&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">innerHTML&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 5 &amp;amp;gt; 3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于上面这个原因，导致在 innerHTML 插入 &lt;code>&amp;lt;script&amp;gt;&lt;/code> 标签，不会被执行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;script&amp;gt;alert(&amp;#39;haha&amp;#39;)&amp;lt;/script&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">el&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码将脚本插入内容，脚本并不会执行。但是，innerHTML 还是有安全风险的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;&amp;lt;img src=x onerror=alert(1)&amp;gt;&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">el&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面代码中，alert 方法是会执行的。因此为了安全考虑，如果插入的是文本，最好用 textContent 属性代替 innerHTML。并且在不同的浏览器，特别是 IE 浏览器中表现差异很大。在 IE 中,innerHTML 对于 COL, COLGROUP, FRAMESET, HEAD, HTML, STYLE, TABLE, TBODY, TFOOT, THEAD, TITLE, TR 是只读的。在 IE 中, innerHTML 对于所有的表格相关标签都是只读的(除了 TD 标签)。另外，&lt;code>innerHTML&lt;/code> 不能被追加。通常情况下, 我们可以通过 innerHTML 追加内容(elem.innerHTML += &amp;ldquo;NEW TEXT&amp;rdquo;), 例如:&lt;/p>
&lt;pre tabindex="0">&lt;code>chatDiv.innerHTML += &amp;#34;&amp;lt;div&amp;gt;Hi &amp;lt;img src=&amp;#39;smile.gif&amp;#39;/&amp;gt; !&amp;lt;/div&amp;gt;&amp;#34;
chatDiv.innerHTML += &amp;#34;How you doing?&amp;#34;
&lt;/code>&lt;/pre>&lt;p>但是实际他是这样工作的:&lt;/p>
&lt;ol>
&lt;li>原来的内容被去除&lt;/li>
&lt;li>新的值通过 innerHTML 解析替换.
内容不能被追加, 他是重新构建的. 因此, 所有的图片和其他资源在+=之后, 将会被重载. 比如上面的例子的 smile.gif 文件。
##  样式属性&lt;/li>
&lt;/ol>
&lt;p>className 属性用来读取和设置当前元素的 class 属性。它的值是一个字符串，每个 class 之间用空格分割。&lt;/p>
&lt;p>classList 属性则返回一个类似数组的对象，当前元素节点的每个 class 就是这个对象的一个成员。&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;div class=&amp;#34;one two three&amp;#34; id=&amp;#34;myDiv&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>上面这个 div 元素的节点对象的 className 属性和 classList 属性，分别如下。&lt;/p>
&lt;pre tabindex="0">&lt;code>document.getElementById(&amp;#39;myDiv&amp;#39;).className
// &amp;#34;one two three&amp;#34;
document.getElementById(&amp;#39;myDiv&amp;#39;).class List
// {
//   0: &amp;#34;one&amp;#34;
//   1: &amp;#34;two&amp;#34;
//   2: &amp;#34;three&amp;#34;
//   length: 3
// }
&lt;/code>&lt;/pre>&lt;p>从上面代码可以看出，className 属性返回一个空格分隔的字符串，而 classList 属性指向一个类似数组的对象，该对象的 length 属性(只读)返回当前元素的 class 数量。&lt;/p>
&lt;p>classList 对象有下列方法。&lt;/p>
&lt;p>- add()：增加一个 class。
- remove()：移除一个 class。
- contains()：检查当前元素是否包含某个 class。
- toggle()：将某个 class 移入或移出当前元素。
- item()：返回指定索引位置的 class。
- toString()：将 class 的列表转为字符串。&lt;/p>
&lt;pre tabindex="0">&lt;code>myDiv.classList.add(&amp;#39;myCssClass&amp;#39;);
myDiv.classList.add(&amp;#39;foo&amp;#39;, &amp;#39;bar&amp;#39;);
myDiv.classList.remove(&amp;#39;myCssClass&amp;#39;);
myDiv.classList.toggle(&amp;#39;myCssClass&amp;#39;); // 如果myCssClass不存在就加入，否则移除
myDiv.classList.contains(&amp;#39;myCssClass&amp;#39;); // 返回 true 或者 false
myDiv.classList.item(0); // 返回第一个Class
myDiv.classList.toString();
&lt;/code>&lt;/pre>&lt;p>下面比较一下，className 和 classList 在添加和删除某个类时的写法。&lt;/p>
&lt;pre tabindex="0">&lt;code>// 添加class
document.getElementById(&amp;#39;foo&amp;#39;).className += &amp;#39;bold&amp;#39;;
document.getElementById(&amp;#39;foo&amp;#39;).classList.add(&amp;#39;bold&amp;#39;);
// 删除class
document.getElementById(&amp;#39;foo&amp;#39;).classList.remove(&amp;#39;bold&amp;#39;);
document.getElementById(&amp;#39;foo&amp;#39;).className =
document.getElementById(&amp;#39;foo&amp;#39;).className.replace(/^bold$/, &amp;#39;&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>toggle 方法可以接受一个布尔值，作为第二个参数。如果为 true，则添加该属性；如果为 false，则去除该属性。&lt;/p>
&lt;pre tabindex="0">&lt;code>el.classList.toggleClass(&amp;#34;abc&amp;#34;, someBool);
// 等同于
if (someBool){
  el.classList.add(&amp;#34;abc&amp;#34;);
} else {
  el.classList.remove(&amp;#34;abc&amp;#34;);
}
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>document.getElementById(&amp;#34;myH1&amp;#34;).style.color = &amp;#34;red&amp;#34;;
&lt;/code>&lt;/pre>&lt;p>##  尺寸属性&lt;/p>
&lt;p>以下属性与元素节点的可见区域的坐标相关。&lt;/p>
&lt;p>&lt;strong>(1)clientHeight&lt;/strong>&lt;/p>
&lt;p>clientHeight 属性返回元素节点的可见高度，包括 padding、但不包括水平滚动条、边框和 margin 的高度，单位为像素。该属性可以计算得到，等于元素的 CSS 高度，加上 CSS 的 padding 高度，减去水平滚动条的高度(如果存在水平滚动条)。&lt;/p>
&lt;p>如果一个元素是可以滚动的，则 clientHeight 只计算它的可见部分的高度。&lt;/p>
&lt;p>&lt;strong>(2)clientLeft&lt;/strong>&lt;/p>
&lt;p>clientLeft 属性等于元素节点左边框(border)的宽度，单位为像素，包括垂直滚动条的宽度，不包括左侧的 margin 和 padding。但是，除非排版方向是从右到左，且发生元素宽度溢出，否则是不可能存在左侧滚动条。如果该元素的显示设为&lt;code>display: inline&lt;/code>，clientLeft 一律为 0，不管是否存在左边框。&lt;/p>
&lt;p>&lt;strong>(3)clientTop&lt;/strong>&lt;/p>
&lt;p>clientTop 属性等于网页元素顶部边框的宽度，不包括顶部的 margin 和 padding。&lt;/p>
&lt;p>&lt;strong>(4)clientWidth&lt;/strong>&lt;/p>
&lt;p>clientWidth 属性等于网页元素的可见宽度，即包括 padding、但不包括垂直滚动条(如果有的话)、边框和 margin 的宽度，单位为像素。&lt;/p>
&lt;p>如果一个元素是可以滚动的，则 clientWidth 只计算它的可见部分的宽度。&lt;/p>
&lt;p>##  位移与状态属性&lt;/p>
&lt;p>以下属性与元素节点占据的总区域的坐标相关。&lt;/p>
&lt;p>&lt;strong>(1)scrollHeight&lt;/strong>&lt;/p>
&lt;p>scrollHeight 属性返回指定元素的总高度，包括由于溢出而无法展示在网页的不可见部分。如果一个元素是可以滚动的，则 scrollHeight 包括整个元素的高度，不管是否存在垂直滚动条。scrollHeight 属性包括 padding，但不包括 border 和 margin。该属性为只读属性。&lt;/p>
&lt;p>如果不存在垂直滚动条，scrollHeight 属性与 clientHeight 属性是相等的。如果存在滚动条，scrollHeight 属性总是大于 clientHeight 属性。当滚动条滚动到内容底部时，下面的表达式为 true。&lt;/p>
&lt;pre tabindex="0">&lt;code>element.scrollHeight - element.scrollTop === element.clientHeight
&lt;/code>&lt;/pre>&lt;p>如果滚动条没有滚动到内容底部，上面的表达式为 false。这个特性结合&lt;code>onscroll&lt;/code>事件，可以判断用户是否滚动到了指定元素的底部，比如是否滚动到了《使用须知》区块的底部。&lt;/p>
&lt;pre tabindex="0">&lt;code>var rules = document.getElementById(&amp;#34;rules&amp;#34;);
rules.onscroll = checking;
function checking(){
  if (this.scrollHeight - this.scrollTop === this.clientHeight) {
    console.log(&amp;#39;谢谢阅读&amp;#39;);
  } else {
    console.log(&amp;#39;您还未读完&amp;#39;);
  }
}
&lt;/code>&lt;/pre>&lt;p>&lt;strong>(2)scrollWidth&lt;/strong>&lt;/p>
&lt;p>scrollWidth 属性返回元素的总宽度，包括由于溢出容器而无法显示在网页上的那部分宽度，不管是否存在水平滚动条。该属性是只读属性。&lt;/p>
&lt;p>&lt;strong>(3)scrollLeft&lt;/strong>&lt;/p>
&lt;p>scrollLeft 属性设置或返回水平滚动条向右侧滚动的像素数量。它的值等于元素的最左边与其可见的最左侧之间的距离。对于那些没有滚动条或不需要滚动的元素，该属性等于 0。该属性是可读写属性，设置该属性的值，会导致浏览器将指定元素自动滚动到相应的位置。&lt;/p>
&lt;p>&lt;strong>(4)scrollTop&lt;/strong>&lt;/p>
&lt;p>scrollTop 属性设置或返回垂直滚动条向下滚动的像素数量。它的值等于元素的顶部与其可见的最高位置之间的距离。对于那些没有滚动条或不需要滚动的元素，该属性等于 0。该属性是可读写属性，设置该属性的值，会导致浏览器将指定元素自动滚动到相应位置。&lt;/p>
&lt;pre tabindex="0">&lt;code>document.querySelector(&amp;#39;div&amp;#39;).scrollTop = 150;
&lt;/code>&lt;/pre>&lt;p>上面代码将 div 元素向下滚动 150 像素。&lt;/p>
&lt;h1 id="operation元素操作">Operation(元素操作)&lt;/h1>
&lt;p>##  创建与插入&lt;/p>
&lt;p>创建一个新的 DOM 节点主要依赖于一下几个方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">createDocumentFragment&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//创建一个DOM片段
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//创建一个具体的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">createTextNode&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//创建一个文本节点
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于如下这个 HTML 片段：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;myList&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目一&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目二&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目三&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>首先需要依靠&lt;code>document.createElement()&lt;/code>方法来创建元素，接受一个参数，即要创建元素的标签名，返回创建的元素节点。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">div&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;div&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//创建一个div元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;myDiv&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//设置div的id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">className&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;box&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//设置div的class
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在创建元素后，还需要把元素添加到文档树中，主要依靠 appendChild 方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">ul&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;myList&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//获得ul
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;li&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//创建li
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;项目四&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//向li内添加文本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//把li 添加到ul子节点的末尾
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加之后变成了：&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;ul id=&amp;#34;myList&amp;#34;&amp;gt;
&amp;lt;li&amp;gt;项目一&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目二&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目三&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目四&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;p>appendChild()  方法还可以添加已经存在的元素，会将元素从原来的位置移到新的位置&lt;/p>
&lt;pre tabindex="0">&lt;code>var ul = document.getElementById(&amp;#34;myList&amp;#34;); //获得ul
ul.appendChild(ul.firstChild); //把ul的第一个元素节点移到ul子节点的末尾
&lt;/code>&lt;/pre>&lt;p>运行后(IE)：&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;ul id=&amp;#34;myList&amp;#34;&amp;gt;
&amp;lt;li&amp;gt;项目二&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目三&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目一&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;p>insertBefore()  方法，如果不是在末尾插入节点，而是想放在特定的位置上，用这个方法，该方法接受 2 个参数，第一个是要插入的节点，第二个是参照节点，返回要添加的元素节点&lt;/p>
&lt;pre tabindex="0">&lt;code>var ul = document.getElementById(&amp;#34;myList&amp;#34;); //获得ul
var li = document.createElement(&amp;#34;li&amp;#34;); //创建li
li.innerHTML= &amp;#34;项目四&amp;#34;; //向li内添加文本
ul.insertBefore(li,ul.firstChild); //把li添加到ul的第一个子节点前
&lt;/code>&lt;/pre>&lt;p>添加后:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;ul id=&amp;#34;myList&amp;#34;&amp;gt;
&amp;lt;li&amp;gt;项目四&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目一&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目二&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目三&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">ul&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;myList&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//获得ul
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;li&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//创建li
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;项目四&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//向li内添加文本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertBefore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastChild&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//把li添加到ul的子节点末尾
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加后:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">ul&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;myList&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目一&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目二&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目三&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>项目四&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">li&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">ul&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">ul&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;myList&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//获得ul
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">li&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;li&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//创建li
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">li&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">innerHTML&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;项目四&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//向li内添加文本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">lis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementsByTagName&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;li&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//获取ul中所有li的集合
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ul&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertBefore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">li&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">lis&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span> &lt;span class="c1">//把li添加到ul中的第二个li节点前
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>添加后:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;ul id=&amp;#34;myList&amp;#34;&amp;gt;
&amp;lt;li&amp;gt;项目一&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目四&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目二&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;项目三&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code>&lt;/pre>&lt;p>##  移除与替换&lt;/p>
&lt;p>移除元素节点&lt;/p>
&lt;pre tabindex="0">&lt;code>removeChild() 方法 ，用于移除节点，接受一个参数，即要移除的节点，返回被移除的节点，注意被移除的节点仍然在文档中，不过文档中已没有其位置了
var ul = document.getElementById(&amp;#34;myList&amp;#34;); //获得ul
var fromFirstChild = ul.removeChild(ul.firstChild); //移除ul第一个子节点
var ul = document.getElementById(&amp;#34;myList&amp;#34;); //获得ul
var lis = ul.getElementsByTagName(&amp;#34;li&amp;#34;) //获取ul中所有li的集合
ul.removeChild(lis[0]); 　　　　　　//移除第一个li，与上面不同，要考虑浏览器之间的差异
&lt;/code>&lt;/pre>&lt;p>替换元素节点&lt;/p>
&lt;pre tabindex="0">&lt;code>replaceChild() 方法 ，用于替换节点，接受两个参数，第一参数是要插入的节点，第二个是要替换的节点，返回被替换的节点
var ul = document.getElementById(&amp;#34;myList&amp;#34;); //获得ul
var fromFirstChild = ul.replaceChild(ul.firstChild); //替换ul第一个子节点
var ul = document.getElementById(&amp;#34;myList&amp;#34;); //获得ul;
var li = document.createElement(&amp;#34;li&amp;#34;); //创建li
li.innerHTML= &amp;#34;项目四&amp;#34;; //向li内添加文本
var lis = ul.getElementsByTagName(&amp;#34;li&amp;#34;) //获取ul中所有li的集合
var returnNode = ul.replaceChild(li,lis[1]); //用创建的li替换原来的第二个li
&lt;/code>&lt;/pre>&lt;p>复制节点&lt;/p>
&lt;pre tabindex="0">&lt;code>cloneNode() 方法，用于复制节点， 接受一个布尔值参数， true 表示深复制(复制节点及其所有子节点)， false 表示浅复制(复制节点本身，不复制子节点)
var ul = document.getElementById(&amp;#34;myList&amp;#34;); //获得ul
var deepList = ul.cloneNode(true); //深复制
var shallowList = ul.cloneNode(false); //浅复制
&lt;/code>&lt;/pre>&lt;p># Document&lt;/p>
&lt;h1 id="元素样式">元素样式&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Add Rules to Stylesheets with JavaScript
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// http://davidwalsh.name/add-rules-stylesheets
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Getting the Stylesheet
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">Which stylesheet you add the rules to is up to you. If you have a specific stylesheet in mind, you can add an ID to the LINK or STYLE element within your page HTML and get the CSSStyleSheet object by referencing the element&amp;#39;s sheet property. The stylesheets can be found in the document.styleSheets object:*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">sheets&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">styleSheets&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// returns an Array-like StyleSheet List
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">Returns:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">StyleSheetList {0: CSSStyleSheet, 1: CSSStyleSheet, 2: CSSStyleSheet, 3: CSSStyleSheet, 4: CSSStyleSheet, 5: CSSStyleSheet, 6: CSSStyleSheet, 7: CSSStyleSheet, 8: CSSStyleSheet, 9: CSSStyleSheet, 10: CSSStyleSheet, 11: CSSStyleSheet, 12: CSSStyleSheet, 13: CSSStyleSheet, 14: CSSStyleSheet, 15: CSSStyleSheet, length: 16, item: function}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Grab the first sheet, regardless of media
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">styleSheets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Creating a New Stylesheet
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">In many cases, it may just be best to create a new STYLE element for your dynamic rules. This is quite easy:*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">sheet&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Create the &amp;lt;style&amp;gt; tag
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">style&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;style&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Add a media (and/or media query) here if you&amp;#39;d like!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// style.setAttribute(&amp;#34;media&amp;#34;, &amp;#34;screen&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// style.setAttribute(&amp;#34;media&amp;#34;, &amp;#34;@media only screen and (max-width : 1024px)&amp;#34;)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// WebKit hack :(
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createTextNode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Add the &amp;lt;style&amp;gt; element to the page
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">head&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">sheet&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Adding Rules
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">CSSStyleSheet objects have an addRule method which allows you to register CSS rules within the stylesheet. The addRule method accepts three arguments: the selector, the second the CSS code for the rule, and the third is the zero-based integer index representing the style position (in relation to styles of the same selector): */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addRule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;#myList li&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;float: left; background: red !important;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Inserting Rules
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">Stylesheets also have an insertRule method which isn&amp;#39;t available in earlier IE&amp;#39;s. The insertRule combines the first two arguments of addRule: */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertRule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;header { float: left; opacity: 0.8; }&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Safely Applying Rules
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">Since browser support for insertRule isn&amp;#39;t as global, it&amp;#39;s best to create a wrapping function to do the rule application. Here&amp;#39;s a quick and dirty method: */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">addCSSRule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sheet&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">selector&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rules&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertRule&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertRule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">selector&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;{&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">rules&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">addRule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">selector&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">rules&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Use it!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">addCSSRule&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">styleSheets&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="s2">&amp;#34;header&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;float: left&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/* Inserting Rules for Media Queries
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">Media query-specific rules can be added in one of two ways. The first way is through the standard insertRule method: */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">sheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">insertRule&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;@media only screen and (max-width : 1140px) { header { display: none; } }&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>元素选择</title><link>https://ng-tech.icu/books/web-series/1.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E9%80%89%E6%8B%A9%E4%B8%8E%E6%93%8D%E4%BD%9C/%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-series/1.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E9%80%89%E6%8B%A9%E4%B8%8E%E6%93%8D%E4%BD%9C/%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9/</guid><description>&lt;p># Selector(选择器)&lt;/p>
&lt;p>## &lt;code>getElementBy*&lt;/code>&lt;/p>
&lt;h2 id="queryselector">&lt;code>querySelector*&lt;/code>&lt;/h2>
&lt;p>HTML5 向 Web API 新引入了 document.querySelector 以及 document.querySelectorAll 两个方法用来更方便地从 DOM 选取元素，功能类似于 jQuery 的选择器。这使得在编写原生 JavaScript 代码时方便了许多。该方法的浏览器兼容性目前各主流浏览器对此 API 提供了良好支持，IE 需 8+。详情见&lt;a href="http://caniuse.com/queryselector" target="_blank" rel="noopener">caniuse&lt;/a>。&lt;/p>
&lt;p>两个方法使用差不多的语法，都是接收一个字符串参数，这个参数需要是合法的 CSS 选择语法。需要注意的是，传入的选择器参数是要经过字符串转义的，譬如我们有一个类名为为&amp;rsquo;foo:bar&amp;rsquo;，所以正确的做法是将反斜杠转义后&amp;rsquo;.foo\:bar&amp;rsquo;再传递给 querySelector，后者在接收到&amp;rsquo;.foo\:bar&amp;rsquo;这个参数后，字符串将两个反斜杠转义成一个，然后 querySelector 前面得到的一个反斜杠与冒号结合进行转义得到正确结果。&lt;/p>
&lt;pre tabindex="0">&lt;code>element = document.querySelector(&amp;#39;selectors&amp;#39;);
elementList = document.querySelectorAll(&amp;#39;selectors&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>其中参数 selectors  可以包含多个 CSS 选择器，用逗号隔开。&lt;/p>
&lt;pre tabindex="0">&lt;code>element = document.querySelector(&amp;#39;selector1,selector2,...&amp;#39;);
elementList = document.querySelectorAll(&amp;#39;selector1,selector2,...&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>使用这两个方法无法查找带伪类状态的元素，比如 querySelector(&amp;rsquo;:hover&amp;rsquo;)不会得到预期结果。不过需要注意的是该系列方法返回的是非实时的结果，想要区别什么是实时非实时的返回结果，请看下例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//HTML代码&amp;lt;div id=&amp;#34;container&amp;#34;&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">    &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">    &lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">div&lt;/span>&lt;span class="o">&amp;gt;&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/div&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//首先选取页面中id为container的元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;#container&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">childNodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//结果为2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//然后通过代码为其添加一个子元素
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;div&amp;#39;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//这个元素不但添加到页面了，这里的变量container也自动更新了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">childNodes&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="c1">//结果为3
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过上面的例子就很好地理解了什么是会实时更新的元素。document.getElementById 返回的便是实时结果，上面对其添加一个子元素后，再次获取所有子元素个数，已经由原来的 2 个更新为 3 个(这里不考虑有些浏览器比如 Chrome 会把空白也解析为一个子节点)。&lt;/p>
&lt;h3 id="polyfill">Polyfill&lt;/h3>
&lt;p>在 IE7 以及之前的浏览器中，并不能使用 querySelect*等方法，因此需要做以下的 Polyfil:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelectorAll&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelectorAll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">selectors&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">style&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createElement&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;style&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[],&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">element&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">documentElement&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstChild&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">appendChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_qsa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">styleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">cssText&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">selectors&lt;/span> &lt;span class="o">+&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;{x-qsa:expression(document._qsa &amp;amp;&amp;amp; document._qsa.push(this))}&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">scrollBy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">parentNode&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeChild&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_qsa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">element&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_qsa&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">shift&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">element&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">style&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">removeAttribute&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;x-qsa&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">element&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_qsa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">elements&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelector&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kd">function&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">selectors&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">elements&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">querySelectorAll&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">selectors&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">elements&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">elements&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>##  亲属节点&lt;/p>
&lt;p>###  父节点&lt;/p>
&lt;p>语法：nodeObject.parentNode。其中，nodeObject  为节点对象(元素节点)。例如，获取 id=&amp;ldquo;demo&amp;quot;的节点的父节点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;demo&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">parentNode&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>###  兄弟节点&lt;/p>
&lt;p>以下属性与元素节点的同级元素相关。&lt;/p>
&lt;p>&lt;strong>(1)nextElementSibling&lt;/strong>&lt;/p>
&lt;p>nextElementSibling 属性返回指定元素的后一个同级元素，如果没有则返回 null。&lt;/p>
&lt;pre tabindex="0">&lt;code>// 假定HTML代码如下
// &amp;lt;div id=&amp;#34;div-01&amp;#34;&amp;gt;Here is div-01&amp;lt;/div&amp;gt;
// &amp;lt;div id=&amp;#34;div-02&amp;#34;&amp;gt;Here is div-02&amp;lt;/div&amp;gt;
var el = document.getElementById(&amp;#39;div-01&amp;#39;);
el.nextElementSibling
// &amp;lt;div id=&amp;#34;div-02&amp;#34;&amp;gt;Here is div-02&amp;lt;/div&amp;gt;
&lt;/code>&lt;/pre>&lt;p>&lt;strong>(2)previousElementSibling&lt;/strong>&lt;/p>
&lt;p>previousElementSibling 属性返回指定元素的前一个同级元素，如果没有则返回 null。&lt;/p>
&lt;p>###  子节点&lt;/p>
&lt;p>&lt;strong>1)children&lt;/strong>&lt;/p>
&lt;p>children 属性返回一个类似数组的动态对象(实时反映变化)，包括当前元素节点的所有子元素。如果当前元素没有子元素，则返回的对象包含零个成员。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// para是一个p元素节点
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">para&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">children&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">para&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="nx">children&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nx">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>(2)childElementCount&lt;/strong>&lt;/p>
&lt;p>childElementCount 属性返回当前元素节点包含的子元素节点的个数。&lt;/p>
&lt;p>&lt;strong>(3)firstElementChild&lt;/strong>&lt;/p>
&lt;p>firstElementChild 属性返回第一个子元素，如果没有，则返回 null。&lt;/p>
&lt;p>&lt;strong>(4)lastElementChild&lt;/strong>&lt;/p>
&lt;p>lastElementChild 属性返回最后一个子元素，如果没有，则返回 null。&lt;/p></description></item></channel></rss>