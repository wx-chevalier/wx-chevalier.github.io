<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>进程模型与通信 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-series/4.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%80%9A%E4%BF%A1/</link><atom:link href="https://ng-tech.icu/books/web-series/4.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%80%9A%E4%BF%A1/index.xml" rel="self" type="application/rss+xml"/><description>进程模型与通信</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>进程模型与通信</title><link>https://ng-tech.icu/books/web-series/4.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%80%9A%E4%BF%A1/</link></image><item><title>进程模型、进程间通信 与 Node模块使用</title><link>https://ng-tech.icu/books/web-series/4.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%80%9A%E4%BF%A1/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%8E-node%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-series/4.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%80%9A%E4%BF%A1/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1-%E4%B8%8E-node%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</guid><description>&lt;h1 id="进程模型进程间通信-与-node-模块使用">进程模型、进程间通信 与 Node 模块使用&lt;/h1>
&lt;h1 id="进程模型">进程模型&lt;/h1>
&lt;p>每个 Electron 的应用程序都有一个主入口文件，它所在的进程被成为主进程（Main Process）。而主进程中创建的窗体都有自己运行的进程，称为渲染进程（ Renderer Process）。每个 Electron 的应用程序有且仅有一个主进程，但可以有多个渲染进程。简单理解下主进程就相当于浏览器，而渲染进程就相当于在浏览器上打开的一个个网页。&lt;/p>
&lt;p>主进程主要工作就是 控制应用程序生命周期 和 管理窗口、菜单、托盘等 ，另外主进程运行在 Node.js 环境中，所以它可以使用各种 Node.js 模块，也可以调用操作系统中的各种资源等。渲染进程主要就是用来显示下网页、跑跑前端代码，这里只能用前端的语法规则，没法使用 Node.js 的语法和模块。&lt;/p>
&lt;p>早期版本的 Electron 渲染进程是可以直接使用 Node.js 的语法和模块的，现在版本中出于安全考虑所以无法直接使用（虽然可以通过配置解锁），但渲染进程中使用 Node.js 的一些功能这个需求还是存在的，所以 Electron 现在提供了预加载（preload）的功能。预加载调用一个 JS 脚本，它会在网页被加载前运行，它既可以使用 Node.js 的功能，又可以访问网页上的 window 对象（默认情况下并不能直接访问，得通过 contextBridge 模块）。所以可以在这里将 Node.js 的功能传递给 window 对象，这样渲染进程就可以使用这些功能了。&lt;/p>
&lt;h1 id="进程间通讯">进程间通讯&lt;/h1>
&lt;p>上面内容中可以知道默认情况下渲染进程只能使用前端的语法规则，所以它和相当于后台的主进程间只能通过 http 或是 websocket 等方式进行通讯，这种方式并不方便，所以 Electron 还提供了一些别的方式用于处理这方面问题。Electron 中使用 ipcMain 、 ipcRenderer 两个模块来处理进程间通讯，这两个是基于 Node.js 方式的模块，所以根据上面的内容使用上会有些注意点，主要就是怎么用的问题。&lt;/p>
&lt;h2 id="不安全方式">不安全方式&lt;/h2>
&lt;p>上一章内容中有说到早期版本的 Electron 渲染进程是可以直接使用 Node.js 的语法和模块的，现在版本中出于安全考虑所以无法直接使用，但可以通过配置解锁。所以我们可以配置下，然后就可以直接在渲染进程中使用 Node.js 的语法和模块，比如用于进程间通讯的 ipc 模块。使用上来说这是最简单的方式。&lt;/p>
&lt;p>下面是个简单的例子，分别改写 main.js 和 index.html 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ipcMain&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;electron&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">path&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;path&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">createWindow&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">mainWindow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">webPreferences&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">nodeIntegration&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 启用node环境
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">contextIsolation&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 禁用上下文隔离
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mainWindow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;index.html&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">mainWindow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">webContents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">openDevTools&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setInterval&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用下面方法向mainWindow发送消息，消息事件名称为 main-send ，内容为 hello
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">mainWindow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">webContents&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main-send&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">5000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用ipcMain.on方法监听 renderer-send 事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">ipcMain&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;renderer-send&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用下面方法对产生事件的对象进行应答，应答时事件名为main-reply，内容为pong
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reply&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main-reply&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;pong&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">whenReady&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">then&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">createWindow&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;activate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getAllWindows&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">createWindow&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;window-all-closed&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">process&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">platform&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="s2">&amp;#34;darwin&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">app&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">quit&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span> &lt;span class="p">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span> &lt;span class="na">id&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;txt&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello World!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 渲染进程使用ipcRenderer模块
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">ipcRenderer&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;electron&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用ipcRenderer.send方法发送消息，消息事件名称为 renderer-send ，内容为 ping
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">setInterval&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ipcRenderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;renderer-send&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;ping&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用ipcRenderer.on方法监听 main-reply 事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ipcRenderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main-reply&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用ipcRenderer.on方法监听 main-send 事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">ipcRenderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main-send&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面就是个简单的通讯演示了，通过设置 nodeIntegration: true 和 contextIsolation: false 在渲染进程中就可以直接使用 Node.js 的语法和模块了。ipcMain 和 ipcRenderer 两个模块分别用于主进程和渲染进程。传递消息时消息都会有个事件名称，两个模块分别用各自的 on() 方法来监听消息事件。只有 ipcRenderer 可以主动向 ipcMain 发送消息， ipcMain 只能在监听到来自 ipcRenderer 的事件后才可以返回消息。&lt;/p>
&lt;p>主线程中可以使用 BrowserWindow 对象的 webContents.send() 方法主动向该对象渲染进程发送消息，该渲染进程中同样使用 ipcRenderer.on() 来监听此消息。上面演示中 ipcRenderer 发送和 ipcMain 返回消息用的都是异步方法，它们还有同步方法可用，可以参考 Electron 官方的 API 文档。&lt;/p>
&lt;h2 id="预加载方式">预加载方式&lt;/h2>
&lt;p>上面的方式 Electron 现在并不推荐，现在推荐的是用预加载的方式把 Node.js 的一些内容传递给渲染进程。下面是个简单的例子，现在添加一个 preload.js 文件，内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">contextBridge&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">ipcRenderer&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;electron&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用contextBridge.exposeInMainWorld()方法将
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Function、String、Number、Array、Boolean、对象等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 传递给渲染进程的window对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">contextBridge&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exposeInMainWorld&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;myAPI&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setInterval&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ipcRenderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">send&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;renderer-send&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;ping&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ipcRenderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main-reply&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ipcRenderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;main-send&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">arg&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">arg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>分别改写 main.js 和 index.html 文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.js中只需要改写下面内容就行了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">mainWindow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">BrowserWindow&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">webPreferences&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">preload&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">join&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">__dirname&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;preload.js&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 使用预加载脚本
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="c">&amp;lt;!-- index.html中只要改写下面内容就好了 --&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">myAPI&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面就是个简单的预加载的使用方式了，可以看到从使用角度来说其实也没太大差别，无非就是使用 contextBridge.exposeInMainWorld() 方法来传递 Node.js 的内容给了 window 对象。&lt;/p></description></item><item><title>为何 remote 模块是有害的</title><link>https://ng-tech.icu/books/web-series/4.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%80%9A%E4%BF%A1/%E4%B8%BA%E4%BD%95-remote-%E6%A8%A1%E5%9D%97%E6%98%AF%E6%9C%89%E5%AE%B3%E7%9A%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-series/4.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E4%B8%8E%E9%80%9A%E4%BF%A1/%E4%B8%BA%E4%BD%95-remote-%E6%A8%A1%E5%9D%97%E6%98%AF%E6%9C%89%E5%AE%B3%E7%9A%84/</guid><description>&lt;h1 id="为何-remote-模块是有害的">为何 remote 模块是有害的&lt;/h1>
&lt;p>从最早的 Electron 版本开始，remote 模块就一直是主进程和渲染器进程之间进行通信的首选工具。它的基本前提是：在渲染器进程中，你向 remote 索取主进程中一个对象的句柄。然后你就可以使用这个句柄，就好像它是呈现器进程中的一个普通 JavaScript 对象一样&amp;ndash;调用方法、等待承诺、注册事件处理程序。渲染器和主进程之间的所有 IPC 调用都在幕后为你处理。超级方便&lt;/p>
&lt;h1 id="比较慢">比较慢&lt;/h1>
&lt;p>Electron 基于 Chromium，继承了 Chromium 的多进程模型。有一个或几个渲染器进程，负责渲染 HTML/CSS 并在页面的上下文中运行 JS；还有一个主进程，负责协调所有的渲染器并代表它们执行某些操作。&lt;/p>
&lt;p>当一个呈现器进程访问一个远程对象时，例如读取一个属性或调用一个函数，呈现器进程会向主进程发送一个消息，要求它执行该操作，然后阻塞等待响应。这意味着，当呈现器在等待结果的时候，它不能做任何事情，只能摆弄它的拇指。没有解析传入的网络数据，没有渲染，没有处理定时器。它只是在等待。&lt;/p>
&lt;p>在我的机器上，访问一个远程对象的属性的平均时间大约是 0.1 毫秒。作为比较，访问渲染器本地对象上的一个属性需要大约 0.00001 毫秒。远程对象的速度比本地对象慢一万倍。让我把这句话写成大字，因为这很重要。偶尔做一两个这样的 0.1 毫秒的调用并不是什么问题&amp;ndash;如果你想停留在一个单一的帧内，与你得到的 16 毫秒相比，0.1 毫秒仍然是相当快的。假设你不做其他事情，每一帧有 160 次对远程对象的调用预算。但真的很容易不小心比你预期的多出许多远程调用。例如，请看下面的代码，它想象了一个存在于主进程中的自定义域对象被渲染器操纵。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Main process
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">global&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">thing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">rectangle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getBounds&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">setBounds&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">bounds&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="cm">/* ... */&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Renderer process
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">thing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">remote&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getGlobal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s1">&amp;#39;thing&amp;#39;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">thing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rectangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getBounds&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">thing&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rectangle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setBounds&lt;/span>&lt;span class="p">({&lt;/span> &lt;span class="nx">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">height&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在渲染器进程中执行这段代码涉及到九个往返的 IPC 消息：&lt;/p>
&lt;ul>
&lt;li>最初的 getGlobal()调用，返回一个代理对象。&lt;/li>
&lt;li>从 thing 获取矩形属性，返回另一个代理对象。&lt;/li>
&lt;li>在矩形上调用 getBounds()，返回第三个代理对象。&lt;/li>
&lt;li>获得边界的 x 属性。&lt;/li>
&lt;li>获得边界的 y 属性。&lt;/li>
&lt;li>获得边界的宽度属性。&lt;/li>
&lt;li>获得边界的高度属性。&lt;/li>
&lt;li>再次获得事物的矩形属性，返回与我们在（2）中得到的相同的代理对象。&lt;/li>
&lt;li>用新的值调用 setBounds。&lt;/li>
&lt;/ul>
&lt;p>这三行代码，不是一个单一的循环！，几乎需要整整一毫秒的时间来执行。一毫秒是一个很长的时间。当然，我们可以优化这段代码，以减少完成这一特定任务所需的 IPC 消息的数量（事实上，一些特殊的内部 Electron 数据结构，如从 BrowserWindow.getBounds 返回的 bounds 对象，具有神奇的属性，使它们更有效率）。但是像这样的代码很容易被发现在你的应用程序的灰尘角落里，并最终产生 &amp;ldquo;千刀万剐 &amp;ldquo;的效果&amp;ndash;那些在检查时看起来并不可疑的代码，实际上比它看起来要慢得多。如果这些代理对象从创建它们的函数中返回，它们可能会出现在各种地方，从而使这些缓慢的远程 IPC 从远离最初调用 remote.getGlobal()的地方被调用，这一事实使问题更加复杂。&lt;/p>
&lt;h1 id="可能创建令人迷惑的执行顺序">可能创建令人迷惑的执行顺序&lt;/h1>
&lt;p>我们通常认为 JavaScript 是单线程的（除了 Node 的新工作线程模块）。也就是说，当你的代码在运行的时候，没有其他事情可以发生。这在 Electron 中仍然是正确的，但是当使用远程模块时，有一些微妙的技巧可能会导致在你不期望存在的地方出现竞赛条件。例如，考虑这个比较常见的 JavaScript 模式。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">doThing&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">obj&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;thing-is-done&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">doNextThing&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中 doThing 启动了一些进程，最终会触发 thing-is-done 事件。Node 中的 http 模块是一个很好的例子，该模块通常以这种方式使用。这在普通的 JavaScript 中是安全的，因为在你的代码运行完毕之前，是不可能触发 thing-is-done 事件的。然而，如果 obj 是一个远程对象的代理，那么这段代码就包含一个竞赛条件。说 doThing 是一个可以很快完成的操作。当我们在渲染器进程中调用 obj.doThing()的代理对象时，远程模块会向主进程发出 IPC。然后 doThing()会在主进程中被调用，它启动了它所做的任何事情，向渲染器进程返回 undefined 作为返回值。现在有两个执行线程：一个是正在做事情的主进程，另一个是即将向主进程发送消息，要求向 obj 添加一个事件处理程序的呈现器进程。如果事情完成得特别快，可能会发生这样的情况：在通知主进程渲染器进程对该事件感兴趣的消息到达之前，主进程就已经触发了 &amp;ldquo;事情已完成 &amp;ldquo;事件。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic1.imgdb.cn/item/6352b1c016f2c2beb1ce44a2.jpg" alt="Race condition between Main and Renderer process leading to unexpected behavior." loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>这里的主进程和渲染器进程都是单线程的，正常的 JavaScript。但是它们之间的交互导致了一个竞赛条件，事件在调用 doThing()和调用 on(&amp;rsquo;thing-is-done&amp;rsquo;)之间被触发。如果这看起来令人困惑和微妙，那是因为它是。Electron 自己的测试套件包含了许多不同版本的这种竞赛条件，直到最近为了减少测试的松散性而把它们找出来。&lt;/p>
&lt;h1 id="远程对象不同于正常对象">远程对象不同于正常对象&lt;/h1>
&lt;p>当你从远程模块请求一个对象时，你会得到一个代理对象&amp;ndash;它代表了另一边的真实对象。远程模块尽力使该对象看起来好像真的存在于当前进程中，而且它做得很好，但有很多奇怪的边缘情况，使远程对象的方式不同，前 99 次工作正常，第 100 次却以某种极难调试的方式失败。这里有几个例子。&lt;/p>
&lt;ul>
&lt;li>原型链在进程之间不被镜像。因此，例如，remote.getGlobal(&amp;lsquo;foo&amp;rsquo;).constructor.name === &amp;ldquo;Proxy&amp;rdquo;，而不是远端构造函数的真实名称。任何涉及原型的远程智能都会在触及远程对象时被保证爆炸。&lt;/li>
&lt;li>NaN 和 Infinity 没有被远程模块正确处理。如果一个远程函数返回 NaN，渲染器进程中的代理将返回未定义值。&lt;/li>
&lt;li>在渲染器进程中运行的回调的返回值不会被传回主进程。当你把一个函数作为回调传递给远程方法时，那么从主进程中调用该回调将总是返回未定义，而不管呈现器进程中的方法返回什么。这是因为主进程不能阻塞等待呈现器进程返回一个结果。&lt;/li>
&lt;/ul>
&lt;p>机会是，当你第一次使用远程模块时，你不会遇到这些微妙的差异。甚至可能是第 100 次。但是，当你意识到远程模块工作方式的某个角落导致了你在六个小时内一直试图解决的错误时，再轻易改变使用远程的决定就太晚了。&lt;/p>
&lt;h1 id="存在安全隐患">存在安全隐患&lt;/h1>
&lt;p>很多 Electron 应用程序都不会故意运行不受信任的代码。然而，在你的应用程序中启用沙盒仍然是一个明智的预防措施&amp;ndash;例如，显示任意的用户控制的图像是很常见的，而且，比如说，PNG 解码包含错误的情况也不是没有过。&lt;/p>
&lt;p>但是，沙盒中的渲染器只有在主进程中才是安全的。渲染器与主进程进行通信，请求以其名义进行操作&amp;ndash;例如，打开一个新窗口或保存一个文件。当主进程收到这样的请求时，它会判断是否应该允许呈现器做这件事，如果不允许，它就会忽略这个请求，并因不良行为而毫不客气地关闭呈现器进程。(也可能只是拒绝请求，这取决于违规行为的严重程度)。这里有一个明确的安全边界：无论渲染器进程提出什么要求，主进程都负责决定是否允许。&lt;/p>
&lt;p>远程模块在这个安全边界上撕开了一个巨大的麦克卡车大小的洞。如果一个渲染器进程可以向主进程发送 &amp;ldquo;请获取这个全局变量并调用这个方法 &amp;ldquo;的请求，那么一个被破坏的渲染器进程就有可能制定并发送一个请求，要求主进程做它想做的任何事情。有效地，远程模块使沙箱几乎毫无用处。Electron 提供了一个禁用远程模块的选项，如果你在你的应用程序中使用沙盒，你肯定也应该禁用远程。&lt;/p>
&lt;p>我甚至还没有触及一类主要的问题：远程实现的固有复杂性。在进程之间连接 JS 对象不是一项小任务：例如，考虑到远程必须在进程之间传播引用计数，以防止对象在另一个进程中被 GC。这项任务非常具有挑战性，如果没有庞大的簿记和精致的 C++板块，它是无法完成的（尽管一旦 WeakRefs 可用，它可能会成为纯 JavaScript 的一部分）。即使有了所有这些机器，远程也不能（而且很可能永远不能）正确地 GC 循环引用。世界上很少有人能完全理解 remote 的实现，而且修复其中出现的 bug 是非常困难的。&lt;/p>
&lt;p>remote 模块很慢，容易发生竞赛，产生的对象与普通 JS 对象有细微差别，而且是一个巨大的安全责任。不要在你的应用程序中使用它。&lt;/p>
&lt;h1 id="替换">替换&lt;/h1>
&lt;p>理想情况下，你应该尽量减少应用中 IPC 的使用&amp;ndash;最好将尽可能多的工作留在渲染器进程中。如果你需要在同一原点的多个窗口之间进行通信，你可以使用 window.open()，并对它们进行同步编写，就像你在网络上一样。对于在不同起源的窗口之间的通信，还有 postMessage。&lt;/p>
&lt;p>但是当你真的只需要在主进程中调用一个函数时，我建议你使用新的 ipcRenderer.invoke()方法，它从 Electron 7 开始可用。它的工作原理类似于古老的 ipcRenderer.sendSync()，但它是异步的，也就是说，它不会阻碍渲染器中其他事情的发生。下面是一个从基于远程加载文件的系统转换到基于 ipcRenderer.invoke() 的系统的例子。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 之前
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Main
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">global&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">api&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">loadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">pathIsOK&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;forbidden&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">cb&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Renderer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">api&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">remote&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getGlobal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;api&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">api&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">loadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;/path/to/file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">err&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ... do something with data ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 现在
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Main
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">ipcMain&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">handle&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;read-file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kr">async&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">path&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">pathIsOK&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">Error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;forbidden&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">buf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">fs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">promises&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">readFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">path&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">buf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Renderer
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kr">await&lt;/span> &lt;span class="nx">ipcRenderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">invoke&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;read-file&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;/path/to/file&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ... do something with data ...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>