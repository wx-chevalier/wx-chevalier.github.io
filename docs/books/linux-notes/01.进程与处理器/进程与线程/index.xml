<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>进程与线程 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
      <atom:link href="https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/index.xml" rel="self" type="application/rss+xml" />
    <description>进程与线程</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>进程与线程</title>
      <link>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/</link>
    </image>
    
    <item>
      <title>01.用户态与内核态</title>
      <link>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/01.%E7%94%A8%E6%88%B7%E6%80%81%E4%B8%8E%E5%86%85%E6%A0%B8%E6%80%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/01.%E7%94%A8%E6%88%B7%E6%80%81%E4%B8%8E%E5%86%85%E6%A0%B8%E6%80%81/</guid>
      <description>&lt;h1 id=&#34;linux-中用户态与内核态&#34;&gt;Linux 中用户态与内核态&lt;/h1&gt;
&lt;p&gt;如下图所示，从宏观上来看，Linux 操作系统的体系架构分为用户态和内核态（或者用户空间和内核）。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230430222749.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;内核从本质上看是一种软件——控制计算机的硬件资源，并提供上层应用程序运行的环境。用户态即上层应用程序的活动空间，应用程序的执行必须依托于内核提供的资源，包括 CPU 资源、存储资源、IO 资源等。为了使上层应用能够访问到这些资源，内核必须为上层应用提供访问的接口：即系统调用。&lt;/p&gt;
&lt;p&gt;下图是对上图的一个细分结构，从这个图上可以更进一步对内核所做的事有一个“全景式”的印象。主要表现为：向下控制硬件资源，向内管理操作系统资源：包括进程的调度和管理、内存的管理、文件系统的管理、设备驱动程序的管理以及网络资源的管理，向上则向应用程序提供系统调用的接口。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230430222809.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这种分层的架构极大地提高了资源管理的可扩展性和灵活性，而且方便用户对资源的调用和集中式的管理，带来一定的安全性。&lt;/p&gt;
&lt;h1 id=&#34;内核访问&#34;&gt;内核访问&lt;/h1&gt;
&lt;p&gt;用户态的应用程序可以通过三种方式来访问内核态的资源：系统调用、库函数以及 Shell 脚本。&lt;/p&gt;
&lt;p&gt;我们可以把系统调用看成是一种不能再化简的操作（类似于原子操作，但是不同概念），有人把它比作一个汉字的一个“笔画”，而一个“汉字”就代表一个上层应用，我觉得这个比喻非常贴切。因此，有时候如果要实现一个完整的汉字（给某个变量分配内存空间），就必须调用很多的系统调用。如果从实现者（程序员）的角度来看，这势必会加重程序员的负担，良好的程序设计方法是：重视上层的业务逻辑操作，而尽可能避免底层复杂的实现细节。&lt;/p&gt;
&lt;p&gt;库函数正是为了将程序员从复杂的细节中解脱出来而提出的一种有效方法。它实现对系统调用的封装，将简单的业务逻辑接口呈现给用户，方便用户调用，从这个角度上看，库函数就像是组成汉字的“偏旁”。这样的一种组成方式极大增强了程序设计的灵活性，对于简单的操作，我们可以直接调用系统调用来访问资源，如“人”，对于复杂操作，我们借助于库函数来实现，如“仁”。显然，这样的库函数依据不同的标准也可以有不同的实现版本，如 ISO C 标准库，POSIX 标准库等。&lt;/p&gt;
&lt;p&gt;Shell 是一个特殊的应用程序，俗称命令行，本质上是一个命令解释器，它下通系统调用，上通各种应用，通常充当着一种“胶水”的角色，来连接各个小功能程序，让不同程序能够以一个清晰的接口协同工作，从而增强各个程序的功能。&lt;/p&gt;
&lt;p&gt;同时，Shell 是可编程的，它可以执行符合 Shell 语法的文本，这样的文本称为 Shell 脚本，通常短短的几行 Shell 脚本就可以实现一个非常大的功能，原因就是这些 Shell 语句通常都对系统调用做了一层封装。为了方便用户和系统交互，一般，一个 Shell 对应一个终端，终端是一个硬件设备，呈现给用户的是一个图形化窗口。我们可以通过这个窗口输入或者输出文本。这个文本直接传递给 Shell 进行分析解释，然后执行。&lt;/p&gt;
&lt;h1 id=&#34;用户态与内核态的切换&#34;&gt;用户态与内核态的切换&lt;/h1&gt;
&lt;p&gt;因为操作系统的资源是有限的，如果访问资源的操作过多，必然会消耗过多的资源，而且如果不对这些操作加以区分，很可能造成资源访问的冲突。&lt;/p&gt;
&lt;p&gt;所以，为了减少有限资源的访问和使用冲突，Unix/Linux 的设计哲学之一就是：对不同的操作赋予不同的执行等级，就是所谓特权的概念。简单说就是有多大能力做多大的事，与系统相关的一些特别关键的操作必须由最高特权的程序来完成。Intel 的 X86 架构的 CPU 提供了 0 到 3 四个特权级，数字越小，特权越高。&lt;/p&gt;
&lt;p&gt;Linux 操作系统中主要采用了 0 和 3 两个特权级，分别对应的就是内核态和用户态。运行于用户态的进程可以执行的操作和访问的资源都会受到极大的限制，而运行在内核态的进程则可以执行任何操作并且在资源的使用上没有限制。&lt;/p&gt;
&lt;p&gt;很多程序开始时运行于用户态，但在执行的过程中，一些操作需要在内核权限下才能执行，这就涉及到一个从用户态切换到内核态的过程。比如 C 函数库中的内存分配函数 malloc()，它具体是使用 sbrk() 系统调用来分配内存，当 malloc() 调用 sbrk() 的时候就涉及一次从用户态到内核态的切换，类似的函数还有 printf()，调用的是 wirte() 系统调用来输出字符串，等等。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230503195334.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;从用户态到内核态的切换，一般存在以下三种情况：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当然就是系统调用。&lt;/li&gt;
&lt;li&gt;异常事件：当 CPU 正在执行运行在用户态的程序时，突然发生某些预先不可知的异常事件，这个时候就会触发从当前用户态执行的进程转向内核态执行相关的异常事件，典型的如缺页异常。&lt;/li&gt;
&lt;li&gt;外围设备的中断：当外围设备完成用户的请求操作后，会向 CPU 发出中断信号，此时，CPU 就会暂停执行下一条即将要执行的指令，转而去执行中断信号对应的处理程序，如果先前执行的指令是在用户态下，则自然就发生从用户态到内核态的转换。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>02.用户线程与内核线程</title>
      <link>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/02.%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/02.%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E4%B8%8E%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B/</guid>
      <description>&lt;h1 id=&#34;linux-中的线程&#34;&gt;Linux 中的线程&lt;/h1&gt;
&lt;p&gt;在 Linux 2.4 版以前，线程的实现和管理方式就是完全按照进程方式实现的；在 Linux 2.6 之前，内核并不支持线程的概念，仅通过轻量级进程（Lightweight Process）模拟线程；轻量级进程是建立在内核之上并由内核支持的用户线程，它是内核线程的高度抽象，每一个轻量级进程都与一个特定的内核线程关联。内核线程只能由内核管理并像普通进程一样被调度。这种模型最大的特点是线程调度由内核完成了，而其他线程操作（同步、取消）等都是核外的线程库（Linux Thread）函数完成的。&lt;/p&gt;
&lt;p&gt;为了完全兼容 Posix 标准，Linux 2.6 首先对内核进行了改进，引入了线程组的概念（&lt;strong&gt;仍然用轻量级进程表示线程&lt;/strong&gt;），有了这个概念就可以将一组线程组织称为一个进程，不过内核并没有准备特别的调度算法或是定义特别的数据结构来表征线程；相反，线程仅仅被视为一个与其他进程（概念上应该是线程）共享某些资源的进程（概念上应该是线程）。在实现上主要的改变就是在 task_struct 中加入 tgid 字段，这个字段就是用于表示线程组 id 的字段。在用户线程库方面，也使用 NPTL 代替 Linux Thread，不同调度模型上仍然采用 &lt;code&gt;1 对 1&lt;/code&gt; 模型。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230522114838.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进程的实现是调用 fork 系统调用：&lt;code&gt;pid_t fork(void);&lt;/code&gt;，线程的实现是调用 clone 系统调用：&lt;code&gt;int clone(int (*fn)(void *), void *child_stack, int flags, void *arg, ...)&lt;/code&gt;。与标准 &lt;code&gt;fork()&lt;/code&gt; 相比，线程带来的开销非常小，内核无需单独复制进程的内存空间或文件描写叙述符等等。这就节省了大量的 CPU 时间，使得线程创建比新进程创建快上十到一百倍，能够大量使用线程而无需太过于操心带来的 CPU 或内存不足。无论是 fork、vfork、kthread_create 最后都是要调用 do_fork，而 do_fork 就是根据不同的函数参数，对一个进程所需的资源进行分配。&lt;/p&gt;
&lt;h2 id=&#34;内核线程&#34;&gt;内核线程&lt;/h2&gt;
&lt;p&gt;内核线程是由内核自己创建的线程，也叫做守护线程（Deamon），在终端上用命令 &lt;code&gt;ps -Al&lt;/code&gt; 列出的所有进程中，名字以 k 开关以 d 结尾的往往都是内核线程，比如 kthreadd、kswapd 等。与用户线程相比，它们都由 &lt;code&gt;do_fork()&lt;/code&gt; 创建，每个线程都有独立的 task_struct 和内核栈；也都参与调度，内核线程也有优先级，会被调度器平等地换入换出。二者的不同之处在于，内核线程只工作在内核态中；而用户线程则既可以运行在内核态（执行系统调用时），也可以运行在用户态；内核线程没有用户空间，所以对于一个内核线程来说，它的 0~3G 的内存空间是空白的，它的 &lt;code&gt;current-&amp;gt;mm&lt;/code&gt; 是空的，与内核使用同一张页表；而用户线程则可以看到完整的 0~4G 内存空间。&lt;/p&gt;
&lt;p&gt;在 Linux 内核启动的最后阶段，系统会创建两个内核线程，一个是 init，一个是 kthreadd。其中 init 线程的作用是运行文件系统上的一系列”init”脚本，并启动 shell 进程，所以 init 线程称得上是系统中所有用户进程的祖先，它的 pid 是 1。kthreadd 线程是内核的守护线程，在内核正常工作时，它永远不退出，是一个死循环，它的 pid 是 2。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>进程间通信</title>
      <link>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;h1 id=&#34;进程间通信&#34;&gt;进程间通信&lt;/h1&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/405664139&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/405664139&lt;/a&gt; 进程间通信的五种方式&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>进程模型</title>
      <link>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;进程模型&#34;&gt;进程模型&lt;/h1&gt;
&lt;h1 id=&#34;process-elements&#34;&gt;Process Elements&lt;/h1&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/27/1nf0Cd.png&#34; alt=&#34;The Elements of a Process&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进程 ID（或 PID）由操作系统分配，并且对于每个正在运行的进程都是唯一的。&lt;/p&gt;
&lt;h2 id=&#34;process-hierarchy&#34;&gt;Process Hierarchy&lt;/h2&gt;
&lt;p&gt;尽管操作系统可以同时运行多个进程，但实际上它只能直接启动一个称为 init（初始缩写）进程的进程。这不是一个特别特殊的过程，除了它的 PID 始终为 0 并且将一直运行。所有其他过程都可以视为此初始过程的子过程。进程与其他进程一样都有一棵家谱。每个进程都有一个父进程，并且可以有许多同级，它们是同一父进程创建的进程。当然，子进程可以创造更多的子进程，依此类推。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ps&#34; data-lang=&#34;ps&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;init-+-apmd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;|-atd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;|-cron&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;mf&#34;&gt;5&lt;/span&gt;      &lt;span class=&#34;nf&#34;&gt;|-dhclient&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;|-firefox-bin-+-firefox-bin---2*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;firefox-bin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;|&lt;/span&gt;             &lt;span class=&#34;nf&#34;&gt;|-java_vm---java_vm---13*&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;java_vm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;|&lt;/span&gt;             &lt;span class=&#34;nf&#34;&gt;`-swf_play&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;文件描述符file-descriptors&#34;&gt;文件描述符（File Descriptors）&lt;/h2&gt;
&lt;p&gt;我们之前了解了 stdin，stdout 和 stderr；给每个进程的默认文件。您将记住，这些文件始终具有相同的文件描述符号（分别为 0,1,2）。因此，内核为每个进程单独保存文件描述符。文件描述符也具有权限。例如，您可能能够从文件中读取但无法写入文件。打开文件后，操作系统会在文件描述符中保留对该文件的进程权限记录，并且不允许进程执行不应执行的任何操作。&lt;/p&gt;
&lt;h2 id=&#34;registers&#34;&gt;Registers&lt;/h2&gt;
&lt;p&gt;处理器实际上对寄存器中的值执行一般简单的操作。这些值被读取（或写入）到内存中，每个进程都分配有内核跟踪的内存。&lt;/p&gt;
&lt;p&gt;因此，方程式的另一面是跟踪寄存器。当当前正在运行的进程放弃处理器以便其他进程可以运行时，它需要保存其当前状态。同样，当进程有更多时间在 CPU 上运行时，我们需要能够恢复此状态。为此，操作系统需要将 CPU 寄存器的副本存储到内存中。当该进程再次运行时，操作系统会将寄存器值从内存中复制回 CPU 寄存器中，而该进程将立即从中断处返回。&lt;/p&gt;
&lt;h2 id=&#34;内核状态kernel-state&#34;&gt;内核状态（Kernel State）&lt;/h2&gt;
&lt;p&gt;在内部，内核需要跟踪每个进程的许多元素。操作系统要跟踪的另一个重要元素是进程状态。如果该进程当前正在运行，则使其处于运行状态是有意义的。但是，如果进程请求从磁盘读取文件，则从内存层次结构中我们知道这可能会花费大量时间。该进程应该放弃其当前执行以允许另一个进程运行，但是内核不必让该进程再次运行，直到磁盘中的数据在内存中可用为止。因此，它可以将进程标记为磁盘等待（或类似），直到数据准备就绪为止。&lt;/p&gt;
&lt;p&gt;一些过程比其他过程更重要，并且具有更高的优先级。请参阅下面有关调度程序的讨论。内核可以保留有关每个进程行为的统计信息，这有助于其决定进程的行为。例如，它主要是从磁盘读取还是主要是 CPU 密集型操作。&lt;/p&gt;
&lt;h1 id=&#34;内存memory&#34;&gt;内存（Memory）&lt;/h1&gt;
&lt;p&gt;所有程序代码以及变量和任何其他分配的存储都存储在该存储器中。内存的一部分可以在进程之间共享（称为共享内存）。在较早版本的操作系统中执行原始操作后，通常会看到称为系统五共享内存（SysV SHM）的信息。进程可以利用的另一个重要概念是将磁盘上的文件映射到内存。这意味着不必打开文件并使用诸如 &lt;code&gt;read()&lt;/code&gt; 和 &lt;code&gt;write()&lt;/code&gt; 之类的命令，文件看起来就像是其他任何类型的 RAM。映射区域具有诸如读取，写入和执行之类的权限，需要对其进行跟踪。众所周知，维护安全性和稳定性是操作系统的工作，因此它需要检查进程是否尝试写入只读区域并返回错误。&lt;/p&gt;
&lt;p&gt;一个过程可以进一步分为代码和数据部分。程序代码和数据应分开保存，因为它们需要与操作系统不同的权限，并且分开可以促进代码共享（如您稍后所见）。操作系统需要授予程序代码读取和执行的权限，但通常不予写入。另一方面，数据（变量）需要读写权限，但不能执行。&lt;/p&gt;
&lt;h2 id=&#34;the-stack&#34;&gt;The Stack&lt;/h2&gt;
&lt;p&gt;进程的另一个非常重要的部分是称为栈的内存区域。这可以视为流程数据部分的一部分，并且与任何程序的执行都密切相关。栈是通用的数据结构，其工作方式与一堆板块完全相同。您可以推动一个元素（将一个元素放在一叠元素的顶部），然后成为顶部元素，或者您可以弹出一个元素（取下元素，露出前一个元素）。&lt;/p&gt;
&lt;p&gt;栈是函数调用的基础。每次调用一个函数都会得到一个新的栈框架。这是一个内存区域，通常至少包含完成后要返回的地址，函数的输入参数和局部变量的空间。按照惯例，栈通常会变小。这意味着栈从内存中的高地址开始，然后逐渐降低。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/27/1nzrDS.png&#34; alt=&#34;The Stack&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以看到拥有栈如何带来函数的许多功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;每个函数都有其输入参数的副本。这是因为为每个函数分配了一个新的栈帧，其参数位于新的内存区域中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这就是为什么在函数内部定义的变量无法被其他函数看到的原因。全局变量（可以通过任何函数看到）都保存在数据存储器的单独区域中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这有助于递归调用。这意味着一个函数可以自由地再次调用自身，因为将为其所有局部变量创建一个新的栈框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;每个帧都包含要返回的地址。C 仅允许从函数返回单个值，因此按照惯例，该值将在指定的寄存器中而不是栈中返回给调用函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于每一帧都引用了它之前的那一帧，因此调试器可以向后“遍历”指针，跟随指针到达栈。由此可以生成栈跟踪，该跟踪向您显示调用该函数的所有函数。这对于调试非常有用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;您可以看到函数的工作方式完全适合栈的性质。任何函数都可以调用任何其他函数，然后成为其他函数（放在栈顶）。最终，该函数将返回到调用它的函数（将自身移出栈）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈的确会使调用函数变慢，因为必须将值移出寄存器并移入内存。有些体系结构允许参数直接在寄存器中传递。但是，为了保持每个函数获得每个参数的唯一副本的语义，寄存器必须旋转。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;您可能听说过术语栈溢出。这是通过传递伪造的值来入侵系统的一种常见方法。如果您是程序员，则可以接受对栈变量的任意输入（例如，从键盘或通过网络读取），则需要明确说明数据的大小。允许不检查任何数量的数据将仅覆盖内存。通常，这会导致崩溃，但是有些人意识到，如果函数写满了足以在栈帧的返回地址部分中放置特定值的内存，则函数完成时将返回而不是返回正确的位置（从），他们可以使其返回到刚发送的数据中。如果该数据包含会破坏系统的二进制可执行代码（例如，以 root 权限为用户启动终端），则说明您的计算机已受到威胁。发生这种情况是因为栈向下增长，但是数据是“向上”读取的（即从较低地址到较高地址）。有几种解决方法：首先，作为程序员，您必须确保始终检查要接收到的数据量。操作系统可以通过确保栈被标记为不可执行来帮助程序员避免这种情况。也就是说，即使恶意用户试图将某些代码传递到您的程序中，处理器也不会运行任何代码。现代体系结构和操作系统支持此功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈最终由编译器管理，因为它负责生成程序代码。对于操作系统来说，栈就像该进程的任何其他内存区域一样。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了跟踪栈的当前增长，硬件将寄存器定义为栈指针。编译器（或编程器，在用汇编器编写时）使用该寄存器来跟踪栈的当前顶部。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; $ cat sp.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    void &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;void&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            int &lt;span class=&#34;nv&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 100&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;         int &lt;span class=&#34;nv&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 200&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            int &lt;span class=&#34;nv&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; 300&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    $ gcc -fomit-frame-pointer -S sp.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    $ cat sp.s
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            .file   &lt;span class=&#34;s2&#34;&gt;&amp;#34;sp.c&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            .text
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    .globl &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;         .type   &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;, @function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            subl    &lt;span class=&#34;nv&#34;&gt;$16&lt;/span&gt;, %esp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            movl    &lt;span class=&#34;nv&#34;&gt;$100&lt;/span&gt;, 4&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%esp&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            movl    &lt;span class=&#34;nv&#34;&gt;$200&lt;/span&gt;, 8&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%esp&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;m&#34;&gt;20&lt;/span&gt;         movl    &lt;span class=&#34;nv&#34;&gt;$300&lt;/span&gt;, 12&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;%esp&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            addl    &lt;span class=&#34;nv&#34;&gt;$16&lt;/span&gt;, %esp
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            ret
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            .size   &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;, .-function
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            .ident  &lt;span class=&#34;s2&#34;&gt;&amp;#34;GCC: (GNU) 4.0.2 20050806 (prerelease) (Debian 4.0.1-4)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt;         .section        .note.GNU-stack,&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,@progbits
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面我们展示了一个在栈上分配三个变量的简单函数。该反汇编说明了在 x86 体系结构上使用栈指针。首先，我们在栈上为局部变量分配一些空间。由于栈变小，我们从栈指针中保存的值中减去。值 16 是一个足以容纳我们的局部变量的值，但可能不完全是所需的大小（例如，对于 3 个 4 字节的 int 值，我们实际上只需要 12 个字节，而不是 16 个）就可以保持内存中栈的对齐 编译器要求的特定边界。&lt;/p&gt;
&lt;p&gt;然后，我们将这些值移动到栈存储器中（并在实函数中使用它们）。最后，在返回父函数之前，我们通过将栈指针移回开始之前的位置来“弹出”栈中的值。&lt;/p&gt;
&lt;h2 id=&#34;the-heap&#34;&gt;The Heap&lt;/h2&gt;
&lt;p&gt;堆是由进程管理的用于动态分配内存的内存区域。这适用于在编译时不知道其内存要求的变量。堆的底部称为 brk，因此被称为对其进行修改的系统调用。通过使用 brk 调用向下扩展区域，进程可以请求内核分配更多的内存供其使用。&lt;/p&gt;
&lt;p&gt;堆通常由 malloc 库调用管理。通过允许程序员简单地分配和释放（通过 free 调用）堆内存，这使程序员易于管理堆。malloc 可以使用诸如伙伴分配器之类的方案来管理用户的堆内存。malloc 在分配方面也可以更聪明，并且可以使用匿名 mmap 来获得额外的进程内存。在这里，不是将文件映射到进程内存，而是直接映射系统 RAM 的区域。这样可以更有效。由于正确管理内存的复杂性，对于任何现代程序来说，都有理由直接调用 brk 是非常罕见的。&lt;/p&gt;
&lt;h2 id=&#34;内存布局&#34;&gt;内存布局&lt;/h2&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2020/01/27/1nz5uT.png&#34; alt=&#34;Process memory layout&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如我们所见，一个进程分配了较小的内存区域，每个区域都有特定的用途。上面给出了内核如何在内存中安排进程的示例。从顶部开始，内核会在进程的顶部为其自身保留一些内存（我们通过虚拟内存了解如何在所有进程之间实际共享此内存）。在其下方是用于映射文件和库的空间。在堆栈的下面，在堆栈的下面。底部是程序映像，是从磁盘上的可执行文件加载的。在后面的章节中，我们将仔细研究加载数据的过程。&lt;/p&gt;
&lt;h1 id=&#34;进程上下文&#34;&gt;进程上下文&lt;/h1&gt;
&lt;p&gt;进程是操作系统对一个正在运行的程序的一种抽象，在一个系统上可以同时运行多个进程，而每个进程都好像在独占地使用硬件。所谓的并发运行，则是说一个进程的指令和另一个进程的指令是交错执行的。无论是在单核还是多核系统中，可以通过处理器在进程间切换，来实现单个 CPU 看上去像是在并发地执行多个进程。操作系统实现这种交错执行的机制称为上下文切换。&lt;/p&gt;
&lt;p&gt;操作系统保持跟踪进程运行所需的所有状态信息。这种状态，也就是上下文，它包括许多信息，例如 PC 和寄存器文件的当前值，以及主存的内容。在任何一个时刻，单处理器系统都只能执行一个进程的代码。当操作系统决定要把控制权从当前进程转移到某个新进程时，就会进行上下文切换，即保存当前进程的上下文、恢复新进程的上下文，然后将控制权传递到新进程。新进程就会从上次停止的地方开始。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5803001/52271382-6fcf8580-297e-11e9-9161-de3d9461d5f4.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在《&lt;a href=&#34;https://github.com/wx-chevalier/Linux-Notes?q=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux-Notes/虚拟存储管理器&lt;/a&gt;》一节中，我们介绍过它为每个进程提供了一个假象，即每个进程都在独占地使用主存。每个进程看到的是一致的存储器，称为虚拟地址空间。其虚拟地址空间最上面的区域是为操作系统中的代码和数据保留的，这对所有进程来说都是一样的；地址空间的底部区域存放用户进程定义的代码和数据。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5803001/52272019-52032000-2980-11e9-953c-89de286e5174.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;程序代码和数据，对于所有的进程来说，代码是从同一固定地址开始，直接按照可执行目标文件的内容初始化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;堆，代码和数据区后紧随着的是运行时堆。代码和数据区是在进程一开始运行时就被规定了大小，与此不同，当调用如 malloc 和 free 这样的 C 标准库函数时，堆可以在运行时动态地扩展和收缩。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;共享库：大约在地址空间的中间部分是一块用来存放像 C 标准库和数学库这样共享库的代码和数据的区域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;栈，位于用户虚拟地址空间顶部的是用户栈，编译器用它来实现函数调用。和堆一样，用户栈在程序执行期间可以动态地扩展和收缩。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内核虚拟存储器：内核总是驻留在内存中，是操作系统的一部分。地址空间顶部的区域是为内核保留的，不允许应用程序读写这个区域的内容或者直接调用内核代码定义的函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>进程状态</title>
      <link>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/linux-notes/01.%E8%BF%9B%E7%A8%8B%E4%B8%8E%E5%A4%84%E7%90%86%E5%99%A8/%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</guid>
      <description>&lt;h1 id=&#34;进程状态&#34;&gt;进程状态&lt;/h1&gt;
&lt;p&gt;Linux 的进程状态包含了 R (TASK_RUNNING)，可执行状态、S (TASK_INTERRUPTIBLE)，可中断的睡眠状态、D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态、T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态、Z (TASK_DEAD – EXIT_ZOMBIE)，退出状态，进程成为僵尸进程、X (TASK_DEAD – EXIT_DEAD)，退出状态，进程即将被销毁。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s1.ax1x.com/2020/06/17/NAT5es.md.png&#34; alt=&#34;Linux Processes Life Cycle&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;进程状态类别&#34;&gt;进程状态类别&lt;/h1&gt;
&lt;h2 id=&#34;r-task_running可执行状态&#34;&gt;R (TASK_RUNNING)，可执行状态&lt;/h2&gt;
&lt;p&gt;只有在该状态的进程才可能在 CPU 上运行。而同一时刻可能有多个进程处于可执行状态，这些进程的 task_struct 结构（进程控制块）被放入对应 CPU 的可执行队列中（一个进程最多只能出现在一个 CPU 的可执行队列中）。进程调度器的任务就是从各个 CPU 的可执行队列中分别选择一个进程在该 CPU 上运行。&lt;/p&gt;
&lt;h2 id=&#34;s-task_interruptible可中断的睡眠状态&#34;&gt;S (TASK_INTERRUPTIBLE)，可中断的睡眠状态&lt;/h2&gt;
&lt;p&gt;处于这个状态的进程因为等待某某事件的发生（比如等待 socket 连接、等待信号量），而被挂起。这些进程的 task_struct 结构被放入对应事件的等待队列中。当这些事件发生时（由外部中断触发、或由其他进程触发），对应的等待队列中的一个或多个进程将被唤醒。通过 ps 命令我们会看到，一般情况下，进程列表中的绝大多数进程都处于 TASK_INTERRUPTIBLE 状态（除非机器的负载很高）。&lt;/p&gt;
&lt;h2 id=&#34;d-task_uninterruptible不可中断的睡眠状态&#34;&gt;D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态&lt;/h2&gt;
&lt;p&gt;与 TASK_INTERRUPTIBLE 状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的并不是 CPU 不响应外部硬件的中断，而是指进程不响应异步信号。&lt;/p&gt;
&lt;p&gt;TASK_UNINTERRUPTIBLE 状态存在的意义就在于，内核的某些处理流程是不能被打断的。如果响应异步信号，程序的执行流程中就会被插入一段用于处理异步信号的流程（这个插入的流程可能只存在于内核态，也可能延伸到用户态）在进程对某些硬件进行操作时（比如进程调用 read 系统调用对某个设备文件进行读操作，而 read 系统调用最终执行到对应设备驱动的代码，并与对应的物理设备进行交互），可能需要使用 TASK_UNINTERRUPTIBLE 状态对进程进行保护，以避免进程与设备交互的过程被打断，造成设备陷入不可控的状态。这种情况下的 TASK_UNINTERRUPTIBLE 状态总是非常短暂的，通过 ps 命令基本上不可能捕捉到。&lt;/p&gt;
&lt;h2 id=&#34;t-task_stopped-or-task_traced暂停状态或跟踪状态&#34;&gt;T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态&lt;/h2&gt;
&lt;p&gt;向进程发送一个 SIGSTOP 信号，它就会因响应该信号而进入 TASK_STOPPED 状态（除非该进程本身处于 TASK_UNINTERRUPTIBLE 状态而不响应信号）。SIGSTOP 与 SIGKILL 信号一样，是非常强制的。不允许用户进程通过 signal 系列的系统调用重新设置对应的信号处理函数。向进程发送一个 SIGCONT 信号，可以让其从 TASK_STOPPED 状态恢复到 TASK_RUNNING 状态。&lt;/p&gt;
&lt;p&gt;当进程正在被跟踪时，它处于 TASK_TRACED 这个特殊的状态。“正在被跟踪”指的是进程暂停下来，等待跟踪它的进程对它进行操作。比如在 gdb 中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于 TASK_TRACED 状态。而在其他时候，被跟踪的进程还是处于前面提到的那些状态。对于进程本身来说，TASK_STOPPED 和 TASK_TRACED 状态很类似，都是表示进程暂停下来。&lt;/p&gt;
&lt;h2 id=&#34;z-task_dead--exit_zombie退出状态进程成为僵尸进程&#34;&gt;Z (TASK_DEAD – EXIT_ZOMBIE)，退出状态，进程成为僵尸进程&lt;/h2&gt;
&lt;p&gt;进程在退出的过程中，处于 TASK_DEAD 状态。在这个退出过程中，进程占有的所有资源将被回收，除了 task_struct 结构（以及少数资源）以外。于是进程就只剩下 task_struct 这么个空壳，故称为僵尸。之所以保留 task_struct，是因为 task_struct 里面保存了进程的退出码、以及一些统计信息。而其父进程很可能会关心这些信息。比如在 shell 中，&lt;code&gt;$?&lt;/code&gt; 变量就保存了最后一个退出的前台进程的退出码，而这个退出码往往被作为 if 语句的判断条件。&lt;/p&gt;
&lt;p&gt;当然，内核也可以将这些信息保存在别的地方，而将 task_struct 结构释放掉，以节省一些空间。但是使用 task_struct 结构更为方便，因为在内核中已经建立了从 pid 到 task_struct 查找关系，还有进程间的父子关系。释放掉 task_struct，则需要建立一些新的数据结构，以便让父进程找到它的子进程的退出信息。&lt;/p&gt;
&lt;p&gt;父进程可以通过 wait 系列的系统调用（如 wait4、waitid）来等待某个或某些子进程的退出，并获取它的退出信息。然后 wait 系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉。子进程在退出的过程中，内核会给其父进程发送一个信号，通知父进程来“收尸”。这个信号默认是 SIGCHLD，但是在通过 clone 系统调用创建子进程时，可以设置这个信号。&lt;/p&gt;
&lt;p&gt;当进程退出的时候，会将它的所有子进程都托管给别的进程（使之成为别的进程的子进程）。托管给谁呢？可能是退出进程所在进程组的下一个进程（如果存在的话），或者是 1 号进程。所以每个进程、每时每刻都有父进程存在。除非它是 1 号进程。1 号进程，pid 为 1 的进程，又称 init 进程。Linux 系统启动后，第一个被创建的用户态进程就是 init 进程。它有两项使命：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;执行系统初始化脚本，创建一系列的进程（它们都是 init 进程的子孙）；&lt;/li&gt;
&lt;li&gt;在一个死循环中等待其子进程的退出事件，并调用 waitid 系统调用来完成“收尸”工作；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;init 进程不会被暂停、也不会被杀死（这是由内核来保证的）。它在等待子进程退出的过程中处于 TASK_INTERRUPTIBLE 状态，“收尸”过程中则处于 TASK_RUNNING 状态。&lt;/p&gt;
&lt;h2 id=&#34;x-task_dead--exit_dead退出状态进程即将被销毁&#34;&gt;X (TASK_DEAD – EXIT_DEAD)，退出状态，进程即将被销毁&lt;/h2&gt;
&lt;p&gt;而进程在退出过程中也可能不会保留它的 task_struct。比如这个进程是多线程程序中被 detach 过的进程。或者父进程通过设置 SIGCHLD 信号的 handler 为 SIG_IGN，显式的忽略了 SIGCHLD 信号。（这是 posix 的规定，尽管子进程的退出信号可以被设置为 SIGCHLD 以外的其他信号。）
此时，进程将被置于 EXIT_DEAD 退出状态，这意味着接下来的代码立即就会将该进程彻底释放。所以 EXIT_DEAD 状态是非常短暂的，几乎不可能通过 ps 命令捕捉到。&lt;/p&gt;
&lt;h1 id=&#34;进程状态变迁&#34;&gt;进程状态变迁&lt;/h1&gt;
&lt;h2 id=&#34;初始状态&#34;&gt;初始状态&lt;/h2&gt;
&lt;p&gt;进程是通过 fork 系列的系统调用（fork、clone、vfork）来创建的，内核（或内核模块）也可以通过 kernel_thread 函数创建内核进程。这些创建子进程的函数本质上都完成了相同的功能——将调用进程复制一份，得到子进程。（可以通过选项参数来决定各种资源是共享、还是私有。）&lt;/p&gt;
&lt;p&gt;那么既然调用进程处于 TASK_RUNNING 状态（否则，它若不是正在运行，又怎么进行调用？），则子进程默认也处于 TASK_RUNNING 状态。另外，在系统调用调用 clone 和内核函数 kernel_thread 也接受 CLONE_STOPPED 选项，从而将子进程的初始状态置为 TASK_STOPPED。&lt;/p&gt;
&lt;h2 id=&#34;调度状态&#34;&gt;调度状态&lt;/h2&gt;
&lt;p&gt;进程自创建以后，状态可能发生一系列的变化，直到进程退出。而尽管进程状态有好几种，但是进程状态的变迁却只有两个方向——从 TASK_RUNNING 状态变为非 TASK_RUNNING 状态、或者从非 TASK_RUNNING 状态变为 TASK_RUNNING 状态。也就是说，如果给一个 TASK_INTERRUPTIBLE 状态的进程发送 SIGKILL 信号，这个进程将先被唤醒（进入 TASK_RUNNING 状态），然后再响应 SIGKILL 信号而退出（变为 TASK_DEAD 状态）。并不会从 TASK_INTERRUPTIBLE 状态直接退出。进程从非 TASK_RUNNING 状态变为 TASK_RUNNING 状态，是由别的进程（也可能是中断处理程序）执行唤醒操作来实现的。执行唤醒的进程设置被唤醒进程的状态为 TASK_RUNNING，然后将其 task_struct 结构加入到某个 CPU 的可执行队列中。于是被唤醒的进程将有机会被调度执行。&lt;/p&gt;
&lt;p&gt;而进程从 TASK_RUNNING 状态变为非 TASK_RUNNING 状态，则有两种途径：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;响应信号而进入 TASK_STOPED 状态、或 TASK_DEAD 状态；&lt;/li&gt;
&lt;li&gt;执行系统调用主动进入 TASK_INTERRUPTIBLE 状态（如 nanosleep 系统调用）、或 TASK_DEAD 状态（如 exit 系统调用）；或由于执行系统调用需要的资源得不到满足，而进入 TASK_INTERRUPTIBLE 状态或 TASK_UNINTERRUPTIBLE 状态（如 select 系统调用）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;显然，这两种情况都只能发生在进程正在 CPU 上执行的情况下。&lt;/p&gt;
&lt;h1 id=&#34;僵尸进程&#34;&gt;僵尸进程&lt;/h1&gt;
&lt;p&gt;对于正常的使用情况，子进程的创建一般需要父进程通过系统调用 wait() 或者 waitpid() 来等待子进程结束，从而回收子进程的资源。除了这种方式外，还可以通过异步的方式来进行回收，这种方式的基础是子进程结束之后会向父进程发送 SIGCHLD 信号，基于此父进程注册一个 SIGCHLD 信号的处理函数来进行子进程的资源回收就可以了。&lt;/p&gt;
&lt;p&gt;僵尸进程的最大危害是对资源的一种永久性占用，比如进程号，系统会有一个最大的进程数 n 的限制，也就意味一旦 1 到 n 进程号都被占用，系统将不能创建任何进程和线程（进程和线程对于 OS 而言，使用同一种数据结构来表示，task_struct）。这个时候对于用户的一个直观感受就是 shell 无法执行任何命令，这个原因是 shell 执行命令的本质是 fork。&lt;/p&gt;
&lt;h2 id=&#34;孤儿进程&#34;&gt;孤儿进程&lt;/h2&gt;
&lt;p&gt;如果子进程先于父进程退出，并且父进程没有对子进程残留的资源进行回收的话将会产生僵尸进程。这里引申另外一种情况，父进程先于子进程退出的话，那么子进程的资源谁来回收呢？&lt;/p&gt;
&lt;p&gt;父进程先于子进程退出，这个时候我们一般将还在运行的子进程称为孤儿进程，但是实际上孤儿进程并没有一个明确的定义，他的状态还是处于上面讨论的几种进程状态中。那么孤儿进程的资源谁来回收呢？类 Unix 系统针对这种情况会将这些孤儿进程的父进程置为 1 号进程也就是 systemd 进程，然后由 systemd 来对孤儿进程的资源进行回收。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
