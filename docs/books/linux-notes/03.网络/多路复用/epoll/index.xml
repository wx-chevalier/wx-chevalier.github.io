<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>epoll | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/linux-notes/03.%E7%BD%91%E7%BB%9C/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/epoll/</link><atom:link href="https://ng-tech.icu/books/linux-notes/03.%E7%BD%91%E7%BB%9C/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/epoll/index.xml" rel="self" type="application/rss+xml"/><description>epoll</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>epoll</title><link>https://ng-tech.icu/books/linux-notes/03.%E7%BD%91%E7%BB%9C/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/epoll/</link></image><item><title>epoll 函数使用</title><link>https://ng-tech.icu/books/linux-notes/03.%E7%BD%91%E7%BB%9C/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/epoll/epoll-%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/linux-notes/03.%E7%BD%91%E7%BB%9C/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/epoll/epoll-%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</guid><description>&lt;h1 id="函数分析">函数分析&lt;/h1>
&lt;h2 id="int-epoll_createint-size">int epoll_create(int size);&lt;/h2>
&lt;p>创建一个 epoll 的句柄，size 用来告诉内核这个监听的数目一共有多大。这个 参数不同于 select()中的第一个参数，给出最大监听的 fd+1 的值。需要注意的是，当创建好 epoll 句柄后，它就是会占用一个 fd 值，在 linux 下如果查看/proc/进程 id/fd/，是能够看到这个 fd 的，所以在使用完 epoll 后，必须调用 close()关闭，否则可能导致 fd 被 耗尽。&lt;/p>
&lt;h2 id="int-epoll_ctlint-epfd-int-op-int-fd-struct-epoll_event-event">int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);&lt;/h2>
&lt;p>epoll 的事件注册函数，它不同与 select()是在监听事件时告诉内核要监听什么类型的事件，而是在这里先注册要监听的事件类型。第一个参数是 epoll_create()的返回值，第二个参数表示动作，用三个宏来表示：&lt;/p>
&lt;ul>
&lt;li>EPOLL_CTL_ADD：注册新的 fd 到 epfd 中；&lt;/li>
&lt;li>EPOLL_CTL_MOD：修改已经注册的 fd 的监听事件；&lt;/li>
&lt;li>EPOLL_CTL_DEL：从 epfd 中删除一个 fd；&lt;/li>
&lt;/ul>
&lt;p>第三个参数是需要监听的 fd，第四个参数是告诉内核需要监听什么事，struct epoll_event 结构如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">union&lt;/span> &lt;span class="n">epoll_data&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__uint32_t&lt;/span> &lt;span class="n">u32&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__uint64_t&lt;/span> &lt;span class="n">u64&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="kt">epoll_data_t&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">epoll_event&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">__uint32_t&lt;/span> &lt;span class="n">events&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* Epoll events */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">epoll_data_t&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* User data variable */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>events 可以是以下几个宏的集合：&lt;/p>
&lt;ul>
&lt;li>EPOLLIN：表示对应的文件描述符可以读(包括对端 SOCKET 正常关闭)；&lt;/li>
&lt;li>EPOLLOUT：表示对应的文件描述符可以写；&lt;/li>
&lt;li>EPOLLPRI：表示对应的文件描述符有紧急的数据可读(这里应该表示有带外数据到来)；&lt;/li>
&lt;li>EPOLLERR：表示对应的文件描述符发生错误；&lt;/li>
&lt;li>EPOLLHUP：表示对应的文件描述符被挂断；&lt;/li>
&lt;li>EPOLLET: 将 EPOLL 设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。&lt;/li>
&lt;li>EPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个 socket 的话，需要再次把这个 socket 加入到 EPOLL 队列里&lt;/li>
&lt;/ul>
&lt;h3 id="int-epoll_waitint-epfd-struct-epoll_event--events-int-maxevents-int-timeout">int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);&lt;/h3>
&lt;p>等 待事件的产生，类似于 select()调用。参数 events 用来从内核得到事件的集合，maxevents 告之内核这个 events 有多大，这个 maxevents 的值不能大于创建 epoll_create()时的 size，参数 timeout 是超时时间(毫秒，0 会立即返回，-1 将不确定，也有 说法说是永久阻塞)。该函数返回需要处理的事件数目，如返回 0 表示已超时。&lt;/p>
&lt;h2 id="处理逻辑">处理逻辑&lt;/h2>
&lt;p>使用 epoll 来实现服务端同时接受多客户端长连接数据时，的大体步骤如下：(1)使用 epoll_create 创建一个 epoll 的句柄，下例中我们命名为 epollfd。(2)使用 epoll_ctl 把服务端监听的描述符添加到 epollfd 指定的 epoll 内核事件表中，监听服务器端监听的描述符是否可读。(3)使用 epoll_wait 阻塞等待注册的服务端监听的描述符可读事件的发生。(4)当有新的客户端连接上服务端时，服务端监听的描述符可读，则 epoll_wait 返回，然后通过 accept 获取客户端描述符。(5)使用 epoll_ctl 把客户端描述符添加到 epollfd 指定的 epoll 内核事件表中，监听服务器端监听的描述符是否可读。(6)当客户端描述符有数据可读时，则触发 epoll_wait 返回，然后执行读取。&lt;/p>
&lt;p>几乎所有的 epoll 模型编码都是基于以下模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 阻塞式等待事件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">nfds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">epoll_wait&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="mi">500&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">nfds&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="n">listenfd&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//有新的连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">connfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">accept&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listenfd&lt;/span>&lt;span class="p">,(&lt;/span>&lt;span class="n">sockaddr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">clientaddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">clilen&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//accept这个连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ev&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">connfd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ev&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">EPOLLIN&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">EPOLLET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">epoll_ctl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">EPOLL_CTL_ADD&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">connfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ev&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//将新的fd添加到epoll的监听队列中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">EPOLLIN&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="c1">//接收到数据，读socket
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">read&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sockfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">line&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MAXLINE&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="c1">//读
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ev&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">md&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//md为自定义类型，添加数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ev&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">EPOLLOUT&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">EPOLLET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">epoll_ctl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">EPOLL_CTL_MOD&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sockfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ev&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="c1">//修改标识符，等待下一个循环时发送数据，异步处理的精髓
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">EPOLLOUT&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//有数据待发送，写socket
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">myepoll_data&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">md&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">myepoll_data&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//取数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">sockfd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">md&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">send&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">sockfd&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">md&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">md&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">);&lt;/span> &lt;span class="c1">//发送数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">ev&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">sockfd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ev&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">events&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">EPOLLIN&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="n">EPOLLET&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">epoll_ctl&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">epfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">EPOLL_CTL_MOD&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">sockfd&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ev&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//修改标识符，等待下一个循环时接收数据
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//其他的处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>