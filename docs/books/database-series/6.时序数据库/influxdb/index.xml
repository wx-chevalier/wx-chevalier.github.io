<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>InfluxDB | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/</link><atom:link href="https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/index.xml" rel="self" type="application/rss+xml"/><description>InfluxDB</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>InfluxDB</title><link>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/</link></image><item><title>部署配置</title><link>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/%E9%83%A8%E7%BD%B2%E9%85%8D%E7%BD%AE/</guid><description>&lt;h1 id="influxdb-部署配置">InfluxDB 部署配置&lt;/h1>
&lt;h1 id="centos">CentOS&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF | sudo tee /etc/yum.repos.d/influxdb.repo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">[influxdb]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">name = InfluxDB Repository - RHEL \$releasever
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">baseurl = https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">enabled = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">gpgcheck = 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">gpgkey = https://repos.influxdata.com/influxdb.key
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一旦加到了 yum 源里面，就可以运行下面的命令来安装和启动 InfluxDB 服务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo yum install influxdb
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="kubernetes">Kubernetes&lt;/h1></description></item><item><title>存储引擎</title><link>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid><description>&lt;h1 id="存储引擎">存储引擎&lt;/h1>
&lt;p>时序数据库的存储引擎主要需满足以下三个主要场景的性能需求：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>大批量的时序数据写入的高性能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>直接根据时间线(即 Influxdb 中的 Serieskey)在指定时间戳范围内扫描数据的高性能&lt;/p>
&lt;/li>
&lt;li>
&lt;p>间接通过 measurement 和部分 tag 查询指定时间戳范围内所有满足条件的时序数据的高性能&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="wal-解析">WAL 解析&lt;/h1>
&lt;p>InfluxDB 写入时序数据时为了确保数据完整性和可用性，与大部分数据库产品一样，都是会先写 WAL,再写入缓存，最后刷盘。对于 InfluxDB 而言，写入时序数据的主要流程如同下图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MWlg6x.png" alt="时序数据写入流程" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>InfluxDB 对于时间线数据和时序数据本身分开，分别写入不同的 WAL 中。&lt;/p>
&lt;h2 id="索引数据的-wal">索引数据的 WAL&lt;/h2>
&lt;p>由于 InfluxDB 支持对 Measurement，TagKey，TagValue 的删除操作，当然随着时序数据的不断写入，自然也包括 增加新的时间线，因此索引数据的 WAL 会区分当前所做的操作具体是什么，它的 WAL 的结构如下图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MWyEN9.md.png" alt="索引数据的 WAL" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="时序数据的-wal">时序数据的 WAL&lt;/h2>
&lt;p>由于 InfluxDB 对于时序数据的写操作永远只有单纯写入，因此它的 Entry 不需要区分操作种类，直接记录写入的数据即可：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MWync6.png" alt="时序数据的 WAL" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="tsmfile-解析">TSMFile 解析&lt;/h1>
&lt;p>TSMFile 是 InfluxDB 对于时序数据的存储方案。在文件系统层面，每一个 TSMFile 对应了一个 Shard。TSMFile 的存储结构如下图所示:&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MWyQBD.md.png" alt="TSMFile" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>其特点是在一个 TSMFile 中将 时序数据（i.e Timestamp + Field value）保存在数据区；将 Serieskey 和 Field Name 的信息保存在索引区，通过一个基于 Serieskey + Fieldkey 构建的形似 B+tree 的文件内索引快速定位时序数据所在的数据块。在当前版本中，单个 TSMFile 的最大长度为 2GB，超过时即使是同一个 Shard，也会继续新开一个 TSMFile 保存数据。本文的介绍出于简单化考虑，以下内容不考虑同一个 Shard 的 TSMFile 分裂的场景。&lt;/p>
&lt;h2 id="索引块的构成">索引块的构成&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MWys4s.png" alt="索引块的构成" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>其中索引条目在 InfluxDB 的源码中被称为 directIndex。在 TSMFile 中，索引块是按照 Serieskey + Fieldkey 排序 后组织在一起的。&lt;/p>
&lt;ol>
&lt;li>根据用户指定的时间线（Serieskey）以及 Field 名 在 &lt;strong>索引区&lt;/strong> 利用二分查找找到指定的 Serieskey+FieldKey 所处的 索引数据块&lt;/li>
&lt;li>根据用户指定的时间戳范围在 索引数据块 中查找数据落在哪个（或哪几个）索引条目&lt;/li>
&lt;li>将找到的索引条目对应的时序数据块加载到内存中进行进一步的 Scan&lt;/li>
&lt;/ol>
&lt;p>上述的 1，2，3 只是简单化地介绍了查询机制，实际的实现中还有类似扫描的时间范围跨索引块等一系列复杂场景。&lt;/p>
&lt;h2 id="时序数据的存储">时序数据的存储&lt;/h2>
&lt;p>同一个 Serieskey + Fieldkey 的 所有时间戳 - Field 值对被拆分开，分成两个区：Timestamps 区和 Value 区分别进行存储。它的目的是：实际存储时可以分别对时间戳和 Field 值按不同的压缩算法进行存储以减少时序数据块的大小。采用的压缩算法如下所示：&lt;/p>
&lt;ul>
&lt;li>Timestamp：&lt;a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf" target="_blank" rel="noopener">Delta-of-delta encoding&lt;/a>&lt;/li>
&lt;li>Field Value：由于单个数据块的 Field Value 必然数据类型相同，因此可以集中按数据类型采用不同的压缩算法
&lt;ul>
&lt;li>Float 类: &lt;a href="http://www.vldb.org/pvldb/vol8/p1816-teller.pdf" target="_blank" rel="noopener">Gorrila&amp;rsquo;s Float Commpression&lt;/a>&lt;/li>
&lt;li>Integer 类型: Delta Encoding + Zigzag Conversion + RLE / Simple8b / None&lt;/li>
&lt;li>String 类型: &lt;a href="https://github.com/golang/snappy" target="_blank" rel="noopener">Snappy Compression&lt;/a>&lt;/li>
&lt;li>Boolean 类型: Bit packing&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>做查询时，当利用 TSMFile 的索引找到文件中的时序数据块时，将数据块载入内存并对 Timestamp 以及 Field Value 进行解压缩后以便继续后续的查询操作。&lt;/p>
&lt;h1 id="tsifile-解析">TSIFile 解析&lt;/h1>
&lt;p>如果查询时用户并没有按预期按照 Serieskey 来指定查询条件，而是指定了更加复杂的条件，该如何确保它的查询性能？通常情况下，这个问题的解决方案是依赖倒排索引(Inverted Index)。InfluxDB 的倒排索引依赖于下述两个数据结构：&lt;/p>
&lt;ul>
&lt;li>&lt;code>map&amp;lt;SeriesID, SeriesKey&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>map&amp;lt;tagkey, map&amp;lt;tagvalue, List&amp;lt;SeriesID&amp;gt;&amp;gt;&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>它们在内存中展现如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MW6eaQ.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MW6uPs.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>但是在实际生产环境中，由于用户的时间线规模会变得很大，因此会造成倒排索引使用的内存过多，所以后来 InfluxDB 又引入了 TSIFile。TSIFile 的整体存储机制与 TSMFile 相似，也是以 Shard 为单位生成一个 TSIFile。&lt;/p></description></item><item><title>数据模型</title><link>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/database-series/6.%E6%97%B6%E5%BA%8F%E6%95%B0%E6%8D%AE%E5%BA%93/influxdb/%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h1 id="数据模型">数据模型&lt;/h1>
&lt;p>在 InfluxDB 中，时序数据支持多值模型，它的一条典型的时间点数据如下所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/20/MWi1n1.png" alt="InfluxDB 数据模型" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>measurement: 指标对象，也即一个数据源对象。每个 measurement 可以拥有一个或多个指标值，也即下文所述的 field。在实际运用中，可以把一个现实中被检测的对象（如：“cpu”）定义为一个 measurement&lt;/p>
&lt;/li>
&lt;li>
&lt;p>tags: 概念等同于大多数时序数据库中的 tags, 通常通过 tags 可以唯一标示数据源。每个 tag 的 key 和 value 必须都是字符串。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>field: 数据源记录的具体指标值。每一种指标被称作一个“field”，指标值就是 “field”对应的“value”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>timestamp: 数据的时间戳。在 InfluxDB 中，理论上时间戳可以精确到 纳秒（ns）级别&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在 InfluxDB 中，measurement 的概念之上还有一个对标传统 DBMS 的 Database 的概念，逻辑上每个 Database 下面可以有多个 measurement。在单机版的 InfluxDB 实现中，每个 Database 实际对应了一个文件系统的目录。&lt;/p>
&lt;h1 id="serieskey">Serieskey&lt;/h1>
&lt;p>InfluxDB 中的 SeriesKey 的概念就是通常在时序数据库领域被称为 时间线 的概念, 一个 SeriesKey 在内存中的表示即为下述字符串(逗号和空格被转义)的字节数组(&lt;code>github.com/influxdata/influxdb/model#MakeKey()&lt;/code>)。&lt;/p>
&lt;pre tabindex="0">&lt;code>{measurement名}{tagK1}={tagV1},{tagK2}={tagV2},...
&lt;/code>&lt;/pre>&lt;p>其中，SeriesKey 的长度不能超过 65535 字节&lt;/p>
&lt;h1 id="field-类型">Field 类型&lt;/h1>
&lt;p>InfluxDB 的 Field 值支持以下数据类型:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Datatype&lt;/th>
&lt;th style="text-align:left">Size in Mem&lt;/th>
&lt;th style="text-align:left">Value Range&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">Float&lt;/td>
&lt;td style="text-align:left">8 bytes&lt;/td>
&lt;td style="text-align:left">1.797693134862315708145274237317043567981e+308 ~ 4.940656458412465441765687928682213723651e-324&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Integer&lt;/td>
&lt;td style="text-align:left">8 bytes&lt;/td>
&lt;td style="text-align:left">-9223372036854775808 ～ 9223372036854775807&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">String&lt;/td>
&lt;td style="text-align:left">0 ～ 64KB&lt;/td>
&lt;td style="text-align:left">String with length less than 64KB&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">Boolean&lt;/td>
&lt;td style="text-align:left">1 byte&lt;/td>
&lt;td style="text-align:left">true 或 false&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在 InfluxDB 中，Field 的数据类型在 &lt;code>同一Serieskey + 同一field + 同一shard&lt;/code> 范围内必须保持不变，否则写数据时会报错类型冲突。&lt;/p>
&lt;h1 id="shard">Shard&lt;/h1>
&lt;p>在 InfluxDB 中，能且只能 对一个 Database 指定一个 Retention Policy (简称:RP)。通过 RP 可以对指定的 Database 中保存的时序数据的留存时间(duration)进行设置。而 Shard 的概念就是由 duration 衍生而来。一旦一个 Database 的 duration 确定后, 那么在该 Database 的时序数据将会在这个 duration 范围内进一步按时间进行分片从而时数据分成以一个一个的 shard 为单位进行保存。&lt;/p>
&lt;p>shard 分片的时间 与 duration 之间的关系如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">Duration of RP&lt;/th>
&lt;th style="text-align:left">Shard Duration&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&amp;lt; 2 Hours&lt;/td>
&lt;td style="text-align:left">1 Hour&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&amp;gt;= 2 Hours 且 &amp;lt;= 6 Months&lt;/td>
&lt;td style="text-align:left">1 Day&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&amp;gt; 6 Months&lt;/td>
&lt;td style="text-align:left">7 Days&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>建的 Database 在未显式指定 RC 的情况下，默认的 RC 为 数据的 Duration 为永久，Shard 分片时间为 7 天。在闭源的集群版 Influxdb 中，用户可以通过 RC 规则指定数据在基于时间分片的基础上再按 SeriesKey 为单位进行进一步分片&lt;/p></description></item></channel></rss>