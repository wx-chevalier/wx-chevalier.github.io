<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>5.KeyDB | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/database-series/3.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/5.keydb/</link><atom:link href="https://ng-tech.icu/books/database-series/3.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/5.keydb/index.xml" rel="self" type="application/rss+xml"/><description>5.KeyDB</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>5.KeyDB</title><link>https://ng-tech.icu/books/database-series/3.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/5.keydb/</link></image><item><title>架构机制</title><link>https://ng-tech.icu/books/database-series/3.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/5.keydb/%E6%9E%B6%E6%9E%84%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/database-series/3.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/5.keydb/%E6%9E%B6%E6%9E%84%E6%9C%BA%E5%88%B6/</guid><description>&lt;h1 id="keydb">KeyDB&lt;/h1>
&lt;p>众所周知 Redis 是一个单线程的 KV 内存存储系统，KeyDB 项目则是从 redis fork 出来的分支，在 100% 兼容 redis API 的情况下将 redis 改造成多线程模型。&lt;/p>
&lt;h1 id="线程模型">线程模型&lt;/h1>
&lt;p>KeyDB 将 redis 原来的主线程拆分成了主线程和 worker 线程。每个 worker 线程都是 io 线程，负责监听端口，accept 请求，读取数据和解析协议。如图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/60861cd9d1a9ae528f985a89.png" alt="KeyDB 主线程与 Worker 线程示意" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>KeyDB 的多线程模型核心要点如下：&lt;/p>
&lt;ul>
&lt;li>KeyDB 使用了 SO_REUSEPORT 特性，多个线程可以绑定监听同个端口。&lt;/li>
&lt;li>每个 worker 线程做了 cpu 绑核，读取数据也使用了 SO_INCOMING_CPU 特性，指定 cpu 接收数据。&lt;/li>
&lt;li>解析协议之后每个线程都会去操作内存中的数据，由一把全局锁来控制多线程访问内存数据。&lt;/li>
&lt;/ul>
&lt;p>主线程其实也是一个 worker 线程，包括了 worker 线程的工作内容，同时也包括只有主线程才可以完成的工作内容。在 worker 线程数组中下标为 0 的就是主线程。主线程的主要工作在实现 serverCron，包括：&lt;/p>
&lt;ul>
&lt;li>处理统计&lt;/li>
&lt;li>客户端链接管理&lt;/li>
&lt;li>db 数据的 resize 和 reshard&lt;/li>
&lt;li>处理 AOF&lt;/li>
&lt;li>Replication 主备同步&lt;/li>
&lt;li>Cluster 模式下的任务&lt;/li>
&lt;/ul>
&lt;h1 id="links-管理">Links 管理&lt;/h1>
&lt;p>在 redis 中所有链接管理都是在一个线程中完成的。在 KeyDB 的设计中，每个 worker 线程负责一组链接，所有的链接插入到本线程的链接列表中维护。链接的产生、工作、销毁必须在同个线程中。每个链接新增一个字段 &lt;code>int iel; /* the event loop index we're registered with */&lt;/code>，用来表示链接属于哪个线程接管。&lt;/p>
&lt;p>KeyDB 维护了三个关键的数据结构做链接管理：&lt;/p>
&lt;ul>
&lt;li>clients_pending_write：线程专属的链表，维护同步给客户链接发送数据的队列&lt;/li>
&lt;li>clients_pending_asyncwrite：线程专属的链表，维护异步给客户链接发送数据的队列&lt;/li>
&lt;li>clients_to_close：全局链表，维护需要异步关闭的客户链接&lt;/li>
&lt;/ul>
&lt;p>分成同步和异步两个队列，是因为 redis 有些联动 api，比如 pub/sub，pub 之后需要给 sub 的客户端发送消息，pub 执行的线程和 sub 的客户端所在线程不是同一个线程，为了处理这种情况，KeyDB 将需要给非本线程的客户端发送数据维护在异步队列中。&lt;/p>
&lt;p>同步发送的逻辑比较简单，都是在本线程中完成，以下图来说明如何同步给客户端发送数据：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/KzQ282Kr/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>一个链接的创建、接收数据、发送数据、释放链接都必须在同个线程执行。异步发送涉及到两个线程之间的交互。KeyDB 通过管道在两个线程中传递消息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">int fdCmdWrite&lt;span class="p">;&lt;/span> //写管道
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">int fdCmdRead&lt;span class="p">;&lt;/span> //读管道
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>本地线程需要异步发送数据时，先检查 client 是否属于本地线程，非本地线程获取到 client 专属的线程 ID，之后给专属的线程管到发送 &lt;code>AE_ASYNC_OP::CreateFileEvent&lt;/code> 的操作，要求添加写 socket 事件。专属线程在处理管道消息时将对应的请求添加到写事件中，如图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/HnxCJhXG/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>redis 有些关闭客户端的请求并非完全是在链接所在的线程执行关闭，所以在这里维护了一个全局的异步关闭链表。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/wMGYDQQ1/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="锁机制">锁机制&lt;/h1>
&lt;p>KeyDB 实现了一套类似 spinlock 的锁机制，称之为 fastlock。fastlock 的主要数据结构有：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">ticket&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">m_active&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//解锁+1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">m_avail&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//加锁+1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">fastlock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">volatile&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">ticket&lt;/span> &lt;span class="n">m_ticket&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">volatile&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m_pidOwner&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//当前解锁的线程id
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">volatile&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">m_depth&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//当前线程重复加锁的次数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用原子操作 &lt;code>__atomic_load_2，__atomic_fetch_add，__atomic_compare_exchange&lt;/code> 来通过比较 &lt;code>m_active=m_avail&lt;/code> 判断是否可以获取锁。fastlock 提供了两种获取锁的方式：&lt;/p>
&lt;ul>
&lt;li>try_lock：一次获取失败，直接返回&lt;/li>
&lt;li>lock：忙等，每 &lt;code>1024 * 1024&lt;/code> 次忙等后使用 sched_yield 主动交出 cpu，挪到 cpu 的任务末尾等待执行。&lt;/li>
&lt;/ul>
&lt;p>在 KeyDB 中将 try_lock 和事件结合起来，来避免忙等的情况发生。每个客户端有一个专属的 lock，在读取客户端数据之前会先尝试加锁，如果失败，则退出，因为数据还未读取，所以在下个 epoll_wait 处理事件循环中可以再次处理。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/hG1F2B0W/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="active-replica">Active-Replica&lt;/h1>
&lt;p>KeyDB 实现了多活的机制，每个 replica 可设置成可写非只读，replica 之间互相同步数据。主要特性有：&lt;/p>
&lt;ul>
&lt;li>每个 replica 有个 uuid 标志，用来去除环形复制&lt;/li>
&lt;li>新增加 rreplay API，将增量命令打包成 rreplay 命令，带上本地的 uuid&lt;/li>
&lt;li>key，value 加上时间戳版本号，作为冲突校验，如果本地有相同的 key 且时间戳版本号大于同步过来的数据，新写入失败。采用当前时间戳向左移 20 位，再加上后 44 位自增的方式来获取 key 的时间戳版本号。&lt;/li>
&lt;/ul></description></item></channel></rss>