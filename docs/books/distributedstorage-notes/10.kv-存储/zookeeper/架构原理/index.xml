<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>架构原理 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/distributedstorage-notes/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</link><atom:link href="https://ng-tech.icu/books/distributedstorage-notes/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><description>架构原理</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>架构原理</title><link>https://ng-tech.icu/books/distributedstorage-notes/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</link></image><item><title>架构原理</title><link>https://ng-tech.icu/books/distributedstorage-notes/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedstorage-notes/10.kv-%E5%AD%98%E5%82%A8/zookeeper/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/%E6%9E%B6%E6%9E%84%E5%8E%9F%E7%90%86/</guid><description>&lt;h1 id="集群架构">集群架构&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0wrbva8sqj30k70ffab4.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Leader 服务器是整个 ZooKeeper 集群工作机制中的核心，其主要工作有以下两个：&lt;/p>
&lt;ul>
&lt;li>事务请求的唯一调度和处理者，保证集群事务处理的顺序性。&lt;/li>
&lt;li>集群内部各服务器的调度者。&lt;/li>
&lt;/ul>
&lt;p>从角色名字上可以看出，Follewer 服务器是 ZooKeeper 集群状态的跟随者，其主要工作有以下三个：&lt;/p>
&lt;ul>
&lt;li>处理客户端非事务请求，转发事务请求给 Leader 服务器。&lt;/li>
&lt;li>参与事务请求 Proposal 的投票。&lt;/li>
&lt;li>参与 Leader 选举投票。&lt;/li>
&lt;/ul>
&lt;p>Observer 充当了一个观察者的角色，在工作原理上基本和 Follower 一致，唯一的区别在于，它不参与任何形式的投票。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0wrbva8sqj30k70ffab4.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>在 Client 向 Follower 发出一个写请求。&lt;/li>
&lt;li>Follower 把请求转发给 Leader。&lt;/li>
&lt;li>Leader 接收到以后开始发起投票并通知 Follower 进行投票。&lt;/li>
&lt;li>Follower 把投票结果发送给 Leader。&lt;/li>
&lt;li>Leader 将结果汇总后，如果需要写入，则开始写入，同时把写入操作通知给 Follower，然后 commit。&lt;/li>
&lt;li>Follower 把请求结果返回给 Client。&lt;/li>
&lt;/ul>
&lt;h1 id="节点组件">节点组件&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0wrbva8sqj30k70ffab4.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>ServerCnxnFactory，ZooKeeper 服务端网络连接工厂。在早期版本中，ZooKeeper 都是自己实现 NIO 框架，从 3.4.0 版本开始，引入了 Netty。可以通过 zookeeper.serverCnxnFactory 来指定使用具体的实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>SessionTracker，ZooKeeper 服务端会话管理器。创建时，会初始化 expirationInterval、nextExpirationTime、sessionsWithTimeout（用于保存每个会话的超时时间），同时还会计算出一个初始化的 sessionID。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RequestProcessor，ZooKeeper 的请求处理方式是典型的责任链模式，在服务端，会有多个请求处理器依次来处理一个客户的请求。在服务器启动的时候，会将这些请求处理器串联起来形成一个请求处理链。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LearnerCnxAcceptor，Learner 服务器（等于 Follower 服务器）连接请求接收器。负责 Leader 服务器和 Follower 服务器保持连接，以确定集群机器存活情况，并处理连接请求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LearnerHandler，Leader 接收来自其他机器的连接创建请求后，会创建一个 LearnerHandler 实例。每个 LearnerHandler 实例都对应了一个 Leader 和 Learner 服务器之间的连接，其负责 Leader 和 Learner 服务器之间几乎所有的消息通信和数据同步。
ZKDatabase，ZooKeeper 内存数据库，负责管理 ZooKeeper 的所有会话记录以及 DataTree 和事务日志的存储。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>FileTxnSnapLog，ZooKeeper 上层服务和底层数据存储之间的对接层，提供了一系列的操作数据文件的接口，包括事务文件和快照数据文件。ZooKeeper 根据 zoo.cfg 文件中解析出的快照数据目录 dataDir 和事务日志目录 dataLogDir 来创建 FileTxnSnapLog。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LeaderElection，ZooKeeper 会根据 zoo.cfg 中的配置，创建相应的 Leader 选举算法实现。在 ZooKeeper 中，默认提供了三种 Leader 选举算法的实现，分别是 LeaderElection、AuthFastLeaderElection、FastLeaderElection，可以通过配置文件中 electionAlg 属性来指定，分别用 0 ~ 3 来表示。从 3.4.0 版本开始，ZooKeeper 废弃了前两种算法，只支持 FastLeaderEletion 选举算法。&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>