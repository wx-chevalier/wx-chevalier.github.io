<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MVCC | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/mvcc/</link><atom:link href="https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/mvcc/index.xml" rel="self" type="application/rss+xml"/><description>MVCC</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>MVCC</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/mvcc/</link></image><item><title>MVCC 实现</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/mvcc/mvcc-%E5%AE%9E%E7%8E%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/mvcc/mvcc-%E5%AE%9E%E7%8E%B0/</guid><description>&lt;h1 id="锁与事务">锁与事务&lt;/h1>
&lt;p>InnoDB 采用的是两阶段锁定协议，事务执行过程中，根据需要不断的加锁，最后 COMMIT 或 ROLLBACK 的时候一次性释放所有锁，实质上是一种悲观并发控制（悲观锁），而悲观锁会降低系统的并发性能。为了提高并发性能，InnoDB 同时还实现了多版本并发控制（MVCC）。&lt;/p>
&lt;h1 id="mvcc">MVCC&lt;/h1>
&lt;p>MySQL 的 Innodb 引擎支持多种事务隔离级别，而其中的 RR 级别（Repeatable-Read）就是依靠 MVCC 来实现的，普通的查询操作都是非锁定读，如果存在事务冲突，会利用 Undo Log 获取新事务操作之前的镜像返回，在读已提交的隔离级别下，会获取新事务修改前的最新的一份已经提交的数据，而在可重复读的隔离级别下，会读取该事务开始时的数据版本。当有多个事务并发操作同一行记录时，该记录会同时存在多个 Undo Log，每个 Undo Log 就是一个版本。&lt;/p>
&lt;p>所有的锁定读都是当前读，也就是读取当前记录的最新版本；对于锁定读而言，不会利用 Undo Log 读取镜像。另外所有的 insert、update、delete 操作也是当前读，update、delete 会在更新之前进行一次当前读，然后加锁，而 insert 因为会触发唯一索引检测，也会包含一个当前读。&lt;/p>
&lt;p>MySQL 中 MVCC 的版本指的是事务 ID(Transaction ID)，首先来看一下 MySQL Innodb 中行记录的存储格式，除了最基本的行信息外，还会有一些额外的字段，譬如和 MVCC 有关的字段：&lt;code>DATA_TRX_ID&lt;/code> 和 &lt;code>DATA_ROLL_PTR&lt;/code>，如下是一张表的初始信息：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Primary Key&lt;/th>
&lt;th>Time&lt;/th>
&lt;th>Name&lt;/th>
&lt;th>DATA_TRX_ID&lt;/th>
&lt;th>DATA_ROLL_PTR&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>2018-4-28&lt;/td>
&lt;td>Huan&lt;/td>
&lt;td>1&lt;/td>
&lt;td>NULL&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;code>DATA_TRX_ID&lt;/code>：最近更新这条记录的 Transaction ID，数据库每开启一个事务，事务 ID 都会增加，每个事务拿到的 ID 都不一样&lt;/li>
&lt;li>&lt;code>DATA_ROLL_PTR&lt;/code>：用来存储指向 Undo Log 中旧版本数据指针，支持了事务的回滚。&lt;/li>
&lt;/ul>
&lt;p>对于 SELECT 操作，满足以下两个条件 Innodb 会返回该行数据：&lt;/p>
&lt;ul>
&lt;li>该行的创建版本号小于等于当前版本号，用于保证在 SELECT 操作之前所有的操作已经执行落地。&lt;/li>
&lt;li>该行的删除版本号大于当前版本或者为空。删除版本号大于当前版本意味着有一个并发事务将该行删除了。&lt;/li>
&lt;/ul>
&lt;p>对于数据操作类型语句，INSERT 会将新插入的行的创建版本号设置为当前系统的版本号，DELETE 会将要删除的行的删除版本号设置为当前系统的版本号。UPDATE 则是会转换成 INSERT 与 DELETE 的组合，将旧行的删除版本号设置为当前版本号，并将新行 INSERT 同时设置创建版本号为当前版本号。其中，写操作(INSERT、DELETE 和 UPDATE)执行时，需要将系统版本号递增。由于旧数据并不真正的删除，所以必须对这些数据进行清理，Innodb 会开启一个后台线程执行清理工作，具体的规则是将删除版本号小于当前系统版本的行删除，这个过程叫做 Purge。通过 MVCC 很好的实现了事务的隔离性，可以达到 Repeated Read 级别，要实现 Serializable 还必须加锁。&lt;/p></description></item><item><title>事务日志</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/mvcc/%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E9%94%81/mvcc/%E4%BA%8B%E5%8A%A1%E6%97%A5%E5%BF%97/</guid><description>&lt;h1 id="事务日志">事务日志&lt;/h1>
&lt;p>当提交一个事务时，InnoDB 首先会把事务写入日志缓冲（Log buffer），日志缓冲把事务刷新到事务日志；然后存储引擎再把事务写入缓冲池（Buffer Pool）。由此可见，InnoDB 通过事务日志把随机 IO 变成顺序 IO,这大大的提高了 InnoDB 写入时的性能。因为把缓冲池的脏页数据刷新到磁盘可能会涉及大量随机 IO,这些随机 IO 会非常慢，通过事务日志，避开随机 IO，用顺序 IO 替代它。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/L5cLfnGn/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Innodb 日志是环行方式写的：当写到日志的尾部，会重新跳转到开头继续写，但不会覆盖还没应用到数据文件的日志记录，因为这样会清理掉已提交事务的唯一持久化记录。日志文件太小，InnoDB 将必须做更多的检查点，导致更多的日志写，在日志没有空间继续写入前，必须等待变更被应用到数据文件，写语句可能会被拖累。但日志文件太大，在崩溃恢复时 InnoDB 可能不得不做大量的工作，增加恢复时间。应该在这之间找到平衡，设置合适的日志大小。&lt;/p>
&lt;h1 id="redo-log">Redo Log&lt;/h1>
&lt;p>InnoDB 在更新数据的时候会采用 WAL 技术，也就是 Write Ahead Logging，这个日志就是 Redo Log 用来保证数据库宕机后可以通过该文件进行恢复。这个文件一般只会顺序写，只有在数据库启动的时候才会读取 Redo Log 文件看是否需要进行恢复。该文件记录了对某个数据页的物理操作，例如某个 SQL 把某一行的某个列的值改为 10，对应的 Redo Log 文件格式可能为：把第 5 个数据页中偏移量为 99 的位置写入一个值 10。Redo Log 不是无限大的，他的大小是可以配置的，并且是循环使用的，例如配置大小为 4G，一共 4 个文件，每个文件 1G。&lt;/p>
&lt;p>Redo Log 中，存储引擎首先会从第一个文件开始顺序写，写到第四个文件后在从第一个文件开始写，类似一个环，用一个后台线程把 Redo Log 里的数据同步到聚簇索引上的数据页上。首先写入 Redo Log 的时候不能将没有同步到数据页上的记录覆盖，如果碰到这种情况会停下来先进行数据页同步然后在继续写入 Redo Log。另外执行更新操作的时候，会先更新缓冲池里的数据页，然后写入 Redo Log，这个时候真正存储数据的地方还没有更新，也就是说这时候缓冲池中的数据页和磁盘不一致，这种数据页称为脏页，当脏页由于内存不足或者其他原因需要丢弃的时候，一定要先将该脏页对应的 Redo Log 刷新到磁盘里的真实数据页，不然下次查询的时候由于 Redo Log 没有同步到磁盘，而查询直接通过索引定位到数据页就会查询出脏数据。&lt;/p>
&lt;p>更新的时候先从磁盘或者缓冲池中读取对应的数据页，然后对数据页里的数据进行更改并生成 Redo Log 到对应的缓冲池（redolog buffer）进行缓存，当事务提交的时候将缓存写入到 Redo Log 的物理磁盘文件上。这里由于操作系统的文件写入 InnoDB 并没有使用 O_DIRECT 直接写入到文件，为了保证性能而是先写入操作系统的缓存，之后在进行 flush，所以事务提交的时候 InnoDB 需要在调用一次 fsync 的系统调用来确保数据落盘。&lt;/p>
&lt;p>为了提高性能 InnoDB 可以通过参数 innodb_flush_log_at_trx_commit 来控制事务提交时是否强制刷盘。默认为 1，事务每次提交都需要调用 fsync 进行刷盘，0 表示事务提交的时候不会调用 Redo Log 的文件写入，通过后台线程每秒同步一次；2 表示事务提交的时候会写入文件但是只保证写入操作系统缓存，不进行 fsync 操作。Redo Log 文件只会顺序写，所以磁盘操作性能不会太慢，所以建议生产环境都设置为 1，以防止数据库宕机导致数据丢失。&lt;/p>
&lt;h1 id="undo-log">Undo Log&lt;/h1>
&lt;p>Undo Log 存放在共享表空间中，也就是即使打开了 innodb_file_per_table 参数，所有的表的 Undo Log 都存储在同一个文件里。Undo Log 是逻辑日志，主要用于进行事务回滚与 MVCC 操作；譬如执行相反的操作回滚到之前的状态，譬如记录的和原 sql 相反的 sql，例如 insert 对应 delete，delete 对应 insert，update 对应另外一个 update。而 MVCC 是指可重复读，当一个事务需要查询某条记录，而该记录已经被其他事务修改，但该事务还没提交，而当前事务可以通过 Undo Log 计算到之前的值。&lt;/p>
&lt;p>Undo Log 也是需要在执行 update 语句的时候在事务提交前需要写入到文件的。另外 Undo Log 的写入也会有对应的 Redo Log，因为 Undo Log 也需要持久化，通过 WAL 可以提高效率。这里可以总结下，在事务提交的时候要保证 Redo Log 写入到文件里，而这个 Redo Log 包含 主键索引上的数据页的修改，以及共享表空间的回滚段中 Undo Log 的插入。另外 Undo Log 的清理通过一个后台线程定时处理，清理的时候需要判断该 Undo Log 是否所有的事务都不会用到。&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html" target="_blank" rel="noopener">https://www.cnblogs.com/f-ck-need-u/archive/2018/05/08/9010872.html&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>