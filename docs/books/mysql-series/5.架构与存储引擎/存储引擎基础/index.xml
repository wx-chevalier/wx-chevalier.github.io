<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>存储引擎基础 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/</link><atom:link href="https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><description>存储引擎基础</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>存储引擎基础</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/</link></image><item><title>InnoDB 架构概览</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/innodb-%E6%9E%B6%E6%9E%84%E6%A6%82%E8%A7%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/innodb-%E6%9E%B6%E6%9E%84%E6%A6%82%E8%A7%88/</guid><description>&lt;h1 id="mysql-innodb-存储引擎详解">MySQL Innodb 存储引擎详解&lt;/h1>
&lt;p>InnoDB 是事务安全的存储引擎，设计上借鉴了很多 Oracle 的架构思想，一般而言，在 OLTP 应用中，InnoDB 应该作为核心应用表的首先存储引擎。InnoDB 是由第三方的 Innobase Oy 公司开发，现已被 Oracle 收购，创始人是 Heikki Tuuri，芬兰赫尔辛基人，和著名的 Linux 创始人 Linus 是校友。&lt;/p>
&lt;p>InnoDB 的整体架构分为两个部分：内存架构和磁盘架构，如图：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd14be5132923bf8a00f56.jpg" alt="InnoDB 整体架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="memory-architecture--内存架构">Memory Architecture | 内存架构&lt;/h1>
&lt;p>InnoDB 的内存主要有以下几个部分组成：缓冲池 (buffer pool)、重做日志缓冲池(Redo Log buffer）以及额外的内存池（additional memory pool），如下图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/yY9sfR7s/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>其中缓冲池占最大块内存，用来缓存各自数据，数据文件按页（每页 16K）读取到缓冲池，按最近最少使用算法（LRU）保留缓存数据。缓冲池缓冲的数据类型有：数据页、索引页、插入缓冲、自适应哈希索引、锁信息、数据字典信息等，其中数据页和索引页占了绝大部分内存。日志缓冲将重做日志信息先放入这个缓冲区，然后按一定频率（默认为 1s）将其刷新至重做日志文件。&lt;/p>
&lt;p>InnoDB 通过一些列后台线程将相关操作进行异步处理，同时借助缓冲池来减小 CPU 和磁盘速度上的差异。当查询的时候会先通过索引定位到对应的数据页，然后检测数据页是否在缓冲池内，如果在就直接返回，如果不在就去聚簇索引中通过磁盘 IO 读取对应的数据页并放入缓冲池。一个数据页会包含多个数据行。缓存池通过 LRU 算法对数据页进行管理，也就是最频繁使用的数据页排在列表前面，不经常使用的排在队尾，当缓冲池满了的时候会淘汰掉队尾的数据页。从磁盘新读取到的数据页并不会放在队列头部而是放在中间位置，这个中间位置可以通过参数进行修。缓冲池也可以设置多个实例，数据页根据哈希算法决定放在哪个缓冲池。&lt;/p>
&lt;h1 id="storage-architecture--存储结构">Storage Architecture | 存储结构&lt;/h1>
&lt;p>InnoDB 存储引擎的逻辑存储结构和 Oracle 大致相同，所有数据都被逻辑地存放在一个空间中，我们称之为表空间（tablespace）。表空间又由段（segment）、区（extent）、页（page）组成。页在一些文档中有时也称为块（block），1 extent = 64 pages，InnoDB 存储引擎的逻辑存储结构大致如图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/JzJDcSB4/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>表空间作为存储结构的最高层，所有数据都存放在表空间中，默认情况下用一个共享表空间 ibdata1，如果开启了 innodb_file_per_table 则每张表的数据将存储在单独的表空间中，也就是每张表都会有一个文件，&lt;/p>
&lt;p>表空间由各个段构成，InnoDB 存储引擎由索引组织的，而索引中的叶子节点用来记录数据，存储在数据段，而非叶子节点用来构建索引，存储在索引段。区是由连续的页组成，任何情况下一个区都是 1MB，一个区中可以有多个页，每个页默认为 16KB，所以默认情况下一个区中可以包含 64 个连续的页，页的大小是可以通过 innodb_page_size 设置，页中存储的是具体的行记录。一行记录最终以二进制的方式存储在文件里。&lt;/p>
&lt;p>从物理意义上来看，InnoDB 表由共享表空间、日志文件组（更准确地说，应该是 Redo 文件组）、表结构定义文件组成。若将 innodb_file_per_table 设置为 on，则每个表将独立地产生一个表空间文件，以 ibd 结尾，数据、索引、表的内部数据字典信息都将保存在这个单独的表空间文件中。表结构定义文件以 frm 结尾，这个是与存储引擎无关的，任何存储引擎的表结构定义文件都一样，为 .frm 文件。&lt;/p>
&lt;h2 id="行存储">行存储&lt;/h2>
&lt;p>InnoDB 引擎是面向行存储的，数据都是存储在磁盘的数据页中，数据页里面按照固定的行格式存储着每一行数据。行格式主要分为四种类型 Compact、Redundant、Dynamic 和 Compressed，默认为 Compact 格式。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd15385132923bf8a286ff.jpg" alt="Compact 行格式示意图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="磁盘预读机制和局部性原理">磁盘预读机制和局部性原理&lt;/h2>
&lt;p>当计算机访问一个数据时，不仅会加载当前数据所在的数据页，还会将当前数据页相邻的数据页一同加载到内存，磁盘预读的长度一般为页的整倍数，从而有效降低磁盘 IO 的次数。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd15cf5132923bf8a57386.jpg" alt="磁盘预读和局部性" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="磁盘和内存的交互">磁盘和内存的交互&lt;/h2>
&lt;p>MySQL 中磁盘的数据需要被交换到内存，才能完成一次 SQL 交互，大致如图：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd16285132923bf8a72b91.jpg" alt="磁盘和内存交互" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>扇区是硬盘的读写的基本单位，通常情况下每个扇区的大小是 512B&lt;/li>
&lt;li>磁盘块文件系统读写数据的最小单位，相邻的扇区组合在一起形成一个块，一般是 4KB&lt;/li>
&lt;li>页是内存的最小存储单位，页的大小通常为磁盘块大小的 2^n 倍&lt;/li>
&lt;li>InnoDB 页面的默认大小是 16KB，是数倍个操作系统的页&lt;/li>
&lt;/ul>
&lt;h2 id="随机磁盘-io">随机磁盘 IO&lt;/h2>
&lt;p>MySQL 的数据是一行行存储在磁盘上的，并且这些数据并非物理连续地存储，这样的话要查找数据就无法避免随机在磁盘上读取和写入数据。对于 MySQL 来说，当出现大量磁盘随机 IO 时，大部分时间都被浪费到寻道上，磁盘呼噜呼噜转，就是传输不了多少数据。&lt;/p>
&lt;p>一次磁盘访问由三个动作组成：&lt;/p>
&lt;ul>
&lt;li>寻道：磁头移动定位到指定磁道&lt;/li>
&lt;li>旋转：等待指定扇区从磁头下旋转经过&lt;/li>
&lt;li>数据传输：数据在磁盘与内存之间的实际传输&lt;/li>
&lt;/ul>
&lt;p>对于存储引擎来说，如何有效降低随机 IO 是个非常重要的问题。&lt;/p>
&lt;h1 id="process-architecture--进程架构">Process Architecture | 进程架构&lt;/h1>
&lt;p>默认情况下，InnoDB 的后台线程有 7 个，其中 4 个 IO thread, 1 个 Master thread, 1 个 Lock monitor thread, 一个 Error monitor thread。InnoDB 的主要工作都是在一个单独的 Master 线程里完成的。Master 线程的优先级最高，它主要分为以下几个循环：主循环（loop）、后台循环（background loop）、刷新循环（flush loop）、暂停循环（suspend loop）。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/3RVQ186k/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>其中主循环的伪代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">master_thread&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">loop&lt;/span>&lt;span class="p">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span> &lt;span class="n">thing&lt;/span> &lt;span class="n">once&lt;/span> &lt;span class="n">per&lt;/span> &lt;span class="n">second&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sleep&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="n">second&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="n">necessary&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">do&lt;/span> &lt;span class="n">things&lt;/span> &lt;span class="n">once&lt;/span> &lt;span class="n">per&lt;/span> &lt;span class="n">ten&lt;/span> &lt;span class="n">seconds&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">goto&lt;/span> &lt;span class="n">loop&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>其中每秒一次的操作包括：刷新日志缓冲区（总是），合并插入缓冲（可能），至多刷新 100 个脏数据页（可能），如果没有当前用户活动，切换至 background loop（可能）。&lt;/li>
&lt;li>其中每 10 秒一次的操作包括：合并至多 5 个插入缓冲（总是），刷新日志缓冲（总是），刷新 100 个或 10 个脏页到磁盘（总是），产生一个检查点（总是），删除无用 Undo 页（总是）。&lt;/li>
&lt;li>后台循环，若当前没有用户活动或数据库关闭时，会切换至该循环执行以下操作：删除无用的 undo 页（总是），合并 20 个插入缓冲（总是），跳回到主循环（总是），不断刷新 100 个页，直到符合条件跳转到 flush loop（可能）。&lt;/li>
&lt;li>如果 flush loop 中也没有什么事情可做，边切换到 suspend loop，将 master 线程挂起。&lt;/li>
&lt;/ul></description></item><item><title>从语句执行窥探架构设计</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/%E4%BB%8E%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E7%AA%A5%E6%8E%A2%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/%E4%BB%8E%E8%AF%AD%E5%8F%A5%E6%89%A7%E8%A1%8C%E7%AA%A5%E6%8E%A2%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h1 id="从语句执行窥探架构设计">从语句执行窥探架构设计&lt;/h1>
&lt;p>大体来说，MySQL 可以分为 Server 层和存储引擎层两部分：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/606e9b2f8322e6675ce9cd8b.jpg" alt="MySQL 架构简图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;/li>
&lt;li>存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5 版本开始成为了默认存储引擎。&lt;/li>
&lt;/ul>
&lt;p>不同的存储引擎共用一个 Server 层，也就是从连接器到执行器的部分。&lt;/p>
&lt;h1 id="查询语句的执行">查询语句的执行&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd0fd75132923bf8871929.jpg" alt="客户端与服务端交互示意图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>客户端和 MySQL 服务端的交互过程简介：&lt;/p>
&lt;ul>
&lt;li>客户端发送一条 SQL 语句给服务端，服务端的连接器先进行账号/密码、权限等环节验证，有异常直接拒绝请求。&lt;/li>
&lt;li>服务端查询缓存，如果 SQL 语句命中了缓存，则返回缓存中的结果，否则继续处理。&lt;/li>
&lt;li>服务端对 SQL 语句进行词法解析、语法解析、预处理来检查 SQL 语句的合法性。&lt;/li>
&lt;li>服务端通过优化器对之前生成的解析树进行优化处理，生成最优的物理执行计划。&lt;/li>
&lt;li>将生成的物理执行计划调用存储引擎的相关接口，进行数据查询和处理。&lt;/li>
&lt;li>处理完成后将结果返回客户端。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ngte-superbed.oss-cn-beijing.aliyuncs.com/superbed/2021/07/25/60fd10945132923bf88ad7d5.jpg" alt="服务器交互流程" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>以下面的简单查询语句为例，我们来讨论下一条 SQL 查询语句在 MySQL 中是如何被执行的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">select&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">from&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="err">；&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>连接器：首先，你会先连接到这个数据库上，这时候接待你的就是连接器。连接器负责跟客户端建立连接、获取权限、维持和管理连接。连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 show processlist 命令中看到它。客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>查询缓存：连接建立完成后，你就可以执行 select 语句了。执行逻辑就会来到第二步：查询缓存。MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。不过大多数情况下我会建议你不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分析器：如果没有命中查询缓存，就要开始真正执行语句了。首先，MySQL 需要知道你要做什么，因此需要对 SQL 语句做解析。分析器先会做“词法分析”,词法分析完后就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。如果你的语句不对，就会收到“You have an error in your SQL syntax”的错误提醒&lt;/p>
&lt;/li>
&lt;li>
&lt;p>优化器：经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join： &lt;code>mysql&amp;gt; select * from t1 join t2 using(ID) where t1.c=10 and t2.d=20;&lt;/code> 既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。 也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。 这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>执行器：MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误。如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>至此，这个整个语句就执行完成了。一条查询语句的执行过程一般是经过连接器、分析器、优化器、执行器等功能模块，最后到达存储引擎。&lt;/p>
&lt;h1 id="更新语句的执行">更新语句的执行&lt;/h1>
&lt;p>与查询流程不一样的是，更新流程还涉及两个重要的日志模块 Redo Log（重做日志）和 binlog（归档日志）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">update&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">set&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">c&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">where&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ID&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每一次的更新操作都需要写进磁盘，然后磁盘也要找到对应的那条记录，然后再更新，整个过程 IO 成本、查找成本都很高。为了解决这个问题，MySQL 的设计者采用 WAL 技术，WAL 的全称是 Write-Ahead Logging，它的关键点就是先写日志，再写磁盘。当有一条记录需要更新的时候，InnoDB 引擎就会先把记录写到 Redo Log 里面，并更新内存，这个时候更新就算完成了。同时，InnoDB 引擎会在适当的时候，将这个操作记录更新到磁盘里面，而这个更新往往是在系统比较空闲的时候做。但是 InnoDB 的 Redo Log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB,总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写。&lt;/p>
&lt;p>在进行 Redo Log 写入时，有两个重要参数的 write pos(当前记录的位置)，checkpoint 是当前要擦除的位置：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/606eacbd8322e6675cfc49d2.jpg" alt="Redo 日志中检查点与写入点" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>write pos 是当前记录的位置，一边写一边后移，写到最后一个文件末尾后就回到 0 号文件开头；&lt;/li>
&lt;li>checkpoint 是当前要擦除的位置，也是往后推移并且循环的，擦除记录前要把记录更新到数据文件；&lt;/li>
&lt;/ul>
&lt;p>write pos 和 checkpoint 之间还空着的部分，可以用来记录新的操作。如果 write pos 追上 checkpoin，表示 Redo Log 满了，这时候不能再执行新的更新，得停下来先擦掉一些记录，把 checkpoint 推进一下。有了 Redo Log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为 crash-safe(崩溃安全)。注意，Redo Log 是 InnoDB 引擎特有的日志，而 Server 层也有自己的日志，称为 binlog（归档日志）。最开始 MySQL 里并没有 InnoDB 引擎。MySQL 自带的引擎是 MyISAM，但是 MyISAM 没有 crash-safe 的能力，binlog 日志只能用于归档。而 InnoDB 是另一个公司以插件形式引入 MySQL 的，既然只依靠 Binlog 是没有 crash-safe 能力的，所以 InnoDB 使用另外一套日志系统——也就是 Redo Log 来实现 crash-safe 能力。Redo Log 与 Binlog 的主要区别如下：&lt;/p>
&lt;ul>
&lt;li>Redo Log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如 &lt;code>update T set c=c+1 where ID=2&lt;/code>。&lt;/li>
&lt;li>Redo Log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 Binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。&lt;/li>
&lt;/ul>
&lt;p>接下来执行器和 InnoDB 引擎在执行这个简单的 update 语句时的内部流程:&lt;/p>
&lt;ul>
&lt;li>执行器先找引擎取 ID=2 这一行。ID 是主键，引擎直接用树搜索找到这一行。如果 ID=2 这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。&lt;/li>
&lt;li>执行器拿到引擎给的行数据，把这个值加上 1，比如原来是 N，现在就是 N+1，得到新的一行数据，再调用引擎接口写入这行新数据。&lt;/li>
&lt;li>引擎将这行新数据更新到内存中，同时将这个更新操作记录到 redo log 里面，此时 redo log 处于 prepare 状态。然后告知执行器执行完成了，随时可以提交事务。&lt;/li>
&lt;li>执行器生成这个操作的 binlog，并把 binlog 写入磁盘。&lt;/li>
&lt;li>执行器调用引擎的提交事务接口，引擎把刚刚写入的 redo log 改成提交（commit）状态，更新完成。&lt;/li>
&lt;li>redo log 的写入拆成了两个步骤：prepare 和 commit，这就是所谓的两阶段提交。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/606eb0398322e6675cffab40.jpg" alt="数据更新流程" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>这里，总共有 3 个阶段：1-prepare 阶段，2-写 binlog，3-commit，不同阶段如果数据库崩溃了会有不同的应对：&lt;/p>
&lt;ul>
&lt;li>当在 2 之前崩溃时，重启恢复，后发现没有 commit，回滚。这里因为还未写入到 Binlog，因此使用备份恢复的时候会被忽略。&lt;/li>
&lt;li>当在 3 之前崩溃，重启恢复：虽没有 commit，但满足 prepare 和 binlog 完整，所以重启后会自动 commit。这里因为已经写入到了 Binlog，如果使用备份恢复的话可以保证数据一致性。&lt;/li>
&lt;/ul>
&lt;h1 id="事务隔离">事务隔离&lt;/h1>
&lt;p>事务就是要保证一组数据库操作，要么全部成功，要么全部失败。在 MySQL 中，事务支持是在引擎层实现的。MySQL 默认的 MyISAM 引擎就不支持事务，这也是 MyISAM 被 InnoDB 取代的重要原因之一。MySQL 中的事务管理概述了数据插入、更新、删除等流程中的引擎相关操作（使用 &lt;code>show variables like '%isolation%';&lt;/code> 查看当前设置的隔离级别），在更新语句执行时，存储引擎会分配事务 ID，开启事务，获取锁，没有获取到锁则等待。&lt;/p>
&lt;p>在实现上，数据库里面会创建一个视图，访问的时候以视图的逻辑结果为准，除了串行化”隔离级别下直接用加锁的方式来避免并行访问。在可重复读隔离级别（隔离级别相关介绍参阅《&lt;a href="https://github.com/wx-chevalier/Database-Series?q=" target="_blank" rel="noopener">Database-Series/隔离级别&lt;/a>》）下，这个视图是在事务启动时创建的，整个事务存在期间都用这个视图。在读提交隔离级别下，这个视图是在每个 SQL 语句开始执行的时候创建的。读未提交隔离级别下直接返回记录上的最新值，没有视图概念。而实际上每条记录在更新的时候都会同时记录一条回滚操作；记录上的最新值，通过回滚操作，都可以得到前一个状态的值。&lt;/p>
&lt;p>假设一个值从 1 被按顺序改成了 2、3、4，在回滚日志里面就会有类似下面的记录。不同时刻启动的事务会有不同的 read-view，同一条记录在系统中可以存在多个版本，就是数据库的多版本并发控制（MVCC）：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/607298148322e6675c7a4e2a.jpg" alt="多版本隔离" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>存储引擎对比</title><link>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/mysql-series/5.%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%9F%BA%E7%A1%80/%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E%E5%AF%B9%E6%AF%94/</guid><description>&lt;h1 id="mysql-存储引擎对比">MySQL 存储引擎对比&lt;/h1>
&lt;p>关系数据库表是用于存储和组织信息的数据结构，可以将表理解为由行和列组成的表格，类似于 Excel 的电子表格的形式。有的表简单，有的表复杂，有的表根 本不用来存储任何长期的数据，有的表读取时非常快，但是插入数据时去很差；而我们在实际开发过程中，就可能需要各种各样的表，不同的表，就意味着存储不同 类型的数据，数据的处理上也会存在着差异，那么。对于 MySQL 来说，它提供了很多种类型的存储引擎，我们可以根据对数据处理的需求，选择不同的存储引 擎，从而最大限度的利用 MySQL 强大的功能。这篇博文将总结和分析各个引擎的特点，以及适用场合，并不会纠结于更深层次的东西。&lt;/p>
&lt;p>在 MySQL 客户端中，使用以下命令可以查看 MySQL 支持的引擎。&lt;/p>
&lt;pre tabindex="0">&lt;code>show engines;
&lt;/code>&lt;/pre>&lt;h2 id="特性">特性&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>引擎/特性&lt;/th>
&lt;th>事务&lt;/th>
&lt;th>读写阻塞&lt;/th>
&lt;th>锁定&lt;/th>
&lt;th>索引&lt;/th>
&lt;th>缓存&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>MyISAM&lt;/strong>&lt;/td>
&lt;td>MyISAM 存储引擎不支持事务，所以对事务有要求的业务场景不能使用&lt;/td>
&lt;td>不仅会在写入的时候阻塞读取，MyISAM 还会在读取的时候阻塞写入，但读本身并不会阻塞另外的读&lt;/td>
&lt;td>其锁定机制是表级索引，这虽然可以让锁定的实现成本很小但是也同时大大降低了其并发性能&lt;/td>
&lt;td>存放真实数据的地址&lt;/td>
&lt;td>MyISAM 可以通过 key_buffer 缓存以大大提高访问性能减少磁盘 IO，但是这个缓存区只会缓存索引，而不会缓存数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>InnoDB&lt;/strong>&lt;/td>
&lt;td>具有较好的事务支持：支持 4 个事务隔离级别，支持多版本读&lt;/td>
&lt;td>读写阻塞与事务隔离级别相关&lt;/td>
&lt;td>其锁定机制是行级锁定，通过索引实现，全表扫描仍然会是表锁，注意间隙锁的影响&lt;/td>
&lt;td>存储的是真实的数据&lt;/td>
&lt;td>具有非常高效的缓存特性：能缓存索引，也能缓存数据&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>NDBCluster&lt;/strong>&lt;/td>
&lt;td>和 Innodb 一样，支持事务&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>新版本索引以及被索引的数据必须存放在内存中，老版本所有数据和索引必须存在与内存中&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="适用场景">适用场景&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>引擎/场景&lt;/th>
&lt;th>事务支持&lt;/th>
&lt;th>读/写比&lt;/th>
&lt;th>数据一致性&lt;/th>
&lt;th>并发&lt;/th>
&lt;th>内存&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>MyISAM&lt;/strong>&lt;/td>
&lt;td>不需要事务支持的&lt;/td>
&lt;td>以读为主，数据修改相对较小(阻塞问题)&lt;/td>
&lt;td>数据一致性要求不高&lt;/td>
&lt;td>并发相对较低(锁定机制问题)&lt;/td>
&lt;td>内存要求不大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>InnoDB&lt;/strong>&lt;/td>
&lt;td>需要事务支持(具有较好的事务特性)&lt;/td>
&lt;td>数据更新较为频繁的场景&lt;/td>
&lt;td>数据一致性要求较高&lt;/td>
&lt;td>行级锁定对高并发有很好的适应能力，但需要确保查询是通过索引完成&lt;/td>
&lt;td>硬件设备内存较大，可以利用 InnoDB 较好的缓存能力来提高内存利用率，尽可能减少磁盘 IO&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>NDBCluster&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>查询简单，过滤条件较为固定，每次请求数据量较少，又不希望自己进行水平 Sharding&lt;/td>
&lt;td>&lt;/td>
&lt;td>具有非常高的并发需求，但是单个请求的响应并不是非常的 critical&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="myisam">MyISAM&lt;/h1>
&lt;p>MyISAM 表是独立于操作系统的，这说明可以轻松地将其从 Windows 服务器移植到 Linux 服务器；每当我们建立一个 MyISAM 引擎的表时，就会在本地磁盘上建立三个文件，文件名就是表名。例如，我建立了一个 MyISAM 引擎的 tb_Demo 表，那么就会生成以下三个文件：&lt;/p>
&lt;p>1.tb_demo.frm，存储表定义；
2.tb_demo.MYD，存储数据；
3.tb_demo.MYI，存储索引。&lt;/p>
&lt;p>MyISAM 表无法处理事务，这就意味着有事务处理需求的表，不能使用 MyISAM 存储引擎。MyISAM 存储引擎特别适合在以下几种情况下使用：1.选择密集型的表。MyISAM 存储引擎在筛选大量数据时非常迅速，这是它最突出的优点。2.插入密集型的表。MyISAM 的并发插入特性允许同时选择和插入数据。例如：MyISAM 存储引擎很适合管理邮件或 Web 服务器日志数据。&lt;/p>
&lt;p>最佳实践
尽量索引(缓存机制)
调整读写优先级，根据实际需求确保重要操作更优先
启用延迟插入改善大批量写入性能
尽量顺序操作让 insert 数据都写入到尾部，减少阻塞
分解大的操作，降低单个操作的阻塞时间
降低并发数，某些高并发场景通过应用来进行排队机制
对于相对静态的数据，充分利用 Query Cache 可以极大的提高访问效率
MyISAM 的 Count 只有在全表扫描的时候特别高效，带有其他条件的 count 都需要进行实际的数据访问&lt;/p>
&lt;h1 id="innodb">InnoDB&lt;/h1>
&lt;p>InnoDB 是一个健壮的事务型存储引擎，这种存储引擎已经被很多互联网公司使用，为用户操作非常大的数据存储提供了一个强大的解决方案。我的电脑 上安装的 MySQL 5.6.13 版，InnoDB 就是作为默认的存储引擎。InnoDB 还引入了行级锁定和外键约束，在以下场合下，使用 InnoDB 是最理想的选择：1.更新密集的表。InnoDB 存储引擎特别适合处理多重并发的更新请求。2.事务。InnoDB 存储引擎是支持事务的标准 MySQL 存储引擎。3.自动灾难恢复。与其它存储引擎不同，InnoDB 表能够自动从灾难中恢复。4.外键约束。MySQL 支持外键的存储引擎只有 InnoDB。5.支持自动增加列 AUTO_INCREMENT 属性。
一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB 是不错的选择。&lt;/p>
&lt;p>最佳实践
主键尽可能小，避免给 Secondary index 带来过大的空间负担
避免全表扫描，因为会使用表锁
尽可能缓存所有的索引和数据，提高响应速度
在大批量小插入的时候，尽量自己控制事务而不要使用 autocommit 自动提交
合理设置 innodb_flush_log_at_trx_commit 参数值，不要过度追求安全性
避免主键更新，因为这会带来大量的数据移动&lt;/p>
&lt;p>InnoDB stores data in a file(s) called a tablespace. In newer versions of MySQL, you can store the data and indexes in separate files. MyISAM stores the data and indexes in two files (.MYD, .MYI). InnoDB is extremely critical about its tablespace and log files (They normally should be backed up together). You can&amp;rsquo;t just backup your data by copying files like you would with MyISAM. In some situations you can only restore a table to the server from which you backed it up!
InnoDB are built on clustered indexes and uses MVCC to achieve high concurrency. This provides very fast primary key lookups. MyISAM doesn&amp;rsquo;t support transactions, FK contraints, or row-level locks. MyISAM uses shared and exclusive locks on theentire table. However, concurrent reads &amp;amp; inserts for new rows are allowed.
InnoDB is crash safe (Assuming your flushes are truly durable on disk and not on some volatile cache). MyISAM is no where close to being crash safe. If you care about your data, use InnoDB. It might be OK to use MyISAM for read-only workloads.
InnoDB will support full-text indexes in MySQL 5.6. MyISAM currently supports this feature. Normally these type of things should be offloaded to something like aSphinx server.
InnoDB repairs are reasonably fast. MyISAM is slow and you might not get all your data back. Eek.
InnoDB requires a lot of memory (buffer pool). The data and indexes are cached in memory. Changes are written to the log buffer (physical memory) and are flushed every second to the log files (method depends on innodb_flush_log_at_trx_commit value). Having the data in memory is a huge performance boost. MyISAM only caches indexes (key_buffer_size) so that&amp;rsquo;s where you would allocate most of your memory if you&amp;rsquo;re only using MyISAM.&lt;/p>
&lt;p>To me, the most important difference is that MyISAM does not write to disk synchronously. It writes to the filesystem cache, and your operating system decides when to finally write the cache to disk. Any time you have a server reboot, you can lose some MyISAM data that you thought you had written to your database.&lt;/p>
&lt;p>Thus MyISAM is not Durable, and MyISAM tables frequently get corrupted. I wouldn&amp;rsquo;t use MyISAM for any data that is important or not easily reproducible.&lt;/p>
&lt;h1 id="memory">MEMORY&lt;/h1>
&lt;p>使用 MySQL Memory 存储引擎的出发点是速度。为得到最快的响应时间，采用的逻辑存储介质是系统内存。虽然在内存中存储表数据确实会提供很高的性能，但当 mysqld 守护进程崩溃时，所有的 Memory 数据都会丢失。获得速度的同时也带来了一些缺陷。它要求存储在 Memory 数据表里的数据使用的是长度不 变的格式，这意味着不能使用 BLOB 和 TEXT 这样的长度可变的数据类型，VARCHAR 是一种长度可变的类型，但因为它在 MySQL 内部当做长度固定不 变的 CHAR 类型，所以可以使用。
一般在以下几种情况下使用 Memory 存储引擎：1.目标数据较小，而且被非常频繁地访问。在内存中存放数据，所以会造成内存的使用，可以通过参数 max_heap_table_size 控制 Memory 表的大小，设置此参数，就可以限制 Memory 表的最大大小。2.如果数据是临时的，而且要求必须立即可用，那么就可以存放在内存表中。3.存储在 Memory 表中的数据如果突然丢失，不会对应用服务产生实质的负面影响。
Memory 同时支持哈希索引和 B 树索引。B 树索引的优于哈希索引的是，可以使用部分查询和通配查询，也可以使用&amp;lt;、&amp;gt;和&amp;gt;=等 操作符方便数据挖掘。哈希索引进行“相等比较”非常快，但是对“范围比较”的速度就慢多了，因此哈希索引值适合使用在=和&amp;lt;&amp;gt;的操作符中，不 适合在&amp;lt;或&amp;gt;操作符中，也同样不适合用在 order by 子句中。
可以在表创建时利用 USING 子句指定要使用的版本。例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">smallint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">auto_increment&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">using&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">hash&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">engine&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">memory&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述代码创建了一个表，在 username 字段上使用了 HASH 哈希索引。下面的代码就创建一个表，使用 BTREE 索引。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="line">&lt;span class="cl">&lt;span class="k">create&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">table&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">users&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">smallint&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">unsigned&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">auto_increment&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">pwd&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">varchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">15&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">not&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">null&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">index&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">using&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">btree&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">username&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">primary&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">key&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">engine&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">memory&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="merge">MERGE&lt;/h1>
&lt;p>MERGE 存储引擎是一组 MyISAM 表的组合，这些 MyISAM 表结构必须完全相同，尽管其使用不如其它引擎突出，但是在某些情况下非常有用。说 白了，Merge 表就是几个相同 MyISAM 表的聚合器；Merge 表中并没有数据，对 Merge 类型的表可以进行查询、更新、删除操作，这些操作实际上 是对内部的 MyISAM 表进行操作。Merge 存储引擎的使用场景。
对于服务器日志这种信息，一般常用的存储策略是将数据分成很多表，每个名称与特定的时间端相关。例如：可以用 12 个相同的表来存储服务器日志数据，每个表用对应各个月份的名字来命名。当有必要基于所有 12 个日志表的数据来生成报表，这意味着需要编写并更新多表查询，以反映这些表中的信息。与其编写这 些可能出现错误的查询，不如将这些表合并起来使用一条查询，之后再删除 Merge 表，而不影响原来的数据，删除 Merge 表只是删除 Merge 表的定义，对内部的表没有任何影响。&lt;/p>
&lt;h1 id="archive">ARCHIVE&lt;/h1>
&lt;p>Archive 是归档的意思，在归档之后很多的高级功能就不再支持了，仅仅支持最基本的插入和查询两种功能。在 MySQL 5.5 版以前，Archive 是不支持索引，但是在 MySQL 5.5 以后的版本中就开始支持索引了。Archive 拥有很好的压缩机制，它使用 zlib 压缩库，在记录被请求时会实时压缩，所以它经常被用来当做仓库使 用。&lt;/p>
&lt;h1 id="ndbcluster--分布式存储引擎">NDBCluster | 分布式存储引擎&lt;/h1>
&lt;p>尽可能让查询简单，避免数据的跨节点传输，尽可能满足 SQL 节点的计算性能，大一点的集群 SQL 节点会明显多余 Data 节点，在各节点之间尽可能使用万兆网络环境互联，以减少数据在网络层传输过程中的延时。&lt;/p></description></item></channel></rss>