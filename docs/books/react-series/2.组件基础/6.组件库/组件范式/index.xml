<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>组件范式 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/</link><atom:link href="https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><description>组件范式</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>组件范式</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/</link></image><item><title>Formik</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/formik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/formik/</guid><description>&lt;h1 id="formik">Formik&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@a.cagarweyne/dynamic-react-form-with-formik-4aad80ad7e5" target="_blank" rel="noopener">https://medium.com/@a.cagarweyne/dynamic-react-form-with-formik-4aad80ad7e5&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Svg</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/svg/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/svg/</guid><description>&lt;h1 id="react-中-svg-的使用">React 中 Svg 的使用&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.smooth-code.com/open-source/svgr/docs/webpack/" target="_blank" rel="noopener">https://www.smooth-code.com/open-source/svgr/docs/webpack/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>表单组件</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/%E8%A1%A8%E5%8D%95%E7%BB%84%E4%BB%B6/</guid><description>&lt;h1 id="表单组件">表单组件&lt;/h1>
&lt;h1 id="受控组件与非受控组件">受控组件与非受控组件&lt;/h1>
&lt;h1 id="常用组件">常用组件&lt;/h1>
&lt;h2 id="text">Text&lt;/h2>
&lt;h2 id="select">Select&lt;/h2>
&lt;h1 id="表单验证">表单验证&lt;/h1>
&lt;p>在我们真实的表单组件开发中，我们不可避免地需要对于用户输入的内容进行验证并且根据验证结果给予用户相关反馈提示。实际开发中，我们会使用受控组件，这样所有的表单数据都会存放于组件状态中(暂时不考虑状态存放于组件外)，我们也可以很方便地根据内部状态进行计算。譬如产品需求是唯有用户在输入有效的邮箱地址时才允许点击注册按钮，否则注册按钮处于不可点击状态，图示如下：&lt;/p>
&lt;p>我们可以使用简单的表达式来推导是否应该允许点击按钮，即仅当邮箱长度大于 0 并且密码长度大于 0 的时候才允许点击。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">password&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">isEnabled&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nx">password&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">button&lt;/span> &lt;span class="nx">disabled&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nx">isEnabled&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Sign&lt;/span> &lt;span class="nx">up&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/button&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到这里我们已经完成了最简单基础的表单验证，不过在真实工程开发中我们会遇到的最头痛的问题反而不是验证本身，而在于如何进行合适的错误反馈。常见的输入框错误反馈模式有如下几种：&lt;/p>
&lt;p>不同的产品经理、不同的产品对于这些错误反馈有不同的喜好，不过从工程的角度上我们希望尽可能地将逻辑与界面表示相分离，并且能够根据产品经理的要求迅速改变错误反馈模式与具体的样式。首先，我们需要考虑下组件内的存储错误信息的可独立于界面层的数据结构。基本的数据结构如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code>errors: {
  name: false,
  email: true,
}
&lt;/code>&lt;/pre>&lt;p>这里的&lt;code>false&lt;/code>代表某个域是验证通过的，而&lt;code>true&lt;/code>则代表某个域是有问题的。在构建了存储错误信息的数据结构之后，我们要接着讲验证的过程独立于渲染函数以使其符合单一职责原则：&lt;/p>
&lt;pre tabindex="0">&lt;code>function validate(email, password) {
  // true means invalid, so our conditions got reversed
  return {
  email: email.length === 0,
  password: password.length === 0,
  };
}
&lt;/code>&lt;/pre>&lt;p>这里的&lt;code>validate&lt;/code>函数是典型的纯函数，我们可以方便地对其进行单元测试或者重构。下面我们需要在渲染函数中调用该验证函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">errors&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">validate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">email&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">password&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在获取了错误信息后，我们还需要在按钮的属性上引用错误信息，完整的注册表单代码为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-jsx" data-lang="jsx">&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">SignUpForm&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="nx">constructor&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="kr">super&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="nx">password&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="nx">touched&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="nx">email&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="nx">password&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">handleBlur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">evt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="nx">touched&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="p">...&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">touched&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kc">true&lt;/span> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">shouldMarkError&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">hasError&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">errors&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">shouldShow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">touched&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">field&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">return&lt;/span> &lt;span class="nx">hasError&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="nx">shouldShow&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span> &lt;span class="p">};}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">&amp;lt;input
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">  className={shouldMarkError(&amp;#39;email&amp;#39;) ? &amp;#34;error&amp;#34; : &amp;#34;&amp;#34;}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">  onBlur={this.handleBlur(&amp;#39;email&amp;#39;)}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">type=&amp;#34;text&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">  placeholder=&amp;#34;Enter email&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">  value={this.state.email}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">  onChange={this.handleEmailChange}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">  /&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> 
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>列表组件</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/6.%E7%BB%84%E4%BB%B6%E5%BA%93/%E7%BB%84%E4%BB%B6%E8%8C%83%E5%BC%8F/%E5%88%97%E8%A1%A8%E7%BB%84%E4%BB%B6/</guid><description>&lt;h1 id="列表组件">列表组件&lt;/h1>
&lt;h1 id="列表渲染">列表渲染&lt;/h1>
&lt;h1 id="keys">Keys&lt;/h1>
&lt;h2 id="keyed-fragment">Keyed Fragment&lt;/h2>
&lt;p>在大部分情况下，我们可以使用&lt;code>key&lt;/code>来标识列表中的元素，不过如果我们希望将多个子列表的顺序互换，就无法直接为某个列表添加&lt;code>key&lt;/code>属性了，譬如下面这个函数式组件中：&lt;/p>
&lt;pre tabindex="0">&lt;code>function Swapper(props) {
  let children;
  if (props.swapped) {
  children = [props.rightChildren, props.leftChildren];
  } else {
  children = [props.leftChildren, props.rightChildren];
  }
  return &amp;lt;div&amp;gt;{children}&amp;lt;/div&amp;gt;;
}
&lt;/code>&lt;/pre>&lt;p>当我们修改该组件的&lt;code>swapped&lt;/code>属性时，两个子列表中的元素都会先被卸载再被挂载，而理想环境下我们应该只是将这两个子列表交换下顺序就好了。简单粗暴的方式是我们为两个子列表各包裹一层&lt;code>div&lt;/code>，然后为这两个&lt;code>div&lt;/code>添加&lt;code>key&lt;/code>属性，不过 React 提供了 &lt;a href="https://facebook.github.io/react/docs/create-fragment.html" target="_blank" rel="noopener">Keyed Fragments&lt;/a> 特性：&lt;/p>
&lt;pre tabindex="0">&lt;code>import createFragment from &amp;#39;react-addons-create-fragment&amp;#39;
function Swapper(props) {
  let children;
  if (props.swapped) {
  children = createFragment({
  right: props.rightChildren,
  left: props.leftChildren
  });
  } else {
  children = createFragment({
  left: props.leftChildren,
  right: props.rightChildren
  });
  }
  return &amp;lt;div&amp;gt;{children}&amp;lt;/div&amp;gt;;
}
&lt;/code>&lt;/pre>&lt;p>在&lt;code>createFragment&lt;/code>函数中传入的对象中的键会自动作为两个子列表的键使用，即 React 在进行渲染时会先判断是否有相同键的元素存在，如果存在则直接更改顺序，而不会经过卸载、挂载这相对繁杂的步骤。而&lt;code>createFragment&lt;/code>函数的返回值则可以当做正常的对象进行使用，我们可以使用&lt;code>React.Children&lt;/code>系列函数来对其进行操作。&lt;/p>
&lt;h1 id="react-canvas">React Canvas&lt;/h1></description></item></channel></rss>