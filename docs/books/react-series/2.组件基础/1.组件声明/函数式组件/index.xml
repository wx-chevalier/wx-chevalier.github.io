<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>函数式组件 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/1.%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/</link><atom:link href="https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/1.%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/index.xml" rel="self" type="application/rss+xml"/><description>函数式组件</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>函数式组件</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/1.%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/</link></image><item><title>React.memo</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/1.%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/react.memo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/1.%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/react.memo/</guid><description>&lt;h1 id="reactmemo">React.memo&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Generates random colours any time it&amp;#39;s called
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">randomColour&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="s2">&amp;#34;#&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nb">Math&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">random&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mh">0xffffff&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">toString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">16&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// The type of the props
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">type&lt;/span> &lt;span class="nx">ButtonProps&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ButtonHTMLAttributes&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">HTMLButtonElement&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// A memoized button with a random background colour
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">Button&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">memo&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">ButtonProps&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">button&lt;/span> &lt;span class="nx">onClick&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">onClick&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span> &lt;span class="nx">background&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">randomColour&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/button&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://dmitripavlutin.com/use-react-memo-wisely/" target="_blank" rel="noopener">https://dmitripavlutin.com/use-react-memo-wisely/&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>函数式 React 开发</title><link>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/1.%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/%E5%87%BD%E6%95%B0%E5%BC%8F-react-%E5%BC%80%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/react-series/2.%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/1.%E7%BB%84%E4%BB%B6%E5%A3%B0%E6%98%8E/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6/%E5%87%BD%E6%95%B0%E5%BC%8F-react-%E5%BC%80%E5%8F%91/</guid><description>&lt;h1 id="函数式-react-开发">函数式 React 开发&lt;/h1>
&lt;h1 id="函数式-setstate">函数式 setState&lt;/h1>
&lt;p>参考 React 官方文档中的描述，&lt;code>setState&lt;/code> 并不是立刻改变 &lt;code>this.state&lt;/code> 的值，而是创建挂起的状态事务；如果直接在 &lt;code>setState&lt;/code> 之后访问状态对象只会获得之前的值。譬如下述的代码就会存在某些错误或者预判差异：&lt;/p>
&lt;pre tabindex="0">&lt;code>updateState({target}) {
 this.setState({user: {...this.state.user, [target.name]: target.value}});
 doSomething(this.state.user) // Uh oh, setState merely schedules a state change, so this.state.user may still have old value
}
&lt;/code>&lt;/pre>&lt;p>如果我们希望去在某个状态实际更新完毕之后，执行某些操作，那么可以以如下方式使用自定义的新状态：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">updateState&lt;/span>&lt;span class="p">({&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">})&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">prevState&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">updatedUser&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{...&lt;/span>&lt;span class="nx">prevState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">target&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">value&lt;/span>&lt;span class="p">};&lt;/span> &lt;span class="c1">// use previous value in state to build new state...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="nx">doSomething&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">updatedUser&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// Now I can safely utilize the new state I&amp;#39;ve created to call other funcs...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">user&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">updatedUser&lt;/span> &lt;span class="p">};&lt;/span> &lt;span class="c1">// And what I return here will be set as the new state
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err"> &lt;/span>&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err"> &lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="高阶函数">高阶函数&lt;/h1></description></item></channel></rss>