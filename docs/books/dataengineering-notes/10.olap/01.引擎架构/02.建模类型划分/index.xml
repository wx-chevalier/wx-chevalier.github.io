<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>02.建模类型划分 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/dataengineering-notes/10.olap/01.%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84/02.%E5%BB%BA%E6%A8%A1%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/</link><atom:link href="https://ng-tech.icu/books/dataengineering-notes/10.olap/01.%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84/02.%E5%BB%BA%E6%A8%A1%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/index.xml" rel="self" type="application/rss+xml"/><description>02.建模类型划分</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>02.建模类型划分</title><link>https://ng-tech.icu/books/dataengineering-notes/10.olap/01.%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84/02.%E5%BB%BA%E6%A8%A1%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/</link></image><item><title>01.MOLAP</title><link>https://ng-tech.icu/books/dataengineering-notes/10.olap/01.%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84/02.%E5%BB%BA%E6%A8%A1%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/01.molap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/dataengineering-notes/10.olap/01.%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84/02.%E5%BB%BA%E6%A8%A1%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/01.molap/</guid><description>&lt;h1 id="molap">MOLAP&lt;/h1>
&lt;p>这应该算最传统的数仓了，1993 年 olap 概念提出来时，指的就是 MOLAP 数仓，M 即表示多维。大多数 MOLAP 产品均对原始数据进行预计算得到用户可能需要的所有结果，将其存储到优化过的多维数组中，也就是常听到的 数据立方体。&lt;/p>
&lt;p>由于所有可能结果均已计算出来并持久化存储，查询时无需进行复杂计算，且以数组形式可以进行高效的免索引数据访问，因此用户发起的查询均能够稳定地快速响应。这些结果集是高度结构化的，可以进行压缩/编码来减少存储占用空间。&lt;/p>
&lt;p>但高性能并不是没有代价的。首先，MOLAP 需要进行预计算，这会花去很多时间。如果每次写入增量数据后均要进行全量预计算，显然是低效率的，因此支持仅对增量数据进行迭代计算非常重要。其次，如果业务发生需求变更，需要进行预定模型之外新的查询操作，现有的 MOLAP 实例就无能为力了，只能重新进行建模和预计算。&lt;/p>
&lt;p>在开源软件中，由 eBay 开发并贡献给 Apache 基金会的 Kylin 即属于这类 OLAP 引擎，支持在百亿规模的数据集上进行亚秒级查询。&lt;/p>
&lt;p>下图是官方对 Kylin 的描述。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230408135854.png" alt="Apache Kylin 概览" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h4 id="代表">代表&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Kylin&lt;/strong>是完全的预计算引擎，通过枚举所有维度的组合，建立各种 Cube 进行提前聚合，以 HBase 为基础的 OLAP 引擎。&lt;/li>
&lt;li>&lt;strong>Druid&lt;/strong>则是轻量级的提前聚合(roll-up)，同时根据倒排索引以及 bitmap 提高查询效率的时间序列数据和存储引擎。&lt;/li>
&lt;/ul>
&lt;h4 id="优点">优点&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Kylin&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>支持数据规模超大(HBase)&lt;/li>
&lt;li>易用性强，支持标准 SQL&lt;/li>
&lt;li>性能很高，查询速度很快&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>Druid&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>支持的数据规模大(本地存储+DeepStorage–HDFS)&lt;/li>
&lt;li>性能高，列存压缩，预聚合加上倒排索引以及位图索引，秒级查询&lt;/li>
&lt;li>实时性高，可以通过 kafka 实时导入数据&lt;/li>
&lt;/ol>
&lt;h4 id="缺点">缺点&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Kylin&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>灵活性较弱，不支持 adhoc 查询；且没有二级索引，过滤时性能一般；不支持 join 以及对数据的更新。&lt;/li>
&lt;li>处理方式复杂，需要定义 Cube 预计算；当维度超过 20 个时，存储可能会爆炸式增长；且无法查询明细数据了；维护复杂。&lt;/li>
&lt;li>实时性很差，很多时候只能查询前一天或几个小时前的数据。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;strong>Druid&lt;/strong>&lt;/li>
&lt;/ul>
&lt;ol>
&lt;li>灵活性适中，虽然维度之间随意组合，但不支持 adhoc 查询，不能自由组合查询，且丢失了明细数据。&lt;/li>
&lt;li>易用性较差，不支持 join，不支持更新，sql 支持很弱(有些插件类似于 pinot 的 PQL 语言)，只能 JSON 格式查询；对于去重操作不能精准去重。&lt;/li>
&lt;li>处理方式复杂，需要流处理引擎将数据 join 成宽表，维护相对复杂；对内存要求较高。&lt;/li>
&lt;/ol>
&lt;h4 id="场景">场景&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Kylin&lt;/strong>：适合对实时数据需求不高，但响应时间较高的查询，且维度较多，需求较为固定的特定查询；而不适合实时性要求高的 adhoc 类查询。&lt;/li>
&lt;li>&lt;strong>Druid&lt;/strong>：数据量大，对实时性要求高且响应时间短，以及维度较少且需求固定的简单聚合类查询(sum，count，TopN)，多以 Storm 和 Flink 组合进行预处理；而不适合需要 join、update 和支持 SQL 和窗口函数等复杂的 adhoc 查询；不适合用于 SQL 复杂数据分析的场景。&lt;/li>
&lt;/ul></description></item><item><title>02.ROLAP</title><link>https://ng-tech.icu/books/dataengineering-notes/10.olap/01.%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84/02.%E5%BB%BA%E6%A8%A1%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/02.rolap/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/dataengineering-notes/10.olap/01.%E5%BC%95%E6%93%8E%E6%9E%B6%E6%9E%84/02.%E5%BB%BA%E6%A8%A1%E7%B1%BB%E5%9E%8B%E5%88%92%E5%88%86/02.rolap/</guid><description>&lt;h1 id="rolap">ROLAP&lt;/h1>
&lt;p>与 MOLAP 相反，ROLAP 无需预计算，直接在构成多维数据模型的事实表和维度表上进行计算。R 即表示关系型（Relational）。显然，这种方式相比 MOLAP 更具可扩展性，增量数据导入后，无需进行重新计算，用户有新的查询需求时只需写好正确的 SQL 语句既能完成获取所需的结果。&lt;/p>
&lt;p>但 ROLAP 的不足也很明显，尤其是在数据体量巨大的场景下，用户提交 SQL 后，获取查询结果所需的时间无法准确预知，可能秒回，也可能需要花费数十分钟甚至数小时。本质上，ROLAP 是把 MOLAP 预计算所需的时间分摊到了用户的每次查询上，肯定会影响用户的查询体验。&lt;/p>
&lt;p>当然 ROLAP 的性能是否能够接受，取决于用户查询的 SQL 类型，数据规模以及用户对性能的预期。对于相对简单的 SQL，比如 TPCH 中的 Query 响应时间较快。但如果是复杂 SQL，比如 TPC-DS 中的数据分析和挖掘类的 Query，可能需要数分钟。&lt;/p>
&lt;p>相比 MOLAP，ROLAP 的使用门槛更低，在完成星型或雪花型模型的构建，创建对应 schema 的事实表和维度表并导入数据后，用户只需会写出符合需求的 SQL，就可以得到想要的结果。相比创建 &lt;code>数据立方体&lt;/code>，显然更加方便。&lt;/p>
&lt;p>目前生产环境使用较多的开源 ROLAP 主要可以分为 2 大类，一个是&lt;strong>宽表模型&lt;/strong>，另一个是&lt;strong>多表组合模型&lt;/strong>（就是前述的星型或雪花型）。&lt;/p>
&lt;h3 id="宽表类型">宽表类型&lt;/h3>
&lt;p>宽表模型能够提供比多表组合模型更好的查询性能，不足的是支持的 SQL 操作类型比较有限，比如对 Join 等复杂操作支持较弱或不支持。&lt;/p>
&lt;p>目前该类 OLAP 系统包括&lt;code>Druid&lt;/code>和&lt;code>ClickHouse&lt;/code>等，两者各有优势，Druid 支持更大的数据规模，具备一定的预聚合能力，通过倒排索引和位图索引进一步优化查询性能，在广告分析场景、监控报警等时序类应用均有广泛使用；ClickHouse 部署架构简单，易用，保存明细数据，依托其向量化查询、减枝等优化能力，具备强劲的查询性能。两者均具备较高的数据实时性，在互联网企业均有广泛使用。&lt;/p>
&lt;p>除了上面介绍的 Druid 和 ClickHouse 外，ElasticSearch 和 Solar 也可以归为宽表模型。但其系统设计架构有较大不同，这两个一般称为搜索引擎，通过倒排索引，应用 Scatter-Gather 计算模型提高查询性能。对于搜索类的查询效果较好，但当数据量较大或进行扫描聚合类查询时，查询性能会有较大影响。&lt;/p>
&lt;h4 id="代表">代表&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>ClickHouse&lt;/strong>是个列存数据库，保存原始明细数据，通过&lt;code>MergeTree&lt;/code>使得数据存储本地化来提高性能。 是个单机版超高性能的数据库&lt;/li>
&lt;/ul>
&lt;h4 id="优点">优点&lt;/h4>
&lt;ol>
&lt;li>性能高，列存压缩比高，通过索引实现秒级响应&lt;/li>
&lt;li>实时性强，支持 kafka 导入&lt;/li>
&lt;li>处理方式简单，无需预处理，保存明细数据&lt;/li>
&lt;/ol>
&lt;h4 id="缺点">缺点&lt;/h4>
&lt;ol>
&lt;li>数据规模一般&lt;/li>
&lt;li>灵活性差，不支持任意的 adhoc 查询，join 的支持不好。&lt;/li>
&lt;li>易用性较弱，SQL 语法不标准，不支持窗口函数等；维护成本高&lt;/li>
&lt;/ol>
&lt;h3 id="多表组合模型">多表组合模型&lt;/h3>
&lt;p>采用星型或雪花型建模是最通用的一种 ROLAP 系统，常见的包括&lt;code>GreenPlum&lt;/code>、&lt;code>Presto&lt;/code>和&lt;code>Impala&lt;/code>等，他们均基于 MPP 架构，采用该模型和架构的系统具有支持的数据量大、扩展性较好、灵活易用和支持的 SQL 类型多样等优点。&lt;/p>
&lt;p>相比其他类型 ROLAP 和 MOLAP，该类系统性能不具有优势，实时性较一般。通用系统往往比专用系统更难实现和进行优化，这是因为通用系统需要考虑的场景更多，支持的查询类型更丰富。而专用系统只需要针对所服务的某个特定场景进行优化即可，相对复杂度会有所降低。&lt;/p>
&lt;p>对于 ROLAP 系统，尤其是星型或雪花型的系统，如果能够尽可能得缩短响应时间非常重要，这将是该系统的核心竞争力。&lt;/p>
&lt;h4 id="代表-1">代表&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>Presto&lt;/strong>、&lt;strong>Impala&lt;/strong>以及&lt;strong>Spark SQL&lt;/strong>等利用关系模型来处理 OLAP 查询，通过并发来提高查询性能。同时三者是有很多相似点。我日常工作中，接触最多也就是这三兄弟和一个大哥(Hive)。Hive 就不多谈了，是基于 MR 最基础的 OLAP 引擎，也是对于大数据量的分析支持最好得。&lt;/li>
&lt;/ul>
&lt;h4 id="优点-1">优点&lt;/h4>
&lt;ol>
&lt;li>支持的计算数据规模大(非存储引擎)&lt;/li>
&lt;li>灵活性高，随意查询数据&lt;/li>
&lt;li>易用性强，支持标准 SQL 以及多表 join 和窗口函数&lt;/li>
&lt;li>处理方式简单，无需预处理，全部后处理，没有冗余数据&lt;/li>
&lt;/ol>
&lt;h4 id="缺点-1">缺点&lt;/h4>
&lt;ol>
&lt;li>性能较差，当查询复杂度高且数据量大时，可能分钟级别的响应。同时其不是存储引擎，因此没有本地存储，当 join 时 shuffle 开销大，性能差 举例：SparkSql 为例子，其只是计算引擎，导致需要从外部加载数据，从而数据的实时性得不到保证；多表 join 的时候性能也很难得到秒级的响应。&lt;/li>
&lt;li>实时性较差，不支持数据的实时导入，偏离线处理。 如果需要实时数据，经常的做法是 Presto 或者 Impala 和 Kudu 的结合，解决了 Kudu 的磁盘存储问题，实时性能也不会太差。&lt;/li>
&lt;/ol></description></item></channel></rss>