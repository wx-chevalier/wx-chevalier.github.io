<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>999.参考资料 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/git/%E5%B7%A5%E4%BD%9C%E6%B5%81/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <atom:link href="https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/git/%E5%B7%A5%E4%BD%9C%E6%B5%81/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml" />
    <description>999.参考资料</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>999.参考资料</title>
      <link>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/git/%E5%B7%A5%E4%BD%9C%E6%B5%81/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
    </image>
    
    <item>
      <title>2023-林宜丙-Monorepo 下 Git 工作流的最佳实践</title>
      <link>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/git/%E5%B7%A5%E4%BD%9C%E6%B5%81/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2023-%E6%9E%97%E5%AE%9C%E4%B8%99-monorepo-%E4%B8%8B-git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/git/%E5%B7%A5%E4%BD%9C%E6%B5%81/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2023-%E6%9E%97%E5%AE%9C%E4%B8%99-monorepo-%E4%B8%8B-git-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</guid>
      <description>&lt;h1 id=&#34;monorepo-下-git-工作流的最佳实践&#34;&gt;Monorepo 下 Git 工作流的最佳实践&lt;/h1&gt;
&lt;p&gt;我们最熟悉的 Git 工作流莫过于 Git flow, Gitlab flow, Github flow，而对于 feature branch 和 trunk-based 比较陌生，那么以上几种 flow 有什么关系呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Feature branch 和 Trunk-based 工作流是比较新晋的概念，二者是相对的、互斥的，它们组成一个全集；&lt;/li&gt;
&lt;li&gt;Git flow, Gitlab flow, Github flow 都属于 feature branch development，它们有一个共同点：都采用『功能驱动式开发』，即：需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230302200730.png&#34; alt=&#34;Feature branch vs Git flow&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在 Monorepo 工程中，使用 feature branch development 开发模式时，随着代码库复杂性和团队规模的增长，并行的『长期分支』也会越来越多，这些分支在合入主干时，将会频繁遇到冲突或者不兼容的情况，而手动解决代码冲突往往会引入 Bug。而 trunk-based development 鼓励开发者可以通过一些小的提交创建『短期分支』，从而大大缓解冲突问题，有助于保持生产版本的流畅。总的来说，选择一个工作流不仅仅是一系列操作工具的流程，我们往往还需要对它背后的思想买单；下面的表格是两种工作流模式在各个维度的适用情况：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230302200920.png&#34; alt=&#34;工作流模式&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;目前大部分业务场景使用的都是 feature branch 的开发模式，如果你的业务是多人开发一个巨型应用（如抖音主站、飞书文档等），应该尝试使用 Trunk based 开发模式，这会提高仓库整体工程质量和管理水平。&lt;/p&gt;
&lt;h1 id=&#34;feature-branch-development&#34;&gt;Feature branch development&lt;/h1&gt;
&lt;p&gt;『功能分支开发模式』的核心思想是所有特性开发都应该在专用的分支，而不是主分支中进行。这种封装使多个开发人员，可以轻松地在不干扰主代码库的情况下处理特定功能。这也意味着主分支永远不会包含损坏的代码，这对于持续集成环境来说是一个巨大的优势。&amp;ndash; Git Feature Branch Workflow | Atlassian Git Tutorial&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230302201024.png&#34; alt=&#34;Feature branch&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1、从 master 分支创建一个功能分支（Feature Branch）
2、开发者们在功能分支中完成开发工作
3、构建功能分支，并通知 QA 进行验证
4、如果发现任何问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者创建一个基于功能分支的修复 MR&lt;/li&gt;
&lt;li&gt;经过代码审阅和合并过程将修复 MR 合入功能分支&lt;/li&gt;
&lt;li&gt;再重新构建部署，并通知 QA 进行验证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5、QA 验证通过后，将功能分支发布至线上，然后将其合并入主干后删除&lt;/p&gt;
&lt;h2 id=&#34;为什么使用-feature-branch-development&#34;&gt;为什么使用 feature branch development？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;多功能并行开发：使多个开发人员可以轻松地在不干扰主代码库的情况下处理特定功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持主分支稳定：主分支永远不会包含损坏的代码，这对于持续集成环境来说是一个巨大的优势。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;心智负担低：仅需了解简单的操作即可实践，无需了解 cherry-pick, feature flag 等概念。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;trunk-based-development&#34;&gt;Trunk-based development&lt;/h1&gt;
&lt;p&gt;『基于主干的开发模式』是一种版本控制管理实践，开发者将小而频繁的更新合并到核心『主干』（通常是 master 分支）。这是 DevOps 团队中的一种常见做法，也是 DevOps 生命周期的一部分，因为它简化了合并和集成阶段。事实上，它也是 CI/CD 的必备实践。与其它存在『长期分支』的功能分支策略相比，开发者可以通过一些小的提交创建『短期分支』。随着代码库复杂性和团队规模的增长，『基于主干的开发模式』有助于保持生产版本的流畅。&amp;ndash; Trunk-based Development | Atlassian&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230302201509.png&#34; alt=&#34;Trunk-based Development&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;从部署分支上线&#34;&gt;从部署分支上线&lt;/h2&gt;
&lt;p&gt;半自动化流程，适用于低频率部署，以及自动化测试不全面的项目：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230302201546.png&#34; alt=&#34;半自动化流程&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A dot represents an MR merged into master. Green dots means good commits that passed e2e tests, and red dot means a buggy commit which should be avoided when deploying/rollback.&lt;/p&gt;
&lt;p&gt;1、从 master 分支创建一个部署分支（RC）
2、构建部署分支（RC），并通知 QA 进行验证
3、如果发现任何问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开发者创建一个基于 master 分支的修复 MR&lt;/li&gt;
&lt;li&gt;经过代码审阅和合并过程将修复 MR 合入 master&lt;/li&gt;
&lt;li&gt;将 commits cherrypick 到部署分支（RC），再重新构建部署，并通知 QA 进行验证&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4、QA 验证通过后，将部署分支（RC）发布至线上，然后删除该分支（RC）&lt;/p&gt;
&lt;h2 id=&#34;从主干分支上线&#34;&gt;从主干分支上线&lt;/h2&gt;
&lt;p&gt;全自动化流程，适用于需要高频率部署，以及自动化测试较为全面的项目：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230302201723.png&#34; alt=&#34;从主干分支上线&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;A dot represents an MR merged into master. Green dots means good commits that passed e2e tests, and red dot means a buggy commit which should be avoided when deploying/rollback.&lt;/p&gt;
&lt;p&gt;1、定时部署：每天或者每小时到了特定时间，部署机器人自动找到当前最新通过全部端到端测试的代码 (特定的 commit hash)，然后将之部署上线。
2、持续部署：每当有新代码合并进主干分支时，部署机器人自动验证新代码是否通过所有端到端测试，以及是否与该项目相关，如果是则自动部署上线&lt;/p&gt;
&lt;h2 id=&#34;为什么使用-trunk-based-development&#34;&gt;为什么使用 trunk-based development？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;允许持续的代码集成（CI）：在『基于主干的开发模式』中，源源不断的提交合入主干分支。为每个提交添加自动化测试套件和代码覆盖率监控可以实现持续集成。当新代码合并到主干中时，会运行自动集成和代码覆盖测试以验证代码质量。&lt;/li&gt;
&lt;li&gt;确保持续的代码审查（CR）：『基于主干的开发模式』的快速、小型提交使代码审查成为一个更有效的过程。借助小型分支，开发人员可以快速查看和审查小的更改。与评审者阅读大面积代码变更的长期功能分支相比，这要容易得多。&lt;/li&gt;
&lt;li&gt;支持连续的生产代码发布（CD）：团队应该每天频繁地合并到主分支。『基于主干的开发模式』努力使主干分支保持 “绿色”，这意味着它可以在每次提交合并后进行部署。自动化测试、代码收敛和代码审查，保证了基于主干的项目可以随时部署到生产环境中。&lt;/li&gt;
&lt;li&gt;更适用于大型 Monorepo 下的多人协作场景（scalable）：大型 Monorepo 下的多人协作场景更易出现代码冲突，不仅消耗的大量的人力解决冲突，还增加了『长期分支』合入『主干分支』引入 bug 的可能性。与其它存在『长期分支』的功能分支策略相比，开发者可以通过一些小提交创建『短期分支』进行快速迭代。因此，随着代码库复杂性和团队规模的增长，『基于主干的开发模式』也能保证顺畅的多人协作。&lt;/li&gt;
&lt;li&gt;线性的提交历史（Linear history）：Trunk-based development 更容易做到线性的 commit 历史，它有如下几个好处：&lt;/li&gt;
&lt;li&gt;方便查看和跟踪历史记录&lt;/li&gt;
&lt;li&gt;方便回溯变更，比如：Feature A 是在 Bugfix B 之前或者之后引入的？&lt;/li&gt;
&lt;li&gt;方便排查 bug，比如：使用 Git bisect 二分排查，而非线性历史则难以操作&lt;/li&gt;
&lt;li&gt;撤销变更，比如：当你发现一个有问题的 commit，简单的 revert 对应的 commit 即可，而非线性的历史会有很多跨分支的合并，使 revert 变得困难&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://assets.ng-tech.icu/item/20230302201925.png&#34; alt=&#34;Linear history &amp;amp;amp; Non-linear history&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;有效的两个前提&#34;&gt;有效的两个前提&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;持续集成和测试：在每次代码合并前后，开发者都需要知道自己的代码对主干带来了什么影响，因此持续集成和测试的能力必不可少。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;功能开关：因为在基于主干开发时，大的功能被分解为小改动，因此对于还未完成而之后部分合并进主干的功能，我们需要功能开关来不让他们过早地暴露给用户。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;功能开关通常是一套独立的控制系统，线上的代码有两套逻辑，然后通过实时读取功能开关的取值来决定是否隐藏或暴露某个功能。通常，我们在部署完一个功能相关的所有代码之后打开某个功能开关。然后当此功能已经稳定并且被永久加入产品后，会把功能开关和相关的逻辑代码删除掉。&lt;/p&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;amp;mid=2651260181&amp;amp;idx=1&amp;amp;sn=aa8055a7b6a253fe95e638b314932d8d&amp;amp;chksm=bd48dc918a3f5587cba4b8905834eae7ab1228441c0d24b50616e581ef077432fc465f2cab2d&amp;amp;mpshare=1&amp;amp;scene=1&amp;amp;srcid=0302oEojgsR0DveQxFMS50A9&amp;amp;sharer_sharetime=1677724863503&amp;amp;sharer_shareid=b12a66c3f9db4c759a84aa32051be4ab&amp;amp;version=4.1.0.99228&amp;amp;platform=mac#rd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651260181&amp;idx=1&amp;sn=aa8055a7b6a253fe95e638b314932d8d&amp;chksm=bd48dc918a3f5587cba4b8905834eae7ab1228441c0d24b50616e581ef077432fc465f2cab2d&amp;mpshare=1&amp;scene=1&amp;srcid=0302oEojgsR0DveQxFMS50A9&amp;sharer_sharetime=1677724863503&amp;sharer_shareid=b12a66c3f9db4c759a84aa32051be4ab&amp;version=4.1.0.99228&amp;platform=mac#rd&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
