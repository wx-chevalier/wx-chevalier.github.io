<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>需求规划 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%9C%80%E6%B1%82%E8%A7%84%E5%88%92/</link><atom:link href="https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%9C%80%E6%B1%82%E8%A7%84%E5%88%92/index.xml" rel="self" type="application/rss+xml"/><description>需求规划</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>需求规划</title><link>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%9C%80%E6%B1%82%E8%A7%84%E5%88%92/</link></image><item><title>项目规划</title><link>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%9C%80%E6%B1%82%E8%A7%84%E5%88%92/%E9%A1%B9%E7%9B%AE%E8%A7%84%E5%88%92/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%9C%80%E6%B1%82%E8%A7%84%E5%88%92/%E9%A1%B9%E7%9B%AE%E8%A7%84%E5%88%92/</guid><description>&lt;p>笔者本身是一个程序猿，只不过有时候随波逐流担了些项目经理的活，因此本文肯定还是会有很多的技术相关点，不过总的来说应该还是通俗易懂。笔者&lt;/p>
&lt;blockquote>
&lt;p>沟通是软件开发中最大的困难之一&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>参考资料：&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://wangchao.de/%E8%81%8A%E8%81%8A%E9%92%88%E5%AF%B9%E5%BC%82%E5%9C%B0%E5%9B%A2%E9%98%9F%E7%9A%84%E9%9C%80%E6%B1%82%E5%8D%8F%E4%BD%9C%E5%92%8C%E5%8E%9F%E5%9E%8B%E3%80%81%E8%AE%BE%E8%AE%A1%E7%9A%84%E8%AF%84%E5%AE%A1/" target="_blank" rel="noopener">聊聊针对异地团队的需求协作和原型、设计的评审&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://wangchao.de/%E8%81%8A%E8%81%8A%E5%88%9B%E4%B8%9A%E5%9B%A2%E9%98%9F%E7%9A%84%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%A6%82%E4%BD%95%E9%9D%A2%E5%90%91%E5%BC%80%E5%8F%91%E4%BA%BA%E5%91%98%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">聊聊创业团队的项目管理如何面向开发人员优化&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="需求分析">需求分析&lt;/h1>
&lt;h2 id="需求协作">需求协作&lt;/h2>
&lt;h2 id="user-story">User Story&lt;/h2>
&lt;p>笔者觉得，用户需求与用户故事是有区别的。假定这个项目的客户是个饮料自动售货机的制造商。他们要求我们为他们的售货机开发一款软件。我们可以找他们的市场经理了解这个软件的需求。那么用户需求是什么，就是能够购买饮料这个动作。而用户故事呢，则是一个过程。譬如用户购买饮料可能对应着多个过程：&lt;/p>
&lt;ul>
&lt;li>用户购买饮料成功：
&lt;ul>
&lt;li>用户投入一些钱。&lt;/li>
&lt;li>售货机显示用户已经投了多少钱。&lt;/li>
&lt;li>如果投入的钱足够买某种饮料，这种饮料对应的按钮的灯就会亮。&lt;/li>
&lt;li>用户按了某个亮了的按钮。&lt;/li>
&lt;li>售货机卖出一罐饮料给他。&lt;/li>
&lt;li>售货机找零钱给他。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用户购买饮料失败 - 用户投入一些钱。- 售货机显示用户已经投了多少钱。- 售货机发现用户投入的钱缺少，并提醒用户。- 用户继续投钱则进入正常购买。- 用户不继续投钱则退钱。从产品经理的角度来说，一个用户故事只是以客户能够明白的方式，描述了一个系统的外在行为，它完全忽略了系统的内部动作。比如，下面有下划线的那些文字，就属于不应该出现在用户故事中的系统内部动作: 1. 用户投入一些钱。2. 售货机将塞进来的钱存在钱箱里，然后发送一条命令给屏幕，屏幕显示目前已经投入的金额。3. 售货机查询数据库里面所有饮料的价格，判定钱足够买哪些饮料，对于钱足够买的那些饮料，对应的按钮的灯就会亮起来。4. 用户按下一个亮起来的按钮。5. 售货机卖出一罐饮料给用户，然后将数据库里面该饮料的存货数量减 1。6. 售货机找零钱给用户。不管是口头描述的，还是书面形式，这样的内容是描述用户故事时一个很常见的错误。特别的，千万不要提及任何有关数据库，记录，字段之类的对客户一点意义都没有的东西。但是，笔者是从项目规划的角度来说的，那么就应当把包括数据库以及开发中的注意点也包含在一个 User Story 中。
&lt;h3 id="user-story-mapping用户故事地图">User Story Mapping(用户故事地图)&lt;/h3>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="http://www.woshipm.com/pd/270289.html" target="_blank" rel="noopener">创建用户故事地图(User Story Mapping)的 8 个步骤&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.cnblogs.com/ups216/p/5120567.html" target="_blank" rel="noopener">用户故事地图(User Story Mapping)之初体验&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;h1 id="产品原型与流程图">产品原型与流程图&lt;/h1>
&lt;h2 id="灵活的设计稿">灵活的设计稿&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/tudou527/marketch/raw/master/resource/1.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> &lt;a href="https://github.com/tudou527/marketch" target="_blank" rel="noopener">marketch&lt;/a>&lt;/p>
&lt;h2 id="接口文档">接口文档&lt;/h2>
&lt;h1 id="技术架构选型与预研">技术架构:选型与预研&lt;/h1>
&lt;p>在技术选型上两种人是比较危险的，也是两个极端，其一是典型的保守主义者，死守着自己已掌握的技术，畏葸不前，不管整个技术变革的浩荡大潮，宁可用已经被淘汰掉的东西。其二是典型的激进主义者，唯新是从。笔者也是个典型，三年前第一次创业时候就尝试着完全用 Cordova 开发一个社交软件，自然死的连渣都不剩下。技术选型时，笔者自己考虑的原则为：&lt;/p>
&lt;ul>
&lt;li>降低新技术的比重通过这样一整套新架构决策流程，我们能够确保自身使用的是最便捷且最具知名度的解决方案——除非没有选项能够供我们挑选。我们会尽可能避免进行全盘技术更换，单单是有趣或者令人激动是不足以使其进军生产环境的。&lt;/li>
&lt;li>减少以自我为中心的态度与代码审查一样，架构审查流程同样具备协作属性，这亦有助于将技术设计建议由单一工程师或者团队转移至规模更大的协作团队的整体观点，从而打造出与个人兴趣无关、而真正切合买家与卖家需求的解决方案。&lt;/li>
&lt;li>增加审视角度通过鼓励全公司所有工程师参与到架构审查中来，我们得以激发更多程序员的积极心态，特别是那些不会直接接触到新型技术的同事。通过这种方式，新项目开发团队往往能够跳出固有思路，得到来自全新角度的解读与启示。&lt;/li>
&lt;li>提升认知水平与日常代码审查类似，架构审查也能够确保 Etsy 公司的每一位工程师了解技术堆栈中不同组件的工作方式以及决策制定理由。&lt;/li>
&lt;/ul>
&lt;h2 id="技术负债">技术负债&lt;/h2>
&lt;h2 id="技术风险">技术风险&lt;/h2>
&lt;p>技术风险对于使用的开源 特别是二次开发中有点类似于抽象漏洞定理。&lt;/p>
&lt;h3 id="正确使用开源项目">正确使用开源项目&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://www.infoq.com/cn/articles/how-to-correctly-use-the-open-source-project" target="_blank" rel="noopener">经验：如何正确的使用开源项目&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>开源的意义毋庸置疑，但是不可否认，像笔者这样的&amp;quot;不负责任&amp;quot;的开源贡献者不在少数。&lt;/p>
&lt;h2 id="技术预研与可复用性">技术预研与可复用性&lt;/h2>
&lt;p>功能的模块化与界面的组件化，笔者在自己的&lt;/p>
&lt;h1 id="开发管理">开发管理&lt;/h1>
&lt;h3 id="workflow">Workflow&lt;/h3>
&lt;h3 id="任务分配">任务分配&lt;/h3>
&lt;h3 id="进度估算">进度估算&lt;/h3>
&lt;p>笔者看很多程序猿在估算自己的进度时候&lt;/p>
&lt;h4 id="需求变更与迭代开发">需求变更与迭代开发&lt;/h4>
&lt;blockquote>
&lt;p>不可能有不中途改需求的产品经理，特别是在初创企业中。&lt;/p>
&lt;/blockquote>
&lt;p>从之前的敏捷开发到现在的精益开发，都秉承着一个核心概念就是快速响应、最小化测试。&lt;/p>
&lt;h3 id="进度追踪与反馈调整随便扯扯">进度追踪与反馈调整:随便扯扯&lt;/h3>
&lt;p>笔者在自己经历的大大小小十来个项目中，无一例外的没有把周报制度推行下去。我觉得对于周报制度给我的感觉就是道理大家都懂，但是尼玛推行起来就各种烦躁。形式不重要，重要的是讲清楚事情。&lt;/p>
&lt;ol>
&lt;li>本周做了什么：做了什么不重要，而是要汇报做了事情的结果&lt;/li>
&lt;li>下周要做什么：同样要汇报预期结果，比如跟谁讨论什么什么事情，为什么要讨论，讨论之后要达到什么结果&lt;/li>
&lt;li>遇到了什么问题: 遇到了什么问题，怎么解决，需要谁的配合，是否需要上级的支援可以考虑金字塔思维方式，先汇报结果(项目的进展，项目的情况，项目的结论)，再汇报论点，再汇报论据。&lt;/li>
&lt;/ol></description></item><item><title>需求管理</title><link>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%9C%80%E6%B1%82%E8%A7%84%E5%88%92/%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/engineering-series/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/%E9%9C%80%E6%B1%82%E8%A7%84%E5%88%92/%E9%9C%80%E6%B1%82%E7%AE%A1%E7%90%86/</guid><description>&lt;h1 id="进度估算">进度估算&lt;/h1>
&lt;p>当碰上预估性问题时，作为程序员，你会怎么回答？第一类，项目用时估算：这对于程序员而言，从来不是个陌生的问题，而且每每因此陷入尴尬的窘境。首先，问题条件不明确，因为没有人会将全部影响因素纳入深度分析；其次，任何新特性都有可能直接影响到你此前的代码假设，而结局往往是大面积重构；再者，对于已经完成作业的部分，依然存在需要你时不时费心的附加内容，而在做总时长估算时，又必须要把这段耗时纳入考量；此外，“项目完成”的定义也很模糊，是以“写完代码”为界，还是以“用户使用中”为标，都需要加以明确；最后，即使你对于上述所有可能存在的干扰项都有一个清晰的把握，所谓“程序员的自尊心”也会迫使你给出或是接受比你原有预计值更短的时间，尤其当你感受到来自 deadline 和管理期望值的双重压力时。总体来看，用时预估困惑大多是组织性及文化性问题，显然不是一朝一夕可以解决的，但无论如何复杂，你最终都需要按照要求做出估算，并给出一个期望中的合理数值——这是你工作的一部分，并不能用一句简单的“我不知道”胡乱搪塞过去。但很多程序员对此评论称，这类估算的结果往往是自己会给出一个最终经证实完全无法实现的答案。在《程序员修炼之道》一书中曾谈到过这个高频率问题，书中对此给出的答案是“我稍后回复您”。而在这之后就需要考虑以下几个关键点：&lt;/p>
&lt;ol>
&lt;li>确定你对准确性的要求，根据持续时间的长短，你可以选用不同精度下的估值；&lt;/li>
&lt;li>明确问题内容，划定问题范围；&lt;/li>
&lt;li>系统建模，其中包括心智模型、图表及现有数据记录，分解这些模型并据此展开估算，算出每个值及其误差范围；&lt;/li>
&lt;li>在上一条的结果上进行总体估算；&lt;/li>
&lt;li>结果追踪，比对估算值与实际值轨迹；&lt;/li>
&lt;li>其他相关因素一并纳入考量，包括规格说明的要求或更改、文档更新、测试、通信、假期及会议消耗等。&lt;/li>
&lt;/ol>
&lt;p>业务流程分析，角色流程分析&lt;/p></description></item></channel></rss>