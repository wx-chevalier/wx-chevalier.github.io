<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>语法基础 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</link><atom:link href="https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml"/><description>语法基础</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>语法基础</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</link></image><item><title>布局基础</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%B8%83%E5%B1%80%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E5%B8%83%E5%B1%80%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="语法基础">语法基础&lt;/h1>
&lt;h1 id="声明组件">声明组件&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">Component&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;react&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">AppRegistry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Text&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;react-native&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">class&lt;/span> &lt;span class="nx">HelloWorldApp&lt;/span> &lt;span class="kr">extends&lt;/span> &lt;span class="nx">Component&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Hello&lt;/span> &lt;span class="nx">world&lt;/span>&lt;span class="o">!&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">AppRegistry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">registerComponent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;HelloWorldApp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">HelloWorldApp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 React Native 中，只有&lt;Text>组件能够接受文本作为子节点，换言之，如下的写法是错的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> Text doesn&amp;#39;t go here! &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与之相对的，应该将文本包裹在&lt;Text>组件中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is okay!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 HTML 中，如果需要展示一系列具有复杂格式的字符串，可能需要&lt;code>&amp;lt;strong&amp;gt;&lt;/code>、&lt;code>&amp;lt;em&amp;gt;&lt;/code>等动态组合，譬如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The quick &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">em&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>brown&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">em&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> fox jumped over the lazy &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">strong&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>dog&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">strong&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在于 React Native 中，只有&lt;Text>组件可以用来包裹某个文本，而如果需要对其属性进行控制，则需要利用其 Style，而不是添加&lt;code>&amp;lt;em&amp;gt;&lt;/code>、&lt;code>&amp;lt;strong&amp;gt;&lt;/code>这些标签。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The quick &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{{fontStyle:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="na">italic&lt;/span>&lt;span class="err">&amp;#34;}}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>brown&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> fox
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jumped over the lazy &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{{fontWeight:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="na">bold&lt;/span>&lt;span class="err">&amp;#34;}}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>dog&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过上述这种直接把属性写在组件里的方式会将整个代码变得非常的冗长，可以以另一种方式进行处理，譬如将独特功能的组件封装为特殊的组件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bold&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontWeight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;bold&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">italic&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontStyle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;italic&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">Strong&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createClass&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bold&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">Em&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createClass&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">italic&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在使用了这样的自带样式的组件之后，可以以一种非常类似于 HTML 的方式去使用这些组件，譬如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">The&lt;/span> &lt;span class="nx">quick&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Em&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">brown&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Em&amp;gt; fox jumped over the lazy &amp;lt;Strong&amp;gt;dog&amp;lt;/Strong&amp;gt;.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>import { Text, View } from &amp;#39;react-native&amp;#39;;
import React from &amp;#39;react&amp;#39;;
const CustomComponent = props =&amp;gt; (
&amp;lt;View
style={props.containerStyle}
&amp;gt;
&amp;lt;View
style={props.someCoolContainerStyle}
&amp;gt;
&amp;lt;Text
style={props.someCoolTextStyle}
&amp;gt;
&amp;lt;/Text&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/View&amp;gt;
);
CustomComponent.propTypes = {
containerStyle: View.propTypes.style,
someCoolTextStyle: Text.propTypes.style,
someCoolContainerStyle: View.propTypes.style,
};
export default CustomComponent;
&lt;/code>&lt;/pre>&lt;h1 id="样式与布局">样式与布局&lt;/h1>
&lt;p>在讲解 React Native 的样式之前，需要先介绍下 FaceBook 本身推荐的模式，它强烈的推荐重用带样式的组件而不是样式本身。并且 React Native 是不支持样式继承的，如它在文档中所述：&lt;/p>
&lt;blockquote>
&lt;p>你并没有被允许去为整个节点树设置一个默认的譬如字体这样的属性，推荐的方式是通过创建一个带有一致的字体样式的组件并且在整个应用中通过重用组件的方式来完成样式的统一与继承。
在 CSS 种，Media Query 是非常常用的技巧之一，而在 React Native 种，并不能够直接运用上 CSS 的一些属性，不过可以使用如下方式：&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">var&lt;/span> &lt;span class="n">Dimensions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">Dimensions&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">var&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Dimensions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">window&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="flexbox-布局">Flexbox 布局&lt;/h2>
&lt;h1 id="交互事件响应">交互事件响应&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://unbug.gitbooks.io/react-native-training/content/" target="_blank" rel="noopener">2016-React Native Training&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://facebook.github.io/react-native/docs/handling-text-input.html" target="_blank" rel="noopener">Handling Text Input&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>环境搭建与工具链</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%B7%A5%E5%85%B7%E9%93%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%B7%A5%E5%85%B7%E9%93%BE/</guid><description>&lt;h1 id="react-native-开发环境搭建与工具链介绍">React Native 开发环境搭建与工具链介绍&lt;/h1>
&lt;h1 id="ios-环境搭建">iOS 环境搭建&lt;/h1>
&lt;p>必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 Xcode。虽然你可以使用任何编辑器来开发应用（编写 js 代码），但你仍然必须安装 Xcode 来获得编译 iOS 应用所需的工具和环境。&lt;/p>
&lt;h2 id="node-watchman">Node, Watchman&lt;/h2>
&lt;p>我们推荐使用 &lt;a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew&lt;/a> 来安装 Node 和 Watchman。在命令行中执行下列命令安装：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">brew install node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">brew install watchman
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你已经安装了 Node，请检查其版本是否在 v8.3 以上。安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。&lt;/p>
&lt;p>设置 npm 镜像：&lt;/p>
&lt;pre tabindex="0">&lt;code>npm config set registry https://registry.npm.taobao.org --global
npm config set disturl https://npm.taobao.org/dist --global
&lt;/code>&lt;/pre>&lt;p>或者使用 &lt;a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm&lt;/a>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ nrm ls
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">* npm ----- https://registry.npmjs.org/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cnpm ---- http://r.cnpmjs.org/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> taobao -- https://registry.npm.taobao.org/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nj ------ https://registry.nodejitsu.com/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> skimdb -- https://skimdb.npmjs.com/registry
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ nrm use cnpm //switch registry to cnpm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Registry has been &lt;span class="nb">set&lt;/span> to: http://r.cnpmjs.org/
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;a href="https://facebook.github.io/watchman" target="_blank" rel="noopener">Watchman&lt;/a> 则是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。&lt;/p>
&lt;h2 id="yarnreact-native-的命令行工具react-native-cli">Yarn、React Native 的命令行工具（react-native-cli）&lt;/h2>
&lt;p>Yarn 是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">npm install -g yarn react-native-cli
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完 Yarn 后同理也要设置镜像源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">yarn config &lt;span class="nb">set&lt;/span> registry https://registry.npm.taobao.org --global
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">yarn config &lt;span class="nb">set&lt;/span> disturl https://npm.taobao.org/dist --global
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用 yarn 代替 npm install 命令，用 yarn add 某第三方库名代替 npm install 某第三方库名。&lt;/p>
&lt;h2 id="xcode">Xcode&lt;/h2>
&lt;p>React Native 目前需要 &lt;a href="https://developer.apple.com/xcode/downloads/" target="_blank" rel="noopener">Xcode&lt;/a> 9.4 或更高版本。你可以通过 App Store 或是到 &lt;a href="https://developer.apple.com/xcode/downloads/" target="_blank" rel="noopener">Apple 开发者官网&lt;/a> 上下载。这一步骤会同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。&lt;/p>
&lt;ul>
&lt;li>Xcode 的命令行工具&lt;/li>
&lt;/ul>
&lt;p>启动 Xcode，并在 &lt;code>Xcode | Preferences | Locations&lt;/code> 菜单中检查一下是否装有某个版本的 &lt;code>Command Line Tools&lt;/code>。Xcode 的命令行工具中包含一些必须的工具，比如 &lt;code>git&lt;/code> 等。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/1R0pGR9Q/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="搭建-android-开发环境">搭建 Android 开发环境&lt;/h1>
&lt;p>必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 JDK 和 Android Studio。虽然你可以使用任何编辑器来开发应用（编写 js 代码），但你仍然必须安装 Android Studio 来获得编译 Android 应用所需的工具和环境。&lt;/p>
&lt;h2 id="java-development-kit">Java Development Kit&lt;/h2>
&lt;p>React Native 需要 Java Development Kit [JDK] 1.8（暂不支持 1.9 及更高版本）。你可以在命令行中输入 &lt;code>javac -version&lt;/code> 来查看你当前安装的 JDK 版本。如果版本不合要求，则可以到官网上下载。&lt;/p>
&lt;h2 id="android-开发环境">Android 开发环境&lt;/h2>
&lt;h3 id="安装-android-studio">安装 Android Studio&lt;/h3>
&lt;p>首先下载和安装 &lt;a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">Android Studio&lt;/a>，国内用户可能无法打开官方链接，请自行使用搜索引擎搜索可用的下载链接。安装界面中选择&amp;quot;Custom&amp;quot;选项，确保选中了以下几项：&lt;/p>
&lt;ul>
&lt;li>Android SDK&lt;/li>
&lt;li>Android SDK Platform&lt;/li>
&lt;li>Performance (Intel ® HAXM)&lt;/li>
&lt;li>Android Virtual Device&lt;/li>
&lt;/ul>
&lt;p>然后点击&amp;quot;Next&amp;quot;来安装选中的组件，安装完成后，看到欢迎界面时，就可以进行下面的操作了。&lt;/p>
&lt;h3 id="安装-android-sdk">安装 Android SDK&lt;/h3>
&lt;p>Android Studio 默认会安装最新版本的 Android SDK。目前编译 React Native 应用需要的是 Android 6.0 (Marshmallow) 版本的 SDK（注意 SDK 版本不等于终端系统版本，RN 目前支持 android 4.1 以上设备）。你可以在 Android Studio 的 SDK Manager 中选择安装各版本的 SDK。&lt;/p>
&lt;p>你可以在 Android Studio 的欢迎界面中找到 SDK Manager。点击 &amp;ldquo;Configure&amp;rdquo;，然后就能看到 &amp;ldquo;SDK Manager&amp;rdquo;。SDK Manager 还可以在 Android Studio 的 &amp;ldquo;Preferences&amp;rdquo; 菜单中找到。具体路径是 &lt;code>Appearance &amp;amp; Behavior → System Settings → Android SDK&lt;/code>。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/htJ9kLqL/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在 SDK Manager 中选择 &amp;ldquo;SDK Platforms&amp;quot;选项卡，然后在右下角勾选 &amp;ldquo;Show Package Details&amp;rdquo;。展开 Android 6.0 (Marshmallow) 选项，确保勾选了下面这些组件：&lt;/p>
&lt;ul>
&lt;li>Android SDK Platform 28&lt;/li>
&lt;li>Intel x86 Atom_64 System Image（官方模拟器镜像文件，使用非官方模拟器不需要安装此组件）&lt;/li>
&lt;/ul>
&lt;h1 id="开发">开发&lt;/h1>
&lt;h1 id="调试">调试&lt;/h1>
&lt;h1 id="原生集成">原生集成&lt;/h1>
&lt;h1 id="错误">错误&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://nervjs.github.io/taro/docs/react-native.html#%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97" target="_blank" rel="noopener">https://nervjs.github.io/taro/docs/react-native.html#%E4%BD%BF%E7%94%A8%E5%8E%9F%E7%94%9F%E6%A8%A1%E5%9D%97&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>界面开发</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%95%8C%E9%9D%A2%E5%BC%80%E5%8F%91/</guid><description>&lt;h1 id="styles">Styles&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/sabeurthabti/react-native-css" target="_blank" rel="noopener">react-native-css&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>在讲解 React Native 的样式之前，需要先介绍下 FaceBook 本身推荐的模式，它强烈的推荐重用带样式的组件而不是样式本身。并且 React Native 是不支持样式继承的，如它在文档中所述：&lt;/p>
&lt;blockquote>
&lt;p>你并没有被允许去为整个节点树设置一个默认的譬如字体这样的属性，推荐的方式是通过创建一个带有一致的字体样式的组件并且在整个应用中通过重用组件的方式来完成样式的统一与继承。&lt;/p>
&lt;/blockquote>
&lt;p>在 Web 的 React 开发中，往往会使用独立的样式文件，譬如 CSS、SASS 或者 LESS 样式表来存储声明的样式。但是 React Native 使用了一套截然不同的机制，所有的样式必须要用 JavaScript 进行编写(当然，后面也会提到有第三方库可以帮你自动编译 SASS 到 JS 中)，并且强制规定所有的样式必须显性引用到组件的 Style 对象中。毫无疑问，这种方式会银帆很多不良的反应，毕竟它与目前流行的基于 CSS 的样式方式相悖。
传统的独立的 CSS 毫无疑问存在着一些问题，譬如所有的 CSS 的规则与类名都是处于全局作用域中，也就是说虽然只打算为某个组件添加样式也是有可能无意间影响到其他的组件。譬如如果你引入了 Twitter 最新的 BootStrap 的样式库，等于你引入了 600 多个全局变量。因为 CSS 没有显式地关联到 HTML 元素，也就给冗余或者无效代码地消除带来了很大的困难。&lt;/p>
&lt;h2 id="declaring--manipulating-styles">Declaring &amp;amp; Manipulating Styles&lt;/h2>
&lt;p>类似于 SASS 或者 LESS 这样的 CSS 预处理器也在尝试着解决 CSS 中不好的部分，但是还是有很多根本性的问题遗留下来。React Native 实现了部分可用的 CSS 的样式，专注于保证样式的 API 较少但是可用度高。譬如 Position 相关的属性就差别很大，此外，React Native 中也不支持伪类、动画与选择器。所有支持的属性可以查看&lt;a href="https://facebook.github.io/react-native/docs/view.html#style" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;h3 id="inline-styles内联样式">Inline Styles(内联样式)&lt;/h3>
&lt;p>内联样式是句法上最简单的使用方法，不过很明显并不是最佳的使用方法，其语法形式类似于 React Web：&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;Text&amp;gt;
The quick &amp;lt;Text style={{fontStyle: &amp;#34;italic&amp;#34;}}&amp;gt;brown&amp;lt;/Text&amp;gt; fox
jumped over the lazy &amp;lt;Text style={{fontWeight: &amp;#34;bold&amp;#34;}}&amp;gt;dog&amp;lt;/Text&amp;gt;.
&amp;lt;/Text&amp;gt;
&lt;/code>&lt;/pre>&lt;p>内联样式可以让你快速地实验，不过，这种方式还是要尽可能地避免，毕竟这种方式会非常的低效。内联样式对象可能在每次渲染的时候被重新创建。即使你有可能在 Props 或者 State 发生变化时修正样式值，也要避免使用内联样式。&lt;/p>
&lt;h3 id="styling-with-objects">Styling With Objects&lt;/h3>
&lt;p>对于内联样式最简单的修正就是将这些样式对象提取出来，作为单独的 JS 对象：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">italic&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontStyle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;italic&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">bold&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontWeight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s1">&amp;#39;bold&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">The&lt;/span> &lt;span class="nx">quick&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">italic&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">brown&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt; fox&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">jumped&lt;/span> &lt;span class="nx">over&lt;/span> &lt;span class="nx">the&lt;/span> &lt;span class="nx">lazy&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">bold&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">dog&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过，ReactNative 官方是推荐我们使用&lt;code>StyleSheet.create&lt;/code>来创建一个样式对象，而不是仅仅使用简单的 JS 的朴素对象。&lt;code>StyleSheet.create&lt;/code>是可选的一种方式但是能够提供很多的好处，它通过将样式对象转化为一个内部表的引用来保证了值是不可变对象并且是不透明的。将它放置到文件末尾，可以保证在整个应用的生命周期中只会创建一次而不是每次渲染的时候都会重新创建。由此可见，&lt;code>StyleSheet.create&lt;/code>是一点语法糖，同时，也方便了你进行 Prop 的类型的验证。通过&lt;code>StyleSheet.create&lt;/code>创建的样式对象可以用 View.propTypes.Style 与 Text.propTypes.Style 类型进行验证。&lt;/p>
&lt;h3 id="style-concatenation">Style Concatenation&lt;/h3>
&lt;p>虽然 React 强调了重用带样式的组件而不是样式本身，但是很多时候不可避免的会重用样式。譬如，如果你已经定义了一个叫 button 的样式和一个叫 accentText 的样式，但是需要将它们合并到一个叫 AccentButton 的组件中，最初定义的样式如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code>var styles = Stylesheet.create({
button: {
borderRadius: &amp;#39;8px&amp;#39;,
backgroundColor: &amp;#39;#99CCFF&amp;#39;
},
accentText: {
fontSize: &amp;#39;18px&amp;#39;,
fontWeight: &amp;#39;bold&amp;#39;
}
});
&lt;/code>&lt;/pre>&lt;p>然后希望创建一个对象同时用这两个属性：&lt;/p>
&lt;pre tabindex="0">&lt;code>var AccentButton = React.createClass({
render: function() {
return (
&amp;lt;Text style={[styles.button, styles.accentText]}&amp;gt;
{this.props.children}
&amp;lt;/Text&amp;gt;
);
}
});
&lt;/code>&lt;/pre>&lt;p>可以看出，这个 style 属性可以接收一个数组作为对象，也可以将自定义的内联样式放进去：&lt;/p>
&lt;pre tabindex="0">&lt;code>var AccentButton = React.createClass({
render: function() {
return (
&amp;lt;Text style={[styles.button, styles.accentText, {color: &amp;#39;#FFFFFF&amp;#39;}]}&amp;gt;
{this.props.children}
&amp;lt;/Text&amp;gt;
);
}
});
&lt;/code>&lt;/pre>&lt;p>如果存在冲突的话，就是为一个属性定义了两个值的时候，React Native 会自动解决该冲突，它会自动选择数组中最右边的定义作为有效定义，并且错误值，也就是 false，null，undefined 这些值会被忽略。这个特性可以被用于处理条件样式，譬如，如果有个&lt;code>&amp;lt;Button /&amp;gt;&lt;/code>组件，希望能在被触摸时展示额外的样式，则可以使用：&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;View style={[styles.button, this.state.touching &amp;amp;&amp;amp; styles.highlight]} /&amp;gt;
&lt;/code>&lt;/pre>&lt;h2 id="organization-and-inheritance">Organization and Inheritance&lt;/h2>
&lt;p>在一个大型的项目中会存在着大量的组件以及各种各样的样式定义，而这时候我们就需要来考虑怎么组织编排这些样式文件。&lt;/p>
&lt;h3 id="exporting-style-objects">Exporting Style Objects&lt;/h3>
&lt;p>随着样式定义的日渐复杂，我们会希望样式文件独立于主的 JS 文件。一个常用方法就是为每个组件建立一个独立的文件夹。如果我们的组件叫&lt;code>&amp;lt;ComponentName /&amp;gt;&lt;/code>，可以创建一个叫 ComponentName 的文件夹，如下所示：&lt;/p>
&lt;pre tabindex="0">&lt;code>- ComponentName
|- index.js
|- styles.js
&lt;/code>&lt;/pre>&lt;p>而在 styles.js 中，可以创建一个样式表，然后将它暴露出来：&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#39;use strict&amp;#39;;
var React = require(&amp;#39;react-native&amp;#39;);
var {
StyleSheet,
} = React;
var styles = Stylesheet.create({
text: {
color: &amp;#39;#FF00FF&amp;#39;,
fontSize: 16
},
bold: {
fontWeight: &amp;#39;bold&amp;#39;
}
});
module.exports = styles;
&lt;/code>&lt;/pre>&lt;p>在 index.js 中，只需要将样式导入即可：&lt;/p>
&lt;pre tabindex="0">&lt;code>var styles = require(&amp;#39;./styles.css&amp;#39;);
&lt;/code>&lt;/pre>&lt;p>接下来就可以在我们的组件中使用了：&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#39;use strict&amp;#39;;
var React = require(&amp;#39;react-native&amp;#39;);
var styles = require(&amp;#39;./styles.css&amp;#39;);
var {
View,
Text,
StyleSheet
} = React;
var ComponentName = React.createClass({
render: function() {
return (
&amp;lt;Text style={[styles.text, styles.bold]}&amp;gt;
Hello, world
&amp;lt;/Text&amp;gt;
);
}
});
&lt;/code>&lt;/pre>&lt;h3 id="passing-styles-as-props">Passing Styles as Props&lt;/h3>
&lt;p>You can also pass styles as properties. The propType &lt;code>View.propTypes.style&lt;/code> ensures that only valid styles are passed as props.&lt;/p>
&lt;p>You can use this pattern to create extensible components, which can be more effectively controlled and styled by their parents. For example, a component might take in an optional style prop:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#39;use strict&amp;#39;;
var React = require(&amp;#39;react-native&amp;#39;);
var {
View,
Text
} = React;
var CustomizableText = React.createClass({
propTypes: {
style: Text.propTypes.Style
},
getDefaultProps: function() {
return {
style: {}
};
},
render: function() {
return (
&amp;lt;Text style={[myStyles.text, this.props.style]}&amp;gt;Hello, world&amp;lt;/Text&amp;gt;
);
}
});
&lt;/code>&lt;/pre>&lt;h3 id="reusing-and-sharing-styles">Reusing and Sharing Styles&lt;/h3>
&lt;p>We typically prefer to reuse styled components, rather than reusing styles, but there are clearly some instances in which you will want to share styles between components. In this case, a common pattern is to organize your project roughly like so:&lt;/p>
&lt;pre tabindex="0">&lt;code>- js
|- components
|- Button
|- index.js
|- styles.js
|- styles
|- styles.js
|- colors.js
|- fonts.js
&lt;/code>&lt;/pre>&lt;p>By having separate directories for components and for styles, you can keep the intended use of each file clear based on context. A component’s folder should contain its React class, as well as any component-specific files. Shared styles should be kept out of component folders. Shared styles may include things such as your palette, fonts, standardized margin and padding, and so on.&lt;/p>
&lt;p>&lt;code>styles/styles.js&lt;/code> requires the other shared styles files, and exposes them; then your components can require &lt;code>styles.js&lt;/code> and use shared files as needed. Or, you may prefer to have components require specific stylesheets from the &lt;code>styles/&lt;/code> directory instead.&lt;/p>
&lt;p>Because we’ve now moved our styles into Javascript, organizing your styles is really a question of general code organization; there’s no single correct approach here.&lt;/p>
&lt;h2 id="css-polyfill">Css Polyfill&lt;/h2>
&lt;p>很多时候我们 Web 的知识并不能直接应用到 React Native 中，本部分对于常用的 Web 技巧在 React Native 上的具体应用做一个说明。&lt;/p>
&lt;h3 id="utils辅助类">Utils(辅助类)&lt;/h3>
&lt;h4 id="media-query">Media Query&lt;/h4>
&lt;p>在 CSS 种，Media Query 是非常常用的技巧之一，而在 React Native 种，并不能够直接运用上 CSS 的一些属性，不过可以使用如下方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">var&lt;/span> &lt;span class="n">Dimensions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">require&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">Dimensions&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">var&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Dimensions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="n">window&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="background">Background&lt;/h3>
&lt;h4 id="backgroundimage">BackgroundImage&lt;/h4>
&lt;p>背景图片是在 Web 之中常用的属性，往往我们需要一个自动填充满的背景图片，其效果即：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://i.stack.imgur.com/Ppm9Z.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://i.stack.imgur.com/RzNYq.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bgImageWrapper&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;absolute&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">top&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">left&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">right&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bgImage&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flex&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">resizeMode&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;stretch&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">welcome&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontSize&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">textAlign&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">margin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">View&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{{&lt;/span> &lt;span class="nx">flex&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">}}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">View&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bgImageWrapper&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Image&lt;/span> &lt;span class="nx">source&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;image!background&amp;#34;&lt;/span>&lt;span class="p">)}&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bgImage&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">welcome&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Welcome&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">Native&lt;/span>&lt;span class="o">!&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/View&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="sass">SASS&lt;/h2>
&lt;h2 id="animation">Animation&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>&lt;a href="http://blog.huynh.io/2015/08/06/react-native-animations/" target="_blank" rel="noopener">react-native-animations&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://browniefed.com/blog/2015/07/26/react-native-animated-api-basic-example/" target="_blank" rel="noopener">react-native-animated-api-basic-example&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h2 id="graphic">Graphic&lt;/h2>
&lt;h3 id="shapes">Shapes&lt;/h3>
&lt;p>&lt;a href="http://browniefed.com/blog/2015/09/10/the-shapes-of-react-native/" target="_blank" rel="noopener">the-shapes-of-react-native&lt;/a>&lt;/p>
&lt;h1 id="layout--position">Layout &amp;amp; Position&lt;/h1>
&lt;p>One of the biggest changes when working with styling in React Native is positioning. CSS supports a proliferation of positioning techniques. Between &lt;code>float&lt;/code>, absolute positioning, tables, block layout, and more, it’s easy to get lost! React Native’s approach to positioning is more focused, relying primarily on &lt;code>flexbox&lt;/code> as well as absolute positioning, along with the familiar properties of &lt;code>margin&lt;/code> and &lt;code>padding&lt;/code>. In this section, we’ll look at how layouts are constructed in React Native, and finish off by building a layout in the style of a Mondrian painting.&lt;/p>
&lt;h2 id="flexbox">Flexbox&lt;/h2>
&lt;p>Flexbox is a CSS3 layout mode. Unlike existing layout modes such as &lt;code>block&lt;/code> and &lt;code>inline&lt;/code>, flexbox gives us a direction-agnostic way of constructing layouts. (That’s right: finally, vertically centering is easy!) React Native leans heavily on flexbox. If you want ot read more about the general specification, the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes" target="_blank" rel="noopener">MDN documentation&lt;/a> is a good place to start.&lt;/p>
&lt;p>With React Native, the following props are related to flexbox:&lt;/p>
&lt;ul>
&lt;li>flex&lt;/li>
&lt;li>flexDirection&lt;/li>
&lt;li>flexWrap&lt;/li>
&lt;li>alignSelf&lt;/li>
&lt;li>alignItems&lt;/li>
&lt;/ul>
&lt;p>Additionally, these related values impact layout:&lt;/p>
&lt;ul>
&lt;li>height&lt;/li>
&lt;li>width&lt;/li>
&lt;li>margin&lt;/li>
&lt;li>border&lt;/li>
&lt;li>padding&lt;/li>
&lt;/ul>
&lt;p>If you have worked with flexbox on the web before, there won’t be many surprises here. Because flexbox is so important to constructing layouts in React Native, though, we’ll spend some time now exploring how it works.&lt;/p>
&lt;p>The basic idea behind flexbox is that you should be able to create predictably structured layouts even given dynamically sized elements. Since we’re designing for mobile, and need to accommodate multiple screen sizes and orientations, this is a useful feature.&lt;/p>
&lt;p>We’ll start with a parent ``, and some children.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;View style={styles.parent}&amp;gt;
&amp;lt;Text style={styles.child}&amp;gt; Child One &amp;lt;/Text&amp;gt;
&amp;lt;Text style={styles.child}&amp;gt; Child Two &amp;lt;/Text&amp;gt;
&amp;lt;Text style={styles.child}&amp;gt; Child Three &amp;lt;/Text&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code>&lt;/pre>&lt;p>To start, we’ve applied some basic styles to the views, but haven’t touched the positioning yet.&lt;/p>
&lt;pre tabindex="0">&lt;code>var styles = StyleSheet.create({
parent: {
backgroundColor: &amp;#39;#F5FCFF&amp;#39;,
borderColor: &amp;#39;#0099AA&amp;#39;,
borderWidth: 5,
marginTop: 30
},
child: {
borderColor: &amp;#39;#AA0099&amp;#39;,
borderWidth: 2,
textAlign: &amp;#39;center&amp;#39;,
fontSize: 24,
}
});
&lt;/code>&lt;/pre>&lt;p>Next, we will set flex on both the parent and the child. By setting the flex property, we are explicitly opting-in to flexbox behavior. flex takes a number. This number determines the relative weight each child gets; by setting it to 1 for each child, we weight them equally.
We also set flexDirection: column so that the children are laid out vertically. If we switch this to flexDirection: row, the children will be laid out horizontally instead.&lt;/p>
&lt;pre tabindex="0">&lt;code>var styles = StyleSheet.create({
parent: {
flex: 1,
flexDirection: &amp;#39;column&amp;#39;,
backgroundColor: &amp;#39;#F5FCFF&amp;#39;,
borderColor: &amp;#39;#0099AA&amp;#39;,
borderWidth: 5,
marginTop: 30
},
child: {
flex: 1,
borderColor: &amp;#39;#AA0099&amp;#39;,
borderWidth: 2,
textAlign: &amp;#39;center&amp;#39;,
fontSize: 24,
}
});
&lt;/code>&lt;/pre>&lt;p>If we set alignItems, the children will no longer expand to fill all available space in both directions. Because we have set flexDirection: row, they will expand to fill the row. However, now they will only take up as much vertical space as they need.
Then, the alignItems value determines where they are positioned along the cross-axis. The cross-axis is the axis orthogonal to the flexDirection. In this case, the cross axis is vertical. flex-start places the children at the top, center centers them, and flex-end places them at the bottom.
Let’s see what happens when we set alignItems:&lt;/p>
&lt;pre tabindex="0">&lt;code>var styles = StyleSheet.create({
parent: {
flex: 1,
flexDirection: &amp;#39;row&amp;#39;,
alignItems: &amp;#39;flex-start&amp;#39;,
backgroundColor: &amp;#39;#F5FCFF&amp;#39;,
borderColor: &amp;#39;#0099AA&amp;#39;,
borderWidth: 5,
marginTop: 30
},
child: {
flex: 1,
borderColor: &amp;#39;#AA0099&amp;#39;,
borderWidth: 2,
textAlign: &amp;#39;center&amp;#39;,
fontSize: 24,
}
});
&lt;/code>&lt;/pre>&lt;h2 id="absolute-position">Absolute Position&lt;/h2>
&lt;p>In addition to flexbox, React Native supports absolute positioning. It works much as it does on the web. You can enable it by setting the position property:
position: absolute
Then, you can control the component’s positioning with the familiar properties of left, right, top, and bottom.
An absolutely positioned child will apply these coordinates relative to its parent’s position, so you can lay out a parent element using flexbox and then use absolute position for a child within it.
There are some limitations to this. We don’t have z-index, for instance, so layering views on top of each other is a bit complicated. The last view in a stack typically takes precedence.
Absolute positioning can be very useful. For instance, if you want to create a container view that sits below the iOS status bar, absolute positioning makes this easy:&lt;/p>
&lt;pre tabindex="0">&lt;code>container: {
position: &amp;#39;absolute&amp;#39;,
top: 30,
left: 0,
right: 0,
bottom: 0
}
&lt;/code>&lt;/pre>&lt;h2 id="mixed-example">Mixed Example&lt;/h2>
&lt;p>Let’s try using these positioning techniques to create a more complicated layout. Say we want to mimic a Mondrian painting. Here’s the end result:&lt;/p>
&lt;p>To start with, we create a parent style to act as the container. We will use absolute positioning on the parent, because it’s most appropriate: we want it to fill all available space, except with a 30 pixel offset at the top, due to the iOS status bar. We’ll also set its flexDirection to column.&lt;/p>
&lt;pre tabindex="0">&lt;code>parent: {
flexDirection: &amp;#39;column&amp;#39;,
position: &amp;#39;absolute&amp;#39;,
top: 30,
left: 0,
right: 0,
bottom: 0
}
&lt;/code>&lt;/pre>&lt;p>Looking back at the image, we can divide the layout up into larger
blocks. These divisions are in many ways arbitrary, so we’ll pick an
option and roll with it. Here’s one way we can segment the layout:
We start by cutting the layout into a top and bottom block:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;View style={styles.parent}&amp;gt;
&amp;lt;View style={styles.topBlock}&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;View style={styles.bottomBlock}&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Then we add in the next layer. This includes both a “left column” and “bottom right” sector, as well as the actual &lt;View/> components for cells three, four, and five.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;View style={styles.parent}&amp;gt;
&amp;lt;View style={styles.topBlock}&amp;gt;
&amp;lt;View style={styles.leftCol}&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;View style={[styles.cellThree, styles.base]} /&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;View style={styles.bottomBlock}&amp;gt;
&amp;lt;View style={[styles.cellFour, styles.base]}/&amp;gt;
&amp;lt;View style={[styles.cellFive, styles.base]}/&amp;gt;
&amp;lt;View style={styles.bottomRight}&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code>&lt;/pre>&lt;p>The final markup contains all seven cells:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;View style={styles.parent}&amp;gt;
&amp;lt;View style={styles.topBlock}&amp;gt;
&amp;lt;View style={styles.leftCol}&amp;gt;
&amp;lt;View style={[styles.cellOne, styles.base]} /&amp;gt;
&amp;lt;View style={[styles.base, styles.cellTwo]} /&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;View style={[styles.cellThree, styles.base]} /&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;View style={styles.bottomBlock}&amp;gt;
&amp;lt;View style={[styles.cellFour, styles.base]}/&amp;gt;
&amp;lt;View style={[styles.cellFive, styles.base]}/&amp;gt;
&amp;lt;View style={styles.bottomRight}&amp;gt;
&amp;lt;View style={[styles.cellSix, styles.base]} /&amp;gt;
&amp;lt;View style={[styles.cellSeven, styles.base]} /&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/View&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Now let’s add the styles that make it work. (Show stylesheet.)··&lt;/p>
&lt;pre tabindex="0">&lt;code>// Mondrian/style.js
&amp;#39;use strict&amp;#39;;
var React = require(&amp;#39;react-native&amp;#39;);
var {
StyleSheet,
} = React;
var styles = StyleSheet.create({
parent: {
flexDirection: &amp;#39;column&amp;#39;,
position: &amp;#39;absolute&amp;#39;,
top: 30,
left: 0,
right: 0,
bottom: 0
},
base: {
borderColor: &amp;#39;#000000&amp;#39;,
borderWidth: 5
},
topBlock: {
flexDirection: &amp;#39;row&amp;#39;,
flex: 5
},
leftCol: {
flex: 2
},
bottomBlock: {
flex: 2,
flexDirection: &amp;#39;row&amp;#39;
},
bottomRight: {
flexDirection: &amp;#39;column&amp;#39;,
flex: 2
},
cellOne: {
flex: 1,
borderBottomWidth: 15
},
cellTwo: {
flex: 3
},
cellThree: {
backgroundColor: &amp;#39;#FF0000&amp;#39;,
flex: 5
},
cellFour: {
flex: 3,
backgroundColor: &amp;#39;#0000FF&amp;#39;
},
cellFive: {
flex: 6
},
cellSix: {
flex: 1
},
cellSeven: {
flex: 1,
backgroundColor: &amp;#39;#FFFF00&amp;#39;
}
});
module.exports = styles;
&lt;/code>&lt;/pre></description></item><item><title>路由导航</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA/</guid><description>&lt;h1 id="路由导航">路由导航&lt;/h1>
&lt;p>我们一层一层抽丝剥茧地&lt;/p>
&lt;h1 id="抽屉菜单">抽屉菜单&lt;/h1>
&lt;h1 id="页卡浏览">页卡浏览&lt;/h1>
&lt;h1 id="堆叠布局">堆叠布局&lt;/h1></description></item><item><title>事件与手势</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%89%8B%E5%8A%BF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E4%BA%8B%E4%BB%B6%E4%B8%8E%E6%89%8B%E5%8A%BF/</guid><description>&lt;h1 id="gesture">Gesture&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://blog.lum.pe/gesture-detection-in-react-native/" target="_blank" rel="noopener">gesture-detection-in-react-native&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>Web-based interfaces are usually designed with mouse-based controllers in mind. We use things like hover state to indicate interactivity and respond to user interaction. For mobile, unsurprisingly, it’s touch that matters. Mobile platforms have their own norms around interactions that you’ll want to design for. This varies somewhat from platform to platform: iOS behaves differently from Android, which behaves differently yet again from Windows Phone.
React Native provides a number of APIs for you to leverage as you build touch-ready interfaces. In this section, we’ll look at the &lt;code>&amp;lt;TouchableHighlight&amp;gt;&lt;/code> container component, as well as the lower-level APIs provided by PanResponder and the Gesture Responder system.&lt;/p>
&lt;h2 id="using-touchablehighlight">Using TouchableHighlight&lt;/h2>
&lt;p>Any interface elements that respond to user touch (think buttons, control elements, and so on) should usually have a &lt;TouchableHighlight> wrapper. TouchableHighlight causes an overlay to appear when the view is touched, giving the user visual feedback. This is one of the key interactions that causes a mobile application to feel native, as opposed to a mobile-optimized website, where touch feedback is limited. As a general rule of thumb, you should use &lt;TouchableHighlight/> anywhere that would be a button or a link on the web.
At its most basic usage, you just need to wrap your component in a &lt;TouchableHighlight>, which will add a simple overlay when pressed. The &lt;TouchableHighlight> component also gives you hooks for events such as onPressIn, onPressOut, onLongPress, and so on. You could use these, for instance, to build menus that only appear on long presses; and so on.
Here’s an example of how we can wrap a component in a &lt;TouchableHighlight> in order to give the user feedback:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;TouchableHighlight
onPressIn={this._onPressIn}
onPressOut={this._onPressOut}
style={styles.touchable}&amp;gt;
&amp;lt;View style={styles.button}&amp;gt;
&amp;lt;Text style={styles.welcome}&amp;gt;
{this.state.pressing ? &amp;#39;EEK!&amp;#39; : &amp;#39;PUSH ME&amp;#39;}
&amp;lt;/Text&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/TouchableHighlight&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When the user taps the button, an overlay appears, and the text changes.
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/fasdadsfasdpress_demo_states.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
This is a contrived example, but it illustrates the basic interactions that make a button “feel” touchable on iOS. The overlay is a key piece of feedback that informs the user that an element can be pressed. Note that in order to apply the overlay, we don’t need to apply any logic to our styles; the &lt;TouchableHighlight> handles the logic of that for us.Here’s the full code for this button component:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#39;use strict&amp;#39;;
var React = require(&amp;#39;react-native&amp;#39;);
var {
AppRegistry,
StyleSheet,
Text,
View,
TouchableHighlight
} = React;
var Button = React.createClass({
getInitialState: function() {
return {pressing: false};
},
_onPressIn: function() {
this.setState({pressing: true});
},
_onPressOut: function() {
this.setState({pressing: false});
},
render: function() {
return (
&amp;lt;View style={styles.container}&amp;gt;
&amp;lt;TouchableHighlight onPressIn={this._onPressIn}
onPressOut={this._onPressOut}
style={styles.touchable}&amp;gt;
&amp;lt;View style={styles.button}&amp;gt;
&amp;lt;Text style={styles.welcome}&amp;gt;
{this.state.pressing ? &amp;#39;EEK!&amp;#39; : &amp;#39;PUSH ME&amp;#39;}
&amp;lt;/Text&amp;gt;
&amp;lt;/View&amp;gt;
&amp;lt;/TouchableHighlight&amp;gt;
&amp;lt;/View&amp;gt;
);
}
});
// Styles
var styles = StyleSheet.create({
container: {
flex: 1,
justifyContent: &amp;#39;center&amp;#39;,
alignItems: &amp;#39;center&amp;#39;,
backgroundColor: &amp;#39;#F5FCFF&amp;#39;,
},
welcome: {
fontSize: 20,
textAlign: &amp;#39;center&amp;#39;,
margin: 10,
color: &amp;#39;#FFFFFF&amp;#39;
},
touchable: {
borderRadius: 100
},
button: {
backgroundColor: &amp;#39;#FF0000&amp;#39;,
borderRadius: 100,
height: 200,
width: 200,
justifyContent: &amp;#39;center&amp;#39;
},
});
module.exports = Button;
&lt;/code>&lt;/pre>&lt;h2 id="the-gesture-responder-system">The Gesture Responder System&lt;/h2>
&lt;p>What if you want to do more than just make things “tappable”? React Native also exposes two APIs for custom touch handling: &lt;code>GestureResponder&lt;/code> and &lt;code>PanResponder&lt;/code>. GestureResponder is a lower-level API, while PanResponder provides a useful abstraction. We’ll start by looking at how the GestureResponder system works, because it’s the basis for &lt;code>PanResponder&lt;/code>’s API.&lt;/p>
&lt;p>Touch on mobile is fairly complicated. Most mobile platforms support multitouch, which means that there can be multiple touch points active on the screen at once. (Not all of these are necessarily fingers, either; think about the difficulty of, e.g., detecting the user’s palm resting on the corner of the screen.) Additionally, there’s the issue of which view should handle a given touch. This problem is similar to how mouse events are processed on the web, and the default behavior is also similar: the topmost child handles the touch event by default. With React Native’s gesture responder system, however, we can override this behavior if we so choose.&lt;/p>
&lt;p>The &lt;em>touch responder&lt;/em> is the view which handles a given touch event. In the previous section, we saw that the `` component acts as a touch responder. We can cause our own components to become the touch responder, too. The lifecycle by which this process is negotiated is a little complicated. A view which wishes to obtain touch responder status should implement four props:&lt;/p>
&lt;ul>
&lt;li>&lt;code>View.props.onStartShouldSetResponder&lt;/code>&lt;/li>
&lt;li>&lt;code>View.props.onMoveShouldSetResponder&lt;/code>&lt;/li>
&lt;li>&lt;code>View.props.onResponderGrant&lt;/code>&lt;/li>
&lt;li>&lt;code>View.props.onResponderReject&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>These then get invoked according to the following flow, in order to determine if the view will receive responder status:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/fadscadsclaiming_touch.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Yikes, that looks complicated! Let’s tease this apart. First, a touch event has three main lifecycle stages: start, move, and release. (These correspond to mouseDown, mouseMove, and mouseUp in the browser.) A view can request to be the touch responder during the start or the move phase. This behavior is specified by onStartShouldSetResponder and onMoveShouldSetResponder. When one of those functions returns true, the view attempts to claim responder status.
After a view has attempted to claim responder status, its attempt may be granted or rejected. The appropriate callback — either onResponderGrant or onResponderReject — will be invoked.
The responder negotiation functions are called in a bubbling pattern. If multiple views attempt to claim responder status, the deepest component will become the responder. This is typically the desired behavior; otherwise, you would have difficulty adding touchable components such as buttons to a larger view. If you want to override this behavior, parent components can make use of onStartShouldSetResponderCapture and onMoveShouldSetResponderCapture. Returning true from either of these will prevent a component’s children from becoming the touch responder.
After a view has successfully claimed touch responder status, its relevant event handlers may be called. Here’s the excerpt from the Gesture Responder documentation:
View.props.onResponderMove
The user is moving their finger
View.props.onResponderRelease
Fired at the end of the touch, ie “touchUp”
View.props.onResponderTerminationRequest
Something else wants to become responder. Should this view release the responder? Returning true allows release
View.props.onResponderTerminate
The responder has been taken from the View. Might be taken by other views after a call to onResponderTerminationRequest, or might be taken by the OS without asking (happens with control center/ notification center on iOS)
Most of the time, you will primarily be concerned with onResponderMove and onResponderRelease.
All of these methods receive a synthetic touch event object, which adheres to the following format (again, excerpted from the documentation):
changedTouches - Array of all touch events that have changed since the last event
identifier - The ID of the touch
locationX - The X position of the touch, relative to the element
locationY - The Y position of the touch, relative to the element
pageX - The X position of the touch, relative to the screen
pageY - The Y position of the touch, relative to the screen
target - The node id of the element receiving the touch event
timestamp - A time identifier for the touch, useful for velocity calculation
touches - Array of all current touches on the screen
You can make use of this information when deciding whether or not to respond to a touch event. Perhaps your view only cares about two-finger touches, for example.
This is a fairly low-level API; if you want to detect and respond to gestures in this way, you will need to spend a decent amount of time tuning the correct parameters and figuring out which values you should care about. In the next section, we will take a look at PanResponder, which supplies a somewhat higher-level interpretation of user gestures.
PanResponder
Unlike &lt;TouchableHighlight>, PanResponder is not a component, but rather a class provided by React Native. It provides a slightly higher-level API than the basic events returned by the Gesture Responder system, while still providing access to those raw events. A PanResponder gestureState object gives you access to the following, in accordance with the PanResponder documentation:
stateID - ID of the gestureState- persisted as long as there at least one touch on screen
moveX - the latest screen coordinates of the recently-moved touch
moveY - the latest screen coordinates of the recently-moved touch
x0 - the screen coordinates of the responder grant
y0 - the screen coordinates of the responder grant
dx - accumulated distance of the gesture since the touch started
dy - accumulated distance of the gesture since the touch started
vx - current velocity of the gesture
vy - current velocity of the gesture
numberActiveTouches - Number of touches currently on screeen
As you can see, in addition to raw position data, a gestureState object also includes information such as the current velocity of the touch and the accumulated distance.
To make use of PanResponder in a component, we need to create a PanResponder object and then attach it to a component in the render method.
Creating a PanResponder requires us to specify the proper handlers for PanResponder events:
this._panResponder = PanResponder.create({
onStartShouldSetPanResponder: this._handleStartShouldSetPanResponder,
onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
onPanResponderGrant: this._handlePanResponderGrant,
onPanResponderMove: this._handlePanResponderMove,
onPanResponderRelease: this._handlePanResponderEnd,
onPanResponderTerminate: this._handlePanResponderEnd,
});
Then, we use spread syntax to attach the PanResponder to the view in the component’s render method.
render: function() {
return (
&amp;lt;View
{&amp;hellip;this._panResponder.panHandlers}&amp;gt;
{ /_ View contents here _/ }
&lt;/View>
);
}
After this, the handlers that you passed to the PanResponder.create call will be invoked during the appropriate move events, if the touch originates within this view.
Here’s a modified version of the PanResponder example code provided by React Native. This version listens to touch events on the container view, as opposed to just the circle, and so that the values are printed to the screen as you interact with the application. If you plan on implementing your own gesture recognizers, I suggest experimenting with this application on a real device, so that you can get a feel for how these values respond.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Adapted from https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/PanResponderExample.js
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;use strict&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;react-native&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">PanResponder&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">View&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Text&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">CIRCLE_SIZE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">40&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">CIRCLE_COLOR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;blue&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">CIRCLE_HIGHLIGHT_COLOR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;green&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">PanResponderExample&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createClass&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">statics&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">title&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;PanResponder Sample&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">description&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;Basic gesture handling example&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_panResponder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_previousLeft&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_previousTop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_circleStyles&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">circle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">?&lt;/span>&lt;span class="p">{&lt;/span> &lt;span class="nx">setNativeProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">void&lt;/span> &lt;span class="p">}),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">getInitialState&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">numberActiveTouches&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">moveX&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">moveY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">y0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dx&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dy&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">vx&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">vy&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">componentWillMount&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_panResponder&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">PanResponder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onStartShouldSetPanResponder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handleStartShouldSetPanResponder&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onMoveShouldSetPanResponder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handleMoveShouldSetPanResponder&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onPanResponderGrant&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handlePanResponderGrant&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onPanResponderMove&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handlePanResponderMove&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onPanResponderRelease&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handlePanResponderEnd&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">onPanResponderTerminate&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_handlePanResponderEnd&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousLeft&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousTop&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">84&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_circleStyles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">left&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousLeft&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">top&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousTop&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">componentDidMount&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_updatePosition&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">View&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="p">{...&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_panResponder&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">panHandlers&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">View&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ref&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{(&lt;/span>&lt;span class="nx">circle&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">circle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">/&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">numberActiveTouches&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="nx">touches&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">dx&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dx&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">dy&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dy&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">vx&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vx&lt;/span>&lt;span class="p">},&lt;/span> &lt;span class="nx">vy&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vy&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_highlight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setNativeProps&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CIRCLE_HIGHLIGHT_COLOR&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_unHighlight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setNativeProps&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CIRCLE_COLOR&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_updatePosition&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">circle&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setNativeProps&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_circleStyles&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_handleStartShouldSetPanResponder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gestureState&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Should we become active when the user presses down on the circle?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_handleMoveShouldSetPanResponder&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">gestureState&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kr">boolean&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Should we become active when the user moves a touch over the circle?
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_handlePanResponderGrant&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_highlight&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_handlePanResponderMove&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setState&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">stateID&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">stateID&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">moveX&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">moveX&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">moveY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">moveY&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">y0&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dx&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dx&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">dy&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dy&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">vx&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vx&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">vy&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">vy&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">numberActiveTouches&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">numberActiveTouches&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_circleStyles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousLeft&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_circleStyles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">top&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousTop&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_updatePosition&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">_handlePanResponderEnd&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">e&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">Object&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_unHighlight&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousLeft&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">_previousTop&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nx">gestureState&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">dy&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">circle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CIRCLE_SIZE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CIRCLE_SIZE&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">borderRadius&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CIRCLE_SIZE&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">CIRCLE_COLOR&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">position&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;absolute&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">left&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">top&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">container&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flex&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">paddingTop&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">64&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">module&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exports&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">PanResponderExample&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Choosing How to Handle Touch
How should you decide when to use the touch and gesture APIs discussed in this section? It depends on what you want to build.
In order to provide the user with basic feedback, and indicate that something is “tappable,” like a button, use the &lt;TouchableHighlight> component.
In order to implement your own, custom touch interfaces, use either the raw Gesture Responder system, or a PanResponder. Chances are that you will almost always prefer the PanResponder approach, because it also gives you access to the simpler touch events provided by the Gesture Responder system. If you are designing a game, or an application with an unusual interface, you’ll need to spend some time building out the interactions you want by using these APIs.
For many applications, you won’t need to implement any custom touch handling with either the Gesture Responder system or the PanResponder. In the next section, we’ll look at some of the higher-level components which implement common UI patterns for you.&lt;/p>
&lt;h1 id="keyboard-event">Keyboard Event&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://shift.infinite.red/avoiding-the-keyboard-in-react-native-56d05b9a1e81#.qu4fvst6j" target="_blank" rel="noopener">Avoiding the Keyboard in React Native&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://cdn-images-1.medium.com/max/600/1*0kl8Fx5KxyI42L-sYfz2gg.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://cdn-images-1.medium.com/max/800/1*yANxSg6C260tIpeje4KZSA.gif" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="react-native-keyboard-spacerhttpsgithubcomandr3whur5treact-native-keyboard-spacer">&lt;a href="https://github.com/Andr3wHur5t/react-native-keyboard-spacer" target="_blank" rel="noopener">react-native-keyboard-spacer&lt;/a>&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://camo.githubusercontent.com/53bca6c523803afc2598d1df6e0dce4c5e439c3c/687474703a2f2f6661742e6766796361742e636f6d2f496e636f6e73657175656e7469616c426f7468416d65726963616e6b65737472656c2e676966" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>组件基础</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="组件基础">组件基础&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://cdn-images-1.medium.com/max/1600/0*E-c0mBtxYrcZJuA5." alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="组件声明">组件声明&lt;/h1>
&lt;h1 id="组件样式">组件样式&lt;/h1>
&lt;h2 id="样式声明">样式声明&lt;/h2>
&lt;p>接下来我们&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">import&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">StyleSheet&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="s2">&amp;#34;react-native&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建能够用于 React Native 组件的样式表
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kr">const&lt;/span> &lt;span class="nx">styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">container&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flex&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">justifyContent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alignItems&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;ghostwhite&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">box&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">width&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">height&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">justifyContent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alignItems&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;lightgray&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">boxText&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;darkslategray&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontWeight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;bold&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="nx">styles&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在真实项目中随着组件复杂度的增加，我们往往会遵循单一职责原则将组件的样式声明抽取到单独的文件中，然后在组件内引入该样式文件，有点类似于 CSS Modules 的写法。&lt;/p>
&lt;h2 id="flexbox-布局">Flexbox 布局&lt;/h2>
&lt;h2 id="应用主题设置">应用主题设置&lt;/h2>
&lt;h2 id="css-in-js">CSS-in-JS&lt;/h2>
&lt;p>React Native 允许我们以声明对象的方式来声明样式，不过我们就无法使用 CSS 中的便捷写法了。譬如在下列的 CSS 样式声明中我们使用了缩略写法来声明字体与边距样式：&lt;/p>
&lt;pre tabindex="0">&lt;code>font: bold 14px/16px &amp;#34;Helvetica&amp;#34;;
margin: 5px 7px 2px;
&lt;/code>&lt;/pre>&lt;p>其对应转换为 React Native 支持的样式对象：&lt;/p>
&lt;pre tabindex="0">&lt;code>{
  fontFamily: &amp;#39;Helvetica&amp;#39;,
  fontSize: 14,
  fontWeight: &amp;#39;bold&amp;#39;,
  fontStyle: &amp;#39;normal&amp;#39;,
  fontVariant: [],
  lineHeight: 16,
  marginTop: 5,
  marginRight: 7,
  marginBottom: 2,
  marginLeft: 7,
}
&lt;/code>&lt;/pre>&lt;p>这里为了避免声明复杂的样式类，我们可以选用一些 CSS-in-JS 库来帮助我们处理样式或者创建带样式的组件。较为轻量级的用法可以使用  css-to-react-native 或者类似的库将 CSS 样式声明转化为对应的 React Native 样式对象：&lt;/p>
&lt;pre tabindex="0">&lt;code>import transform from &amp;#39;css-to-react-native&amp;#39;;
// or const transform = require(&amp;#39;css-to-react-native&amp;#39;).default;
transform([
  [&amp;#39;font&amp;#39;, &amp;#39;bold 14px/16px &amp;#34;Helvetica&amp;#34;&amp;#39;],
  [&amp;#39;margin&amp;#39;, &amp;#39;5px 7px 2px&amp;#39;],
  [&amp;#39;border-left-width&amp;#39;, &amp;#39;5px&amp;#39;],
]); // =&amp;gt; { fontFamily: &amp;#39;Helvetica&amp;#39;, ... }
&lt;/code>&lt;/pre>&lt;p>我们也可以转换某个单独的样式属性名或者匹配对象：&lt;/p>
&lt;pre tabindex="0">&lt;code>import { getPropertyName, getStylesForProperty } from &amp;#39;css-to-react-native&amp;#39;;
getPropertyName(&amp;#39;border-width&amp;#39;); // =&amp;gt; &amp;#39;borderWidth&amp;#39;
getStylesForProperty(&amp;#39;borderWidth&amp;#39;, &amp;#39;1px 0px 2px 0px&amp;#39;); // =&amp;gt; { borderTopWidth: 1, ... }
&lt;/code>&lt;/pre>&lt;h1 id="交互事件">交互事件&lt;/h1>
&lt;p>在标准的 Web 应用中，我们能够方便地编写跨浏览器的事件响应代码；不过鉴于原生界面渲染的差异，在 React Native 中我们还需要根据不同的平台差异使用不同的响应机制。本小节我们即着眼于如何使用不同的 React Native 组件来收集用户输入或者响应用户操作，从基础的文本输入，到列表项选择、单选框以及时间日期选择器等等。&lt;/p></description></item><item><title>组件基础.old</title><link>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80.old/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-series/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/react-native/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80.old/</guid><description>&lt;h1 id="component组件">Component(组件)&lt;/h1>
&lt;p>一个最基本的组件构成如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;use strict&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">require&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;react-native&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nx">AppRegistry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">Text&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">View&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">HelloWorld&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createClass&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">View&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">container&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">welcome&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">Welcome&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">React&lt;/span> &lt;span class="nx">Native&lt;/span>&lt;span class="o">!&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instructions&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">To&lt;/span> &lt;span class="nx">get&lt;/span> &lt;span class="nx">started&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">edit&lt;/span> &lt;span class="nx">index&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">ios&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">js&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">instructions&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Press&lt;/span> &lt;span class="nx">Cmd&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">R&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">reload&lt;/span>&lt;span class="p">,{&lt;/span>&lt;span class="s2">&amp;#34;\n&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">Cmd&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="nx">D&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="nx">shake&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="nx">dev&lt;/span> &lt;span class="nx">menu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/View&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">container&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">flex&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">justifyContent&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">alignItems&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">backgroundColor&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;#F5FCFF&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">welcome&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontSize&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">textAlign&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">margin&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">instructions&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">textAlign&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;center&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">color&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;#333333&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">marginBottom&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">AppRegistry&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">registerComponent&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;HelloWorld&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">HelloWorld&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="basic组件基础">Basic(组件基础)&lt;/h2>
&lt;h3 id="原生组件与-html-元素的相同点">原生组件与 HTML 元素的相同点&lt;/h3>
&lt;p>在 Web 领域的开发中，我们往往需要使用大量基本的 HTML 元素，包括但不限于 div、span、img 这样的，而在 React Native 中往往是使用 View、Image、Text 以及 ListView 等等替换，一个对照表如下所示：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>HTML&lt;/th>
&lt;th>React Native&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>div&lt;/td>
&lt;td>View&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>img&lt;/td>
&lt;td>Image&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>span, p&lt;/td>
&lt;td>Text&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>ul/ol, li&lt;/td>
&lt;td>ListView, child items&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="built-in-components">Built-in Components&lt;/h1>
&lt;h2 id="indicator">Indicator&lt;/h2>
&lt;h3 id="text">Text&lt;/h3>
&lt;p>在 React Native 中，只有&lt;Text>组件能够接受文本作为子节点，换言之，如下的写法是错的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> Text doesn&amp;#39;t go here! &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>与之相对的，应该将文本包裹在&lt;Text>组件中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is okay!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">View&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 HTML 中，如果需要展示一系列具有复杂格式的字符串，可能需要&lt;code>&amp;lt;strong&amp;gt;&lt;/code>、&lt;code>&amp;lt;em&amp;gt;&lt;/code>等动态组合，譬如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>The quick &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">em&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>brown&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">em&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> fox jumped over the lazy &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">strong&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>dog&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">strong&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而在于 React Native 中，只有&lt;Text>组件可以用来包裹某个文本，而如果需要对其属性进行控制，则需要利用其 Style，而不是添加&lt;code>&amp;lt;em&amp;gt;&lt;/code>、&lt;code>&amp;lt;strong&amp;gt;&lt;/code>这些标签。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> The quick &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{{fontStyle:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="na">italic&lt;/span>&lt;span class="err">&amp;#34;}}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>brown&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> fox
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> jumped over the lazy &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">Text&lt;/span> &lt;span class="na">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">{{fontWeight:&lt;/span> &lt;span class="err">&amp;#34;&lt;/span>&lt;span class="na">bold&lt;/span>&lt;span class="err">&amp;#34;}}&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>dog&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">Text&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不过上述这种直接把属性写在组件里的方式会将整个代码变得非常的冗长，可以以另一种方式进行处理，譬如将独特功能的组件封装为特殊的组件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">styles&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">StyleSheet&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">create&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">bold&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontWeight&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;bold&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">italic&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">fontStyle&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s2">&amp;#34;italic&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">Strong&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createClass&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">bold&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">Em&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">React&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">createClass&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">render&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span> &lt;span class="nx">style&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="nx">styles&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">italic&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">props&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">children&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在使用了这样的自带样式的组件之后，可以以一种非常类似于 HTML 的方式去使用这些组件，譬如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Text&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">The&lt;/span> &lt;span class="nx">quick&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="nx">Em&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="nx">brown&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Em&amp;gt; fox jumped over the lazy &amp;lt;Strong&amp;gt;dog&amp;lt;/Strong&amp;gt;.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="err">/Text&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样地，RN 中也没有类似于 h1、h2 这样地元素，不过就像类似于封装 EM 一样，可以自己基于 Text 组件进行封装。&lt;/p>
&lt;h2 id="gallery">Gallery&lt;/h2>
&lt;h3 id="image">Image&lt;/h3>
&lt;p>If text is the most basic element in an application, images are a close contender, for both mobile and for web. When writing HTML and CSS for the web, we include images in a variety of ways: sometimes we use the &lt;img/> tag, while at other times we apply images via CSS, such as when we use the background-image property. In React Native, we have a similar &lt;Image> component, but it behaves a little differently.
The basic usage of the &lt;Image> component is straightforward; just set the source prop:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;Image source={require(&amp;#39;image!puppies&amp;#39;)} /&amp;gt;
&lt;/code>&lt;/pre>&lt;p>How does that require call work? Where does this resource live? Here’s one part of React Native that you’ll have to adjust based on which platform you’re targeting. On iOS, this means that you’ll need to import it into the assets folder within your XCode project. By providing the appropriate @2x and @3x resolution files, you will enable XCode to serve the correct asset file for the correct platform. This is a nice change from web development: the relatively limited possible combinations of screen size and resolution on iOS means that it’s easier to create targeted assets.
For React Native on other platforms, we can expect that the image! require syntax will point to a similar assets directory.
It’s also worth mentioning that it is also possible to include web-based image sources instead of bundling your assets with your application. Facebook does this as one of the examples in the UIExplorer application:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;Image source={{uri: &amp;#39;https://facebook.github.io/react/img/logo_og.png&amp;#39;}}
style={{width: 400, height: 400}} /&amp;gt;
&lt;/code>&lt;/pre>&lt;p>When utilizing network resources, you will need to specify dimensions manually.
Downloading images via the network rather than including them as assets has some advantages. During development, for instance, it may be easier to use this approach while prototyping, rather than carefully importing all of your assets ahead of time. It also reduces the size of your bundled mobile application, so that users needn’t download all of your assets. However, it means that instead you’ll be relying on the user’s data plan whenever they access your application in the future. For most cases, you’ll want to avoid using the URI-based method.
If you’re wondering about working with the user’s own images, we’ll discuss the Camera Roll during our exploration of platform-specific APIs.
Because React Native emphasizes a component-based approach, images must be included as an &lt;Image>component instead of being referenced via styles. For instance, last chapter, we wanted to use an image as a background for our weather application. Whereas in plain HTML and CSS you would likely use the background-image property to apply a background image, in React Native you instead use the &lt;Image> as a container component, like so:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;Image source={require(&amp;#39;image!puppies&amp;#39;)}&amp;gt;
{/* Your content here... */}
&amp;lt;/Image&amp;gt;
&lt;/code>&lt;/pre>&lt;p>Styling the images themselves is fairly straightforward. In addition to applying styles, certain props control how the image will be rendered. You’ll often make use of the resizeMode prop, for instance, which can be set to resize, cover, or contain. The UIExplorer app demonstrates this well:&lt;/p>
&lt;p>The &lt;Image> component is easy to work with, and very flexible. You will likely make extensive use of it in your own applications.&lt;/p>
&lt;h2 id="resource">Resource&lt;/h2>
&lt;h1 id="container">Container&lt;/h1>
&lt;h2 id="navigation">Navigation&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/the-exponent-log/routing-and-navigation-in-react-native-6b27bee39603#.s1ozj1r3b" target="_blank" rel="noopener">Routing and Navigation in React Native&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="tabbar">TabBar&lt;/h2>
&lt;h1 id="layout">Layout&lt;/h1>
&lt;h2 id="responsive">Responsive&lt;/h2>
&lt;h3 id="autoresponsive-reacthttpsxudafenggithubioautoresponsive-react">&lt;a href="https://xudafeng.github.io/autoresponsive-react/" target="_blank" rel="noopener">autoresponsive-react&lt;/a>&lt;/h3>
&lt;h3 id="images">Images&lt;/h3>
&lt;p>&lt;a href="http://www.reactnative.com/responsive-images-in-react-native/" target="_blank" rel="noopener">responsive-images-in-react-native&lt;/a>&lt;/p>
&lt;h1 id="storage">Storage&lt;/h1>
&lt;h2 id="asyncstorage">AsyncStorage&lt;/h2>
&lt;h2 id="sqlite">SQLite&lt;/h2>
&lt;p>ReactNative 对于 SQLite 的支持主要还是依靠本地 Module-Bridge。可以参考&lt;a href="https://github.com/almost/react-native-sqlite#usage" target="_blank" rel="noopener">react-native-sqlit&lt;/a>这个类库&lt;/p></description></item></channel></rss>