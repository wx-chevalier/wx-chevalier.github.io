<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>模式匹配 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/algorithm-series/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <atom:link href="https://ng-tech.icu/books/algorithm-series/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/index.xml" rel="self" type="application/rss+xml" />
    <description>模式匹配</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>模式匹配</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
    </image>
    
    <item>
      <title>多模式匹配</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/%E5%A4%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/algorithm-series/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/%E5%A4%9A%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</guid>
      <description>&lt;h1 id=&#34;aho-corasick-算法&#34;&gt;Aho-Corasick 算法&lt;/h1&gt;
&lt;p&gt;Aho-Corasick 算法在 1975 年产生于贝尔实验室，是著名的多模匹配算法之一。一个常见的例子就是给出 n 个单词，再给出一段包含 m 个字符的文章，让你找出有多少个单词在文章里出现过。KMP 中我们用两个指针 i 和 j 分别表示，A[i-j+ 1..i] 与 B[1..j] 完全相等。也就是说，i 是不断增加的，随着 i 的增加 j 相应地变化，且 j 满足以 A[i] 结尾的长度为 j 的字符串正好匹配 B 串的前 j 个字符，当 A[i+1]≠B[j+1]，KMP 的策略是调整 j 的位置(减小 j 值)使得 A[i-j+1..i] 与 B[1..j] 保持匹配且新的 B[j+1] 恰好与 A[i+1] 匹配，而 next 函数恰恰记录了这个 j 应该调整到的位置。同样 AC 自动机的失败指针具有同样的功能，自动机本身是计算理论的一个概念；其实是一张“图”，每个点是一个“状态”，而边则是状态之间的转移，根据条件能指导从一个状态走向另一个状态。很多字符串匹配算法都是基于自动机模型的，比如被广泛使用的正则表达式。AC 自动机算法算是比较简单直观的字符串匹配自动机，它其实就是在一颗 Trie 树上建一些失配指针，当失配时只要顺着失配指针走，就能避免一些重复的计算。比如对于字符串 antibody 和 tide，如果第一个串匹配到第 5 个字符(b)失配了可以直接走入第二个串的第 3 个字符(d)进行匹配，因为前面的“ti”是公共的，如果能匹配到第一个串的第 5 个字符，那么前面两个肯定是 ti。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
