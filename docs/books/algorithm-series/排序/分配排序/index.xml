<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>分配排序 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E5%88%86%E9%85%8D%E6%8E%92%E5%BA%8F/</link>
      <atom:link href="https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E5%88%86%E9%85%8D%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    <description>分配排序</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>分配排序</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E5%88%86%E9%85%8D%E6%8E%92%E5%BA%8F/</link>
    </image>
    
    <item>
      <title>基数排序</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E5%88%86%E9%85%8D%E6%8E%92%E5%BA%8F/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E5%88%86%E9%85%8D%E6%8E%92%E5%BA%8F/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;基数排序&#34;&gt;基数排序&lt;/h1&gt;
&lt;h2 id=&#34;complexity算法复杂度&#34;&gt;Complexity:算法复杂度&lt;/h2&gt;
&lt;h3 id=&#34;稳定性&#34;&gt;稳定性&lt;/h3&gt;
&lt;p&gt;基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优
先级排序，最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以其是稳定的排序算法。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>希尔排序</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E5%88%86%E9%85%8D%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E5%88%86%E9%85%8D%E6%8E%92%E5%BA%8F/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;希尔排序&#34;&gt;希尔排序&lt;/h1&gt;
&lt;h2 id=&#34;complexity-算法复杂度&#34;&gt;Complexity: 算法复杂度&lt;/h2&gt;
&lt;h3 id=&#34;稳定性&#34;&gt;稳定性&lt;/h3&gt;
&lt;p&gt;希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，&lt;/p&gt;
&lt;p&gt;插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比 O(n^2) 好一些。由于多次插入排序，我们知道一次插入排序是稳定的，不会改变相同元素的相对顺序，但在不同的插入排序过程中，相同的元素可能在各自的插入排序中移动，最后其稳定性就会被打乱，所以 shell 排序是不稳定的。&lt;/p&gt;
&lt;p&gt;希尔排序的实质就是分组插入排序，该方法又称缩小增量排序，因 DL．Shell 于 1959 年提出而得名。该方法的基本思想是：先将整个待排元素序列分割成若干个子序列(由相隔某个 “ 增量 ” 的元素组成的)分别进行直接插入排序，然后依次缩减增量再进行排序，待整个序列中的元素基本有序(增量足够小)时，再对全体元素进行一次直接插入排序。因为直接插入排序在元素基本有序的情况下(接近最好情况)，效率是很高的，因此希尔排序在时间效率上比前两种方法有较大提高。&lt;/p&gt;
&lt;p&gt;以 n=10 的一个数组 49, 38, 65, 97, 26, 13, 27, 49, 55, 4 为例&lt;/p&gt;
&lt;p&gt;第一次 gap = 10 / 2 = 5&lt;/p&gt;
&lt;p&gt;49 38 65 97 26 13 27 49 55 4&lt;/p&gt;
&lt;p&gt;1A 1B&lt;/p&gt;
&lt;p&gt;2A 2B&lt;/p&gt;
&lt;p&gt;3A 3B&lt;/p&gt;
&lt;p&gt;4A 4B&lt;/p&gt;
&lt;p&gt;5A 5B&lt;/p&gt;
&lt;p&gt;1A,1B，2A,2B 等为分组标记，数字相同的表示在同一组，大写字母表示是该组的第几个元素，每次对同一组的数据进行直接插入排序。即分成了五组 (49, 13) (38, 27) (65, 49) (97, 55) (26, 4) 这样每组排序后就变成了 (13, 49) (27, 38) (49, 65) (55, 97) (4, 26)，下同。&lt;/p&gt;
&lt;p&gt;第二次 gap = 5 / 2 = 2&lt;/p&gt;
&lt;p&gt;排序后&lt;/p&gt;
&lt;p&gt;13 27 49 55 4 49 38 65 97 26&lt;/p&gt;
&lt;p&gt;1A 1B 1C 1D 1E&lt;/p&gt;
&lt;p&gt;2A 2B 2C 2D 2E&lt;/p&gt;
&lt;p&gt;第三次 gap = 2 / 2 = 1&lt;/p&gt;
&lt;p&gt;4 26 13 27 38 49 49 55 97 65&lt;/p&gt;
&lt;p&gt;1A 1B 1C 1D 1E 1F 1G 1H 1I 1J&lt;/p&gt;
&lt;p&gt;第四次 gap = 1 / 2 = 0 排序完成得到数组：&lt;/p&gt;
&lt;p&gt;4 13 26 27 38 49 49 55 65 97&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  void shellsort3(int a[], int n)
  {
  int i, j, gap;

  for (gap = n / 2; gap &amp;gt; 0; gap /= 2)
  for (i = gap; i &amp;lt; n; i++)
  for (j = i - gap; j &amp;gt;= 0 &amp;amp;&amp;amp; a[j] &amp;gt; a[j + gap]; j -= gap)
  Swap(a[j], a[j + gap]);
  }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
