<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>简单排序 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/</link>
      <atom:link href="https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/index.xml" rel="self" type="application/rss+xml" />
    <description>简单排序</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>简单排序</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/</link>
    </image>
    
    <item>
      <title>插入排序</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;插入排序&#34;&gt;插入排序&lt;/h1&gt;
&lt;h2 id=&#34;complexity&#34;&gt;Complexity&lt;/h2&gt;
&lt;h3 id=&#34;稳定性&#34;&gt;稳定性&lt;/h3&gt;
&lt;p&gt;插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当然，刚开始这个有序的小序列只有 1 个元素，就是第一个元素。比较是从有序序列的末尾开始，也就是想要插入的元素和已经有序的最大者开始比起，如果比它大则直接插入在其后面，否则一直往前找直到找到它该插入的位置。如果碰见一个和插入元素相等的，那么插入元素把想插入的元素放在相等元素的后面。所以，相等元素的前后顺序没有改变，从原无序序列出去的顺序就是排好序后的顺序，所以插入排序是稳定的。&lt;/p&gt;
&lt;h2 id=&#34;implementation-代码实现&#34;&gt;Implementation: 代码实现&lt;/h2&gt;
&lt;p&gt;插入排序就是每一步都将一个待排数据按其大小插入到已经排序的数据中的适当位置，直到全部插入完毕。&lt;br&gt;
插入排序方法分直接插入排序和折半插入排序两种，这里只介绍直接插入排序，折半插入排序留到 “ 查找 ” 内容中进行。&lt;br&gt;
图 1 演示了对 4 个元素进行直接插入排序的过程，共需要 (a),(b),(c) 三次插入。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://images.cnblogs.com/cnblogs_com/kkun/201111/201111231433312827.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/// &amp;lt;summary&amp;gt;
  /// 插入排序
  /// &amp;lt;/summary&amp;gt;
  /// &amp;lt;param name=&amp;#34;unsorted&amp;#34;&amp;gt;&amp;lt;/param&amp;gt;
  static void insertion_sort(int[] unsorted)
  {
  for (int i = 1; i &amp;lt; unsorted.Length; i++)
  {
  if (unsorted[i - 1] &amp;gt; unsorted[i])
  {
  int temp = unsorted[i];
  int j = i;
  while (j &amp;gt; 0 &amp;amp;&amp;amp; unsorted[j - 1] &amp;gt; temp)
  {
  unsorted[j] = unsorted[j - 1];
  j--;
              }
                    unsorted[j] = temp;
                }
            }
        }


        static void Main(string[] args)
        {
            int[] x = { 6, 2, 4, 1, 5, 9 };
            insertion_sort(x);
            foreach (var item in x)
            {
                if (item &amp;gt; 0)
                    Console.WriteLine(item + &amp;#34;,&amp;#34;);
            }
            Console.ReadLine();
        }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>冒泡排序</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;冒泡排序&#34;&gt;冒泡排序&lt;/h1&gt;
&lt;p&gt;冒泡排序。它的主要排序思想就是重复交换相邻的两个反序元素。我们用从小到大排列整数来说明这个过程：&lt;/p&gt;
&lt;p&gt;第一轮首先处理第 1 个数和第 2 个数，使这两个数从小到大排列，然后在前次处理后的基础上处理第 2 个数和第 3 个数使其从小到大排列，以此类推，直到处理完第 n-1 个和第 n 个数，这样第一轮处理结束。&lt;/p&gt;
&lt;p&gt;这时最后一个数(第 n 个元素)必定就是所有数中的最大数。&lt;/p&gt;
&lt;p&gt;重复上面的过程进行第二轮处理，首先处理第 1 个数和第 2 个数，使这两个数从小到大排列，然后在前次处理后的基础上处理第 2 个数和第 3 个数使其从小到大排列，以此类推，直到处理完第 n-2 个和第 n-1 个数，第二轮处理结束。&lt;/p&gt;
&lt;p&gt;这样第 n-1 个数必定是所有数中的第二大数。&lt;/p&gt;
&lt;p&gt;以此类推，进行第三轮第四轮，直到第 n-1 轮，所有数就都排序好了。&lt;/p&gt;
&lt;p&gt;为了更好的理解上面的排序过程，我们用一个简单的例子来分析一下其排序过程。假定有一组待排序整数：4，8，5，2 现在我们要把这 4 个数按升序排列。&lt;/p&gt;
&lt;p&gt;第一轮处理：( 处理了 3 次 )&lt;/p&gt;
&lt;p&gt;处理第一个数和第二个数即 4 和 8 后的结果为：4，8，5，2&lt;/p&gt;
&lt;p&gt;处理第二个数和第三个数即 8 和 5 后的结果为：4，5，8，2&lt;/p&gt;
&lt;p&gt;处理第三个数和第四个数即 8 和 2 后的结果为：4，5，2，8&lt;/p&gt;
&lt;p&gt;这时，可以看到第一轮处理完后最大数 8 已经排到最后了。&lt;/p&gt;
&lt;p&gt;然后进行第二轮处理：( 处理了 2 次 )&lt;/p&gt;
&lt;p&gt;处理第一个数和第二个数即 4 和 5 后的结果为：4，5，2，8&lt;/p&gt;
&lt;p&gt;处理第二个数和第三个数即 5 和 2 后的结果为：4，2，5，8&lt;/p&gt;
&lt;p&gt;这时，可以看到第二轮处理完后第二大数 5 已经排到倒数第二位了。&lt;/p&gt;
&lt;p&gt;第二轮结束，进行第三轮处理：( 处理了 1 次 )&lt;/p&gt;
&lt;p&gt;处理第一个数和第二个数即 4 和 2 后的结果为：2，4，5，8&lt;/p&gt;
&lt;p&gt;这时，可以看到第三轮处理完后顺序已经排好了。&lt;/p&gt;
&lt;p&gt;总结：若有 n 个整数做冒泡排序，需要&lt;/p&gt;
&lt;p&gt;进行 i 轮处理，即 (n-1) 轮。而每轮需要进行 j 次处理，即(n-i )次。&lt;/p&gt;
&lt;h2 id=&#34;complexity-算法复杂度&#34;&gt;Complexity: 算法复杂度&lt;/h2&gt;
&lt;h3 id=&#34;稳定性&#34;&gt;稳定性&lt;/h3&gt;
&lt;p&gt;冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，我想你是不会再无聊地把他们俩交换一下的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种稳定排序算法。&lt;/p&gt;
&lt;h2 id=&#34;implementation-代码实现&#34;&gt;Implementation: 代码实现&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  public static int[] bubbleSort(int[] array) {

  for (int i = 0; i &amp;lt; array.length - 1; i++) {
  for (int j = 0; j &amp;lt; array.length - i - 1; j++) {
  if (array[j] &amp;gt; array[j + 1]) {

  int temp = array[j];
  array[j] = array[j + 1];
  array[j + 1] = temp;
  }
  }

  }
  return array;
  }
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
    <item>
      <title>选择排序</title>
      <link>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/algorithm-series/%E6%8E%92%E5%BA%8F/%E7%AE%80%E5%8D%95%E6%8E%92%E5%BA%8F/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F/</guid>
      <description>&lt;h1 id=&#34;选择排序&#34;&gt;选择排序&lt;/h1&gt;
&lt;h2 id=&#34;complexity-算法复杂度&#34;&gt;Complexity: 算法复杂度&lt;/h2&gt;
&lt;h3 id=&#34;稳定性&#34;&gt;稳定性&lt;/h3&gt;
&lt;p&gt;选择排序是给每个位置选择当前元素最小的，比如给第一个位置选择最小的，在剩余元素里面给第二个元素选择第二小的，依次类推，直到第 n - 1 个元素，第 n 个元素不用选择了，因为只剩下它一个最大的元素了。那么，在一趟选择，如果当前元素比一个元素小，而该小的元素又出现在一个和当前元素相等的元素后面，那么交换后稳定性就被破坏了。比较拗口，举个例子，序列 5 8 5 2 9，我们知道第一遍选择第 1 个元素 5 会和 2 交换，那么原序列中 2 个 5 的相对前后顺序就被破坏了，所以选择排序不是一个稳定的排序算法。&lt;/p&gt;
&lt;p&gt;排序算法的稳定性意义在于其能够避免在大数据情况下过多的数据交换，并且能保证如果是在多入口排序情况下的较好的一致性体验，譬如在对 Album 进行排序时，可能先根据 Track Number 进行排序，然后根据 Album Name 进行排序，如果是稳定的算法，当我们以 Album Name 进行排序的时候，就能够保留 Track Number 的有序性。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
