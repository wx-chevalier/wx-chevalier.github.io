<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>进程 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/</link><atom:link href="https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/index.xml" rel="self" type="application/rss+xml"/><description>进程</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>进程</title><link>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/</link></image><item><title>进程间通信</title><link>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1/</guid><description>&lt;h1 id="进程间通信">进程间通信&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/405664139" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/405664139&lt;/a> 进程间通信的五种方式&lt;/li>
&lt;/ul></description></item><item><title>进程模型</title><link>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h1 id="进程模型">进程模型&lt;/h1>
&lt;h1 id="process-elements">Process Elements&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2020/01/27/1nf0Cd.png" alt="The Elements of a Process" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>进程 ID（或 PID）由操作系统分配，并且对于每个正在运行的进程都是唯一的。&lt;/p>
&lt;h2 id="process-hierarchy">Process Hierarchy&lt;/h2>
&lt;p>尽管操作系统可以同时运行多个进程，但实际上它只能直接启动一个称为 init（初始缩写）进程的进程。这不是一个特别特殊的过程，除了它的 PID 始终为 0 并且将一直运行。所有其他过程都可以视为此初始过程的子过程。进程与其他进程一样都有一棵家谱。每个进程都有一个父进程，并且可以有许多同级，它们是同一父进程创建的进程。当然，子进程可以创造更多的子进程，依此类推。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-ps" data-lang="ps">&lt;span class="line">&lt;span class="cl">&lt;span class="mf">1&lt;/span> &lt;span class="nf">init-+-apmd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">|-atd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">|-cron&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mf">5&lt;/span> &lt;span class="nf">|-dhclient&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">|-firefox-bin-+-firefox-bin---2*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nf">firefox-bin&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">|&lt;/span> &lt;span class="nf">|-java_vm---java_vm---13*&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nf">java_vm&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">|&lt;/span> &lt;span class="nf">`-swf_play&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="文件描述符file-descriptors">文件描述符（File Descriptors）&lt;/h2>
&lt;p>我们之前了解了 stdin，stdout 和 stderr；给每个进程的默认文件。您将记住，这些文件始终具有相同的文件描述符号（分别为 0,1,2）。因此，内核为每个进程单独保存文件描述符。文件描述符也具有权限。例如，您可能能够从文件中读取但无法写入文件。打开文件后，操作系统会在文件描述符中保留对该文件的进程权限记录，并且不允许进程执行不应执行的任何操作。&lt;/p>
&lt;h2 id="registers">Registers&lt;/h2>
&lt;p>处理器实际上对寄存器中的值执行一般简单的操作。这些值被读取（或写入）到内存中，每个进程都分配有内核跟踪的内存。&lt;/p>
&lt;p>因此，方程式的另一面是跟踪寄存器。当当前正在运行的进程放弃处理器以便其他进程可以运行时，它需要保存其当前状态。同样，当进程有更多时间在 CPU 上运行时，我们需要能够恢复此状态。为此，操作系统需要将 CPU 寄存器的副本存储到内存中。当该进程再次运行时，操作系统会将寄存器值从内存中复制回 CPU 寄存器中，而该进程将立即从中断处返回。&lt;/p>
&lt;h2 id="内核状态kernel-state">内核状态（Kernel State）&lt;/h2>
&lt;p>在内部，内核需要跟踪每个进程的许多元素。操作系统要跟踪的另一个重要元素是进程状态。如果该进程当前正在运行，则使其处于运行状态是有意义的。但是，如果进程请求从磁盘读取文件，则从内存层次结构中我们知道这可能会花费大量时间。该进程应该放弃其当前执行以允许另一个进程运行，但是内核不必让该进程再次运行，直到磁盘中的数据在内存中可用为止。因此，它可以将进程标记为磁盘等待（或类似），直到数据准备就绪为止。&lt;/p>
&lt;p>一些过程比其他过程更重要，并且具有更高的优先级。请参阅下面有关调度程序的讨论。内核可以保留有关每个进程行为的统计信息，这有助于其决定进程的行为。例如，它主要是从磁盘读取还是主要是 CPU 密集型操作。&lt;/p>
&lt;h1 id="内存memory">内存（Memory）&lt;/h1>
&lt;p>所有程序代码以及变量和任何其他分配的存储都存储在该存储器中。内存的一部分可以在进程之间共享（称为共享内存）。在较早版本的操作系统中执行原始操作后，通常会看到称为系统五共享内存（SysV SHM）的信息。进程可以利用的另一个重要概念是将磁盘上的文件映射到内存。这意味着不必打开文件并使用诸如 &lt;code>read()&lt;/code> 和 &lt;code>write()&lt;/code> 之类的命令，文件看起来就像是其他任何类型的 RAM。映射区域具有诸如读取，写入和执行之类的权限，需要对其进行跟踪。众所周知，维护安全性和稳定性是操作系统的工作，因此它需要检查进程是否尝试写入只读区域并返回错误。&lt;/p>
&lt;p>一个过程可以进一步分为代码和数据部分。程序代码和数据应分开保存，因为它们需要与操作系统不同的权限，并且分开可以促进代码共享（如您稍后所见）。操作系统需要授予程序代码读取和执行的权限，但通常不予写入。另一方面，数据（变量）需要读写权限，但不能执行。&lt;/p>
&lt;h2 id="the-stack">The Stack&lt;/h2>
&lt;p>进程的另一个非常重要的部分是称为栈的内存区域。这可以视为流程数据部分的一部分，并且与任何程序的执行都密切相关。栈是通用的数据结构，其工作方式与一堆板块完全相同。您可以推动一个元素（将一个元素放在一叠元素的顶部），然后成为顶部元素，或者您可以弹出一个元素（取下元素，露出前一个元素）。&lt;/p>
&lt;p>栈是函数调用的基础。每次调用一个函数都会得到一个新的栈框架。这是一个内存区域，通常至少包含完成后要返回的地址，函数的输入参数和局部变量的空间。按照惯例，栈通常会变小。这意味着栈从内存中的高地址开始，然后逐渐降低。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2020/01/27/1nzrDS.png" alt="The Stack" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>我们可以看到拥有栈如何带来函数的许多功能：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>每个函数都有其输入参数的副本。这是因为为每个函数分配了一个新的栈帧，其参数位于新的内存区域中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这就是为什么在函数内部定义的变量无法被其他函数看到的原因。全局变量（可以通过任何函数看到）都保存在数据存储器的单独区域中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>这有助于递归调用。这意味着一个函数可以自由地再次调用自身，因为将为其所有局部变量创建一个新的栈框架。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>每个帧都包含要返回的地址。C 仅允许从函数返回单个值，因此按照惯例，该值将在指定的寄存器中而不是栈中返回给调用函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>由于每一帧都引用了它之前的那一帧，因此调试器可以向后“遍历”指针，跟随指针到达栈。由此可以生成栈跟踪，该跟踪向您显示调用该函数的所有函数。这对于调试非常有用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您可以看到函数的工作方式完全适合栈的性质。任何函数都可以调用任何其他函数，然后成为其他函数（放在栈顶）。最终，该函数将返回到调用它的函数（将自身移出栈）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>栈的确会使调用函数变慢，因为必须将值移出寄存器并移入内存。有些体系结构允许参数直接在寄存器中传递。但是，为了保持每个函数获得每个参数的唯一副本的语义，寄存器必须旋转。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>您可能听说过术语栈溢出。这是通过传递伪造的值来入侵系统的一种常见方法。如果您是程序员，则可以接受对栈变量的任意输入（例如，从键盘或通过网络读取），则需要明确说明数据的大小。允许不检查任何数量的数据将仅覆盖内存。通常，这会导致崩溃，但是有些人意识到，如果函数写满了足以在栈帧的返回地址部分中放置特定值的内存，则函数完成时将返回而不是返回正确的位置（从），他们可以使其返回到刚发送的数据中。如果该数据包含会破坏系统的二进制可执行代码（例如，以 root 权限为用户启动终端），则说明您的计算机已受到威胁。发生这种情况是因为栈向下增长，但是数据是“向上”读取的（即从较低地址到较高地址）。有几种解决方法：首先，作为程序员，您必须确保始终检查要接收到的数据量。操作系统可以通过确保栈被标记为不可执行来帮助程序员避免这种情况。也就是说，即使恶意用户试图将某些代码传递到您的程序中，处理器也不会运行任何代码。现代体系结构和操作系统支持此功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>栈最终由编译器管理，因为它负责生成程序代码。对于操作系统来说，栈就像该进程的任何其他内存区域一样。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>为了跟踪栈的当前增长，硬件将寄存器定义为栈指针。编译器（或编程器，在用汇编器编写时）使用该寄存器来跟踪栈的当前顶部。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl"> &lt;span class="m">1&lt;/span> $ cat sp.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> void &lt;span class="k">function&lt;/span>&lt;span class="o">(&lt;/span>void&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int &lt;span class="nv">i&lt;/span> &lt;span class="o">=&lt;/span> 100&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">5&lt;/span> int &lt;span class="nv">j&lt;/span> &lt;span class="o">=&lt;/span> 200&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> int &lt;span class="nv">k&lt;/span> &lt;span class="o">=&lt;/span> 300&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ gcc -fomit-frame-pointer -S sp.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ cat sp.s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .file &lt;span class="s2">&amp;#34;sp.c&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .text
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .globl &lt;span class="k">function&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">15&lt;/span> .type &lt;span class="k">function&lt;/span>, @function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">function&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> subl &lt;span class="nv">$16&lt;/span>, %esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl &lt;span class="nv">$100&lt;/span>, 4&lt;span class="o">(&lt;/span>%esp&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> movl &lt;span class="nv">$200&lt;/span>, 8&lt;span class="o">(&lt;/span>%esp&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">20&lt;/span> movl &lt;span class="nv">$300&lt;/span>, 12&lt;span class="o">(&lt;/span>%esp&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> addl &lt;span class="nv">$16&lt;/span>, %esp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ret
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .size &lt;span class="k">function&lt;/span>, .-function
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> .ident &lt;span class="s2">&amp;#34;GCC: (GNU) 4.0.2 20050806 (prerelease) (Debian 4.0.1-4)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">25&lt;/span> .section .note.GNU-stack,&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>,@progbits
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面我们展示了一个在栈上分配三个变量的简单函数。该反汇编说明了在 x86 体系结构上使用栈指针。首先，我们在栈上为局部变量分配一些空间。由于栈变小，我们从栈指针中保存的值中减去。值 16 是一个足以容纳我们的局部变量的值，但可能不完全是所需的大小（例如，对于 3 个 4 字节的 int 值，我们实际上只需要 12 个字节，而不是 16 个）就可以保持内存中栈的对齐 编译器要求的特定边界。&lt;/p>
&lt;p>然后，我们将这些值移动到栈存储器中（并在实函数中使用它们）。最后，在返回父函数之前，我们通过将栈指针移回开始之前的位置来“弹出”栈中的值。&lt;/p>
&lt;h2 id="the-heap">The Heap&lt;/h2>
&lt;p>堆是由进程管理的用于动态分配内存的内存区域。这适用于在编译时不知道其内存要求的变量。堆的底部称为 brk，因此被称为对其进行修改的系统调用。通过使用 brk 调用向下扩展区域，进程可以请求内核分配更多的内存供其使用。&lt;/p>
&lt;p>堆通常由 malloc 库调用管理。通过允许程序员简单地分配和释放（通过 free 调用）堆内存，这使程序员易于管理堆。malloc 可以使用诸如伙伴分配器之类的方案来管理用户的堆内存。malloc 在分配方面也可以更聪明，并且可以使用匿名 mmap 来获得额外的进程内存。在这里，不是将文件映射到进程内存，而是直接映射系统 RAM 的区域。这样可以更有效。由于正确管理内存的复杂性，对于任何现代程序来说，都有理由直接调用 brk 是非常罕见的。&lt;/p>
&lt;h2 id="内存布局">内存布局&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2020/01/27/1nz5uT.png" alt="Process memory layout" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>如我们所见，一个进程分配了较小的内存区域，每个区域都有特定的用途。上面给出了内核如何在内存中安排进程的示例。从顶部开始，内核会在进程的顶部为其自身保留一些内存（我们通过虚拟内存了解如何在所有进程之间实际共享此内存）。在其下方是用于映射文件和库的空间。在堆栈的下面，在堆栈的下面。底部是程序映像，是从磁盘上的可执行文件加载的。在后面的章节中，我们将仔细研究加载数据的过程。&lt;/p>
&lt;h1 id="进程上下文">进程上下文&lt;/h1>
&lt;p>进程是操作系统对一个正在运行的程序的一种抽象，在一个系统上可以同时运行多个进程，而每个进程都好像在独占地使用硬件。所谓的并发运行，则是说一个进程的指令和另一个进程的指令是交错执行的。无论是在单核还是多核系统中，可以通过处理器在进程间切换，来实现单个 CPU 看上去像是在并发地执行多个进程。操作系统实现这种交错执行的机制称为上下文切换。&lt;/p>
&lt;p>操作系统保持跟踪进程运行所需的所有状态信息。这种状态，也就是上下文，它包括许多信息，例如 PC 和寄存器文件的当前值，以及主存的内容。在任何一个时刻，单处理器系统都只能执行一个进程的代码。当操作系统决定要把控制权从当前进程转移到某个新进程时，就会进行上下文切换，即保存当前进程的上下文、恢复新进程的上下文，然后将控制权传递到新进程。新进程就会从上次停止的地方开始。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/52271382-6fcf8580-297e-11e9-9161-de3d9461d5f4.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在《&lt;a href="https://github.com/wx-chevalier/Linux-Series?q=" target="_blank" rel="noopener">Linux-Series/虚拟存储管理器&lt;/a>》一节中，我们介绍过它为每个进程提供了一个假象，即每个进程都在独占地使用主存。每个进程看到的是一致的存储器，称为虚拟地址空间。其虚拟地址空间最上面的区域是为操作系统中的代码和数据保留的，这对所有进程来说都是一样的；地址空间的底部区域存放用户进程定义的代码和数据。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/52272019-52032000-2980-11e9-953c-89de286e5174.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>程序代码和数据，对于所有的进程来说，代码是从同一固定地址开始，直接按照可执行目标文件的内容初始化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>堆，代码和数据区后紧随着的是运行时堆。代码和数据区是在进程一开始运行时就被规定了大小，与此不同，当调用如 malloc 和 free 这样的 C 标准库函数时，堆可以在运行时动态地扩展和收缩。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>共享库：大约在地址空间的中间部分是一块用来存放像 C 标准库和数学库这样共享库的代码和数据的区域。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>栈，位于用户虚拟地址空间顶部的是用户栈，编译器用它来实现函数调用。和堆一样，用户栈在程序执行期间可以动态地扩展和收缩。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>内核虚拟存储器：内核总是驻留在内存中，是操作系统的一部分。地址空间顶部的区域是为内核保留的，不允许应用程序读写这个区域的内容或者直接调用内核代码定义的函数。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>进程状态</title><link>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/concurrent-series/1.%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%B9%B6%E5%8F%91%E5%8D%95%E5%85%83/%E8%BF%9B%E7%A8%8B/%E8%BF%9B%E7%A8%8B%E7%8A%B6%E6%80%81/</guid><description>&lt;h1 id="进程状态">进程状态&lt;/h1>
&lt;p>Linux 的进程状态包含了 R (TASK_RUNNING)，可执行状态、S (TASK_INTERRUPTIBLE)，可中断的睡眠状态、D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态、T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态、Z (TASK_DEAD – EXIT_ZOMBIE)，退出状态，进程成为僵尸进程、X (TASK_DEAD – EXIT_DEAD)，退出状态，进程即将被销毁。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/06/17/NAT5es.md.png" alt="Linux Processes Life Cycle" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="进程状态类别">进程状态类别&lt;/h1>
&lt;h2 id="r-task_running可执行状态">R (TASK_RUNNING)，可执行状态&lt;/h2>
&lt;p>只有在该状态的进程才可能在 CPU 上运行。而同一时刻可能有多个进程处于可执行状态，这些进程的 task_struct 结构（进程控制块）被放入对应 CPU 的可执行队列中（一个进程最多只能出现在一个 CPU 的可执行队列中）。进程调度器的任务就是从各个 CPU 的可执行队列中分别选择一个进程在该 CPU 上运行。&lt;/p>
&lt;h2 id="s-task_interruptible可中断的睡眠状态">S (TASK_INTERRUPTIBLE)，可中断的睡眠状态&lt;/h2>
&lt;p>处于这个状态的进程因为等待某某事件的发生（比如等待 socket 连接、等待信号量），而被挂起。这些进程的 task_struct 结构被放入对应事件的等待队列中。当这些事件发生时（由外部中断触发、或由其他进程触发），对应的等待队列中的一个或多个进程将被唤醒。通过 ps 命令我们会看到，一般情况下，进程列表中的绝大多数进程都处于 TASK_INTERRUPTIBLE 状态（除非机器的负载很高）。&lt;/p>
&lt;h2 id="d-task_uninterruptible不可中断的睡眠状态">D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态&lt;/h2>
&lt;p>与 TASK_INTERRUPTIBLE 状态类似，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的并不是 CPU 不响应外部硬件的中断，而是指进程不响应异步信号。&lt;/p>
&lt;p>TASK_UNINTERRUPTIBLE 状态存在的意义就在于，内核的某些处理流程是不能被打断的。如果响应异步信号，程序的执行流程中就会被插入一段用于处理异步信号的流程（这个插入的流程可能只存在于内核态，也可能延伸到用户态）在进程对某些硬件进行操作时（比如进程调用 read 系统调用对某个设备文件进行读操作，而 read 系统调用最终执行到对应设备驱动的代码，并与对应的物理设备进行交互），可能需要使用 TASK_UNINTERRUPTIBLE 状态对进程进行保护，以避免进程与设备交互的过程被打断，造成设备陷入不可控的状态。这种情况下的 TASK_UNINTERRUPTIBLE 状态总是非常短暂的，通过 ps 命令基本上不可能捕捉到。&lt;/p>
&lt;h2 id="t-task_stopped-or-task_traced暂停状态或跟踪状态">T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态&lt;/h2>
&lt;p>向进程发送一个 SIGSTOP 信号，它就会因响应该信号而进入 TASK_STOPPED 状态（除非该进程本身处于 TASK_UNINTERRUPTIBLE 状态而不响应信号）。SIGSTOP 与 SIGKILL 信号一样，是非常强制的。不允许用户进程通过 signal 系列的系统调用重新设置对应的信号处理函数。向进程发送一个 SIGCONT 信号，可以让其从 TASK_STOPPED 状态恢复到 TASK_RUNNING 状态。&lt;/p>
&lt;p>当进程正在被跟踪时，它处于 TASK_TRACED 这个特殊的状态。“正在被跟踪”指的是进程暂停下来，等待跟踪它的进程对它进行操作。比如在 gdb 中对被跟踪的进程下一个断点，进程在断点处停下来的时候就处于 TASK_TRACED 状态。而在其他时候，被跟踪的进程还是处于前面提到的那些状态。对于进程本身来说，TASK_STOPPED 和 TASK_TRACED 状态很类似，都是表示进程暂停下来。&lt;/p>
&lt;h2 id="z-task_dead--exit_zombie退出状态进程成为僵尸进程">Z (TASK_DEAD – EXIT_ZOMBIE)，退出状态，进程成为僵尸进程&lt;/h2>
&lt;p>进程在退出的过程中，处于 TASK_DEAD 状态。在这个退出过程中，进程占有的所有资源将被回收，除了 task_struct 结构（以及少数资源）以外。于是进程就只剩下 task_struct 这么个空壳，故称为僵尸。之所以保留 task_struct，是因为 task_struct 里面保存了进程的退出码、以及一些统计信息。而其父进程很可能会关心这些信息。比如在 shell 中，&lt;code>$?&lt;/code> 变量就保存了最后一个退出的前台进程的退出码，而这个退出码往往被作为 if 语句的判断条件。&lt;/p>
&lt;p>当然，内核也可以将这些信息保存在别的地方，而将 task_struct 结构释放掉，以节省一些空间。但是使用 task_struct 结构更为方便，因为在内核中已经建立了从 pid 到 task_struct 查找关系，还有进程间的父子关系。释放掉 task_struct，则需要建立一些新的数据结构，以便让父进程找到它的子进程的退出信息。&lt;/p>
&lt;p>父进程可以通过 wait 系列的系统调用（如 wait4、waitid）来等待某个或某些子进程的退出，并获取它的退出信息。然后 wait 系列的系统调用会顺便将子进程的尸体（task_struct）也释放掉。子进程在退出的过程中，内核会给其父进程发送一个信号，通知父进程来“收尸”。这个信号默认是 SIGCHLD，但是在通过 clone 系统调用创建子进程时，可以设置这个信号。&lt;/p>
&lt;p>当进程退出的时候，会将它的所有子进程都托管给别的进程（使之成为别的进程的子进程）。托管给谁呢？可能是退出进程所在进程组的下一个进程（如果存在的话），或者是 1 号进程。所以每个进程、每时每刻都有父进程存在。除非它是 1 号进程。1 号进程，pid 为 1 的进程，又称 init 进程。Linux 系统启动后，第一个被创建的用户态进程就是 init 进程。它有两项使命：&lt;/p>
&lt;ul>
&lt;li>执行系统初始化脚本，创建一系列的进程（它们都是 init 进程的子孙）；&lt;/li>
&lt;li>在一个死循环中等待其子进程的退出事件，并调用 waitid 系统调用来完成“收尸”工作；&lt;/li>
&lt;/ul>
&lt;p>init 进程不会被暂停、也不会被杀死（这是由内核来保证的）。它在等待子进程退出的过程中处于 TASK_INTERRUPTIBLE 状态，“收尸”过程中则处于 TASK_RUNNING 状态。&lt;/p>
&lt;h2 id="x-task_dead--exit_dead退出状态进程即将被销毁">X (TASK_DEAD – EXIT_DEAD)，退出状态，进程即将被销毁&lt;/h2>
&lt;p>而进程在退出过程中也可能不会保留它的 task_struct。比如这个进程是多线程程序中被 detach 过的进程。或者父进程通过设置 SIGCHLD 信号的 handler 为 SIG_IGN，显式的忽略了 SIGCHLD 信号。（这是 posix 的规定，尽管子进程的退出信号可以被设置为 SIGCHLD 以外的其他信号。）
此时，进程将被置于 EXIT_DEAD 退出状态，这意味着接下来的代码立即就会将该进程彻底释放。所以 EXIT_DEAD 状态是非常短暂的，几乎不可能通过 ps 命令捕捉到。&lt;/p>
&lt;h1 id="进程状态变迁">进程状态变迁&lt;/h1>
&lt;h2 id="初始状态">初始状态&lt;/h2>
&lt;p>进程是通过 fork 系列的系统调用（fork、clone、vfork）来创建的，内核（或内核模块）也可以通过 kernel_thread 函数创建内核进程。这些创建子进程的函数本质上都完成了相同的功能——将调用进程复制一份，得到子进程。（可以通过选项参数来决定各种资源是共享、还是私有。）&lt;/p>
&lt;p>那么既然调用进程处于 TASK_RUNNING 状态（否则，它若不是正在运行，又怎么进行调用？），则子进程默认也处于 TASK_RUNNING 状态。另外，在系统调用调用 clone 和内核函数 kernel_thread 也接受 CLONE_STOPPED 选项，从而将子进程的初始状态置为 TASK_STOPPED。&lt;/p>
&lt;h2 id="调度状态">调度状态&lt;/h2>
&lt;p>进程自创建以后，状态可能发生一系列的变化，直到进程退出。而尽管进程状态有好几种，但是进程状态的变迁却只有两个方向——从 TASK_RUNNING 状态变为非 TASK_RUNNING 状态、或者从非 TASK_RUNNING 状态变为 TASK_RUNNING 状态。也就是说，如果给一个 TASK_INTERRUPTIBLE 状态的进程发送 SIGKILL 信号，这个进程将先被唤醒（进入 TASK_RUNNING 状态），然后再响应 SIGKILL 信号而退出（变为 TASK_DEAD 状态）。并不会从 TASK_INTERRUPTIBLE 状态直接退出。进程从非 TASK_RUNNING 状态变为 TASK_RUNNING 状态，是由别的进程（也可能是中断处理程序）执行唤醒操作来实现的。执行唤醒的进程设置被唤醒进程的状态为 TASK_RUNNING，然后将其 task_struct 结构加入到某个 CPU 的可执行队列中。于是被唤醒的进程将有机会被调度执行。&lt;/p>
&lt;p>而进程从 TASK_RUNNING 状态变为非 TASK_RUNNING 状态，则有两种途径：&lt;/p>
&lt;ul>
&lt;li>响应信号而进入 TASK_STOPED 状态、或 TASK_DEAD 状态；&lt;/li>
&lt;li>执行系统调用主动进入 TASK_INTERRUPTIBLE 状态（如 nanosleep 系统调用）、或 TASK_DEAD 状态（如 exit 系统调用）；或由于执行系统调用需要的资源得不到满足，而进入 TASK_INTERRUPTIBLE 状态或 TASK_UNINTERRUPTIBLE 状态（如 select 系统调用）。&lt;/li>
&lt;/ul>
&lt;p>显然，这两种情况都只能发生在进程正在 CPU 上执行的情况下。&lt;/p>
&lt;h1 id="僵尸进程">僵尸进程&lt;/h1>
&lt;p>对于正常的使用情况，子进程的创建一般需要父进程通过系统调用 wait() 或者 waitpid() 来等待子进程结束，从而回收子进程的资源。除了这种方式外，还可以通过异步的方式来进行回收，这种方式的基础是子进程结束之后会向父进程发送 SIGCHLD 信号，基于此父进程注册一个 SIGCHLD 信号的处理函数来进行子进程的资源回收就可以了。&lt;/p>
&lt;p>僵尸进程的最大危害是对资源的一种永久性占用，比如进程号，系统会有一个最大的进程数 n 的限制，也就意味一旦 1 到 n 进程号都被占用，系统将不能创建任何进程和线程（进程和线程对于 OS 而言，使用同一种数据结构来表示，task_struct）。这个时候对于用户的一个直观感受就是 shell 无法执行任何命令，这个原因是 shell 执行命令的本质是 fork。&lt;/p>
&lt;h2 id="孤儿进程">孤儿进程&lt;/h2>
&lt;p>如果子进程先于父进程退出，并且父进程没有对子进程残留的资源进行回收的话将会产生僵尸进程。这里引申另外一种情况，父进程先于子进程退出的话，那么子进程的资源谁来回收呢？&lt;/p>
&lt;p>父进程先于子进程退出，这个时候我们一般将还在运行的子进程称为孤儿进程，但是实际上孤儿进程并没有一个明确的定义，他的状态还是处于上面讨论的几种进程状态中。那么孤儿进程的资源谁来回收呢？类 Unix 系统针对这种情况会将这些孤儿进程的父进程置为 1 号进程也就是 systemd 进程，然后由 systemd 来对孤儿进程的资源进行回收。&lt;/p></description></item></channel></rss>