<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>反应式宣言 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/concurrent-series/4.%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E5%AE%A3%E8%A8%80/</link><atom:link href="https://ng-tech.icu/books/concurrent-series/4.%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E5%AE%A3%E8%A8%80/index.xml" rel="self" type="application/rss+xml"/><description>反应式宣言</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>反应式宣言</title><link>https://ng-tech.icu/books/concurrent-series/4.%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E5%AE%A3%E8%A8%80/</link></image><item><title>反应式宣言</title><link>https://ng-tech.icu/books/concurrent-series/4.%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E5%AE%A3%E8%A8%80/%E5%8F%8D%E5%BA%94%E5%BC%8F%E5%AE%A3%E8%A8%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/concurrent-series/4.%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E7%BC%96%E7%A8%8B/%E5%8F%8D%E5%BA%94%E5%BC%8F%E5%AE%A3%E8%A8%80/%E5%8F%8D%E5%BA%94%E5%BC%8F%E5%AE%A3%E8%A8%80/</guid><description>&lt;h1 id="反应式宣言">反应式宣言&lt;/h1>
&lt;p>&lt;a href="https://www.reactivemanifesto.org/zh-CN" target="_blank" rel="noopener">反应式宣言&lt;/a> 是一切反应式概念的根源理论基础。描述了反应式系统（reactive systems）应该具备的四个关键属性：Responsive（灵敏的）、Resilient（可故障恢复的）、Elastic（可伸缩的）、Message Driven（消息驱动的）。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/11/25/MvR9EV.png" alt="反应式因素" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>Responsive（灵敏的）&lt;/strong>：只要有可能，系统就会及时响应。灵敏性是系统可用性的基石，除此之外，灵敏性也意味着系统的问题可以被快速地探测和解决。具有灵敏性的系统关注做出快速和一致的响应，提供可靠和一致的服务质量。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Resilient（可故障恢复的）&lt;/strong>：在出现故障时，系统仍然可以保持响应。一个不具可恢复性的系统一旦出现故障，就会变得无法正常响应。可恢复性可以通过复制、围控、隔离和委派等方式实现。在可恢复性的系统中，故障被包含在每个组件中，各组件之间相互隔离，从而允许系统的某些部分出故障并且在不连累整个系统的前提下进行恢复。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Elastic（可伸缩的）&lt;/strong>：在不同的工作负载下，系统保持响应。系统可以根据输入的工作负载，动态地增加或减少系统使用的资源。这意味着系统在设计上可以通过分片、复制等途径来动态申请系统资源并进行负载均衡，从而去中心化，避免节点瓶颈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Message Driven（消息驱动的）&lt;/strong>：反应式系统依赖异步消息传递机制，从而在组件之间建立边界，这些边界可以保证组件之间的松耦合、隔离性、位置透明性，还提供了以消息的形式把故障委派出去的手段。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Failures at messages&lt;/strong>：在 Reactive 编程中，我们通常需要处理流式的信息，我们最不希望看到的是突然抛出一个异常，然后处理过程终止了。理想的解决办法是我们记下这个错误，然后开始执行某种重试或恢复的逻辑。在 Reactive Streams 中，异常是一等公民，异常不会被粗鲁地抛出，错误处理是正式建立在 Reactive Streams API 规范之内的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Back-pressure&lt;/strong>：中文一般翻译成“背压”、“回压”，意思是当消费端的消费能力跟不上生产端的生产速度时，消息流下游的消费方对上游的生产方说：“我喝饱了，请你慢点”。在 Reactive 的世界里，我们希望下游的消费方可以有某种机制按需请求一定数量的消息来消费（这类似消息队列中的 pull 的概念）。而不是上游把大量的消息一股脑灌给下游消费方，然后阻塞式等待，throttling(节流) is done programmatically rather than blocking threads。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Non-blocking&lt;/strong>：数据处理以一种非阻塞的方式被处理，线程不会因为等待别的处理过程而卡住。这里可以对比有着 非阻塞事件循环 的 Node.js Server（如一条高速公路）和传统的 Java 多线程服务（如拥有红绿灯的十字路口）&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="反应式编程的构成">反应式编程的构成&lt;/h1>
&lt;h2 id="stream流">Stream（流）&lt;/h2>
&lt;p>作为响应式编程的核心，流的本质是一个按时间顺序排列的进行中事件的序列集合。它可以发送三种不同的事物：&lt;/p>
&lt;ul>
&lt;li>某种类型的值&lt;/li>
&lt;li>错误（Error）&lt;/li>
&lt;li>已完成信号（Completed Signal）&lt;/li>
&lt;/ul>
&lt;p>下图是点击按钮的一个事件流示意图：&lt;/p>
&lt;p>![https://s1.ax1x.com/2020/03/26/GSZ4GF.png]&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="o">--&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="n">d&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="n">X&lt;/span>&lt;span class="o">---|-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">d&lt;/span> &lt;span class="n">are&lt;/span> &lt;span class="n">emitted&lt;/span> &lt;span class="n">values&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">X&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">an&lt;/span> &lt;span class="n">error&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="s">&amp;#39;completed&amp;#39;&lt;/span> &lt;span class="n">signal&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&amp;gt;&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">the&lt;/span> &lt;span class="n">timeline&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以针对它做一些处理，将它转化为一个新的 stream，比如做一个能记录一个按钮点击了多少次的计数器 Stream。在常见的响应式编程库中，每个 stream 都会有多个方法，map、filter、scan 等等。当你调用其中一个方法时，例如 clickStream.map(f)，它就会基于原来的 click stream 返回一个新的 stream。它不会对原来的 click steam 作任何修改。这个特性就是不可变性(Immutability)，我们也可以对方法进行链式调用如 clickStream.map(f).scan(g).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">clickStream&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">---&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">----&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">----&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">------&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vvvvv&lt;/span> &lt;span class="nf">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="n">becomes&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">vvvv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">--&lt;/span>&lt;span class="m">-1&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="m">-1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="m">-1&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="m">-1&lt;/span>&lt;span class="o">-----&lt;/span>&lt;span class="m">-1&lt;/span>&lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">vvvvvvvvv&lt;/span> &lt;span class="nf">scan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">vvvvvvvvv&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">counterStream&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="m">-1&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="m">-2&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="m">-3&lt;/span>&lt;span class="o">---&lt;/span>&lt;span class="m">-4&lt;/span>&lt;span class="o">-----&lt;/span>&lt;span class="m">-5&lt;/span>&lt;span class="o">--&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了展示 RP 真正的实力，让我们假设你想得到一个包含双击事件的 Stream。为了让它更加有趣，假设我们想要的这个 Stream 要同时考虑三击 (Triple clicks)，或者更加宽泛，连击 (Multiple clicks)。我们先不讨论它的实现，用示意图来表示这个 stream 它应该长成这样：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/03/26/GSepMd.png" alt="Multiple Clicks Stream" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="观察者模式">观察者模式&lt;/h2>
&lt;p>观察者模式又叫发布订阅模式（Publish/Subscribe），它是一种一对多的关系，让多个观察者（Obesver）同时监听一个主题（Subject），这个主题也就是被观察者（Observable），被观察者的状态发生变化时就会通知所有的观察者，使得它们能够接收到更新的内容。观察者模式主题和观察者是分离的，不是主动触发而是被动监听。&lt;/p>
&lt;h2 id="迭代器模式">迭代器模式&lt;/h2>
&lt;p>迭代器（Iterator）模式又叫游标（Sursor）模式，迭代器具有 next 方法，可以顺序访问一个聚合对象中的各个元素，而不需要暴露该对象的内部表现。迭代器模式可以把迭代的过程从从业务逻辑中分离出来，迭代器将使用者和目标对象隔离开来，即使不了解对象的内部构造，也可以通过迭代器提供的方法顺序访问其每个元素。&lt;/p>
&lt;p>例如在 JavaScript 中，可以通过 iterator 方法来获取一个迭代对象，然后调用迭代对象的 next 方法去迭代得到一个个的元素：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">iterable&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">iterator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">iterable&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nx">Symbol&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">iterator&lt;/span>&lt;span class="p">]();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">iterator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// =&amp;gt; { value: &amp;#34;1&amp;#34;, done: false}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">iterator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// =&amp;gt; { value: &amp;#34;2&amp;#34;, done: false}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">iterator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">next&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">// =&amp;gt; { value: undefined, done: true}
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>