<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPU | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/</link>
      <atom:link href="https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/index.xml" rel="self" type="application/rss+xml" />
    <description>CPU</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>CPU</title>
      <link>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/</link>
    </image>
    
    <item>
      <title>CPU</title>
      <link>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/cpu/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/cpu/</guid>
      <description>&lt;h1 id=&#34;cpu--线程&#34;&gt;CPU &amp;amp; 线程&lt;/h1&gt;
&lt;p&gt;和 CPU 相关的指标主要有以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 利用率（CPU Utilization）&lt;/li&gt;
&lt;li&gt;CPU 平均负载（Load Average）&lt;/li&gt;
&lt;li&gt;上下文切换次数（Context Switch）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;常用的工具有 top、ps、uptime、vmstat、pidstat 等。&lt;/p&gt;
&lt;p&gt;CPU 异常指标的分析思路包括了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU 利用率：如果我们观察某段时间系统或应用进程的 CPU 利用率一直很高（单个 core 超过 80%），那么就值得我们警惕了。我们可以多次使用 jstack 命令 dump 应用线程栈查看热点代码，非 Java 应用可以直接使用 perf 进行 CPU 采采样，离线分析采样数据后得到 CPU 执行热点（Java 应用需要符号表进行堆栈信息映射，不能直接使用 perf）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU 平均负载：平均负载高于 CPU 数量 70%，意味着系统存在瓶颈点，造成负载升高的原因有很多，在这里就不展开了。需要注意的是，通过监控系统监测平均负载的变化趋势，更容易定位问题，有时候大文件的加载等，也会导致平均负载瞬时升高。如果 1 分钟/5 分钟/15 分钟的三个值相差不大，那说明系统负载很平稳，则不用关注，如果这三个值逐渐降低，说明负载在渐渐升高，需要关注整体性能；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU 上下文切换：上下文切换这个指标，并没有经验值可推荐（几十到几万都有可能），这个指标值取决于系统本身的 CPU 性能，以及当前应用工作的情况。但是，如果系统或者应用的上下文切换次数出现数量级的增长，就有很大概率说明存在性能问题，如非自愿上下切换大幅度上升，说明有太多的线程在竞争 CPU。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU 上的的一些异动，通常也可以从线程上观测到，但需要注意的是，线程问题并不完全是由 CPU 导致的。与线程相关的指标，主要有下面几个（均都可以通过 JDK 自带的 jstack 工具直接或间接得到）：应用中的总的线程数、应用中各个线程状态的分布、线程锁的使用情况，如死锁、锁分布等。&lt;/p&gt;
&lt;p&gt;关于线程，可关注的异常有：线程总数过多（体现在 CPU 就是导致频繁的上下文切换，可能是线程池设置不当）、WAITING/BLOCKED 线程过多（线程数设置过多或锁竞争剧烈）、存在大量消耗 CPU 的线程等。&lt;/p&gt;
&lt;h1 id=&#34;问题排查&#34;&gt;问题排查&lt;/h1&gt;
&lt;p&gt;我们更应该关注 CPU 负载，CPU 利用率高一般不是问题，CPU 负载 是判断系统计算资源是否健康的关键依据。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 按照 CPU/内存的使用情况列出前10 的进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ps axo %mem,pid,euser,cmd &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -nr &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ps -aeo pcpu,user,pid,cmd &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sort -nr &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; head -10
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 显示系统整体的 CPU利用率和闲置率&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ grep &lt;span class=&#34;s2&#34;&gt;&amp;#34;cpu &amp;#34;&lt;/span&gt; /proc/stat &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; awk -F &lt;span class=&#34;s1&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;{total = $2 + $3 + $4 + $5} END {print &amp;#34;idle \t used\n&amp;#34; $5*100/total &amp;#34;% &amp;#34; $2*100/total &amp;#34;%&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;cpu-利用率高--平均负载高&#34;&gt;CPU 利用率高 &amp;amp; 平均负载高&lt;/h2&gt;
&lt;p&gt;这种情况常见于 CPU 密集型的应用，大量的线程处于可运行状态，I/O 很少，常见的大量消耗 CPU 资源的应用场景有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则操作&lt;/li&gt;
&lt;li&gt;数学运算&lt;/li&gt;
&lt;li&gt;序列化/反序列化&lt;/li&gt;
&lt;li&gt;反射操作&lt;/li&gt;
&lt;li&gt;死循环或者不合理的大量循环&lt;/li&gt;
&lt;li&gt;基础/第三方组件缺陷&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;排查高 CPU 占用的一般思路：通过 jstack 多次（&amp;gt; 5 次）打印线程栈，一般可以定位到消耗 CPU 较多的线程堆栈。或者通过 Profiling 的方式（基于事件采样或者埋点），得到应用在一段时间内的 on-CPU 火焰图，也能较快定位问题。&lt;/p&gt;
&lt;p&gt;还有一种可能的情况，此时应用存在频繁的 GC（包括 Young GC、Old GC、Full GC），这也会导致 CPU 利用率和负载都升高。排查思路：使用 jstat -gcutil 持续输出当前应用的 GC 统计次数和时间。频繁 GC 导致的负载升高，一般还伴随着可用内存不足，可用 free 或者 top 等命令查看下当前机器的可用内存大小。&lt;/p&gt;
&lt;p&gt;CPU 利用率过高，是否有可能是 CPU 本身性能瓶颈导致的呢？也是有可能的。可以进一步通过 vmstat 查看详细的 CPU 利用率。用户态 CPU 利用率（us）较高，说明用户态进程占用了较多的 CPU，如果这个值长期大于 50%，应该着重排查应用本身的性能问题。内核态 CPU 利用率（sy）较高，说明内核态占用了较多的 CPU，所以应该着重排查内核线程或者系统调用的性能问题。如果 us + sy 的值大于 80%，说明 CPU 可能不足。&lt;/p&gt;
&lt;h2 id=&#34;cpu-利用率低--平均负载高&#34;&gt;CPU 利用率低 &amp;amp; 平均负载高&lt;/h2&gt;
&lt;p&gt;这种情况常见于 I/O 密集型进程，这很容易理解，毕竟平均负载就是 R 状态进程和 D 状态进程的和，除掉了第一种，就只剩下 D 状态进程了（产生 D 状态的原因一般是因为在等待 I/O，例如磁盘 I/O、网络 I/O 等）。&lt;/p&gt;
&lt;p&gt;使用 vmstat 1 定时输出系统资源使用，观察 %wa(iowait) 列的值，该列标识了磁盘 I/O 等待时间在 CPU 时间片中的百分比，如果这个值超过 30%，说明磁盘 I/O 等待严重，这可能是大量的磁盘随机访问或直接的磁盘访问（没有使用系统缓存）造成的，也可能磁盘本身存在瓶颈，可以结合 iostat 或 dstat 的输出加以验证，如 %wa(iowait) 升高同时观察到磁盘的读请求很大，说明可能是磁盘读导致的问题。&lt;/p&gt;
&lt;p&gt;此外，耗时较长的网络请求（即网络 I/O）也会导致 CPU 平均负载升高，如 MySQL 慢查询、使用 RPC 接口获取接口数据等。这种情况的排查一般需要结合应用本身的上下游依赖关系以及中间件埋点的 trace 日志，进行综合分析。&lt;/p&gt;
&lt;h2 id=&#34;cpu-上下文切换次数变高&#34;&gt;CPU 上下文切换次数变高&lt;/h2&gt;
&lt;p&gt;先用 vmstat 查看系统的上下文切换次数，然后通过 pidstat 观察进程的自愿上下文切换（cswch）和非自愿上下文切换（nvcswch）情况。&lt;/p&gt;
&lt;p&gt;如果自愿上下文切换次数较高，意味着 CPU 存在资源获取等待，比如说，I/O、内存等系统资源不足等。如果是非自愿上下文切换次数较高，可能的原因是应用内线程数过多，导致 CPU 时间片竞争激烈，频频被系统强制调度，此时可以结合 jstack 统计的线程数和线程状态分布加以佐证。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>sar</title>
      <link>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/sar/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/sar/</guid>
      <description>&lt;h1 id=&#34;系统进程&#34;&gt;系统进程&lt;/h1&gt;
&lt;p&gt;sar&lt;/p&gt;
&lt;p&gt;是目前 Linux 上最为全面的系统性能分析工具之一，但可能没有预装。在 centos 上使用以下命令即可安装。&lt;/p&gt;
&lt;p&gt;yum install sysstat -y
sar 主要的好处是可以看到历史，显示友好，可以对结果进行二次处理。sar 还有图形化工具，执行 sar -A 即可获得所有数据。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vlsi/ksar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/vlsi/ksar&lt;/a&gt;
针对于 CPU 方面，我们关注：
➊ sar -u 默认
➋ sar -P ALL 每颗 cpu 的使用状态信息
➌ sar -q cpu 队列的长度，runq-sz&amp;gt;cpu count 就表明有瓶颈了
➍ sar -w 每秒上下文交换&lt;/p&gt;
&lt;p&gt;mpstat&lt;/p&gt;
&lt;p&gt;还有 pidstat，包括彩色的 dstat，功能都差不多&lt;/p&gt;
&lt;p&gt;load 为 1 代表的是啥&lt;/p&gt;
&lt;p&gt;针对这个问题，误解还是比较多的。很多同学认为，load 达到 1，系统就到了瓶颈，这不完全正确。
load 的值和 cpu 核数息息相关：
➊ 单核的 cpu 达到 100%，load 约 1
➋ 双核的 cpu 都达到 100%，load 约 2
➌ 四核的 cpu 都达到 100%，load 约为 4&lt;/p&gt;
&lt;h2 id=&#34;cpu&#34;&gt;CPU&lt;/h2&gt;
&lt;p&gt;CPU 利用率是业务系统利用到 CPU 的比率，因为往往一个系统上会有一些其他的线程，这些线程会和 CPU 竞争计算资源，那么此时留给业务的计算资源比例就会下降，典型的像，GC 线程的 GC 过程、锁的竞争过程都是消耗 CPU 的过程。甚至一些 IO 的瓶颈，也会导致 CPU 利用率下降(CPU 都在 Wait IO，利用率当然不高)。&lt;/p&gt;
&lt;h2 id=&#34;内存&#34;&gt;内存&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看系统当前的内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ free -h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;              total        used        free      shared  buff/cache   available
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Mem:           7.8G        1.2G        627M         85M        6.0G        6.0G
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Swap:            0B          0B          0B
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上图中总内存与可用内存差值出现不一致性，是因为 OS 发现系统的物理内存有大量剩余时，为了提高 IO 的性能，就会使用多余的内存当做文件缓存。&lt;/p&gt;
&lt;h2 id=&#34;cpu-利用率详解&#34;&gt;CPU 利用率详解&lt;/h2&gt;
&lt;p&gt;/proc/stat 存储的是系统的一些统计信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpu  &lt;span class=&#34;m&#34;&gt;117450&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5606&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;72399&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;476481991&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1832&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;2681&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpu0 &lt;span class=&#34;m&#34;&gt;31054&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;90&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;19055&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;119142729&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;427&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1706&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpu1 &lt;span class=&#34;m&#34;&gt;22476&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;3859&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;18548&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;119155098&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;382&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;272&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpu2 &lt;span class=&#34;m&#34;&gt;29208&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1397&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;19750&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;119100548&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;462&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;328&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;cpu3 &lt;span class=&#34;m&#34;&gt;34711&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;258&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15045&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;119083615&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;560&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;374&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;us&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ni&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;sy&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;     &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;id&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;      &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;wa&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;hi&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;si&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;st&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;guest&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;guest_nice&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于 CPU 利用率描述，Linux man-pages 用的都是 time（time running，time spent，time stolen）这个单词。这里的统计数据，其实就是 CPU 从系统启动至当前，各项（us, sy, ni, id, wa, hi, si, st）占用的时间，单位是 jiffies。通过 sysconf(_SC_CLK_TCK) 可以获得 1 秒被分成多少个 jiffies。一般是 100，即 1 jiffies == 0.01 s。&lt;/p&gt;
&lt;p&gt;计算 CPU 使用率的基本原理就是从 /proc/stat 进行采样和计算。最简单的方法，一秒采样一次 /proc/stat，如：
第 N 秒采样得到 cpu_total1 = us1 + ni1 + sy1 + id1 + wa1 + hi1 + si1 + st1 + guest1 + guest_nice1
第 N+1 秒采样得到 cpu_total2 = us2 + ni2 + sy2 + id2 + wa2 + hi2 + si2 + st2 + guest2 + guest_nice2
us 的占比为 (us2 - us1) / (cpu_total2 - cpu_total1)。&lt;/p&gt;
&lt;p&gt;nice 是一个可以修改进程调度优先级的命令，在 Linux 中，一个进程有一个 nice 值，代表的是这个进程的调度优先级。越 nice（nice 值越大）的进程，调度优先级越低，越会“谦让”，所以它的获得 CPU 的机会就越低。ni 代表的是 niced 用户态进程消耗的 CPU。&lt;/p&gt;
&lt;p&gt;如果 sy 过高，说明程序调用 Linux 系统调用的开销很大，不同的系统调用开销不一样，pthread_create 的开销比较大。&lt;/p&gt;
&lt;p&gt;wa 高，不能说明系统的 IO 有问题。如果整个系统只有简单任务不停地进行 IO，此时的 wa 可能很高，而系统磁盘的 IO 也远远没达到上限。假设有个单核的系统。CPU 并不会真的“死等” IO。此时的 CPU 实际是 idle 的，如果有其它进程可以运行，则运行其它进程，此时 CPU 时间就不算入 iowait。如果此时系统没有其它进程需要运行，则 CPU 需要“等”这次 IO 完成才可以继续运行，此时“等待”的时间算入 iowait。wa 低，也不能说明系统的 IO 没问题。假设机器进行大量的 IO 任务把磁盘带宽打得慢慢的，同时还有计算任务把 CPU 也跑得满满的。此时 wa 很低，但系统 IO 压力很大。&lt;/p&gt;
&lt;p&gt;系统调用会触发软中断，网卡收到数据包后，网卡驱动会通过软中断通知 CPU。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ iperf -s -i &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;# 服务端&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ iperf -c 192.168.1.4 -i &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -t &lt;span class=&#34;m&#34;&gt;60&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 客户端，可以开几个 terminal 执行多个客户端，这样 si 的变化才会比较明显&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;%Cpu&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;:  1.7 us, 74.1 sy,  0.0 ni,  8.0 id,  0.0 wa,  0.0 hi, 16.2 si,  0.0 st
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;st 和虚拟化相关，利用虚拟化技术，一台 32 CPU 核心的物理机，可以创建出几十上百个单 CPU 核心的虚拟机。这在公有云场景下，简称“超卖”。大部分情况下，物理服务器的资源有大量是闲置的。此时，“超卖”并不会造成明显影响。当很多虚拟机的 CPU 压力变大，此时物理机的资源明显不足，就会造成各个虚拟机之间相互竞争、相互等待。st 就是用来衡量被 Hypervisor “偷去” 给其它虚拟机使用的 CPU。这个值越高，说明这台物理服务器的资源竞争越激烈。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>stat</title>
      <link>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/stat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/stat/</guid>
      <description>&lt;h1 id=&#34;vmstat&#34;&gt;vmstat&lt;/h1&gt;
&lt;p&gt;使用 vmstat 命令，可以查看到上下文切换次数这个指标，如下表所示，每隔 1 秒输出 1 组数据：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ vmstat &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;      &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;5921968&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1536888&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;16818972&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;75&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上表的 cs（context switch）就是每秒上下文切换的次数，按照不同场景，CPU 上下文切换还可以分为中断上下文切换、线程上下文切换和进程上下文切换三种，但是无论是哪一种，过多的上下文切换，都会把 CPU 时间消耗在寄存器、内核栈以及虚拟内存等数据的保存和恢复上，从而缩短进程真正运行的时间，导致系统的整体性能大幅下降。vmstat 的输出中 us、sy 分别用户态和内核态的 CPU 利用率，这两个值也非常具有参考意义。&lt;/p&gt;
&lt;p&gt;vmstat 的输只给出了系统总体的上下文切换情况，要想查看每个进程的上下文切换详情（如自愿和非自愿切换），需要使用 pidstat，该命令还可以查看某个进程用户态和内核态的 CPU 利用率。&lt;/p&gt;
&lt;h1 id=&#34;dstat&#34;&gt;dstat&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;--total-cpu-usage-- -dsk/total- -net/total- ---paging-- ---system--
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;usr sys idl wai stl&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt;  writ&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; recv  send&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  in   out &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; int   csw
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;95&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   0&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 735B  592k&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;5465&lt;/span&gt;    33k
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;90&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   0&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   168k&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 428k  429k&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;  10k   41k
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;97&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   0&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;   208k&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 128k  149k&lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8106&lt;/span&gt;    31k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;pidstat&#34;&gt;pidstat&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;Linux 4.15.0-58-generic &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;master&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; 	11/19/2019 	_x86_64_	&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt; CPU&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;01:58:10 PM   UID       PID    %usr %system  %guest   %wait    %CPU   CPU  Command
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;01:58:10 PM     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;    0.34    0.23    0.00    0.00    0.57     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  systemd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;01:58:10 PM     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;    0.00    0.00    0.00    0.00    0.00     &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;  kthreadd
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;01:58:10 PM     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;         &lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;    0.00    0.01    0.00    0.01    0.01     &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  ksoftirqd/0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>top</title>
      <link>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/top/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/top/</guid>
      <description>&lt;h1 id=&#34;top&#34;&gt;top&lt;/h1&gt;
&lt;p&gt;使用 top 命令，可以查看到 CPU 利用率、CPU 平均负载这两个指标。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 指定查看用户，键入数字 1 查看单个 CPU 的负载，P/M/T 分别切换按照 CPU、内存、CPU 占用时间排序&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ top -u oracle
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Cpu(s): 87.3%us,  1.2%sy,  0.0%ni, 27.6%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;us: user cpu &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; spent in user space
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sy: system cpu &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; spent in kernel space
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ni: user nice cpu &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; spent on low priority processes
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;id: idle cpu &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; spent idle
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;wa: io &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; cpu &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; spent in &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;on disk&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;hi: hardware irq &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; spent servicing/handling hardware interrupts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;si: software irq &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; spent servicing/handling software interrupts
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;st: steal &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; - - % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; in involuntary &lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt; by virtual cpu &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; hypervisor is servicing another processor &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;or&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; % CPU &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt; stolen from a virtual machine
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 表格列&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# PID：进程的ID&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# USER：进程所有者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# PR：进程的优先级别，越小越优先被执行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# NInice：值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# VIRT：进程占用的虚拟内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# RES：进程占用的物理内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# SHR：进程使用的共享内存&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# S：进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值为负数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# %CPU：进程占用CPU的使用率&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# %MEM：进程使用的物理内存和总内存的百分比&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# TIME+：该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值。&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# COMMAND：进程启动命令名称&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;第一行显示的内容：当前时间、系统运行时间以及正在登录用户数。load average 后的三个数字，依次表示过去 1 分钟、5 分钟、15 分钟的平均负载（Load Average）。平均负载是指单位时间内，系统处于可运行状态（正在使用 CPU 或者正在等待 CPU 的进程，R 状态）和不可中断状态（D 状态）的平均进程数，也就是平均活跃进程数，它和 CPU 使用率并没有直接关系。&lt;/p&gt;
&lt;p&gt;第三行的内容表示 CPU 利用率，每一列的含义可以使用 man 查看。CPU 使用率体现了单位时间内 CPU 使用情况的统计，以百分比的方式展示。计算方式为：CPU 利用率 = 1 -（CPU 空闲时间）/ CPU 总的时间。需要注意的是，通过性能分析工具得到的 CPU 的利用率其实是某个采样时间内的 CPU 平均值。注：top 工具显示的的 CPU 利用率是把所有 CPU 核的数值加起来的，即 8 核 CPU 的利用率最大可以到达 800%（可以用 htop 等更新一些的工具代替 top）。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5803001/39466197-45bac832-4d5a-11e8-9c90-1cbdc0762b49.png&#34; alt=&#34;default&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1 处表示系统负载，它表示当前正在等待被 cpu 调度的进程数量，这个值小于系统 vcpu 数(超线程数)的时候是比较正常的，一旦大于 vcpu 数，则说明并发运行的进程太多了，有进程迟迟得不到 cpu 时间。这种情况给用户的直观感受就是敲任何命令都卡。&lt;/p&gt;
&lt;p&gt;2 处表示当前系统的总进程数，通常该值过大的时候就会导致 load average 过大。&lt;/p&gt;
&lt;p&gt;3 处表示 cpu 的空闲时间，可以反应 cpu 的繁忙程度，该值较高时表示系统 cpu 处于比较清闲的状态，如果该值较低，则说明系统的 cpu 比较繁忙。需要注意的是，有些时候该值比较高，表示 cpu 比较清闲，但是 load average 依然比较高，这种情况很可能就是因为进程数太多，进程切换占用了大量的 cpu 时间，从而挤占了业务运行需要使用的 cpu 时间。&lt;/p&gt;
&lt;p&gt;4 处表示进程 IO 等待的时间，该值较高时表示系统的瓶颈可能出现在磁盘和网络。&lt;/p&gt;
&lt;p&gt;5 处表示系统的剩余内存，反应了系统的内存使用情况。&lt;/p&gt;
&lt;p&gt;6 处表示单个进程的 cpu 和内存使用情况。关于 top 命令中各个指标含义的进一步描述可以参见：&lt;/p&gt;
&lt;p&gt;此外，我们也可以使用扩展 &lt;a href=&#34;https://github.com/hishamhm/htop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;htop&lt;/a&gt; 或者 &lt;a href=&#34;https://github.com/nicolargo/glances&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glances&lt;/a&gt;；如果针对容器监控，可以使用 &lt;a href=&#34;https://github.com/bcicen/ctop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ctop&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;➊ 在命令行输入 top，然后 shift+p 查看占用 CPU 最高的进程，记下进程号
➋ 在命令行输入 top -Hp 进程号，查看占用 CPU 最高的线程
➌ 使用 printf 0x%x 线程号，得到其 16 进制线程号
➍ 使用 jstack 进程号得到 java 执行栈，然后 grep16 进制找到相应的信息&lt;/p&gt;
&lt;p&gt;ps -eo %cpu,pid |sort -n -k1 -r | head -n 1 | awk &amp;lsquo;{print $2}&amp;rsquo; |xargs  top -b -n1 -Hp | grep COMMAND -A1 | tail -n 1 | awk &amp;lsquo;{print $1}&amp;rsquo; | xargs printf 0x%x&lt;/p&gt;
&lt;p&gt;找到使用 CPU 最高的进程之使用 CPU 最高的线程的 16 进制号。&lt;/p&gt;
&lt;p&gt;➊ 如果 load 超过了 cpu 核数，则负载过高
➋ 如果 wa 过高，可初步判断 IO 有问题
➌ sy,si,hi,st，任何一个超过 5%，都有问题
➍ 进程状态长时处于 D、Z、T 状态，提高注意度
➎ cpu 不均衡，判断亲和性和优先级问题 ➊ 如果 load 超过了 cpu 核数，则负载过高
➋ 如果 wa 过高，可初步判断 IO 有问题
➌ sy,si,hi,st，任何一个超过 5%，都有问题
➍ 进程状态长时处于 D、Z、T 状态，提高注意度
➎ cpu 不均衡，判断亲和性和优先级问题&lt;/p&gt;
&lt;p&gt;除了关注类似 top 的一些指标，还有：
➊ b 置于等待队列（等待资源、等待输入/输出）的内核线程数目。数字过大则 cpu 太忙。
➋ cs 如果频繁的进行上下文切换，则考虑是否是线程数开的过多
➌ si/so 显示了交换分区的现状，有时候会造成 cpu 问题，一并关注&lt;/p&gt;
&lt;h1 id=&#34;htop&#34;&gt;htop&lt;/h1&gt;
&lt;h1 id=&#34;ctop&#34;&gt;ctop&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>中间件</title>
      <link>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/devops-notes/03.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/%E7%B3%BB%E7%BB%9F%E6%8C%87%E6%A0%87/cpu/%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description>&lt;h1 id=&#34;中间件性能监控&#34;&gt;中间件性能监控&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
