<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>回文 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/algorithm-notes/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87/</link>
      <atom:link href="https://ng-tech.icu/books/algorithm-notes/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87/index.xml" rel="self" type="application/rss+xml" />
    <description>回文</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>回文</title>
      <link>https://ng-tech.icu/books/algorithm-notes/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87/</link>
    </image>
    
    <item>
      <title>回文字符串</title>
      <link>https://ng-tech.icu/books/algorithm-notes/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87/%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/algorithm-notes/02.%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%9B%9E%E6%96%87/%E5%9B%9E%E6%96%87%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;h1 id=&#34;longest-palindromic-substring最长回文子串&#34;&gt;Longest Palindromic Substring:最长回文子串&lt;/h1&gt;
&lt;p&gt;最长回文子串问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/kangroger/article/details/37742639&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最长回文子串的四种解法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/Lyush/p/3221503.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;回文子串原理分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Manacher 解法的核心点在于：(1)使用特殊字符填充原字符串，使其变成奇数长度的字符串，并且使得最长回文子串的长度等于 P -1。(2)在对每一位 i 求取以该位为轴心的最长回文子串时候，利用了对称原理减少了部分的重复匹配，从而使得其与中心扩展法相比具有一定的性能优化。&lt;/p&gt;
&lt;h1 id=&#34;longest-palindromic-subsequence最长回文子序列&#34;&gt;Longest Palindromic Subsequence:最长回文子序列&lt;/h1&gt;
&lt;p&gt;回文序列(Palindromic sequence, Palindrome)是指正向遍历和反向遍历完全相同的序列，例如字符串“AAAAA”显然是一个回文序列，又如字符串“ABC@CBA”也是一个回文序列。现在，我们要在一个(字符)序列中找出最长回文子序列的长 度。例如字符序列&amp;quot;BBABCBCAB&amp;quot;，最长回文子序列是“BACBCAB”(可能不唯一)，它的长度是 7；子序列&amp;quot;BBBBB&amp;quot;和&amp;quot;BBABB&amp;quot;虽然 也是回文序列，但却不是最长的，因此不合题意。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法 1：设 Sp 是序列 S 的最长回文子序列，又设 ST 是 S 的转置(逆序)，则 Length(Sp)=LCS(S, ST)，即&lt;strong&gt;LPS(S)=LCS(S, ST)&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;方法 2：
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://img.blog.csdn.net/20140505172909406?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGl0aWFuMTAyNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又可以喜大普奔填表格了，以&amp;quot;BBABCBCAB&amp;quot;为例：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://img.blog.csdn.net/20140505193316734?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZGl0aWFuMTAyNw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;空间复杂度优化&lt;/strong&gt;：选取表中的两列，&lt;strong&gt;自下而上&lt;/strong&gt;，&lt;strong&gt;自左向右&lt;/strong&gt;滚动更新。&lt;/p&gt;
&lt;h1 id=&#34;一个例子poj1159-palindrome&#34;&gt;一个例子：poj1159 Palindrome&lt;/h1&gt;
&lt;p&gt;求出题中所给出序列的 LPS，再用序列长度-LPS，即为需要添加的字符数目。&lt;strong&gt;时间复杂度 O(n^2)&lt;/strong&gt;，&lt;strong&gt;空间复杂度 O(n)&lt;/strong&gt;。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;

#define MAXN 5010

int AnsTab[2][MAXN];	//对应表格的最左边两列，自下而上，自左向右，滚动刷新
char inSeq[MAXN];

int mymax(int a, int b)
{
	return (a&amp;gt;b)?a:b;
}

int FindLenLPS(int n)
{
	//Init
	for (int i=0; i&amp;lt;2; ++i)
	{
		for (int j=0; j&amp;lt;n; ++j)
		{
			AnsTab[i][j]=0;
		}
	}
	AnsTab[0][0]=1;

	int refresh_col;	//这次该刷新AnsTab的哪一列？
	int base_col;	//根据base_col刷新refresh_col
	for (int i=1; i&amp;lt;n; ++i)	//从第一列开始，共需更新n-1列(次);自左向右
	{
		refresh_col=i%2;
		base_col=1-refresh_col;

		AnsTab[refresh_col][i]=1;

		for (int j=i-1; j&amp;gt;=0; --j)	//自下而上
		{
			//应用状态转移方程
			if (inSeq[j]==inSeq[i])
			{
				AnsTab[refresh_col][j]=2+AnsTab[base_col][j+1];
			}
			else
			{
				AnsTab[refresh_col][j]=mymax(AnsTab[refresh_col][j+1], AnsTab[base_col][j]);
			}
		}
	}

	return AnsTab[(n-1)%2][0];	//这就是LPS的长度
}

int main()
{
	int n;
	scanf(&amp;#34;%d&amp;#34;, &amp;amp;n);
	scanf(&amp;#34;%s&amp;#34;, inSeq);

	printf(&amp;#34;%d\n&amp;#34;, n-FindLenLPS(n));

	return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;cheapest-palindrome最小代价构造回文字符串&#34;&gt;Cheapest Palindrome:最小代价构造回文字符串&lt;/h1&gt;
&lt;h2 id=&#34;仅考虑字符个数&#34;&gt;仅考虑字符个数&lt;/h2&gt;
&lt;p&gt;动态规划解: f(i,j)表示 s[i..j]变为回文串需要添加的最少字符数。f(i,j)=0 if i&amp;gt;=j f(i,j)=f(i+1,j-1) if i&amp;lt;j and s[i]==s[j] f(i,j)=min(f(i,j-1),f(i+1,j))+1 if i&amp;lt;j and s[i]!=s[j]&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    #include &amp;lt;iostream&amp;gt;
    #include &amp;lt;string.h&amp;gt;
    using namespace std;
    #define min(a,b) ((a)&amp;lt;(b)?(a):(b))
    int f[100][100];
    int main()
    {
        string s;
        while (cin&amp;gt;&amp;gt;s)
        {
            memset(f,0,sizeof(f));
            for (int i=s.length()-1;i&amp;gt;=0;i--)
                for (int j=i+1;j&amp;lt;s.length();j++)
                    if (s[i]==s[j])
                        f[i][j]=f[i+1][j-1];
                    else
                        f[i][j]=min(f[i][j-1],f[i+1][j])+1;
            cout&amp;lt;&amp;lt;f[0][s.length()-1]&amp;lt;&amp;lt;endl;
        }
        return 0;
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;字符含有添加删除权重&#34;&gt;字符含有添加/删除权重&lt;/h2&gt;
&lt;p&gt;这里经典的题目是&lt;a href=&#34;http://poj.org/problem?id=3280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;POJ 3280&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;题目大意是说一个字符串，每插入或者删除一个字符都需要一定的代价，问怎样可以使这个字符串变成一个回文串，且花费最小。首先明确的就是如果已经将区间[i,j]整理成为一个回文串(不管中间有多少个字 符或者是以什么字符开头或者结尾)，当 DP 到区间[i,j+1]时，我们可以在 i-1 的位置添加一个 str[j+1]字符，或者将在 j+1 处的字符删除，得到一个新的回文串，而且我们这两步操作都没有借助或者影响区间[i,j]的情况。因此，那我们就可以将添加或者删除整合在一起，对字符 str[j+1]的操作就按照添加和删除中花费最小的一个计算。写出状态转移方程: DP[j][i] = MIN(DP[j+1][i]+cost[str[j]-&amp;lsquo;a&amp;rsquo;], DP[j][i-1]+cost[str[i]-&amp;lsquo;a&amp;rsquo;]); if(str[i] == str[j])DP[j][i] = MIN(DP[j][i],DP[j+1][i-1]); 这里的 j 是按照 i-1 到 0 枚举的，由于可能 str[i] == str[j]，因此也可以不操作，再将 不操作 与 添加或删除区间头或尾 比较。当然，其实最初的想法是扩展出来四个状态，就是首删除，首添加，尾删除，尾添加，由此扩展开来求一个最小值&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#define mem(a) memset(a,0,sizeof(a))
#define MIN(a,b) ((a) &amp;lt; (b) ? (a) : (b))

int DP[2005][2005],cost[30],N,M;
char str[2005];

int main()
{
    while(~scanf(&amp;#34;%d%d&amp;#34;, &amp;amp;M, &amp;amp;N))
    {
        mem(DP); mem(str); mem(cost);
        scanf(&amp;#34;%s%*c&amp;#34;,str);
        char ch; int x, y;
        for(int i=0;i&amp;lt;M;i++)
        {
            scanf(&amp;#34;%c %d %d%*c&amp;#34;, &amp;amp;ch, &amp;amp;x, &amp;amp;y);
            cost[ch-&amp;#39;a&amp;#39;] = MIN(x,y);
        }
        for(int i=1;i&amp;lt;N;i++)
        {
            for(int j=i-1;j&amp;gt;=0;j--)
            {
                DP[j][i] = MIN(DP[j+1][i]+cost[str[j]-&amp;#39;a&amp;#39;], DP[j][i-1]+cost[str[i]-&amp;#39;a&amp;#39;]);
                if(str[i] == str[j])DP[j][i] = MIN(DP[j][i],DP[j+1][i-1]);
            }
        }
        printf(&amp;#34;%d\n&amp;#34;, DP[0][N-1]);
    }
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;palindrome-partitioning切分回文子串&#34;&gt;Palindrome Partitioning:切分回文子串&lt;/h1&gt;
&lt;h2 id=&#34;全部回文子串&#34;&gt;全部回文子串&lt;/h2&gt;
&lt;p&gt;本题可以参考&lt;a href=&#34;https://leetcode.com/problems/palindrome-partitioning/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leetcode Palindrome Partitioning&lt;/a&gt;，即在给定字符串的情况下，寻找所有可能切分为回文子串的组合方法。譬如&lt;code&gt;s = &amp;quot;aab&amp;quot;&lt;/code&gt;，所有的组合为:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[
  [&amp;#34;aa&amp;#34;,&amp;#34;b&amp;#34;],
  [&amp;#34;a&amp;#34;,&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;]
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最简单的方法，即是使用回溯法寻找所有可能的子串，然后判断是否为回文子串，代码参考&lt;a href=&#34;&#34;&gt;这里&lt;/a&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package wx.ds.string.palindrome;

/**
 * Created by apple on 16/9/2.
 */

import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

/**
 * @function 回文子串划分问题
 */
public class PalindromePartition {


    /**
     * @param str
     * @param partitionedStr
     * @param result
     * @param pos
     * @function 使用回溯法进行所有的回文子串切分
     */
    public void partitionBacktracking(String str, List&amp;lt;String&amp;gt; partitionedStr, List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; result, int pos) {

        //判断当前字符串是否到头了
        if (pos == str.length()) {

            //将本次的结果添加到result中
            result.add(new ArrayList&amp;lt;String&amp;gt;(partitionedStr));

            return;
        }

        //否则开始递归求取字符串
        for (int i = pos + 1; i &amp;lt; str.length() + 1; i++) {

            String subStr = str.substring(pos, i);

            //判断是否为回文字符串
            if (isPal(subStr)) {

                partitionedStr.add(subStr);

                //递归调用
                partitionBacktracking(str, partitionedStr, result, i);

                //回溯
                partitionedStr.remove(partitionedStr.size() - 1);

            } else {
                //否则直接跳过
                continue;
            }

        }

    }

    @Test
    public void test_partitionBacktracking() {

        List&amp;lt;String&amp;gt; partitionedStr = new ArrayList&amp;lt;&amp;gt;();

        List&amp;lt;List&amp;lt;String&amp;gt;&amp;gt; result = new ArrayList&amp;lt;&amp;gt;();

        partitionBacktracking(&amp;#34;afdafabbacddadscadsfdsaab&amp;#34;, partitionedStr, result, 0);

        System.out.println(result);

    }


    /**
     * @param s
     * @return
     * @function 判断字符串s是否为回文字串
     */
    private boolean isPal(String s) {

        int i = 0;

        while (i &amp;lt; s.length() / 2) {
            if (s.charAt(i) != s.charAt(s.length() - 1 - i)) {

                return false;

            }

            i++;
        }
        return true;

    }

    @Test
    public void test_isPal() {

        Assert.assertEquals(isPal(&amp;#34;a&amp;#34;), true);

        Assert.assertEquals(isPal(&amp;#34;ab&amp;#34;), false);

        Assert.assertEquals(isPal(&amp;#34;abba&amp;#34;), true);

        Assert.assertEquals(isPal(&amp;#34;abdba&amp;#34;), true);

        Assert.assertEquals(isPal(&amp;#34;abdbad&amp;#34;), false);

    }


}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;最少切分数&#34;&gt;最少切分数&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
