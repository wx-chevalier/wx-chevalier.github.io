<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>最短路径 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</link><atom:link href="https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/index.xml" rel="self" type="application/rss+xml"/><description>最短路径</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>最短路径</title><link>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</link></image><item><title>Dijkstra</title><link>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/dijkstra/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/dijkstra/</guid><description>&lt;h1 id="dijkstra">Dijkstra&lt;/h1>
&lt;p>迪杰斯特拉(Dijkstra)算法按路径长度(看下面表格的最后一行，就是 next 点)递增次序产生最短路径。先把 V 分成两组：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images.cnitblog.com/blog/387014/201308/20161106-05038e80e99b4a13a4e61adecd29b055.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>S：已求出最短路径的顶点的集合&lt;/li>
&lt;li>V-S=T：尚未确定最短路径的顶点集合&lt;/li>
&lt;/ul>
&lt;p>将 T 中顶点按最短路径递增的次序加入到 S 中，依据：可以证明 V0 到 T 中顶点 Vk 的最短路径，或是从 V0 到 Vk 的直接路径的权值或是从 V0 经 S 中顶点到 Vk 的路径权值之和。求最短路径的步骤如下:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>初使时令 S={V0},T={其余顶点}，T 中顶点对应的距离值，若存在&amp;lt;V0,Vi&amp;gt;，为&amp;lt;V0,Vi&amp;gt;弧上的权值(和ＳＰＦＡ初始化方式不同)，若不存在&amp;lt;V0,Vi&amp;gt;，为 Inf。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>从 T 中选取一个其距离值为最小的顶点 W(贪心体现在此处)，加入 S(注意不是直接从 S 集合中选取，理解这个对于理解 vis 数组的作用至关重要)，对 T 中顶点的距离值进行修改：若加进 W 作中间顶点，从 V0 到 Vi 的距离值比不加 W 的路径要短，则修改此距离值(上面两个并列 for 循环，使用最小点更新)。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>重复上述步骤，直到 S 中包含所有顶点，即 S=V 为止(说明最外层是除起点外的遍历)。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images.cnitblog.com/blog/387014/201308/20161132-811964bb8e3441d69274dc4d3c16fbdf.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Dijkstra 算法的缺陷之一是不能处理负权边，这与贪心选择性质有关，每次都找一个距源点最近的点(dmin)，然后将该距离定为这个点到源点的最短路径；但如果存在负权边，那就有可能先通过并不是距源点最近的一个次优点(dmin&amp;rsquo;)，再通过这个负权边 L(L&amp;lt;0)，使得路径之和更小(dmin&amp;rsquo;+L&amp;lt;dmin),则 dmin&amp;rsquo;+L 成为最短路径，并不是 dmin，这样 dijkstra 就被囧掉了。比如 n=3，邻接矩阵：&lt;/p>
&lt;pre tabindex="0">&lt;code>0，3，4
3，0，-2
4，-2，0,
&lt;/code>&lt;/pre>&lt;p>用 dijkstra 求得 d[1，2]=3，事实上 d[1，2]=2，就是通过了 1-3-2 使得路径减小。不知道讲得清楚不清楚。&lt;/p></description></item><item><title>README.</title><link>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/readme./</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/readme./</guid><description>&lt;p>﻿# 最短路径&lt;/p>
&lt;p>最短路径问题是我们在图论中经常碰到的问题之一，其通用可以描述为从某顶点出发，沿图的边到达另一顶点所经过的路径中，各边上权值之和最小的一条路径——最短路径。解决最短路的问题有以下算法，Dijkstra 算法，Bellman-Ford 算法，Floyd 算法和 SPFA 算法，另外还有著名的启发式搜索算法 &lt;code>A*&lt;/code>，其中 Floyd 算法可以求解任意两点间的最短路径的长度。笔者认为任意一个最短路算法都是基于这样一个事实：从任意节点 A 到任意节点 B 的最短路径不外乎 2 种可能，1 是直接从 A 到 B，2 是从 A 经过若干个节点到 B。最短路径问题可以进一步分为单源最短路径和全源最短路径。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>单源最短路径定义为，给定起始顶点 s，找出从 s 到图中其它各顶点的最短路径。求解单源最短路径的算法主要是 Dijkstra 算法和 Bellman-Ford 算法，其中 Dijkstra 算法主要解决所有边的权为非负的单源最短路径问题，而 Bellman-Ford 算法可以适用于更一般的问题，图中边的权值可以为负。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>全源最短路径定义为，找出连接图中各对顶点的最短路径。求解全源最短路径的算法主要有 Floyd 算法和 Johonson 算法，其中 Floyd 算法可以检测图中的负环并可以解决不包括负环的图中的全源最短路径问题；Johonson 算法同样也是解决不包含负环的图的全源最短路径问题，但是其算法效率更高。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="最优子结构">最优子结构&lt;/h2>
&lt;p>最短路径算法具有最短路径的最优子结构性质，也就是两顶点之间的最短路径包括路径上其它顶点的最短路径。具体描述为：对于给定的带权图 G=(V, E)，设&lt;code>p=&amp;lt;v1, v2, …,vk&amp;gt;&lt;/code>是从 v1 到 vk 的最短路径，那么对于任意 i 和 j，1≤i≤j≤k，&lt;code>pij=&amp;lt;vi, vi+1, …, vj&amp;gt;&lt;/code>为 p 中顶点 vi 到 vj 的子路径，那么 pij 是顶点 vi 到 vj 的最短路径。最短路径算法都使用了松弛(relaxation)技术。开始进行一个最短路径算法时，只知道图中边和权值。随着处理逐渐得到各对顶点的最短路径的信息。算法会逐渐更新这些信息，每步都会检查是否可以找到一条路径比当前给定路径更短。这一过程通常称为“松弛”。如图为单元最短路径算法的松弛操作。问题为求求解顶点 s 到图中各顶点之间的最短路径，用 d[i]表示顶点 s 到顶点 i 的最短路径的长度。对权值为 1 的边(v, w)进行松弛，若当前到顶点 v 和 w 的最短路径的长度分别 6 和 8，如图(a)，则此时 &lt;code>d[w]&amp;lt;d[v]+ ω(v, w)&lt;/code>，所以对 d[w]的值需要减小，并且 s 到顶点 w 的最短路径为顶点 s 到 v 的最短路径，再经过边(v, w)，如图(b)。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://images.cnblogs.com/cnblogs_com/luweiseu/1.7.22.JPG" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>我们用 d[i]数组表示顶点 s 到顶点 i 的最短路径的长度，用 p[i]表示顶点 i 在最短路径中的父顶点。可以将边松弛过程用一下代码来描述：&lt;/p>
&lt;pre tabindex="0">&lt;code>Relax(v, w, ω(v, w))
if d[w]&amp;gt;d[v] + ω(v, w)
{d[w]=d[v] + ω(v, w); p[w] = v;}
&lt;/code>&lt;/pre>&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/hxsyl/p/3270401.html" target="_blank" rel="noopener">彻底弄懂最短路径问题&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/luweiseu/archive/2012/07/14/2591533.html" target="_blank" rel="noopener">6.3.3 最短路径算法&amp;ndash;Dijkstra 算法，Bellmanford 算法，Floyd 算法，Johnson 算法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/hxsyl/p/3248391.html" target="_blank" rel="noopener">SPFA 算法学习笔记&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>SPFA</title><link>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/spfa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/spfa/</guid><description>&lt;h1 id="spfa">SPFA&lt;/h1></description></item><item><title>多段图中的最短路径</title><link>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%A4%9A%E6%AE%B5%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%A4%9A%E6%AE%B5%E5%9B%BE%E4%B8%AD%E7%9A%84%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</guid><description>&lt;h1 id="多段图中的最短路径">多段图中的最短路径&lt;/h1>
&lt;p>多段图中的最短路径问题是经典的动态规划问题之一，其可描述为给定一个有向无环图(DAG 图)，求给定起始顶点到终止顶点的最短路径，此也属于单源最短路径问题。不过 DAG 的独特之处在于其所有的节点都可以线性化成拓扑序列，使得所有边保持由左到右的方向，譬如下图所示：&lt;/p>
&lt;p>在文首我们讨论过了，两点之间的最短路径包含最优子结构，即我们可以得出动态规划中的状态转移递推公式。我们关注某个目标顶点 i，到达 i 仅有的途径是经过其直接前驱。如果假设 i 的直接前驱有 k 个顶点：$i_1,i_2,&amp;hellip;,i_k$，那我们的状态转移方程可以表述为:&lt;/p>
&lt;pre tabindex="0">&lt;code>dist(i) = min{dist(i1) + d(i1,i),dist(i2) + d(i2,i),...,dist(ik) + d(ik,i)}
&lt;/code>&lt;/pre>&lt;p>其中 d(i,j)是顶点 i 到 j 的边上的权值，dist(源点) = 0。&lt;/p></description></item><item><title>全源最短路径</title><link>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%85%A8%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/algorithm-notes/03.%E5%9B%BE%E8%AE%BA/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/%E5%85%A8%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</guid><description>&lt;h1 id="全源最短路径">全源最短路径&lt;/h1></description></item></channel></rss>