<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Flannel | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/</link><atom:link href="https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/index.xml" rel="self" type="application/rss+xml"/><description>Flannel</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Flannel</title><link>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/</link></image><item><title>host-gw 模式</title><link>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/host-gw-%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/host-gw-%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="host-gw-模式">host-gw 模式&lt;/h1>
&lt;p>最后一种 host-gw 模式是一种纯三层网络方案。其工作原理为将每个 Flannel 子网的“下一跳”设置成了该子网对应的宿主机的 IP 地址，这台主机会充当这条容器通信路径里的“网关”。这样 IP 包就能通过二层网络达到目的主机，而正是因为这一点，host-gw 模式要求集群宿主机之间的网络是二层连通的，如下图所示。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/10/19/0xsR54.png" alt="host-gw 模式" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>宿主机上的路由信息是 flanneld 设置的，因为 flannel 子网和主机的信息保存在 etcd 中，所以 flanneld 只需要 watch 这些数据的变化，实时更新路由表即可。在这种模式下，容器通信的过程就免除了额外的封包和解包带来的性能损耗。&lt;/p>
&lt;p>Node 1 上的 Pod 1 请求 Node 2 上的 Pod 2 时，流量的走向如下：&lt;/p>
&lt;ul>
&lt;li>Pod 1 里的进程发起请求，发出 IP 包，从网络层进入链路层封装成帧；&lt;/li>
&lt;li>根据主机上的路由规则，数据帧从 Node 1 通过宿主机的二层网络到达 Node 2 上；&lt;/li>
&lt;/ul></description></item><item><title>UDP 模式</title><link>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/udp-%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/udp-%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="udp-模式">UDP 模式&lt;/h1>
&lt;p>UDP 模式，是 Flannel 项目最早支持的一种方式，却也是性能最差的一种方式。这种模式提供的是一个三层的 Overlay 网络，即：它首先对发出端的 IP 包进行 UDP 封装，然后在接收端进行解封装拿到原始的 IP 包，进而把这个 IP 包转发给目标容器。工作原理如下图所示。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/10/19/0vHaKU.png" alt="Flannel UDP 模式示意" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Node 1 上的 Pod 1 请求 Node2 上的 Pod 2 时，流量的走向如下：&lt;/p>
&lt;ol>
&lt;li>Pod 1 里的进程发起请求，发出 IP 包；&lt;/li>
&lt;li>IP 包根据 Pod 1 里的 veth 设备对，进入到 cni0 网桥；&lt;/li>
&lt;li>由于 IP 包的目的 ip 不在 Node 1 上，根据 flannel 在节点上创建出来的路由规则，进入到 flannel0 中；&lt;/li>
&lt;li>此时 flanneld 进程会收到这个包，flanneld 判断该包应该在哪台 node 上，然后将其封装在一个 UDP 包中；&lt;/li>
&lt;li>最后通过 Node 1 上的网关，发送给 Node2；&lt;/li>
&lt;/ol>
&lt;p>flannel0 是一个 TUN 设备（Tunnel 设备）。在 Linux 中，TUN 设备是一种工作在三层（Network Layer）的虚拟网络设备。TUN 设备的功能：在操作系统内核和用户应用程序之间传递 IP 包。&lt;/p>
&lt;p>可以看到，这种模式性能差的原因在于，整个包的 UDP 封装过程是 flanneld 程序做的，也就是用户态，而这就带来了一次内核态向用户态的转换，以及一次用户态向内核态的转换。在上下文切换和用户态操作的代价其实是比较高的，而 UDP 模式因为封包拆包带来了额外的性能消耗。&lt;/p></description></item><item><title>VXLAN 模式</title><link>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/vxlan-%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/2.%E8%B5%84%E6%BA%90%E5%AF%B9%E8%B1%A1/5.%E7%BD%91%E7%BB%9C/flannel/vxlan-%E6%A8%A1%E5%BC%8F/</guid><description>&lt;h1 id="vxlan-模式">VXLAN 模式&lt;/h1>
&lt;p>VXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 内核本身就支持的一种网络虚拟化技术。通过利用 Linux 内核的这种特性，也可以实现在内核态的封装和解封装的能力，从而构建出覆盖网络。其工作原理如下图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/10/19/0vb7TJ.png" alt="VXLAN 工作模式" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>VXLAN 模式的 flannel 会在节点上创建一个叫 flannel.1 的 VTEP (VXLAN Tunnel End Point，虚拟隧道端点) 设备，跟 UDP 模式一样，该设备将二层数据帧封装在 UDP 包里，再转发出去，而与 UDP 模式不一样的是，整个封装的过程是在内核态完成的。&lt;/p>
&lt;p>Node 1 上的 Pod 1 请求 Node 2 上的 Pod 2 时，流量的走向如下：&lt;/p>
&lt;ol>
&lt;li>Pod 1 里的进程发起请求，发出 IP 包；&lt;/li>
&lt;li>IP 包根据 Pod 1 里的 veth 设备对，进入到 cni0 网桥；&lt;/li>
&lt;li>由于 IP 包的目的 ip 不在 Node 1 上，根据 flannel 在节点上创建出来的路由规则，进入到 flannel.1 中；&lt;/li>
&lt;li>flannel.1 将原始 IP 包加上一个目的 MAC 地址，封装成一个二层数据帧；然后内核将数据帧封装进一个 UDP 包里；&lt;/li>
&lt;li>最后通过 Node 1 上的网关，发送给 Node 2；&lt;/li>
&lt;/ol></description></item></channel></rss>