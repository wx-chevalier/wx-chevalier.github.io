<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>kubectl | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/</link><atom:link href="https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/index.xml" rel="self" type="application/rss+xml"/><description>kubectl</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>kubectl</title><link>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/</link></image><item><title>集群上下文</title><link>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/%E9%9B%86%E7%BE%A4%E4%B8%8A%E4%B8%8B%E6%96%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/%E9%9B%86%E7%BE%A4%E4%B8%8A%E4%B8%8B%E6%96%87/</guid><description>&lt;h1 id="上下文配置">上下文配置&lt;/h1>
&lt;p>通过 kubectl 子命令 config 的三元组：集群（set-cluster）、用户（set-credentials）和配置上下文（set-context）实现切换。K8s 中的上下文能够连接用户与集群，如果通过 kubectl 的操作如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl config set-cluster set-cluster scratch --server&lt;span class="o">=&lt;/span>https://5.6.7.8 --insecure-skip-tls-verify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建user&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl config set-credentials experimenter --username&lt;span class="o">=&lt;/span>exp --password&lt;span class="o">=&lt;/span>some-password
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建context&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl config set-context exp-scratch --cluster&lt;span class="o">=&lt;/span>scratch --namespace&lt;span class="o">=&lt;/span>default --user&lt;span class="o">=&lt;/span>experimenter
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 指定当前使用的context&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl config use-context exp-scratch
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以指明如下的配置文件，通过 &lt;code>export KUBECONFIG=/path/to/config.yml&lt;/code> 的方式来指明当前的上下文：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yml" data-lang="yml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">preferences&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Define the cluster&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">clusters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">cluster&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">certificate-authority-data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">xx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">server&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;https:/xx:6443&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Define the user&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">users&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">as-user-extra&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>{}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">client-key-data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">token&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Define the context: linking a user to a cluster&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">contexts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">cluster&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">user&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c"># Define current context&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">current-context&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;xx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="上下文切换">上下文切换&lt;/h2>
&lt;p>在 K8s 集群安装完毕之后，可以下载集群的配置文件到本地 kubectl 配置中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">mkdir &lt;span class="nv">$HOME&lt;/span>/.kube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">scp root@&amp;lt;master-public-ip&amp;gt;:/etc/kubernetes/kube.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后可以来查看当前的上下文&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">unset&lt;/span> KUBECONFIG
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl config current-context &lt;span class="c1"># 查看当前载入的上下文&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl config get-contexts &lt;span class="c1"># 浏览可用的上下文&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl config use-context context-name &lt;span class="c1"># 切换到指定上下文&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在操作 Kubernetes 时，处理来自不同名称空间的资源，这也是一种很常见的做法。例如，你可能希望列出一个名称空间内的所有 Pod，随后检查另一个名称空间中的服务。此时我的做法是使用 Kubernetes CLI 所支持的 &amp;ndash;namespace 标记。例如，若要查看名为 Test 的名称空间中的所有 Pod，可以运行 &lt;code>kubectl get pods -n test&lt;/code>。默认情况下，如果不提供名称空间标记，将使用默认的 Kubernetes 名称空间，即 default。&lt;/p>
&lt;p>这个默认值可以在 kubeconfig 文件中修改，例如我们可以将默认名称空间设置为 test、kube-system 或其他任何名称空间。这样在查询资源时就不需要使用 &amp;ndash;namespace 标记了。不过更改默认值的命令略微繁琐：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl config &lt;span class="nb">set&lt;/span> contexts.my-context.namespace my-namespace
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述命令会更改 my-context 上下文的 Namespace 字段，将其改为 my-namespace。这也意味着，举例来说，如果切换到 my-context 随后运行 kubectl get pods，将只能看到 my-namespace 名称空间下的 Pod。除了使用 kubectx，我们还可以使用一款名为 kubens 的工具，后者可以帮助我们列出并切换至不同名称空间。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubens
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-node-lease
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-public
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kube-system
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为所选上下文设置默认名称空间，这也是一种快速简单的操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubens default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Context &lt;span class="s2">&amp;#34;docker-desktop&amp;#34;&lt;/span> modified.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Active namespace is &lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>运行与管理</title><link>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/%E8%BF%90%E8%A1%8C%E4%B8%8E%E7%AE%A1%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/%E8%BF%90%E8%A1%8C%E4%B8%8E%E7%AE%A1%E7%90%86/</guid><description>&lt;h1 id="运行与管理">运行与管理&lt;/h1>
&lt;p>&lt;code>kubectl run&lt;/code> 和 docker run 一样，它能将一个镜像运行起来，我们使用 kubectl run 来将一个 sonarqube 的镜像启动起来。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl run sonarqube --image&lt;span class="o">=&lt;/span>sonarqube:5.6.5 --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> --port&lt;span class="o">=&lt;/span>&lt;span class="m">9000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;sonarqube&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 该命令为我们创建了一个 Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sonarqube &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 5m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以直接以交互方式运行某个镜像：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl run -i --tty ubuntu --image&lt;span class="o">=&lt;/span>ubuntu:16.04 --restart&lt;span class="o">=&lt;/span>Never -- bash -il
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>K8s 将镜像运行在 Pod 中以方便实施卷和网络共享等管理，使用 get pods 可以清楚的看到生成了一个 Pod：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl get pods
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sonarqube-1880671902-s3fdq 1/1 Running &lt;span class="m">0&lt;/span> 6m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 交互式运行 Pod 中的某个命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">exec&lt;/span> -it sonarqube-1880671902-s3fdq -- /bin/bash
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>kubectl&lt;/code> 可以用于删除创建好的 Deployment 与 Pod：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl delete pods sonarqube-1880671902-s3fdq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete deployment sonarqube
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后，我们以创建包含两个 Pod 的应用为例，展示简单的 Pod 创建、暴露等操作:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建 Deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl run hello-world --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> --labels&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;run=load-balancer-example&amp;#34;&lt;/span> --image&lt;span class="o">=&lt;/span>gcr.io/google-samples/node-hello:1.0 --port&lt;span class="o">=&lt;/span>&lt;span class="m">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取 Deployment 相关的信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get deployments hello-world
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe deployments hello-world
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取关联的 ReplicaSet 对象&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get replicasets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe replicasets
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建 Service 对象，并且暴露服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl expose deployment hello-world --type&lt;span class="o">=&lt;/span>NodePort --name&lt;span class="o">=&lt;/span>example-service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取服务信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe services example-service
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取关联的 Pod 信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods --selector&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;run=load-balancer-example&amp;#34;&lt;/span> --output&lt;span class="o">=&lt;/span>wide
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 访问服务&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl http://&amp;lt;public-node-ip&amp;gt;:&amp;lt;node-port&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="网络访问">网络访问&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 暴露某个 Pod 的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl port-forward -n NAMESPACE &lt;span class="nv">$POD&lt;/span> &amp;lt;local-port&amp;gt;:&amp;lt;pod-port&amp;gt; &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl port-forward &lt;span class="nv">$POD_NAME&lt;/span> 8080:80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 暴露某个 Service 的端口&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl -n rook-ceph port-forward service/rook-ceph-mgr-dashboard 31631:7000 --address 0.0.0.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl port-forward -n default deployment/postgres 8432:5432
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">export&lt;/span> &lt;span class="nv">WEBAPP_POD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl get pods -n &lt;span class="nv">$NAMESPACE&lt;/span> &lt;span class="p">|&lt;/span> grep web-app &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{print $1;}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl port-forward -n &lt;span class="nv">$NAMESPACE&lt;/span> &lt;span class="nv">$WEBAPP_POD&lt;/span> &lt;span class="m">8080&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl proxy --port &lt;span class="m">8002&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># http://localhost:8002/api/v1/proxy/namespaces/NAMESPACE/services/SERVICE_NAME:SERVICE_PORT/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ curl -v -u username:password &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --cacert ./ca.pem &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --cert ./crt.pem &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --key ./key.pem &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> https://api.CLUSTER_ID.k8s.gigantic.io/api/v1/namespaces/logging/services/elasticsearch:es/proxy/_stats
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>资源操作</title><link>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/%E6%A6%82%E5%BF%B5%E4%B8%8E%E9%83%A8%E7%BD%B2/kubectl/%E8%B5%84%E6%BA%90%E6%93%8D%E4%BD%9C/</guid><description>&lt;h1 id="资源操作">资源操作&lt;/h1>
&lt;h2 id="对象创建">对象创建&lt;/h2>
&lt;p>kubectl 可以基于 Yaml 文件进行应用的生命周期管理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl create -f yamls/mysql.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete -f yamls/mysql.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 同时创建多个&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl create -f yamls/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 同时删除多个&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete -f yamls/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f ./my-manifest.yaml &lt;span class="c1"># create resource(s)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f ./my1.yaml -f ./my2.yaml &lt;span class="c1"># create from multiple files&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f ./dir &lt;span class="c1"># create resource(s) in all manifest files in dir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f https://git.io/vPieo &lt;span class="c1"># create resource(s) from url&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl create deployment nginx --image&lt;span class="o">=&lt;/span>nginx &lt;span class="c1"># start a single instance of nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl explain pods,svc &lt;span class="c1"># get the documentation for pod and svc manifests&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create multiple YAML objects from stdin&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kind: Pod
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> name: busybox-sleep
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> containers:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> - name: busybox
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> image: busybox
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> - sleep
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> - &amp;#34;1000000&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">---
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kind: Pod
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> name: busybox-sleep-less
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">spec:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> containers:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> - name: busybox
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> image: busybox
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> args:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> - sleep
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> - &amp;#34;1000&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a secret with several keys&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="s">&amp;lt;&amp;lt;EOF | kubectl apply -f -
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">apiVersion: v1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">kind: Secret
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">metadata:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> name: mysecret
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">type: Opaque
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">data:
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> password: $(echo -n &amp;#34;s33msi4&amp;#34; | base64 -w0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> username: $(echo -n &amp;#34;jane&amp;#34; | base64 -w0)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源检索">资源检索&lt;/h2>
&lt;p>get 命令用于获取集群的一个或一些 resource 信息。使用&amp;ndash;help 查看详细信息。kubectl 的帮助信息、示例相当详细，而且简单易懂。建议大家习惯使用帮助信息。kubectl 可以列出集群所有 resource 的详细。resource 包括集群节点、运行的 pod，ReplicationController，service 等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl get &lt;span class="o">[(&lt;/span>-o&lt;span class="p">|&lt;/span>--output&lt;span class="o">=)&lt;/span>json&lt;span class="p">|&lt;/span>yaml&lt;span class="p">|&lt;/span>wide&lt;span class="p">|&lt;/span>go-template&lt;span class="o">=&lt;/span>...&lt;span class="p">|&lt;/span>go-template-file&lt;span class="o">=&lt;/span>...&lt;span class="p">|&lt;/span>&lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>...&lt;span class="p">|&lt;/span>jsonpath-file&lt;span class="o">=&lt;/span>...&lt;span class="o">]&lt;/span> &lt;span class="o">(&lt;/span>TYPE &lt;span class="o">[&lt;/span>NAME &lt;span class="p">|&lt;/span> -l label&lt;span class="o">]&lt;/span> &lt;span class="p">|&lt;/span> TYPE/NAME ...&lt;span class="o">)&lt;/span> &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>flags&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get commands with basic output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get services &lt;span class="c1"># List all services in the namespace&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods --all-namespaces &lt;span class="c1"># List all pods in all namespaces&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods -o wide &lt;span class="c1"># List all pods in the namespace, with more details&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get deployment my-dep &lt;span class="c1"># List a particular deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods &lt;span class="c1"># List all pods in the namespace&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pod my-pod -o yaml &lt;span class="c1"># Get a pod&amp;#39;s YAML&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pod my-pod -o yaml --export &lt;span class="c1"># Get a pod&amp;#39;s YAML without cluster specific information&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Describe commands with verbose output&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe nodes my-node
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe pods my-pod
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List Services Sorted by Name&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get services --sort-by&lt;span class="o">=&lt;/span>.metadata.name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List pods Sorted by Restart Count&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods --sort-by&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;.status.containerStatuses[0].restartCount&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List pods in test namespace sorted by capacity&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods -n &lt;span class="nb">test&lt;/span> --sort-by&lt;span class="o">=&lt;/span>.spec.capacity.storage
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get the version label of all pods with label app=cassandra&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods --selector&lt;span class="o">=&lt;/span>&lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>cassandra -o &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[*].metadata.labels.version}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get all worker nodes (use a selector to exclude results that have a label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># named &amp;#39;node-role.kubernetes.io/master&amp;#39;)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get node --selector&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;!node-role.kubernetes.io/master&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get all running pods in the namespace&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods --field-selector&lt;span class="o">=&lt;/span>status.phase&lt;span class="o">=&lt;/span>Running
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Get ExternalIPs of all nodes&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get nodes -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[*].status.addresses[?(@.type==&amp;#34;ExternalIP&amp;#34;)].address}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List Names of Pods that belong to Particular RC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># &amp;#34;jq&amp;#34; command useful for transformations that are too complex for jsonpath, it can be found at https://stedolan.github.io/jq/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">sel&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="k">$(&lt;/span>kubectl get rc my-rc --output&lt;span class="o">=&lt;/span>json &lt;span class="p">|&lt;/span> jq -j &lt;span class="s1">&amp;#39;.spec.selector | to_entries | .[] | &amp;#34;\(.key)=\(.value),&amp;#34;&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">%?&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="k">$(&lt;/span>kubectl get pods --selector&lt;span class="o">=&lt;/span>&lt;span class="nv">$sel&lt;/span> --output&lt;span class="o">=&lt;/span>&lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">={&lt;/span>.items..metadata.name&lt;span class="o">}&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Show labels for all pods (or any other Kubernetes object that supports labelling)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods --show-labels
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Check which nodes are ready&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">JSONPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}&amp;#39;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> kubectl get nodes -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$JSONPATH&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;Ready=True&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List all Secrets currently in use by a pod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods -o json &lt;span class="p">|&lt;/span> jq &lt;span class="s1">&amp;#39;.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> grep -v null &lt;span class="p">|&lt;/span> sort &lt;span class="p">|&lt;/span> uniq
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># List Events sorted by timestamp&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get events --sort-by&lt;span class="o">=&lt;/span>.metadata.creationTimestamp
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源更新">资源更新&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deployment/frontend &lt;span class="nv">www&lt;/span>&lt;span class="o">=&lt;/span>image:v2 &lt;span class="c1"># Rolling update &amp;#34;www&amp;#34; containers of &amp;#34;frontend&amp;#34; deployment, updating the image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl rollout &lt;span class="nb">history&lt;/span> deployment/frontend &lt;span class="c1"># Check the history of deployments including the revision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl rollout undo deployment/frontend &lt;span class="c1"># Rollback to the previous deployment&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl rollout undo deployment/frontend --to-revision&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="c1"># Rollback to a specific revision&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl rollout status -w deployment/frontend &lt;span class="c1"># Watch rolling update status of &amp;#34;frontend&amp;#34; deployment until completion&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat pod.json &lt;span class="p">|&lt;/span> kubectl replace -f - &lt;span class="c1"># Replace a pod based on the JSON passed into std&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Force replace, delete and then re-create the resource. Will cause a service outage.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl replace --force -f ./pod.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Create a service for a replicated nginx, which serves on port 80 and connects to the containers on port 8000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl expose rc nginx --port&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span> --target-port&lt;span class="o">=&lt;/span>&lt;span class="m">8000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Update a single-container pod&amp;#39;s image version (tag) to v4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pod mypod -o yaml &lt;span class="p">|&lt;/span> sed &lt;span class="s1">&amp;#39;s/\(image: myimage\):.*$/\1:v4/&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> kubectl replace -f -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl label pods my-pod new-label&lt;span class="o">=&lt;/span>awesome &lt;span class="c1"># Add a Label&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl annotate pods my-pod icon-url&lt;span class="o">=&lt;/span>http://goo.gl/XXBTWq &lt;span class="c1"># Add an annotation&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl autoscale deployment foo --min&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> --max&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Partially update a node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch node k8s-node-1 -p &lt;span class="s1">&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;unschedulable&amp;#34;:true}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Update a container&amp;#39;s image; spec.containers[*].name is required because it&amp;#39;s a merge key&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch pod valid-pod -p &lt;span class="s1">&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;containers&amp;#34;:[{&amp;#34;name&amp;#34;:&amp;#34;kubernetes-serve-hostname&amp;#34;,&amp;#34;image&amp;#34;:&amp;#34;new image&amp;#34;}]}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Update a container&amp;#39;s image using a json patch with positional arrays&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch pod valid-pod --type&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span> -p&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[{&amp;#34;op&amp;#34;: &amp;#34;replace&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/spec/containers/0/image&amp;#34;, &amp;#34;value&amp;#34;:&amp;#34;new image&amp;#34;}]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Disable a deployment livenessProbe using a json patch with positional arrays&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch deployment valid-deployment --type json -p&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[{&amp;#34;op&amp;#34;: &amp;#34;remove&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/spec/template/spec/containers/0/livenessProbe&amp;#34;}]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Add a new element to a positional array&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch sa default --type&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span> -p&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[{&amp;#34;op&amp;#34;: &amp;#34;add&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/secrets/1&amp;#34;, &amp;#34;value&amp;#34;: {&amp;#34;name&amp;#34;: &amp;#34;whatever&amp;#34; } }]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>资源扩展：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl scale --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> rs/foo &lt;span class="c1"># Scale a replicaset named &amp;#39;foo&amp;#39; to 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl scale --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> -f foo.yaml &lt;span class="c1"># Scale a resource specified in &amp;#34;foo.yaml&amp;#34; to 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl scale --current-replicas&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span> --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">3&lt;/span> deployment/mysql &lt;span class="c1"># If the deployment named mysql&amp;#39;s current size is 2, scale mysql to 3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl scale --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span> rc/foo rc/bar rc/baz &lt;span class="c1"># Scale multiple replication controllers&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="资源删除">资源删除&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl delete -f ./pod.json &lt;span class="c1"># Delete a pod using the type and name specified in pod.json&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete pod,service baz foo &lt;span class="c1"># Delete pods and services with same names &amp;#34;baz&amp;#34; and &amp;#34;foo&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete pods,services -l &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>myLabel &lt;span class="c1"># Delete pods and services with label name=myLabel&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl -n my-ns delete pod,svc --all &lt;span class="c1"># Delete all pods and services in namespace my-ns,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Delete all pods matching the awk pattern1 or pattern2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods -n mynamespace --no-headers&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span> &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;/pattern1|pattern2/{print $1}&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> xargs kubectl delete -n mynamespace pod
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="资源交互">资源交互&lt;/h1>
&lt;h2 id="与-pod-交互">与 Pod 交互&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl logs my-pod &lt;span class="c1"># dump pod logs (stdout)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs -l &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>myLabel &lt;span class="c1"># dump pod logs, with label name=myLabel (stdout)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs my-pod --previous &lt;span class="c1"># dump pod logs (stdout) for a previous instantiation of a container&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs my-pod -c my-container &lt;span class="c1"># dump pod container logs (stdout, multi-container case)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs -l &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>myLabel -c my-container &lt;span class="c1"># dump pod logs, with label name=myLabel (stdout)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs my-pod -c my-container --previous &lt;span class="c1"># dump pod container logs (stdout, multi-container case) for a previous instantiation of a container&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs -f my-pod &lt;span class="c1"># stream pod logs (stdout)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs -f my-pod -c my-container &lt;span class="c1"># stream pod container logs (stdout, multi-container case)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs -f -l &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>myLabel --all-containers &lt;span class="c1"># stream all pods logs with label name=myLabel (stdout)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs --tail&lt;span class="o">=&lt;/span>&lt;span class="m">20&lt;/span> nginx &lt;span class="c1"># Display only the most recent 20 lines of output in pod nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs --since&lt;span class="o">=&lt;/span>1h nginx &lt;span class="c1"># Show all logs from pod nginx written in the last hour&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl run -i --tty busybox --image&lt;span class="o">=&lt;/span>busybox -- sh &lt;span class="c1"># Run pod as interactive shell&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl run nginx --image&lt;span class="o">=&lt;/span>nginx --restart&lt;span class="o">=&lt;/span>Never -n
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">mynamespace &lt;span class="c1"># Run pod nginx in a specific namespace&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl run nginx --image&lt;span class="o">=&lt;/span>nginx --restart&lt;span class="o">=&lt;/span>Never &lt;span class="c1"># Run pod nginx and write its spec into a file called pod.yaml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">--dry-run -o yaml &amp;gt; pod.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl attach my-pod -i &lt;span class="c1"># Attach to Running Container&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl port-forward my-pod 5000:6000 &lt;span class="c1"># Listen on port 5000 on the local machine and forward to port 6000 on my-pod&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">exec&lt;/span> my-pod -- ls / &lt;span class="c1"># Run command in existing pod (1 container case)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">exec&lt;/span> my-pod -c my-container -- ls / &lt;span class="c1"># Run command in existing pod (multi-container case)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl top pod POD_NAME --containers &lt;span class="c1"># Show metrics for a given pod and its containers&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="与-node-及集群交互">与 Node 及集群交互&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl cordon my-node &lt;span class="c1"># Mark my-node as unschedulable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl drain my-node &lt;span class="c1"># Drain my-node in preparation for maintenance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl uncordon my-node &lt;span class="c1"># Mark my-node as schedulable&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl top node my-node &lt;span class="c1"># Show metrics for a given node&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl cluster-info &lt;span class="c1"># Display addresses of the master and services&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl cluster-info dump &lt;span class="c1"># Dump current cluster state to stdout&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl cluster-info dump --output-directory&lt;span class="o">=&lt;/span>/path/to/cluster-state &lt;span class="c1"># Dump current cluster state to /path/to/cluster-state&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># If a taint with that key and effect already exists, its value is replaced as specified.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl taint nodes foo &lt;span class="nv">dedicated&lt;/span>&lt;span class="o">=&lt;/span>special-user:NoSchedule
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="其他操作">其他操作&lt;/h1>
&lt;h2 id="在-kubernetes-集群中运行-terminal">在 Kubernetes 集群中运行 terminal&lt;/h2>
&lt;p>在访问集群中的服务和 Pod 时，我们需要将其暴露出来，这样才可以从公网访问它们，或在本机和集群中运行的服务之间运行 Kube 代理或转发端口。然而有时候我们可能并不想暴露任何服务或转发端口，而只需要运行某些非常简单的 Curl 命令。为此我会通过 Bash profile 加载一个函数，借此在集群内部使用 radial/busyboxplus:curl 镜像运行一个 Pod，通过这样的方式就可以访问终端，进而可以针对集群内部的服务和 IP 运行 Curl 命令。我将这个函数称之为 kbash，用法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kbash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">If you don&lt;span class="err">&amp;#39;&lt;/span>t see a &lt;span class="nb">command&lt;/span> prompt, try pressing enter.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span> root@curl:/ &lt;span class="o">]&lt;/span>$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上述命令提示符下，我可以针对内部的 Kubernetes DNS 名称或 IP 地址运行 Curl 命令。如果需要退出，只需要运行 exit 即可；如果需要重新连接到该 Pod，则可运行 kbash 连接到现有 Pod。同时我还将这个函数定义到了自己的 dotfiles 中。&lt;/p>
&lt;h2 id="快速打开-grafanajaegerkiali">快速打开 Grafana/Jaeger/Kiali&lt;/h2>
&lt;p>如果打算使用 Istio 服务网格（Service mesh），那么可能还会用到 Grafana/Jaeger/Kiali。访问这些服务时必需首先获得 Pod 名称，随后针对该 Pod 设置端口转发，最后才能打开浏览器访问转发后的地址。每次需要输入的命令都很长：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl get pods --namespace istio-system -l &lt;span class="s2">&amp;#34;app=grafana&amp;#34;&lt;/span> -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">grafana-6fb9f8c5c7-hrcqp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl --namespace istio-system port-forward grafana-6fb9f8c5c7-hrcqp 3000:3000
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ open http://localhost:3000
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>而更简单快捷的方法是为每个服务创建函数或别名。例如，我通过使用 Bash profile 加载的一个文件为 Grafana/Jaeger/Kiali 添加了如下设置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">GRAFANA_POD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl get pods --namespace istio-system -l &lt;span class="s2">&amp;#34;app=grafana&amp;#34;&lt;/span> -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;{.items[0].metadata.name}&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">JAEGER_POD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl get pod -n istio-system -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>jaeger -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">export&lt;/span> &lt;span class="nv">KIALI_POD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl -n istio-system get pod -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>kiali -o &lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;{.items[0].metadata.name}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">grafana&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;kubectl --namespace istio-system port-forward &lt;/span>&lt;span class="nv">$GRAFANA_POD&lt;/span>&lt;span class="s2"> 3000:3000 &amp;amp; open http://localhost:3000&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">jaeger&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;kubectl --namespace istio-system port-forward &lt;/span>&lt;span class="nv">$JAEGER_POD&lt;/span>&lt;span class="s2"> 16686:16686 &amp;amp; open http://localhost:16686&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">alias&lt;/span> &lt;span class="nv">kiali&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;kubectl --namespace istio-system port-forward &lt;/span>&lt;span class="nv">$KIALI_POD&lt;/span>&lt;span class="s2"> 20001:20001 &amp;amp; open http://localhost:20001&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，如果需要打开 Jaeger，只需要运行 jaeger 就可以获得 Pod 名称，创建端口转发并打开浏览器。如果你在集群中运行了其他什么需要频繁访问的服务，也可以用类似方式来设置别名。&lt;/p></description></item></channel></rss>