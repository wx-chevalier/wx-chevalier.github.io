<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>_index | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/</link><atom:link href="https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/index.xml" rel="self" type="application/rss+xml"/><description>_index</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>_index</title><link>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/</link></image><item><title>gateway</title><link>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/gateway/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/gateway/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 42
title: Gateway API
date: &amp;ldquo;2022-05-21T00:00:00+08:00&amp;rdquo;
type: book&lt;/h2>
&lt;div class="alert-note-title">
&lt;p>注意&lt;/p>
&lt;/div>
&lt;div class="alert alert-note">
本文根据 Gateway API 0.5.1 版本撰写。目前 Gateway API 仅用于处理 Kubernetes 集群中的南北向（入口）流量，未来也有可能处理集群内（东西向）流量。关于使用 Gateway API 处理东西向流量的提议详见&lt;a href="https://docs.google.com/document/d/1T_DtMQoq2tccLAtJTpo3c0ohjm25vRS35MsestSL9QU/edit" target="_blank" rel="noopener">此文档&lt;/a>。
&lt;/div>
&lt;p>除了直接使用 Service 和 Ingress 之外，Kubernetes 社区还发起了 &lt;a href="https://github.com/kubernetes-sigs/gateway-api" target="_blank" rel="noopener">Gateway API 项目&lt;/a>，它可以帮助我们将 Kubernetes 中的服务暴露到集群外。&lt;/p>
&lt;p>Gateway API 是一个由 &lt;a href="https://github.com/kubernetes/community/tree/master/sig-network" target="_blank" rel="noopener">SIG-NETWORK&lt;/a> 管理的开源项目。该项目的目标是在 Kubernetes 生态系统中发展服务网络 API。Gateway API 提供了暴露 Kubernetes 应用的资源——&lt;code>GatewayClass&lt;/code>、&lt;code>Gateway&lt;/code>、&lt;code>HTTPRoute&lt;/code>、&lt;code>TCPRoute&lt;/code> 等。&lt;/p>
&lt;p>Gateway API 已经得到了大量的网关和服务网格项目支持，请在 Gateway 官方文档中&lt;a href="https://gateway-api.sigs.k8s.io/implementations/" target="_blank" rel="noopener">查看支持状况&lt;/a>。&lt;/p>
&lt;h2 id="目标">目标&lt;/h2>
&lt;p>Gateway API 旨在通过提供表现性的、可扩展的、面向角色的接口来改善服务网络，这些接口由许多厂商实现，并得到了业界的广泛支持。&lt;/p>
&lt;p>Gateway API 是一个 API 资源的集合 —— &lt;code>GatewayClass&lt;/code>、&lt;code>Gateway&lt;/code>、&lt;code>HTTPRoute&lt;/code>、&lt;code>TCPRoute&lt;/code> 等。使用这些资源共同为各种网络用例建模。&lt;/p>
&lt;p>下图中展示的是 Kubernetes 集群中四层和七层的网络配置。从图中可以看到通过将这些资源对象分离，可以实现配置上的解耦，由不同角色的人员来管理，而这也是 Gateway API 的相较于 Ingress 的一大特色。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/gateway-api.svg" alt="Kubernetes Gateway API 简介" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="gateway-api-与-ingress-有什么不同">Gateway API 与 Ingress 有什么不同？&lt;/h2>
&lt;p>Ingress 的主要目标是用简单的、声明性的语法来暴露 HTTP 应用。Gateway API 暴露了一个更通用的代理 API，可以用于更多的协议，而不仅仅是 HTTP，并为更多的基础设施组件建模，为集群运营提供更好的部署和管理选项。&lt;/p>
&lt;h2 id="gateway-相较于-ingress-做了哪些改进">Gateway 相较于 Ingress 做了哪些改进？&lt;/h2>
&lt;p>以下是 Gateway API 对 Ingress 的改进点。&lt;/p>
&lt;p>&lt;strong>更具表现力&lt;/strong>&lt;/p>
&lt;p>Gateway 表达了更多的核心功能，比如基于头的匹配、流量加权和其他功能，而这些功能在 Ingress 中只能通过自定义方式实现。&lt;/p>
&lt;p>&lt;strong>更具扩展性&lt;/strong>&lt;/p>
&lt;p>Gateway API 允许在 API 的各个层次上链接自定义资源。这就允许在 API 结构的适当位置进行更精细的定制。&lt;/p>
&lt;p>&lt;strong>面向角色&lt;/strong>&lt;/p>
&lt;p>它们被分离成不同的 API 资源，这些资源映射到 Kubernetes 上运行应用程序的常见角色。&lt;/p>
&lt;p>&lt;strong>通用性&lt;/strong>&lt;/p>
&lt;p>这不是一种改进，而是应该保持不变。正如 Ingress 是一个具有众多实现的通用规范一样，Gateway API 被设计成一个由许多实现支持的可移植规范。&lt;/p>
&lt;p>&lt;strong>共享网关&lt;/strong>&lt;/p>
&lt;p>它们允许独立的路由资源绑定到同一个网关，从而实现负载均衡器和 VIP 的共享。这允许团队安全地共享基础设施，而不需要直接协调。&lt;/p>
&lt;p>&lt;strong>类型化后端引用&lt;/strong>&lt;/p>
&lt;p>通过类型化后端引用，Routes 可以引用 Kubernetes 服务，也可以引用任何一种被设计为 Gateway 后端的 Kubernetes 资源。&lt;/p>
&lt;p>&lt;strong>跨命名空间引用&lt;/strong>&lt;/p>
&lt;p>跨越不同 Namespaces 的路由可以绑定到网关。这样，尽管对工作负载进行了命名空间划分，但仍可共享网络基础设施。&lt;/p>
&lt;p>&lt;strong>类&lt;/strong>&lt;/p>
&lt;p>&lt;code>GatewayClass&lt;/code> 将负载均衡实现的类型形式化。这些类使用户可以很容易和明确地了解资源模型本身有什么样的能力。&lt;/p>
&lt;p>在了解了 Gateway API 的目的后，接下来我们再看下它的资源模型、请求流程、TLS 配置及扩展点等。&lt;/p>
&lt;h2 id="角色划分">角色划分&lt;/h2>
&lt;p>Gateway API 开发者为其使用场景定义四类角色：&lt;/p>
&lt;ul>
&lt;li>基础设施提供方：如 AWS、GKE 等&lt;/li>
&lt;li>集群运维：管理整个集群的计算、存储、网络、安全等&lt;/li>
&lt;li>应用程序开发者：为自己开发的应用负责，管理应用的健壮性&lt;/li>
&lt;li>应用管理员：不是所有的公司都有，通常在一些复杂系统中会有专门的应用管理员&lt;/li>
&lt;/ul>
&lt;p>Gateway API 通过 Kubernetes 服务网络的面向角色的设计在分布式灵活性和集中控制之间取得了平衡。使得许多不同的非协调团队可以使用共享网络基础设施（硬件负载均衡器、云网络、集群托管代理等），所有团队都受集群运维设置的策略约束。下图展示了在进行 Gateway 管理时的角色划分。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/gateway-roles.png" alt="Gateway 管理中的角色划分（图片来自：https://gateway-api.sigs.k8s.io/）" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>集群运维人员创建从 &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gatewayclass" target="_blank" rel="noopener">GatewayClass&lt;/a> 派生的 &lt;a href="https://gateway-api.sigs.k8s.io/api-types/gateway" target="_blank" rel="noopener">Gateway&lt;/a> 资源。此 Gateway 部署或配置它所代表的底层网络资源。通过 Gateway 和 Route 之间的&lt;a href="https://gateway-api.sigs.k8s.io/concepts/api-overview#attaching-routes-to-gateways" target="_blank" rel="noopener">路由附加进程&lt;/a> ，集群运维人员和特定团队必须就可以附加到此 Gateway 并通过它公开其应用程序的内容达成一致。集群运维人员可以在网关上实施 &lt;a href="https://gateway-api.sigs.k8s.io/guides/tls#downstream-tls" target="_blank" rel="noopener">TLS&lt;/a> 集中式策略。同时，Store 和 Site 团队&lt;a href="https://gateway-api.sigs.k8s.io/guides/multiple-ns" target="_blank" rel="noopener">在他们自己的 Namespaces 中&lt;/a>运行，但是将他们的 Routes 附加到同一个共享 Gateway，允许他们独立控制自己的&lt;a href="https://gateway-api.sigs.k8s.io/guides/http-routing" target="_blank" rel="noopener">路由逻辑&lt;/a>。这种关注点分离允许 Store 队管理自己的&lt;a href="https://gateway-api.sigs.k8s.io/guides/traffic-splitting" target="_blank" rel="noopener">流量拆分部署&lt;/a>，同时将集中策略和控制权留给集群运维人员。&lt;/p>
&lt;p>这种灵活性技能保持 API 的标准和可移植性，还使其可以适应截然不同的组织模型和实现。&lt;/p>
&lt;h2 id="资源模型">资源模型&lt;/h2>
&lt;p>注意：资源最初将作为 CRD 存在于 &lt;code>networking.x-k8s.io&lt;/code> API 组中。未限定的资源名称将隐含在该 API 组中。&lt;/p>
&lt;p>Gateway API 的资源模型中，主要有三种类型的对象：&lt;/p>
&lt;ul>
&lt;li>&lt;code>GatewayClass&lt;/code>：定义了一组具有共同配置和行为的网关。&lt;/li>
&lt;li>&lt;code>Gateway&lt;/code>：流量请求端点，流量从这里被翻译成集群内的服务。&lt;/li>
&lt;li>&lt;code>Route&lt;/code>：描述了通过 Gateway 而来的流量如何映射到服务。&lt;/li>
&lt;/ul>
&lt;h3 id="gatewayclass">GatewayClass&lt;/h3>
&lt;p>&lt;code>GatewayClass&lt;/code> 定义了一组共享共同配置和行为的 Gateway，每个 &lt;code>GatewayClass&lt;/code> 由一个控制器处理，但控制器可以处理多个 &lt;code>GatewayClass&lt;/code>。&lt;/p>
&lt;p>&lt;code>GatewayClass&lt;/code> 是一个集群范围的资源。必须至少定义一个 &lt;code>GatewayClass&lt;/code>，&lt;code>Gateway&lt;/code> 才能够生效。实现 Gateway API 的控制器通过关联的 &lt;code>GatewayClass&lt;/code> 资源来实现，用户可以在自己的 &lt;code>Gateway&lt;/code> 中引用该资源。&lt;/p>
&lt;p>这类似于 &lt;code>Ingress&lt;/code> 的 &lt;code>IngressClass&lt;/code> 和 &lt;code>PersistentVolumes&lt;/code> 的 &lt;a href="https://kubernetes.io/docs/concepts/storage/storage-classes/" target="_blank" rel="noopener">&lt;code>StorageClass&lt;/code>&lt;/a>。在 &lt;code>Ingress&lt;/code> v1beta1 中，最接近 &lt;code>GatewayClass&lt;/code> 的是 &lt;code>ingress-class&lt;/code> 注解，而在 Ingress V1 中，它的作用与 &lt;code>IngressClass&lt;/code> 一样。&lt;/p>
&lt;p>下面是一个 &lt;code>GatewayClass&lt;/code> 的配置示例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GatewayClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cluster-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">controllerName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;example.net/gateway-controller&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>GatewayClass&lt;/code> 一般由基础设施提供商来创建，用户不需要关注控制器如何实现，只需要了解该 &lt;code>GatewayClass&lt;/code> 创建的对应 &lt;code>Gateway&lt;/code> 的属性即可。&lt;/p>
&lt;p>Gateway API 的提供者还可以开放了一部分参数配置给网关管理员，管理员可以使用 &lt;code>GatewayClass.spec.parametersRef&lt;/code> 字段来配置：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GatewayClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">internet&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">controllerName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;example.net/gateway-controller&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 该字段的值应为集群唯一的&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">parametersRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example.net/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">internet-gateway-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example.net/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">internet-gateway-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ip-address-pool&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">internet-vips&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>建议使用 &lt;code>GatewayClass.spec.parametersRef&lt;/code> 自定义资源配置，不过你也可以使用 ConfigMap。&lt;/p>
&lt;p>在刚部署 GatewayClass 后，&lt;code>GatewayClass.status&lt;/code> 中的状态类型为 &lt;code>Accepted&lt;/code> 但是 &lt;code>status&lt;/code> 为 &lt;code>False&lt;/code>，控制器处理完配置后 &lt;code>status&lt;/code> 将变为 &lt;code>True&lt;/code>，如果在该过程中出现错误，那么会显示在状态中，如下所示。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GatewayClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">conditions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Accepted&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">False&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">Reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">BadFooBar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">Message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;foobar&amp;#34;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">is an FooBar.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="gateway">Gateway&lt;/h3>
&lt;p>&lt;code>Gateway&lt;/code> 描述了如何将流量翻译到集群内的服务。它定义了一个将流量从不了解 Kubernetes 的地方翻译到了解 Kubernetes 的地方的方法。例如，由云负载均衡器、集群内代理或外部硬件负载均衡器发送到 Kubernetes 服务的流量。虽然许多用例的客户端流量源自集群的 &amp;ldquo;外部&amp;rdquo;，但这并不是必需的。&lt;/p>
&lt;p>&lt;code>Gateway&lt;/code> 定义了对实现 &lt;code>GatewayClass&lt;/code> 配置和行为约定的特定负载均衡器配置的请求。该资源可以由运维人员直接创建，也可以由处理 &lt;code>GatewayClass&lt;/code> 的控制器创建。&lt;/p>
&lt;p>由于 &lt;code>Gateway&lt;/code> 规范捕获了用户意图，它可能不包含规范中所有属性的完整规范。例如，用户可以省略地址、端口、TLS 设置等字段。这使得管理 &lt;code>GatewayClass&lt;/code> 的控制器可以为用户提供这些缺省设置，从而使规范更加可移植。这种行为将通过 &lt;code>GatewayClass&lt;/code> 状态对象来明确。&lt;/p>
&lt;p>一个 &lt;code>Gateway&lt;/code> 可以包含一个或多个 &lt;code>Route&lt;/code> 引用，这些 &lt;code>Route&lt;/code> 引用的作用是将一个子集的流量引导到一个特定的服务上。&lt;/p>
&lt;p>&lt;code>Gateway&lt;/code> 规范中定义了以下内容：&lt;/p>
&lt;ul>
&lt;li>&lt;code>GatewayClassName&lt;/code>：定义此网关使用的 &lt;code>GatewayClass&lt;/code> 对象的名称。&lt;/li>
&lt;li>&lt;code>Listeners&lt;/code>：定义主机名、端口、协议、终止、TLS 设置以及哪些路由可以附加到监听器。&lt;/li>
&lt;li>&lt;code>Addresses&lt;/code>：定义为此 Gateway 请求的网络地址。&lt;/li>
&lt;/ul>
&lt;p>如果以上规范中的配置无法实现，Gateway 将处于错误状态，状态条件中会显示详细信息。&lt;/p>
&lt;p>下面展示的是使用 &lt;a href="https://gateway.envoyproxy.io/" target="_blank" rel="noopener">Envoy Gateway&lt;/a> 生成的 Gateway 示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kubectl.kubernetes.io/last-applied-configuration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">|&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &lt;/span>&lt;span class="w"> &lt;/span>{&lt;span class="s2">&amp;#34;apiVersion&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;gateway.networking.k8s.io/v1beta1&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;kind&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;Gateway&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;metadata&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>{&lt;span class="s2">&amp;#34;annotations&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>{}&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;eg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;namespace&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;default&amp;#34;&lt;/span>}&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;spec&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>{&lt;span class="s2">&amp;#34;gatewayClassName&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;eg&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;listeners&amp;#34;&lt;/span>&lt;span class="p">:[&lt;/span>{&lt;span class="s2">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;http&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;port&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="s2">&amp;#34;protocol&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s2">&amp;#34;HTTP&amp;#34;&lt;/span>}&lt;span class="p">]&lt;/span>}}&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">creationTimestamp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2022-10-22T07:03:28Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">generation&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resourceVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;326707757&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">uid&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">20f37614-1814-4c4a-b3ee-8d923a1a78f8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gatewayClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">eg&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">allowedRoutes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Same&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">addresses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IPAddress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">11.11.11.11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 如果 Envoy Gateway 部署在云上，云会创建一个 LoadBalancer 实例从而获得一个外部 IP，该 IP 为网关 IP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">conditions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2022-10-22T07:03:28Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">The Gateway has been scheduled by Envoy Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">observedGeneration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Scheduled&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Scheduled&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2022-10-22T07:04:17Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Address assigned to the Gateway, 1/1 envoy Deployment replicas available&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">observedGeneration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">attachedRoutes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">conditions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2022-10-22T07:03:30Z&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Listener is ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">observedGeneration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ready&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">supportedKinds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPRoute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从上面的示例中我们可以看到 &lt;code>status&lt;/code> 中显示了 Gateway 的状态，如网关的 IP 地址，监听器上附着的路由以及更新时间。&lt;/p>
&lt;h3 id="route">Route&lt;/h3>
&lt;p>&lt;code>Route&lt;/code> 对象定义了特定协议的规则，用于将请求从 &lt;code>Gateway&lt;/code> 映射到 Kubernetes 服务。&lt;/p>
&lt;p>从 v1alpha2 开始，Gateway API 中包含四种 &lt;code>Route&lt;/code> 资源类型。对于其他协议，鼓励使用特定于实现的自定义路由类型。未来可能会向 API 添加新的路由类型。&lt;/p>
&lt;div class="alert-note-title">
&lt;p>注意&lt;/p>
&lt;/div>
&lt;div class="alert alert-note">
目前只有 &lt;code>HTTPRoute&lt;/code> 是 Gateway API 正式支持的，其他的路由类型还在实验中，详见&lt;a href="https://gateway-api.sigs.k8s.io/concepts/versioning/" target="_blank" rel="noopener">版本文档&lt;/a>。
&lt;/div>
&lt;h4 id="httproute">HTTPRoute&lt;/h4>
&lt;p>&lt;code>HTTPRoute&lt;/code> 用于多路复用 HTTP 或终止的 HTTPS 连接。它适用于检查 HTTP 流并使用 HTTP 请求数据进行路由或修改的情况，例如使用 HTTP Header 进行路由或在运行中修改它们。&lt;/p>
&lt;p>HTTPRoute 的规范中包括：&lt;/p>
&lt;ul>
&lt;li>&lt;code>parentRefs&lt;/code>：定义此路由要附加到的 Gateway。&lt;/li>
&lt;li>&lt;code>hostnames&lt;/code>（可选）：定义用于匹配 HTTP 请求的主机头的主机名列表。&lt;/li>
&lt;li>&lt;code>rules&lt;/code>：定义规则列表以针对匹配的 HTTP 请求执行操作。每条规则由 &lt;code>matches&lt;/code>、&lt;code>filters&lt;/code>（可选）和 &lt;code>backendRefs&lt;/code>（可选）字段组成。&lt;/li>
&lt;/ul>
&lt;p>下图展示了流量经过网关和 HTTPRoute 发送到服务中的过程。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/httproute-basic-example.svg" alt="流量经过网关和 HTTPRoute 到服务中的过程" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h4 id="tlsroute">TLSRoute&lt;/h4>
&lt;p>&lt;code>TLSRoute&lt;/code> 用于多路复用 TLS 连接，通过 SNI 进行区分。它适用于使用 SNI 作为主要路由方法的地方，并且对 HTTP 等高级协议的属性不感兴趣。连接的字节流被代理，无需对后端进行任何检查。&lt;/p>
&lt;h4 id="tcproute-和-udproute">TCPRoute 和 UDPRoute&lt;/h4>
&lt;p>&lt;code>TCPRoute&lt;/code>（和 &lt;code>UDPRoute&lt;/code>）旨在用于将一个或多个端口映射到单个后端。在这种情况下，没有可用于在同一端口上选择不同后端的鉴别器（Discriminator），因此每个 &lt;code>TCPRoute&lt;/code> 确实需要监听器上的不同端口。你可以终止 TLS，在这种情况下，未加密的字节流被传递到后端。你可以选择不终止 TLS，在这种情况下，加密的字节流被传递到后端。&lt;/p>
&lt;h4 id="grcproute">GRCPRoute&lt;/h4>
&lt;p>&lt;code>GRPCRoute&lt;/code> 用于路由 gRPC 流量。支持 &lt;code>GRPCRoute&lt;/code> 的网关需要支持 HTTP/2，而无需从 HTTP/1 进行初始升级，因此可以保证 gRPC 流量正常流动。&lt;/p>
&lt;h4 id="route-类型列表">Route 类型列表&lt;/h4>
&lt;p>下面的「路由鉴别器」一栏是指可以使用哪些信息来允许多个 Routes 共享 Listener 上的端口。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">对象&lt;/th>
&lt;th style="text-align:left">OSI 层&lt;/th>
&lt;th style="text-align:left">路由鉴别器&lt;/th>
&lt;th style="text-align:left">TLS 支持&lt;/th>
&lt;th style="text-align:left">目的&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;code>HTTPRoute&lt;/code>&lt;/td>
&lt;td style="text-align:left">第 7 层&lt;/td>
&lt;td style="text-align:left">HTTP 协议中的任何内容&lt;/td>
&lt;td style="text-align:left">仅终止&lt;/td>
&lt;td style="text-align:left">HTTP 和 HTTPS 路由&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>TLSRoute&lt;/code>&lt;/td>
&lt;td style="text-align:left">第 4 层和第 7 层之间的某个位置&lt;/td>
&lt;td style="text-align:left">SNI 或其他 TLS 属性&lt;/td>
&lt;td style="text-align:left">直通或终止&lt;/td>
&lt;td style="text-align:left">TLS 协议的路由，包括不需要检查 HTTP 流的 HTTPS&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>TCPRoute&lt;/code>&lt;/td>
&lt;td style="text-align:left">第 4 层&lt;/td>
&lt;td style="text-align:left">目的端口&lt;/td>
&lt;td style="text-align:left">直通或终止&lt;/td>
&lt;td style="text-align:left">允许将 TCP 流从 Listener 转发到 Backends&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>UDPRoute&lt;/code>&lt;/td>
&lt;td style="text-align:left">第 4 层&lt;/td>
&lt;td style="text-align:left">目的端口&lt;/td>
&lt;td style="text-align:left">没有任何&lt;/td>
&lt;td style="text-align:left">允许将 UDP 流从监听器转发到后端&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;code>GRPCRoute&lt;/code>&lt;/td>
&lt;td style="text-align:left">第 7 层&lt;/td>
&lt;td style="text-align:left">gRPC 协议中的任何内容&lt;/td>
&lt;td style="text-align:left">仅终止&lt;/td>
&lt;td style="text-align:left">基于 HTTP/2 和 HTTP/2 明文的 gRPC 路由&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>请注意，通过 &lt;code>HTTPRoute&lt;/code> 和 &lt;code>TCPRoute&lt;/code> 路由的流量可以在网关和后端之间进行加密（通常称为重新加密）。无法使用现有的 Gateway API 资源对其进行配置，但实现可以为此提供自定义配置，直到 Gateway API 定义了标准化方法。&lt;/p>
&lt;h3 id="referencegrant">ReferenceGrant&lt;/h3>
&lt;div class="alert-note-title">
&lt;p>注意&lt;/p>
&lt;/div>
&lt;div class="alert alert-note">
&lt;code>ReferenceGrant&lt;/code> 资源仍在实验阶段，更多信息请参考&lt;a href="https://gateway-api.sigs.k8s.io/concepts/versioning" target="_blank" rel="noopener">版本文档&lt;/a>。
&lt;/div>
&lt;p>&lt;code>ReferenceGrant&lt;/code> 可用于在 Gateway API 中启用跨命名空间引用。特别是，路由可能会将流量转发到其他命名空间中的后端，或者 Gateway 可能会引用另一个命名空间中的 Secret。&lt;/p>
&lt;p>过去，我们已经看到跨命名空间边界转发流量是一种理想的功能，但如果没有 &lt;code>ReferenceGrant&lt;/code> 之类的保护措施， 就会出现&lt;a href="https://github.com/kubernetes/kubernetes/issues/103675" target="_blank" rel="noopener">漏洞&lt;/a>。&lt;/p>
&lt;p>如果从其命名空间外部引用一个对象，则该对象的所有者必须创建一个 &lt;code>ReferenceGrant&lt;/code> 资源以显式允许该引用，否则跨命名空间引用是无效的。&lt;/p>
&lt;h2 id="将路由添加到网关">将路由添加到网关&lt;/h2>
&lt;p>将 Route 附加到 Gateway 表示在 Gateway 上应用的配置，用于配置底层负载均衡器或代理。Route 如何以及哪些 Route 附加到 Gateway 由资源本身控制。Route 和 Gateway 资源具有内置控件以允许或限制它们的连接方式。组织可以同时利用 Kubernetes RBAC，实施有关如何公开 Route 以及在公开在哪些 Gateway 上公开的策略。&lt;/p>
&lt;p>如何将 Route 附加到网关以实现不同的组织策略和责任范围有很大的灵活性。下面是 Gateway 和 Route 可以具有的关系：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>一对一&lt;/strong>：Gateway 和 Route 可以由单个所有者部署和使用，具有一对一的关系。&lt;/li>
&lt;li>&lt;strong>一对多&lt;/strong>： Gateway 可以绑定许多 Route，这些 Route 由来自不同命名空间的不同团队拥有。&lt;/li>
&lt;li>&lt;strong>多对一&lt;/strong>：Route 也可以绑定到多个 Gateway，允许单个 Route 同时控制跨不同 IP、负载均衡器或网络的应用程序。&lt;/li>
&lt;/ul>
&lt;h3 id="路由绑定">路由绑定&lt;/h3>
&lt;p>当 &lt;code>Route&lt;/code> 绑定到 &lt;code>Gateway&lt;/code> 时，代表应用在 &lt;code>Gateway&lt;/code> 上配置了底层的负载均衡器或代理。哪些 &lt;code>Route&lt;/code> 如何绑定到 &lt;code>Gateway&lt;/code> 是由资源本身控制的。&lt;code>Route&lt;/code> 和 &lt;code>Gateway&lt;/code> 资源具有内置的控制，以允许或限制它们之间如何相互选择。这对于强制执行组织策略以确定 &lt;code>Route&lt;/code> 如何暴露以及在哪些 &lt;code>Gateway&lt;/code> 上暴露非常有用。请看下面的例子。&lt;/p>
&lt;p>一个 Kubernetes 集群管理员在 &lt;code>Infra&lt;/code> 命名空间中部署了一个名为 &lt;code>shared-gw&lt;/code> 的 &lt;code>Gateway&lt;/code>，供不同的应用团队使用，以便将其应用暴露在集群之外。团队 A 和团队 B（分别在命名空间 &amp;ldquo;A&amp;rdquo; 和 &amp;ldquo;B&amp;rdquo; 中）将他们的 &lt;code>Route&lt;/code> 绑定到这个 &lt;code>Gateway&lt;/code>。它们互不相识，只要它们的 &lt;code>Route&lt;/code> 规则互不冲突，就可以继续隔离运行。团队 C 有特殊的网络需求（可能是性能、安全或关键业务），他们需要一个专门的 &lt;code>Gateway&lt;/code> 来代理。团队 C 在 &amp;ldquo;C&amp;rdquo; 命名空间中部署了自己的 &lt;code>Gateway&lt;/code> &lt;code>specialive-gw&lt;/code>，该 Gateway 只能由 &amp;ldquo;C&amp;rdquo; 命名空间中的应用使用。&lt;/p>
&lt;p>不同命名空间及 &lt;code>Gateway&lt;/code> 与 &lt;code>Route&lt;/code> 的绑定关系如下图所示。&lt;/p>
&lt;p>
&lt;figure id="figure-路由绑定示意图">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/gateway-api-route-binding.jpg" alt="路由绑定示意图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
路由绑定示意图
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;p>将路由附加到网关包括以下步骤：&lt;/p>
&lt;ol>
&lt;li>Route 需要在其 &lt;code>parentRefs&lt;/code> 字段中引用 Gateway 的条目；&lt;/li>
&lt;li>Gateway 上至少有一个监听器允许其附加。&lt;/li>
&lt;/ol>
&lt;h2 id="策略附件">策略附件&lt;/h2>
&lt;p>策略附件（Policy Attachment）是一种自定义策略资源，例如超时、重试、健康检查等，这些功能在不同的网关实现中的细节各不相同个，为了 Gateway API 的可移植性，我们将这些工作作为插件附加到资源上。&lt;/p>
&lt;p>附加到 Gateway API 资源和实施的策略必须使用以下方法来确保 API 实施之间的一致性。此模式包含三个主要组件：&lt;/p>
&lt;ul>
&lt;li>将策略附加到资源的标准化方法。&lt;/li>
&lt;li>支持在策略资源中配置默认值和覆盖值。&lt;/li>
&lt;li>用于说明默认值和覆盖值应如何交互的层次结构。&lt;/li>
&lt;/ul>
&lt;p>这种标准化不仅可以实现一致的模式，还可以让未来的工具（例如 kubectl 插件）能够可视化已应用于给定资源的所有策略。&lt;/p>
&lt;p>你可以使用 &lt;code>targetRef&lt;/code> 字段指定策略附件附加到的资源对象，例如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.acme.io/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">RetryPolicy&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">default&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">maxRetries&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.acme.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ExternalService&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该在例子中，为一个外部服务配置了一个重试策略。你可以给几乎任何可以发送、接收流量的对象附加策略，例如 &lt;code>GatewayClass&lt;/code>、&lt;code>Gateway&lt;/code>、&lt;code>Service&lt;/code>、&lt;code>Route&lt;/code>、&lt;code>Namespace&lt;/code> ，不过附加策略的时候，需要注意其优先级。&lt;/p>
&lt;h3 id="策略优先级">策略优先级&lt;/h3>
&lt;p>你可以给策略附件指定 &lt;code>override&lt;/code> 和 &lt;code>default&lt;/code> 值，其在入口和网格内不同资源上的覆盖值和默认值的优先级是如下图所示。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/policy-attachment-level.svg" alt="Gateway API 的默认值和覆盖值的优先层级" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>从图中我们可以看到：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>覆盖值：上层覆盖下层&lt;/p>
&lt;/li>
&lt;li>
&lt;p>默认值：下层覆盖上层&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="引用网关">引用网关&lt;/h2>
&lt;p>Route 可以通过在 &lt;code>parentRef&lt;/code> 中指定命名空间（如果 Route 和 Gateway 在同一个名称空间中则该配置是可选的）和 Gateway 的名称来引用 Gateway。Route 可以使用 &lt;code>parentRef&lt;/code> 中的以下字段进一步选择 Gateway 下的监听器子集：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>SectionName&lt;/strong>：当设置了 &lt;code>sectionName&lt;/code> 时，Route 选择具有指定名称的监听器；&lt;/li>
&lt;li>&lt;strong>Port&lt;/strong>：当设置了 &lt;code>port&lt;/code> 时，Route 会选择所有指定的监听端口且协议与此类 Route 兼容的监听器。&lt;/li>
&lt;/ol>
&lt;p>当设置了多个 &lt;code>parentRef&lt;/code> 字段时，Route 选择满足这些字段中指定的所有条件的监听器。例如，当 &lt;code>sectionName&lt;/code> 和 &lt;code>port&lt;/code> 两者都设置时，Route 选择具有指定名称的监听器并在指定端口上监听。&lt;/p>
&lt;h3 id="限制路由附加">限制路由附加&lt;/h3>
&lt;p>每个 Gateway 监听器都可以通过以下机制限制其可以附加的路由：&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Hostname&lt;/strong>：如果监听器上设置了 &lt;code>hostname&lt;/code> ，附加路由的 &lt;code>hostnames&lt;/code> 中必须至少有一个重叠值。&lt;/li>
&lt;li>&lt;strong>Namespace&lt;/strong>：监听器上的 &lt;code>allowedRoutes.namespaces&lt;/code> 字段可用于限制可以附加路由的位置。该 &lt;code>namespaces.from&lt;/code> 字段支持以下值：
&lt;ul>
&lt;li>&lt;code>SameNamespace&lt;/code> 是默认选项。只有与该网关相同的命名空间中的路由才会被选择。&lt;/li>
&lt;li>&lt;code>All&lt;/code> 可选择来自所有命名空间的 &lt;code>Route&lt;/code>。&lt;/li>
&lt;li>&lt;code>Selector&lt;/code> 意味着该网关将选择由 Namespace 标签选择器选择的 Namespace 子集的 Route。当使用 Selector 时，那么 &lt;code>listeners.route.namespaces.selector&lt;/code> 字段可用于指定标签选择器。&lt;code>All&lt;/code> 或 &lt;code>SameNamespace&lt;/code> 不支持该字段。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>Kind&lt;/strong>：监听器上的 &lt;code>allowedRoutes.kinds&lt;/code> 字段可用于限制可能附加的路由种类。&lt;/li>
&lt;/ol>
&lt;p>如果未指定上述任何一项，网关监听器将信任从支持监听器协议的同一命名空间附加的路由。&lt;/p>
&lt;h3 id="gateway---route-附加示例">Gateway - Route 附加示例&lt;/h3>
&lt;p>在下面的例子中 &lt;code>gateway-api-example-ns1&lt;/code> 命名空间中的 &lt;code>my-route&lt;/code> Route 想要附加到 &lt;code>foo-gateway&lt;/code> 中，不会附加到任何其他 Gateway 上。请注意， &lt;code>foo-gateway&lt;/code> 位于与 Gateway 不同的命名空间中。&lt;code>foo-gateway&lt;/code> 必须允许来自 &lt;code>gateway-api-example-ns2&lt;/code> 命名空间中的 HTTPRoute 附加。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPRoute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-route&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">parentRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">backendRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-svc&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">8080&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>foo-gateway&lt;/code> 允许 &lt;code>my-route&lt;/code> HTTPRoute 附加。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gatewayClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-lb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prod-web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">allowedRoutes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kinds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPRoute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Selector&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># 该 label 在 Kubernetes 1.22 中自动添加到所有命名空间中&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kubernetes.io/metadata.name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于一个更宽松的示例，下面的网关将允许所有 HTTPRoute 资源从带有 &lt;code>expose-apps: true&lt;/code> 标签的命名空间附加。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prod-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gatewayClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-lb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prod-web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">allowedRoutes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kinds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPRoute&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespaces&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Selector&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">expose-apps&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="组合类型">组合类型&lt;/h3>
&lt;p>&lt;code>GatewayClass&lt;/code>、Gateway、&lt;code>xRoute&lt;/code> 和 &lt;code>Service&lt;/code> 的组合将定义一个可实现的负载均衡器。下图说明了不同资源之间的关系。&lt;/p>
&lt;p>
&lt;figure id="figure-gateway-api-流程图">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/gateway-api-request-flow.png" alt="Gateway API 流程图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Gateway API 流程图
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h2 id="请求流程">请求流程&lt;/h2>
&lt;p>使用反向代理实现的网关的一个典型的客户端 / 网关 API 请求流程如下：&lt;/p>
&lt;ol>
&lt;li>客户端向 &lt;code>http://foo.example.com&lt;/code> 发出请求。&lt;/li>
&lt;li>DNS 将该名称解析为 &lt;code>Gateway&lt;/code> 地址。&lt;/li>
&lt;li>反向代理在 &lt;code>Listener&lt;/code> 上接收请求，并使用 &lt;code>Host&lt;/code> header 来匹配 &lt;code>HTTPRoute&lt;/code>。&lt;/li>
&lt;li>可选地，反向代理可以根据 &lt;code>HTTPRoute&lt;/code> 中的 &lt;code>match&lt;/code> 规则执行请求 header 和 / 或路径匹配。&lt;/li>
&lt;li>可选地，反向代理可以根据 &lt;code>HTTPRoute&lt;/code> 中的 &lt;code>filter&lt;/code> 规则修改请求，即添加 / 删除 header。&lt;/li>
&lt;li>最后，反向代理可以根据 &lt;code>HTTPRoute&lt;/code> 中的 &lt;code>forwardTo&lt;/code> 规则，将请求转发到集群中的一个或多个对象，即 &lt;code>Service&lt;/code>。&lt;/li>
&lt;/ol>
&lt;h2 id="tls-配置">TLS 配置&lt;/h2>
&lt;p>我们可以在 &lt;code>Gateway&lt;/code> 监听器上配置 TLS，还可以跨命名空间引用。&lt;/p>
&lt;p>首先我们先说明几个术语：&lt;/p>
&lt;ul>
&lt;li>下游：客户端和网关之间的链接。&lt;/li>
&lt;li>上游：网关与路由器指定的后端服务之间的链接。&lt;/li>
&lt;/ul>
&lt;p>其关系如下图所示。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/tls-overview.svg" alt="客户端/服务器和 TLS" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>通过 Gateway API 可以分别对上游或下游的 TLS 进行配置。&lt;/p>
&lt;p>根据监听器协议，支持不同的 TLS 模式和路由类型，如下表所示。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">监听器协议&lt;/th>
&lt;th style="text-align:left">TLS 模式&lt;/th>
&lt;th style="text-align:left">支持的路由类型&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">TLS&lt;/td>
&lt;td style="text-align:left">直通&lt;/td>
&lt;td style="text-align:left">TLSRoute&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">TLS&lt;/td>
&lt;td style="text-align:left">终止&lt;/td>
&lt;td style="text-align:left">TCPRoute&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">HTTPS&lt;/td>
&lt;td style="text-align:left">终止&lt;/td>
&lt;td style="text-align:left">HTTPRoute&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>请注意，在&lt;code>Passthrough&lt;/code>（直通） TLS 模式下，没有 TLS 设置生效，因为来自客户端的 TLS 会话不会在网关处终止。本文的其余部分假定 TLS 在网关处终止，这是默认设置。&lt;/p>
&lt;h3 id="下游-tls">下游 TLS&lt;/h3>
&lt;p>下游 TLS 设置使用网关级别的监听器进行配置。&lt;/p>
&lt;h3 id="监听器和-tls">监听器和 TLS&lt;/h3>
&lt;p>监听器基于每个域或子域公开 TLS 设置。监听器的 TLS 设置适用于满足 &lt;code>hostname&lt;/code> 条件的所有域。&lt;/p>
&lt;p>在以下示例中，&lt;code>default-cert&lt;/code> Gateway 为所有请求提供 Secret 资源中定义的 TLS 证书。尽管该示例涉及 HTTPS 协议，但也可以将相同的功能用于 TLS-only 协议以及 TLSRoutes。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># Other possible value is `TLS`&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mode&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Terminate&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># If protocol is `TLS`, `Passthrough` is a possible mode&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">certificateRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default-cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 &lt;code>hostname.match&lt;/code> 设置为&lt;code>Exact&lt;/code>，则 TLS 设置仅适用于在 &lt;code>hostname.name&lt;/code> 中设置的特定主机名。&lt;/p>
&lt;h3 id="示例">示例&lt;/h3>
&lt;h4 id="具有不同证书的监听器">具有不同证书的监听器&lt;/h4>
&lt;p>在下面的示例中，配置 Gateway 服务于 &lt;code>foo.example.com&lt;/code> 和 &lt;code>bar.example.com&lt;/code> 域。这些域的证书在 Gateway 中指定。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tls-basic&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gatewayClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">acme-lb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-https&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">certificateRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-example-com-cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bar-https&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bar.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">certificateRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bar-example-com-cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="通配符-tls-监听器">通配符 TLS 监听器&lt;/h4>
&lt;p>在下面的示例中，Gateway 为 &lt;code>*.example.com&lt;/code> 和 &lt;code>foo.example.com&lt;/code> 域配置了不同的通配符证书。由于特定匹配具有优先权，所有对 &lt;code>foo.example.com&lt;/code> 的请求将使用 &lt;code>foo-example-com-cert&lt;/code>，所有对 &lt;code>exmaple.com&lt;/code> 的其他请求使用 &lt;code>wildcard-example-com-cert&lt;/code> 证书。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">wildcard-tls-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gatewayClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">acme-lb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-https&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">certificateRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo-example-com-cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">wildcard-https&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;*.example.com&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">certificateRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">wildcard-example-com-cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="跨命名空间证书引用">跨命名空间证书引用&lt;/h4>
&lt;p>在此示例中，配置 Gateway 引用不同命名空间中的证书。在目标命名空间中创建 &lt;code>ReferenceGrant&lt;/code> 以允许跨命名空间引用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">cross-namespace-tls-gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">gatewayClassName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">acme-lb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">listeners&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">HTTPS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;*.example.com&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">certificateRefs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">wildcard-example-com-cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io/v1alpha2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReferenceGrant&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">allow-ns1-gateways-to-ref-secrets&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">from&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway.networking.k8s.io&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Gateway&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gateway-api-example-ns1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">to&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">group&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="扩展">扩展&lt;/h3>
&lt;p>网关 TLS 配置提供了一个 &lt;code>options&lt;/code> 映射来为特定于实现的功能添加额外的 TLS 设置。此处可能包含的一些功能示例是 TLS 版本限制或要使用的密码。&lt;/p>
&lt;h2 id="扩展点">扩展点&lt;/h2>
&lt;p>API 中提供了一些扩展点，以灵活处理大量通用 API 无法处理的用例。&lt;/p>
&lt;p>以下是 API 中扩展点的摘要。&lt;/p>
&lt;ul>
&lt;li>&lt;code>BackendRefs&lt;/code>：此扩展点应用于将流量转发到核心 Kubernetes 服务资源以外的网络端点。例如 S3 存储桶、Lambda 函数、文件服务器等。&lt;/li>
&lt;li>&lt;code>HTTPRouteFilter&lt;/code>：&lt;code>HTTPRoute&lt;/code> 中的这种 API 类型提供了一种挂钩 HTTP 请求的请求 / 响应生命周期的方法。&lt;/li>
&lt;li>&lt;strong>自定义路由&lt;/strong>：如果上述扩展点都不能满足用例的需要，实施者可以选择为 API 当前不支持的协议创建自定义路由资源。自定义路由类型需要共享与核心路由类型相同的字段。这些包含在 &lt;code>CommonRouteSpec&lt;/code> 和 &lt;code>RouteStatus&lt;/code> 中。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/kubernetes-sigs/gateway-api" target="_blank" rel="noopener">kuberentes-sigs/gateway-api - github.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gateway-api.sigs.k8s.io/" target="_blank" rel="noopener">Kubernetes Gateway API 文档 - gateway-api.sigs.k8s.io&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>ingress</title><link>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/ingress/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/ingress/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 41
title: Ingress
date: &amp;ldquo;2022-05-21T00:00:00+08:00&amp;rdquo;
type: book&lt;/h2>
&lt;p>Ingress 是从 Kubernetes 集群外部访问集群内部服务的入口，是将 Kubernetes 集群内部服务暴露到外界的几种方式之一。本文将为你详细介绍 Ingress 资源对象。&lt;/p>
&lt;p>&lt;strong>术语&lt;/strong>&lt;/p>
&lt;p>在本篇文章中你将会看到一些在其他地方被交叉使用的术语，为了防止产生歧义，我们首先来澄清下。&lt;/p>
&lt;ul>
&lt;li>节点：Kubernetes 集群中的一台物理机或者虚拟机。&lt;/li>
&lt;li>集群：位于 Internet 防火墙后的节点，这是 Kubernetes 管理的主要计算资源。&lt;/li>
&lt;li>边界路由器：为集群强制执行防火墙策略的路由器。这可能是由云提供商或物理硬件管理的网关。&lt;/li>
&lt;li>集群网络：一组逻辑或物理链接，可根据 Kubernetes &lt;a href="https://kubernetes.io/docs/admin/networking/" target="_blank" rel="noopener">网络模型&lt;/a> 实现集群内的通信。集群网络的实现包括 Overlay 模型的 &lt;a href="https://github.com/coreos/flannel#flannel" target="_blank" rel="noopener">flannel&lt;/a> 和基于 SDN 的 OVS。&lt;/li>
&lt;li>服务：使用标签选择器标识一组 pod 成为的 Kubernetes &lt;a href="https://kubernetes.io/docs/user-guide/services/" target="_blank" rel="noopener">服务&lt;/a>。除非另有说明，否则服务假定在集群网络内仅可通过虚拟 IP 访问。&lt;/li>
&lt;/ul>
&lt;h2 id="什么是-ingress">什么是 Ingress？&lt;/h2>
&lt;p>通常情况下，service 和 pod 仅可在集群内部网络中通过 IP 地址访问。所有到达边界路由器的流量或被丢弃或被转发到其他地方。从概念上讲，可能像下面这样：&lt;/p>
&lt;pre tabindex="0">&lt;code> internet
|
------------
[Services]
&lt;/code>&lt;/pre>&lt;p>Ingress 是授权入站连接到达集群服务的规则集合。&lt;/p>
&lt;pre tabindex="0">&lt;code> internet
|
[Ingress]
--|-----|--
[Services]
&lt;/code>&lt;/pre>&lt;p>你可以给 Ingress 配置提供外部可访问的 URL、负载均衡、SSL、基于名称的虚拟主机等。用户通过 POST Ingress 资源到 API server 的方式来请求 ingress。&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-controllers" target="_blank" rel="noopener">Ingress controller&lt;/a> 负责实现 Ingress，通常使用负载均衡器，它还可以配置边界路由和其他前端，这有助于以高可用的方式处理流量。&lt;/p>
&lt;h2 id="先决条件">先决条件&lt;/h2>
&lt;p>在使用 Ingress 资源之前，有必要先了解下面几件事情。&lt;/p>
&lt;ul>
&lt;li>你需要一个 &lt;code>Ingress Controller&lt;/code> 来实现 &lt;code>Ingress&lt;/code>，单纯的创建一个 &lt;code>Ingress&lt;/code> 没有任何意义。&lt;/li>
&lt;li>GCE/GKE 会在 master 节点上部署一个 ingress controller。你可以在一个 pod 中部署任意个自定义的 ingress controller。你必须正确地注解每个 ingress，比如运行多个 ingress controller 和关闭 glbc。&lt;/li>
&lt;li>在非 GCE/GKE 的环境中，你需要在 pod 中部署一个 controller，例如 &lt;a href="https://github.com/kubernetes/ingress-nginx/blob/master/README.md" target="_blank" rel="noopener">Nginx Ingress Controller&lt;/a>。&lt;/li>
&lt;/ul>
&lt;h2 id="ingress-资源">Ingress 资源&lt;/h2>
&lt;p>最简化的 Ingress 配置如下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">1: apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">2: kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">3&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">4: name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">5&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>- &lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">8&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">9: - path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/testpath&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">10&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">11: serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">12: servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你没有配置 Ingress controller 就将其 POST 到 API server 不会有任何用处。&lt;/p>
&lt;p>&lt;strong>配置说明&lt;/strong>&lt;/p>
&lt;p>&lt;strong>1-4 行&lt;/strong>：跟 Kubernetes 的其他配置一样，ingress 的配置也需要 &lt;code>apiVersion&lt;/code>，&lt;code>kind&lt;/code> 和 &lt;code>metadata&lt;/code> 字段。配置文件的详细说明请查看 &lt;a href="https://kubernetes.io/docs/user-guide/deploying-applications" target="_blank" rel="noopener">部署应用&lt;/a>，&lt;a href="https://kubernetes.io/docs/user-guide/configuring-containers" target="_blank" rel="noopener">配置容器&lt;/a> 和使用资源。&lt;/p>
&lt;p>&lt;strong>5-7 行&lt;/strong>: Ingress spec 中包含配置一个 loadbalancer 或 proxy server 的所有信息。最重要的是，它包含了一个匹配所有入站请求的规则列表。目前 ingress 只支持 http 规则。&lt;/p>
&lt;p>&lt;strong>8-9 行&lt;/strong>：每条 http 规则包含以下信息：一个 &lt;code>host&lt;/code> 配置项（比如 for.bar.com，在这个例子中默认是 *），&lt;code>path&lt;/code> 列表（比如：/testpath），每个 path 都关联一个 &lt;code>backend&lt;/code>(比如 test:80)。在 loadbalancer 将流量转发到 backend 之前，所有的入站请求都要先匹配 host 和 path。&lt;/p>
&lt;p>&lt;strong>10-12 行&lt;/strong>：正如 &lt;a href="https://kubernetes.io/docs/user-guide/services" target="_blank" rel="noopener">services doc&lt;/a> 中描述的那样，backend 是一个 &lt;code>service:port&lt;/code> 的组合。Ingress 的流量被转发到它所匹配的 backend。&lt;/p>
&lt;p>&lt;strong>全局参数&lt;/strong>：为了简单起见，Ingress 示例中没有全局参数，请参阅资源完整定义的 &lt;a href="https://releases.k8s.io/master/staging/src/k8s.io/api/extensions/v1beta1/types.go" target="_blank" rel="noopener">API 参考&lt;/a>。在所有请求都不能跟 spec 中的 path 匹配的情况下，请求被发送到 Ingress controller 的默认后端，可以指定全局缺省 backend。&lt;/p>
&lt;h2 id="ingressclass">IngressClass&lt;/h2>
&lt;p>Ingress 可以由不同的控制器实现，通常使用不同的配置。每个 Ingress 应当指定一个类，也就是一个对 IngressClass 资源的引用。IngressClass 资源包含额外的配置，其中包括应当实现该类的控制器名称。下面是一个 IngressClass 示例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">networking.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IngressClass&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">external-lb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">controller&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example.com/ingress-controller&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">parameters&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">apiGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8s.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IngressParameters&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">external-lb&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>IngressClass 中的 &lt;code>.spec.parameters&lt;/code> 字段可用于引用其他资源以提供额外的相关配置。&lt;/p>
&lt;p>参数（&lt;code>parameters&lt;/code>）的具体类型取决于你在 &lt;code>.spec.controller&lt;/code> 字段中指定的 Ingress 控制器。&lt;/p>
&lt;h3 id="ingressclass-的作用域">IngressClass 的作用域&lt;/h3>
&lt;p>IngressClass 的作用域取决于你的 Ingress 控制器，可以使用集群范围也可以是某个命名空间。&lt;/p>
&lt;p>IngressClass 的默认作用于是集群级别，关于 IngressClass 作用域的详细使用说明请见 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#ingressclass" target="_blank" rel="noopener">Ingress 文档&lt;/a>。&lt;/p>
&lt;h3 id="默认-ingressclass">默认 IngressClass&lt;/h3>
&lt;p>你可以将一个特定的 IngressClass 标记为集群默认 IngressClass。将一个 IngressClass 资源的 &lt;code>ingressclass.kubernetes.io/is-default-class&lt;/code> 注解设置为 &lt;code>true&lt;/code> 将确保新的未指定 &lt;code>ingressClassName&lt;/code> 字段的 Ingress 能够分配为这个默认的 IngressClass。集群中最多只能有一个 IngressClass 被标记为默认。&lt;/p>
&lt;h3 id="kubernetesioingressclass-注解">&lt;code>kubernetes.io/ingress.class&lt;/code> 注解&lt;/h3>
&lt;p>在 Kubernetes 1.18 版本引入 IngressClass 资源和 &lt;code>ingressClassName&lt;/code> 字段之前，Ingress 类是通过 Ingress 中的一个 &lt;code>kubernetes.io/ingress.class&lt;/code> 注解来指定的。这个注解从未被正式定义过，但是得到了 &lt;a href="../ingress-controller/">Ingress 控制器&lt;/a>的广泛支持。&lt;/p>
&lt;p>&lt;code>ingressClassName&lt;/code> 配置项是该注解的替代品，但并不完全等价。该注解通常用于引用实现该 Ingress 的控制器的名称，而这个新的字段则是对一个包含额外 Ingress 配置的 IngressClass 资源的引用，包括 Ingress 控制器的名称。&lt;/p>
&lt;h2 id="ingress-类型">Ingress 类型&lt;/h2>
&lt;p>以下文档描述了 Ingress 资源中公开的一组跨平台功能。理想情况下，所有的 Ingress controller 都应该符合这个规范，但是目前还没有实现。&lt;/p>
&lt;div class="alert-warning-title">
&lt;p>注意&lt;/p>
&lt;/div>
&lt;div class="alert alert-warning">
确保您查看控制器特定的文档，以便您了解每个文档的注意事项。
&lt;/div>
&lt;h3 id="单-service-ingress">单 Service Ingress&lt;/h3>
&lt;p>Kubernetes 中已经存在一些概念可以暴露单个 service（查看 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#alternatives" target="_blank" rel="noopener">替代方案&lt;/a>），但是你仍然可以通过 Ingress 来实现，通过指定一个没有 rule 的默认 backend 的方式。&lt;/p>
&lt;p>ingress.yaml 定义文件：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test-ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testsvc&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用&lt;code>kubectl create -f&lt;/code>命令创建，然后查看 ingress：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get ing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME RULE BACKEND ADDRESS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">test-ingress - testsvc:80 107.178.254.228
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>107.178.254.228&lt;/code> 就是 Ingress controller 为了实现 Ingress 而分配的 IP 地址。&lt;code>RULE&lt;/code> 列表示所有发送给该 IP 的流量都被转发到了 &lt;code>BACKEND&lt;/code> 所列的 Kubernetes service 上。&lt;/p>
&lt;h3 id="简单展开">简单展开&lt;/h3>
&lt;p>如前面描述的那样，kubernetes pod 中的 IP 只在集群网络内部可见，我们需要在边界设置一个东西，让它能够接收 ingress 的流量并将它们转发到正确的端点上。这个东西一般是高可用的 loadbalancer。使用 Ingress 能够允许你将 loadbalancer 的个数降低到最少，例如，假如你想要创建这样的一个设置：&lt;/p>
&lt;pre tabindex="0">&lt;code>foo.bar.com -&amp;gt; 178.91.123.132 -&amp;gt; /foo s1:80
/bar s2:80
&lt;/code>&lt;/pre>&lt;p>你需要一个这样的 ingress：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo.bar.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/foo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">s1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/bar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">s2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>kubectl create -f&lt;/code> 创建完 ingress 后：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get ing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME RULE BACKEND ADDRESS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">test&lt;/span> -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foo.bar.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /foo s1:80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /bar s2:80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>只要服务（s1，s2）存在，Ingress controller 就会将提供一个满足该 Ingress 的特定 loadbalancer 实现。这一步完成后，您将在 Ingress 的最后一列看到 loadbalancer 的地址。&lt;/p>
&lt;h3 id="基于名称的虚拟主机">基于名称的虚拟主机&lt;/h3>
&lt;p>Name-based 的虚拟主机在同一个 IP 地址下拥有多个主机名。&lt;/p>
&lt;pre tabindex="0">&lt;code>foo.bar.com --| |-&amp;gt; foo.bar.com s1:80
| 178.91.123.132 |
bar.foo.com --| |-&amp;gt; bar.foo.com s2:80
&lt;/code>&lt;/pre>&lt;p>下面这个 ingress 说明基于 &lt;a href="https://datatracker.ietf.org/doc/html/rfc7230#section-5.4" target="_blank" rel="noopener">Host header&lt;/a> 的后端 loadbalancer 的路由请求：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">test&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo.bar.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">s1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bar.foo.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">s2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>默认 backend&lt;/strong>：一个没有 rule 的 ingress，如前面章节中所示，所有流量都将发送到一个默认 backend。你可以用该技巧通知 loadbalancer 如何找到你网站的 404 页面，通过制定一些列 rule 和一个默认 backend 的方式。如果请求 header 中的 host 不能跟 ingress 中的 host 匹配，并且 / 或请求的 URL 不能与任何一个 path 匹配，则流量将路由到你的默认 backend。&lt;/p>
&lt;h3 id="tls">TLS&lt;/h3>
&lt;p>你可以通过指定包含 TLS 私钥和证书的 &lt;a href="https://kubernetes.io/docs/user-guide/secrets" target="_blank" rel="noopener">secret&lt;/a> 来加密 Ingress。目前，Ingress 仅支持单个 TLS 端口 443，并假定 TLS termination。如果 Ingress 中的 TLS 配置部分指定了不同的主机，则它们将根据通过 SNI TLS 扩展指定的主机名（假如 Ingress controller 支持 SNI）在多个相同端口上进行复用。TLS secret 中必须包含名为 &lt;code>tls.crt&lt;/code> 和 &lt;code>tls.key&lt;/code> 的密钥，这里面包含了用于 TLS 的证书和私钥，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls.crt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">base64 encoded cert&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls.key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">base64 encoded key&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Secret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testsecret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Opaque&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 Ingress 中引用这个 secret 将通知 Ingress controller 使用 TLS 加密从将客户端到 loadbalancer 的 channel：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Ingress&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">no&lt;/span>-&lt;span class="l">rules-map&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">secretName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">testsecret&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">s1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>请注意，各种 Ingress controller 支持的 TLS 功能之间存在差距。请参阅有关 &lt;a href="https://git.k8s.io/ingress-nginx/README.md#https" target="_blank" rel="noopener">nginx&lt;/a>，&lt;a href="https://git.k8s.io/ingress-gce/README.md#frontend-https" target="_blank" rel="noopener">GCE&lt;/a> 或任何其他平台特定 Ingress controller 的文档，以了解 TLS 在你的环境中的工作原理。&lt;/p>
&lt;p>Ingress controller 启动时附带一些适用于所有 Ingress 的负载平衡策略设置，例如负载均衡算法，后端权重方案等。更高级的负载平衡概念（例如持久会话，动态权重）尚未在 Ingress 中公开。你仍然可以通过 service loadbalancer 获取这些功能。随着时间的推移，我们计划将适用于跨平台的负载平衡模式加入到 Ingress 资源中。&lt;/p>
&lt;p>还值得注意的是，尽管健康检查不直接通过 Ingress 公开，但 Kubernetes 中存在并行概念，例如 &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/" target="_blank" rel="noopener">准备探查&lt;/a>，可以使你达成相同的最终结果。请查看特定控制器的文档，以了解他们如何处理健康检查（&lt;a href="https://git.k8s.io/ingress-nginx/README.md" target="_blank" rel="noopener">nginx&lt;/a>，&lt;a href="https://git.k8s.io/ingress-gce/README.md#health-checks" target="_blank" rel="noopener">GCE&lt;/a>）。&lt;/p>
&lt;h2 id="更新-ingress">更新 Ingress&lt;/h2>
&lt;p>假如你想要向已有的 ingress 中增加一个新的 Host，你可以编辑和更新该 ingress：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get ing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME RULE BACKEND ADDRESS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">test&lt;/span> - 178.91.123.132
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foo.bar.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /foo s1:80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl edit ing &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这会弹出一个包含已有的 yaml 文件的编辑器，修改它，增加新的 Host 配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">rules&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">foo.bar.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">s1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/foo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">bar.baz.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">http&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">paths&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">backend&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">s2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">servicePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/foo&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">..&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存它会更新 API server 中的资源，这会触发 ingress controller 重新配置 loadbalancer。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get ing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME RULE BACKEND ADDRESS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">test&lt;/span> - 178.91.123.132
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> foo.bar.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /foo s1:80
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> bar.baz.com
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> /foo s2:80
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在一个修改过的 ingress yaml 文件上调用&lt;code>kubectl replace -f&lt;/code> 命令一样可以达到同样的效果。&lt;/p>
&lt;h2 id="跨可用域故障">跨可用域故障&lt;/h2>
&lt;p>在不同云供应商之间，跨故障域的流量传播技术有所不同。有关详细信息，请查看相关 Ingress controller 的文档。有关在 federation 集群中部署 Ingress 的详细信息，请参阅 federation 文档。&lt;/p>
&lt;h2 id="未来计划">未来计划&lt;/h2>
&lt;ul>
&lt;li>多样化的 HTTPS/TLS 模型支持（如 SNI，re-encryption）&lt;/li>
&lt;li>通过声明来请求 IP 或者主机名&lt;/li>
&lt;li>结合 L4 和 L7 Ingress&lt;/li>
&lt;li>更多的 Ingress controller&lt;/li>
&lt;/ul>
&lt;p>请跟踪 &lt;a href="https://github.com/kubernetes/kubernetes/pull/12827" target="_blank" rel="noopener">L7 和 Ingress 的 proposal&lt;/a>，了解有关资源演进的更多细节，以及 &lt;a href="https://github.com/kubernetes/ingress/tree/master" target="_blank" rel="noopener">Ingress repository&lt;/a>，了解有关各种 Ingress controller 演进的更多详细信息。&lt;/p>
&lt;h2 id="替代方案">替代方案&lt;/h2>
&lt;p>你可以通过很多种方式暴露 service 而不必直接使用 ingress：&lt;/p>
&lt;ul>
&lt;li>使用 &lt;a href="https://kubernetes.io/docs/user-guide/services/#type-loadbalancer" target="_blank" rel="noopener">Service.Type=LoadBalancer&lt;/a>&lt;/li>
&lt;li>使用 &lt;a href="https://kubernetes.io/docs/user-guide/services/#type-nodeport" target="_blank" rel="noopener">Service.Type=NodePort&lt;/a>&lt;/li>
&lt;li>使用 &lt;a href="https://git.k8s.io/contrib/for-demos/proxy-to-service" target="_blank" rel="noopener">Port Proxy&lt;/a>&lt;/li>
&lt;li>部署一个 &lt;a href="https://github.com/kubernetes/contrib/tree/master/service-loadbalancer" target="_blank" rel="noopener">Service loadbalancer&lt;/a> 这允许你在多个 service 之间共享单个 IP，并通过 Service Annotations 实现更高级的负载平衡。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">Kubernetes Ingress Resource - kubernetes.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://dockone.io/article/957" target="_blank" rel="noopener">使用 NGINX Plus 负载均衡 Kubernetes 服务 - dockone.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://www.cnblogs.com/276815076/p/6407101.html" target="_blank" rel="noopener">使用 NGINX 和 NGINX Plus 的 Ingress Controller 进行 Kubernetes 的负载均衡 - cnblogs.com&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>service</title><link>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/service/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/service/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 39
title: Service
date: &amp;ldquo;2022-05-21T00:00:00+08:00&amp;rdquo;
type: book&lt;/h2>
&lt;p>Kubernetes &lt;a href="https://kubernetes.io/docs/user-guide/pods" target="_blank" rel="noopener">&lt;code>Pod&lt;/code>&lt;/a> 是有生命周期的，它们可以被创建，也可以被销毁，然而一旦被销毁生命就永远结束。通过 &lt;a href="https://kubernetes.io/docs/user-guide/replication-controller" target="_blank" rel="noopener">&lt;code>ReplicationController&lt;/code>&lt;/a> 能够动态地创建和销毁 &lt;code>Pod&lt;/code>。每个 &lt;code>Pod&lt;/code> 都会获取它自己的 IP 地址，即使这些 IP 地址不总是稳定可依赖的。这会导致一个问题：在 Kubernetes 集群中，如果一组 &lt;code>Pod&lt;/code>（称为 backend）为其它 &lt;code>Pod&lt;/code> （称为 frontend）提供服务，那么 frontend Pod 该如何发现和连接哪些 backend Pod 呢？&lt;/p>
&lt;h2 id="关于-service">关于 &lt;code>Service&lt;/code>&lt;/h2>
&lt;p>Kubernetes &lt;code>Service&lt;/code> 定义了这样一种抽象：&lt;code>Pod&lt;/code> 的逻辑分组，一种可以访问它们的策略 —— 通常称为微服务。这一组 &lt;code>Pod&lt;/code> 能够被 &lt;code>Service&lt;/code> 访问到，通常是通过 &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors" target="_blank" rel="noopener">&lt;code>Label Selector&lt;/code>&lt;/a>（查看下面了解，为什么可能需要没有 selector 的 &lt;code>Service&lt;/code>）实现的。&lt;/p>
&lt;p>举个例子，假设有一个用于图片处理的运行了三个副本的 backend。这些副本是可互换的 —— frontend 不需要关心它们调用了哪个 backend 副本。然而组成这一组 backend 程序的 &lt;code>Pod&lt;/code> 实际上可能会发生变化，frontend 客户端不应该也没必要知道，而且也不需要跟踪这组 backend 的状态。&lt;code>Service&lt;/code> 定义的抽象能够解耦这种关联。&lt;/p>
&lt;p>对 Kubernetes 集群中的应用，Kubernetes 提供了简单的 &lt;code>Endpoints&lt;/code> API，只要 &lt;code>Service&lt;/code> 中的一组 &lt;code>Pod&lt;/code> 发生变更，应用程序就会被更新。对非 Kubernetes 集群中的应用，Kubernetes 提供了基于 VIP 的网桥的方式访问 &lt;code>Service&lt;/code>，再由 &lt;code>Service&lt;/code> 重定向到 backend &lt;code>Pod&lt;/code>。&lt;/p>
&lt;h2 id="定义-service">定义 Service&lt;/h2>
&lt;p>一个 &lt;code>Service&lt;/code> 在 Kubernetes 中是一个 REST 对象，和 &lt;code>Pod&lt;/code> 类似。
像所有的 REST 对象一样， &lt;code>Service&lt;/code> 定义可以基于 POST 方式，请求 apiserver 创建新的实例。&lt;/p>
&lt;p>例如，假定有一组 &lt;code>Pod&lt;/code>，它们对外暴露了 9376 端口，同时还被打上 &lt;code>&amp;quot;app=MyApp&amp;quot;&lt;/code> 标签。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MyApp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9376&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述配置将创建一个名称为 “my-service” 的 &lt;code>Service&lt;/code> 对象，它会将请求代理到 9376 TCP 端口，具有标签 &lt;code>&amp;quot;app=MyApp&amp;quot;&lt;/code> 的 &lt;code>Pod&lt;/code> 上。这个 &lt;code>Service&lt;/code> 将被指派一个 IP 地址（通常称为 “Cluster IP”），它会被服务的代理使用（见下面）。该 &lt;code>Service&lt;/code> 的 selector 将会持续评估，处理结果将被 POST 到一个名称为 “my-service” 的 &lt;code>Endpoints&lt;/code> 对象上。&lt;/p>
&lt;p>需要注意的是， &lt;code>Service&lt;/code> 能够将一个接收端口映射到任意的 &lt;code>targetPort&lt;/code>。默认情况下，&lt;code>targetPort&lt;/code> 将被设置为与 &lt;code>port&lt;/code> 字段相同的值。&lt;code>targetPort&lt;/code> 可以是一个字符串，引用了 backend &lt;code>Pod&lt;/code> 的端口的名称。但是，实际指派给该端口名称的端口号，在每个 backend &lt;code>Pod&lt;/code> 中可能并不相同。对于部署和设计 &lt;code>Service&lt;/code> ，这种方式会提供更大的灵活性。例如，可以在 backend 软件下一个版本中，修改 Pod 暴露的端口，并不会中断客户端的调用。&lt;/p>
&lt;p>Kubernetes &lt;code>Service&lt;/code> 支持 &lt;code>TCP&lt;/code> 和 &lt;code>UDP&lt;/code> 协议，默认为 &lt;code>TCP&lt;/code> 协议。&lt;/p>
&lt;h3 id="没有-selector-的-service">没有 selector 的 Service&lt;/h3>
&lt;p>Service 抽象了该如何访问 Kubernetes &lt;code>Pod&lt;/code>，但也能够抽象其它类型的 backend，例如：&lt;/p>
&lt;ul>
&lt;li>希望在生产环境中使用外部的数据库集群，但测试环境使用自己的数据库。&lt;/li>
&lt;li>希望服务指向另一个 &lt;a href="https://kubernetes.io/docs/user-guide/namespaces" target="_blank" rel="noopener">&lt;code>Namespace&lt;/code>&lt;/a> 中或其它集群中的服务。&lt;/li>
&lt;li>正在将工作负载转移到 Kubernetes 集群，和运行在 Kubernetes 集群之外的 backend。&lt;/li>
&lt;/ul>
&lt;p>在任何这些场景中，都能够定义没有 selector 的 &lt;code>Service&lt;/code> ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9376&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于这个 &lt;code>Service&lt;/code> 没有 selector，就不会创建相关的 &lt;code>Endpoints&lt;/code> 对象。可以手动将 &lt;code>Service&lt;/code> 映射到指定的 &lt;code>Endpoints&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Endpoints&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">subsets&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">addresses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">ip&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1.2.3.4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9376&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：Endpoint IP 地址不能是 loopback（127.0.0.0/8）、 link-local（169.254.0.0/16）、或者 link-local 多播（224.0.0.0/24）。&lt;/p>
&lt;p>访问没有 selector 的 &lt;code>Service&lt;/code>，与有 selector 的 &lt;code>Service&lt;/code> 的原理相同。请求将被路由到用户定义的 Endpoint（该示例中为 &lt;code>1.2.3.4:9376&lt;/code>）。&lt;/p>
&lt;p>ExternalName &lt;code>Service&lt;/code> 是 &lt;code>Service&lt;/code> 的特例，它没有 selector，也没有定义任何的端口和 Endpoint。相反地，对于运行在集群外部的服务，它通过返回该外部服务的别名这种方式来提供服务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ExternalName&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">externalName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my.database.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当查询主机 &lt;code>my-service.prod.svc.CLUSTER&lt;/code>时，集群的 DNS 服务将返回一个值为 &lt;code>my.database.example.com&lt;/code> 的 &lt;code>CNAME&lt;/code> 记录。访问这个服务的工作方式与其它的相同，唯一不同的是重定向发生在 DNS 层，而且不会进行代理或转发。如果后续决定要将数据库迁移到 Kubernetes 集群中，可以启动对应的 Pod，增加合适的 Selector 或 Endpoint，修改 &lt;code>Service&lt;/code> 的 &lt;code>type&lt;/code>。&lt;/p>
&lt;h2 id="vip-和-service-代理">VIP 和 Service 代理&lt;/h2>
&lt;p>在 Kubernetes 集群中，每个 Node 运行一个 &lt;code>kube-proxy&lt;/code> 进程。&lt;code>kube-proxy&lt;/code> 负责为 &lt;code>Service&lt;/code> 实现了一种 VIP（虚拟 IP）的形式，而不是 &lt;code>ExternalName&lt;/code> 的形式。&lt;/p>
&lt;p>在 Kubernetes v1.0 版本，代理完全在 userspace，&lt;code>Service&lt;/code> 是 “4 层”（TCP/UDP over IP）概念。&lt;/p>
&lt;p>在 Kubernetes v1.1 版本，新增了 iptables 代理，但并不是默认的运行模式。新增了 &lt;code>Ingress&lt;/code> API（beta 版），用来表示 “7 层”（HTTP）服务。&lt;/p>
&lt;p>从 Kubernetes v1.2 起，默认就是 iptables 代理。&lt;/p>
&lt;p>在 Kubernetes v1.8.0-beta.0 中，添加了 ipvs 代理。&lt;/p>
&lt;h3 id="userspace-代理模式">userspace 代理模式&lt;/h3>
&lt;p>这种模式，kube-proxy 会监视 Kubernetes master 对 &lt;code>Service&lt;/code> 对象和 &lt;code>Endpoints&lt;/code> 对象的添加和移除。
对每个 &lt;code>Service&lt;/code>，它会在本地 Node 上打开一个端口（随机选择）。&lt;/p>
&lt;p>任何连接到“代理端口”的请求，都会被代理到 &lt;code>Service&lt;/code> 的 backend &lt;code>Pods&lt;/code> 中的某个上面（如 &lt;code>Endpoints&lt;/code> 所报告的一样）。
使用哪个 backend &lt;code>Pod&lt;/code>，是基于 &lt;code>Service&lt;/code> 的 &lt;code>SessionAffinity&lt;/code> 来确定的。&lt;/p>
&lt;p>最后，它安装 iptables 规则，捕获到达该 &lt;code>Service&lt;/code> 的 &lt;code>clusterIP&lt;/code>（是虚拟 IP）和 &lt;code>Port&lt;/code> 的请求，并重定向到代理端口，代理端口再代理请求到 backend &lt;code>Pod&lt;/code>。&lt;/p>
&lt;p>网络返回的结果是，任何到达 &lt;code>Service&lt;/code> 的 IP:Port 的请求，都会被代理到一个合适的 backend，不需要客户端知道关于 Kubernetes、&lt;code>Service&lt;/code>、或 &lt;code>Pod&lt;/code> 的任何信息。&lt;/p>
&lt;p>默认的策略是，通过 round-robin 算法来选择 backend &lt;code>Pod&lt;/code>。
实现基于客户端 IP 的会话亲和性，可以通过设置 &lt;code>service.spec.sessionAffinity&lt;/code> 的值为 &lt;code>&amp;quot;ClientIP&amp;quot;&lt;/code> （默认值为 &lt;code>&amp;quot;None&amp;quot;&lt;/code>）。&lt;/p>
&lt;p>
&lt;figure id="figure-userspace代理模式下service概览图">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/services-userspace-overview.jpg" alt="userspace代理模式下Service概览图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
userspace代理模式下Service概览图
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h3 id="iptables-代理模式">iptables 代理模式&lt;/h3>
&lt;p>这种模式，kube-proxy 会监视 Kubernetes master 对 &lt;code>Service&lt;/code> 对象和 &lt;code>Endpoints&lt;/code> 对象的添加和移除。
对每个 &lt;code>Service&lt;/code>，它会安装 iptables 规则，从而捕获到达该 &lt;code>Service&lt;/code> 的 &lt;code>clusterIP&lt;/code>（虚拟 IP）和端口的请求，进而将请求重定向到 &lt;code>Service&lt;/code> 的一组 backend 中的某个上面。对于每个 &lt;code>Endpoints&lt;/code> 对象，它也会安装 iptables 规则，这个规则会选择一个 backend &lt;code>Pod&lt;/code>。&lt;/p>
&lt;p>默认的策略是，随机选择一个 backend。实现基于客户端 IP 的会话亲和性，可以将 &lt;code>service.spec.sessionAffinity&lt;/code> 的值设置为 &lt;code>&amp;quot;ClientIP&amp;quot;&lt;/code> （默认值为 &lt;code>&amp;quot;None&amp;quot;&lt;/code>）。&lt;/p>
&lt;p>和 userspace 代理类似，网络返回的结果是，任何到达 &lt;code>Service&lt;/code> 的 IP:Port 的请求，都会被代理到一个合适的 backend，不需要客户端知道关于 Kubernetes、&lt;code>Service&lt;/code>、或 &lt;code>Pod&lt;/code> 的任何信息。&lt;/p>
&lt;p>这应该比 userspace 代理更快、更可靠。然而，不像 userspace 代理，如果初始选择的 &lt;code>Pod&lt;/code> 没有响应，iptables 代理不能自动地重试另一个 &lt;code>Pod&lt;/code>，所以它需要依赖 &lt;a href="https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#defining-readiness-probes" target="_blank" rel="noopener">readiness probes&lt;/a>。&lt;/p>
&lt;p>
&lt;figure id="figure-iptables代理模式下service概览图">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/services-iptables-overview.jpg" alt="iptables代理模式下Service概览图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
iptables代理模式下Service概览图
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h3 id="ipvs-代理模式">ipvs 代理模式&lt;/h3>
&lt;p>这种模式，kube-proxy 会监视 Kubernetes &lt;code>Service&lt;/code>对象和&lt;code>Endpoints&lt;/code>，调用&lt;code>netlink&lt;/code>接口以相应地创建 ipvs 规则并定期与 Kubernetes &lt;code>Service&lt;/code>对象和&lt;code>Endpoints&lt;/code>对象同步 ipvs 规则，以确保 ipvs 状态与期望一致。访问服务时，流量将被重定向到其中一个后端 Pod。&lt;/p>
&lt;p>与 iptables 类似，ipvs 基于 netfilter 的 hook 功能，但使用哈希表作为底层数据结构并在内核空间中工作。这意味着 ipvs 可以更快地重定向流量，并且在同步代理规则时具有更好的性能。此外，ipvs 为负载均衡算法提供了更多选项，例如：&lt;/p>
&lt;ul>
&lt;li>&lt;code>rr&lt;/code>：轮询调度&lt;/li>
&lt;li>&lt;code>lc&lt;/code>：最小连接数&lt;/li>
&lt;li>&lt;code>dh&lt;/code>：目标哈希&lt;/li>
&lt;li>&lt;code>sh&lt;/code>：源哈希&lt;/li>
&lt;li>&lt;code>sed&lt;/code>：最短期望延迟&lt;/li>
&lt;li>&lt;code>nq&lt;/code>：  不排队调度&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意：&lt;/strong> ipvs 模式假定在运行 kube-proxy 之前在节点上都已经安装了 IPVS 内核模块。当 kube-proxy 以 ipvs 代理模式启动时，kube-proxy 将验证节点上是否安装了 IPVS 模块，如果未安装，则 kube-proxy 将回退到 iptables 代理模式。&lt;/p>
&lt;p>
&lt;figure id="figure-ipvs代理模式下service概览图">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/service-ipvs-overview.png" alt="ipvs代理模式下Service概览图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
ipvs代理模式下Service概览图
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h2 id="多端口-service">多端口 Service&lt;/h2>
&lt;p>很多 &lt;code>Service&lt;/code> 需要暴露多个端口。对于这种情况，Kubernetes 支持在 &lt;code>Service&lt;/code> 对象中定义多个端口。
当使用多个端口时，必须给出所有的端口的名称，这样 Endpoint 就不会产生歧义，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MyApp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9376&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">https&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">443&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9377&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="选择自己的-ip-地址">选择自己的 IP 地址&lt;/h2>
&lt;p>在 &lt;code>Service&lt;/code> 创建的请求中，可以通过设置 &lt;code>spec.clusterIP&lt;/code> 字段来指定自己的集群 IP 地址。
比如，希望替换一个已经存在的 DNS 条目，或者遗留系统已经配置了一个固定的 IP 且很难重新配置。
用户选择的 IP 地址必须合法，并且这个 IP 地址在 &lt;code>service-cluster-ip-range&lt;/code> CIDR 范围内，这对 API Server 来说是通过一个标识来指定的。
如果 IP 地址不合法，API Server 会返回 HTTP 状态码 422，表示值不合法。&lt;/p>
&lt;h3 id="为何不使用-round-robin-dns">为何不使用 round-robin DNS？&lt;/h3>
&lt;p>一个不时出现的问题是，为什么我们都使用 VIP 的方式，而不使用标准的 round-robin DNS，有如下几个原因：&lt;/p>
&lt;ul>
&lt;li>长久以来，DNS 库都没能认真对待 DNS TTL、缓存域名查询结果&lt;/li>
&lt;li>很多应用只查询一次 DNS 并缓存了结果
&lt;ul>
&lt;li>就算应用和库能够正确查询解析，每个客户端反复重解析造成的负载也是非常难以管理的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>我们尽力阻止用户做那些对他们没有好处的事情，如果很多人都来问这个问题，我们可能会选择实现它。&lt;/p>
&lt;h2 id="服务发现">服务发现&lt;/h2>
&lt;p>Kubernetes 支持 2 种基本的服务发现模式 —— 环境变量和 DNS。&lt;/p>
&lt;h3 id="环境变量">环境变量&lt;/h3>
&lt;p>当 &lt;code>Pod&lt;/code> 运行在 &lt;code>Node&lt;/code> 上，kubelet 会为每个活跃的 &lt;code>Service&lt;/code> 添加一组环境变量。它同时支持 &lt;a href="https://docs.docker.com/userguide/dockerlinks/" target="_blank" rel="noopener">Docker links 兼容&lt;/a> 变量（查看 makeLinkVariables）、简单的 &lt;code>{SVCNAME}_SERVICE_HOST&lt;/code> 和 &lt;code>{SVCNAME}_SERVICE_PORT&lt;/code> 变量，这里 &lt;code>Service&lt;/code> 的名称需大写，横线被转换成下划线。&lt;/p>
&lt;p>举个例子，一个名称为 &lt;code>&amp;quot;redis-master&amp;quot;&lt;/code> 的 Service 暴露了 TCP 端口 6379，同时给它分配了 Cluster IP 地址 10.0.0.11，这个 Service 生成了如下环境变量：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_MASTER_SERVICE_HOST&lt;/span>&lt;span class="o">=&lt;/span>10.0.0.11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_MASTER_SERVICE_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">6379&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_MASTER_PORT&lt;/span>&lt;span class="o">=&lt;/span>tcp://10.0.0.11:6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_MASTER_PORT_6379_TCP&lt;/span>&lt;span class="o">=&lt;/span>tcp://10.0.0.11:6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_MASTER_PORT_6379_TCP_PROTO&lt;/span>&lt;span class="o">=&lt;/span>tcp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_MASTER_PORT_6379_TCP_PORT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">6379&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_MASTER_PORT_6379_TCP_ADDR&lt;/span>&lt;span class="o">=&lt;/span>10.0.0.11
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>这意味着需要有顺序的要求&lt;/em> —— &lt;code>Pod&lt;/code> 想要访问的任何 &lt;code>Service&lt;/code> 必须在 &lt;code>Pod&lt;/code> 自己之前被创建，否则这些环境变量就不会被赋值。DNS 并没有这个限制。&lt;/p>
&lt;h3 id="dns">DNS&lt;/h3>
&lt;p>一个可选（尽管强烈推荐）&lt;a href="http://releases.k8s.io/master/cluster/addons/README.md" target="_blank" rel="noopener">集群插件&lt;/a> 是 DNS 服务器。&lt;/p>
&lt;p>DNS 服务器监视着创建新 &lt;code>Service&lt;/code> 的 Kubernetes API，从而为每一个 &lt;code>Service&lt;/code> 创建一组 DNS 记录。如果整个集群的 DNS 一直被启用，那么所有的 &lt;code>Pod&lt;/code> 应该能够自动对 &lt;code>Service&lt;/code> 进行名称解析。&lt;/p>
&lt;p>例如，有一个名称为 &lt;code>&amp;quot;my-service&amp;quot;&lt;/code> 的 &lt;code>Service&lt;/code>，它在 Kubernetes 集群中名为 &lt;code>&amp;quot;my-ns&amp;quot;&lt;/code> 的 &lt;code>Namespace&lt;/code> 中，为 &lt;code>&amp;quot;my-service.my-ns&amp;quot;&lt;/code> 创建了一条 DNS 记录。&lt;/p>
&lt;p>在名称为 &lt;code>&amp;quot;my-ns&amp;quot;&lt;/code> 的 &lt;code>Namespace&lt;/code> 中的 &lt;code>Pod&lt;/code> 应该能够简单地通过名称查询找到 &lt;code>&amp;quot;my-service&amp;quot;&lt;/code>。在另一个 &lt;code>Namespace&lt;/code> 中的 &lt;code>Pod&lt;/code> 必须限定名称为 &lt;code>&amp;quot;my-service.my-ns&amp;quot;&lt;/code>。这些名称查询的结果是 Cluster IP。&lt;/p>
&lt;p>Kubernetes 也支持对端口名称的 DNS SRV（Service）记录。如果名称为 &lt;code>&amp;quot;my-service.my-ns&amp;quot;&lt;/code> 的 &lt;code>Service&lt;/code> 有一个名为 &lt;code>&amp;quot;http&amp;quot;&lt;/code> 的 &lt;code>TCP&lt;/code> 端口，可以对 &lt;code>&amp;quot;_http._tcp.my-service.my-ns&amp;quot;&lt;/code> 执行 DNS SRV 查询，得到 &lt;code>&amp;quot;http&amp;quot;&lt;/code> 的端口号。&lt;/p>
&lt;p>Kubernetes DNS 服务器是唯一的一种能够访问 &lt;code>ExternalName&lt;/code> 类型的 Service 的方式。&lt;/p>
&lt;p>更多信息可以查看 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/" target="_blank" rel="noopener">DNS Pod 和 Service&lt;/a>。&lt;/p>
&lt;h2 id="headless-service">Headless Service&lt;/h2>
&lt;p>有时不需要或不想要负载均衡，以及单独的 Service IP。遇到这种情况，可以通过指定 Cluster IP（&lt;code>spec.clusterIP&lt;/code>）的值为 &lt;code>&amp;quot;None&amp;quot;&lt;/code> 来创建 &lt;code>Headless&lt;/code> Service。&lt;/p>
&lt;p>这个选项允许开发人员自由寻找他们自己的方式，从而降低与 Kubernetes 系统的耦合性。应用仍然可以使用一种自注册的模式和适配器，对其它需要发现机制的系统能够很容易地基于这个 API 来构建。&lt;/p>
&lt;p>对这类 &lt;code>Service&lt;/code> 并不会分配 Cluster IP，kube-proxy 不会处理它们，而且平台也不会为它们进行负载均衡和路由。DNS 如何实现自动配置，依赖于 &lt;code>Service&lt;/code> 是否定义了 selector。&lt;/p>
&lt;h3 id="配置-selector">配置 Selector&lt;/h3>
&lt;p>对定义了 selector 的 Headless Service，Endpoint 控制器在 API 中创建了 &lt;code>Endpoints&lt;/code> 记录，并且修改 DNS 配置返回 A 记录（地址），通过这个地址直接到达 &lt;code>Service&lt;/code> 的后端 &lt;code>Pod&lt;/code> 上。&lt;/p>
&lt;h3 id="不配置-selector">不配置 Selector&lt;/h3>
&lt;p>对没有定义 selector 的 Headless Service，Endpoint 控制器不会创建 &lt;code>Endpoints&lt;/code> 记录。然而 DNS 系统会查找和配置，无论是：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ExternalName&lt;/code> 类型 Service 的 CNAME 记录
&lt;ul>
&lt;li>记录：与 Service 共享一个名称的任何 &lt;code>Endpoints&lt;/code>，以及所有其它类型&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="发布服务--服务类型">发布服务 —— 服务类型&lt;/h2>
&lt;p>对一些应用（如 Frontend）的某些部分，可能希望通过外部（Kubernetes 集群外部）IP 地址暴露 Service。&lt;/p>
&lt;p>Kubernetes &lt;code>ServiceTypes&lt;/code> 允许指定一个需要的类型的 Service，默认是 &lt;code>ClusterIP&lt;/code> 类型。&lt;/p>
&lt;p>&lt;code>Type&lt;/code> 的取值以及行为如下：&lt;/p>
&lt;ul>
&lt;li>&lt;code>ClusterIP&lt;/code>：通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问，这也是默认的 &lt;code>ServiceType&lt;/code>。&lt;/li>
&lt;li>&lt;code>NodePort&lt;/code>：通过每个 Node 上的 IP 和静态端口（&lt;code>NodePort&lt;/code>）暴露服务。&lt;code>NodePort&lt;/code> 服务会路由到 &lt;code>ClusterIP&lt;/code> 服务，这个 &lt;code>ClusterIP&lt;/code> 服务会自动创建。通过请求 &lt;code>&amp;lt;NodeIP&amp;gt;:&amp;lt;NodePort&amp;gt;&lt;/code>，可以从集群的外部访问一个 &lt;code>NodePort&lt;/code> 服务。&lt;/li>
&lt;li>&lt;code>LoadBalancer&lt;/code>：使用云提供商的负载均衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 &lt;code>NodePort&lt;/code> 服务和 &lt;code>ClusterIP&lt;/code> 服务。&lt;/li>
&lt;li>&lt;code>ExternalName&lt;/code>：通过返回 &lt;code>CNAME&lt;/code> 和它的值，可以将服务映射到 &lt;code>externalName&lt;/code> 字段的内容（例如， &lt;code>foo.bar.example.com&lt;/code>）。
没有任何类型代理被创建，这只有 Kubernetes 1.7 或更高版本的 &lt;code>kube-dns&lt;/code> 才支持。&lt;/li>
&lt;/ul>
&lt;h3 id="nodeport-类型">NodePort 类型&lt;/h3>
&lt;p>如果设置 &lt;code>type&lt;/code> 的值为 &lt;code>&amp;quot;NodePort&amp;quot;&lt;/code>，Kubernetes master 将从给定的配置范围内（默认：30000-32767）分配端口，每个 Node 将从该端口（每个 Node 上的同一端口）代理到 &lt;code>Service&lt;/code>。该端口将通过 &lt;code>Service&lt;/code> 的 &lt;code>spec.ports[*].nodePort&lt;/code> 字段被指定。&lt;/p>
&lt;p>如果需要指定的端口号，可以配置 &lt;code>nodePort&lt;/code> 的值，系统将分配这个端口，否则调用 API 将会失败（比如，需要关心端口冲突的可能性）。&lt;/p>
&lt;p>这可以让开发人员自由地安装他们自己的负载均衡器，并配置 Kubernetes 不能完全支持的环境参数，或者直接暴露一个或多个 Node 的 IP 地址。&lt;/p>
&lt;p>需要注意的是，Service 将能够通过 &lt;code>&amp;lt;NodeIP&amp;gt;:spec.ports[*].nodePort&lt;/code> 和 &lt;code>spec.clusterIp:spec.ports[*].port&lt;/code> 而对外可见。&lt;/p>
&lt;h3 id="loadbalancer-类型">LoadBalancer 类型&lt;/h3>
&lt;p>使用支持外部负载均衡器的云提供商的服务，设置 &lt;code>type&lt;/code> 的值为 &lt;code>&amp;quot;LoadBalancer&amp;quot;&lt;/code>，将为 &lt;code>Service&lt;/code> 提供负载均衡器。负载均衡器是异步创建的，关于被提供的负载均衡器的信息将会通过 &lt;code>Service&lt;/code> 的 &lt;code>status.loadBalancer&lt;/code> 字段被发布出去。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MyApp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9376&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nodePort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">30061&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">clusterIP&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10.0.171.239&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">loadBalancerIP&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">78.11.24.19&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">LoadBalancer&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">loadBalancer&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ingress&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">ip&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">146.148.47.155&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来自外部负载均衡器的流量将直接打到 backend &lt;code>Pod&lt;/code> 上，不过实际它们是如何工作的，这要依赖于云提供商。在这些情况下，将根据用户设置的 &lt;code>loadBalancerIP&lt;/code> 来创建负载均衡器。&lt;/p>
&lt;p>某些云提供商允许设置 &lt;code>loadBalancerIP&lt;/code>。如果没有设置 &lt;code>loadBalancerIP&lt;/code>，将会给负载均衡器指派一个临时 IP。&lt;/p>
&lt;p>如果设置了 &lt;code>loadBalancerIP&lt;/code>，但云提供商并不支持这种特性，那么设置的 &lt;code>loadBalancerIP&lt;/code> 值将会被忽略掉。&lt;/p>
&lt;h2 id="externalname">ExternalName&lt;/h2>
&lt;p>ExternalName 类型的服务将服务映射到一个 DNS 名称，而不是典型的选择器，如 &lt;code>my-service&lt;/code> 或 &lt;code>cassandra&lt;/code>。使用 &lt;code>spec.externalName&lt;/code> 参数指定这些服务。&lt;/p>
&lt;p>例如，这个服务定义将 prod 命名空间中的 &lt;code>my-service&lt;/code> 映射到 &lt;code>my.database.example.com&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">namespace&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">prod&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ExternalName&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">externalName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my.database.example.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：ExternalName 接受 IPv4 地址字符串，但它是由数字组成的 DNS 名称，而不是 IP 地址。类似于 IPv4 地址的 ExternalNames 不能被 CoreDNS 或 ingress-nginx 解析，因为 ExternalName 的目的是指定一个规范的 DNS 名称。要硬编码一个 IP 地址，请考虑使用 Headless Service。&lt;/p>
&lt;p>&lt;strong>警告&lt;/strong>&lt;/p>
&lt;p>对于一些常见的协议，包括 HTTP 和 HTTPS，你使用 ExternalName 可能会有问题。如果使用 ExternalName，那么你集群内的客户端使用的主机名与 ExternalName 引用的名称不同。&lt;/p>
&lt;p>对于使用主机名的协议，这种差异可能导致错误或意外的响应。HTTP 请求将有一个源服务器不承认的 &lt;code>Host: header&lt;/code>，TLS 服务器将不能提供与客户端连接的主机名相匹配的证书。&lt;/p>
&lt;h3 id="外部-ip">外部 IP&lt;/h3>
&lt;p>如果外部的 IP 路由到集群中一个或多个 Node 上，Kubernetes &lt;code>Service&lt;/code> 会被暴露给这些 &lt;code>externalIPs&lt;/code>。通过外部 IP（作为目的 IP 地址）进入到集群，打到 &lt;code>Service&lt;/code> 的端口上的流量，将会被路由到 &lt;code>Service&lt;/code> 的 Endpoint 上。&lt;code>externalIPs&lt;/code> 不会被 Kubernetes 管理，它属于集群管理员的职责范畴。&lt;/p>
&lt;p>根据 &lt;code>Service&lt;/code> 的规定，&lt;code>externalIPs&lt;/code> 可以同任意的 &lt;code>ServiceType&lt;/code> 来一起指定。在下面的例子中，&lt;code>my-service&lt;/code> 可以在 &lt;code>80.11.12.10:80&lt;/code>（外部 IP:端口）上被客户端访问。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">my-service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MyApp&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">targetPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">9376&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">externalIPs&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="m">80.11.12.10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="不足之处">不足之处&lt;/h2>
&lt;p>为 VIP 使用 userspace 代理，将只适合小型到中型规模的集群，不能够扩展到上千 &lt;code>Service&lt;/code> 的大型集群。查看 &lt;a href="http://issue.k8s.io/1107" target="_blank" rel="noopener">最初设计方案&lt;/a> 获取更多细节。&lt;/p>
&lt;p>使用 userspace 代理，隐藏了访问 &lt;code>Service&lt;/code> 的数据包的源 IP 地址。这使得一些类型的防火墙无法起作用。iptables 代理不会隐藏 Kubernetes 集群内部的 IP 地址，但却要求客户端请求必须通过一个负载均衡器或 Node 端口。&lt;/p>
&lt;p>&lt;code>Type&lt;/code> 字段支持嵌套功能 —— 每一层需要添加到上一层里面。不会严格要求所有云提供商（例如，GCE 就没必要为了使一个 &lt;code>LoadBalancer&lt;/code> 能工作而分配一个 &lt;code>NodePort&lt;/code>，但是 AWS 需要 ），但当前 API 是强制要求的。&lt;/p>
&lt;h2 id="未来工作">未来工作&lt;/h2>
&lt;p>未来我们能预见到，代理策略可能会变得比简单的 round-robin 均衡策略有更多细微的差别，比如 master 选举或分片。我们也能想到，某些 &lt;code>Service&lt;/code> 将具有 “真正” 的负载均衡器，这种情况下 VIP 将简化数据包的传输。&lt;/p>
&lt;p>在未来的版本中，Kubernetes 打算改进对 L7（HTTP）&lt;code>Service&lt;/code> 的支持。为 &lt;code>Service&lt;/code> 实现更加灵活的请求进入模式，这些 &lt;code>Service&lt;/code> 包含当前 &lt;code>ClusterIP&lt;/code>、&lt;code>NodePort&lt;/code> 和 &lt;code>LoadBalancer&lt;/code> 模式等。&lt;/p>
&lt;h2 id="关于虚拟-ip-的细节">关于虚拟 IP 的细节&lt;/h2>
&lt;p>对很多想使用 &lt;code>Service&lt;/code> 的人来说，前面的信息应该足够了。然而，有很多内部原理性的内容，还是值去理解的。&lt;/p>
&lt;h3 id="避免冲突">避免冲突&lt;/h3>
&lt;p>Kubernetes 最主要的哲学之一，是用户不应该暴露那些能够导致他们操作失败、但又不是他们的过错的场景。这种场景下，让我们来看一下网络端口 —— 用户不应该必须选择一个端口号，而且该端口还有可能与其他用户的冲突。这就是说，在彼此隔离状态下仍然会出现失败。&lt;/p>
&lt;p>为了使用户能够为他们的 &lt;code>Service&lt;/code> 选择一个端口号，我们必须确保不能有 2 个 &lt;code>Service&lt;/code> 发生冲突。我们可以通过为每个 &lt;code>Service&lt;/code> 分配它们自己的 IP 地址来实现。&lt;/p>
&lt;p>为了保证每个 &lt;code>Service&lt;/code> 被分配到一个唯一的 IP，需要一个内部的分配器能够原子地更新 etcd 中的一个全局分配映射表，这个更新操作要先于创建每一个 &lt;code>Service&lt;/code>。&lt;/p>
&lt;p>为了使 &lt;code>Service&lt;/code> 能够获取到 IP，这个映射表对象必须在注册中心存在，否则创建 &lt;code>Service&lt;/code> 将会失败，指示一个 IP 不能被分配。
一个后台 Controller 的职责是创建映射表（从 Kubernetes 的旧版本迁移过来，旧版本中是通过在内存中加锁的方式实现），并检查由于管理员干预和清除任意 IP 造成的不合理分配，这些 IP 被分配了但当前没有 &lt;code>Service&lt;/code> 使用它们。&lt;/p>
&lt;h3 id="ip-和-vip">IP 和 VIP&lt;/h3>
&lt;p>不像 &lt;code>Pod&lt;/code> 的 IP 地址，它实际路由到一个固定的目的地，&lt;code>Service&lt;/code> 的 IP 实际上不能通过单个主机来进行应答。相反，我们使用 &lt;code>iptables&lt;/code>（Linux 中的数据包处理逻辑）来定义一个虚拟 IP 地址（VIP），它可以根据需要透明地进行重定向。当客户端连接到 VIP 时，它们的流量会自动地传输到一个合适的 Endpoint。环境变量和 DNS，实际上会根据 &lt;code>Service&lt;/code> 的 VIP 和端口来进行填充。&lt;/p>
&lt;h4 id="userspace">Userspace&lt;/h4>
&lt;p>作为一个例子，考虑前面提到的图片处理应用程序。&lt;/p>
&lt;p>当创建 backend &lt;code>Service&lt;/code> 时，Kubernetes master 会给它指派一个虚拟 IP 地址，比如 10.0.0.1。假设 &lt;code>Service&lt;/code> 的端口是 1234，该 &lt;code>Service&lt;/code> 会被集群中所有的 &lt;code>kube-proxy&lt;/code> 实例观察到。当代理看到一个新的 &lt;code>Service&lt;/code>， 它会打开一个新的端口，建立一个从该 VIP 重定向到新端口的 iptables，并开始接收请求连接。&lt;/p>
&lt;p>当一个客户端连接到一个 VIP，iptables 规则开始起作用，它会重定向该数据包到 &lt;code>Service代理&lt;/code> 的端口。&lt;code>Service代理&lt;/code> 选择一个 backend，并将客户端的流量代理到 backend 上。&lt;/p>
&lt;p>这意味着 &lt;code>Service&lt;/code> 的所有者能够选择任何他们想使用的端口，而不存在冲突的风险。客户端可以简单地连接到一个 IP 和端口，而不需要知道实际访问了哪些 &lt;code>Pod&lt;/code>。&lt;/p>
&lt;h4 id="iptables">Iptables&lt;/h4>
&lt;p>再次考虑前面提到的图片处理应用程序。&lt;/p>
&lt;p>当创建 backend &lt;code>Service&lt;/code> 时，Kubernetes master 会给它指派一个虚拟 IP 地址，比如 10.0.0.1。假设 &lt;code>Service&lt;/code> 的端口是 1234，该 &lt;code>Service&lt;/code> 会被集群中所有的 &lt;code>kube-proxy&lt;/code> 实例观察到。当代理看到一个新的 &lt;code>Service&lt;/code>， 它会安装一系列的 iptables 规则，从 VIP 重定向到 per-&lt;code>Service&lt;/code> 规则。该 per-&lt;code>Service&lt;/code> 规则连接到 per-&lt;code>Endpoint&lt;/code> 规则，该 per-&lt;code>Endpoint&lt;/code> 规则会重定向（目标 NAT）到 backend。&lt;/p>
&lt;p>当一个客户端连接到一个 VIP，iptables 规则开始起作用。一个 backend 会被选择（或者根据会话亲和性，或者随机），数据包被重定向到这个 backend。&lt;/p>
&lt;p>不像 userspace 代理，数据包从来不拷贝到用户空间，kube-proxy 不是必须为该 VIP 工作而运行，并且客户端 IP 是不可更改的。
当流量打到 Node 的端口上，或通过负载均衡器，会执行相同的基本流程，但是在那些案例中客户端 IP 是可以更改的。&lt;/p>
&lt;h2 id="api-对象">API 对象&lt;/h2>
&lt;p>在 Kubernetes REST API 中，Service 是 top-level 资源。&lt;/p>
&lt;h2 id="更多信息">更多信息&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/tutorials/connecting-apps/connecting-frontend-backend/" target="_blank" rel="noopener">使用 Service 连接 Frontend 到 Backend - kubernetes.io&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>topology-aware-routing</title><link>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/topology-aware-routing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/5.%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0%E4%B8%8E%E8%B7%AF%E7%94%B1/topology-aware-routing/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 40
title: 拓扑感知路由
date: &amp;ldquo;2022-05-21T00:00:00+08:00&amp;rdquo;
type: book&lt;/h2>
&lt;p>&lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/service-topology/" target="_blank" rel="noopener">拓扑感知路由&lt;/a>指的是客户端对一个服务的访问流量，可以根据这个服务的端点拓扑，优先路由到与该客户端在同一个节点或者可用区的端点上的路由行为。&lt;/p>
&lt;h2 id="先决条件">先决条件&lt;/h2>
&lt;p>为了开启服务感知路由，你需要：&lt;/p>
&lt;ul>
&lt;li>开启 &lt;code>TopologyAwareHints&lt;/code> 智能感知提示门控&lt;/li>
&lt;li>开启 EndpointSlice 控制器&lt;/li>
&lt;li>安装 kube-proxy&lt;/li>
&lt;/ul>
&lt;h2 id="端点切片">端点切片&lt;/h2>
&lt;p>我们知道 Endpoint 通常情况下是由 Service 资源自动创建和管理的，但是随着 Kubernetes 集群的规模越来越大和管理的服务越来越多，Endpoint API 的局限性变得越来越明显。&lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/endpoint-slices/" target="_blank" rel="noopener">端点切片&lt;/a>（EndpointSlices）提供了一种简单的方法来跟踪 Kubernetes 集群中的网络端点。它们为 Endpoint 提供了一种可伸缩和可拓展的替代方案，同时还可以被用到拓扑感知路由中。&lt;/p>
&lt;p>EndpointSlices 示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">discovery.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">EndpointSlice&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example-hints&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kubernetes.io/service-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example-svc&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">addressType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IPv4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">endpoints&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">addresses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;10.127.2.3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">conditions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ready&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">nodename&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">node-a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">zone&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zone-a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>EndpointSlice 中的每个端点都可以包含一定的拓扑信息。拓扑信息包括端点的位置，对应节点、可用区的信息。这些信息体现为 EndpointSlices 的如下端点字段：&lt;/p>
&lt;ul>
&lt;li>&lt;code>nodeName&lt;/code> - 端点所在的 Node 名称&lt;/li>
&lt;li>&lt;code>zone&lt;/code> - 端点所处的可用区&lt;/li>
&lt;li>&lt;code>hostname&lt;/code> - 端点的 pod 名称&lt;/li>
&lt;/ul>
&lt;h2 id="启用拓扑感知">启用拓扑感知&lt;/h2>
&lt;p>请启用 kube-apiserver、kube-controller-manager、和 kube-proxy 的&lt;a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/feature-gates/" target="_blank" rel="noopener">特性门控&lt;/a> &lt;code>TopologyAwareHints&lt;/code>。通过把 Service 中的注解 &lt;code>service.kubernetes.io/topology-aware-hints&lt;/code> 的值设置为 &lt;code>auto&lt;/code>， 来激活服务的拓扑感知提示功能。这告诉 EndpointSlice 控制器在它认为安全的时候来设置拓扑提示。kube-proxy 组件依据 EndpointSlice 控制器设置的提示，过滤由它负责路由的端点。&lt;/p>
&lt;p>由 EndpointSlice 控制器提供提示信息后 EndpointSlice 的示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">discovery.k8s.io/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">EndpointSlice&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example-hints&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">kubernetes.io/service-name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">example-svc&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">addressType&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">IPv4&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">http&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">TCP&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">endpoints&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">addresses&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;10.1.2.3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">conditions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ready&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hostname&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pod-1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">zone&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zone-a&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">hints&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">forZones&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;zone-a&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们看到其中已注入了 &lt;code>hints&lt;/code> 信息，对于上面这个示例，&lt;code>zone-a&lt;/code> 的客户端访问会优先路由到该端点上。&lt;/p>
&lt;h2 id="管理">管理&lt;/h2>
&lt;p>在大多数场合下，EndpointSlice 都由某个 Service 所有，因为端点切片正是为该服务跟踪记录其端点。这一属主关系是通过为每个 EndpointSlice 设置一个 属主（owner）引用，同时设置 &lt;code>kubernetes.io/service-name&lt;/code> 标签来标明的， 目的是方便查找隶属于某服务的所有 EndpointSlice。&lt;/p>
&lt;p>控制面（尤其是端点切片的&lt;a href="https://kubernetes.io/zh/docs/concepts/architecture/controller/" target="_blank" rel="noopener">控制器&lt;/a>） 会创建和管理 EndpointSlice 对象。EndpointSlice 对象还有一些其他使用场景， 例如作为服务网格（Service Mesh）的实现。这些场景都会导致有其他实体 或者控制器负责管理额外的 EndpointSlice 集合。&lt;/p>
&lt;p>为了确保多个实体可以管理 EndpointSlice 而且不会相互产生干扰，Kubernetes 定义了&lt;a href="https://kubernetes.io/zh/docs/concepts/overview/working-with-objects/labels/" target="_blank" rel="noopener">标签&lt;/a> &lt;code>endpointslice.kubernetes.io/managed-by&lt;/code>，用来标明哪个实体在管理某个 EndpointSlice。端点切片控制器会在自己所管理的所有 EndpointSlice 上将该标签值设置 为 &lt;code>endpointslice-controller.k8s.io&lt;/code>。管理 EndpointSlice 的其他实体也应该为此标签设置一个唯一值。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/service-topology/" target="_blank" rel="noopener">使用拓扑键实现拓扑感知的流量路由 - kubernetes.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/endpoint-slices/" target="_blank" rel="noopener">端点切片 - kubernetes.io&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://kubernetes.io/zh/docs/concepts/services-networking/topology-aware-hints/" target="_blank" rel="noopener">拓扑感知提示 - kubernetes.io&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>