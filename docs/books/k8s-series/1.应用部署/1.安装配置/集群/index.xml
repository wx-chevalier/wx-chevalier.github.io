<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>集群 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/k8s-series/1.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E9%9B%86%E7%BE%A4/</link><atom:link href="https://ng-tech.icu/books/k8s-series/1.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E9%9B%86%E7%BE%A4/index.xml" rel="self" type="application/rss+xml"/><description>集群</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>集群</title><link>https://ng-tech.icu/books/k8s-series/1.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E9%9B%86%E7%BE%A4/</link></image><item><title>Rancher 搭建集群</title><link>https://ng-tech.icu/books/k8s-series/1.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E9%9B%86%E7%BE%A4/rancher-%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/1.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E9%9B%86%E7%BE%A4/rancher-%E6%90%AD%E5%BB%BA%E9%9B%86%E7%BE%A4/</guid><description>&lt;h1 id="使用-rancher-部署-k8s-集群">使用 Rancher 部署 K8S 集群&lt;/h1>
&lt;p>使用 Rancher 可以自动和可视化的完成 Kubernetes 集群的安装工作，省去的繁琐的人工安装过程，然您快速投入的业务开发中。&lt;/p>
&lt;h1 id="准备">准备&lt;/h1>
&lt;p>要想使用阿里云 ECS 和 Rancher 直接搭建一套 Kubernetes 集群，需要准备以下条件：&lt;/p>
&lt;ul>
&lt;li>开通了公网 IP 的 ECS&lt;/li>
&lt;li>ECS 规格建议至少 4C8G&lt;/li>
&lt;li>ECS 使用的阿里云的经典网络&lt;/li>
&lt;li>为 ECS 设置安全组规则，开放 UDP/8472 端口（阿里云默认禁止了 UDP，我们使用的 flannel 网络插件的 VXLAN 模式，需要将 ECS 的安全组设置 UDP/8472 端口开放）&lt;/li>
&lt;/ul>
&lt;h1 id="步骤">步骤&lt;/h1>
&lt;p>假设现在我们有两个节点 master 和 node，请参考 &lt;a href="https://rancher.com/docs/rancher/v2.x/en/quick-start-guide/deployment/quickstart-manual-setup/" target="_blank" rel="noopener">Rancher Quick Start Guide&lt;/a> 安装 Rancher。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ docker run -d --restart&lt;span class="o">=&lt;/span>unless-stopped -p 80:80 -p 443:443 rancher/rancher
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/4dFXp2Rw/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="master">Master&lt;/h2>
&lt;p>先在 Master 节点安装 Rancher server、control、etcd 和 worker。选择网络组件为 Flannel，同时在自定义主机运行命令中选择主机角色、填写主机的内网和外网 IP。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/7hFDWC62/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>我们需要将脚本复制到对应的机器上运行，然后 Rancher 将自动创建 Kubernetes 集群，并默认在 80 端口运行 Web Server。&lt;/p>
&lt;h2 id="node">Node&lt;/h2>
&lt;p>添加 Node 节点时只需要在 Rancher 的 Web 界面上找到您刚安装的集群并选择【编辑集群】并选择节点角色为 Worker 即可增加一台 Kubenretes 集群节点。&lt;/p>
&lt;h1 id="集群交互">集群交互&lt;/h1>
&lt;p>安装完毕后，可以查看到当前节点的状态信息：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/jjtqTJh6/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>如果您习惯使用命令行与集群交互可以 Rancher 的 web 上找到集群首页上的 &lt;code>Kubeconfig File&lt;/code> 下载按钮，将该文件中的内容保存到您自己电脑的 &lt;code>~/.kube/config&lt;/code> 文件中。然后现在对应 Kubernetes 版本的 &lt;code>kubectl&lt;/code> 命令并放到 &lt;code>PATH&lt;/code> 路径下即可。如果您没有在本地安装 &lt;code>kubectl&lt;/code> 工具，也可以通过 Rancher 的集群页面上的 &lt;code>Launch kubectl&lt;/code> 命令通过 web 来操作集群。&lt;/p>
&lt;h1 id="helm">Helm&lt;/h1>
&lt;p>Helm 是由 Deis 发起的一个开源工具，有助于简化部署和管理 Kubernetes 应用。在本章的实践中，我们也会使用 Helm 来简化很多应用的安装操作。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/HkrFs1Cb/image.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在 Linux 中可以使用 Snap 安装 Heml：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ sudo snap install helm --classic
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 通过键入如下命令，在 Kubernetes 群集上安装 Tiller&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm init --upgrade
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在缺省配置下，Helm 会利用 &amp;ldquo;gcr.io/kubernetes-helm/tiller&amp;rdquo; 镜像在 Kubernetes 集群上安装配置 Tiller；并且利用 &amp;ldquo;&lt;a href="https://kubernetes-charts.storage.googleapis.com" target="_blank" rel="noopener">https://kubernetes-charts.storage.googleapis.com&lt;/a>&amp;rdquo; 作为缺省的 stable repository 的地址。由于在国内可能无法访问 &amp;ldquo;gcr.io&amp;rdquo;, &amp;ldquo;storage.googleapis.com&amp;rdquo; 等域名，阿里云容器服务为此提供了镜像站点。请执行如下命令利用阿里云的镜像来配置 Helm：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.5.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除默认的源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm repo remove stable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置 Helm 命令自动补全&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">source&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>helm completion zsh&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">source&lt;/span> &amp;lt;&lt;span class="o">(&lt;/span>helm completion bash&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 增加新的国内镜像源&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm repo add stable https://burdenbear.github.io/kube-charts-mirror/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm repo add stable https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 Helm 源添加情况&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm repo list
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Helm 的常见命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看在存储库中可用的所有 Helm Charts&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm search
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 更新 Charts 列表以获取最新版本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm repo update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 部署某个本地 Chart，指定命名空间与额外的配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm install --namespace ufc --name ufc-dev -f ./deployment/ufc/dev-values.yaml ./charts/ufc/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看某个 Chart 的变量&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm inspect values stable/mysql
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看在群集上安装的 Charts 列表&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除某个 Charts 的部署&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ helm del --purge wordpress-test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 为 Tiller 部署添加授权&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl create serviceaccount --namespace kube-system tiller
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl create clusterrolebinding tiller-cluster-rule --clusterrole&lt;span class="o">=&lt;/span>cluster-admin --serviceaccount&lt;span class="o">=&lt;/span>kube-system:tiller
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch deploy --namespace kube-system tiller-deploy -p &lt;span class="s1">&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;template&amp;#34;:{&amp;#34;spec&amp;#34;:{&amp;#34;serviceAccount&amp;#34;:&amp;#34;tiller&amp;#34;}}}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://blog.51cto.com/13941177/2165668" target="_blank" rel="noopener">https://blog.51cto.com/13941177/2165668&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Ubuntu 集群搭建</title><link>https://ng-tech.icu/books/k8s-series/1.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E9%9B%86%E7%BE%A4/ubuntu-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/1.%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/1.%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E9%9B%86%E7%BE%A4/ubuntu-%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</guid><description>&lt;h1 id="基于-ubuntu-的-kubernetes-集群搭建">基于 Ubuntu 的 Kubernetes 集群搭建&lt;/h1>
&lt;p>推荐首先使用 &lt;a href="https://kubernetes.io/docs/tasks/tools/install-minikube/" target="_blank" rel="noopener">Minikube&lt;/a> 搭建简单的本地化集群，其需要依次安装 &lt;a href="https://www.virtualbox.org/wiki/Downloads" target="_blank" rel="noopener">VirtualBox&lt;/a>, &lt;a href="https://kubernetes.io/docs/tasks/tools/install-kubectl/" target="_blank" rel="noopener">kubectl&lt;/a> 以及 &lt;a href="https://github.com/kubernetes/minikube/releases" target="_blank" rel="noopener">minikube&lt;/a> 等工具；在生产环境下，我们常常需要离线安装，此时可以参考&lt;a href="https://parg.co/AT5" target="_blank" rel="noopener">离线安装 K8S&lt;/a>。&lt;/p>
&lt;h1 id="镜像解析">镜像解析&lt;/h1>
&lt;p>首先添加 Docker 官方的国内镜像：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">sudo tee /etc/docker/daemon.json &lt;span class="s">&amp;lt;&amp;lt;-&amp;#39;EOF&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s"> &amp;#34;registry-mirrors&amp;#34;: [&amp;#34;https://registry.docker-cn.co&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">}
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>gcr.io 的很多镜像国内不便于访问，有同学将 &lt;a href="https://github.com/anjia0532/gcr.io_mirror" target="_blank" rel="noopener">gcr.io 相关镜像&lt;/a> pull 下来，然后 push 到 docker 官方仓库，相关转换语法如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gcr.io/namespace/image_name:image_tag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 等价于&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">anjia0532/namespace.image_name:image_tag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 特别的&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">k8s.gcr.io/&lt;span class="o">{&lt;/span>image&lt;span class="o">}&lt;/span>/&lt;span class="o">{&lt;/span>tag&lt;span class="o">}&lt;/span> &amp;lt;&lt;span class="o">==&lt;/span>&amp;gt; gcr.io/google-containers/&lt;span class="o">{&lt;/span>image&lt;span class="o">}&lt;/span>/&lt;span class="o">{&lt;/span>tag&lt;span class="o">}&lt;/span> &amp;lt;&lt;span class="o">==&lt;/span>&amp;gt; anjia0532/google-containers.&lt;span class="o">{&lt;/span>image&lt;span class="o">}&lt;/span>/&lt;span class="o">{&lt;/span>tag&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>批量转换的脚本如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># replace gcr.io/google-containers/federation-controller-manager-arm64:v1.3.1-beta.1 to real image&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># this will convert gcr.io/google-containers/federation-controller-manager-arm64:v1.3.1-beta.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># to anjia0532/google-containers.federation-controller-manager-arm64:v1.3.1-beta.1 and pull it&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># k8s.gcr.io/{image}/{tag} &amp;lt;==&amp;gt; gcr.io/google-containers/{image}/{tag} &amp;lt;==&amp;gt; anjia0532/google-containers.{image}/{tag}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">images&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>cat img.txt&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#or&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#images=$(cat &amp;lt;&amp;lt;EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># gcr.io/google-containers/federation-controller-manager-arm64:v1.3.1-beta.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># gcr.io/google-containers/federation-controller-manager-arm64:v1.3.1-beta.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># gcr.io/google-containers/federation-controller-manager-arm64:v1.3.1-beta.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">images&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed &lt;span class="s1">&amp;#39;s/k8s\.gcr\.io/anjia0532\/google-containers/g;s/gcr\.io/anjia0532/g;s/\//\./g;s/ /\n/g;s/anjia0532\./anjia0532\//g&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uniq &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> awk &lt;span class="s1">&amp;#39;{print &amp;#34;docker pull &amp;#34;$1&amp;#34;;&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># this code will retag all of anjia0532&amp;#39;s image from local e.g. anjia0532/google-containers.federation-controller-manager-arm64:v1.3.1-beta.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># to gcr.io/google-containers/federation-controller-manager-arm64:v1.3.1-beta.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># k8s.gcr.io/{image}/{tag} &amp;lt;==&amp;gt; gcr.io/google-containers/{image}/{tag} &amp;lt;==&amp;gt; anjia0532/google-containers.{image}/{tag}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> img in &lt;span class="k">$(&lt;/span>docker images --format &lt;span class="s2">&amp;#34;{{.Repository}}:{{.Tag}}&amp;#34;&lt;/span>&lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;anjia0532&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">img&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span> awk -F&lt;span class="s1">&amp;#39;[/.:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;{printf &amp;#34;gcr.io/%s&amp;#34;,$2}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">img&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span> awk -F&lt;span class="s1">&amp;#39;[/.:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;{printf &amp;#34;/%s&amp;#34;,$3}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">img&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span> awk -F&lt;span class="s1">&amp;#39;[:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;{printf &amp;#34;:%s&amp;#34;,$2}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker tag &lt;span class="nv">$img&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">n&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">image&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">tag&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[[&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">n&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;gcr.io/google-containers&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> docker tag &lt;span class="nv">$img&lt;/span> &lt;span class="s2">&amp;#34;k8s.gcr.io&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">image&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">tag&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="kubelet">kubelet&lt;/h1>
&lt;p>kubeadm 用于搭建并启动一个集群，kubelet 用于集群中所有节点上都有的用于做诸如启动 pod 或容器这种事情，kubectl 则是与集群交互的命令行接口。kubelet 和 kubectl 并不会随 kubeadm 安装而自动安装，需要手工安装。&lt;/p>
&lt;p>在安装 kubeadm 时候，如果碰到需要翻墙的情况，可以使用 USTC 的源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加源并且更新&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ vim /etc/apt/sources.list.d/kubernetes.list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加如下行：&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># deb http://mirrors.ustc.edu.cn/kubernetes/apt/ kubernetes-xenial main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ apt-get update
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ apt-get install -y kubelet kubeadm kubectl --allow-unauthenticated
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ apt-mark hold kubelet kubeadm kubectl
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>配置 cgroup driver, 保证和 docker 的一样:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ docker info &lt;span class="p">|&lt;/span> grep -i cgroup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 编辑配置文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ vim /etc/default/kubelet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加如下配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">KUBELET_KUBEADM_EXTRA_ARGS&lt;/span>&lt;span class="o">=&lt;/span>--cgroup-driver&lt;span class="o">=&lt;/span>&amp;lt;value&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置修改后重启&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ systemctl daemon-reload
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ systemctl restart kubelet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="kubeadm-集群初始化">kubeadm 集群初始化&lt;/h1>
&lt;p>kubeadm 安装完毕后，可以初始化 Master 节点：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubeadm init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果存在网络问题，则可以使用代理访问&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nv">HTTP_PROXY&lt;/span>&lt;span class="o">=&lt;/span>127.0.0.1:8118 &lt;span class="nv">HTTPS_PROXY&lt;/span>&lt;span class="o">=&lt;/span>127.0.0.1:8118 kubeadm init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 接下来我们还需要设置配置文件以最终启动集群&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mkdir -p &lt;span class="nv">$HOME&lt;/span>/.kube
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo cp -i /etc/kubernetes/admin.conf &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo chown &lt;span class="k">$(&lt;/span>id -u&lt;span class="k">)&lt;/span>:&lt;span class="k">$(&lt;/span>id -g&lt;span class="k">)&lt;/span> &lt;span class="nv">$HOME&lt;/span>/.kube/config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者 Root 用户还可以添加如下映射&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">export&lt;/span> &lt;span class="nv">KUBECONFIG&lt;/span>&lt;span class="o">=&lt;/span>/etc/kubernetes/admin.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得一提的是，如果无法通过代理访问，还可以使用国内的镜像数据，可以使用&lt;a href="https://github.com/anjia0532/gcr.io_mirror" target="_blank" rel="noopener">如下脚本&lt;/a>便捷录取墙外镜像:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># credits: https://github.com/anjia0532/gcr.io_mirror&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">images&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>cat img.txt&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">eval&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">images&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sed &lt;span class="s1">&amp;#39;s/k8s\.gcr\.io/anjia0532\/google-containers/g;s/gcr\.io/anjia0532/g;s/\//\./g;s/ /\n/g;s/anjia0532\./anjia0532\//g&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> uniq &lt;span class="p">|&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> awk &lt;span class="s1">&amp;#39;{print &amp;#34;docker pull &amp;#34;$1&amp;#34;;&amp;#34;}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> img in &lt;span class="k">$(&lt;/span>docker images --format &lt;span class="s2">&amp;#34;{{.Repository}}:{{.Tag}}&amp;#34;&lt;/span>&lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;anjia0532&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">n&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">img&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span> awk -F&lt;span class="s1">&amp;#39;[/.:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;{printf &amp;#34;gcr.io/%s&amp;#34;,$2}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">image&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">img&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span> awk -F&lt;span class="s1">&amp;#39;[/.:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;{printf &amp;#34;/%s&amp;#34;,$3}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">tag&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">img&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="p">|&lt;/span> awk -F&lt;span class="s1">&amp;#39;[:]&amp;#39;&lt;/span> &lt;span class="s1">&amp;#39;{printf &amp;#34;:%s&amp;#34;,$2}&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> docker tag &lt;span class="nv">$img&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">n&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">image&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">tag&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">[[&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">n&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="s2">&amp;#34;gcr.io/google-containers&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> docker tag &lt;span class="nv">$img&lt;/span> &lt;span class="s2">&amp;#34;k8s.gcr.io&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">image&lt;/span>&lt;span class="si">}${&lt;/span>&lt;span class="nv">tag&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="kubectl">kubectl&lt;/h1>
&lt;p>Master 节点初始化完毕后，我们需要加入工作节点，或者设置 Master 节点上可调度 Pods&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果是单机节点，要在 Master 机器上调度 Pods，还需解锁 Master 限制&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl taint nodes --all node-role.kubernetes.io/master-
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建并且打印出工作节点加入集群的命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ sudo kubeadm token create --print-join-command
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 Token 列表&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubeadm token list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 工作节点加入集群&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubeadm join --token &amp;lt;token&amp;gt; &amp;lt;master-ip&amp;gt;:&amp;lt;master-port&amp;gt; --discovery-token-ca-cert-hash sha256:&amp;lt;hash&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="网络配置">网络配置&lt;/h1>
&lt;p>我们还需要配置节点间通信的网络:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装 Weave 网络&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f &lt;span class="s2">&amp;#34;https://cloud.weave.works/k8s/net?k8s-version=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl version &lt;span class="p">|&lt;/span> base64 &lt;span class="p">|&lt;/span> tr -d &lt;span class="s1">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者安装 Flannel 网络&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/k8s-manifests/kube-flannel-rbac.yml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以使用自定义的配置文件来配置 K8S 集群，譬如可以手工指定默认网关使用的网络接口，完整配置文件可以参考&lt;a href="https://kubernetes.io/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file" target="_blank" rel="noopener">这里&lt;/a>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">kubeadm.k8s.io/v1alpha1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MasterConfiguration&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">networking&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">podSubnet&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10.244.0.0&lt;/span>&lt;span class="l">/16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c"># 使用 flannel&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以配置 kubernetes-dashboard 作为首个服务:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 安装 Dashboard&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/master/src/deploy/recommended/kubernetes-dashboard.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl proxy --address 0.0.0.0 --accept-hosts &lt;span class="s1">&amp;#39;.*&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># http://localhost:8001/api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>