<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4.控制器 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/</link><atom:link href="https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/index.xml" rel="self" type="application/rss+xml"/><description>4.控制器</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>4.控制器</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/</link></image><item><title>29.Deployment</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/29.deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/29.deployment/</guid><description>&lt;h1 id="deployment">Deployment&lt;/h1>
&lt;p>Deployment 为 Pod 和 ReplicaSet 提供了一个声明式定义（declarative）方法，用来替代以前的 ReplicationController 来方便的管理应用。典型的应用场景包括：&lt;/p>
&lt;ul>
&lt;li>定义 Deployment 来创建 Pod 和 ReplicaSet&lt;/li>
&lt;li>滚动升级和回滚应用&lt;/li>
&lt;li>扩容和缩容&lt;/li>
&lt;li>暂停和继续 Deployment&lt;/li>
&lt;/ul>
&lt;p>比如一个简单的 nginx 应用可以定义为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx-deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.7.9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>扩容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl scale deployment nginx-deployment --replicas &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果集群支持 horizontal pod autoscaling 的话，还可以为 Deployment 设置自动扩展：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl autoscale deployment nginx-deployment --min&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span> --max&lt;span class="o">=&lt;/span>&lt;span class="m">15&lt;/span> --cpu-percent&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更新镜像也比较简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>回滚：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl rollout undo deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deployment-结构示意图">Deployment 结构示意图&lt;/h2>
&lt;p>
&lt;figure id="figure-kubernetes-deployment-cheatsheet">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/deployment-cheatsheet.png" alt="kubernetes deployment cheatsheet" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Kubernetes Deployment Cheatsheet
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h2 id="deployment-是什么">Deployment 是什么？&lt;/h2>
&lt;p>Deployment 为 Pod 和 Replica Set（下一代 Replication Controller）提供声明式更新。&lt;/p>
&lt;p>您只需要在 Deployment 中描述您想要的目标状态是什么，Deployment controller 就会帮您将 Pod 和 ReplicaSet 的实际状态改变到您的目标状态。您可以定义一个全新的 Deployment 来创建 ReplicaSet 或者删除已有的 Deployment 并创建一个新的来替换。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：您不该手动管理由 Deployment 创建的 ReplicaSet，否则您就篡越了 Deployment controller 的职责！下文罗列了 Deployment 对象中已经覆盖了所有的用例。如果未有覆盖您所有需要的用例，请直接在 Kubernetes 的代码库中提 issue。&lt;/p>
&lt;p>典型的用例如下：&lt;/p>
&lt;ul>
&lt;li>使用 Deployment 来创建 ReplicaSet。ReplicaSet 在后台创建 pod。检查启动状态，看它是成功还是失败。&lt;/li>
&lt;li>然后，通过更新 Deployment 的 PodTemplateSpec 字段来声明 Pod 的新状态。这会创建一个新的 ReplicaSet，Deployment 会按照控制的速率将 pod 从旧的 ReplicaSet 移动到新的 ReplicaSet 中。&lt;/li>
&lt;li>如果当前状态不稳定，回滚到之前的 Deployment revision。每次回滚都会更新 Deployment 的 revision。&lt;/li>
&lt;li>扩容 Deployment 以满足更高的负载。&lt;/li>
&lt;li>暂停 Deployment 来应用 PodTemplateSpec 的多个修复，然后恢复上线。&lt;/li>
&lt;li>根据 Deployment 的状态判断上线是否 hang 住了。&lt;/li>
&lt;li>清除旧的不必要的 ReplicaSet。&lt;/li>
&lt;/ul>
&lt;h2 id="创建-deployment">创建 Deployment&lt;/h2>
&lt;p>下面是一个 Deployment 示例，它创建了一个 ReplicaSet 来启动 3 个 nginx pod。&lt;/p>
&lt;p>下载示例文件并执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml --record
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 kubectl 的&lt;code>--record&lt;/code>的 flag 设置为&lt;code>true&lt;/code> 可以在 annotation 中记录当前命令创建或者升级了该资源。这在未来会很有用，例如，查看在每个 Deployment revision 中执行了哪些命令。&lt;/p>
&lt;p>然后立即执行 &lt;code>get&lt;/code> 将获得如下结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 1s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果表明我们希望的 repalica 数是 3（根据 deployment 中的&lt;code>.spec.replicas&lt;/code>配置）当前 replica 数（&lt;code>.status.replicas&lt;/code>）是 0, 最新的 replica 数（&lt;code>.status.updatedReplicas&lt;/code>）是 0，可用的 replica 数（&lt;code>.status.availableReplicas&lt;/code>）是 0。&lt;/p>
&lt;p>过几秒后再执行 &lt;code>get&lt;/code> 命令，将获得如下输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 18s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到 Deployment 已经创建了 3 个 replica，所有的 replica 都已经是最新的了（包含最新的 pod template），可用的（根据 Deployment 中的&lt;code>.spec.minReadySeconds&lt;/code>声明，处于已就绪状态的 pod 的最少个数）。执行&lt;code>kubectl get rs&lt;/code>和&lt;code>kubectl get pods&lt;/code>会显示 Replica Set（RS）和 Pod 已创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">0&lt;/span> 18s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可能会注意到 ReplicaSet 的名字总是&lt;code>&amp;lt;Deployment 的名字&amp;gt;-&amp;lt;pod template 的 hash 值&amp;gt;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pods --show-labels
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE LABELS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211-7ci7o 1/1 Running &lt;span class="m">0&lt;/span> 18s &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx,pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">2035384211&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211-kzszj 1/1 Running &lt;span class="m">0&lt;/span> 18s &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx,pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">2035384211&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211-qqcnn 1/1 Running &lt;span class="m">0&lt;/span> 18s &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx,pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">2035384211&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>刚创建的 Replica Set 将保证总是有 3 个 nginx 的 pod 存在。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>： 您必须在 Deployment 中的 selector 指定正确的 pod template label（在该示例中是 &lt;code>app = nginx&lt;/code>），不要跟其他的 controller 的 selector 中指定的 pod template label 搞混了（包括 Deployment、Replica Set、Replication Controller 等）。&lt;strong>Kubernetes 本身并不会阻止您任意指定 pod template label&lt;/strong>，但是如果您真的这么做了，这些 controller 之间会相互打架，并可能导致不正确的行为。&lt;/p>
&lt;h3 id="pod-template-hash-label">Pod-template-hash label&lt;/h3>
&lt;p>&lt;strong>注意&lt;/strong>：这个 label 不是用户指定的！&lt;/p>
&lt;p>注意上面示例输出中的 pod label 里的 pod-template-hash label。当 Deployment 创建或者接管 ReplicaSet 时，Deployment controller 会自动为 Pod 添加 pod-template-hash label。这样做的目的是防止 Deployment 的子 ReplicaSet 的 pod 名字重复。通过将 ReplicaSet 的 PodTemplate 进行哈希散列，使用生成的哈希值作为 label 的值，并添加到 ReplicaSet selector 里、 pod template label 和 ReplicaSet 管理中的 Pod 上。&lt;/p>
&lt;h2 id="更新-deployment">更新 Deployment&lt;/h2>
&lt;p>&lt;strong>注意&lt;/strong>：Deployment 的 rollout 当且仅当 Deployment 的 pod template（例如 &lt;code>.spec.template&lt;/code>）中的 label 更新或者镜像更改时被触发。其他更新，例如扩容 Deployment 不会触发 rollout。&lt;/p>
&lt;p>假如我们现在想要让 nginx pod 使用 &lt;code>nginx:1.9.1&lt;/code> 的镜像来代替原来的 &lt;code>nginx:1.7.9&lt;/code> 的镜像。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以使用&lt;code>edit&lt;/code>命令来编辑 Deployment，修改&lt;code>.spec.template.spec.containers [0].image&lt;/code>，将&lt;code>nginx:1.7.9&lt;/code>改写成&lt;code>nginx:1.9.1&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl edit deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> edited
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 rollout 的状态，只要执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> out of &lt;span class="m">3&lt;/span> new replicas have been updated...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> successfully rolled out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rollout 成功后，&lt;code>get&lt;/code>Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 36s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>UP-TO-DATE 的 replica 的数目已经达到了配置中要求的数目。&lt;/p>
&lt;p>CURRENT 的 replica 数表示 Deployment 管理的 replica 数量，AVAILABLE 的 replica 数是当前可用的 replica 数量。&lt;/p>
&lt;p>我们通过执行 &lt;code>kubectl get rs&lt;/code> 可以看到 Deployment 更新了 Pod，通过创建一个新的 ReplicaSet 并扩容了 3 个 replica，同时将原来的 ReplicaSet 缩容到了 0 个 replica。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 36s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>get pods&lt;/code>只会看到当前的新的 pod：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pods
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-khku8 1/1 Running &lt;span class="m">0&lt;/span> 14s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-nacti 1/1 Running &lt;span class="m">0&lt;/span> 14s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-z9gth 1/1 Running &lt;span class="m">0&lt;/span> 14s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下次更新这些 pod 的时候，只需要更新 Deployment 中的 pod 的 template 即可。&lt;/p>
&lt;p>Deployment 可以保证在升级时只有一定数量的 Pod 是 down 的。默认的，它会确保至少有比期望的 Pod 数量少一个是 up 状态（最多一个不可用）。&lt;/p>
&lt;p>Deployment 同时也可以确保只创建出超过期望数量的一定数量的 Pod。默认的，它会确保最多比期望的 Pod 数量多一个的 Pod 是 up 的（最多 1 个 surge ）。&lt;/p>
&lt;p>&lt;strong>在未来的 Kuberentes 版本中，将从 1-1 变成 25%-25%。&lt;/strong>&lt;/p>
&lt;p>例如，如果您自己看下上面的 Deployment，您会发现，开始创建一个新的 Pod，然后删除一些旧的 Pod 再创建一个新的。当新的 Pod 创建出来之前不会杀掉旧的 Pod。这样能够确保可用的 Pod 数量至少有 2 个，Pod 的总数最多 4 个。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl describe deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CreationTimestamp: Tue, &lt;span class="m">15&lt;/span> Mar &lt;span class="m">2016&lt;/span> 12:01:06 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selector: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Replicas: &lt;span class="m">3&lt;/span> updated &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> total &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> available &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> unavailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">StrategyType: RollingUpdate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MinReadySeconds: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RollingUpdateStrategy: &lt;span class="m">1&lt;/span> max unavailable, &lt;span class="m">1&lt;/span> max surge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OldReplicaSets: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NewReplicaSet: nginx-deployment-1564180365 &lt;span class="o">(&lt;/span>3/3 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Events:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FirstSeen LastSeen Count From SubobjectPath Type Reason Message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --------- -------- ----- ---- ------------- -------- ------ -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 36s 36s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 23s 23s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 23s 23s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 23s 23s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到当我们刚开始创建这个 Deployment 的时候，创建了一个 ReplicaSet（nginx-deployment-2035384211），并直接扩容到了 3 个 replica。&lt;/p>
&lt;p>当我们更新这个 Deployment 的时候，它会创建一个新的 ReplicaSet（nginx-deployment-1564180365），将它扩容到 1 个 replica，然后缩容原先的 ReplicaSet 到 2 个 replica，此时满足至少 2 个 Pod 是可用状态，同一时刻最多有 4 个 Pod 处于创建的状态。&lt;/p>
&lt;p>接着继续使用相同的 rolling update 策略扩容新的 ReplicaSet 和缩容旧的 ReplicaSet。最终，将会在新的 ReplicaSet 中有 3 个可用的 replica，旧的 ReplicaSet 的 replica 数目变成 0。&lt;/p>
&lt;h3 id="rollover多个-rollout-并行">Rollover（多个 rollout 并行）&lt;/h3>
&lt;p>每当 Deployment controller 观测到有新的 deployment 被创建时，如果没有已存在的 ReplicaSet 来创建期望个数的 Pod 的话，就会创建出一个新的 ReplicaSet 来做这件事。已存在的 ReplicaSet 控制 label 与 &lt;code>.spec.selector&lt;/code> 匹配但是 template 跟 &lt;code>.spec.template&lt;/code> 不匹配的 Pod 缩容。最终，新的 ReplicaSet 将会扩容出 &lt;code>.spec.replicas&lt;/code> 指定数目的 Pod，旧的 ReplicaSet 会缩容到 0。&lt;/p>
&lt;p>如果您更新了一个的已存在并正在进行中的 Deployment，每次更新 Deployment 都会创建一个新的 ReplicaSet 并扩容它，同时回滚之前扩容的 ReplicaSet —— 将它添加到旧的 ReplicaSet 列表中，开始缩容。&lt;/p>
&lt;p>例如，假如您创建了一个有 5 个 &lt;code>niginx:1.7.9&lt;/code> replica 的 Deployment，但是当还只有 3 个 &lt;code>nginx:1.7.9&lt;/code> 的 replica 创建出来的时候您就开始更新含有 5 个 &lt;code>nginx:1.9.1&lt;/code> replica 的 Deployment。在这种情况下，Deployment 会立即杀掉已创建的 3 个 &lt;code>nginx:1.7.9&lt;/code> 的 Pod，并开始创建 &lt;code>nginx:1.9.1&lt;/code> 的 Pod。它不会等到所有的 5 个 &lt;code>nginx:1.7.9&lt;/code> 的 Pod 都创建完成后才开始改变航道。&lt;/p>
&lt;h3 id="label-selector-更新">Label selector 更新&lt;/h3>
&lt;p>我们通常不鼓励更新 label selector，我们建议事先规划好您的 selector。&lt;/p>
&lt;p>任何情况下，只要您想要执行 label selector 的更新，请一定要谨慎并确认您已经预料到所有可能因此导致的后果。&lt;/p>
&lt;ul>
&lt;li>增添 selector 需要同时在 Deployment 的 spec 中更新新的 label，否则将返回校验错误。此更改是不可覆盖的，这意味着新的 selector 不会选择使用旧 selector 创建的 ReplicaSet 和 Pod，从而导致所有旧版本的 ReplicaSet 都被丢弃，并创建新的 ReplicaSet。&lt;/li>
&lt;li>更新 selector，即更改 selector key 的当前值，将导致跟增添 selector 同样的后果。&lt;/li>
&lt;li>删除 selector，即删除 Deployment selector 中的已有的 key，不需要对 Pod template label 做任何更改，现有的 ReplicaSet 也不会成为孤儿，但是请注意，删除的 label 仍然存在于现有的 Pod 和 ReplicaSet 中。&lt;/li>
&lt;/ul>
&lt;h2 id="回退-deployment">回退 Deployment&lt;/h2>
&lt;p>有时候您可能想回退一个 Deployment，例如，当 Deployment 不稳定时，比如一直 crash looping。&lt;/p>
&lt;p>默认情况下，kubernetes 会在系统中保存前两次的 Deployment 的 rollout 历史记录，以便您可以随时回退（您可以修改 &lt;code>revision history limit&lt;/code> 来更改保存的 revision 数）。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：只要 Deployment 的 rollout 被触发就会创建一个 revision。也就是说当且仅当 Deployment 的 Pod template（如 &lt;code>.spec.template&lt;/code>）被更改，例如更新 template 中的 label 和容器镜像时，就会创建出一个新的 revision。&lt;/p>
&lt;p>其他的更新，比如扩容 Deployment 不会创建 revision—— 因此我们可以很方便的手动或者自动扩容。这意味着当您回退到历史 revision 时，只有 Deployment 中的 Pod template 部分才会回退。&lt;/p>
&lt;p>假设我们在更新 Deployment 的时候犯了一个拼写错误，将镜像的名字写成了 &lt;code>nginx:1.91&lt;/code>，而正确的名字应该是 &lt;code>nginx:1.9.1&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.91
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rollout 将会卡住。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deployments nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> out of &lt;span class="m">3&lt;/span> new replicas have been updated...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按住 Ctrl-C 停止上面的 rollout 状态监控。&lt;/p>
&lt;p>您会看到旧的 replica（nginx-deployment-1564180365 和 nginx-deployment-2035384211）和新的 replica （nginx-deployment-3066724191）数目都是 2 个。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">0&lt;/span> 25s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 36s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-3066724191 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 6s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看下创建 Pod，您会看到有两个新的 ReplicaSet 创建的 Pod 处于 ImagePullBackOff 状态，循环拉取镜像。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pods
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-70iae 1/1 Running &lt;span class="m">0&lt;/span> 25s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-jbqqo 1/1 Running &lt;span class="m">0&lt;/span> 25s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-3066724191-08mng 0/1 ImagePullBackOff &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-3066724191-eocby 0/1 ImagePullBackOff &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，Deployment controller 会自动停止坏的 rollout，并停止扩容新的 ReplicaSet。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl describe deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CreationTimestamp: Tue, &lt;span class="m">15&lt;/span> Mar &lt;span class="m">2016&lt;/span> 14:48:04 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selector: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Replicas: &lt;span class="m">2&lt;/span> updated &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> total &lt;span class="p">|&lt;/span> &lt;span class="m">2&lt;/span> available &lt;span class="p">|&lt;/span> &lt;span class="m">2&lt;/span> unavailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">StrategyType: RollingUpdate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MinReadySeconds: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RollingUpdateStrategy: &lt;span class="m">1&lt;/span> max unavailable, &lt;span class="m">1&lt;/span> max surge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OldReplicaSets: nginx-deployment-1564180365 &lt;span class="o">(&lt;/span>2/2 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NewReplicaSet: nginx-deployment-3066724191 &lt;span class="o">(&lt;/span>2/2 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Events:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FirstSeen LastSeen Count From SubobjectPath Type Reason Message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --------- -------- ----- ---- ------------- -------- ------ -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1m 1m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 22s 22s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 22s 22s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 22s 22s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 13s 13s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 13s 13s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 13s 13s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了修复这个问题，我们需要回退到稳定的 Deployment revision。&lt;/p>
&lt;h3 id="检查-deployment-升级的历史记录">检查 Deployment 升级的历史记录&lt;/h3>
&lt;p>首先，检查下 Deployment 的 revision：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout &lt;span class="nb">history&lt;/span> deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployments &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">REVISION CHANGE-CAUSE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> kubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml--record
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">2&lt;/span> kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3&lt;/span> kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.91
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为我们创建 Deployment 的时候使用了&lt;code>--record&lt;/code> 参数可以记录命令，我们可以很方便的查看每次 revision 的变化。&lt;/p>
&lt;p>查看单个 revision 的详细信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout &lt;span class="nb">history&lt;/span> deployment/nginx-deployment --revision&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployments &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> revision &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">1159050644&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Annotations: kubernetes.io/change-cause&lt;span class="o">=&lt;/span>kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Containers:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginx:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Image: nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port: 80/TCP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> QoS Tier:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cpu: BestEffort
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memory: BestEffort
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Environment Variables: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> No volumes.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="回退到历史版本">回退到历史版本&lt;/h3>
&lt;p>现在，我们可以决定回退当前的 rollout 到之前的版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout undo deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> rolled back
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用&lt;code>--revision&lt;/code>参数指定某个历史版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout undo deployment/nginx-deployment --to-revision&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> rolled back
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该 Deployment 现在已经回退到了先前的稳定版本。如您所见，Deployment controller 产生了一个回退到 revison 2 的&lt;code>DeploymentRollback&lt;/code>的 event。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 30m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CreationTimestamp: Tue, &lt;span class="m">15&lt;/span> Mar &lt;span class="m">2016&lt;/span> 14:48:04 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selector: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Replicas: &lt;span class="m">3&lt;/span> updated &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> total &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> available &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> unavailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">StrategyType: RollingUpdate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MinReadySeconds: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RollingUpdateStrategy: &lt;span class="m">1&lt;/span> max unavailable, &lt;span class="m">1&lt;/span> max surge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OldReplicaSets: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NewReplicaSet: nginx-deployment-1564180365 &lt;span class="o">(&lt;/span>3/3 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Events:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FirstSeen LastSeen Count From SubobjectPath Type Reason Message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --------- -------- ----- ---- ------------- -------- ------ -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 30m 30m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2m 2m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2m 2m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal DeploymentRollback Rolled back deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> to revision &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 2m &lt;span class="m">2&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="清理-policy">清理 Policy&lt;/h3>
&lt;p>您可以通过设置 &lt;code>.spec.revisonHistoryLimit&lt;/code> 项来指定 deployment 最多保留多少 revision 历史记录。默认的会保留所有的 revision；如果将该项设置为 0，Deployment 就不允许回退了。&lt;/p>
&lt;h2 id="deployment-扩容">Deployment 扩容&lt;/h2>
&lt;p>您可以使用以下命令扩容 Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl scale deployment nginx-deployment --replicas &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> scaled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设您的集群中启用了 &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough" target="_blank" rel="noopener">horizontal pod autoscaling&lt;/a>，您可以给 Deployment 设置一个 autoscaler，基于当前 Pod 的 CPU 利用率选择最少和最多的 Pod 数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl autoscale deployment nginx-deployment --min&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span> --max&lt;span class="o">=&lt;/span>&lt;span class="m">15&lt;/span> --cpu-percent&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> autoscaled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="比例扩容">比例扩容&lt;/h3>
&lt;p>RollingUpdate Deployment 支持同时运行一个应用的多个版本。或者 autoscaler 扩 容 RollingUpdate Deployment 的时候，正在中途的 rollout（进行中或者已经暂停的），为了降低风险，Deployment controller 将会平衡已存在的活动中的 ReplicaSet（有 Pod 的 ReplicaSet）和新加入的 replica。这被称为比例扩容。&lt;/p>
&lt;p>例如，您正在运行中含有 10 个 replica 的 Deployment。maxSurge=3，maxUnavailable=2。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">10&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="m">10&lt;/span> 50s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您更新了一个镜像，而在集群内部无法解析。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deploy/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:sometag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>镜像更新启动了一个包含 ReplicaSet nginx-deployment-1989198191 的新的 rollout，但是它被阻塞了，因为我们上面提到的 maxUnavailable。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1989198191 &lt;span class="m">5&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">0&lt;/span> 9s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-618515232 &lt;span class="m">8&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">8&lt;/span> 1m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后发起了一个新的 Deployment 扩容请求。autoscaler 将 Deployment 的 repllica 数目增加到了 15 个。Deployment controller 需要判断在哪里增加这 5 个新的 replica。如果我们没有谁用比例扩容，所有的 5 个 replica 都会加到一个新的 ReplicaSet 中。如果使用比例扩容，新添加的 replica 将传播到所有的 ReplicaSet 中。大的部分加入 replica 数最多的 ReplicaSet 中，小的部分加入到 replica 数少的 ReplciaSet 中。0 个 replica 的 ReplicaSet 不会被扩容。&lt;/p>
&lt;p>在我们上面的例子中，3 个 replica 将添加到旧的 ReplicaSet 中，2 个 replica 将添加到新的 ReplicaSet 中。rollout 进程最终会将所有的 replica 移动到新的 ReplicaSet 中，假设新的 replica 成为健康状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">15&lt;/span> &lt;span class="m">18&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> 7m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1989198191 &lt;span class="m">7&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">0&lt;/span> 7m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-618515232 &lt;span class="m">11&lt;/span> &lt;span class="m">11&lt;/span> &lt;span class="m">11&lt;/span> 7m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除-autoscale">删除 autoscale&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl get hpa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl delete hpa &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p"> of hpa&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="暂停和恢复-deployment">暂停和恢复 Deployment&lt;/h2>
&lt;p>您可以在发出一次或多次更新前暂停一个 Deployment，然后再恢复它。这样您就能在 Deployment 暂停期间进行多次修复工作，而不会发出不必要的 rollout。&lt;/p>
&lt;p>例如使用刚刚创建 Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 1m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mkargaki@dhcp129-211 kubernetes&lt;span class="o">]&lt;/span>$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 1m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用以下命令暂停 Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout pause deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> paused
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后更新 Deplyment 中的镜像：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deploy/nginx &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意新的 rollout 启动了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout &lt;span class="nb">history&lt;/span> deploy/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployments &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">REVISION CHANGE-CAUSE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 2m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以进行任意多次更新，例如更新使用的资源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> resources deployment nginx -c&lt;span class="o">=&lt;/span>nginx --limits&lt;span class="o">=&lt;/span>&lt;span class="nv">cpu&lt;/span>&lt;span class="o">=&lt;/span>200m,memory&lt;span class="o">=&lt;/span>512Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> resource requirements updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Deployment 暂停前的初始状态将继续它的功能，而不会对 Deployment 的更新产生任何影响，只要 Deployment 是暂停的。&lt;/p>
&lt;p>最后，恢复这个 Deployment，观察完成更新的 ReplicaSet 已经创建出来了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout resume deploy nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> resumed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ KUBECTL get rs -w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> 19s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 20s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ KUBECTL get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 28s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>：在恢复 Deployment 之前您无法回退一个已经暂停的 Deployment。&lt;/p>
&lt;h2 id="deployment-状态">Deployment 状态&lt;/h2>
&lt;p>Deployment 在生命周期中有多种状态。在创建一个新的 ReplicaSet 的时候它可以是 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#progressing-deployment" target="_blank" rel="noopener">progressing&lt;/a> 状态， &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#complete-deployment" target="_blank" rel="noopener">complete&lt;/a> 状态，或者 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#failed-deployment" target="_blank" rel="noopener">fail to progress&lt;/a> 状态。&lt;/p>
&lt;h3 id="进行中的-deployment">进行中的 Deployment&lt;/h3>
&lt;p>Kubernetes 将执行过下列任务之一的 Deployment 标记为 &lt;em>progressing&lt;/em> 状态：&lt;/p>
&lt;ul>
&lt;li>Deployment 正在创建新的 ReplicaSet 过程中。&lt;/li>
&lt;li>Deployment 正在扩容一个已有的 ReplicaSet。&lt;/li>
&lt;li>Deployment 正在缩容一个已有的 ReplicaSet。&lt;/li>
&lt;li>有新的可用的 pod 出现。&lt;/li>
&lt;/ul>
&lt;p>您可以使用 &lt;code>kubectl rollout status&lt;/code> 命令监控 Deployment 的进度。&lt;/p>
&lt;h3 id="完成的-deployment">完成的 Deployment&lt;/h3>
&lt;p>Kubernetes 将包括以下特性的 Deployment 标记为 &lt;em>complete&lt;/em> 状态：&lt;/p>
&lt;ul>
&lt;li>Deployment 最小可用。最小可用意味着 Deployment 的可用 replica 个数等于或者超过 Deployment 策略中的期望个数。&lt;/li>
&lt;li>所有与该 Deployment 相关的 replica 都被更新到了您指定版本，也就说更新完成。&lt;/li>
&lt;li>该 Deployment 中没有旧的 Pod 存在。&lt;/li>
&lt;/ul>
&lt;p>您可以用 &lt;code>kubectl rollout status&lt;/code> 命令查看 Deployment 是否完成。如果 rollout 成功完成，&lt;code>kubectl rollout status&lt;/code> 将返回一个 0 值的 Exit Code。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deploy/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> of &lt;span class="m">3&lt;/span> updated replicas are available...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> successfully rolled out
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="失败的-deployment">失败的 Deployment&lt;/h3>
&lt;p>您的 Deployment 在尝试部署新的 ReplicaSet 的时候可能卡住，永远也不会完成。这可能是因为以下几个因素引起的：&lt;/p>
&lt;ul>
&lt;li>无效的引用&lt;/li>
&lt;li>不可读的 probe failure&lt;/li>
&lt;li>镜像拉取错误&lt;/li>
&lt;li>权限不够&lt;/li>
&lt;li>范围限制&lt;/li>
&lt;li>程序运行时配置错误&lt;/li>
&lt;/ul>
&lt;p>探测这种情况的一种方式是，在您的 Deployment spec 中指定 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#progress-deadline-seconds" target="_blank" rel="noopener">&lt;code>spec.progressDeadlineSeconds&lt;/code>&lt;/a>。&lt;code>spec.progressDeadlineSeconds&lt;/code> 表示 Deployment controller 等待多少秒才能确定（通过 Deployment status）Deployment 进程是卡住的。&lt;/p>
&lt;p>下面的 &lt;code>kubectl&lt;/code> 命令设置 &lt;code>progressDeadlineSeconds&lt;/code> 使 controller 在 Deployment 在进度卡住 10 分钟后报告：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl patch deployment/nginx-deployment -p &lt;span class="s1">&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;progressDeadlineSeconds&amp;#34;:600}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> patched
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当超过截止时间后，Deployment controller 会在 Deployment 的&lt;code>status.conditions&lt;/code> 中增加一条 DeploymentCondition，它包括如下属性：&lt;/p>
&lt;ul>
&lt;li>Type=Progressing&lt;/li>
&lt;li>Status=False&lt;/li>
&lt;li>Reason=ProgressDeadlineExceeded&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意&lt;/strong>：kubernetes 除了报告 &lt;code>Reason=ProgressDeadlineExceeded&lt;/code> 状态信息外不会对卡住的 Deployment 做任何操作。更高层次的协调器可以利用它并采取相应行动，例如，回滚 Deployment 到之前的版本。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：如果您暂停了一个 Deployment，在暂停的这段时间内 kubernetnes 不会检查您指定的 deadline。您可以在 Deployment 的 rollout 途中安全的暂停它，然后再恢复它，这不会触发超过 deadline 的状态。&lt;/p>
&lt;p>您可能在使用 Deployment 的时候遇到一些短暂的错误，这些可能是由于您设置了太短的 timeout，也有可能是因为各种其他错误导致的短暂错误。例如，假设您使用了无效的引用。当您 Describe Deployment 的时候可能会注意到如下信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl describe deployment nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;...&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type Status Reason
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- ------ ------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Available True MinimumReplicasAvailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Progressing True ReplicaSetUpdated
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaFailure True FailedCreate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;...&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl get deployment nginx-deployment -o yaml&lt;/code>，Deployement 的状态可能看起来像这个样子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">availableReplicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">conditions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lastUpdateTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Replica set &amp;#34;nginx-deployment-4262182780&amp;#34; is progressing.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReplicaSetUpdated&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Progressing&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:42Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lastUpdateTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:42Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment has minimum availability.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MinimumReplicasAvailable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Available&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lastUpdateTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">&amp;#39;Error creating&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pods &amp;#34;nginx-deployment-4262182780-&amp;#34; is forbidden: exceeded quota:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">object-counts, requested: pods=1, used: pods=3, limited&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pods=2&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">FailedCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReplicaFailure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">observedGeneration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">unavailableReplicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终，一旦超过 Deployment 进程的 deadline，kubernetes 会更新状态和导致 Progressing 状态的原因：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type Status Reason
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- ------ ------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Available True MinimumReplicasAvailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Progressing False ProgressDeadlineExceeded
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaFailure True FailedCreate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以通过缩容 Deployment 的方式解决配额不足的问题，或者增加您的 namespace 的配额。如果您满足了配额条件后，Deployment controller 就会完成您的 Deployment rollout，您将看到 Deployment 的状态更新为成功状态（&lt;code>Status=True&lt;/code>并且&lt;code>Reason=NewReplicaSetAvailable&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type Status Reason
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- ------ ------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Available True MinimumReplicasAvailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Progressing True NewReplicaSetAvailable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Type=Available&lt;/code>、 &lt;code>Status=True&lt;/code> 意味着您的 Deployment 有最小可用性。最小可用性是在 Deployment 策略中指定的参数。&lt;code>Type=Progressing&lt;/code> 、 &lt;code>Status=True&lt;/code> 意味着您的 Deployment 或者在部署过程中，或者已经成功部署，达到了期望的最少的可用 replica 数量（查看特定状态的 Reason—— 在我们的例子中 &lt;code>Reason=NewReplicaSetAvailable&lt;/code> 意味着 Deployment 已经完成）。&lt;/p>
&lt;p>您可以使用 &lt;code>kubectl rollout status&lt;/code> 命令查看 Deployment 进程是否失败。当 Deployment 过程超过了 deadline，&lt;code>kubectl rollout status&lt;/code> 将返回非 0 的 exit code。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deploy/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> out of &lt;span class="m">3&lt;/span> new replicas have been updated...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error: deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> exceeded its progress deadline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="操作失败的-deployment">操作失败的 Deployment&lt;/h3>
&lt;p>所有对完成的 Deployment 的操作都适用于失败的 Deployment。您可以对它扩 / 缩容，回退到历史版本，您甚至可以多次暂停它来应用 Deployment pod template。&lt;/p>
&lt;h2 id="清理-policy-1">清理 Policy&lt;/h2>
&lt;p>您可以设置 Deployment 中的 &lt;code>.spec.revisionHistoryLimit&lt;/code> 项来指定保留多少旧的 ReplicaSet。余下的将在后台被当作垃圾收集。默认的，所有的 revision 历史就都会被保留。在未来的版本中，将会更改为 2。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：将该值设置为 0，将导致所有的 Deployment 历史记录都会被清除，该 Deployment 就无法再回退了。&lt;/p>
&lt;h2 id="用例">用例&lt;/h2>
&lt;h3 id="金丝雀-deployment">金丝雀 Deployment&lt;/h3>
&lt;p>如果您想要使用 Deployment 对部分用户或服务器发布 release，您可以创建多个 Deployment，每个 Deployment 对应一个 release，参照 &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments" target="_blank" rel="noopener">managing resources&lt;/a> 中对金丝雀模式的描述。&lt;/p>
&lt;h2 id="编写-deployment-spec">编写 Deployment Spec&lt;/h2>
&lt;p>在所有的 Kubernetes 配置中，Deployment 也需要 &lt;code>apiVersion&lt;/code>，&lt;code>kind&lt;/code> 和 &lt;code>metadata&lt;/code> 这些配置项。配置文件的通用使用说明查看 &lt;a href="https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/" target="_blank" rel="noopener">部署应用&lt;/a>，配置容器，和使用 kubectl 管理资源文档。&lt;/p>
&lt;h3 id="pod-template">Pod Template&lt;/h3>
&lt;p>&lt;code>.spec.template&lt;/code> 是 &lt;code>.spec&lt;/code> 中唯一要求的字段。&lt;/p>
&lt;p>&lt;code>.spec.template&lt;/code> 是 &lt;a href="https://kubernetes.io/docs/user-guide/replication-controller/#pod-template" target="_blank" rel="noopener">pod template&lt;/a>. 它跟 &lt;a href="https://kubernetes.io/docs/user-guide/pods" target="_blank" rel="noopener">Pod&lt;/a> 有一模一样的 schema，除了它是嵌套的并且不需要 &lt;code>apiVersion&lt;/code> 和 &lt;code>kind&lt;/code> 字段。&lt;/p>
&lt;p>另外为了划分 Pod 的范围，Deployment 中的 pod template 必须指定适当的 label（不要跟其他 controller 重复了，参考 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#selector" target="_blank" rel="noopener">selector&lt;/a>）和适当的重启策略。&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle" target="_blank" rel="noopener">&lt;code>.spec.template.spec.restartPolicy&lt;/code>&lt;/a> 可以设置为 &lt;code>Always&lt;/code> , 如果不指定的话这就是默认配置。&lt;/p>
&lt;h3 id="replicas">Replicas&lt;/h3>
&lt;p>&lt;code>.spec.replicas&lt;/code> 是可以选字段，指定期望的 pod 数量，默认是 1。&lt;/p>
&lt;h3 id="selector">Selector&lt;/h3>
&lt;p>&lt;code>.spec.selector&lt;/code> 是可选字段，用来指定 &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels" target="_blank" rel="noopener">label selector&lt;/a> ，圈定 Deployment 管理的 pod 范围。&lt;/p>
&lt;p>如果被指定， &lt;code>.spec.selector&lt;/code> 必须匹配 &lt;code>.spec.template.metadata.labels&lt;/code>，否则它将被 API 拒绝。如果 &lt;code>.spec.selector&lt;/code> 没有被指定， &lt;code>.spec.selector.matchLabels&lt;/code> 默认是 &lt;code>.spec.template.metadata.labels&lt;/code>。&lt;/p>
&lt;p>在 Pod 的 template 跟 &lt;code>.spec.template&lt;/code> 不同或者数量超过了 &lt;code>.spec.replicas&lt;/code> 规定的数量的情况下，Deployment 会杀掉 label 跟 selector 不同的 Pod。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：您不应该再创建其他 label 跟这个 selector 匹配的 pod，或者通过其他 Deployment，或者通过其他 Controller，例如 ReplicaSet 和 ReplicationController。否则该 Deployment 会被把它们当成都是自己创建的。Kubernetes 不会阻止您这么做。&lt;/p>
&lt;p>如果您有多个 controller 使用了重复的 selector，controller 们就会互相打架并导致不正确的行为。&lt;/p>
&lt;h3 id="策略">策略&lt;/h3>
&lt;p>&lt;code>.spec.strategy&lt;/code> 指定新的 Pod 替换旧的 Pod 的策略。&lt;code>.spec.strategy.type&lt;/code> 可以是 &amp;ldquo;Recreate&amp;rdquo; 或者是 &amp;ldquo;RollingUpdate&amp;rdquo;。&amp;ldquo;RollingUpdate&amp;rdquo; 是默认值。&lt;/p>
&lt;h4 id="recreate-deployment">Recreate Deployment&lt;/h4>
&lt;p>&lt;code>.spec.strategy.type==Recreate&lt;/code> 时，在创建出新的 Pod 之前会先杀掉所有已存在的 Pod。&lt;/p>
&lt;h4 id="rolling-update-deployment">Rolling Update Deployment&lt;/h4>
&lt;p>&lt;code>.spec.strategy.type==RollingUpdate&lt;/code> 时，Deployment 使用 Rolling Update 的方式更新 Pod 。您可以指定 &lt;code>maxUnavailable&lt;/code> 和 &lt;code>maxSurge&lt;/code> 来控制 rolling update 进程。&lt;/p>
&lt;h5 id="max-unavailable">Max Unavailable&lt;/h5>
&lt;p>&lt;code>.spec.strategy.rollingUpdate.maxUnavailable&lt;/code> 是可选配置项，用来指定在升级过程中不可用 Pod 的最大数量。该值可以是一个绝对值（例如 5），也可以是期望 Pod 数量的百分比（例如 10%）。通过计算百分比的绝对值向下取整。如果 &lt;code>.spec.strategy.rollingUpdate.maxSurge&lt;/code> 为 0 时，这个值不可以为 0。默认值是 1。&lt;/p>
&lt;p>例如，该值设置成 30%，启动 rolling update 后旧的 ReplicatSet 将会立即缩容到期望的 Pod 数量的 70%。新的 Pod ready 后，随着新的 ReplicaSet 的扩容，旧的 ReplicaSet 会进一步缩容，确保在升级的所有时刻可以用的 Pod 数量至少是期望 Pod 数量的 70%。&lt;/p>
&lt;h5 id="max-surge">Max Surge&lt;/h5>
&lt;p>&lt;code>.spec.strategy.rollingUpdate.maxSurge&lt;/code> 是可选配置项，用来指定可以超过期望的 Pod 数量的最大个数。该值可以是一个绝对值（例如 5）或者是期望的 Pod 数量的百分比（例如 10%）。当 &lt;code>MaxUnavailable&lt;/code> 为 0 时该值不可以为 0。通过百分比计算的绝对值向上取整。默认值是 1。&lt;/p>
&lt;p>例如，该值设置成 30%，启动 rolling update 后新的 ReplicatSet 将会立即扩容，新老 Pod 的总数不能超过期望的 Pod 数量的 130%。旧的 Pod 被杀掉后，新的 ReplicaSet 将继续扩容，旧的 ReplicaSet 会进一步缩容，确保在升级的所有时刻所有的 Pod 数量和不会超过期望 Pod 数量的 130%。&lt;/p>
&lt;h3 id="progress-deadline-seconds">Progress Deadline Seconds&lt;/h3>
&lt;p>&lt;code>.spec.progressDeadlineSeconds&lt;/code> 是可选配置项，用来指定在系统报告 Deployment 的 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#failed-deployment" target="_blank" rel="noopener">failed progressing&lt;/a> —— 表现为 resource 的状态中 &lt;code>type=Progressing&lt;/code>、&lt;code>Status=False&lt;/code>、 &lt;code>Reason=ProgressDeadlineExceeded&lt;/code> 前可以等待的 Deployment 进行的秒数。Deployment controller 会继续重试该 Deployment。未来，在实现了自动回滚后， deployment controller 在观察到这种状态时就会自动回滚。&lt;/p>
&lt;p>如果设置该参数，该值必须大于 &lt;code>.spec.minReadySeconds&lt;/code>。&lt;/p>
&lt;h3 id="min-ready-seconds">Min Ready Seconds&lt;/h3>
&lt;p>&lt;code>.spec.minReadySeconds&lt;/code> 是一个可选配置项，用来指定没有任何容器 crash 的 Pod 并被认为是可用状态的最小秒数。默认是 0（Pod 在 ready 后就会被认为是可用状态）。进一步了解什么什么后 Pod 会被认为是 ready 状态，参阅 &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes" target="_blank" rel="noopener">Container Probes&lt;/a>。&lt;/p>
&lt;h3 id="rollback-to">Rollback To&lt;/h3>
&lt;p>&lt;code>.spec.rollbackTo&lt;/code> 是一个可以选配置项，用来配置 Deployment 回退的配置。设置该参数将触发回退操作，每次回退完成后，该值就会被清除。&lt;/p>
&lt;h4 id="revision">Revision&lt;/h4>
&lt;p>&lt;code>.spec.rollbackTo.revision&lt;/code> 是一个可选配置项，用来指定回退到的 revision。默认是 0，意味着回退到上一个 revision。&lt;/p>
&lt;h3 id="revision-history-limit">Revision History Limit&lt;/h3>
&lt;p>Deployment revision history 存储在它控制的 ReplicaSets 中。&lt;/p>
&lt;p>&lt;code>.spec.revisionHistoryLimit&lt;/code> 是一个可选配置项，用来指定可以保留的旧的 ReplicaSet 数量。该理想值取决于心 Deployment 的频率和稳定性。如果该值没有设置的话，默认所有旧的 Replicaset 或会被保留，将资源存储在 etcd 中，是用 &lt;code>kubectl get rs&lt;/code> 查看输出。每个 Deployment 的该配置都保存在 ReplicaSet 中，然而，一旦您删除的旧的 RepelicaSet，您的 Deployment 就无法再回退到那个 revison 了。&lt;/p>
&lt;p>如果您将该值设置为 0，所有具有 0 个 replica 的 ReplicaSet 都会被删除。在这种情况下，新的 Deployment rollout 无法撤销，因为 revision history 都被清理掉了。&lt;/p>
&lt;h3 id="paused">Paused&lt;/h3>
&lt;p>&lt;code>.spec.paused&lt;/code> 是可以可选配置项，boolean 值。用来指定暂停和恢复 Deployment。Paused 和没有 paused 的 Deployment 之间的唯一区别就是，所有对 paused deployment 中的 PodTemplateSpec 的修改都不会触发新的 rollout。Deployment 被创建之后默认是非 paused。&lt;/p></description></item><item><title>30.StatefulSet</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/30.statefulset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/30.statefulset/</guid><description>&lt;h1 id="statefulset">StatefulSet&lt;/h1>
&lt;p>StatefulSet 作为 Controller 为 Pod 提供唯一的标识。它可以保证部署和 scale 的顺序。&lt;/p>
&lt;p>使用案例参考：&lt;a href="https://github.com/kubernetes/contrib/tree/master/statefulsets" target="_blank" rel="noopener">kubernetes contrib - statefulsets&lt;/a>，其中包含 zookeeper 和 kakfa 的 statefulset 设置和使用说明。&lt;/p>
&lt;p>StatefulSet 是为了解决有状态服务的问题（对应 Deployments 和 ReplicaSets 是为无状态服务而设计），其应用场景包括：&lt;/p>
&lt;ul>
&lt;li>稳定的持久化存储，即 Pod 重新调度后还是能访问到相同的持久化数据，基于 PVC 来实现&lt;/li>
&lt;li>稳定的网络标志，即 Pod 重新调度后其 PodName 和 HostName 不变，基于 Headless Service（即没有 Cluster IP 的 Service）来实现&lt;/li>
&lt;li>有序部署，有序扩展，即 Pod 是有顺序的，在部署或者扩展的时候要依据定义的顺序依次依次进行（即从 0 到 N-1，在下一个 Pod 运行之前所有之前的 Pod 必须都是 Running 和 Ready 状态），基于 init containers 来实现&lt;/li>
&lt;li>有序收缩，有序删除（即从 N-1 到 0）&lt;/li>
&lt;/ul>
&lt;p>从上面的应用场景可以发现，StatefulSet 由以下几个部分组成：&lt;/p>
&lt;ul>
&lt;li>用于定义网络标志（DNS domain）的 Headless Service&lt;/li>
&lt;li>用于创建 PersistentVolumes 的 volumeClaimTemplates&lt;/li>
&lt;li>定义具体应用的 StatefulSet&lt;/li>
&lt;/ul>
&lt;p>StatefulSet 中每个 Pod 的 DNS 格式为&lt;code>statefulSetName-{0..N-1}.serviceName.namespace.svc.cluster.local&lt;/code>，其中&lt;/p>
&lt;ul>
&lt;li>&lt;code>serviceName&lt;/code>为 Headless Service 的名字&lt;/li>
&lt;li>&lt;code>0..N-1&lt;/code>为 Pod 所在的序号，从 0 开始到 N-1&lt;/li>
&lt;li>&lt;code>statefulSetName&lt;/code>为 StatefulSet 的名字&lt;/li>
&lt;li>&lt;code>namespace&lt;/code>为服务所在的 namespace，Headless Servic 和 StatefulSet 必须在相同的 namespace&lt;/li>
&lt;li>&lt;code>.cluster.local&lt;/code>为 Cluster Domain&lt;/li>
&lt;/ul>
&lt;h2 id="使用-statefulset">使用 StatefulSet&lt;/h2>
&lt;p>StatefulSet 适用于有以下某个或多个需求的应用：&lt;/p>
&lt;ul>
&lt;li>稳定，唯一的网络标志。&lt;/li>
&lt;li>稳定，持久化存储。&lt;/li>
&lt;li>有序，优雅地部署和 scale。&lt;/li>
&lt;li>有序，优雅地删除和终止。&lt;/li>
&lt;li>有序，自动的滚动升级。&lt;/li>
&lt;/ul>
&lt;p>在上文中，稳定是 Pod （重新）调度中持久性的代名词。如果应用程序不需要任何稳定的标识符、有序部署、删除和 scale，则应该使用提供一组无状态副本的 controller 来部署应用程序，例如 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment" target="_blank" rel="noopener">Deployment&lt;/a> 或 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicaset" target="_blank" rel="noopener">ReplicaSet&lt;/a> 可能更适合您的无状态需求。&lt;/p>
&lt;h2 id="限制">限制&lt;/h2>
&lt;ul>
&lt;li>StatefulSet 是 beta 资源，Kubernetes 1.5 以前版本不支持。&lt;/li>
&lt;li>对于所有的 alpha/beta 的资源，您都可以通过在 apiserver 中设置 &lt;code>--runtime-config&lt;/code> 选项来禁用。&lt;/li>
&lt;li>给定 Pod 的存储必须由 PersistentVolume Provisioner 根据请求的 &lt;code>storage class&lt;/code> 进行配置，或由管理员预先配置。&lt;/li>
&lt;li>删除或 scale StatefulSet 将&lt;em>不会&lt;/em>删除与 StatefulSet 相关联的 volume。这样做是为了确保数据安全性，这通常比自动清除所有相关 StatefulSet 资源更有价值。&lt;/li>
&lt;li>StatefulSets 目前要求 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services" target="_blank" rel="noopener">Headless Service&lt;/a> 负责 Pod 的网络身份。您有责任创建此服务。&lt;/li>
&lt;/ul>
&lt;h2 id="组件">组件&lt;/h2>
&lt;p>下面的示例中描述了 StatefulSet 中的组件。&lt;/p>
&lt;ul>
&lt;li>一个名为 nginx 的 headless service，用于控制网络域。&lt;/li>
&lt;li>一个名为 web 的 StatefulSet，它的 Spec 中指定在有 3 个运行 nginx 容器的 Pod。&lt;/li>
&lt;li>volumeClaimTemplates 使用 PersistentVolume Provisioner 提供的 &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes" target="_blank" rel="noopener">PersistentVolumes&lt;/a> 作为稳定存储。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">clusterIP&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">StatefulSet&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">terminationGracePeriodSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">10&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gcr.io/google_containers/nginx-slim:0.8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">www&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/usr/share/nginx/html&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">www&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volume.beta.kubernetes.io/storage-class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">anything&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="pod-身份">Pod 身份&lt;/h2>
&lt;p>StatefulSet Pod 具有唯一的身份，包括序数，稳定的网络身份和稳定的存储。身份绑定到 Pod 上，不管它（重新）调度到哪个节点上。&lt;/p>
&lt;h3 id="序数">序数&lt;/h3>
&lt;p>对于一个有 N 个副本的 StatefulSet，每个副本都会被指定一个整数序数，在 [0,N)之间，且唯一。&lt;/p>
&lt;h2 id="稳定的网络-id">稳定的网络 ID&lt;/h2>
&lt;p>StatefulSet 中的每个 Pod 从 StatefulSet 的名称和 Pod 的序数派生其主机名。构造的主机名的模式是&lt;code>$（statefulset名称)-$(序数)&lt;/code>。上面的例子将创建三个名为&lt;code>web-0，web-1，web-2&lt;/code>的 Pod。&lt;/p>
&lt;p>StatefulSet 可以使用 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/service/#headless-services" target="_blank" rel="noopener">Headless Service&lt;/a> 来控制其 Pod 的域。此服务管理的域的格式为：&lt;code>$(服务名称).$(namespace).svc.cluster.local&lt;/code>，其中 “cluster.local” 是集群域。&lt;/p>
&lt;p>在创建每个 Pod 时，它将获取一个匹配的 DNS 子域，采用以下形式：&lt;code>$(pod 名称).$(管理服务域)&lt;/code>，其中管理服务由 StatefulSet 上的 &lt;code>serviceName&lt;/code> 字段定义。&lt;/p>
&lt;p>以下是 Cluster Domain，服务名称，StatefulSet 名称以及如何影响 StatefulSet 的 Pod 的 DNS 名称的一些示例。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Cluster Domain&lt;/th>
&lt;th>Service (ns/name)&lt;/th>
&lt;th>StatefulSet (ns/name)&lt;/th>
&lt;th>StatefulSet Domain&lt;/th>
&lt;th>Pod DNS&lt;/th>
&lt;th>Pod Hostname&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>cluster.local&lt;/td>
&lt;td>default/nginx&lt;/td>
&lt;td>default/web&lt;/td>
&lt;td>nginx.default.svc.cluster.local&lt;/td>
&lt;td>web-{0..N-1}.nginx.default.svc.cluster.local&lt;/td>
&lt;td>web-{0..N-1}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>cluster.local&lt;/td>
&lt;td>foo/nginx&lt;/td>
&lt;td>foo/web&lt;/td>
&lt;td>nginx.foo.svc.cluster.local&lt;/td>
&lt;td>web-{0..N-1}.nginx.foo.svc.cluster.local&lt;/td>
&lt;td>web-{0..N-1}&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>kube.local&lt;/td>
&lt;td>foo/nginx&lt;/td>
&lt;td>foo/web&lt;/td>
&lt;td>nginx.foo.svc.kube.local&lt;/td>
&lt;td>web-{0..N-1}.nginx.foo.svc.kube.local&lt;/td>
&lt;td>web-{0..N-1}&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>注意 Cluster Domain 将被设置成 &lt;code>cluster.local&lt;/code> 除非进行了其他配置。&lt;/p>
&lt;h3 id="稳定存储">稳定存储&lt;/h3>
&lt;p>Kubernetes 为每个 VolumeClaimTemplate 创建一个 &lt;a href="https://kubernetes.io/docs/concepts/storage/volumes" target="_blank" rel="noopener">PersistentVolume&lt;/a>。上面的 nginx 的例子中，每个 Pod 将具有一个由 &lt;code>anything&lt;/code> 存储类创建的 1 GB 存储的 PersistentVolume。当该 Pod （重新）调度到节点上，&lt;code>volumeMounts&lt;/code> 将挂载与 PersistentVolume Claim 相关联的 PersistentVolume。请注意，与 PersistentVolume Claim 相关联的 PersistentVolume 在 产出 Pod 或 StatefulSet 的时候不会被删除。这必须手动完成。&lt;/p>
&lt;h2 id="部署和-scale-保证">部署和 Scale 保证&lt;/h2>
&lt;ul>
&lt;li>对于有 N 个副本的 StatefulSet，Pod 将按照 {0..N-1} 的顺序被创建和部署。&lt;/li>
&lt;li>当 删除 Pod 的时候，将按照逆序来终结，从{N-1..0}&lt;/li>
&lt;li>对 Pod 执行 scale 操作之前，它所有的前任必须处于 Running 和 Ready 状态。&lt;/li>
&lt;li>在终止 Pod 前，它所有的继任者必须处于完全关闭状态。&lt;/li>
&lt;/ul>
&lt;p>不应该将 StatefulSet 的 &lt;code>pod.Spec.TerminationGracePeriodSeconds&lt;/code> 设置为 0。这样是不安全的且强烈不建议您这样做。进一步解释，请参阅 &lt;a href="https://kubernetes.io/docs/tasks/run-application/force-delete-stateful-set-pod" target="_blank" rel="noopener">强制删除 StatefulSet Pod&lt;/a>。&lt;/p>
&lt;p>上面的 nginx 示例创建后，3 个 Pod 将按照如下顺序创建 web-0，web-1，web-2。在 web-0 处于 &lt;a href="https://kubernetes.io/docs/user-guide/pod-states" target="_blank" rel="noopener">运行并就绪&lt;/a> 状态之前，web-1 将不会被部署，同样当 web-1 处于运行并就绪状态之前 web-2 也不会被部署。如果在 web-1 运行并就绪后，web-2 启动之前， web-0 失败了，web-2 将不会启动，直到 web-0 成功重启并处于运行并就绪状态。&lt;/p>
&lt;p>如果用户通过修补 StatefulSet 来 scale 部署的示例，以使 &lt;code>replicas=1&lt;/code>，则 web-2 将首先被终止。在 web-2 完全关闭和删除之前，web-1 不会被终止。如果 web-0 在 web-2 终止并且完全关闭之后，但是在 web-1 终止之前失败，则 web-1 将不会终止，除非 web-0 正在运行并准备就绪。&lt;/p>
&lt;h3 id="pod-管理策略">Pod 管理策略&lt;/h3>
&lt;p>在 Kubernetes 1.7 和之后版本，StatefulSet 允许您放开顺序保证，同时通过 &lt;code>.spec.podManagementPolicy&lt;/code> 字段保证身份的唯一性。&lt;/p>
&lt;h4 id="orderedready-pod-管理">OrderedReady Pod 管理&lt;/h4>
&lt;p>StatefulSet 中默认使用的是 &lt;code>OrderedReady&lt;/code> pod 管理。它实现了 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset.md#deployment-and-scaling-guarantees" target="_blank" rel="noopener">如上&lt;/a> 所述的行为。&lt;/p>
&lt;h4 id="并行-pod-管理">并行 Pod 管理&lt;/h4>
&lt;p>&lt;code>Parallel&lt;/code> pod 管理告诉 StatefulSet controller 并行的启动和终止 Pod，在启动和终止其他 Pod 之前不会等待 Pod 变成 运行并就绪或完全终止状态。&lt;/p>
&lt;h2 id="更新策略">更新策略&lt;/h2>
&lt;p>在 kubernetes 1.7 和以上版本中，StatefulSet 的 &lt;code>.spec.updateStrategy&lt;/code> 字段允许您配置和禁用 StatefulSet 中的容器、label、resource request/limit、annotation 的滚动更新。&lt;/p>
&lt;h3 id="删除">删除&lt;/h3>
&lt;p>&lt;code>OnDelete&lt;/code> 更新策略实现了遗留（1.6 和以前）的行为。当 &lt;code>spec.updateStrategy&lt;/code> 未指定时，这是默认策略。当 StatefulSet 的 &lt;code>.spec.updateStrategy.type&lt;/code> 设置为 &lt;code>OnDelete&lt;/code> 时，StatefulSet 控制器将不会自动更新 &lt;code>StatefulSet&lt;/code> 中的 Pod。用户必须手动删除 Pod 以使控制器创建新的 Pod，以反映对 StatefulSet 的 &lt;code>.spec.template&lt;/code> 进行的修改。&lt;/p>
&lt;h3 id="滚动更新">滚动更新&lt;/h3>
&lt;p>&lt;code>RollingUpdate&lt;/code> 更新策略在 StatefulSet 中实现 Pod 的自动滚动更新。当 StatefulSet 的 &lt;code>.spec.updateStrategy.type&lt;/code> 设置为 &lt;code>RollingUpdate&lt;/code> 时，StatefulSet 控制器将在 StatefulSet 中删除并重新创建每个 Pod。它将以与 Pod 终止相同的顺序进行（从最大的序数到最小的序数），每次更新一个 Pod。在更新其前身之前，它将等待正在更新的 Pod 状态变成正在运行并就绪。&lt;/p>
&lt;h4 id="分区">分区&lt;/h4>
&lt;p>可以通过指定 &lt;code>.spec.updateStrategy.rollingUpdate.partition&lt;/code> 来对 &lt;code>RollingUpdate&lt;/code> 更新策略进行分区。如果指定了分区，则当 StatefulSet 的 &lt;code>.spec.template&lt;/code> 更新时，具有大于或等于分区序数的所有 Pod 将被更新。具有小于分区的序数的所有 Pod 将不会被更新，即使删除它们也将被重新创建。如果 StatefulSet 的 &lt;code>.spec.updateStrategy.rollingUpdate.partition&lt;/code> 大于其 &lt;code>.spec.replicas&lt;/code>，则其 &lt;code>.spec.template&lt;/code> 的更新将不会传播到 Pod。&lt;/p>
&lt;p>在大多数情况下，您不需要使用分区，但如果您想要进行分阶段更新，使用金丝雀发布或执行分阶段发布，它们将非常有用。&lt;/p>
&lt;h2 id="简单示例">简单示例&lt;/h2>
&lt;p>以一个简单的 nginx 服务&lt;a href="https://github.com/rootsongjc/kubernetes-handbook/blob/master/manifests/test/web.yaml" target="_blank" rel="noopener">web.yaml&lt;/a>为例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">clusterIP&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">StatefulSet&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gcr.io/google_containers/nginx-slim:0.8&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">web&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">www&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/usr/share/nginx/html&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">www&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volume.alpha.kubernetes.io/storage-class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">anything&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">1Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ kubectl create -f web.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">service &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">statefulset &lt;span class="s2">&amp;#34;web&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看创建的headless service和statefulset&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get service nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx None &amp;lt;none&amp;gt; 80/TCP 1m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get statefulset web
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">web &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 根据volumeClaimTemplates自动创建PVC（在GCE中会自动创建kubernetes.io/gce-pd类型的volume）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pvc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME STATUS VOLUME CAPACITY ACCESSMODES AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">www-web-0 Bound pvc-d064a004-d8d4-11e6-b521-42010a800002 1Gi RWO 16s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">www-web-1 Bound pvc-d06a3946-d8d4-11e6-b521-42010a800002 1Gi RWO 16s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看创建的Pod，他们都是有序的&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get pods -l &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">web-0 1/1 Running &lt;span class="m">0&lt;/span> 5m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">web-1 1/1 Running &lt;span class="m">0&lt;/span> 4m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用nslookup查看这些Pod的DNS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl run -i --tty --image busybox dns-test --restart&lt;span class="o">=&lt;/span>Never --rm /bin/sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/ &lt;span class="c1"># nslookup web-0.nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: 10.0.0.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.0.0.10 kube-dns.kube-system.svc.cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: web-0.nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.244.2.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/ &lt;span class="c1"># nslookup web-1.nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: 10.0.0.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.0.0.10 kube-dns.kube-system.svc.cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: web-1.nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.244.3.12
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">/ &lt;span class="c1"># nslookup web-0.nginx.default.svc.cluster.local&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Server: 10.0.0.10
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.0.0.10 kube-dns.kube-system.svc.cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: web-0.nginx.default.svc.cluster.local
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Address 1: 10.244.2.10
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>还可以进行其他的操作&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 扩容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl scale statefulset web --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 缩容&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch statefulset web -p &lt;span class="s1">&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;replicas&amp;#34;:3}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 镜像更新（目前还不支持直接更新image，需要patch来间接实现）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl patch statefulset web --type&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;json&amp;#39;&lt;/span> -p&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;[{&amp;#34;op&amp;#34;: &amp;#34;replace&amp;#34;, &amp;#34;path&amp;#34;: &amp;#34;/spec/template/spec/containers/0/image&amp;#34;, &amp;#34;value&amp;#34;:&amp;#34;gcr.io/google_containers/nginx-slim:0.7&amp;#34;}]&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除StatefulSet和Headless Service&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete statefulset web
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete service nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># StatefulSet删除后PVC还会保留着，数据不再使用的话也需要删除&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete pvc www-web-0 www-web-1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="zookeeper">zookeeper&lt;/h2>
&lt;p>另外一个更能说明 StatefulSet 强大功能的示例为&lt;a href="https://github.com/rootsongjc/kubernetes-handbook/blob/master/manifests/test/zookeeper.yaml" target="_blank" rel="noopener">zookeeper.yaml&lt;/a>，这个例子仅为讲解，实际可用的配置请使用 &lt;a href="https://github.com/kubernetes/contrib/tree/master/statefulsets" target="_blank" rel="noopener">https://github.com/kubernetes/contrib/tree/master/statefulsets&lt;/a> 中的配置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Service&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-headless&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-headless&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2888&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3888&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">leader-election&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">clusterIP&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">None&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ConfigMap&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">data&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ensemble&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;zk-0;zk-1;zk-2&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">jvm.heap&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2G&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tick&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2000&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">init&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;10&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">sync&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;5&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">client.cnxns&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;60&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">snap.retain&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">purge.interval&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">policy/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">PodDisruptionBudget&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-budget&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">minAvailable&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nn">---&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">apps/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">StatefulSet&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">serviceName&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-headless&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">pod.alpha.kubernetes.io/initialized&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">scheduler.alpha.kubernetes.io/affinity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;span class="sd">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;podAntiAffinity&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;requiredDuringSchedulingRequiredDuringExecution&amp;#34;: [{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;labelSelector&amp;#34;: {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;matchExpressions&amp;#34;: [{
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;key&amp;#34;: &amp;#34;app&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;operator&amp;#34;: &amp;#34;In&amp;#34;,
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;values&amp;#34;: [&amp;#34;zk-headless&amp;#34;]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> }]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> },
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> &amp;#34;topologyKey&amp;#34;: &amp;#34;kubernetes.io/hostname&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> }]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="sd"> }&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">k8szk&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">imagePullPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Always&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gcr.io/google_samples/k8szk:v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;4Gi&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2181&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">client&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2888&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">server&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3888&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">leader-election&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_ENSEMBLE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ensemble&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_HEAP_SIZE&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">jvm.heap&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_TICK_TIME&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tick&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_INIT_LIMIT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">init&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_SYNC_LIMIT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">tick&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_MAX_CLIENT_CNXNS&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">client.cnxns&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_SNAP_RETAIN_COUNT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">snap.retain&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_PURGE_INTERVAL&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">valueFrom&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">configMapKeyRef&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">zk-config&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">key&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">purge.interval&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_CLIENT_PORT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2181&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_SERVER_PORT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;2888&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ZK_ELECTION_PORT&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;3888&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">zkGenConfig.sh &amp;amp;&amp;amp; zkServer.sh start-foreground&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">readinessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;zkOk.sh&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">15&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">livenessProbe&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">exec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="s2">&amp;#34;zkOk.sh&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">initialDelaySeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">15&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">timeoutSeconds&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">5&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeMounts&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">datadir&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">mountPath&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">/var/lib/zookeeper&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">securityContext&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">runAsUser&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">fsGroup&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">1000&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volumeClaimTemplates&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">datadir&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">annotations&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">volume.alpha.kubernetes.io/storage-class&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">anything&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">accessModes&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;ReadWriteOnce&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">storage&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">20Gi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">kubectl create -f zookeeper.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>详细的使用说明见&lt;a href="https://kubernetes.io/docs/tutorials/stateful-application/zookeeper/" target="_blank" rel="noopener">zookeeper stateful application&lt;/a>。&lt;/p>
&lt;p>关于 StatefulSet 的更多示例请参阅 &lt;a href="https://github.com/kubernetes/contrib/tree/master/statefulsets" target="_blank" rel="noopener">github.com/kubernetes/contrib - statefulsets&lt;/a>，其中包括了 zookeeper 和 kafka。&lt;/p>
&lt;h2 id="集群外部访问-statefulset-的-pod">集群外部访问 StatefulSet 的 Pod&lt;/h2>
&lt;p>我们设想一下这样的场景：在 kubernetes 集群外部调试 StatefulSet 中有序的 Pod，那么如何访问这些的 pod 呢？&lt;/p>
&lt;p>方法是为 pod 设置 label，然后用&lt;code>kubectl expose&lt;/code>将其以 NodePort 的方式暴露到集群外部，以上面的 zookeeper 的例子来说明，下面使用命令的方式来暴露其中的两个 zookeeper 节点，也可以写一个 serivce 配置 yaml 文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl label pod zk-0 &lt;span class="nv">zkInst&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl label pod zk-1 &lt;span class="nv">zkInst&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl expose po zk-0 --port&lt;span class="o">=&lt;/span>&lt;span class="m">2181&lt;/span> --target-port&lt;span class="o">=&lt;/span>&lt;span class="m">2181&lt;/span> --name&lt;span class="o">=&lt;/span>zk-0 --selector&lt;span class="o">=&lt;/span>&lt;span class="nv">zkInst&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span> --type&lt;span class="o">=&lt;/span>NodePort
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl expose po zk-1 --port&lt;span class="o">=&lt;/span>&lt;span class="m">2181&lt;/span> --target-port&lt;span class="o">=&lt;/span>&lt;span class="m">2181&lt;/span> --name&lt;span class="o">=&lt;/span>zk-1 --selector&lt;span class="o">=&lt;/span>&lt;span class="nv">zkInst&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> --type&lt;span class="o">=&lt;/span>NodePort
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样在 kubernetes 集群外部就可以根据 pod 所在的主机所映射的端口来访问了。&lt;/p>
&lt;p>查看&lt;code>zk-0&lt;/code>这个 service 可以看到如下结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">NAME CLUSTER-IP EXTERNAL-IP PORT&lt;span class="o">(&lt;/span>S&lt;span class="o">)&lt;/span> AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">zk-0 10.254.98.14 &amp;lt;nodes&amp;gt; 2181:31693/TCP 5m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>集群外部就可以使用所有的 node 中的任何一个 IP:31693 来访问这个 zookeeper 实例。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/" target="_blank" rel="noopener">https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kubernetes/contrib/tree/master/statefulsets" target="_blank" rel="noopener">kubernetes contrib - statefulsets&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>31.DaemonSet</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/31.daemonset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/31.daemonset/</guid><description>&lt;h1 id="daemonset">DaemonSet&lt;/h1>
&lt;p>本文将为您介绍 DaemonSet 的基本概念。&lt;/p>
&lt;h2 id="什么是-daemonset">什么是 DaemonSet？&lt;/h2>
&lt;p>&lt;em>DaemonSet&lt;/em> 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。&lt;/p>
&lt;p>使用 DaemonSet 的一些典型用法：&lt;/p>
&lt;ul>
&lt;li>运行集群存储 daemon，例如在每个 Node 上运行 &lt;code>glusterd&lt;/code>、&lt;code>ceph&lt;/code>。&lt;/li>
&lt;li>在每个 Node 上运行日志收集 daemon，例如&lt;code>fluentd&lt;/code>、&lt;code>logstash&lt;/code>。&lt;/li>
&lt;li>在每个 Node 上运行监控 daemon，例如 &lt;a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener">Prometheus Node Exporter&lt;/a>、&lt;code>collectd&lt;/code>、Datadog 代理、New Relic 代理，或 Ganglia &lt;code>gmond&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>一个简单的用法是，在所有的 Node 上都存在一个 DaemonSet，将被作为每种类型的 daemon 使用。
一个稍微复杂的用法可能是，对单独的每种类型的 daemon 使用多个 DaemonSet，但具有不同的标志，和/或对不同硬件类型具有不同的内存、CPU 要求。&lt;/p>
&lt;h2 id="编写-daemonset-spec">编写 DaemonSet Spec&lt;/h2>
&lt;h3 id="必需字段">必需字段&lt;/h3>
&lt;p>和其它所有 Kubernetes 配置一样，DaemonSet 需要 &lt;code>apiVersion&lt;/code>、&lt;code>kind&lt;/code> 和 &lt;code>metadata&lt;/code>字段。有关配置文件的通用信息，详见文档 &lt;a href="https://kubernetes.io/docs/user-guide/deploying-applications/" target="_blank" rel="noopener">部署应用&lt;/a>、&lt;a href="https://kubernetes.io/docs/user-guide/configuring-containers/" target="_blank" rel="noopener">配置容器&lt;/a> 和资源管理。&lt;/p>
&lt;p>DaemonSet 也需要一个 &lt;code>.spec&lt;/code>配置段。&lt;/p>
&lt;h3 id="pod-模板">Pod 模板&lt;/h3>
&lt;p>&lt;code>.spec&lt;/code> 唯一必需的字段是 &lt;code>.spec.template&lt;/code>。&lt;/p>
&lt;p>&lt;code>.spec.template&lt;/code> 是一个 &lt;a href="https://kubernetes.io/docs/user-guide/replication-controller/#pod-template" target="_blank" rel="noopener">Pod 模板&lt;/a>。
它与 &lt;a href="https://kubernetes.io/docs/user-guide/pods" target="_blank" rel="noopener">Pod&lt;/a> 具有相同的 schema，除了它是嵌套的，而且不具有 &lt;code>apiVersion&lt;/code> 或 &lt;code>kind&lt;/code> 字段。&lt;/p>
&lt;p>Pod 除了必须字段外，在 DaemonSet 中的 Pod 模板必须指定合理的标签（查看 &lt;a href="#pod-selector">pod selector&lt;/a>）。&lt;/p>
&lt;p>在 DaemonSet 中的 Pod 模板必需具有一个值为 &lt;code>Always&lt;/code> 的 &lt;a href="https://kubernetes.io/docs/user-guide/pod-states" target="_blank" rel="noopener">&lt;code>RestartPolicy&lt;/code>&lt;/a>，或者未指定它的值，默认是 &lt;code>Always&lt;/code>。&lt;/p>
&lt;h3 id="pod-selector">Pod Selector&lt;/h3>
&lt;p>&lt;code>.spec.selector&lt;/code> 字段表示 Pod Selector，它与 &lt;a href="https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/" target="_blank" rel="noopener">Job&lt;/a> 或其它资源的 &lt;code>.spec.selector&lt;/code> 的原理是相同的。&lt;/p>
&lt;p>&lt;code>spec.selector&lt;/code> 表示一个对象，它由如下两个字段组成：&lt;/p>
&lt;ul>
&lt;li>&lt;code>matchLabels&lt;/code> - 与 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/" target="_blank" rel="noopener">ReplicationController&lt;/a> 的 &lt;code>.spec.selector&lt;/code> 的原理相同。&lt;/li>
&lt;li>&lt;code>matchExpressions&lt;/code> - 允许构建更加复杂的 Selector，可以通过指定 key、value 列表，以及与 key 和 value 列表的相关的操作符。&lt;/li>
&lt;/ul>
&lt;p>当上述两个字段都指定时，结果表示的是 AND 关系。&lt;/p>
&lt;p>如果指定了 &lt;code>.spec.selector&lt;/code>，必须与 &lt;code>.spec.template.metadata.labels&lt;/code> 相匹配。如果没有指定，它们默认是等价的。如果与它们配置的不匹配，则会被 API 拒绝。&lt;/p>
&lt;p>如果 Pod 的 label 与 selector 匹配，或者直接基于其它的 DaemonSet、或者 Controller（例如 ReplicationController），也不可以创建任何 Pod。
否则 DaemonSet Controller 将认为那些 Pod 是它创建的。Kubernetes 不会阻止这样做。一个场景是，可能希望在一个具有不同值的、用来测试用的 Node 上手动创建 Pod。&lt;/p>
&lt;h3 id="仅在相同的-node-上运行-pod">仅在相同的 Node 上运行 Pod&lt;/h3>
&lt;p>如果指定了 &lt;code>.spec.template.spec.nodeSelector&lt;/code>，DaemonSet Controller 将在能够匹配上 &lt;a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/" target="_blank" rel="noopener">Node Selector&lt;/a> 的 Node 上创建 Pod。
类似这种情况，可以指定 &lt;code>.spec.template.spec.affinity&lt;/code>，然后 DaemonSet Controller 将在能够匹配上 &lt;a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/" target="_blank" rel="noopener">Node Affinity&lt;/a> 的 Node 上创建 Pod。
如果根本就没有指定，则 DaemonSet Controller 将在所有 Node 上创建 Pod。&lt;/p>
&lt;h2 id="如何调度-daemon-pod">如何调度 Daemon Pod&lt;/h2>
&lt;p>正常情况下，Pod 运行在哪个机器上是由 Kubernetes 调度器进行选择的。然而，由 Daemon Controller 创建的 Pod 已经确定了在哪个机器上（Pod 创建时指定了 &lt;code>.spec.nodeName&lt;/code>），因此：&lt;/p>
&lt;ul>
&lt;li>DaemonSet Controller 并不关心一个 Node 的 &lt;a href="https://kubernetes.io/docs/admin/node/#manual-node-administration" target="_blank" rel="noopener">&lt;code>unschedulable&lt;/code>&lt;/a> 字段。&lt;/li>
&lt;li>DaemonSet Controller 可以创建 Pod，即使调度器还没有被启动，这对集群启动是非常有帮助的。&lt;/li>
&lt;/ul>
&lt;p>Daemon Pod 关心 &lt;a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature" target="_blank" rel="noopener">Taint 和 Toleration&lt;/a>，它们会为没有指定 &lt;code>tolerationSeconds&lt;/code> 的 &lt;code>node.alpha.kubernetes.io/notReady&lt;/code> 和 &lt;code>node.alpha.kubernetes.io/unreachable&lt;/code> 的 Taint，而创建具有 &lt;code>NoExecute&lt;/code> 的 Toleration。这确保了当 alpha 特性的 &lt;code>TaintBasedEvictions&lt;/code> 被启用，当 Node 出现故障，比如网络分区，这时它们将不会被清除掉（当 &lt;code>TaintBasedEvictions&lt;/code> 特性没有启用，在这些场景下也不会被清除，但会因为 NodeController 的硬编码行为而被清除，Toleration 是不会的）。&lt;/p>
&lt;h2 id="与-daemon-pod-通信">与 Daemon Pod 通信&lt;/h2>
&lt;p>与 DaemonSet 中的 Pod 进行通信，几种可能的模式如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Push&lt;/strong>：配置 DaemonSet 中的 Pod 向其它 Service 发送更新，例如统计数据库。它们没有客户端。&lt;/li>
&lt;li>&lt;strong>NodeIP 和已知端口&lt;/strong>：DaemonSet 中的 Pod 可以使用 &lt;code>hostPort&lt;/code>，从而可以通过 Node IP 访问到 Pod。客户端能通过某种方法知道 Node IP 列表，并且基于此也可以知道端口。&lt;/li>
&lt;li>&lt;strong>DNS&lt;/strong>：创建具有相同 Pod Selector 的 &lt;a href="https://kubernetes.io/docs/user-guide/services/#headless-services" target="_blank" rel="noopener">Headless Service&lt;/a>，然后通过使用 &lt;code>endpoints&lt;/code> 资源或从 DNS 检索到多个 A 记录来发现 DaemonSet。&lt;/li>
&lt;li>&lt;strong>Service&lt;/strong>：创建具有相同 Pod Selector 的 Service，并使用该 Service 访问到某个随机 Node 上的 daemon。（没有办法访问到特定 Node）&lt;/li>
&lt;/ul>
&lt;h2 id="更新-daemonset">更新 DaemonSet&lt;/h2>
&lt;p>如果修改了 Node Label，DaemonSet 将立刻向新匹配上的 Node 添加 Pod，同时删除新近无法匹配上的 Node 上的 Pod。&lt;/p>
&lt;p>可以修改 DaemonSet 创建的 Pod。然而，不允许对 Pod 的所有字段进行更新。当下次 Node（即使具有相同的名称）被创建时，DaemonSet Controller 还会使用最初的模板。&lt;/p>
&lt;p>可以删除一个 DaemonSet。如果使用 &lt;code>kubectl&lt;/code> 并指定 &lt;code>--cascade=false&lt;/code> 选项，则 Pod 将被保留在 Node 上。然后可以创建具有不同模板的新 DaemonSet。具有不同模板的新 DaemonSet 将鞥能够通过 Label 匹配识别所有已经存在的 Pod。它不会修改或删除它们，即使是错误匹配了 Pod 模板。通过删除 Pod 或者 删除 Node，可以强制创建新的 Pod。&lt;/p>
&lt;p>在 Kubernetes 1.6 或以后版本，可以在 DaemonSet 上 &lt;a href="https://kubernetes.io/docs/tasks/manage-daemon/update-daemon-set/" target="_blank" rel="noopener">执行滚动升级&lt;/a>。&lt;/p>
&lt;h3 id="init-脚本">init 脚本&lt;/h3>
&lt;p>很可能通过直接在一个 Node 上启动 daemon 进程（例如，使用 &lt;code>init&lt;/code>、&lt;code>upstartd&lt;/code>、或 &lt;code>systemd&lt;/code>）。这非常好，然而基于 DaemonSet 来运行这些进程有如下一些好处：&lt;/p>
&lt;ul>
&lt;li>像对待应用程序一样，具备为 daemon 提供监控和管理日志的能力。&lt;/li>
&lt;li>为 daemon 和应用程序使用相同的配置语言和工具（如 Pod 模板、&lt;code>kubectl&lt;/code>）。&lt;/li>
&lt;li>Kubernetes 未来版本可能会支持对 DaemonSet 创建 Pod 与 Node 升级工作流进行集成。&lt;/li>
&lt;li>在资源受限的容器中运行 daemon，能够增加 daemon 和应用容器的隔离性。然而这也实现了在容器中运行 daemon，但却不能在 Pod 中运行（例如，直接基于 Docker 启动）。&lt;/li>
&lt;/ul>
&lt;h3 id="裸-pod">裸 Pod&lt;/h3>
&lt;p>可能要直接创建 Pod，同时指定其运行在特定的 Node 上。
然而，DaemonSet 替换了由于任何原因被删除或终止的 Pod，例如 Node 失败、例行节点维护，比如内核升级。由于这个原因，我们应该使用 DaemonSet 而不是单独创建 Pod。&lt;/p>
&lt;h3 id="静态-pod">静态 Pod&lt;/h3>
&lt;p>很可能，通过在一个指定目录下编写文件来创建 Pod，该目录受 Kubelet 所监视。这些 Pod 被称为 &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/static-pod/" target="_blank" rel="noopener">静态 Pod&lt;/a>。
不像 DaemonSet，静态 Pod 不受 kubectl 和 其它 Kubernetes API 客户端管理。静态 Pod 不依赖于 apiserver，这使得它们在集群启动的情况下非常有用。
而且，未来静态 Pod 可能会被废弃掉。&lt;/p>
&lt;h3 id="replication-controller">Replication Controller&lt;/h3>
&lt;p>DaemonSet 与 &lt;a href="https://kubernetes.io/docs/user-guide/replication-controller" target="_blank" rel="noopener">Replication Controller&lt;/a> 非常类似，它们都能创建 Pod，这些 Pod 都具有不期望被终止的进程（例如，Web 服务器、存储服务器）。
为无状态的 Service 使用 Replication Controller，像 frontend，实现对副本的数量进行扩缩容、平滑升级，比之于精确控制 Pod 运行在某个主机上要重要得多。需要 Pod 副本总是运行在全部或特定主机上，并需要先于其他 Pod 启动，当这被认为非常重要时，应该使用 Daemon Controller。&lt;/p></description></item><item><title>32.ReplicationController 和 ReplicaSet</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/32.replicationcontroller-%E5%92%8C-replicaset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/32.replicationcontroller-%E5%92%8C-replicaset/</guid><description>&lt;h1 id="replicationcontroller-和-replicaset">ReplicationController 和 ReplicaSet&lt;/h1>
&lt;p>ReplicationController 用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的 Pod 来替代；而如果异常多出来的容器也会自动回收。&lt;/p>
&lt;p>在新版本的 Kubernetes 中建议使用 ReplicaSet 来取代 ReplicationController。ReplicaSet 跟 ReplicationController 没有本质的不同，只是名字不一样，并且 ReplicaSet 支持集合式的 selector。&lt;/p>
&lt;p>虽然 ReplicaSet 可以独立使用，但一般还是建议使用 Deployment 来自动管理 ReplicaSet，这样就无需担心跟其他机制的不兼容问题（比如 ReplicaSet 不支持 rolling-update 但 Deployment 支持）。&lt;/p>
&lt;p>ReplicaSet 示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReplicaSet&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># these labels can be applied automatically&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># from the labels in the pod template if not set&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># labels:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># app: guestbook&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># tier: frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># this replicas value is default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># modify it according to your case&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># selector can be applied automatically&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># from the labels in the pod template if not set,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># but we are specifying the selector here to&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># demonstrate its usage.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tier&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- {&lt;span class="w"> &lt;/span>&lt;span class="nt">key: tier, operator: In, values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">frontend] }&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">guestbook&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tier&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">php-redis&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gcr.io/google_samples/gb-frontend:v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100m&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100Mi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GET_HOSTS_FROM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dns&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># If your cluster config does not include a dns service, then to&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># instead access environment variables to find service host&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># info, comment out the &amp;#39;value: dns&amp;#39; line above, and uncomment the&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># line below.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># value: env&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>33.Job</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/33.job/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/33.job/</guid><description>&lt;h1 id="job">Job&lt;/h1>
&lt;p>Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束。&lt;/p>
&lt;h2 id="job-spec-格式">Job Spec 格式&lt;/h2>
&lt;ul>
&lt;li>spec.template 格式同 Pod&lt;/li>
&lt;li>RestartPolicy 仅支持 Never 或 OnFailure&lt;/li>
&lt;li>单个 Pod 时，默认 Pod 成功运行后 Job 即结束&lt;/li>
&lt;li>&lt;code>.spec.completions&lt;/code> 标志 Job 结束需要成功运行的 Pod 个数，默认为 1&lt;/li>
&lt;li>&lt;code>.spec.parallelism&lt;/code> 标志并行运行的 Pod 的个数，默认为 1&lt;/li>
&lt;li>&lt;code>spec.activeDeadlineSeconds&lt;/code> 标志失败 Pod 的重试最大时间，超过这个时间不会继续重试&lt;/li>
&lt;/ul>
&lt;p>一个简单的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">batch/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Job&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">perl&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;perl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-Mbignum=bpi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-wle&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;print bpi(2000)&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">$ kubectl create -f ./job.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">job &amp;#34;pi&amp;#34; created&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">$ pods=$(kubectl get pods --selector=job-name=pi --output=jsonpath={.items..metadata.name})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">$ kubectl logs $pods -c pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="m">3.141592653589793238462643383279502&lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bare-pod">Bare Pod&lt;/h2>
&lt;p>所谓 Bare Pod 是指直接用 PodSpec 来创建的 Pod（即不在 ReplicaSet 或者 ReplicationController 的管理之下的 Pod）。这些 Pod 在 Node 重启后不会自动重启，但 Job 则会创建新的 Pod 继续任务。所以，推荐使用 Job 来替代 Bare Pod，即便是应用只需要一个 Pod。&lt;/p></description></item><item><title>34.CronJob</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/34.cronjob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/34.cronjob/</guid><description>&lt;h1 id="cronjob">CronJob&lt;/h1>
&lt;p>&lt;strong>Cron Job&lt;/strong> 管理基于时间的 &lt;a href="https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/" target="_blank" rel="noopener">Job&lt;/a>，即：&lt;/p>
&lt;ul>
&lt;li>在给定时间点只运行一次&lt;/li>
&lt;li>周期性地在给定时间点运行&lt;/li>
&lt;/ul>
&lt;p>一个 CronJob 对象类似于 &lt;em>crontab&lt;/em> （cron table）文件中的一行。它根据指定的预定计划周期性地运行一个 Job，格式可以参考 &lt;a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener">Cron&lt;/a> 。&lt;/p>
&lt;h2 id="前提条件">前提条件&lt;/h2>
&lt;p>当前使用的 Kubernetes 集群，版本 &amp;gt;= 1.8（对 CronJob）。对于先前版本的集群，版本 &amp;lt; 1.8，启动 API Server（参考 &lt;a href="https://kubernetes.io/docs/admin/cluster-management/#turn-on-or-off-an-api-version-for-your-cluster" target="_blank" rel="noopener">为集群开启或关闭 API 版本&lt;/a> 获取更多信息）时，通过传递选项 &lt;code>--runtime-config=batch/v2alpha1=true&lt;/code> 可以开启 batch/v2alpha1 API。&lt;/p>
&lt;p>典型的用法如下所示：&lt;/p>
&lt;ul>
&lt;li>在给定的时间点调度 Job 运行&lt;/li>
&lt;li>创建周期性运行的 Job，例如：数据库备份、发送邮件。&lt;/li>
&lt;/ul>
&lt;h2 id="cronjob-spec">CronJob Spec&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>.spec.schedule&lt;/code>：&lt;strong>调度&lt;/strong>，必需字段，指定任务运行周期，格式同 &lt;a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener">Cron&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.jobTemplate&lt;/code>：&lt;strong>Job 模板&lt;/strong>，必需字段，指定需要运行的任务，格式同 &lt;a href="../job">Job&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.startingDeadlineSeconds&lt;/code> ：&lt;strong>启动 Job 的期限（秒级别）&lt;/strong>，该字段是可选的。如果因为任何原因而错过了被调度的时间，那么错过执行时间的 Job 将被认为是失败的。如果没有指定，则没有期限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.concurrencyPolicy&lt;/code>：&lt;strong>并发策略&lt;/strong>，该字段也是可选的。它指定了如何处理被 Cron Job 创建的 Job 的并发执行。只允许指定下面策略中的一种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Allow&lt;/code>（默认）：允许并发运行 Job&lt;/li>
&lt;li>&lt;code>Forbid&lt;/code>：禁止并发运行，如果前一个还没有完成，则直接跳过下一个&lt;/li>
&lt;li>&lt;code>Replace&lt;/code>：取消当前正在运行的 Job，用一个新的来替换&lt;/li>
&lt;/ul>
&lt;p>注意，当前策略只能应用于同一个 Cron Job 创建的 Job。如果存在多个 Cron Job，它们创建的 Job 之间总是允许并发运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.suspend&lt;/code> ：&lt;strong>挂起&lt;/strong>，该字段也是可选的。如果设置为 &lt;code>true&lt;/code>，后续所有执行都会被挂起。它对已经开始执行的 Job 不起作用。默认值为 &lt;code>false&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.successfulJobsHistoryLimit&lt;/code> 和 &lt;code>.spec.failedJobsHistoryLimit&lt;/code> ：&lt;strong>历史限制&lt;/strong>，是可选的字段。它们指定了可以保留多少完成和失败的 Job。&lt;/p>
&lt;p>默认情况下，它们分别设置为 &lt;code>3&lt;/code> 和 &lt;code>1&lt;/code>。设置限制的值为 &lt;code>0&lt;/code>，相关类型的 Job 完成后将不会被保留。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">batch/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">CronJob&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;*/1 * * * *&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">jobTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/bin/sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">date; echo Hello from the Kubernetes cluster&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">OnFailure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl create -f cronjob.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cronjob &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，也可以用&lt;code>kubectl run&lt;/code>来创建一个 CronJob：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl run hello --schedule&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*/1 * * * *&amp;#34;&lt;/span> --restart&lt;span class="o">=&lt;/span>OnFailure --image&lt;span class="o">=&lt;/span>busybox -- /bin/sh -c &lt;span class="s2">&amp;#34;date; echo Hello from the Kubernetes cluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get cronjob
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME SCHEDULE SUSPEND ACTIVE LAST-SCHEDULE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello */1 * * * * False &lt;span class="m">0&lt;/span> &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get &lt;span class="nb">jobs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED SUCCESSFUL AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello-1202039034 &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 49s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nv">pods&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl get pods --selector&lt;span class="o">=&lt;/span>job-name&lt;span class="o">=&lt;/span>hello-1202039034 --output&lt;span class="o">=&lt;/span>&lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">={&lt;/span>.items..metadata.name&lt;span class="o">}&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs &lt;span class="nv">$pods&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mon Aug &lt;span class="m">29&lt;/span> 21:34:09 UTC &lt;span class="m">2016&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello from the Kubernetes cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意，删除 cronjob 的时候不会自动删除 job，这些 job 可以用 kubectl delete job 来删除&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete cronjob hello
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cronjob &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span> deleted
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cron-job-限制">Cron Job 限制&lt;/h2>
&lt;p>Cron Job 在每次调度运行时间内 &lt;em>大概&lt;/em> 会创建一个 Job 对象。我们之所以说 &lt;em>大概&lt;/em> ，是因为在特定的环境下可能会创建两个 Job，或者一个 Job 都没创建。我们尝试少发生这种情况，但却不能完全避免。因此，创建 Job 操作应该是 &lt;em>幂等的&lt;/em>。&lt;/p>
&lt;p>Job 根据它所创建的 Pod 的并行度，负责重试创建 Pod，并就决定这一组 Pod 的成功或失败。Cron Job 根本就不会去检查 Pod。&lt;/p>
&lt;h2 id="删除-cron-job">删除 Cron Job&lt;/h2>
&lt;p>一旦不再需要 Cron Job，简单地可以使用 &lt;code>kubectl&lt;/code> 命令删除它：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl delete cronjob hello
cronjob &amp;#34;hello&amp;#34; deleted
&lt;/code>&lt;/pre>&lt;p>这将会终止正在创建的 Job。然而，运行中的 Job 将不会被终止，不会删除 Job 或 它们的 Pod。为了清理那些 Job 和 Pod，需要列出该 Cron Job 创建的全部 Job，然后删除它们：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl get jobs
NAME DESIRED SUCCESSFUL AGE
hello-1201907962 1 1 11m
hello-1202039034 1 1 8m
...
$ kubectl delete jobs hello-1201907962 hello-1202039034 ...
job &amp;#34;hello-1201907962&amp;#34; deleted
job &amp;#34;hello-1202039034&amp;#34; deleted
...
&lt;/code>&lt;/pre>&lt;p>一旦 Job 被删除，由 Job 创建的 Pod 也会被删除。注意，所有由名称为 “hello” 的 Cron Job 创建的 Job 会以前缀字符串 “hello-” 进行命名。如果想要删除当前 Namespace 中的所有 Job，可以通过命令 &lt;code>kubectl delete jobs --all&lt;/code> 立刻删除它们。&lt;/p></description></item><item><title>34.Ingress 控制器</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/34.ingress-%E6%8E%A7%E5%88%B6%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/34.ingress-%E6%8E%A7%E5%88%B6%E5%99%A8/</guid><description>&lt;h1 id="ingress-控制器">Ingress 控制器&lt;/h1>
&lt;p>为了使 Ingress 正常工作，集群中必须运行 Ingress controller。这与其他类型的控制器不同，其他类型的控制器通常作为 &lt;code>kube-controller-manager&lt;/code> 二进制文件的一部分运行，在集群启动时自动启动。你需要选择最适合自己集群的 Ingress controller 或者自己实现一个。&lt;/p>
&lt;p>Kubernetes 社区和众多厂商开发了大量的 Ingress Controller，你可以在 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/" target="_blank" rel="noopener">这里&lt;/a> 找到。&lt;/p>
&lt;h2 id="使用多个-ingress-控制器">使用多个 Ingress 控制器&lt;/h2>
&lt;p>你可以使用 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class" target="_blank" rel="noopener">IngressClass&lt;/a> 在集群中部署任意数量的 Ingress 控制器。请注意你的 Ingress 类资源的 &lt;code>.metadata.name&lt;/code> 字段。当你创建 Ingress 时，你需要用此字段的值来设置 Ingress 对象的 &lt;code>ingressClassName&lt;/code> 字段（请参考 &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressSpec" target="_blank" rel="noopener">IngressSpec v1 reference&lt;/a>）。&lt;code>ingressClassName&lt;/code> 是之前的&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation" target="_blank" rel="noopener">注解&lt;/a>做法的替代。&lt;/p>
&lt;p>如果你不为 Ingress 指定 IngressClass，并且你的集群中只有一个 IngressClass 被标记为了集群默认，那么 Kubernetes 会应用此&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#default-ingress-class" target="_blank" rel="noopener">默认 IngressClass&lt;/a>。你可以通过将 &lt;a href="https://kubernetes.io/docs/reference/labels-annotations-taints/#ingressclass-kubernetes-io-is-default-class" target="_blank" rel="noopener">&lt;code>ingressclass.kubernetes.io/is-default-class&lt;/code> 注解&lt;/a> 的值设置为 &lt;code>&amp;quot;true&amp;quot;&lt;/code> 来将一个 IngressClass 标记为集群默认。&lt;/p>
&lt;p>理想情况下，所有 Ingress 控制器都应满足此规范，但各种 Ingress 控制器的操作略有不同。&lt;/p></description></item><item><title>37.准入控制器（Admission Controller）</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/37.%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6%E5%99%A8admission-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/37.%E5%87%86%E5%85%A5%E6%8E%A7%E5%88%B6%E5%99%A8admission-controller/</guid><description>&lt;h1 id="准入控制器admission-controller">准入控制器（Admission Controller）&lt;/h1>
&lt;p>准入控制器（Admission Controller）位于 API Server 中，在对象被持久化之前，准入控制器拦截对 API Server 的请求，一般用来做身份验证和授权。其中包含两个特殊的控制器：&lt;code>MutatingAdmissionWebhook&lt;/code> 和 &lt;code>ValidatingAdmissionWebhook&lt;/code>。分别作为配置的变异和验证&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/#admission-webhooks" target="_blank" rel="noopener">准入控制 webhook&lt;/a>。&lt;/p>
&lt;p>准入控制器包括以下两种：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>变更（Mutating）准入控制&lt;/strong>：修改请求的对象&lt;/li>
&lt;li>&lt;strong>验证（Validating）准入控制&lt;/strong>：验证请求的对象&lt;/li>
&lt;/ul>
&lt;p>准入控制器是在 API Server 的启动参数重配置的。一个准入控制器可能属于以上两者中的一种，也可能两者都属于。当请求到达 API Server 的时候首先执行变更准入控制，然后再执行验证准入控制。&lt;/p>
&lt;p>我们在部署 Kubernetes 集群的时候都会默认开启一系列准入控制器，如果没有设置这些准入控制器的话可以说你的 Kubernetes 集群就是在裸奔，应该只有集群管理员可以修改集群的准入控制器。&lt;/p>
&lt;p>例如我会默认开启如下的准入控制器。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--admission-control&lt;span class="o">=&lt;/span>ServiceAccount,NamespaceLifecycle,NamespaceExists,LimitRanger,ResourceQuota,MutatingAdmissionWebhook,ValidatingAdmissionWebhook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="准入控制器列表">准入控制器列表&lt;/h2>
&lt;p>Kubernetes 目前支持的准入控制器有：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>AlwaysPullImages&lt;/strong>：此准入控制器修改每个 Pod 的时候都强制重新拉取镜像。&lt;/li>
&lt;li>&lt;strong>DefaultStorageClass&lt;/strong>：此准入控制器观察创建&lt;code>PersistentVolumeClaim&lt;/code>时不请求任何特定存储类的对象，并自动向其添加默认存储类。这样，用户就不需要关注特殊存储类而获得默认存储类。&lt;/li>
&lt;li>&lt;strong>DefaultTolerationSeconds&lt;/strong>：此准入控制器将 Pod 的容忍时间&lt;code>notready:NoExecute&lt;/code>和&lt;code>unreachable:NoExecute&lt;/code> 默认设置为 5 分钟。&lt;/li>
&lt;li>&lt;strong>DenyEscalatingExec&lt;/strong>：此准入控制器将拒绝&lt;code>exec&lt;/code> 和附加命令到以允许访问宿主机的升级了权限运行的 pod。&lt;/li>
&lt;li>&lt;strong>EventRateLimit (alpha)&lt;/strong>：此准入控制器缓解了 API Server 被事件请求淹没的问题，限制时间速率。&lt;/li>
&lt;li>&lt;strong>ExtendedResourceToleration&lt;/strong>：此插件有助于创建具有扩展资源的专用节点。&lt;/li>
&lt;li>&lt;strong>ImagePolicyWebhook&lt;/strong>：此准入控制器允许后端判断镜像拉取策略，例如配置镜像仓库的密钥。&lt;/li>
&lt;li>&lt;strong>Initializers (alpha)&lt;/strong>：Pod 初始化的准入控制器，详情请参考&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/extensible-admission-controllers/" target="_blank" rel="noopener">动态准入控制&lt;/a>。&lt;/li>
&lt;li>&lt;strong>LimitPodHardAntiAffinityTopology&lt;/strong>：此准入控制器拒绝任何在 &lt;code>requiredDuringSchedulingRequiredDuringExecution&lt;/code> 的 &lt;code>AntiAffinity &lt;/code> 字段中定义除了&lt;code>kubernetes.io/hostname&lt;/code> 之外的拓扑关键字的 pod 。&lt;/li>
&lt;li>&lt;strong>LimitRanger&lt;/strong>：此准入控制器将确保所有资源请求不会超过 namespace 的 &lt;code>LimitRange&lt;/code>。&lt;/li>
&lt;li>&lt;strong>MutatingAdmissionWebhook （1.9 版本中为 beta）&lt;/strong>：该准入控制器调用与请求匹配的任何变更 webhook。匹配的 webhook 是串行调用的；如果需要，每个人都可以修改对象。&lt;/li>
&lt;li>&lt;strong>NamespaceAutoProvision&lt;/strong>：此准入控制器检查命名空间资源上的所有传入请求，并检查引用的命名空间是否存在。如果不存在就创建一个命名空间。&lt;/li>
&lt;li>&lt;strong>NamespaceExists&lt;/strong>：此许可控制器检查除 &lt;code>Namespace&lt;/code> 其自身之外的命名空间资源上的所有请求。如果请求引用的命名空间不存在，则拒绝该请求。&lt;/li>
&lt;li>&lt;strong>NamespaceLifecycle&lt;/strong>：此准入控制器强制执行正在终止的命令空间中不能创建新对象，并确保&lt;code>Namespace&lt;/code>拒绝不存在的请求。此准入控制器还防止缺失三个系统保留的命名空间&lt;code>default&lt;/code>、&lt;code>kube-system&lt;/code>、&lt;code>kube-public&lt;/code>。&lt;/li>
&lt;li>&lt;strong>NodeRestriction&lt;/strong>：该准入控制器限制了 kubelet 可以修改的&lt;code>Node&lt;/code>和&lt;code>Pod&lt;/code>对象。&lt;/li>
&lt;li>&lt;strong>OwnerReferencesPermissionEnforcement&lt;/strong>：此准入控制器保护对&lt;code>metadata.ownerReferences&lt;/code>对象的访问，以便只有对该对象具有“删除”权限的用户才能对其进行更改。&lt;/li>
&lt;li>&lt;strong>PodNodeSelector&lt;/strong>：此准入控制器通过读取命名空间注释和全局配置来限制可在命名空间内使用的节点选择器。&lt;/li>
&lt;li>&lt;strong>PodPreset&lt;/strong>：此准入控制器注入一个 pod，其中包含匹配的 PodPreset 中指定的字段，详细信息见&lt;a href="../pod-preset">Pod Preset&lt;/a>。&lt;/li>
&lt;li>&lt;strong>PodSecurityPolicy&lt;/strong>：此准入控制器用于创建和修改 pod，并根据请求的安全上下文和可用的 Pod 安全策略确定是否应该允许它。&lt;/li>
&lt;li>&lt;strong>PodTolerationRestriction&lt;/strong>：此准入控制器首先验证容器的容忍度与其命名空间的容忍度之间是否存在冲突，并在存在冲突时拒绝该容器请求。&lt;/li>
&lt;li>&lt;strong>Priority&lt;/strong>：此控制器使用&lt;code>priorityClassName&lt;/code>字段并填充优先级的整数值。如果未找到优先级，则拒绝 Pod。&lt;/li>
&lt;li>&lt;strong>ResourceQuota&lt;/strong>：此准入控制器将观察传入请求并确保它不违反命名空间的&lt;code>ResourceQuota&lt;/code>对象中列举的任何约束。&lt;/li>
&lt;li>&lt;strong>SecurityContextDeny&lt;/strong>：此准入控制器将拒绝任何试图设置某些升级的&lt;a href="https://kubernetes.io/docs/user-guide/security-context" target="_blank" rel="noopener">SecurityContext&lt;/a>字段的 pod 。&lt;/li>
&lt;li>&lt;strong>ServiceAccount&lt;/strong>：此准入控制器实现&lt;a href="https://kubernetes.io/docs/user-guide/service-accounts" target="_blank" rel="noopener">serviceAccounts 的&lt;/a>自动化。&lt;/li>
&lt;li>&lt;strong>用中的存储对象保护&lt;/strong>：该&lt;code>StorageObjectInUseProtection&lt;/code>插件将&lt;code>kubernetes.io/pvc-protection&lt;/code>或&lt;code>kubernetes.io/pv-protection&lt;/code>终结器添加到新创建的持久卷声明（PVC）或持久卷（PV）。在用户删除 PVC 或 PV 的情况下，PVC 或 PV 不会被移除，直到 PVC 或 PV 保护控制器从 PVC 或 PV 中移除终结器。有关更多详细信息，请参阅使用中的&lt;a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/#storage-object-in-use-protection" target="_blank" rel="noopener">存储对象保护&lt;/a>。&lt;/li>
&lt;li>&lt;strong>ValidatingAdmissionWebhook（1.8 版本中为 alpha；1.9 版本中为 beta）&lt;/strong>：该准入控制器调用与请求匹配的任何验证 webhook。匹配的 webhooks 是并行调用的；如果其中任何一个拒绝请求，则请求失败。&lt;/li>
&lt;/ul>
&lt;h2 id="推荐配置">推荐配置&lt;/h2>
&lt;p>&lt;strong>Kubernetes 1.10+&lt;/strong>&lt;/p>
&lt;p>对于 Kubernetes 1.10 及更高版本，我们建议使用&lt;code>--enable-admission-plugins&lt;/code>标志运行以下一组准入控制器（&lt;strong>顺序无关紧要&lt;/strong>）。&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意：&lt;/strong> &lt;code>--admission-control&lt;/code>在 1.10 中已弃用并替换为&lt;code>--enable-admission-plugins&lt;/code>。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--enable-admission-plugins&lt;span class="o">=&lt;/span>NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>对于 Kubernetes 1.9 及更早版本，我们建议使用&lt;code>--admission-control&lt;/code>标志（&lt;strong>顺序有关&lt;/strong>）运行以下一组许可控制器。&lt;/p>
&lt;p>&lt;strong>Kubernetes 1.9&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--admission-control&lt;span class="o">=&lt;/span>NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,DefaultTolerationSeconds,MutatingAdmissionWebhook,ValidatingAdmissionWebhook,ResourceQuota
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>值得重申的是，在 1.9 中，这些发生在变更阶段和验证阶段，并且例如&lt;code>ResourceQuota&lt;/code>在验证阶段运行，因此是运行的最后一个准入控制器。&lt;code>MutatingAdmissionWebhook&lt;/code>在此列表中出现在它之前，因为它在变更阶段运行。&lt;/p>
&lt;p>对于早期版本，没有验证准入控制器和变更准入控制器的概念，并且准入控制器以指定的确切顺序运行。&lt;/p>
&lt;p>&lt;strong>Kubernetes 1.6 - 1.8&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">--admission-control&lt;span class="o">=&lt;/span>NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,ResourceQuota,DefaultTolerationSeconds
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/" target="_blank" rel="noopener">Using Admission Controllers - kubernetes.io&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>cronjob</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/cronjob/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/cronjob/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 34
title: CronJob
date: &amp;lsquo;2022-05-21T00:00:00+08:00&amp;rsquo;
type: book&lt;/h2>
&lt;p>&lt;em>Cron Job&lt;/em> 管理基于时间的 &lt;a href="https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/" target="_blank" rel="noopener">Job&lt;/a>，即：&lt;/p>
&lt;ul>
&lt;li>在给定时间点只运行一次&lt;/li>
&lt;li>周期性地在给定时间点运行&lt;/li>
&lt;/ul>
&lt;p>一个 CronJob 对象类似于 &lt;em>crontab&lt;/em> （cron table）文件中的一行。它根据指定的预定计划周期性地运行一个 Job，格式可以参考 &lt;a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener">Cron&lt;/a> 。&lt;/p>
&lt;h2 id="前提条件">前提条件&lt;/h2>
&lt;p>当前使用的 Kubernetes 集群，版本 &amp;gt;= 1.8（对 CronJob）。对于先前版本的集群，版本 &amp;lt; 1.8，启动 API Server（参考 &lt;a href="https://kubernetes.io/docs/admin/cluster-management/#turn-on-or-off-an-api-version-for-your-cluster" target="_blank" rel="noopener">为集群开启或关闭 API 版本&lt;/a> 获取更多信息）时，通过传递选项 &lt;code>--runtime-config=batch/v2alpha1=true&lt;/code> 可以开启 batch/v2alpha1 API。&lt;/p>
&lt;p>典型的用法如下所示：&lt;/p>
&lt;ul>
&lt;li>在给定的时间点调度 Job 运行&lt;/li>
&lt;li>创建周期性运行的 Job，例如：数据库备份、发送邮件。&lt;/li>
&lt;/ul>
&lt;h2 id="cronjob-spec">CronJob Spec&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;code>.spec.schedule&lt;/code>：&lt;strong>调度&lt;/strong>，必需字段，指定任务运行周期，格式同 &lt;a href="https://en.wikipedia.org/wiki/Cron" target="_blank" rel="noopener">Cron&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.jobTemplate&lt;/code>：&lt;strong>Job 模板&lt;/strong>，必需字段，指定需要运行的任务，格式同 &lt;a href="../job">Job&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.startingDeadlineSeconds&lt;/code> ：&lt;strong>启动 Job 的期限（秒级别）&lt;/strong>，该字段是可选的。如果因为任何原因而错过了被调度的时间，那么错过执行时间的 Job 将被认为是失败的。如果没有指定，则没有期限&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.concurrencyPolicy&lt;/code>：&lt;strong>并发策略&lt;/strong>，该字段也是可选的。它指定了如何处理被 Cron Job 创建的 Job 的并发执行。只允许指定下面策略中的一种：&lt;/p>
&lt;ul>
&lt;li>&lt;code>Allow&lt;/code>（默认）：允许并发运行 Job&lt;/li>
&lt;li>&lt;code>Forbid&lt;/code>：禁止并发运行，如果前一个还没有完成，则直接跳过下一个&lt;/li>
&lt;li>&lt;code>Replace&lt;/code>：取消当前正在运行的 Job，用一个新的来替换&lt;/li>
&lt;/ul>
&lt;p>注意，当前策略只能应用于同一个 Cron Job 创建的 Job。如果存在多个 Cron Job，它们创建的 Job 之间总是允许并发运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.suspend&lt;/code> ：&lt;strong>挂起&lt;/strong>，该字段也是可选的。如果设置为 &lt;code>true&lt;/code>，后续所有执行都会被挂起。它对已经开始执行的 Job 不起作用。默认值为 &lt;code>false&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>.spec.successfulJobsHistoryLimit&lt;/code> 和 &lt;code>.spec.failedJobsHistoryLimit&lt;/code> ：&lt;strong>历史限制&lt;/strong>，是可选的字段。它们指定了可以保留多少完成和失败的 Job。&lt;/p>
&lt;p>默认情况下，它们分别设置为 &lt;code>3&lt;/code> 和 &lt;code>1&lt;/code>。设置限制的值为 &lt;code>0&lt;/code>，相关类型的 Job 完成后将不会被保留。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">batch/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">CronJob&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">schedule&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;*/1 * * * *&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">jobTemplate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">hello&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">busybox&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">args&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">/bin/sh&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- -&lt;span class="l">c&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">date; echo Hello from the Kubernetes cluster&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">OnFailure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl create -f cronjob.yaml
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cronjob &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，也可以用&lt;code>kubectl run&lt;/code>来创建一个CronJob：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl run hello --schedule&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;*/1 * * * *&amp;#34;&lt;/span> --restart&lt;span class="o">=&lt;/span>OnFailure --image&lt;span class="o">=&lt;/span>busybox -- /bin/sh -c &lt;span class="s2">&amp;#34;date; echo Hello from the Kubernetes cluster&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get cronjob
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME SCHEDULE SUSPEND ACTIVE LAST-SCHEDULE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello */1 * * * * False &lt;span class="m">0&lt;/span> &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get &lt;span class="nb">jobs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED SUCCESSFUL AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">hello-1202039034 &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 49s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nv">pods&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>kubectl get pods --selector&lt;span class="o">=&lt;/span>job-name&lt;span class="o">=&lt;/span>hello-1202039034 --output&lt;span class="o">=&lt;/span>&lt;span class="nv">jsonpath&lt;/span>&lt;span class="o">={&lt;/span>.items..metadata.name&lt;span class="o">}&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl logs &lt;span class="nv">$pods&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Mon Aug &lt;span class="m">29&lt;/span> 21:34:09 UTC &lt;span class="m">2016&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Hello from the Kubernetes cluster
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 注意，删除 cronjob 的时候不会自动删除 job，这些 job 可以用 kubectl delete job 来删除&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl delete cronjob hello
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cronjob &lt;span class="s2">&amp;#34;hello&amp;#34;&lt;/span> deleted
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cron-job-限制">Cron Job 限制&lt;/h2>
&lt;p>Cron Job 在每次调度运行时间内 &lt;em>大概&lt;/em> 会创建一个 Job 对象。我们之所以说 &lt;em>大概&lt;/em> ，是因为在特定的环境下可能会创建两个 Job，或者一个 Job 都没创建。我们尝试少发生这种情况，但却不能完全避免。因此，创建 Job 操作应该是 &lt;em>幂等的&lt;/em>。&lt;/p>
&lt;p>Job 根据它所创建的 Pod 的并行度，负责重试创建 Pod，并就决定这一组 Pod 的成功或失败。Cron Job 根本就不会去检查 Pod。&lt;/p>
&lt;h2 id="删除-cron-job">删除 Cron Job&lt;/h2>
&lt;p>一旦不再需要 Cron Job，简单地可以使用 &lt;code>kubectl&lt;/code> 命令删除它：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl delete cronjob hello
cronjob &amp;#34;hello&amp;#34; deleted
&lt;/code>&lt;/pre>&lt;p>这将会终止正在创建的 Job。然而，运行中的 Job 将不会被终止，不会删除 Job 或 它们的 Pod。为了清理那些 Job 和 Pod，需要列出该 Cron Job 创建的全部 Job，然后删除它们：&lt;/p>
&lt;pre tabindex="0">&lt;code>$ kubectl get jobs
NAME DESIRED SUCCESSFUL AGE
hello-1201907962 1 1 11m
hello-1202039034 1 1 8m
...
$ kubectl delete jobs hello-1201907962 hello-1202039034 ...
job &amp;#34;hello-1201907962&amp;#34; deleted
job &amp;#34;hello-1202039034&amp;#34; deleted
...
&lt;/code>&lt;/pre>&lt;p>一旦 Job 被删除，由 Job 创建的 Pod 也会被删除。注意，所有由名称为 “hello” 的 Cron Job 创建的 Job 会以前缀字符串 “hello-” 进行命名。如果想要删除当前 Namespace 中的所有 Job，可以通过命令 &lt;code>kubectl delete jobs --all&lt;/code> 立刻删除它们。&lt;/p></description></item><item><title>daemonset</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/daemonset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/daemonset/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 31
title: DaemonSet
date: &amp;lsquo;2022-05-21T00:00:00+08:00&amp;rsquo;
type: book&lt;/h2>
&lt;p>本文将为您介绍 DaemonSet 的基本概念。&lt;/p>
&lt;h2 id="什么是-daemonset">什么是 DaemonSet？&lt;/h2>
&lt;p>&lt;em>DaemonSet&lt;/em> 确保全部（或者一些）Node 上运行一个 Pod 的副本。当有 Node 加入集群时，也会为他们新增一个 Pod 。当有 Node 从集群移除时，这些 Pod 也会被回收。删除 DaemonSet 将会删除它创建的所有 Pod。&lt;/p>
&lt;p>使用 DaemonSet 的一些典型用法：&lt;/p>
&lt;ul>
&lt;li>运行集群存储 daemon，例如在每个 Node 上运行 &lt;code>glusterd&lt;/code>、&lt;code>ceph&lt;/code>。&lt;/li>
&lt;li>在每个 Node 上运行日志收集 daemon，例如&lt;code>fluentd&lt;/code>、&lt;code>logstash&lt;/code>。&lt;/li>
&lt;li>在每个 Node 上运行监控 daemon，例如 &lt;a href="https://github.com/prometheus/node_exporter" target="_blank" rel="noopener">Prometheus Node Exporter&lt;/a>、&lt;code>collectd&lt;/code>、Datadog 代理、New Relic 代理，或 Ganglia &lt;code>gmond&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>一个简单的用法是，在所有的 Node 上都存在一个 DaemonSet，将被作为每种类型的 daemon 使用。
一个稍微复杂的用法可能是，对单独的每种类型的 daemon 使用多个 DaemonSet，但具有不同的标志，和/或对不同硬件类型具有不同的内存、CPU要求。&lt;/p>
&lt;h2 id="编写-daemonset-spec">编写 DaemonSet Spec&lt;/h2>
&lt;h3 id="必需字段">必需字段&lt;/h3>
&lt;p>和其它所有 Kubernetes 配置一样，DaemonSet 需要 &lt;code>apiVersion&lt;/code>、&lt;code>kind&lt;/code> 和 &lt;code>metadata&lt;/code>字段。有关配置文件的通用信息，详见文档 &lt;a href="https://kubernetes.io/docs/user-guide/deploying-applications/" target="_blank" rel="noopener">部署应用&lt;/a>、&lt;a href="https://kubernetes.io/docs/user-guide/configuring-containers/" target="_blank" rel="noopener">配置容器&lt;/a> 和资源管理。&lt;/p>
&lt;p>DaemonSet 也需要一个 &lt;code>.spec&lt;/code>配置段。&lt;/p>
&lt;h3 id="pod-模板">Pod 模板&lt;/h3>
&lt;p>&lt;code>.spec&lt;/code> 唯一必需的字段是 &lt;code>.spec.template&lt;/code>。&lt;/p>
&lt;p>&lt;code>.spec.template&lt;/code> 是一个 &lt;a href="https://kubernetes.io/docs/user-guide/replication-controller/#pod-template" target="_blank" rel="noopener">Pod 模板&lt;/a>。
它与 &lt;a href="https://kubernetes.io/docs/user-guide/pods" target="_blank" rel="noopener">Pod&lt;/a> 具有相同的 schema，除了它是嵌套的，而且不具有 &lt;code>apiVersion&lt;/code> 或 &lt;code>kind&lt;/code> 字段。&lt;/p>
&lt;p>Pod 除了必须字段外，在 DaemonSet 中的 Pod 模板必须指定合理的标签（查看 &lt;a href="#pod-selector">pod selector&lt;/a>）。&lt;/p>
&lt;p>在 DaemonSet 中的 Pod 模板必需具有一个值为 &lt;code>Always&lt;/code> 的 &lt;a href="https://kubernetes.io/docs/user-guide/pod-states" target="_blank" rel="noopener">&lt;code>RestartPolicy&lt;/code>&lt;/a>，或者未指定它的值，默认是 &lt;code>Always&lt;/code>。&lt;/p>
&lt;h3 id="pod-selector">Pod Selector&lt;/h3>
&lt;p>&lt;code>.spec.selector&lt;/code> 字段表示 Pod Selector，它与 &lt;a href="https://kubernetes.io/docs/concepts/jobs/run-to-completion-finite-workloads/" target="_blank" rel="noopener">Job&lt;/a> 或其它资源的 &lt;code>.spec.selector&lt;/code> 的原理是相同的。&lt;/p>
&lt;p>&lt;code>spec.selector&lt;/code> 表示一个对象，它由如下两个字段组成：&lt;/p>
&lt;ul>
&lt;li>&lt;code>matchLabels&lt;/code> - 与 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller/" target="_blank" rel="noopener">ReplicationController&lt;/a> 的 &lt;code>.spec.selector&lt;/code> 的原理相同。&lt;/li>
&lt;li>&lt;code>matchExpressions&lt;/code> - 允许构建更加复杂的 Selector，可以通过指定 key、value 列表，以及与 key 和 value 列表的相关的操作符。&lt;/li>
&lt;/ul>
&lt;p>当上述两个字段都指定时，结果表示的是 AND 关系。&lt;/p>
&lt;p>如果指定了 &lt;code>.spec.selector&lt;/code>，必须与 &lt;code>.spec.template.metadata.labels&lt;/code> 相匹配。如果没有指定，它们默认是等价的。如果与它们配置的不匹配，则会被 API 拒绝。&lt;/p>
&lt;p>如果 Pod 的 label 与 selector 匹配，或者直接基于其它的 DaemonSet、或者 Controller（例如 ReplicationController），也不可以创建任何 Pod。
否则 DaemonSet Controller 将认为那些 Pod 是它创建的。Kubernetes 不会阻止这样做。一个场景是，可能希望在一个具有不同值的、用来测试用的 Node 上手动创建 Pod。&lt;/p>
&lt;h3 id="仅在相同的-node-上运行-pod">仅在相同的 Node 上运行 Pod&lt;/h3>
&lt;p>如果指定了 &lt;code>.spec.template.spec.nodeSelector&lt;/code>，DaemonSet Controller 将在能够匹配上 &lt;a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/" target="_blank" rel="noopener">Node Selector&lt;/a> 的 Node 上创建 Pod。
类似这种情况，可以指定 &lt;code>.spec.template.spec.affinity&lt;/code>，然后 DaemonSet Controller 将在能够匹配上 &lt;a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/" target="_blank" rel="noopener">Node Affinity&lt;/a> 的 Node 上创建 Pod。
如果根本就没有指定，则 DaemonSet Controller 将在所有 Node 上创建 Pod。&lt;/p>
&lt;h2 id="如何调度-daemon-pod">如何调度 Daemon Pod&lt;/h2>
&lt;p>正常情况下，Pod 运行在哪个机器上是由 Kubernetes 调度器进行选择的。然而，由 Daemon Controller 创建的 Pod 已经确定了在哪个机器上（Pod 创建时指定了 &lt;code>.spec.nodeName&lt;/code>），因此：&lt;/p>
&lt;ul>
&lt;li>DaemonSet Controller 并不关心一个 Node 的 &lt;a href="https://kubernetes.io/docs/admin/node/#manual-node-administration" target="_blank" rel="noopener">&lt;code>unschedulable&lt;/code>&lt;/a> 字段。&lt;/li>
&lt;li>DaemonSet Controller 可以创建 Pod，即使调度器还没有被启动，这对集群启动是非常有帮助的。&lt;/li>
&lt;/ul>
&lt;p>Daemon Pod 关心 &lt;a href="https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature" target="_blank" rel="noopener">Taint 和 Toleration&lt;/a>，它们会为没有指定 &lt;code>tolerationSeconds&lt;/code> 的 &lt;code>node.alpha.kubernetes.io/notReady&lt;/code> 和 &lt;code>node.alpha.kubernetes.io/unreachable&lt;/code> 的 Taint，而创建具有 &lt;code>NoExecute&lt;/code> 的 Toleration。这确保了当 alpha 特性的 &lt;code>TaintBasedEvictions&lt;/code> 被启用，当 Node 出现故障，比如网络分区，这时它们将不会被清除掉（当 &lt;code>TaintBasedEvictions&lt;/code> 特性没有启用，在这些场景下也不会被清除，但会因为 NodeController 的硬编码行为而被清除，Toleration 是不会的）。&lt;/p>
&lt;h2 id="与-daemon-pod-通信">与 Daemon Pod 通信&lt;/h2>
&lt;p>与 DaemonSet 中的 Pod 进行通信，几种可能的模式如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Push&lt;/strong>：配置 DaemonSet 中的 Pod 向其它 Service 发送更新，例如统计数据库。它们没有客户端。&lt;/li>
&lt;li>&lt;strong>NodeIP 和已知端口&lt;/strong>：DaemonSet 中的 Pod 可以使用 &lt;code>hostPort&lt;/code>，从而可以通过 Node IP 访问到 Pod。客户端能通过某种方法知道 Node IP 列表，并且基于此也可以知道端口。&lt;/li>
&lt;li>&lt;strong>DNS&lt;/strong>：创建具有相同 Pod Selector 的 &lt;a href="https://kubernetes.io/docs/user-guide/services/#headless-services" target="_blank" rel="noopener">Headless Service&lt;/a>，然后通过使用 &lt;code>endpoints&lt;/code> 资源或从 DNS 检索到多个 A 记录来发现 DaemonSet。&lt;/li>
&lt;li>&lt;strong>Service&lt;/strong>：创建具有相同 Pod Selector 的 Service，并使用该 Service 访问到某个随机 Node 上的 daemon。（没有办法访问到特定 Node）&lt;/li>
&lt;/ul>
&lt;h2 id="更新-daemonset">更新 DaemonSet&lt;/h2>
&lt;p>如果修改了 Node Label，DaemonSet 将立刻向新匹配上的 Node 添加 Pod，同时删除新近无法匹配上的 Node 上的 Pod。&lt;/p>
&lt;p>可以修改 DaemonSet 创建的 Pod。然而，不允许对 Pod 的所有字段进行更新。当下次 Node（即使具有相同的名称）被创建时，DaemonSet Controller 还会使用最初的模板。&lt;/p>
&lt;p>可以删除一个 DaemonSet。如果使用 &lt;code>kubectl&lt;/code> 并指定 &lt;code>--cascade=false&lt;/code> 选项，则 Pod 将被保留在 Node 上。然后可以创建具有不同模板的新 DaemonSet。具有不同模板的新 DaemonSet 将鞥能够通过 Label 匹配识别所有已经存在的 Pod。它不会修改或删除它们，即使是错误匹配了 Pod 模板。通过删除 Pod 或者 删除 Node，可以强制创建新的 Pod。&lt;/p>
&lt;p>在 Kubernetes 1.6 或以后版本，可以在 DaemonSet 上 &lt;a href="https://kubernetes.io/docs/tasks/manage-daemon/update-daemon-set/" target="_blank" rel="noopener">执行滚动升级&lt;/a>。&lt;/p>
&lt;h3 id="init-脚本">init 脚本&lt;/h3>
&lt;p>很可能通过直接在一个 Node 上启动 daemon 进程（例如，使用 &lt;code>init&lt;/code>、&lt;code>upstartd&lt;/code>、或 &lt;code>systemd&lt;/code>）。这非常好，然而基于 DaemonSet 来运行这些进程有如下一些好处：&lt;/p>
&lt;ul>
&lt;li>像对待应用程序一样，具备为 daemon 提供监控和管理日志的能力。&lt;/li>
&lt;li>为 daemon 和应用程序使用相同的配置语言和工具（如 Pod 模板、&lt;code>kubectl&lt;/code>）。&lt;/li>
&lt;li>Kubernetes 未来版本可能会支持对 DaemonSet 创建 Pod 与 Node升级工作流进行集成。&lt;/li>
&lt;li>在资源受限的容器中运行 daemon，能够增加 daemon 和应用容器的隔离性。然而这也实现了在容器中运行 daemon，但却不能在 Pod 中运行（例如，直接基于 Docker 启动）。&lt;/li>
&lt;/ul>
&lt;h3 id="裸-pod">裸 Pod&lt;/h3>
&lt;p>可能要直接创建 Pod，同时指定其运行在特定的 Node 上。
然而，DaemonSet 替换了由于任何原因被删除或终止的 Pod，例如 Node 失败、例行节点维护，比如内核升级。由于这个原因，我们应该使用 DaemonSet 而不是单独创建 Pod。&lt;/p>
&lt;h3 id="静态-pod">静态 Pod&lt;/h3>
&lt;p>很可能，通过在一个指定目录下编写文件来创建 Pod，该目录受 Kubelet 所监视。这些 Pod 被称为 &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/static-pod/" target="_blank" rel="noopener">静态 Pod&lt;/a>。
不像 DaemonSet，静态 Pod 不受 kubectl 和 其它 Kubernetes API 客户端管理。静态 Pod 不依赖于 apiserver，这使得它们在集群启动的情况下非常有用。
而且，未来静态 Pod 可能会被废弃掉。&lt;/p>
&lt;h3 id="replication-controller">Replication Controller&lt;/h3>
&lt;p>DaemonSet 与 &lt;a href="https://kubernetes.io/docs/user-guide/replication-controller" target="_blank" rel="noopener">Replication Controller&lt;/a> 非常类似，它们都能创建 Pod，这些 Pod 都具有不期望被终止的进程（例如，Web 服务器、存储服务器）。
为无状态的 Service 使用 Replication Controller，像 frontend，实现对副本的数量进行扩缩容、平滑升级，比之于精确控制 Pod 运行在某个主机上要重要得多。需要 Pod 副本总是运行在全部或特定主机上，并需要先于其他 Pod 启动，当这被认为非常重要时，应该使用 Daemon Controller。&lt;/p></description></item><item><title>deployment</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/deployment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/deployment/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 29
title: Deployment
date: &amp;ldquo;2022-05-21T00:00:00+08:00&amp;rdquo;
type: book&lt;/h2>
&lt;p>Deployment 为 Pod 和 ReplicaSet 提供了一个声明式定义（declarative）方法，用来替代以前的 ReplicationController 来方便的管理应用。典型的应用场景包括：&lt;/p>
&lt;ul>
&lt;li>定义 Deployment 来创建 Pod 和 ReplicaSet&lt;/li>
&lt;li>滚动升级和回滚应用&lt;/li>
&lt;li>扩容和缩容&lt;/li>
&lt;li>暂停和继续 Deployment&lt;/li>
&lt;/ul>
&lt;p>比如一个简单的 nginx 应用可以定义为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx-deployment&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">nginx:1.7.9&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>扩容：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl scale deployment nginx-deployment --replicas &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果集群支持 horizontal pod autoscaling 的话，还可以为 Deployment 设置自动扩展：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl autoscale deployment nginx-deployment --min&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span> --max&lt;span class="o">=&lt;/span>&lt;span class="m">15&lt;/span> --cpu-percent&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>更新镜像也比较简单：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>回滚：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl rollout undo deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="deployment-结构示意图">Deployment 结构示意图&lt;/h2>
&lt;p>
&lt;figure id="figure-kubernetes-deployment-cheatsheet">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/book/kubernetes-handbook/deployment-cheatsheet.png" alt="kubernetes deployment cheatsheet" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Kubernetes Deployment Cheatsheet
&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h2 id="deployment-是什么">Deployment 是什么？&lt;/h2>
&lt;p>Deployment 为 Pod 和 Replica Set（下一代 Replication Controller）提供声明式更新。&lt;/p>
&lt;p>您只需要在 Deployment 中描述您想要的目标状态是什么，Deployment controller 就会帮您将 Pod 和 ReplicaSet 的实际状态改变到您的目标状态。您可以定义一个全新的 Deployment 来创建 ReplicaSet 或者删除已有的 Deployment 并创建一个新的来替换。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：您不该手动管理由 Deployment 创建的 ReplicaSet，否则您就篡越了 Deployment controller 的职责！下文罗列了 Deployment 对象中已经覆盖了所有的用例。如果未有覆盖您所有需要的用例，请直接在 Kubernetes 的代码库中提 issue。&lt;/p>
&lt;p>典型的用例如下：&lt;/p>
&lt;ul>
&lt;li>使用 Deployment 来创建 ReplicaSet。ReplicaSet 在后台创建 pod。检查启动状态，看它是成功还是失败。&lt;/li>
&lt;li>然后，通过更新 Deployment 的 PodTemplateSpec 字段来声明 Pod 的新状态。这会创建一个新的 ReplicaSet，Deployment 会按照控制的速率将 pod 从旧的 ReplicaSet 移动到新的 ReplicaSet 中。&lt;/li>
&lt;li>如果当前状态不稳定，回滚到之前的 Deployment revision。每次回滚都会更新 Deployment 的 revision。&lt;/li>
&lt;li>扩容 Deployment 以满足更高的负载。&lt;/li>
&lt;li>暂停 Deployment 来应用 PodTemplateSpec 的多个修复，然后恢复上线。&lt;/li>
&lt;li>根据 Deployment 的状态判断上线是否 hang 住了。&lt;/li>
&lt;li>清除旧的不必要的 ReplicaSet。&lt;/li>
&lt;/ul>
&lt;h2 id="创建-deployment">创建 Deployment&lt;/h2>
&lt;p>下面是一个 Deployment 示例，它创建了一个 ReplicaSet 来启动 3 个 nginx pod。&lt;/p>
&lt;p>下载示例文件并执行命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml --record
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> created
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>将 kubectl 的&lt;code>--record&lt;/code>的 flag 设置为&lt;code>true&lt;/code> 可以在 annotation 中记录当前命令创建或者升级了该资源。这在未来会很有用，例如，查看在每个 Deployment revision 中执行了哪些命令。&lt;/p>
&lt;p>然后立即执行 &lt;code>get&lt;/code> 将获得如下结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 1s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果表明我们希望的 repalica 数是 3（根据 deployment 中的&lt;code>.spec.replicas&lt;/code>配置）当前 replica 数（&lt;code>.status.replicas&lt;/code>）是 0, 最新的 replica 数（&lt;code>.status.updatedReplicas&lt;/code>）是 0，可用的 replica 数（&lt;code>.status.availableReplicas&lt;/code>）是 0。&lt;/p>
&lt;p>过几秒后再执行 &lt;code>get&lt;/code> 命令，将获得如下输出：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 18s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到 Deployment 已经创建了 3 个 replica，所有的 replica 都已经是最新的了（包含最新的 pod template），可用的（根据 Deployment 中的&lt;code>.spec.minReadySeconds&lt;/code>声明，处于已就绪状态的 pod 的最少个数）。执行&lt;code>kubectl get rs&lt;/code>和&lt;code>kubectl get pods&lt;/code>会显示 Replica Set（RS）和 Pod 已创建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">0&lt;/span> 18s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可能会注意到 ReplicaSet 的名字总是&lt;code>&amp;lt;Deployment 的名字&amp;gt;-&amp;lt;pod template 的 hash 值&amp;gt;&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pods --show-labels
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE LABELS
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211-7ci7o 1/1 Running &lt;span class="m">0&lt;/span> 18s &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx,pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">2035384211&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211-kzszj 1/1 Running &lt;span class="m">0&lt;/span> 18s &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx,pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">2035384211&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211-qqcnn 1/1 Running &lt;span class="m">0&lt;/span> 18s &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx,pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">2035384211&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>刚创建的 Replica Set 将保证总是有 3 个 nginx 的 pod 存在。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>： 您必须在 Deployment 中的 selector 指定正确的 pod template label（在该示例中是 &lt;code>app = nginx&lt;/code>），不要跟其他的 controller 的 selector 中指定的 pod template label 搞混了（包括 Deployment、Replica Set、Replication Controller 等）。&lt;strong>Kubernetes 本身并不会阻止您任意指定 pod template label&lt;/strong>，但是如果您真的这么做了，这些 controller 之间会相互打架，并可能导致不正确的行为。&lt;/p>
&lt;h3 id="pod-template-hash-label">Pod-template-hash label&lt;/h3>
&lt;p>&lt;strong>注意&lt;/strong>：这个 label 不是用户指定的！&lt;/p>
&lt;p>注意上面示例输出中的 pod label 里的 pod-template-hash label。当 Deployment 创建或者接管 ReplicaSet 时，Deployment controller 会自动为 Pod 添加 pod-template-hash label。这样做的目的是防止 Deployment 的子 ReplicaSet 的 pod 名字重复。通过将 ReplicaSet 的 PodTemplate 进行哈希散列，使用生成的哈希值作为 label 的值，并添加到 ReplicaSet selector 里、 pod template label 和 ReplicaSet 管理中的 Pod 上。&lt;/p>
&lt;h2 id="更新-deployment">更新 Deployment&lt;/h2>
&lt;p>&lt;strong>注意&lt;/strong>：Deployment 的 rollout 当且仅当 Deployment 的 pod template（例如 &lt;code>.spec.template&lt;/code>）中的 label 更新或者镜像更改时被触发。其他更新，例如扩容 Deployment 不会触发 rollout。&lt;/p>
&lt;p>假如我们现在想要让 nginx pod 使用 &lt;code>nginx:1.9.1&lt;/code> 的镜像来代替原来的 &lt;code>nginx:1.7.9&lt;/code> 的镜像。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以使用&lt;code>edit&lt;/code>命令来编辑 Deployment，修改&lt;code>.spec.template.spec.containers [0].image&lt;/code>，将&lt;code>nginx:1.7.9&lt;/code>改写成&lt;code>nginx:1.9.1&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl edit deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> edited
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看 rollout 的状态，只要执行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> out of &lt;span class="m">3&lt;/span> new replicas have been updated...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> successfully rolled out
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rollout 成功后，&lt;code>get&lt;/code>Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 36s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>UP-TO-DATE 的 replica 的数目已经达到了配置中要求的数目。&lt;/p>
&lt;p>CURRENT 的 replica 数表示 Deployment 管理的 replica 数量，AVAILABLE 的 replica 数是当前可用的 replica 数量。&lt;/p>
&lt;p>我们通过执行 &lt;code>kubectl get rs&lt;/code> 可以看到 Deployment 更新了 Pod，通过创建一个新的 ReplicaSet 并扩容了 3 个 replica，同时将原来的 ReplicaSet 缩容到了 0 个 replica。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 36s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>get pods&lt;/code>只会看到当前的新的 pod：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pods
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-khku8 1/1 Running &lt;span class="m">0&lt;/span> 14s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-nacti 1/1 Running &lt;span class="m">0&lt;/span> 14s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-z9gth 1/1 Running &lt;span class="m">0&lt;/span> 14s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>下次更新这些 pod 的时候，只需要更新 Deployment 中的 pod 的 template 即可。&lt;/p>
&lt;p>Deployment 可以保证在升级时只有一定数量的 Pod 是 down 的。默认的，它会确保至少有比期望的 Pod 数量少一个是 up 状态（最多一个不可用）。&lt;/p>
&lt;p>Deployment 同时也可以确保只创建出超过期望数量的一定数量的 Pod。默认的，它会确保最多比期望的 Pod 数量多一个的 Pod 是 up 的（最多 1 个 surge ）。&lt;/p>
&lt;p>&lt;strong>在未来的 Kuberentes 版本中，将从 1-1 变成 25%-25%。&lt;/strong>&lt;/p>
&lt;p>例如，如果您自己看下上面的 Deployment，您会发现，开始创建一个新的 Pod，然后删除一些旧的 Pod 再创建一个新的。当新的 Pod 创建出来之前不会杀掉旧的 Pod。这样能够确保可用的 Pod 数量至少有 2 个，Pod 的总数最多 4 个。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl describe deployments
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CreationTimestamp: Tue, &lt;span class="m">15&lt;/span> Mar &lt;span class="m">2016&lt;/span> 12:01:06 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selector: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Replicas: &lt;span class="m">3&lt;/span> updated &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> total &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> available &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> unavailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">StrategyType: RollingUpdate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MinReadySeconds: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RollingUpdateStrategy: &lt;span class="m">1&lt;/span> max unavailable, &lt;span class="m">1&lt;/span> max surge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OldReplicaSets: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NewReplicaSet: nginx-deployment-1564180365 &lt;span class="o">(&lt;/span>3/3 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Events:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FirstSeen LastSeen Count From SubobjectPath Type Reason Message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --------- -------- ----- ---- ------------- -------- ------ -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 36s 36s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 23s 23s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 23s 23s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 23s 23s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以看到当我们刚开始创建这个 Deployment 的时候，创建了一个 ReplicaSet（nginx-deployment-2035384211），并直接扩容到了 3 个 replica。&lt;/p>
&lt;p>当我们更新这个 Deployment 的时候，它会创建一个新的 ReplicaSet（nginx-deployment-1564180365），将它扩容到 1 个 replica，然后缩容原先的 ReplicaSet 到 2 个 replica，此时满足至少 2 个 Pod 是可用状态，同一时刻最多有 4 个 Pod 处于创建的状态。&lt;/p>
&lt;p>接着继续使用相同的 rolling update 策略扩容新的 ReplicaSet 和缩容旧的 ReplicaSet。最终，将会在新的 ReplicaSet 中有 3 个可用的 replica，旧的 ReplicaSet 的 replica 数目变成 0。&lt;/p>
&lt;h3 id="rollover多个-rollout-并行">Rollover（多个 rollout 并行）&lt;/h3>
&lt;p>每当 Deployment controller 观测到有新的 deployment 被创建时，如果没有已存在的 ReplicaSet 来创建期望个数的 Pod 的话，就会创建出一个新的 ReplicaSet 来做这件事。已存在的 ReplicaSet 控制 label 与 &lt;code>.spec.selector&lt;/code> 匹配但是 template 跟 &lt;code>.spec.template&lt;/code> 不匹配的 Pod 缩容。最终，新的 ReplicaSet 将会扩容出 &lt;code>.spec.replicas&lt;/code> 指定数目的 Pod，旧的 ReplicaSet 会缩容到 0。&lt;/p>
&lt;p>如果您更新了一个的已存在并正在进行中的 Deployment，每次更新 Deployment 都会创建一个新的 ReplicaSet 并扩容它，同时回滚之前扩容的 ReplicaSet —— 将它添加到旧的 ReplicaSet 列表中，开始缩容。&lt;/p>
&lt;p>例如，假如您创建了一个有 5 个 &lt;code>niginx:1.7.9&lt;/code> replica 的 Deployment，但是当还只有 3 个 &lt;code>nginx:1.7.9&lt;/code> 的 replica 创建出来的时候您就开始更新含有 5 个 &lt;code>nginx:1.9.1&lt;/code> replica 的 Deployment。在这种情况下，Deployment 会立即杀掉已创建的 3 个 &lt;code>nginx:1.7.9&lt;/code> 的 Pod，并开始创建 &lt;code>nginx:1.9.1&lt;/code> 的 Pod。它不会等到所有的 5 个 &lt;code>nginx:1.7.9&lt;/code> 的 Pod 都创建完成后才开始改变航道。&lt;/p>
&lt;h3 id="label-selector-更新">Label selector 更新&lt;/h3>
&lt;p>我们通常不鼓励更新 label selector，我们建议事先规划好您的 selector。&lt;/p>
&lt;p>任何情况下，只要您想要执行 label selector 的更新，请一定要谨慎并确认您已经预料到所有可能因此导致的后果。&lt;/p>
&lt;ul>
&lt;li>增添 selector 需要同时在 Deployment 的 spec 中更新新的 label，否则将返回校验错误。此更改是不可覆盖的，这意味着新的 selector 不会选择使用旧 selector 创建的 ReplicaSet 和 Pod，从而导致所有旧版本的 ReplicaSet 都被丢弃，并创建新的 ReplicaSet。&lt;/li>
&lt;li>更新 selector，即更改 selector key 的当前值，将导致跟增添 selector 同样的后果。&lt;/li>
&lt;li>删除 selector，即删除 Deployment selector 中的已有的 key，不需要对 Pod template label 做任何更改，现有的 ReplicaSet 也不会成为孤儿，但是请注意，删除的 label 仍然存在于现有的 Pod 和 ReplicaSet 中。&lt;/li>
&lt;/ul>
&lt;h2 id="回退-deployment">回退 Deployment&lt;/h2>
&lt;p>有时候您可能想回退一个 Deployment，例如，当 Deployment 不稳定时，比如一直 crash looping。&lt;/p>
&lt;p>默认情况下，kubernetes 会在系统中保存前两次的 Deployment 的 rollout 历史记录，以便您可以随时回退（您可以修改 &lt;code>revision history limit&lt;/code> 来更改保存的 revision 数）。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：只要 Deployment 的 rollout 被触发就会创建一个 revision。也就是说当且仅当 Deployment 的 Pod template（如 &lt;code>.spec.template&lt;/code>）被更改，例如更新 template 中的 label 和容器镜像时，就会创建出一个新的 revision。&lt;/p>
&lt;p>其他的更新，比如扩容 Deployment 不会创建 revision—— 因此我们可以很方便的手动或者自动扩容。这意味着当您回退到历史 revision 时，只有 Deployment 中的 Pod template 部分才会回退。&lt;/p>
&lt;p>假设我们在更新 Deployment 的时候犯了一个拼写错误，将镜像的名字写成了 &lt;code>nginx:1.91&lt;/code>，而正确的名字应该是 &lt;code>nginx:1.9.1&lt;/code>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.91
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Rollout 将会卡住。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deployments nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> out of &lt;span class="m">3&lt;/span> new replicas have been updated...
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>按住 Ctrl-C 停止上面的 rollout 状态监控。&lt;/p>
&lt;p>您会看到旧的 replica（nginx-deployment-1564180365 和 nginx-deployment-2035384211）和新的 replica （nginx-deployment-3066724191）数目都是 2 个。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">0&lt;/span> 25s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-2035384211 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 36s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-3066724191 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 6s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>看下创建 Pod，您会看到有两个新的 ReplicaSet 创建的 Pod 处于 ImagePullBackOff 状态，循环拉取镜像。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get pods
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME READY STATUS RESTARTS AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-70iae 1/1 Running &lt;span class="m">0&lt;/span> 25s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1564180365-jbqqo 1/1 Running &lt;span class="m">0&lt;/span> 25s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-3066724191-08mng 0/1 ImagePullBackOff &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-3066724191-eocby 0/1 ImagePullBackOff &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，Deployment controller 会自动停止坏的 rollout，并停止扩容新的 ReplicaSet。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl describe deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CreationTimestamp: Tue, &lt;span class="m">15&lt;/span> Mar &lt;span class="m">2016&lt;/span> 14:48:04 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selector: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Replicas: &lt;span class="m">2&lt;/span> updated &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> total &lt;span class="p">|&lt;/span> &lt;span class="m">2&lt;/span> available &lt;span class="p">|&lt;/span> &lt;span class="m">2&lt;/span> unavailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">StrategyType: RollingUpdate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MinReadySeconds: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RollingUpdateStrategy: &lt;span class="m">1&lt;/span> max unavailable, &lt;span class="m">1&lt;/span> max surge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OldReplicaSets: nginx-deployment-1564180365 &lt;span class="o">(&lt;/span>2/2 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NewReplicaSet: nginx-deployment-3066724191 &lt;span class="o">(&lt;/span>2/2 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Events:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FirstSeen LastSeen Count From SubobjectPath Type Reason Message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --------- -------- ----- ---- ------------- -------- ------ -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 1m 1m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 22s 22s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 22s 22s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 22s 22s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 21s 21s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 13s 13s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 13s 13s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 13s 13s &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了修复这个问题，我们需要回退到稳定的 Deployment revision。&lt;/p>
&lt;h3 id="检查-deployment-升级的历史记录">检查 Deployment 升级的历史记录&lt;/h3>
&lt;p>首先，检查下 Deployment 的 revision：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout &lt;span class="nb">history&lt;/span> deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployments &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span>:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">REVISION CHANGE-CAUSE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> kubectl create -f https://kubernetes.io/docs/user-guide/nginx-deployment.yaml--record
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">2&lt;/span> kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3&lt;/span> kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.91
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为我们创建 Deployment 的时候使用了&lt;code>--record&lt;/code> 参数可以记录命令，我们可以很方便的查看每次 revision 的变化。&lt;/p>
&lt;p>查看单个 revision 的详细信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout &lt;span class="nb">history&lt;/span> deployment/nginx-deployment --revision&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployments &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> revision &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> pod-template-hash&lt;span class="o">=&lt;/span>&lt;span class="m">1159050644&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Annotations: kubernetes.io/change-cause&lt;span class="o">=&lt;/span>kubectl &lt;span class="nb">set&lt;/span> image deployment/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Containers:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> nginx:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Image: nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Port: 80/TCP
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> QoS Tier:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> cpu: BestEffort
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> memory: BestEffort
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Environment Variables: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> No volumes.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="回退到历史版本">回退到历史版本&lt;/h3>
&lt;p>现在，我们可以决定回退当前的 rollout 到之前的版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout undo deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> rolled back
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以使用&lt;code>--revision&lt;/code>参数指定某个历史版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout undo deployment/nginx-deployment --to-revision&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> rolled back
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该 Deployment 现在已经回退到了先前的稳定版本。如您所见，Deployment controller 产生了一个回退到 revison 2 的&lt;code>DeploymentRollback&lt;/code>的 event。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 30m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl describe deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Name: nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Namespace: default
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">CreationTimestamp: Tue, &lt;span class="m">15&lt;/span> Mar &lt;span class="m">2016&lt;/span> 14:48:04 -0700
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Labels: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Selector: &lt;span class="nv">app&lt;/span>&lt;span class="o">=&lt;/span>nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Replicas: &lt;span class="m">3&lt;/span> updated &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> total &lt;span class="p">|&lt;/span> &lt;span class="m">3&lt;/span> available &lt;span class="p">|&lt;/span> &lt;span class="m">0&lt;/span> unavailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">StrategyType: RollingUpdate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">MinReadySeconds: &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">RollingUpdateStrategy: &lt;span class="m">1&lt;/span> max unavailable, &lt;span class="m">1&lt;/span> max surge
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OldReplicaSets: &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NewReplicaSet: nginx-deployment-1564180365 &lt;span class="o">(&lt;/span>3/3 replicas created&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Events:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> FirstSeen LastSeen Count From SubobjectPath Type Reason Message
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --------- -------- ----- ---- ------------- -------- ------ -------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 30m 30m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-2035384211 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 29m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2m 2m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled down replica &lt;span class="nb">set&lt;/span> nginx-deployment-3066724191 to &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 2m 2m &lt;span class="m">1&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal DeploymentRollback Rolled back deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> to revision &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> 29m 2m &lt;span class="m">2&lt;/span> &lt;span class="o">{&lt;/span>deployment-controller&lt;span class="o">}&lt;/span> Normal ScalingReplicaSet Scaled up replica &lt;span class="nb">set&lt;/span> nginx-deployment-1564180365 to &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="清理-policy">清理 Policy&lt;/h3>
&lt;p>您可以通过设置 &lt;code>.spec.revisonHistoryLimit&lt;/code> 项来指定 deployment 最多保留多少 revision 历史记录。默认的会保留所有的 revision；如果将该项设置为 0，Deployment 就不允许回退了。&lt;/p>
&lt;h2 id="deployment-扩容">Deployment 扩容&lt;/h2>
&lt;p>您可以使用以下命令扩容 Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl scale deployment nginx-deployment --replicas &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> scaled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设您的集群中启用了 &lt;a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale-walkthrough" target="_blank" rel="noopener">horizontal pod autoscaling&lt;/a>，您可以给 Deployment 设置一个 autoscaler，基于当前 Pod 的 CPU 利用率选择最少和最多的 Pod 数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl autoscale deployment nginx-deployment --min&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span> --max&lt;span class="o">=&lt;/span>&lt;span class="m">15&lt;/span> --cpu-percent&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> autoscaled
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="比例扩容">比例扩容&lt;/h3>
&lt;p>RollingUpdate Deployment 支持同时运行一个应用的多个版本。或者 autoscaler 扩 容 RollingUpdate Deployment 的时候，正在中途的 rollout（进行中或者已经暂停的），为了降低风险，Deployment controller 将会平衡已存在的活动中的 ReplicaSet（有 Pod 的 ReplicaSet）和新加入的 replica。这被称为比例扩容。&lt;/p>
&lt;p>例如，您正在运行中含有 10 个 replica 的 Deployment。maxSurge=3，maxUnavailable=2。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">10&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="m">10&lt;/span> 50s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您更新了一个镜像，而在集群内部无法解析。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deploy/nginx-deployment &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:sometag
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>镜像更新启动了一个包含 ReplicaSet nginx-deployment-1989198191 的新的 rollout，但是它被阻塞了，因为我们上面提到的 maxUnavailable。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1989198191 &lt;span class="m">5&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">0&lt;/span> 9s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-618515232 &lt;span class="m">8&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">8&lt;/span> 1m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后发起了一个新的 Deployment 扩容请求。autoscaler 将 Deployment 的 repllica 数目增加到了 15 个。Deployment controller 需要判断在哪里增加这 5 个新的 replica。如果我们没有谁用比例扩容，所有的 5 个 replica 都会加到一个新的 ReplicaSet 中。如果使用比例扩容，新添加的 replica 将传播到所有的 ReplicaSet 中。大的部分加入 replica 数最多的 ReplicaSet 中，小的部分加入到 replica 数少的 ReplciaSet 中。0 个 replica 的 ReplicaSet 不会被扩容。&lt;/p>
&lt;p>在我们上面的例子中，3 个 replica 将添加到旧的 ReplicaSet 中，2 个 replica 将添加到新的 ReplicaSet 中。rollout 进程最终会将所有的 replica 移动到新的 ReplicaSet 中，假设新的 replica 成为健康状态。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment &lt;span class="m">15&lt;/span> &lt;span class="m">18&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> 7m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-1989198191 &lt;span class="m">7&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">0&lt;/span> 7m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-deployment-618515232 &lt;span class="m">11&lt;/span> &lt;span class="m">11&lt;/span> &lt;span class="m">11&lt;/span> 7m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="删除-autoscale">删除 autoscale&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">kubectl get hpa
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">kubectl delete hpa &lt;span class="si">${&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="p"> of hpa&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="暂停和恢复-deployment">暂停和恢复 Deployment&lt;/h2>
&lt;p>您可以在发出一次或多次更新前暂停一个 Deployment，然后再恢复它。这样您就能在 Deployment 暂停期间进行多次修复工作，而不会发出不必要的 rollout。&lt;/p>
&lt;p>例如使用刚刚创建 Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl get deploy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT UP-TO-DATE AVAILABLE AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 1m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>mkargaki@dhcp129-211 kubernetes&lt;span class="o">]&lt;/span>$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 1m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用以下命令暂停 Deployment：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout pause deployment/nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> paused
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后更新 Deplyment 中的镜像：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> image deploy/nginx &lt;span class="nv">nginx&lt;/span>&lt;span class="o">=&lt;/span>nginx:1.9.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> image updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意新的 rollout 启动了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout &lt;span class="nb">history&lt;/span> deploy/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployments &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">REVISION CHANGE-CAUSE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> &amp;lt;none&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ kubectl get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 2m
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以进行任意多次更新，例如更新使用的资源：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl &lt;span class="nb">set&lt;/span> resources deployment nginx -c&lt;span class="o">=&lt;/span>nginx --limits&lt;span class="o">=&lt;/span>&lt;span class="nv">cpu&lt;/span>&lt;span class="o">=&lt;/span>200m,memory&lt;span class="o">=&lt;/span>512Mi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> resource requirements updated
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Deployment 暂停前的初始状态将继续它的功能，而不会对 Deployment 的更新产生任何影响，只要 Deployment 是暂停的。&lt;/p>
&lt;p>最后，恢复这个 Deployment，观察完成更新的 ReplicaSet 已经创建出来了：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout resume deploy nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> resumed
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ KUBECTL get rs -w
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">0&lt;/span> 6s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">2&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">1&lt;/span> 18s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> 19s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">1&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 20s
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">^C
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ KUBECTL get rs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">NAME DESIRED CURRENT READY AGE
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-2142116321 &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> 2m
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">nginx-3926361531 &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">3&lt;/span> 28s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>注意&lt;/strong>：在恢复 Deployment 之前您无法回退一个已经暂停的 Deployment。&lt;/p>
&lt;h2 id="deployment-状态">Deployment 状态&lt;/h2>
&lt;p>Deployment 在生命周期中有多种状态。在创建一个新的 ReplicaSet 的时候它可以是 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#progressing-deployment" target="_blank" rel="noopener">progressing&lt;/a> 状态， &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#complete-deployment" target="_blank" rel="noopener">complete&lt;/a> 状态，或者 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#failed-deployment" target="_blank" rel="noopener">fail to progress&lt;/a> 状态。&lt;/p>
&lt;h3 id="进行中的-deployment">进行中的 Deployment&lt;/h3>
&lt;p>Kubernetes 将执行过下列任务之一的 Deployment 标记为 &lt;em>progressing&lt;/em> 状态：&lt;/p>
&lt;ul>
&lt;li>Deployment 正在创建新的 ReplicaSet 过程中。&lt;/li>
&lt;li>Deployment 正在扩容一个已有的 ReplicaSet。&lt;/li>
&lt;li>Deployment 正在缩容一个已有的 ReplicaSet。&lt;/li>
&lt;li>有新的可用的 pod 出现。&lt;/li>
&lt;/ul>
&lt;p>您可以使用 &lt;code>kubectl rollout status&lt;/code> 命令监控 Deployment 的进度。&lt;/p>
&lt;h3 id="完成的-deployment">完成的 Deployment&lt;/h3>
&lt;p>Kubernetes 将包括以下特性的 Deployment 标记为 &lt;em>complete&lt;/em> 状态：&lt;/p>
&lt;ul>
&lt;li>Deployment 最小可用。最小可用意味着 Deployment 的可用 replica 个数等于或者超过 Deployment 策略中的期望个数。&lt;/li>
&lt;li>所有与该 Deployment 相关的 replica 都被更新到了您指定版本，也就说更新完成。&lt;/li>
&lt;li>该 Deployment 中没有旧的 Pod 存在。&lt;/li>
&lt;/ul>
&lt;p>您可以用 &lt;code>kubectl rollout status&lt;/code> 命令查看 Deployment 是否完成。如果 rollout 成功完成，&lt;code>kubectl rollout status&lt;/code> 将返回一个 0 值的 Exit Code。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deploy/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> of &lt;span class="m">3&lt;/span> updated replicas are available...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> successfully rolled out
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="失败的-deployment">失败的 Deployment&lt;/h3>
&lt;p>您的 Deployment 在尝试部署新的 ReplicaSet 的时候可能卡住，永远也不会完成。这可能是因为以下几个因素引起的：&lt;/p>
&lt;ul>
&lt;li>无效的引用&lt;/li>
&lt;li>不可读的 probe failure&lt;/li>
&lt;li>镜像拉取错误&lt;/li>
&lt;li>权限不够&lt;/li>
&lt;li>范围限制&lt;/li>
&lt;li>程序运行时配置错误&lt;/li>
&lt;/ul>
&lt;p>探测这种情况的一种方式是，在您的 Deployment spec 中指定 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#progress-deadline-seconds" target="_blank" rel="noopener">&lt;code>spec.progressDeadlineSeconds&lt;/code>&lt;/a>。&lt;code>spec.progressDeadlineSeconds&lt;/code> 表示 Deployment controller 等待多少秒才能确定（通过 Deployment status）Deployment 进程是卡住的。&lt;/p>
&lt;p>下面的 &lt;code>kubectl&lt;/code> 命令设置 &lt;code>progressDeadlineSeconds&lt;/code> 使 controller 在 Deployment 在进度卡住 10 分钟后报告：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl patch deployment/nginx-deployment -p &lt;span class="s1">&amp;#39;{&amp;#34;spec&amp;#34;:{&amp;#34;progressDeadlineSeconds&amp;#34;:600}}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;nginx-deployment&amp;#34;&lt;/span> patched
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当超过截止时间后，Deployment controller 会在 Deployment 的&lt;code>status.conditions&lt;/code> 中增加一条 DeploymentCondition，它包括如下属性：&lt;/p>
&lt;ul>
&lt;li>Type=Progressing&lt;/li>
&lt;li>Status=False&lt;/li>
&lt;li>Reason=ProgressDeadlineExceeded&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>注意&lt;/strong>：kubernetes 除了报告 &lt;code>Reason=ProgressDeadlineExceeded&lt;/code> 状态信息外不会对卡住的 Deployment 做任何操作。更高层次的协调器可以利用它并采取相应行动，例如，回滚 Deployment 到之前的版本。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：如果您暂停了一个 Deployment，在暂停的这段时间内 kubernetnes 不会检查您指定的 deadline。您可以在 Deployment 的 rollout 途中安全的暂停它，然后再恢复它，这不会触发超过 deadline 的状态。&lt;/p>
&lt;p>您可能在使用 Deployment 的时候遇到一些短暂的错误，这些可能是由于您设置了太短的 timeout，也有可能是因为各种其他错误导致的短暂错误。例如，假设您使用了无效的引用。当您 Describe Deployment 的时候可能会注意到如下信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl describe deployment nginx-deployment
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;...&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type Status Reason
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- ------ ------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Available True MinimumReplicasAvailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Progressing True ReplicaSetUpdated
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaFailure True FailedCreate
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;...&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行&lt;code>kubectl get deployment nginx-deployment -o yaml&lt;/code>，Deployement 的状态可能看起来像这个样子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">availableReplicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">conditions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lastUpdateTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Replica set &amp;#34;nginx-deployment-4262182780&amp;#34; is progressing.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReplicaSetUpdated&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Progressing&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:42Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lastUpdateTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:42Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Deployment has minimum availability.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">MinimumReplicasAvailable&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Available&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">lastTransitionTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">lastUpdateTime&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="ld">2016-10-04T12:25:39Z&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">message&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">&amp;#39;Error creating&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pods &amp;#34;nginx-deployment-4262182780-&amp;#34; is forbidden: exceeded quota:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">object-counts, requested: pods=1, used: pods=3, limited&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pods=2&amp;#39;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">reason&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">FailedCreate&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">status&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;True&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReplicaFailure&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">observedGeneration&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">unavailableReplicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最终，一旦超过 Deployment 进程的 deadline，kubernetes 会更新状态和导致 Progressing 状态的原因：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type Status Reason
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- ------ ------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Available True MinimumReplicasAvailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Progressing False ProgressDeadlineExceeded
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ReplicaFailure True FailedCreate
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>您可以通过缩容 Deployment 的方式解决配额不足的问题，或者增加您的 namespace 的配额。如果您满足了配额条件后，Deployment controller 就会完成您的 Deployment rollout，您将看到 Deployment 的状态更新为成功状态（&lt;code>Status=True&lt;/code>并且&lt;code>Reason=NewReplicaSetAvailable&lt;/code>）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">Conditions:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Type Status Reason
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">---- ------ ------
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Available True MinimumReplicasAvailable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Progressing True NewReplicaSetAvailable
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Type=Available&lt;/code>、 &lt;code>Status=True&lt;/code> 意味着您的 Deployment 有最小可用性。最小可用性是在 Deployment 策略中指定的参数。&lt;code>Type=Progressing&lt;/code> 、 &lt;code>Status=True&lt;/code> 意味着您的 Deployment 或者在部署过程中，或者已经成功部署，达到了期望的最少的可用 replica 数量（查看特定状态的 Reason—— 在我们的例子中 &lt;code>Reason=NewReplicaSetAvailable&lt;/code> 意味着 Deployment 已经完成）。&lt;/p>
&lt;p>您可以使用 &lt;code>kubectl rollout status&lt;/code> 命令查看 Deployment 进程是否失败。当 Deployment 过程超过了 deadline，&lt;code>kubectl rollout status&lt;/code> 将返回非 0 的 exit code。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">$ kubectl rollout status deploy/nginx
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Waiting &lt;span class="k">for&lt;/span> rollout to finish: &lt;span class="m">2&lt;/span> out of &lt;span class="m">3&lt;/span> new replicas have been updated...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">error: deployment &lt;span class="s2">&amp;#34;nginx&amp;#34;&lt;/span> exceeded its progress deadline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="操作失败的-deployment">操作失败的 Deployment&lt;/h3>
&lt;p>所有对完成的 Deployment 的操作都适用于失败的 Deployment。您可以对它扩 / 缩容，回退到历史版本，您甚至可以多次暂停它来应用 Deployment pod template。&lt;/p>
&lt;h2 id="清理-policy-1">清理 Policy&lt;/h2>
&lt;p>您可以设置 Deployment 中的 &lt;code>.spec.revisionHistoryLimit&lt;/code> 项来指定保留多少旧的 ReplicaSet。余下的将在后台被当作垃圾收集。默认的，所有的 revision 历史就都会被保留。在未来的版本中，将会更改为 2。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：将该值设置为 0，将导致所有的 Deployment 历史记录都会被清除，该 Deployment 就无法再回退了。&lt;/p>
&lt;h2 id="用例">用例&lt;/h2>
&lt;h3 id="金丝雀-deployment">金丝雀 Deployment&lt;/h3>
&lt;p>如果您想要使用 Deployment 对部分用户或服务器发布 release，您可以创建多个 Deployment，每个 Deployment 对应一个 release，参照 &lt;a href="https://kubernetes.io/docs/concepts/cluster-administration/manage-deployment/#canary-deployments" target="_blank" rel="noopener">managing resources&lt;/a> 中对金丝雀模式的描述。&lt;/p>
&lt;h2 id="编写-deployment-spec">编写 Deployment Spec&lt;/h2>
&lt;p>在所有的 Kubernetes 配置中，Deployment 也需要 &lt;code>apiVersion&lt;/code>，&lt;code>kind&lt;/code> 和 &lt;code>metadata&lt;/code> 这些配置项。配置文件的通用使用说明查看 &lt;a href="https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/" target="_blank" rel="noopener">部署应用&lt;/a>，配置容器，和使用 kubectl 管理资源文档。&lt;/p>
&lt;h3 id="pod-template">Pod Template&lt;/h3>
&lt;p>&lt;code>.spec.template&lt;/code> 是 &lt;code>.spec&lt;/code> 中唯一要求的字段。&lt;/p>
&lt;p>&lt;code>.spec.template&lt;/code> 是 &lt;a href="https://kubernetes.io/docs/user-guide/replication-controller/#pod-template" target="_blank" rel="noopener">pod template&lt;/a>. 它跟 &lt;a href="https://kubernetes.io/docs/user-guide/pods" target="_blank" rel="noopener">Pod&lt;/a> 有一模一样的 schema，除了它是嵌套的并且不需要 &lt;code>apiVersion&lt;/code> 和 &lt;code>kind&lt;/code> 字段。&lt;/p>
&lt;p>另外为了划分 Pod 的范围，Deployment 中的 pod template 必须指定适当的 label（不要跟其他 controller 重复了，参考 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#selector" target="_blank" rel="noopener">selector&lt;/a>）和适当的重启策略。&lt;/p>
&lt;p>&lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle" target="_blank" rel="noopener">&lt;code>.spec.template.spec.restartPolicy&lt;/code>&lt;/a> 可以设置为 &lt;code>Always&lt;/code> , 如果不指定的话这就是默认配置。&lt;/p>
&lt;h3 id="replicas">Replicas&lt;/h3>
&lt;p>&lt;code>.spec.replicas&lt;/code> 是可以选字段，指定期望的 pod 数量，默认是 1。&lt;/p>
&lt;h3 id="selector">Selector&lt;/h3>
&lt;p>&lt;code>.spec.selector&lt;/code> 是可选字段，用来指定 &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels" target="_blank" rel="noopener">label selector&lt;/a> ，圈定 Deployment 管理的 pod 范围。&lt;/p>
&lt;p>如果被指定， &lt;code>.spec.selector&lt;/code> 必须匹配 &lt;code>.spec.template.metadata.labels&lt;/code>，否则它将被 API 拒绝。如果 &lt;code>.spec.selector&lt;/code> 没有被指定， &lt;code>.spec.selector.matchLabels&lt;/code> 默认是 &lt;code>.spec.template.metadata.labels&lt;/code>。&lt;/p>
&lt;p>在 Pod 的 template 跟 &lt;code>.spec.template&lt;/code> 不同或者数量超过了 &lt;code>.spec.replicas&lt;/code> 规定的数量的情况下，Deployment 会杀掉 label 跟 selector 不同的 Pod。&lt;/p>
&lt;p>&lt;strong>注意&lt;/strong>：您不应该再创建其他 label 跟这个 selector 匹配的 pod，或者通过其他 Deployment，或者通过其他 Controller，例如 ReplicaSet 和 ReplicationController。否则该 Deployment 会被把它们当成都是自己创建的。Kubernetes 不会阻止您这么做。&lt;/p>
&lt;p>如果您有多个 controller 使用了重复的 selector，controller 们就会互相打架并导致不正确的行为。&lt;/p>
&lt;h3 id="策略">策略&lt;/h3>
&lt;p>&lt;code>.spec.strategy&lt;/code> 指定新的 Pod 替换旧的 Pod 的策略。&lt;code>.spec.strategy.type&lt;/code> 可以是 &amp;ldquo;Recreate&amp;rdquo; 或者是 &amp;ldquo;RollingUpdate&amp;rdquo;。&amp;ldquo;RollingUpdate&amp;rdquo; 是默认值。&lt;/p>
&lt;h4 id="recreate-deployment">Recreate Deployment&lt;/h4>
&lt;p>&lt;code>.spec.strategy.type==Recreate&lt;/code> 时，在创建出新的 Pod 之前会先杀掉所有已存在的 Pod。&lt;/p>
&lt;h4 id="rolling-update-deployment">Rolling Update Deployment&lt;/h4>
&lt;p>&lt;code>.spec.strategy.type==RollingUpdate&lt;/code> 时，Deployment 使用 Rolling Update 的方式更新 Pod 。您可以指定 &lt;code>maxUnavailable&lt;/code> 和 &lt;code>maxSurge&lt;/code> 来控制 rolling update 进程。&lt;/p>
&lt;h5 id="max-unavailable">Max Unavailable&lt;/h5>
&lt;p>&lt;code>.spec.strategy.rollingUpdate.maxUnavailable&lt;/code> 是可选配置项，用来指定在升级过程中不可用 Pod 的最大数量。该值可以是一个绝对值（例如 5），也可以是期望 Pod 数量的百分比（例如 10%）。通过计算百分比的绝对值向下取整。如果 &lt;code>.spec.strategy.rollingUpdate.maxSurge&lt;/code> 为 0 时，这个值不可以为 0。默认值是 1。&lt;/p>
&lt;p>例如，该值设置成 30%，启动 rolling update 后旧的 ReplicatSet 将会立即缩容到期望的 Pod 数量的 70%。新的 Pod ready 后，随着新的 ReplicaSet 的扩容，旧的 ReplicaSet 会进一步缩容，确保在升级的所有时刻可以用的 Pod 数量至少是期望 Pod 数量的 70%。&lt;/p>
&lt;h5 id="max-surge">Max Surge&lt;/h5>
&lt;p>&lt;code>.spec.strategy.rollingUpdate.maxSurge&lt;/code> 是可选配置项，用来指定可以超过期望的 Pod 数量的最大个数。该值可以是一个绝对值（例如 5）或者是期望的 Pod 数量的百分比（例如 10%）。当 &lt;code>MaxUnavailable&lt;/code> 为 0 时该值不可以为 0。通过百分比计算的绝对值向上取整。默认值是 1。&lt;/p>
&lt;p>例如，该值设置成 30%，启动 rolling update 后新的 ReplicatSet 将会立即扩容，新老 Pod 的总数不能超过期望的 Pod 数量的 130%。旧的 Pod 被杀掉后，新的 ReplicaSet 将继续扩容，旧的 ReplicaSet 会进一步缩容，确保在升级的所有时刻所有的 Pod 数量和不会超过期望 Pod 数量的 130%。&lt;/p>
&lt;h3 id="progress-deadline-seconds">Progress Deadline Seconds&lt;/h3>
&lt;p>&lt;code>.spec.progressDeadlineSeconds&lt;/code> 是可选配置项，用来指定在系统报告 Deployment 的 &lt;a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment#failed-deployment" target="_blank" rel="noopener">failed progressing&lt;/a> —— 表现为 resource 的状态中 &lt;code>type=Progressing&lt;/code>、&lt;code>Status=False&lt;/code>、 &lt;code>Reason=ProgressDeadlineExceeded&lt;/code> 前可以等待的 Deployment 进行的秒数。Deployment controller 会继续重试该 Deployment。未来，在实现了自动回滚后， deployment controller 在观察到这种状态时就会自动回滚。&lt;/p>
&lt;p>如果设置该参数，该值必须大于 &lt;code>.spec.minReadySeconds&lt;/code>。&lt;/p>
&lt;h3 id="min-ready-seconds">Min Ready Seconds&lt;/h3>
&lt;p>&lt;code>.spec.minReadySeconds&lt;/code> 是一个可选配置项，用来指定没有任何容器 crash 的 Pod 并被认为是可用状态的最小秒数。默认是 0（Pod 在 ready 后就会被认为是可用状态）。进一步了解什么什么后 Pod 会被认为是 ready 状态，参阅 &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes" target="_blank" rel="noopener">Container Probes&lt;/a>。&lt;/p>
&lt;h3 id="rollback-to">Rollback To&lt;/h3>
&lt;p>&lt;code>.spec.rollbackTo&lt;/code> 是一个可以选配置项，用来配置 Deployment 回退的配置。设置该参数将触发回退操作，每次回退完成后，该值就会被清除。&lt;/p>
&lt;h4 id="revision">Revision&lt;/h4>
&lt;p>&lt;code>.spec.rollbackTo.revision&lt;/code> 是一个可选配置项，用来指定回退到的 revision。默认是 0，意味着回退到上一个 revision。&lt;/p>
&lt;h3 id="revision-history-limit">Revision History Limit&lt;/h3>
&lt;p>Deployment revision history 存储在它控制的 ReplicaSets 中。&lt;/p>
&lt;p>&lt;code>.spec.revisionHistoryLimit&lt;/code> 是一个可选配置项，用来指定可以保留的旧的 ReplicaSet 数量。该理想值取决于心 Deployment 的频率和稳定性。如果该值没有设置的话，默认所有旧的 Replicaset 或会被保留，将资源存储在 etcd 中，是用 &lt;code>kubectl get rs&lt;/code> 查看输出。每个 Deployment 的该配置都保存在 ReplicaSet 中，然而，一旦您删除的旧的 RepelicaSet，您的 Deployment 就无法再回退到那个 revison 了。&lt;/p>
&lt;p>如果您将该值设置为 0，所有具有 0 个 replica 的 ReplicaSet 都会被删除。在这种情况下，新的 Deployment rollout 无法撤销，因为 revision history 都被清理掉了。&lt;/p>
&lt;h3 id="paused">Paused&lt;/h3>
&lt;p>&lt;code>.spec.paused&lt;/code> 是可以可选配置项，boolean 值。用来指定暂停和恢复 Deployment。Paused 和没有 paused 的 Deployment 之间的唯一区别就是，所有对 paused deployment 中的 PodTemplateSpec 的修改都不会触发新的 rollout。Deployment 被创建之后默认是非 paused。&lt;/p></description></item><item><title>ingress-controller</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/ingress-controller/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/ingress-controller/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 34
title: Ingress 控制器
date: &amp;ldquo;2022-05-21T00:00:00+08:00&amp;rdquo;
type: book&lt;/h2>
&lt;p>为了使 Ingress 正常工作，集群中必须运行 Ingress controller。这与其他类型的控制器不同，其他类型的控制器通常作为 &lt;code>kube-controller-manager&lt;/code> 二进制文件的一部分运行，在集群启动时自动启动。你需要选择最适合自己集群的 Ingress controller 或者自己实现一个。&lt;/p>
&lt;p>Kubernetes 社区和众多厂商开发了大量的 Ingress Controller，你可以在 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress-controllers/" target="_blank" rel="noopener">这里&lt;/a> 找到。&lt;/p>
&lt;h2 id="使用多个-ingress-控制器">使用多个 Ingress 控制器&lt;/h2>
&lt;p>你可以使用 &lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class" target="_blank" rel="noopener">IngressClass&lt;/a> 在集群中部署任意数量的 Ingress 控制器。请注意你的 Ingress 类资源的 &lt;code>.metadata.name&lt;/code> 字段。当你创建 Ingress 时，你需要用此字段的值来设置 Ingress 对象的 &lt;code>ingressClassName&lt;/code> 字段（请参考 &lt;a href="https://kubernetes.io/docs/reference/kubernetes-api/service-resources/ingress-v1/#IngressSpec" target="_blank" rel="noopener">IngressSpec v1 reference&lt;/a>）。&lt;code>ingressClassName&lt;/code> 是之前的&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#deprecated-annotation" target="_blank" rel="noopener">注解&lt;/a>做法的替代。&lt;/p>
&lt;p>如果你不为 Ingress 指定 IngressClass，并且你的集群中只有一个 IngressClass 被标记为了集群默认，那么 Kubernetes 会应用此&lt;a href="https://kubernetes.io/docs/concepts/services-networking/ingress/#default-ingress-class" target="_blank" rel="noopener">默认 IngressClass&lt;/a>。你可以通过将 &lt;a href="https://kubernetes.io/docs/reference/labels-annotations-taints/#ingressclass-kubernetes-io-is-default-class" target="_blank" rel="noopener">&lt;code>ingressclass.kubernetes.io/is-default-class&lt;/code> 注解&lt;/a> 的值设置为 &lt;code>&amp;quot;true&amp;quot;&lt;/code> 来将一个 IngressClass 标记为集群默认。&lt;/p>
&lt;p>理想情况下，所有 Ingress 控制器都应满足此规范，但各种 Ingress 控制器的操作略有不同。&lt;/p></description></item><item><title>job</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/job/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/job/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 33
title: Job
date: &amp;lsquo;2022-05-21T00:00:00+08:00&amp;rsquo;
type: book&lt;/h2>
&lt;p>Job 负责批处理任务，即仅执行一次的任务，它保证批处理任务的一个或多个 Pod 成功结束。&lt;/p>
&lt;h2 id="job-spec-格式">Job Spec 格式&lt;/h2>
&lt;ul>
&lt;li>spec.template 格式同 Pod&lt;/li>
&lt;li>RestartPolicy 仅支持 Never 或 OnFailure&lt;/li>
&lt;li>单个 Pod 时，默认 Pod 成功运行后 Job 即结束&lt;/li>
&lt;li>&lt;code>.spec.completions&lt;/code> 标志 Job 结束需要成功运行的 Pod 个数，默认为 1&lt;/li>
&lt;li>&lt;code>.spec.parallelism&lt;/code> 标志并行运行的 Pod 的个数，默认为 1&lt;/li>
&lt;li>&lt;code>spec.activeDeadlineSeconds&lt;/code> 标志失败 Pod 的重试最大时间，超过这个时间不会继续重试&lt;/li>
&lt;/ul>
&lt;p>一个简单的例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">batch/v1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Job&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">perl&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">command&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;perl&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-Mbignum=bpi&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;-wle&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s2">&amp;#34;print bpi(2000)&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">restartPolicy&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">Never&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">$ kubectl create -f ./job.yaml&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">job &amp;#34;pi&amp;#34; created&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">$ pods=$(kubectl get pods --selector=job-name=pi --output=jsonpath={.items..metadata.name})&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="l">$ kubectl logs $pods -c pi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="m">3.141592653589793238462643383279502&lt;/span>&lt;span class="l">...&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="bare-pod">Bare Pod&lt;/h2>
&lt;p>所谓 Bare Pod 是指直接用 PodSpec 来创建的 Pod（即不在 ReplicaSet 或者 ReplicationController 的管理之下的 Pod）。这些 Pod 在 Node 重启后不会自动重启，但 Job 则会创建新的 Pod 继续任务。所以，推荐使用 Job 来替代 Bare Pod，即便是应用只需要一个 Pod。&lt;/p></description></item><item><title>replicaset</title><link>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/replicaset/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/k8s-series/999.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-jimmysong-kubernetes-%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/4.%E6%8E%A7%E5%88%B6%E5%99%A8/replicaset/</guid><description>&lt;hr>
&lt;h2 id="type-book">weight: 32
title: ReplicationController 和 ReplicaSet
date: &amp;lsquo;2022-05-21T00:00:00+08:00&amp;rsquo;
type: book&lt;/h2>
&lt;p>ReplicationController 用来确保容器应用的副本数始终保持在用户定义的副本数，即如果有容器异常退出，会自动创建新的 Pod 来替代；而如果异常多出来的容器也会自动回收。&lt;/p>
&lt;p>在新版本的 Kubernetes 中建议使用 ReplicaSet 来取代 ReplicationController。ReplicaSet 跟 ReplicationController 没有本质的不同，只是名字不一样，并且 ReplicaSet 支持集合式的 selector。&lt;/p>
&lt;p>虽然 ReplicaSet 可以独立使用，但一般还是建议使用 Deployment 来自动管理 ReplicaSet，这样就无需担心跟其他机制的不兼容问题（比如 ReplicaSet 不支持 rolling-update 但 Deployment 支持）。&lt;/p>
&lt;p>ReplicaSet 示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">apiVersion&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">extensions/v1beta1&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">kind&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">ReplicaSet&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># these labels can be applied automatically&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># from the labels in the pod template if not set&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># labels:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># app: guestbook&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># tier: frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># this replicas value is default&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># modify it according to your case&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">replicas&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># selector can be applied automatically&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># from the labels in the pod template if not set,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># but we are specifying the selector here to&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># demonstrate its usage.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">selector&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchLabels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tier&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">matchExpressions&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- {&lt;span class="nt">key: tier, operator: In, values&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="l">frontend]}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">template&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">metadata&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">labels&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">app&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">guestbook&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">tier&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">frontend&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">spec&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">containers&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">php-redis&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">image&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">gcr.io/google_samples/gb-frontend:v3&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">resources&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">requests&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">cpu&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100m&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">memory&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">100Mi&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">name&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">GET_HOSTS_FROM&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">value&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">dns&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># If your cluster config does not include a dns service, then to&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># instead access environment variables to find service host&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># info, comment out the &amp;#39;value: dns&amp;#39; line above, and uncomment the&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># line below.&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c"># value: env&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nt">ports&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="nt">containerPort&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">80&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>