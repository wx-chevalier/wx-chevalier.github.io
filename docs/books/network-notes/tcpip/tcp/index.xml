<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TCP | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/network-notes/tcpip/tcp/</link>
      <atom:link href="https://ng-tech.icu/books/network-notes/tcpip/tcp/index.xml" rel="self" type="application/rss+xml" />
    <description>TCP</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>TCP</title>
      <link>https://ng-tech.icu/books/network-notes/tcpip/tcp/</link>
    </image>
    
    <item>
      <title>地址与协议</title>
      <link>https://ng-tech.icu/books/network-notes/tcpip/tcp/%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%8D%8F%E8%AE%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/network-notes/tcpip/tcp/%E5%9C%B0%E5%9D%80%E4%B8%8E%E5%8D%8F%E8%AE%AE/</guid>
      <description>&lt;h1 id=&#34;地址与协议&#34;&gt;地址与协议&lt;/h1&gt;
&lt;h2 id=&#34;localhost-与-127001&#34;&gt;localhost 与 127.0.0.1&lt;/h2&gt;
&lt;p&gt;Pv4 的网络标准把 从 127.0.0.1 到 127.255.255.254 IP 地址块都用作 loopback。所有的发到这些地址的数据包都会被毫发无损的返回去(looped back )，这一千六百多万个个地址中，最知名的、最常用的就是 127.0.0.1。对于 IPv6 来说，它只把一个地址用作 loopback, 就是::1 (0000:0000:0000:0000:0000:0000:0000:0001)。有了 loopback 地址，同一个计算机上的进程通信都很方便了，根本不用走实际的物理网卡。比如说你在本机建立了一个 Web 服务器，然后通过浏览器用http://127.0.0.1:8080 去访问，操作系统内的网络协议栈会把这个 HTTP GET 请求封装到一个 TCP 包中，写上目的端口号 8080，然后再封装到一个 IP 包中，写上目的地址 127.0.0.1。&lt;/p&gt;
&lt;p&gt;但是这个 IP 数据包并不会发送到物理的网卡那里去，更不会通过数据链路层发送到局域网乃至互联网中，实际上它发给了虚拟的网络接口, 然后立刻被 looped back 到 IP 层的输入队列中。&lt;/p&gt;
&lt;p&gt;IP 层收到数据包，交付给 TCP 层，TCP 层发现目的端口是 8080，就会把 GET 请求取出来，交付给绑定 8080 端口的 Web 服务器。&lt;/p&gt;
&lt;p&gt;在 Unix 和 Linux 系统中，通过把 loopback 接口命名为 lo 或者 lo0 (注意第一个字母是 L 的小写字母，不是数字一)&lt;/p&gt;
&lt;p&gt;至于 localhost, 这就是个本机的主机名，在大多数机器上，这个主机名都会被计算机操作系统映射到 127.0.0.1 (ipv4)或者::1 (ipv6), 那使用 localhost 和 ip 实际上一样了。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;127.0.0.1 localhost
::1 localhost
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;但是有个有意思的例外就是 mysql, 在 Linux 上，当你使用 localhost 来连接数据库的时候，Mysql 会使用 Unix domain socket 来传输数据，这种方式会快一些，因为这是一种进程内通信(IPC)机制，不走网络协议栈，不需要打包拆包，计算校验和，维护序号等操作。当你使用 127.0.0.1 的时候，mysql 还是会使用 TCP/IP 协议栈来进行数据传输。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>优化算法</title>
      <link>https://ng-tech.icu/books/network-notes/tcpip/tcp/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/network-notes/tcpip/tcp/%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</guid>
      <description>&lt;h1 id=&#34;优化算法&#34;&gt;优化算法&lt;/h1&gt;
&lt;h1 id=&#34;慢热启动算法slow-start&#34;&gt;慢热启动算法（Slow Start）&lt;/h1&gt;
&lt;p&gt;首先，我们来看一下 TCP 的慢热启动。慢启动的意思是，刚刚加入网络的连接，一点一点地提速，不要一上来就像那些特权车一样霸道地把路占满。新同学上高速还是要慢一点，不要把已经在高速上的秩序给搞乱了。慢启动的算法如下(cwnd 全称 Congestion Window)：&lt;/p&gt;
&lt;p&gt;1）连接建好的开始先初始化 cwnd = 1，表明可以传一个 MSS 大小的数据。
2）每当收到一个 ACK，cwnd++; 呈线性上升
3）每当过了一个 RTT，&lt;code&gt;cwnd = cwnd*2&lt;/code&gt;; 呈指数让升
4）还有一个 ssthresh（slow start threshold），是一个上限，当 cwnd &amp;gt;= ssthresh 时，就会进入“拥塞避免算法”（后面会说这个算法）&lt;/p&gt;
&lt;h1 id=&#34;拥塞避免算法congestion-avoidance&#34;&gt;拥塞避免算法（Congestion Avoidance）&lt;/h1&gt;
&lt;p&gt;前面说过，还有一个 ssthresh（slow start threshold），是一个上限，当 cwnd &amp;gt;= ssthresh 时，就会进入“拥塞避免算法”。一般来说 ssthresh 的值是 65535，单位是字节，当 cwnd 达到这个值时后，算法如下：&lt;/p&gt;
&lt;p&gt;1）收到一个 ACK 时，cwnd = cwnd + 1/cwnd
2）当每过一个 RTT 时，cwnd = cwnd + 1&lt;/p&gt;
&lt;p&gt;这样就可以避免增长过快导致网络拥塞，慢慢的增加调整到网络的最佳值。很明显，是一个线性上升的算法。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
