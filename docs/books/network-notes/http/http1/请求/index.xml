<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>请求 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/</link><atom:link href="https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/index.xml" rel="self" type="application/rss+xml"/><description>请求</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>请求</title><link>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/</link></image><item><title>URL</title><link>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/url/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/url/</guid><description>&lt;h1 id="url">URL&lt;/h1>
&lt;p>在 WWW 上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫 URL(Uniform Resource Locator, 统一资源定位符)，它是 WWW 的统一资源定位标志。URL 由三部分组成：资源类型、存放资源的主机域名、资源文件名。URL 的一般语法格式为：&lt;code>protocol://hostname[:port]/path/[;parameters][?query]#fragment&lt;/code>。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20221225150708.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>URL 分为绝对 URL 与相对 URL 两种。绝对 URL 和访问时的状态完全无关。与之相对应的是省略了部分信息的相对（relative）URL，如 &lt;code>../file.php?text=hello+world&lt;/code>，它需要根据当前浏览所在上下文环境里的基准 URL，才能确定完整的 URL 地址。&lt;/p></description></item><item><title>请求方法</title><link>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95/</guid><description>&lt;h1 id="http-请求方法">HTTP 请求方法&lt;/h1>
&lt;p>本文着眼于讨论 HTTP 中不同请求方法的分别适用的场景。&lt;/p>
&lt;h1 id="get-与-post">Get 与 Post&lt;/h1>
&lt;h1 id="post-与-put">Post 与 Put&lt;/h1>
&lt;p>注意到，POST 和 PUT 都可用于创建或更新资源，然而，它们之间还是有比较大的区别：POST 所对应的 URI 并非创建的资源本身，而是资源的接收者，资源本身的存放位置由服务器决定；而 PUT 所对应的 URI 是要创建或更新的资源本身，它指明了具体的存放位置。比如，往某个站点添加一篇文章，如果使用 POST 来创建资源，可类似这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">POST&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">articles&lt;/span> &lt;span class="n">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;author&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;ethan&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;title&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;content&amp;#34;&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在上面，POST 对应的 URI 是 /articles，它是资源的接收者，而非资源的标识，如果资源被成功创建，服务器可以返回 201 Created 状态以及新建资源的位置，比如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">HTTP&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">1.1&lt;/span> &lt;span class="m">201&lt;/span> &lt;span class="n">Created&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Location&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">articles&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">abcdef123&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们如果知道新建资源的标识符，可以使用 PUT 来创建资源，比如：&lt;/p>
&lt;pre tabindex="0">&lt;code>PUT /articles/abcdef234 HTTP/1.1
{
&amp;#34;author&amp;#34;: &amp;#34;peter&amp;#34;,
&amp;#34;title&amp;#34;: &amp;#34;hello world&amp;#34;,
&amp;#34;content&amp;#34;: &amp;#34;hello world&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>在上面，PUT 对应的 URI 是 &lt;code>/articles/abcdef234&lt;/code>，它指明了资源的存放位置，如果资源被成功创建，服务器可以返回 &lt;code>201 Created&lt;/code> 状态以及新建资源的位置，比如：&lt;/p>
&lt;pre tabindex="0">&lt;code>HTTP/1.1 201 Created
Location: /articles/abcdef234
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>使用 PUT 更新某一资源，需要更新资源的全部属性；而使用 POST，可以更新全部或一部分值&lt;/li>
&lt;/ul>
&lt;p>比如使用 PUT 更新地址为 &lt;code>/articles/abcdef234&lt;/code> 的文章的标题，我们需要发送所有值：&lt;/p>
&lt;pre tabindex="0">&lt;code>PUT /articles/abcdef234 HTTP/1.1
{
&amp;#34;author&amp;#34;: &amp;#34;peter&amp;#34;,
&amp;#34;title&amp;#34;: &amp;#34;hello python&amp;#34;,
&amp;#34;content&amp;#34;: &amp;#34;hello world&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>而使用 POST，可以更新某个域的值：&lt;/p>
&lt;pre tabindex="0">&lt;code>POST /articles/abcdef234 HTTP/1.1
{
&amp;#34;title&amp;#34;: &amp;#34;hello python&amp;#34;
}
&lt;/code>&lt;/pre>&lt;p>POST 是不幂等的，PUT 是幂等的，这是一个很重要的区别。HTTP 方法的幂等性是指一次和多次请求某一个资源应该具有同样的副作用，注意这里是副作用，而不是返回结果。总结而言，GET 方法用于获取资源，不会改变资源的状态，不论调用一次还是多次都没有副作用，因此它是幂等的；DELETE 方法用于删除资源，有副作用，但调用一次或多次都是删除同个资源，产生的副作用是相同的，因此也是幂等的；POST 是不幂等的，因为两次相同的 POST 请求会在服务器创建两份资源，它们具有不同的 URI；PUT 是幂等的，对同一 URI 进行多次 PUT 的副作用和一次 PUT 是相同的。&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.zhihu.com/question/28586791/answer/767316172" target="_blank" rel="noopener">https://www.zhihu.com/question/28586791/answer/767316172&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>请求工具</title><link>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/network-notes/http/http1/%E8%AF%B7%E6%B1%82/%E8%AF%B7%E6%B1%82%E5%B7%A5%E5%85%B7/</guid><description>&lt;h1 id="http-lint">HTTP Lint&lt;/h1>
&lt;p>HTTPolice 是一个简单的基于命令行的对于 HTTP 请求格式规范进行检测的工具，可以直接使用&lt;code>pip&lt;/code>命令进行安装&lt;/p>
&lt;pre tabindex="0">&lt;code>pip install HTTPolice
&lt;/code>&lt;/pre>&lt;p>当我们使用 Google Chrome、Firefox 或者 Microsoft Edge 进行网络访问时，可以使用开发者工具导出某个 HAR 文件，这也就是 HTTP Lint 工具可以用来解析的文件。使用如下命令进行分析&lt;/p>
&lt;pre tabindex="0">&lt;code>$ httpolice -i har /path/to/file.har
------------ request: GET /1441/25776044114_0e5b9879a0_z.jpg------------ response: 200 OKC 1277 Obsolete &amp;#39;X-&amp;#39; prefix in X-Photo-FarmC 1277 Obsolete &amp;#39;X-&amp;#39; prefix in X-Photo-OriginE 1000 Malformed Expires headerE 1241 Date + Age is in the future
&lt;/code>&lt;/pre>&lt;p>默认的 HTTPolice 以文本形式输出报告文本，如下所示&lt;/p>
&lt;pre tabindex="0">&lt;code>------------ request: PUT /articles/109226/
E 1000 Malformed If-Match header
C 1093 User-Agent contains no actual product
------------ response: 204 No Content
C 1110 204 response with no Date header
E 1221 Strict-Transport-Security without TLS
------------ request: POST /articles/109226/comments/
...
&lt;/code>&lt;/pre>&lt;p>纯文本的方式可能比较难以理解，我们可以使用&lt;code>-o html&lt;/code>选项来设置更详细的基于 HTML 风格的输出，譬如&lt;/p>
&lt;pre tabindex="0">&lt;code>$ httpolice -i har -o html /path/to/file.har &amp;gt;report.html
&lt;/code>&lt;/pre></description></item></channel></rss>