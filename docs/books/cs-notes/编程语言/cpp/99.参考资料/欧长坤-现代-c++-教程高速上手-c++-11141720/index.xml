<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>欧长坤-《现代 C++ 教程：高速上手 C++ 11、14、17、20》 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/%E6%AC%A7%E9%95%BF%E5%9D%A4-%E7%8E%B0%E4%BB%A3-c++-%E6%95%99%E7%A8%8B%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B-c++-11141720/</link><atom:link href="https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/%E6%AC%A7%E9%95%BF%E5%9D%A4-%E7%8E%B0%E4%BB%A3-c++-%E6%95%99%E7%A8%8B%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B-c++-11141720/index.xml" rel="self" type="application/rss+xml"/><description>欧长坤-《现代 C++ 教程：高速上手 C++ 11、14、17、20》</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>欧长坤-《现代 C++ 教程：高速上手 C++ 11、14、17、20》</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/%E6%AC%A7%E9%95%BF%E5%9D%A4-%E7%8E%B0%E4%BB%A3-c++-%E6%95%99%E7%A8%8B%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B-c++-11141720/</link></image><item><title>01.迈向现代 C++</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/%E6%AC%A7%E9%95%BF%E5%9D%A4-%E7%8E%B0%E4%BB%A3-c++-%E6%95%99%E7%A8%8B%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B-c++-11141720/01.%E8%BF%88%E5%90%91%E7%8E%B0%E4%BB%A3-c++/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/%E6%AC%A7%E9%95%BF%E5%9D%A4-%E7%8E%B0%E4%BB%A3-c++-%E6%95%99%E7%A8%8B%E9%AB%98%E9%80%9F%E4%B8%8A%E6%89%8B-c++-11141720/01.%E8%BF%88%E5%90%91%E7%8E%B0%E4%BB%A3-c++/</guid><description>&lt;h1 id="第-1-章-迈向现代-c">第 1 章 迈向现代 C++&lt;/h1>
&lt;h2 id="11-被弃用的特性">1.1 被弃用的特性&lt;/h2>
&lt;p>在学习现代 C++ 之前，我们先了解一下从 C++11 开始，被弃用的主要特性：&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>注意&lt;/strong>：弃用并非彻底不能用，只是用于暗示程序员这些特性将从未来的标准中消失，应该尽量避免使用。但是，已弃用的特性依然是标准库的一部分，并且出于兼容性的考虑，大部分特性其实会『永久』保留。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>不再允许字符串字面值常量赋值给一个 &lt;code>char *&lt;/code>。如果需要用字符串字面值常量赋值和初始化一个 &lt;code>char *&lt;/code>，应该使用 &lt;code>const char *&lt;/code> 或者 &lt;code>auto&lt;/code>。&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;hello world!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 将出现弃用警告
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>&lt;strong>C++98 异常说明、 &lt;code>unexpected_handler&lt;/code>、&lt;code>set_unexpected()&lt;/code> 等相关特性被弃用，应该使用 &lt;code>noexcept&lt;/code>。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>auto_ptr&lt;/code> 被弃用，应使用 &lt;code>unique_ptr&lt;/code>。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>register&lt;/code> 关键字被弃用，可以使用但不再具备任何实际含义。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>bool&lt;/code> 类型的 &lt;code>++&lt;/code> 操作被弃用。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>如果一个类有析构函数，为其生成拷贝构造函数和拷贝赋值运算符的特性被弃用了。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>C 语言风格的类型转换被弃用（即在变量前使用 &lt;code>(convert_type)&lt;/code>），应该使用 &lt;code>static_cast&lt;/code>、&lt;code>reinterpret_cast&lt;/code>、&lt;code>const_cast&lt;/code> 来进行类型转换。&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>特别地，在最新的 C++17 标准中弃用了一些可以使用的 C 标准库，例如 &lt;code>&amp;lt;ccomplex&amp;gt;&lt;/code>、&lt;code>&amp;lt;cstdalign&amp;gt;&lt;/code>、&lt;code>&amp;lt;cstdbool&amp;gt;&lt;/code> 与 &lt;code>&amp;lt;ctgmath&amp;gt;&lt;/code> 等&lt;/strong>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>……等等&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>还有一些其他诸如参数绑定（C++11 提供了 &lt;code>std::bind&lt;/code> 和 &lt;code>std::function&lt;/code>）、&lt;code>export&lt;/code> 等特性也均被弃用。前面提到的这些特性&lt;strong>如果你从未使用或者听说过，也请不要尝试去了解他们，应该向新标准靠拢&lt;/strong>，直接学习新特性。毕竟，技术是向前发展的。&lt;/p>
&lt;h2 id="12-与-c-的兼容性">1.2 与 C 的兼容性&lt;/h2>
&lt;p>出于一些不可抗力、历史原因，我们不得不在 C++ 中使用一些 C 语言代码（甚至古老的 C 语言代码），例如 Linux 系统调用。在现代 C++ 出现之前，大部分人当谈及『C 与 C++ 的区别是什么』时，普遍除了回答面向对象的类特性、泛型编程的模板特性外，就没有其他的看法了，甚至直接回答『差不多』，也是大有人在。图 1.2 中的韦恩图大致上回答了 C 和 C++ 相关的兼容情况。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230504120058.png" alt="图 1.2: C 和 C&amp;#43;&amp;#43; 互相兼容情况" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>从现在开始，你的脑子里应该树立『&lt;strong>C++ 不是 C 的一个超集&lt;/strong>』这个观念（而且从一开始就不是，后面的&lt;a href="#%e8%bf%9b%e4%b8%80%e6%ad%a5%e9%98%85%e8%af%bb%e7%9a%84%e5%8f%82%e8%80%83%e6%96%87%e7%8c%ae">进一步阅读的参考文献&lt;/a>中给出了 C++98 和 C99 之间的区别）。在编写 C++ 时，也应该尽可能的避免使用诸如 &lt;code>void*&lt;/code> 之类的程序风格。而在不得不使用 C 时，应该注意使用 &lt;code>extern &amp;quot;C&amp;quot;&lt;/code> 这种特性，将 C 语言的代码与 C++代码进行分离编译，再统一链接这种做法，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#ifdef __cplusplus
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef __cplusplus
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// foo.c
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1.1.cpp
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;foo.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;iostream&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;functional&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Result from C code: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))](){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>应先使用 &lt;code>gcc&lt;/code> 编译 C 语言的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">gcc -c foo.c
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译出 &lt;code>foo.o&lt;/code> 文件，再使用 &lt;code>clang++&lt;/code> 将 C++ 代码和 &lt;code>.o&lt;/code> 文件链接起来（或者都编译为 &lt;code>.o&lt;/code> 再统一链接）：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">clang++ 1.1.cpp foo.o -std&lt;span class="o">=&lt;/span>c++2a -o 1.1
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>当然，你可以使用 &lt;code>Makefile&lt;/code> 来编译上面的代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">C&lt;/span> &lt;span class="o">=&lt;/span> gcc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CXX&lt;/span> &lt;span class="o">=&lt;/span> clang++
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SOURCE_C&lt;/span> &lt;span class="o">=&lt;/span> foo.c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">OBJECTS_C&lt;/span> &lt;span class="o">=&lt;/span> foo.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">SOURCE_CXX&lt;/span> &lt;span class="o">=&lt;/span> 1.1.cpp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TARGET&lt;/span> &lt;span class="o">=&lt;/span> 1.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LDFLAGS_COMMON&lt;/span> &lt;span class="o">=&lt;/span> -std&lt;span class="o">=&lt;/span>c++2a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">$(&lt;/span>C&lt;span class="k">)&lt;/span> -c &lt;span class="k">$(&lt;/span>SOURCE_C&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">$(&lt;/span>CXX&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>SOURCE_CXX&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>OBJECTS_C&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>LDFLAGS_COMMON&lt;span class="k">)&lt;/span> -o &lt;span class="k">$(&lt;/span>TARGET&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm -rf *.o &lt;span class="k">$(&lt;/span>TARGET&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>注意：&lt;code>Makefile&lt;/code> 中的缩进是制表符而不是空格符，如果你直接复制这段代码到你的编辑器中，制表符可能会被自动替换掉，请自行确保在 &lt;code>Makefile&lt;/code> 中的缩进是由制表符完成的。&lt;/p>
&lt;p>如果你还不知道 &lt;code>Makefile&lt;/code> 的使用也没有关系，本教程中不会构建过于复杂的代码，简单的在命令行中使用 &lt;code>clang++ -std=c++2a&lt;/code> 也可以阅读本书。&lt;/p>
&lt;/blockquote>
&lt;p>如果你是首次接触现代 C++，那么你很可能还看不懂上面的那一小段代码，即：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">ref&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;Result from C code: &amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">))](){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">out&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不必担心，本书的后续章节将为你介绍这一切。&lt;/p>
&lt;h2 id="进一步阅读的参考文献">进一步阅读的参考文献&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.amazon.cn/dp/B00WUBYBYS/ref=sr_1_1?ie=UTF8&amp;amp;qid=1522400738&amp;amp;sr=8-1&amp;amp;keywords=C%2B%2B&amp;#43;%E8%AF%AD%E8%A8%80%E5%AF%BC%E5%AD%A6" target="_blank" rel="noopener">C++ 语言导学. Bjarne Stroustrup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.cppreference.com/w/cpp/language/history" target="_blank" rel="noopener">C++ 历史&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.cppreference.com/w/cpp/compiler_support" target="_blank" rel="noopener">C++ 特性在 GCC/Clang 等编译器中的支持情况&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://david.tribble.com/text/cdiffs.htm#C99-vs-CPP98" target="_blank" rel="noopener">C++98 与 C99 之间的区别&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>