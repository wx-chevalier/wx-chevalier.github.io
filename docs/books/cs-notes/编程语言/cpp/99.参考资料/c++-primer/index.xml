<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>C++ Primer | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/</link><atom:link href="https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/index.xml" rel="self" type="application/rss+xml"/><description>C++ Primer</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>C++ Primer</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/</link></image><item><title>01.开始</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/01.%E5%BC%80%E5%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/01.%E5%BC%80%E5%A7%8B/</guid><description>&lt;h1 id="第一章-开始">第一章 开始&lt;/h1>
&lt;h2 id="熟悉编译器">熟悉编译器&lt;/h2>
&lt;p>&lt;strong>g++&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>编译：&lt;code>g++ --std=c++11 ch01.cpp -o main&lt;/code>&lt;/li>
&lt;li>运行：&lt;code>./prog1&lt;/code>&lt;/li>
&lt;li>查看运行状态：&lt;code>echo $?&lt;/code>&lt;/li>
&lt;li>编译多个文件:&lt;code>g++ ch2.cpp Sales_item.cc -o main&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>输入 &lt;code>g++ --help&lt;/code>，查看编译器选项：&lt;/p>
&lt;pre tabindex="0">&lt;code>Usage: g++ [options] file...
Options:
-pass-exit-codes Exit with highest error code from a phase
--help Display this information
--target-help Display target specific command line options
--help={common|optimizers|params|target|warnings|[^]{joined|separate|undocumented}}[,...]
Display specific types of command line options
(Use &amp;#39;-v --help&amp;#39; to display command line options of sub-processes)
--version Display compiler version information
-dumpspecs Display all of the built in spec strings
-dumpversion Display the version of the compiler
-dumpmachine Display the compiler&amp;#39;s target processor
-print-search-dirs Display the directories in the compiler&amp;#39;s search path
-print-libgcc-file-name Display the name of the compiler&amp;#39;s companion library
-print-file-name=&amp;lt;lib&amp;gt; Display the full path to library &amp;lt;lib&amp;gt;
-print-prog-name=&amp;lt;prog&amp;gt; Display the full path to compiler component &amp;lt;prog&amp;gt;
-print-multiarch Display the target&amp;#39;s normalized GNU triplet, used as
a component in the library path
-print-multi-directory Display the root directory for versions of libgcc
-print-multi-lib Display the mapping between command line options and
multiple library search directories
-print-multi-os-directory Display the relative path to OS libraries
-print-sysroot Display the target libraries directory
-print-sysroot-headers-suffix Display the sysroot suffix used to find headers
-Wa,&amp;lt;options&amp;gt; Pass comma-separated &amp;lt;options&amp;gt; on to the assembler
-Wp,&amp;lt;options&amp;gt; Pass comma-separated &amp;lt;options&amp;gt; on to the preprocessor
-Wl,&amp;lt;options&amp;gt; Pass comma-separated &amp;lt;options&amp;gt; on to the linker
-Xassembler &amp;lt;arg&amp;gt; Pass &amp;lt;arg&amp;gt; on to the assembler
-Xpreprocessor &amp;lt;arg&amp;gt; Pass &amp;lt;arg&amp;gt; on to the preprocessor
-Xlinker &amp;lt;arg&amp;gt; Pass &amp;lt;arg&amp;gt; on to the linker
-save-temps Do not delete intermediate files
-save-temps=&amp;lt;arg&amp;gt; Do not delete intermediate files
-no-canonical-prefixes Do not canonicalize paths when building relative
prefixes to other gcc components
-pipe Use pipes rather than intermediate files
-time Time the execution of each subprocess
-specs=&amp;lt;file&amp;gt; Override built-in specs with the contents of &amp;lt;file&amp;gt;
-std=&amp;lt;standard&amp;gt; Assume that the input sources are for &amp;lt;standard&amp;gt;
--sysroot=&amp;lt;directory&amp;gt; Use &amp;lt;directory&amp;gt; as the root directory for headers
and libraries
-B &amp;lt;directory&amp;gt; Add &amp;lt;directory&amp;gt; to the compiler&amp;#39;s search paths
-v Display the programs invoked by the compiler
-### Like -v but options quoted and commands not executed
-E Preprocess only; do not compile, assemble or link
-S Compile only; do not assemble or link
-c Compile and assemble, but do not link
-o &amp;lt;file&amp;gt; Place the output into &amp;lt;file&amp;gt;
-pie Create a position independent executable
-shared Create a shared library
-x &amp;lt;language&amp;gt; Specify the language of the following input files
Permissible languages include: c c++ assembler none
&amp;#39;none&amp;#39; means revert to the default behavior of
guessing the language based on the file&amp;#39;s extension
&lt;/code>&lt;/pre>&lt;p>输入 &lt;code>g++ -v --help&lt;/code>可以看到更完整的指令。
例如还有些常用的：&lt;/p>
&lt;pre tabindex="0">&lt;code>-h FILENAME, -soname FILENAME: Set internal name of shared library
-I PROGRAM, --dynamic-linker PROGRAM: Set PROGRAM as the dynamic linker to use
-l LIBNAME, --library LIBNAME: Search for library LIBNAME
-L DIRECTORY, --library-path DIRECTORY: Add DIRECTORY to library search path
&lt;/code>&lt;/pre>&lt;p>&lt;strong>获得程序状态&lt;/strong>:&lt;/p>
&lt;ul>
&lt;li>windows: &lt;code>echo %ERRORLEVEL%&lt;/code>&lt;/li>
&lt;li>UNIX: &lt;code>echo $?&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="io">IO&lt;/h2>
&lt;ul>
&lt;li>&lt;code>#include &amp;lt;iostream&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>std::cout &amp;lt;&amp;lt; &amp;quot;hello&amp;quot;&lt;/code>&lt;/li>
&lt;li>&lt;code>std::cin &amp;gt;&amp;gt; v1&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>记住&lt;code>&amp;gt;&amp;gt;&lt;/code>和&lt;code>&amp;lt;&amp;lt;&lt;/code>返回的结果都是左操作数，也就是输入流和输出流本身。&lt;/p>
&lt;p>&lt;strong>endl&lt;/strong>：这是一个被称为&lt;strong>操纵符&lt;/strong>（manipulator）的特殊值，效果是结束当前行，并将设备关联的缓冲区（buffer）中的内容刷到设备中。&lt;/p>
&lt;p>UNIX 和 Mac 下键盘输入文件结束符：&lt;code>ctrl+d&lt;/code>，Windows 下：&lt;code>ctrl+z&lt;/code>&lt;/p>
&lt;p>&lt;strong>头文件&lt;/strong>：类的类型一般存储在头文件中，标准库的头文件使用&lt;code>&amp;lt;&amp;gt;&lt;/code>，非标准库的头文件使用&lt;code>&amp;quot;&amp;quot;&lt;/code>。申明写在&lt;code>.h&lt;/code>文件，定义实现写在&lt;code>.cpp&lt;/code>文件。&lt;/p>
&lt;p>&lt;strong>避免多次包含同一头文件&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef SALESITEM_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SALESITEM_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">// Definition of Sales_itemclass and related functions goes here
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>成员函数（类方法）&lt;/strong>：使用&lt;code>.&lt;/code>调用。&lt;/p>
&lt;p>&lt;strong>命名空间（namespace）&lt;/strong>：使用作用域运算符&lt;code>::&lt;/code>调用。&lt;/p>
&lt;h2 id="注释">注释&lt;/h2>
&lt;ul>
&lt;li>单行注释： &lt;code>//&lt;/code>&lt;/li>
&lt;li>多行注释： &lt;code>/**/&lt;/code>。编译器将&lt;code>/*&lt;/code>和&lt;code>*/&lt;/code>之间的内容都作为注释内容忽略。注意不能嵌套。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define SALESITEM_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 多行注释格式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * 每一行加一个*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="while-语句">while 语句&lt;/h2>
&lt;p>循环执行，（直到条件（condition）为假。&lt;/p>
&lt;h2 id="for-语句">for 语句&lt;/h2>
&lt;p>循环头由三部分组成：&lt;/p>
&lt;ul>
&lt;li>一个初始化语句（init-statement）&lt;/li>
&lt;li>一个循环条件（condition）&lt;/li>
&lt;li>一个表达式（expression）&lt;/li>
&lt;/ul>
&lt;h2 id="使用文件重定向">使用文件重定向&lt;/h2>
&lt;p>&lt;code>./main &amp;lt;infile &amp;gt;outfile&lt;/code>&lt;/p></description></item><item><title>02.变量和基本类型</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/02.%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/02.%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</guid><description>&lt;h1 id="第二章-变量和基本类型">第二章 变量和基本类型&lt;/h1>
&lt;p>任何常用的编程语言都具备一组公共的语法特征，最基本的特征包括：&lt;/p>
&lt;ul>
&lt;li>整型、字符型等内置类型&lt;/li>
&lt;li>变量，用来为对象命名&lt;/li>
&lt;li>表达式和语句，用于操作上述数据类型的具体值&lt;/li>
&lt;li>if 或 while 等控制结构，有选择地执行一些语句或重复地执行一些语句&lt;/li>
&lt;li>函数，用于定义可供随时调用的计算单元&lt;/li>
&lt;/ul>
&lt;p>大多数编程语言通过两种方式来进一步补充其基本特征：&lt;/p>
&lt;ul>
&lt;li>自定义数据类型，实现对语言的扩展&lt;/li>
&lt;li>将一些有用的功能封装成库函数&lt;/li>
&lt;/ul>
&lt;h3 id="基本内置类型">基本内置类型&lt;/h3>
&lt;p>&lt;strong>基本算数类型&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型&lt;/th>
&lt;th>含义&lt;/th>
&lt;th>最小尺寸&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>bool&lt;/code>&lt;/td>
&lt;td>布尔类型&lt;/td>
&lt;td>8bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>char&lt;/code>&lt;/td>
&lt;td>字符&lt;/td>
&lt;td>8bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>wchar_t&lt;/code>&lt;/td>
&lt;td>宽字符&lt;/td>
&lt;td>16bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>char16_t&lt;/code>&lt;/td>
&lt;td>Unicode 字符&lt;/td>
&lt;td>16bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>char32_t&lt;/code>&lt;/td>
&lt;td>Unicode 字符&lt;/td>
&lt;td>32bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>short&lt;/code>&lt;/td>
&lt;td>短整型&lt;/td>
&lt;td>16bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>int&lt;/code>&lt;/td>
&lt;td>整型&lt;/td>
&lt;td>16bits (在 32 位机器中是 32bits)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>long&lt;/code>&lt;/td>
&lt;td>长整型&lt;/td>
&lt;td>32bits&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>long long&lt;/code>&lt;/td>
&lt;td>长整型&lt;/td>
&lt;td>64bits （是在 C++11 中新定义的）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>float&lt;/code>&lt;/td>
&lt;td>单精度浮点数&lt;/td>
&lt;td>6 位有效数字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>double&lt;/code>&lt;/td>
&lt;td>双精度浮点数&lt;/td>
&lt;td>10 位有效数字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>long double&lt;/code>&lt;/td>
&lt;td>扩展精度浮点数&lt;/td>
&lt;td>10 位有效数字&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="如何选择类型">如何选择类型&lt;/h3>
&lt;ul>
&lt;li>1.当明确知晓数值不可能是负数时，选用无符号类型；&lt;/li>
&lt;li>2.使用&lt;code>int&lt;/code>执行整数运算。一般&lt;code>long&lt;/code>的大小和&lt;code>int&lt;/code>一样，而&lt;code>short&lt;/code>常常显得太小。除非超过了&lt;code>int&lt;/code>的范围，选择&lt;code>long long&lt;/code>。&lt;/li>
&lt;li>3.算术表达式中不要使用&lt;code>char&lt;/code>或&lt;code>bool&lt;/code>。&lt;/li>
&lt;li>4.浮点运算选用&lt;code>double&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="类型转换">类型转换&lt;/h3>
&lt;ul>
&lt;li>非布尔型赋给布尔型，初始值为 0 则结果为 false，否则为 true。&lt;/li>
&lt;li>布尔型赋给非布尔型，初始值为 false 结果为 0，初始值为 true 结果为 1。&lt;/li>
&lt;/ul>
&lt;h3 id="字面值常量">字面值常量&lt;/h3>
&lt;ul>
&lt;li>一个形如&lt;code>42&lt;/code>的值被称作&lt;strong>字面值常量&lt;/strong>（literal）。
&lt;ul>
&lt;li>整型和浮点型字面值。&lt;/li>
&lt;li>字符和字符串字面值。
&lt;ul>
&lt;li>使用空格连接，继承自 C。&lt;/li>
&lt;li>字符字面值：单引号， &lt;code>'a'&lt;/code>&lt;/li>
&lt;li>字符串字面值：双引号， &lt;code>&amp;quot;Hello World&amp;quot;&lt;/code>&lt;/li>
&lt;li>分多行书写字符串。
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="nl">std&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="s">&amp;#34;wow, a really, really long string&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;literal that spans two lines&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>转义序列。&lt;code>\n&lt;/code>、&lt;code>\t&lt;/code>等。&lt;/li>
&lt;li>布尔字面值。&lt;code>true&lt;/code>，&lt;code>false&lt;/code>。&lt;/li>
&lt;li>指针字面值。&lt;code>nullptr&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>字符串型实际上时常量字符构成的数组，结尾处以&lt;code>'\0'&lt;/code>结束，所以字符串类型实际上长度比内容多 1。&lt;/p>
&lt;/blockquote>
&lt;h2 id="变量">变量&lt;/h2>
&lt;p>&lt;strong>变量&lt;/strong>提供一个&lt;strong>具名&lt;/strong>的、可供程序操作的存储空间。&lt;code>C++&lt;/code>中&lt;strong>变量&lt;/strong>和&lt;strong>对象&lt;/strong>一般可以互换使用。&lt;/p>
&lt;h3 id="变量定义define">变量定义（define）&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>定义形式&lt;/strong>：类型说明符（type specifier） + 一个或多个变量名组成的列表。如&lt;code>int sum = 0, value, units_sold = 0;&lt;/code>&lt;/li>
&lt;li>&lt;strong>初始化&lt;/strong>（initialize）：对象在创建时获得了一个特定的值。
&lt;ul>
&lt;li>&lt;strong>初始化不是赋值！&lt;/strong>：&lt;/li>
&lt;li>初始化 = 创建变量 + 赋予初始值&lt;/li>
&lt;li>赋值 = 擦除对象的当前值 + 用新值代替&lt;/li>
&lt;li>&lt;strong>列表初始化&lt;/strong>：使用花括号&lt;code>{}&lt;/code>，如&lt;code>int units_sold{0};&lt;/code>&lt;/li>
&lt;li>默认初始化：定义时没有指定初始值会被默认初始化；&lt;strong>在函数体内部的内置类型变量将不会被初始化&lt;/strong>。&lt;/li>
&lt;li>建议初始化每一个内置类型的变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="变量的声明declaration-vs-定义define">变量的&lt;strong>声明&lt;/strong>（declaration） vs &lt;strong>定义&lt;/strong>（define）&lt;/h3>
&lt;ul>
&lt;li>为了支持分离式编译，&lt;code>C++&lt;/code>将声明和定义区分开。&lt;strong>声明&lt;/strong>使得名字为程序所知。&lt;strong>定义&lt;/strong>负责创建与名字关联的实体。&lt;/li>
&lt;li>&lt;strong>extern&lt;/strong>：只是说明变量定义在其他地方。&lt;/li>
&lt;li>只声明而不定义： 在变量名前添加关键字 &lt;code>extern&lt;/code>，如&lt;code>extern int i;&lt;/code>。但如果包含了初始值，就变成了定义：&lt;code>extern double pi = 3.14;&lt;/code>&lt;/li>
&lt;li>变量只能被定义一次，但是可以多次声明。定义只出现在一个文件中，其他文件使用该变量时需要对其声明。&lt;/li>
&lt;li>名字的&lt;strong>作用域&lt;/strong>（namescope）&lt;code>{}&lt;/code>
&lt;ul>
&lt;li>&lt;strong>第一次使用变量时再定义它&lt;/strong>。&lt;/li>
&lt;li>嵌套的作用域
&lt;ul>
&lt;li>同时存在全局和局部变量时，已定义局部变量的作用域中可用&lt;code>::reused&lt;/code>显式访问全局变量 reused。&lt;/li>
&lt;li>&lt;strong>但是用到全局变量时，尽量不适用重名的局部变量。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="变量命名规范">变量命名规范&lt;/h4>
&lt;ol>
&lt;li>需体现实际意义&lt;/li>
&lt;li>变量名用小写字母&lt;/li>
&lt;li>自定义类名用大写字母开头：Sales_item&lt;/li>
&lt;li>标识符由多个单词组成，中间须有明确区分：student_loan 或 studentLoan，不要用 studentloan。&lt;/li>
&lt;/ol>
&lt;h2 id="左值和右值">左值和右值&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>左值&lt;/strong>（l-value）&lt;strong>可以&lt;/strong>出现在赋值语句的左边或者右边，比如变量；&lt;/li>
&lt;li>&lt;strong>右值&lt;/strong>（r-value）&lt;strong>只能&lt;/strong>出现在赋值语句的右边，比如常量。&lt;/li>
&lt;/ul>
&lt;h2 id="复合类型">复合类型&lt;/h2>
&lt;h3 id="引用">引用&lt;/h3>
&lt;blockquote>
&lt;p>一般说的引用是指的左值引用&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>引用&lt;/strong>：引用是一个对象的别名，引用类型引用（refer to）另外一种类型。如&lt;code>int &amp;amp;refVal = val;&lt;/code>。&lt;/li>
&lt;li>引用必须初始化。&lt;/li>
&lt;li>引用和它的初始值是&lt;strong>绑定 bind&lt;/strong>在一起的，而&lt;strong>不是拷贝&lt;/strong>。一旦定义就不能更改绑定为其他的对象&lt;/li>
&lt;/ul>
&lt;h3 id="指针">指针&lt;/h3>
&lt;blockquote>
&lt;p>&lt;code>int *p&lt;/code>; //&lt;strong>指向 int 型对象&lt;/strong>的指针&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>是一种 &lt;code>&amp;quot;指向（point to）&amp;quot;&lt;/code>另外一种类型的复合类型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>定义&lt;/strong>指针类型： &lt;code>int *ip1;&lt;/code>，&lt;strong>从右向左读有助于阅读&lt;/strong>，&lt;code>ip1&lt;/code>是指向&lt;code>int&lt;/code>类型的指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针存放某个对象的&lt;strong>地址&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>获取对象的地址： &lt;code>int i=42; int *p = &amp;amp;i;&lt;/code>。&lt;code>&amp;amp;&lt;/code>是&lt;strong>取地址符&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针的类型与所指向的对象类型必须一致（均为同一类型 int、double 等）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>指针的值的四种状态：&lt;/p>
&lt;ul>
&lt;li>1.指向一个对象；&lt;/li>
&lt;li>2.指向紧邻对象的下一个位置；&lt;/li>
&lt;li>3.空指针；&lt;/li>
&lt;li>4.无效指针。&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>&lt;strong>对无效指针的操作均会引发错误，第二种和第三种虽为有效的，但理论上是不被允许的&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>指针访问对象： &lt;code>cout &amp;lt;&amp;lt; *p;&lt;/code>输出 p 指针所指对象的数据， &lt;code>*&lt;/code>是&lt;strong>解引用符&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>空指针不指向任何对象。使用&lt;code>int *p = nullptr;&lt;/code>来使用空指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>指针和引用的区别：引用本身并非一个对象，引用定义后就不能绑定到其他的对象了；指针并没有此限制，相当于变量一样使用。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;blockquote>
&lt;p>赋值语句永远改变的是&lt;strong>左侧&lt;/strong>的对象。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;code>void*&lt;/code>指针可以存放&lt;strong>任意&lt;/strong>对象的地址。因无类型，仅操作内存空间，对所存对象无法访问。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>其他指针类型必须要与所指对象&lt;strong>严格匹配&lt;/strong>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两个指针相减的类型是&lt;code>ptrdiff_t&lt;/code>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>建议：初始化所有指针。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>int* p1, p2;//*是对p1的修饰，所以p2还是int型&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="const-限定符">const 限定符&lt;/h2>
&lt;ul>
&lt;li>动机：希望定义一些不能被改变值的变量。&lt;/li>
&lt;/ul>
&lt;h3 id="初始化和-const">初始化和 const&lt;/h3>
&lt;ul>
&lt;li>const 对象&lt;strong>必须初始化&lt;/strong>，且&lt;strong>不能被改变&lt;/strong>。&lt;/li>
&lt;li>const 变量默认不能被其他文件访问，非要访问，必须在指定 const 定义之前加 extern。要想在多个文件中使用 const 变量共享，定义和声明都加 const 关键字即可。&lt;/li>
&lt;/ul>
&lt;h3 id="const-的引用">const 的引用&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>reference to const&lt;/strong>（对常量的引用）：指向 const 对象的引用，如 &lt;code>const int ival=1; const int &amp;amp;refVal = ival;&lt;/code>，可以读取但不能修改&lt;code>refVal&lt;/code>。&lt;/li>
&lt;li>&lt;strong>临时量&lt;/strong>（temporary）对象：当编译器需要一个空间来暂存表达式的求值结果时，临时创建的一个未命名的对象。&lt;/li>
&lt;li>对临时量的引用是非法行为。&lt;/li>
&lt;/ul>
&lt;h3 id="指针和-const">指针和 const&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>pointer to const&lt;/strong>（指向常量的指针）：不能用于改变其所指对象的值, 如 &lt;code>const double pi = 3.14; const double *cptr = &amp;amp;pi;&lt;/code>。&lt;/li>
&lt;li>&lt;strong>const pointer&lt;/strong>：指针本身是常量，也就是说指针固定指向该对象，（存放在指针中的地址不变，地址所对应的那个对象值可以修改）如 &lt;code>int i = 0; int *const ptr = &amp;amp;i;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="顶层-const">顶层 const&lt;/h3>
&lt;ul>
&lt;li>&lt;code>顶层const&lt;/code>：指针本身是个常量。&lt;/li>
&lt;li>&lt;code>底层const&lt;/code>：指针指向的对象是个常量。拷贝时严格要求相同的底层 const 资格。&lt;/li>
&lt;/ul>
&lt;h3 id="constexpr-和常量表达式-可选">&lt;code>constexpr&lt;/code> 和常量表达式（▲ 可选）&lt;/h3>
&lt;ul>
&lt;li>常量表达式：指值不会改变，且在编译过程中就能得到计算结果的表达式。&lt;/li>
&lt;li>&lt;code>C++11&lt;/code> 新标准规定，允许将变量声明为&lt;code>constexpr&lt;/code>类型以便由编译器来验证变量的值是否是一个常量的表达式。&lt;/li>
&lt;/ul>
&lt;h2 id="处理类型">处理类型&lt;/h2>
&lt;h3 id="类型别名">类型别名&lt;/h3>
&lt;ul>
&lt;li>传统别名：使用&lt;strong>typedef&lt;/strong>来定义类型的同义词。&lt;code>typedef double wages;&lt;/code>&lt;/li>
&lt;li>新标准别名：别名声明（alias declaration）： &lt;code>using SI = Sales_item;&lt;/code>（C++11）&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 对于复合类型（指针等）不能代回原式来进行理解
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pstring&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// pstring是char*的别名
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">pstring&lt;/span> &lt;span class="n">cstr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 指向char的常量指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 如改写为const char *cstr = 0;不正确，为指向const char的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 辅助理解（可代回后加括号）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const pstring cstr = 0;代回后const (char *) cstr = 0;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// const char *cstr = 0;即为(const char *) cstr = 0;
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="auto-类型说明符-c11">auto 类型说明符 c++11&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>auto&lt;/strong>类型说明符：让编译器&lt;strong>自动推断类型&lt;/strong>。&lt;/li>
&lt;li>一条声明语句只能有一个数据类型，所以一个 auto 声明多个变量时只能相同的变量类型(包括复杂类型 &amp;amp; 和 &lt;code>*&lt;/code>)。&lt;code>auto sz = 0, pi =3.14//错误&lt;/code>&lt;/li>
&lt;li>&lt;code>int i = 0, &amp;amp;r = i; auto a = r;&lt;/code> 推断&lt;code>a&lt;/code>的类型是&lt;code>int&lt;/code>。&lt;/li>
&lt;li>会忽略&lt;code>顶层const&lt;/code>。&lt;/li>
&lt;li>&lt;code>const int ci = 1; const auto f = ci;&lt;/code>推断类型是&lt;code>int&lt;/code>，如果希望是顶层 const 需要自己加&lt;code>const&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="decltype-类型指示符">decltype 类型指示符&lt;/h3>
&lt;ul>
&lt;li>从表达式的类型推断出要定义的变量的类型。&lt;/li>
&lt;li>&lt;strong>decltype&lt;/strong>：选择并返回操作数的&lt;strong>数据类型&lt;/strong>。&lt;/li>
&lt;li>&lt;code>decltype(f()) sum = x;&lt;/code> 推断&lt;code>sum&lt;/code>的类型是函数&lt;code>f&lt;/code>的返回类型。&lt;/li>
&lt;li>不会忽略&lt;code>顶层const&lt;/code>。&lt;/li>
&lt;li>如果对变量加括号，编译器会将其认为是一个表达式，如 int i&amp;ndash;&amp;gt;(i),则 decltype((i))得到结果为 int&amp;amp;引用。&lt;/li>
&lt;li>赋值是会产生引用的一类典型表达式，引用的类型就是左值的类型。也就是说，如果 i 是 int，则表达式 i=x 的类型是 int&amp;amp;。&lt;/li>
&lt;li>&lt;code>C++11&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="自定义数据结构">自定义数据结构&lt;/h2>
&lt;h3 id="struct">struct&lt;/h3>
&lt;blockquote>
&lt;p>尽量不要吧类定义和对象定义放在一起。如&lt;code>struct Student{} xiaoming,xiaofang;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>类可以以关键字&lt;code>struct&lt;/code>开始，紧跟类名和类体。&lt;/li>
&lt;li>类数据成员：类体定义类的成员。&lt;/li>
&lt;li>&lt;code>C++11&lt;/code>：可以为类数据成员提供一个&lt;strong>类内初始值&lt;/strong>（in-class initializer）。&lt;/li>
&lt;/ul>
&lt;h3 id="编写自己的头文件">编写自己的头文件&lt;/h3>
&lt;ul>
&lt;li>头文件通常包含哪些只能被定义一次的实体：类、&lt;code>const&lt;/code> 和 &lt;code>constexpr&lt;/code> 变量。&lt;/li>
&lt;/ul>
&lt;p>预处理器概述：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>预处理器&lt;/strong>（preprocessor）：确保头文件多次包含仍能安全工作。&lt;/li>
&lt;li>当预处理器看到&lt;code>#include&lt;/code>标记时，会用指定的头文件内容代替&lt;code>#include&lt;/code>&lt;/li>
&lt;li>&lt;strong>头文件保护符&lt;/strong>（header guard）：头文件保护符依赖于预处理变量的状态：已定义和未定义。
&lt;ul>
&lt;li>&lt;code>#indef&lt;/code> 已定义时为真&lt;/li>
&lt;li>&lt;code>#inndef&lt;/code> 未定义时为真&lt;/li>
&lt;li>头文件保护符的名称需要唯一，且保持全部大写。养成良好习惯，不论是否该头文件被包含，要加保护符。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef SALES_DATA_H &lt;/span>&lt;span class="c1">//SALES_DATA_H 未定义时为真
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#define SALES_DATA_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">strct&lt;/span> &lt;span class="n">Sale_data&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>03.字符串、向量和数组</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/03.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/03.%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</guid><description>&lt;h1 id="第三章-字符串向量和数组">第三章 字符串、向量和数组&lt;/h1>
&lt;h2 id="using-声明">using 声明&lt;/h2>
&lt;ul>
&lt;li>使用某个命名空间：例如 &lt;code>using std::cin&lt;/code>表示使用命名空间&lt;code>std&lt;/code>中的名字&lt;code>cin&lt;/code>。&lt;/li>
&lt;li>头文件中不应该包含&lt;code>using&lt;/code>声明。这样使用了该头文件的源码也会使用这个声明，会带来风险。&lt;/li>
&lt;/ul>
&lt;h2 id="string">string&lt;/h2>
&lt;ul>
&lt;li>标准库类型&lt;code>string&lt;/code>表示可变长的字符序列。&lt;/li>
&lt;li>&lt;code>#include &amp;lt;string&amp;gt;&lt;/code>，然后 &lt;code>using std::string;&lt;/code>&lt;/li>
&lt;li>&lt;strong>string 对象&lt;/strong>：注意，不同于字符串字面值。&lt;/li>
&lt;/ul>
&lt;h3 id="定义和初始化-string-对象">定义和初始化 string 对象&lt;/h3>
&lt;p>初始化&lt;code>string&lt;/code>对象的方式：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方式&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>string s1&lt;/code>&lt;/td>
&lt;td>默认初始化，&lt;code>s1&lt;/code>是个空字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string s2(s1)&lt;/code>&lt;/td>
&lt;td>&lt;code>s2&lt;/code>是&lt;code>s1&lt;/code>的副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string s2 = s1&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>s2(s1)&lt;/code>，&lt;code>s2&lt;/code>是&lt;code>s1&lt;/code>的副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string s3(&amp;quot;value&amp;quot;)&lt;/code>&lt;/td>
&lt;td>&lt;code>s3&lt;/code>是字面值“value”的副本，除了字面值最后的那个空字符外&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string s3 = &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>s3(&amp;quot;value&amp;quot;)&lt;/code>，&lt;code>s3&lt;/code>是字面值&amp;quot;value&amp;quot;的副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string s4(n, 'c')&lt;/code>&lt;/td>
&lt;td>把&lt;code>s4&lt;/code>初始化为由连续&lt;code>n&lt;/code>个字符&lt;code>c&lt;/code>组成的串&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>拷贝初始化（copy initialization）：使用等号&lt;code>=&lt;/code>将一个已有的对象拷贝到正在创建的对象。&lt;/li>
&lt;li>直接初始化（direct initialization）：通过括号给对象赋值。&lt;/li>
&lt;/ul>
&lt;h3 id="string-对象上的操作">string 对象上的操作&lt;/h3>
&lt;p>&lt;code>string&lt;/code>的操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>os &amp;lt;&amp;lt; s&lt;/code>&lt;/td>
&lt;td>将&lt;code>s&lt;/code>写到输出流&lt;code>os&lt;/code>当中，返回&lt;code>os&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is &amp;gt;&amp;gt; s&lt;/code>&lt;/td>
&lt;td>从&lt;code>is&lt;/code>中读取字符串赋给&lt;code>s&lt;/code>，字符串以空白分割，返回&lt;code>is&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>getline(is, s)&lt;/code>&lt;/td>
&lt;td>从&lt;code>is&lt;/code>中读取一行赋给&lt;code>s&lt;/code>，返回&lt;code>is&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.empty()&lt;/code>&lt;/td>
&lt;td>&lt;code>s&lt;/code>为空返回&lt;code>true&lt;/code>，否则返回&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.size()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>s&lt;/code>中字符的个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s[n]&lt;/code>&lt;/td>
&lt;td>返回&lt;code>s&lt;/code>中第&lt;code>n&lt;/code>个字符的引用，位置&lt;code>n&lt;/code>从 0 计起&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s1+s2&lt;/code>&lt;/td>
&lt;td>返回&lt;code>s1&lt;/code>和&lt;code>s2&lt;/code>连接后的结果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s1=s2&lt;/code>&lt;/td>
&lt;td>用&lt;code>s2&lt;/code>的副本代替&lt;code>s1&lt;/code>中原来的字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s1==s2&lt;/code>&lt;/td>
&lt;td>如果&lt;code>s1&lt;/code>和&lt;code>s2&lt;/code>中所含的字符完全一样，则它们相等；&lt;code>string&lt;/code>对象的相等性判断对字母的大小写敏感&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s1!=s2&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>, &lt;code>&amp;lt;=&lt;/code>, &lt;code>&amp;gt;&lt;/code>, &lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;td>利用字符在字典中的顺序进行比较，且对字母的大小写敏感（对第一个不相同的位置进行比较）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>string io：
&lt;ul>
&lt;li>执行读操作&lt;code>&amp;gt;&amp;gt;&lt;/code>：忽略掉开头的空白（包括空格、换行符和制表符），直到遇到下一处空白为止。&lt;/li>
&lt;li>&lt;code>getline&lt;/code>：读取一整行，&lt;strong>包括空白符&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>s.size()&lt;/code>返回的时&lt;code>string::size_type&lt;/code>类型，记住是一个&lt;strong>无符号&lt;/strong>类型的值，不要和&lt;code>int&lt;/code>混用&lt;/li>
&lt;li>&lt;code>s1+s2&lt;/code>使用时，保证至少一侧是 string 类型。&lt;code>string s1 = &amp;quot;hello&amp;quot; + &amp;quot;world&amp;quot; // 错误，两侧均为字符串字面值&lt;/code>&lt;/li>
&lt;li>&lt;strong>字符串字面值和 string 是不同的类型。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;h3 id="处理-string-对象中的字符">处理 string 对象中的字符&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>ctype.h vs. cctype&lt;/strong>：C++修改了 c 的标准库，名称为去掉&lt;code>.h&lt;/code>，前面加&lt;code>c&lt;/code>。
&lt;blockquote>
&lt;p>如 c++版本为&lt;code>cctype&lt;/code>，c 版本为&lt;code>ctype.h&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;strong>尽量使用 c++版本的头文件&lt;/strong>，即&lt;code>cctype&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>cctype&lt;/code>头文件中定义了一组标准函数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>函数&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>isalnum(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是字母或数字时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isalpha(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是字母时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>iscntrl(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是控制字符时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isdigit(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是数字时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isgraph(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>不是空格但可以打印时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>islower(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是小写字母时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isprint(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是可打印字符时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ispunct(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是标点符号时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isspace(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是空白时为真（空格、横向制表符、纵向制表符、回车符、换行符、进纸符）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isupper(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是大写字母时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>isxdigit(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是十六进制数字时为真&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tolower(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是大写字母，输出对应的小写字母；否则原样输出&lt;code>c&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>toupper(c)&lt;/code>&lt;/td>
&lt;td>当&lt;code>c&lt;/code>是小写字母，输出对应的大写字母；否则原样输出&lt;code>c&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>遍历字符串：使用&lt;strong>范围 for&lt;/strong>（range for）语句： &lt;code>for (auto c: str)&lt;/code>，或者 &lt;code>for (auto &amp;amp;c: str)&lt;/code>使用引用直接改变字符串中的字符。（C++11）&lt;/li>
&lt;li>&lt;code>str[x]&lt;/code>,[]输入参数为&lt;code>string::size_type&lt;/code>类型，给出&lt;code>int&lt;/code>整型也会自动转化为该类型&lt;/li>
&lt;/ul>
&lt;h2 id="vector">vector&lt;/h2>
&lt;ul>
&lt;li>vector 是一个&lt;strong>容器&lt;/strong>，也是一个类模板；&lt;/li>
&lt;li>&lt;code>#include &amp;lt;vector&amp;gt;&lt;/code> 然后 &lt;code>using std::vector;&lt;/code>&lt;/li>
&lt;li>容器：包含其他对象。&lt;/li>
&lt;li>类模板：本身不是类，但可以&lt;strong>实例化 instantiation&lt;/strong>出一个类。&lt;code>vector&lt;/code>是一个模板， &lt;code>vector&amp;lt;int&amp;gt;&lt;/code>是一个类型。&lt;/li>
&lt;li>通过将类型放在类模板名称后面的&lt;strong>尖括号&lt;/strong>中来指定&lt;strong>类型&lt;/strong>，如&lt;code>vector&amp;lt;int&amp;gt; ivec&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="定义和初始化-vector-对象">定义和初始化 vector 对象&lt;/h3>
&lt;p>初始化&lt;code>vector&lt;/code>对象的方法&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>方法&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>vector&amp;lt;T&amp;gt; v1&lt;/code>&lt;/td>
&lt;td>&lt;code>v1&lt;/code>是一个空&lt;code>vector&lt;/code>，它潜在的元素是&lt;code>T&lt;/code>类型的，执行默认初始化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>vector&amp;lt;T&amp;gt; v2(v1)&lt;/code>&lt;/td>
&lt;td>&lt;code>v2&lt;/code>中包含有&lt;code>v1&lt;/code>所有元素的副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>vector&amp;lt;T&amp;gt; v2 = v1&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>v2(v1)&lt;/code>，&lt;code>v2&lt;/code>中包含&lt;code>v1&lt;/code>所有元素的副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>vector&amp;lt;T&amp;gt; v3(n, val)&lt;/code>&lt;/td>
&lt;td>&lt;code>v3&lt;/code>包含了 n 个重复的元素，每个元素的值都是&lt;code>val&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>vector&amp;lt;T&amp;gt; v4(n)&lt;/code>&lt;/td>
&lt;td>&lt;code>v4&lt;/code>包含了 n 个重复地执行了值初始化的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>vector&amp;lt;T&amp;gt; v5{a, b, c...}&lt;/code>&lt;/td>
&lt;td>&lt;code>v5&lt;/code>包含了初始值个数的元素，每个元素被赋予相应的初始值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>vector&amp;lt;T&amp;gt; v5={a, b, c...}&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>v5{a, b, c...}&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>列表初始化： &lt;code>vector&amp;lt;string&amp;gt; v{&amp;quot;a&amp;quot;, &amp;quot;an&amp;quot;, &amp;quot;the&amp;quot;};&lt;/code> （C++11）&lt;/li>
&lt;/ul>
&lt;h3 id="向-vector-对象中添加元素">向 vector 对象中添加元素&lt;/h3>
&lt;ul>
&lt;li>&lt;code>v.push_back(e)&lt;/code> 在尾部增加元素。&lt;/li>
&lt;/ul>
&lt;h3 id="其他-vector-操作">其他 vector 操作&lt;/h3>
&lt;p>&lt;code>vector&lt;/code>支持的操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>v.emtpy()&lt;/code>&lt;/td>
&lt;td>如果&lt;code>v&lt;/code>不含有任何元素，返回真；否则返回假&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>v.size()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>v&lt;/code>中元素的个数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>v.push_back(t)&lt;/code>&lt;/td>
&lt;td>向&lt;code>v&lt;/code>的尾端添加一个值为&lt;code>t&lt;/code>的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>v[n]&lt;/code>&lt;/td>
&lt;td>返回&lt;code>v&lt;/code>中第&lt;code>n&lt;/code>个位置上元素的&lt;strong>引用&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>v1 = v2&lt;/code>&lt;/td>
&lt;td>用&lt;code>v2&lt;/code>中的元素拷贝替换&lt;code>v1&lt;/code>中的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>v1 = {a,b,c...}&lt;/code>&lt;/td>
&lt;td>用列表中元素的拷贝替换&lt;code>v1&lt;/code>中的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>v1 == v2&lt;/code>&lt;/td>
&lt;td>&lt;code>v1&lt;/code>和&lt;code>v2&lt;/code>相等当且仅当它们的元素数量相同且对应位置的元素值都相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>v1 != v2&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>,&lt;code>&amp;lt;=&lt;/code>,&lt;code>&amp;gt;&lt;/code>, &lt;code>&amp;gt;=&lt;/code>&lt;/td>
&lt;td>以字典顺序进行比较&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>范围&lt;code>for&lt;/code>语句内不应该改变其遍历序列的大小。&lt;/li>
&lt;li>&lt;code>vector&lt;/code>对象（以及&lt;code>string&lt;/code>对象）的下标运算符，只能对确知已存在的元素执行下标操作，不能用于添加元素。&lt;/li>
&lt;/ul>
&lt;h2 id="迭代器-iterator">迭代器 iterator&lt;/h2>
&lt;ul>
&lt;li>所有标准库容器都可以使用迭代器。&lt;/li>
&lt;li>类似于指针类型，迭代器也提供了对对象的间接访问。&lt;/li>
&lt;/ul>
&lt;h3 id="使用迭代器">使用迭代器&lt;/h3>
&lt;ul>
&lt;li>&lt;code>vector&amp;lt;int&amp;gt;::iterator iter&lt;/code>。&lt;/li>
&lt;li>&lt;code>auto b = v.begin();&lt;/code>返回指向第一个元素的迭代器。&lt;/li>
&lt;li>&lt;code>auto e = v.end();&lt;/code>返回指向最后一个元素的下一个（哨兵，尾后,one past the end）的迭代器（off the end）。&lt;/li>
&lt;li>如果容器为空， &lt;code>begin()&lt;/code>和 &lt;code>end()&lt;/code>返回的是同一个迭代器，都是尾后迭代器。&lt;/li>
&lt;li>使用解引用符&lt;code>*&lt;/code>访问迭代器指向的元素。&lt;/li>
&lt;li>养成使用迭代器和&lt;code>!=&lt;/code>的习惯（泛型编程）。&lt;/li>
&lt;li>&lt;strong>容器&lt;/strong>：可以包含其他对象；但所有的对象必须类型相同。&lt;/li>
&lt;li>&lt;strong>迭代器（iterator）&lt;/strong>：每种标准容器都有自己的迭代器。&lt;code>C++&lt;/code>倾向于用迭代器而不是下标遍历元素。&lt;/li>
&lt;li>&lt;strong>const_iterator&lt;/strong>：只能读取容器内元素不能改变。&lt;/li>
&lt;li>&lt;strong>箭头运算符&lt;/strong>： 解引用 + 成员访问，&lt;code>it-&amp;gt;mem&lt;/code>等价于 &lt;code>(*it).mem&lt;/code>&lt;/li>
&lt;li>&lt;strong>谨记&lt;/strong>：但凡是使用了&lt;strong>迭代器&lt;/strong>的循环体，都&lt;strong>不要&lt;/strong>向迭代器所属的容器&lt;strong>添加元素&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;p>标准容器迭代器的运算符:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>*iter&lt;/code>&lt;/td>
&lt;td>返回迭代器&lt;code>iter&lt;/code>所指向的&lt;strong>元素的引用&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>iter-&amp;gt;mem&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>(*iter).mem&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>++iter&lt;/code>&lt;/td>
&lt;td>令&lt;code>iter&lt;/code>指示容器中的下一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>--iter&lt;/code>&lt;/td>
&lt;td>令&lt;code>iter&lt;/code>指示容器中的上一个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>iter1 == iter2&lt;/code>&lt;/td>
&lt;td>判断两个迭代器是否相等&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="迭代器运算">迭代器运算&lt;/h3>
&lt;p>&lt;code>vector&lt;/code>和&lt;code>string&lt;/code>迭代器支持的运算：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>iter + n&lt;/code>&lt;/td>
&lt;td>迭代器加上一个整数值仍得到一个迭代器，迭代器指示的新位置和原来相比向前移动了若干个元素。结果迭代器或者指示容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>iter - n&lt;/code>&lt;/td>
&lt;td>迭代器减去一个证书仍得到一个迭代器，迭代器指示的新位置比原来向后移动了若干个元素。结果迭代器或者指向容器内的一个元素，或者指示容器尾元素的下一位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>iter1 += n&lt;/code>&lt;/td>
&lt;td>迭代器加法的复合赋值语句，将&lt;code>iter1&lt;/code>加 n 的结果赋给&lt;code>iter1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>iter1 -= n&lt;/code>&lt;/td>
&lt;td>迭代器减法的复合赋值语句，将&lt;code>iter2&lt;/code>减 n 的加过赋给&lt;code>iter1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>iter1 - iter2&lt;/code>&lt;/td>
&lt;td>两个迭代器相减的结果是它们之间的距离，也就是说，将运算符右侧的迭代器向前移动差值个元素后得到左侧的迭代器。参与运算的两个迭代器必须指向的是同一个容器中的元素或者尾元素的下一位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;=&lt;/code>、&lt;code>&amp;lt;&lt;/code>、&lt;code>&amp;lt;=&lt;/code>&lt;/td>
&lt;td>迭代器的关系运算符，如果某迭代器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>difference_type&lt;/strong>：保证足够大以存储任何两个迭代器对象间的距离，可正可负。&lt;/li>
&lt;/ul>
&lt;h2 id="数组">数组&lt;/h2>
&lt;ul>
&lt;li>相当于 vector 的低级版，&lt;strong>长度固定&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="定义和初始化内置数组">定义和初始化内置数组&lt;/h3>
&lt;ul>
&lt;li>初始化：&lt;code>char input_buffer[buffer_size];&lt;/code>，长度必须是 const 表达式，或者不写，让编译器自己推断。&lt;/li>
&lt;li>数组不允许直接赋值给另一个数组。&lt;/li>
&lt;/ul>
&lt;h3 id="访问数组元素">访问数组元素&lt;/h3>
&lt;ul>
&lt;li>数组下标的类型：&lt;code>size_t&lt;/code> 。&lt;/li>
&lt;li>字符数组的特殊性：结尾处有一个空字符，如 &lt;code>char a[] = &amp;quot;hello&amp;quot;;&lt;/code> 。&lt;/li>
&lt;li>用数组初始化 &lt;code>vector&lt;/code>： &lt;code>int a[] = {1,2,3,4,5}; vector&amp;lt;int&amp;gt; v(begin(a), end(a));&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;h3 id="数组和指针">数组和指针&lt;/h3>
&lt;ul>
&lt;li>使用数组时，编译器一般会把它转换成指针。&lt;/li>
&lt;li>标准库类型限定使用的下标必须是无符号类型，而内置的下标可以处理负值。&lt;/li>
&lt;li>&lt;strong>指针访问数组&lt;/strong>：在表达式中使用数组名时，名字会自动转换成指向数组的第一个元素的指针。&lt;/li>
&lt;/ul>
&lt;h2 id="c-风格字符串">C 风格字符串&lt;/h2>
&lt;ul>
&lt;li>从 C 继承来的字符串。&lt;/li>
&lt;li>用空字符结束（&lt;code>\0&lt;/code>）。&lt;/li>
&lt;li>对大多数应用来说，使用标准库 &lt;code>string&lt;/code>比使用 C 风格字符串更安全、更高效。&lt;/li>
&lt;li>获取 &lt;code>string&lt;/code> 中的 &lt;code>cstring&lt;/code>： &lt;code>const char *str = s.c_str();&lt;/code> 。&lt;/li>
&lt;/ul>
&lt;p>C 标准库 String 函数，定义在&lt;code>&amp;lt;cstring&amp;gt;&lt;/code> 中：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>函数&lt;/th>
&lt;th>介绍&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>strlen(p)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>p&lt;/code>的长度，空字符不计算在内&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strcmp(p1, p2)&lt;/code>&lt;/td>
&lt;td>比较&lt;code>p1&lt;/code>和&lt;code>p2&lt;/code>的相等性。如果&lt;code>p1==p2&lt;/code>，返回 0；如果&lt;code>p1&amp;gt;p2&lt;/code>，返回一个正值；如果&lt;code>p1&amp;lt;p2&lt;/code>，返回一个负值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strcat(p1, p2)&lt;/code>&lt;/td>
&lt;td>将&lt;code>p2&lt;/code>附加到&lt;code>p1&lt;/code>之后，返回&lt;code>p1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strcpy(p1, p2)&lt;/code>&lt;/td>
&lt;td>将&lt;code>p2&lt;/code>拷贝给&lt;code>p1&lt;/code>，返回&lt;code>p1&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>尽量使用 vector 和迭代器，少用数组&lt;/strong>&lt;/p>
&lt;h2 id="多维数组">多维数组&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>多维数组的初始化&lt;/strong>： &lt;code>int ia[3][4] = {{0,1,2,3}, ...}&lt;/code>。&lt;/li>
&lt;li>使用范围 for 语句时，除了最内层的循环外，其他所有循环的控制变量都应该是&lt;strong>引用&lt;/strong>类型。&lt;/li>
&lt;/ul>
&lt;h2 id="指针-vs-引用">指针 vs 引用&lt;/h2>
&lt;ul>
&lt;li>引用总是指向某个对象，定义引用时没有初始化是错的。&lt;/li>
&lt;li>给引用赋值，修改的是该引用所关联的对象的值，而不是让引用和另一个对象相关联。&lt;/li>
&lt;/ul>
&lt;h2 id="指向指针的指针">指向指针的指针&lt;/h2>
&lt;ul>
&lt;li>定义： &lt;code>int **ppi = &amp;amp;pi;&lt;/code>&lt;/li>
&lt;li>解引用：&lt;code>**ppi&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="动态数组">动态数组&lt;/h2>
&lt;ul>
&lt;li>使用 &lt;code>new&lt;/code>和 &lt;code>delete&lt;/code>表达和 c 中&lt;code>malloc&lt;/code>和&lt;code>free&lt;/code>类似的功能，即在堆（自由存储区）中分配存储空间。&lt;/li>
&lt;li>定义： &lt;code>int *pia = new int[10];&lt;/code> 10 可以被一个变量替代。&lt;/li>
&lt;li>释放： &lt;code>delete [] pia;&lt;/code>，注意不要忘记&lt;code>[]&lt;/code>。&lt;/li>
&lt;/ul></description></item><item><title>04.表达式</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/04.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/04.%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid><description>&lt;h1 id="第四章-表达式">第四章 表达式&lt;/h1>
&lt;h2 id="表达式基础">表达式基础&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>运算对象转换&lt;/strong>：小整数类型会被提升为较大的整数类型&lt;/li>
&lt;li>&lt;strong>重载运算符&lt;/strong>：当运算符作用在类类型的运算对象时，用户可以自行定义其含义。&lt;/li>
&lt;li>&lt;strong>左值和右值&lt;/strong>：
&lt;ul>
&lt;li>C 中原意：左值&lt;strong>可以&lt;/strong>在表达式左边，右值不能。&lt;/li>
&lt;li>&lt;code>C++&lt;/code>：当一个对象被用作&lt;strong>右值&lt;/strong>的时候，用的是对象的&lt;strong>值&lt;/strong>（内容）；&lt;/li>
&lt;li>被用做&lt;strong>左值&lt;/strong>时，用的是对象的&lt;strong>身份&lt;/strong>（在内存中的位置）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>求值顺序&lt;/strong>：&lt;code>int i = f1() + f2()&lt;/code>
&lt;ul>
&lt;li>先计算&lt;code>f1() + f2()&lt;/code>,再计算&lt;code>int i = f1() + f2()&lt;/code>。但是 f1 和 f2 的计算&lt;strong>先后不确定&lt;/strong>&lt;/li>
&lt;li>但是，如果 f1、f2 都对同一对象进行了修改，因为顺序不确定，所以会编译出错，显示未定义&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="算术运算符">算术运算符&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>溢出&lt;/strong>：当计算的结果超出该类型所能表示的范围时就会产生溢出。&lt;/li>
&lt;li>&lt;strong>bool 类型不应该参与计算&lt;/strong>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">bool&lt;/span> &lt;span class="n">b2&lt;/span>&lt;span class="o">=-&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//仍然为true
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//b为true，提升为对应int=1，-b=-1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//b2=-1≠0，所以b2仍未true
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>取余运算 m%n，结果符号与 m 相同&lt;/li>
&lt;/ul>
&lt;h2 id="逻辑运算符">逻辑运算符&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>短路求值&lt;/strong>：逻辑与运算符和逻辑或运算符都是先求左侧运算对象的值再求右侧运算对象的值，当且仅当左侧运算对象无法确定表达式的结果时才会计算右侧运算对象的值。&lt;strong>先左再右&lt;/strong>&lt;/li>
&lt;li>小技巧，声明为引用类型可以避免对元素的拷贝，如下，如 string 特别大时可以节省大量时间。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">auto&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="nl">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">text&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="赋值运算符">赋值运算符&lt;/h2>
&lt;ul>
&lt;li>赋值运算的&lt;strong>返回结果时它的左侧运算对象&lt;/strong>，且是一个左值。类型也就是左侧对象的类型。&lt;/li>
&lt;li>如果赋值运算的左右侧运算对象类型不同，则右侧运算对象将转换成左侧运算对象的类型。&lt;/li>
&lt;li>赋值运算符满足&lt;strong>右结合律&lt;/strong>，这点和其他二元运算符不一样。&lt;code>ival = jval = 0;&lt;/code>等价于&lt;code>ival = (jval = 0);&lt;/code>&lt;/li>
&lt;li>赋值运算优先级比较低，使用其当条件时应该加括号。&lt;/li>
&lt;li>复合赋值运算符，&lt;strong>复合运算符只求值一次&lt;/strong>，普通运算符求值两次。（对性能有一点点点点影响）
任意复合运算符 op 等价于&lt;code>a = a op b;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="递增递减运算符">递增递减运算符&lt;/h2>
&lt;ul>
&lt;li>前置版本&lt;code>j = ++i&lt;/code>，先加一后赋值&lt;/li>
&lt;li>后置版本&lt;code>j = i++&lt;/code>，先赋值后加一&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>优先使用前置&lt;/strong>版本，后置多一步储存原始值。（除非需要变化前的值）&lt;/p>
&lt;h3 id="混用解引用和递增运算符">混用解引用和递增运算符&lt;/h3>
&lt;p>&lt;code>*iter++&lt;/code>等价于&lt;code>*(iter++)&lt;/code>，递增优先级较高&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">iter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">vi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="o">!=&lt;/span>&lt;span class="n">vi&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;*&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="o">&amp;gt;=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span>&lt;span class="o">&amp;lt;&amp;lt;*&lt;/span>&lt;span class="n">iter&lt;/span>&lt;span class="o">++&amp;lt;&amp;lt;&lt;/span>&lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 输出当前值，指针向前移1
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>&lt;strong>简介是一种美德&lt;/strong>，追求简洁能降低程序出错可能性&lt;/p>
&lt;/blockquote>
&lt;h2 id="成员访问运算符">成员访问运算符&lt;/h2>
&lt;p>&lt;code>ptr-&amp;gt;mem&lt;/code>等价于&lt;code>(*ptr).mem&lt;/code>&lt;/p>
&lt;p>注意&lt;code>.&lt;/code>运算符优先级大于&lt;code>*&lt;/code>，所以记得加括号&lt;/p>
&lt;h2 id="条件运算符">条件运算符&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>条件运算符（&lt;code>?:&lt;/code>）允许我们把简单的&lt;code>if-else&lt;/code>逻辑嵌入到单个表达式中去，按照如下形式：&lt;code>cond? expr1: expr2&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可以嵌套使用，&lt;strong>右结合律&lt;/strong>，从右向左顺序组合&lt;/p>
&lt;ul>
&lt;li>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">finalgrade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">grade&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;high pass&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">grade&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;fail&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;pass&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//等价于
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">finalgrade&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">grade&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">90&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;high pass&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">:&lt;/span> &lt;span class="err">（&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">grade&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="s">&amp;#34;fail&amp;#34;&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="s">&amp;#34;pass&amp;#34;&lt;/span>&lt;span class="err">）&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>输出表达式使用条件运算符记得加括号，条件运算符优先级太低。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="位运算符">位运算符&lt;/h2>
&lt;p>用于检查和设置二进制位的功能。&lt;/p>
&lt;ul>
&lt;li>位运算符是作用于&lt;strong>整数类型&lt;/strong>的运算对象。&lt;/li>
&lt;li>二进制位向左移（&lt;code>&amp;lt;&amp;lt;&lt;/code>）或者向右移（&lt;code>&amp;gt;&amp;gt;&lt;/code>），移出边界外的位就被舍弃掉了。&lt;/li>
&lt;li>位取反（&lt;code>~&lt;/code>）（逐位求反）、与（&lt;code>&amp;amp;&lt;/code>）、或（&lt;code>|&lt;/code>）、异或（&lt;code>^&lt;/code>）&lt;/li>
&lt;/ul>
&lt;p>有符号数负值可能移位后变号，所以强烈建议&lt;strong>位运算符仅用于无符号数&lt;/strong>。&lt;/p>
&lt;p>应用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">quiz1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 每一位代表一个学生是否通过考试
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="mi">1UL&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 代表第12个学生通过
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">quiz1&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1UL&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 将第12个学生置为已通过
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">quiz1&lt;/span> &lt;span class="o">&amp;amp;=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1UL&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 将第12个学生修改为未通过
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">stu12&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">quiz1&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1UL&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 判断第12个学生是否通过
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>位运算符使用较少，但是重载 cout、cin 大家都用过&lt;/p>
&lt;/blockquote>
&lt;p>位运算符满足左结合律，优先级介于中间，使用时尽量加括号。&lt;/p>
&lt;h2 id="sizeof-运算符">sizeof 运算符&lt;/h2>
&lt;ul>
&lt;li>返回一条表达式或一个类型名字所占的&lt;strong>字节数&lt;/strong>。&lt;/li>
&lt;li>返回的类型是 &lt;code>size_t&lt;/code>的常量表达式。&lt;/li>
&lt;li>&lt;code>sizeof&lt;/code>并不实际计算其运算对象的值。&lt;/li>
&lt;li>两种形式：
&lt;ol>
&lt;li>&lt;code>sizeof (type)&lt;/code>，给出类型名&lt;/li>
&lt;li>&lt;code>sizeof expr&lt;/code>，给出表达式&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>可用 sizeof 返回数组的大小&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">ia&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// sizeof(ia)返回整个数组所占空间的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// sizeof(ia)/sizeof(*ia)返回数组的大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">constexpr&lt;/span> &lt;span class="n">size_t&lt;/span> &lt;span class="n">sz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ia&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ia&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">sz&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="逗号运算符">逗号运算符&lt;/h2>
&lt;p>从左向右依次求值。&lt;/p>
&lt;p>左侧求值结果丢弃，逗号运算符&lt;strong>结果是右侧表达式&lt;/strong>的值。&lt;/p>
&lt;h2 id="类型转换">类型转换&lt;/h2>
&lt;h3 id="隐式类型转换">隐式类型转换&lt;/h3>
&lt;blockquote>
&lt;p>设计为尽可能避免损失精度，即转换为更精细类型。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>比 &lt;code>int&lt;/code>类型小的整数值先提升为较大的整数类型。&lt;/li>
&lt;li>条件中，非布尔转换成布尔。&lt;/li>
&lt;li>初始化中，初始值转换成变量的类型。&lt;/li>
&lt;li>算术运算或者关系运算的运算对象有多种类型，要转换成同一种类型。&lt;/li>
&lt;li>函数调用时也会有转换。&lt;/li>
&lt;/ul>
&lt;h4 id="算术转换">算术转换&lt;/h4>
&lt;h5 id="整型提升">整型提升&lt;/h5>
&lt;ul>
&lt;li>常见的 char、bool、short 能存在 int 就会转换成 int，否则提升为&lt;code>unsigned int&lt;/code>&lt;/li>
&lt;li>&lt;code>wchar_t,char16_t,char32_t&lt;/code>提升为整型中&lt;code>int,long,long long ……&lt;/code>最小的，且能容纳原类型所有可能值的类型。&lt;/li>
&lt;/ul>
&lt;h4 id="其他转换">其他转换&lt;/h4>
&lt;blockquote>
&lt;p>p143&lt;/p>
&lt;/blockquote>
&lt;h3 id="显式类型转换尽量避免">显式类型转换（尽量避免）&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>static_cast&lt;/strong>：任何明确定义的类型转换，只要不包含底层 const，都可以使用。&lt;code>double slope = static_cast&amp;lt;double&amp;gt;(j);&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>dynamic_cast&lt;/strong>：支持运行时类型识别。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>const_cast&lt;/strong>：只能改变运算对象的底层 const，一般可用于去除 const 性质。&lt;code>const char *pc; char *p = const_cast&amp;lt;char*&amp;gt;(pc)&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>只有其可以改变常量属性&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>reinterpret_cast&lt;/strong>：通常为运算对象的位模式提供低层次上的重新解释。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h4 id="旧式强制类型转换">旧式强制类型转换&lt;/h4>
&lt;p>&lt;code>type expr&lt;/code>&lt;/p>
&lt;h2 id="运算符优先级表">运算符优先级表&lt;/h2>
&lt;blockquote>
&lt;p>p147&lt;/p>
&lt;/blockquote></description></item><item><title>05.语句</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/05.%E8%AF%AD%E5%8F%A5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/05.%E8%AF%AD%E5%8F%A5/</guid><description>&lt;h1 id="第五章-语句">第五章 语句&lt;/h1>
&lt;h2 id="简单语句">简单语句&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>表达式语句&lt;/strong>：一个表达式末尾加上分号，就变成了表达式语句。&lt;/li>
&lt;li>&lt;strong>空语句&lt;/strong>：只有一个单独的分号。&lt;/li>
&lt;li>&lt;strong>复合语句（块）&lt;/strong>：用花括号 &lt;code>{}&lt;/code>包裹起来的语句和声明的序列。一个块就是一个作用域。&lt;/li>
&lt;/ul>
&lt;h2 id="条件语句">条件语句&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>悬垂 else&lt;/strong>（dangling else）：用来描述在嵌套的&lt;code>if else&lt;/code>语句中，如果&lt;code>if&lt;/code>比&lt;code>else&lt;/code>多时如何处理的问题。C++使用的方法是&lt;code>else&lt;/code>匹配最近没有配对的&lt;code>if&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="迭代语句">迭代语句&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>while&lt;/strong>：当不确定到底要迭代多少次时，使用 &lt;code>while&lt;/code>循环比较合适，比如读取输入的内容。&lt;/li>
&lt;li>&lt;strong>for&lt;/strong>： &lt;code>for&lt;/code>语句可以省略掉 &lt;code>init-statement&lt;/code>， &lt;code>condition&lt;/code>和 &lt;code>expression&lt;/code>的任何一个；&lt;strong>甚至全部&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>范围 for&lt;/strong>： &lt;code>for (declaration: expression) statement&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="跳转语句">跳转语句&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>break&lt;/strong>：&lt;code>break&lt;/code>语句负责终止离它最近的&lt;code>while&lt;/code>、&lt;code>do while&lt;/code>、&lt;code>for&lt;/code>或者&lt;code>switch&lt;/code>语句，并从这些语句之后的第一条语句开始继续执行。&lt;/li>
&lt;li>&lt;strong>continue&lt;/strong>：终止最近的循环中的当前迭代并立即开始下一次迭代。只能在&lt;code>while&lt;/code>、&lt;code>do while&lt;/code>、&lt;code>for&lt;/code>循环的内部。&lt;/li>
&lt;/ul>
&lt;h2 id="try-语句块和异常处理">try 语句块和异常处理&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>throw 表达式&lt;/strong>：异常检测部分使用 &lt;code>throw&lt;/code>表达式来表示它遇到了无法处理的问题。我们说 &lt;code>throw&lt;/code>引发 &lt;code>raise&lt;/code>了异常。&lt;/li>
&lt;li>&lt;strong>try 语句块&lt;/strong>：以 &lt;code>try&lt;/code>关键词开始，以一个或多个 &lt;code>catch&lt;/code>字句结束。&lt;code>try&lt;/code>语句块中的代码抛出的异常通常会被某个 &lt;code>catch&lt;/code>捕获并处理。&lt;code>catch&lt;/code>子句也被称为&lt;strong>异常处理代码&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>异常类&lt;/strong>：用于在 &lt;code>throw&lt;/code>表达式和相关的 &lt;code>catch&lt;/code>子句之间传递异常的具体信息。&lt;/li>
&lt;/ul></description></item><item><title>06.函数</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/06.%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/06.%E5%87%BD%E6%95%B0/</guid><description>&lt;h1 id="第六章-函数">第六章 函数&lt;/h1>
&lt;h2 id="函数基础">函数基础&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>函数定义&lt;/strong>：包括返回类型、函数名字和 0 个或者多个&lt;strong>形参&lt;/strong>（parameter）组成的列表和函数体。&lt;/li>
&lt;li>&lt;strong>调用运算符&lt;/strong>：调用运算符的形式是一对圆括号 &lt;code>()&lt;/code>，作用于一个表达式，该表达式是函数或者指向函数的指针。&lt;/li>
&lt;li>圆括号内是用逗号隔开的&lt;strong>实参&lt;/strong>（argument）列表。&lt;/li>
&lt;li>函数调用过程：
&lt;ul>
&lt;li>1.主调函数（calling function）的执行被中断。&lt;/li>
&lt;li>2.被调函数（called function）开始执行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>形参和实参&lt;/strong>：形参和实参的&lt;strong>个数&lt;/strong>和&lt;strong>类型&lt;/strong>必须匹配上。&lt;/li>
&lt;li>&lt;strong>返回类型&lt;/strong>： &lt;code>void&lt;/code>表示函数不返回任何值。函数的返回类型不能是数组类型或者函数类型，但可以是指向数组或者函数的指针。&lt;/li>
&lt;li>&lt;strong>名字&lt;/strong>：名字的作用于是程序文本的一部分，名字在其中可见。&lt;/li>
&lt;/ul>
&lt;h3 id="局部对象">局部对象&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>生命周期&lt;/strong>：对象的生命周期是程序执行过程中该对象存在的一段时间。&lt;/li>
&lt;li>&lt;strong>局部变量&lt;/strong>（local variable）：形参和函数体内部定义的变量统称为局部变量。它对函数而言是局部的，对函数外部而言是&lt;strong>隐藏&lt;/strong>的。&lt;/li>
&lt;li>&lt;strong>自动对象&lt;/strong>：只存在于块执行期间的对象。当块的执行结束后，它的值就变成&lt;strong>未定义&lt;/strong>的了。&lt;/li>
&lt;li>&lt;strong>局部静态对象&lt;/strong>： &lt;code>static&lt;/code>类型的局部变量，生命周期贯穿函数调用前后。&lt;/li>
&lt;/ul>
&lt;h3 id="函数声明">函数声明&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>函数声明&lt;/strong>：函数的声明和定义唯一的区别是声明无需函数体，用一个分号替代。函数声明主要用于描述函数的接口，也称&lt;strong>函数原型&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>在头文件中进行函数声明&lt;/strong>：建议变量在头文件中声明；在源文件中定义。&lt;/li>
&lt;li>&lt;strong>分离编译&lt;/strong>： &lt;code>CC a.cc b.cc&lt;/code>直接编译生成可执行文件；&lt;code>CC -c a.cc b.cc&lt;/code>编译生成对象代码&lt;code>a.o b.o&lt;/code>； &lt;code>CC a.o b.o&lt;/code>编译生成可执行文件。&lt;/li>
&lt;/ul>
&lt;h2 id="参数传递">参数传递&lt;/h2>
&lt;ul>
&lt;li>形参初始化的机理和变量初始化一样。&lt;/li>
&lt;li>&lt;strong>引用传递&lt;/strong>（passed by reference）：又称传引用调用（called by reference），指&lt;strong>形参是引用类型&lt;/strong>，引用形参是它对应的实参的别名。&lt;/li>
&lt;li>&lt;strong>值传递&lt;/strong>（passed by value）：又称传值调用（called by value），指实参的值是通过&lt;strong>拷贝&lt;/strong>传递给形参。&lt;/li>
&lt;/ul>
&lt;h3 id="传值参数">传值参数&lt;/h3>
&lt;ul>
&lt;li>当初始化一个非引用类型的变量时，初始值被拷贝给变量。&lt;/li>
&lt;li>函数对形参做的所有操作都不会影响实参。&lt;/li>
&lt;li>&lt;strong>指针形参&lt;/strong>：常用在 C 中，&lt;code>C++&lt;/code>建议使用引用类型的形参代替指针。&lt;/li>
&lt;/ul>
&lt;h3 id="传引用参数">传引用参数&lt;/h3>
&lt;ul>
&lt;li>通过使用引用形参，允许函数改变一个或多个实参的值。&lt;/li>
&lt;li>引用形参直接关联到绑定的对象，而非对象的副本。&lt;/li>
&lt;li>使用引用形参可以用于&lt;strong>返回额外的信息&lt;/strong>。&lt;/li>
&lt;li>经常用引用形参来避免不必要的复制。&lt;/li>
&lt;li>&lt;code>void swap(int &amp;amp;v1, int &amp;amp;v2)&lt;/code>&lt;/li>
&lt;li>如果无需改变引用形参的值，最好将其声明为常量引用。&lt;/li>
&lt;/ul>
&lt;h3 id="const-形参和实参">const 形参和实参&lt;/h3>
&lt;ul>
&lt;li>形参的顶层&lt;code>const&lt;/code>被忽略。&lt;code>void func(const int i);&lt;/code>调用时既可以传入&lt;code>const int&lt;/code>也可以传入&lt;code>int&lt;/code>。&lt;/li>
&lt;li>我们可以使用非常量初始化一个底层&lt;code>const&lt;/code>对象，但是反过来不行。&lt;/li>
&lt;li>在函数中，不能改变实参的&lt;strong>局部副本&lt;/strong>。&lt;/li>
&lt;li>尽量使用常量引用。&lt;/li>
&lt;/ul>
&lt;h3 id="数组形参">数组形参&lt;/h3>
&lt;ul>
&lt;li>当我们为函数传递一个数组时，实际上传递的是指向数组首元素的指针。&lt;/li>
&lt;li>要注意数组的实际长度，不能越界。&lt;/li>
&lt;/ul>
&lt;h3 id="main-处理命令行选项">main 处理命令行选项&lt;/h3>
&lt;ul>
&lt;li>&lt;code>int main(int argc, char *argv[]){...}&lt;/code>&lt;/li>
&lt;li>第一个形参代表参数的个数；第二个形参是参数 C 风格字符串数组。&lt;/li>
&lt;/ul>
&lt;h3 id="可变形参">可变形参&lt;/h3>
&lt;p>&lt;code>initializer_list&lt;/code>提供的操作（&lt;code>C++11&lt;/code>）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>initializer_list&amp;lt;T&amp;gt; lst;&lt;/code>&lt;/td>
&lt;td>默认初始化；&lt;code>T&lt;/code>类型元素的空列表&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>initializer_list&amp;lt;T&amp;gt; lst{a,b,c...};&lt;/code>&lt;/td>
&lt;td>&lt;code>lst&lt;/code>的元素数量和初始值一样多；&lt;code>lst&lt;/code>的元素是对应初始值的副本；列表中的元素是&lt;code>const&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst2(lst)&lt;/code>&lt;/td>
&lt;td>拷贝或赋值一个&lt;code>initializer_list&lt;/code>对象不会拷贝列表中的元素；拷贝后，原始列表和副本共享元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst2 = lst&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.size()&lt;/code>&lt;/td>
&lt;td>列表中的元素数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.begin()&lt;/code>&lt;/td>
&lt;td>返回指向&lt;code>lst&lt;/code>中首元素的指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.end()&lt;/code>&lt;/td>
&lt;td>返回指向&lt;code>lst&lt;/code>中微元素下一位置的指针&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>initializer_list&lt;/code>使用 demo：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">err_msg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ErrCode&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">initializer_list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">il&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">msg&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">bed&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">il&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="n">beg&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">il&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="o">++&lt;/span> &lt;span class="n">beg&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">beg&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">err_msg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ErrCode&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;functionX&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;okay});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>所有实参类型相同，可以使用 &lt;code>initializer_list&lt;/code>的标准库类型。&lt;/li>
&lt;li>实参类型不同，可以使用&lt;code>可变参数模板&lt;/code>。&lt;/li>
&lt;li>省略形参符： &lt;code>...&lt;/code>，便于&lt;code>C++&lt;/code>访问某些 C 代码，这些 C 代码使用了 &lt;code>varargs&lt;/code>的 C 标准功能。&lt;/li>
&lt;/ul>
&lt;h2 id="返回类型和-return-语句">返回类型和 return 语句&lt;/h2>
&lt;h3 id="无返回值函数">无返回值函数&lt;/h3>
&lt;p>没有返回值的 &lt;code>return&lt;/code>语句只能用在返回类型是 &lt;code>void&lt;/code>的函数中，返回 &lt;code>void&lt;/code>的函数不要求非得有 &lt;code>return&lt;/code>语句。&lt;/p>
&lt;h3 id="有返回值函数">有返回值函数&lt;/h3>
&lt;ul>
&lt;li>&lt;code>return&lt;/code>语句的返回值的类型必须和函数的返回类型相同，或者能够&lt;strong>隐式地&lt;/strong>转换成函数的返回类型。&lt;/li>
&lt;li>值的返回：返回的值用于初始化调用点的一个&lt;strong>临时量&lt;/strong>，该临时量就是函数调用的结果。&lt;/li>
&lt;li>&lt;strong>不要返回局部对象的引用或指针&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>引用返回左值&lt;/strong>：函数的返回类型决定函数调用是否是左值。调用一个返回引用的函数得到左值；其他返回类型得到右值。&lt;/li>
&lt;li>&lt;strong>列表初始化返回值&lt;/strong>：函数可以返回花括号包围的值的列表。（&lt;code>C++11&lt;/code>）&lt;/li>
&lt;li>&lt;strong>主函数 main 的返回值&lt;/strong>：如果结尾没有&lt;code>return&lt;/code>，编译器将隐式地插入一条返回 0 的&lt;code>return&lt;/code>语句。返回 0 代表执行成功。&lt;/li>
&lt;/ul>
&lt;h3 id="返回数组指针">返回数组指针&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Type (*function (parameter_list))[dimension]&lt;/code>&lt;/li>
&lt;li>使用类型别名： &lt;code>typedef int arrT[10];&lt;/code> 或者 &lt;code>using arrT = int[10;]&lt;/code>，然后 &lt;code>arrT* func() {...}&lt;/code>&lt;/li>
&lt;li>使用 &lt;code>decltype&lt;/code>： &lt;code>decltype(odd) *arrPtr(int i) {...}&lt;/code>&lt;/li>
&lt;li>&lt;strong>尾置返回类型&lt;/strong>： 在形参列表后面以一个&lt;code>-&amp;gt;&lt;/code>开始：&lt;code>auto func(int i) -&amp;gt; int(*)[10]&lt;/code>（&lt;code>C++11&lt;/code>）&lt;/li>
&lt;/ul>
&lt;h2 id="函数重载">函数重载&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>重载&lt;/strong>：如果同一作用域内几个函数名字相同但形参列表不同，我们称之为重载（overload）函数。&lt;/li>
&lt;li>&lt;code>main&lt;/code>函数不能重载。&lt;/li>
&lt;li>&lt;strong>重载和 const 形参&lt;/strong>：
&lt;ul>
&lt;li>一个有顶层 const 的形参和没有它的函数无法区分。&lt;code>Record lookup(Phone* const)&lt;/code>和 &lt;code>Record lookup(Phone*)&lt;/code>无法区分。&lt;/li>
&lt;li>相反，是否有某个底层 const 形参可以区分。&lt;code>Record lookup(Account*)&lt;/code>和 &lt;code>Record lookup(const Account*)&lt;/code>可以区分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>重载和作用域&lt;/strong>：若在内层作用域中声明名字，它将隐藏外层作用域中声明的同名实体，在不同的作用域中无法重载函数名。&lt;/li>
&lt;/ul>
&lt;h2 id="特殊用途语言特性">特殊用途语言特性&lt;/h2>
&lt;h3 id="默认实参">默认实参&lt;/h3>
&lt;ul>
&lt;li>&lt;code>string screen(sz ht = 24, sz wid = 80, char backgrnd = ' ');&lt;/code>&lt;/li>
&lt;li>一旦某个形参被赋予了默认值，那么它之后的形参都必须要有默认值。&lt;/li>
&lt;/ul>
&lt;h3 id="内联inline函数">内联（inline）函数&lt;/h3>
&lt;ul>
&lt;li>普通函数的缺点：调用函数比求解等价表达式要慢得多。&lt;/li>
&lt;li>&lt;code>inline&lt;/code>函数可以避免函数调用的开销，可以让编译器在编译时&lt;strong>内联地展开&lt;/strong>该函数。&lt;/li>
&lt;li>&lt;code>inline&lt;/code>函数应该在头文件中定义。&lt;/li>
&lt;/ul>
&lt;h3 id="constexpr-函数">constexpr 函数&lt;/h3>
&lt;ul>
&lt;li>指能用于常量表达式的函数。&lt;/li>
&lt;li>&lt;code>constexpr int new_sz() {return 42;}&lt;/code>&lt;/li>
&lt;li>函数的返回类型及所有形参类型都要是字面值类型。&lt;/li>
&lt;li>&lt;code>constexpr&lt;/code>函数应该在头文件中定义。&lt;/li>
&lt;/ul>
&lt;h3 id="调试帮助">调试帮助&lt;/h3>
&lt;ul>
&lt;li>&lt;code>assert&lt;/code>预处理宏（preprocessor macro）：&lt;code>assert(expr);&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>开关调试状态：&lt;/p>
&lt;p>&lt;code>CC -D NDEBUG main.c&lt;/code>可以定义这个变量&lt;code>NDEBUG&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#ifndef NDEBUG
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">cerr&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">__func__&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="s">&amp;#34;...&amp;#34;&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="函数匹配">函数匹配&lt;/h2>
&lt;ul>
&lt;li>重载函数匹配的&lt;strong>三个步骤&lt;/strong>：1.候选函数；2.可行函数；3.寻找最佳匹配。&lt;/li>
&lt;li>&lt;strong>候选函数&lt;/strong>：选定本次调用对应的重载函数集，集合中的函数称为候选函数（candidate function）。&lt;/li>
&lt;li>&lt;strong>可行函数&lt;/strong>：考察本次调用提供的实参，选出可以被这组实参调用的函数，新选出的函数称为可行函数（viable function）。&lt;/li>
&lt;li>&lt;strong>寻找最佳匹配&lt;/strong>：基本思想：实参类型和形参类型越接近，它们匹配地越好。&lt;/li>
&lt;/ul>
&lt;h2 id="函数指针">函数指针&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>函数指针&lt;/strong>：是指向函数的指针。&lt;/li>
&lt;li>&lt;code>bool (*pf)(const string &amp;amp;, const string &amp;amp;);&lt;/code> 注：两端的括号不可少。&lt;/li>
&lt;li>&lt;strong>函数指针形参&lt;/strong>：
&lt;ul>
&lt;li>形参中使用函数定义或者函数指针定义效果一样。&lt;/li>
&lt;li>使用类型别名或者&lt;code>decltype&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>返回指向函数的指针&lt;/strong>：1.类型别名；2.尾置返回类型。&lt;/li>
&lt;/ul></description></item><item><title>ch07</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch07/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch07/</guid><description>&lt;h1 id="第七章-类-class">第七章 类 （Class）&lt;/h1>
&lt;h2 id="定义抽象数据类型">定义抽象数据类型&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>类背后的基本思想&lt;/strong>：&lt;strong>数据抽象&lt;/strong>（data abstraction）和&lt;strong>封装&lt;/strong>（encapsulation）。&lt;/li>
&lt;li>数据抽象是一种依赖于&lt;strong>接口&lt;/strong>（interface）和&lt;strong>实现&lt;/strong>（implementation）分离的编程技术。&lt;/li>
&lt;/ul>
&lt;h3 id="类成员-member">类成员 （Member）&lt;/h3>
&lt;ul>
&lt;li>必须在类的内部声明，不能在其他地方增加成员。&lt;/li>
&lt;li>成员可以是数据，函数，类型别名。&lt;/li>
&lt;/ul>
&lt;h3 id="类的成员函数">类的成员函数&lt;/h3>
&lt;ul>
&lt;li>成员函数的&lt;strong>声明&lt;/strong>必须在类的内部。&lt;/li>
&lt;li>成员函数的&lt;strong>定义&lt;/strong>既可以在类的内部也可以在外部。&lt;/li>
&lt;li>使用点运算符 &lt;code>.&lt;/code> 调用成员函数。&lt;/li>
&lt;li>必须对任何&lt;code>const&lt;/code>或引用类型成员以及没有默认构造函数的类类型的任何成员使用初始化式。&lt;/li>
&lt;li>&lt;code>ConstRef::ConstRef(int ii): i(ii), ci(i), ri(ii) { }&lt;/code>&lt;/li>
&lt;li>默认实参： &lt;code>Sales_item(const std::string &amp;amp;book): isbn(book), units_sold(0), revenue(0.0) { }&lt;/code>&lt;/li>
&lt;li>&lt;code>*this&lt;/code>：
&lt;ul>
&lt;li>每个成员函数都有一个额外的，隐含的形参&lt;code>this&lt;/code>。&lt;/li>
&lt;li>&lt;code>this&lt;/code>总是指向当前对象，因此&lt;code>this&lt;/code>是一个常量指针。&lt;/li>
&lt;li>形参表后面的&lt;code>const&lt;/code>，改变了隐含的&lt;code>this&lt;/code>形参的类型，如 &lt;code>bool same_isbn(const Sales_item &amp;amp;rhs) const&lt;/code>，这种函数称为“常量成员函数”（&lt;code>this&lt;/code>指向的当前对象是常量）。&lt;/li>
&lt;li>&lt;code>return *this;&lt;/code>可以让成员函数连续调用。&lt;/li>
&lt;li>普通的非&lt;code>const&lt;/code>成员函数：&lt;code>this&lt;/code>是指向类类型的&lt;code>const&lt;/code>指针（可以改变&lt;code>this&lt;/code>所指向的值，不能改变&lt;code>this&lt;/code>保存的地址）。&lt;/li>
&lt;li>&lt;code>const&lt;/code>成员函数：&lt;code>this&lt;/code>是指向 const 类类型的&lt;code>const&lt;/code>指针（既不能改变&lt;code>this&lt;/code>所指向的值，也不能改变&lt;code>this&lt;/code>保存的地址）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="非成员函数">非成员函数&lt;/h3>
&lt;ul>
&lt;li>和类相关的非成员函数，定义和声明都应该在类的外部。&lt;/li>
&lt;/ul>
&lt;h3 id="类的构造函数">类的构造函数&lt;/h3>
&lt;ul>
&lt;li>类通过一个或者几个特殊的成员函数来控制其对象的初始化过程，这些函数叫做&lt;strong>构造函数&lt;/strong>。&lt;/li>
&lt;li>构造函数是特殊的成员函数。&lt;/li>
&lt;li>构造函数放在类的&lt;code>public&lt;/code>部分。&lt;/li>
&lt;li>与类同名的成员函数。&lt;/li>
&lt;li>&lt;code>Sales_item(): units_sold(0), revenue(0.0) { }&lt;/code>&lt;/li>
&lt;li>&lt;code>=default&lt;/code>要求编译器合成默认的构造函数。(&lt;code>C++11&lt;/code>)&lt;/li>
&lt;li>初始化列表：冒号和花括号之间的代码： &lt;code>Sales_item(): units_sold(0), revenue(0.0) { }&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="访问控制与封装">访问控制与封装&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>访问说明符&lt;/strong>（access specifiers）：
&lt;ul>
&lt;li>&lt;code>public&lt;/code>：定义在 &lt;code>public&lt;/code>后面的成员在整个程序内可以被访问； &lt;code>public&lt;/code>成员定义类的接口。&lt;/li>
&lt;li>&lt;code>private&lt;/code>：定义在 &lt;code>private&lt;/code>后面的成员可以被类的成员函数访问，但不能被使用该类的代码访问； &lt;code>private&lt;/code>隐藏了类的实现细节。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 &lt;code>class&lt;/code>或者 &lt;code>struct&lt;/code>：都可以被用于定义一个类。唯一的却别在于访问权限。
&lt;ul>
&lt;li>使用 &lt;code>class&lt;/code>：在第一个访问说明符之前的成员是 &lt;code>priavte&lt;/code>的。&lt;/li>
&lt;li>使用 &lt;code>struct&lt;/code>：在第一个访问说明符之前的成员是 &lt;code>public&lt;/code>的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="友元">友元&lt;/h3>
&lt;ul>
&lt;li>允许特定的&lt;strong>非成员函数&lt;/strong>访问一个类的&lt;strong>私有成员&lt;/strong>.&lt;/li>
&lt;li>友元的声明以关键字 &lt;code>friend&lt;/code>开始。&lt;code>friend Sales_data add(const Sales_data&amp;amp;, const Sales_data&amp;amp;);&lt;/code>表示非成员函数&lt;code>add&lt;/code>可以访问类的非公有成员。&lt;/li>
&lt;li>通常将友元声明成组地放在&lt;strong>类定义的开始或者结尾&lt;/strong>。&lt;/li>
&lt;li>类之间的友元：
&lt;ul>
&lt;li>如果一个类指定了友元类，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="封装的益处">封装的益处&lt;/h3>
&lt;ul>
&lt;li>确保用户的代码不会无意间破坏封装对象的状态。&lt;/li>
&lt;li>被封装的类的具体实现细节可以随时改变，而无需调整用户级别的代码。&lt;/li>
&lt;/ul>
&lt;h2 id="类的其他特性">类的其他特性&lt;/h2>
&lt;ul>
&lt;li>成员函数作为内联函数 &lt;code>inline&lt;/code>：
&lt;ul>
&lt;li>在类的内部，常有一些规模较小的函数适合于被声明成内联函数。&lt;/li>
&lt;li>&lt;strong>定义&lt;/strong>在类内部的函数是&lt;strong>自动内联&lt;/strong>的。&lt;/li>
&lt;li>在类外部定义的成员函数，也可以在声明时显式地加上 &lt;code>inline&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>可变数据成员&lt;/strong> （mutable data member）：
&lt;ul>
&lt;li>&lt;code>mutable size_t access_ctr;&lt;/code>&lt;/li>
&lt;li>永远不会是&lt;code>const&lt;/code>，即使它是&lt;code>const&lt;/code>对象的成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>类类型&lt;/strong>：
&lt;ul>
&lt;li>每个类定义了唯一的类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="类的作用域">类的作用域&lt;/h2>
&lt;ul>
&lt;li>每个类都会定义它自己的作用域。在类的作用域之外，普通的数据和函数成员只能由引用、对象、指针使用成员访问运算符来访问。&lt;/li>
&lt;li>函数的&lt;strong>返回类型&lt;/strong>通常在函数名前面，因此当成员函数定义在类的外部时，返回类型中使用的名字都位于类的作用域之外。&lt;/li>
&lt;li>如果成员使用了外层作用域中的某个名字，而该名字代表一种&lt;strong>类型&lt;/strong>，则类不能在之后重新定义该名字。&lt;/li>
&lt;li>类中的&lt;strong>类型名定义&lt;/strong>都要放在一开始。&lt;/li>
&lt;/ul>
&lt;h2 id="构造函数再探">构造函数再探&lt;/h2>
&lt;ul>
&lt;li>构造函数初始值列表：
&lt;ul>
&lt;li>类似&lt;code>python&lt;/code>使用赋值的方式有时候不行，比如&lt;code>const&lt;/code>或者引用类型的数据，只能初始化，不能赋值。（注意初始化和赋值的区别）&lt;/li>
&lt;li>最好让构造函数初始值的顺序和成员声明的顺序保持一致。&lt;/li>
&lt;li>如果一个构造函数为所有参数都提供了默认参数，那么它实际上也定义了默认的构造函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="委托构造函数-delegating-constructor-c11">委托构造函数 （delegating constructor, &lt;code>C++11&lt;/code>）&lt;/h3>
&lt;ul>
&lt;li>委托构造函数将自己的职责委托给了其他构造函数。&lt;/li>
&lt;li>&lt;code>Sale_data(): Sale_data(&amp;quot;&amp;quot;, 0, 0) {}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="隐式的类型转换">隐式的类型转换&lt;/h3>
&lt;ul>
&lt;li>如果构造函数&lt;strong>只接受一个实参&lt;/strong>，则它实际上定义了转换为此类类型的&lt;strong>隐式转换机制&lt;/strong>。这种构造函数又叫&lt;strong>转换构造函数&lt;/strong>（converting constructor）。&lt;/li>
&lt;li>编译器只会自动地执行&lt;code>仅一步&lt;/code>类型转换。&lt;/li>
&lt;li>抑制构造函数定义的隐式转换：
&lt;ul>
&lt;li>将构造函数声明为&lt;code>explicit&lt;/code>加以阻止。&lt;/li>
&lt;li>&lt;code>explicit&lt;/code>构造函数只能用于直接初始化，不能用于拷贝形式的初始化。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="聚合类-aggregate-class">聚合类 （aggregate class）&lt;/h3>
&lt;ul>
&lt;li>满足以下所有条件：
&lt;ul>
&lt;li>所有成员都是&lt;code>public&lt;/code>的。&lt;/li>
&lt;li>没有定义任何构造函数。&lt;/li>
&lt;li>没有类内初始值。&lt;/li>
&lt;li>没有基类，也没有&lt;code>virtual&lt;/code>函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可以使用一个花括号括起来的成员初始值列表，初始值的顺序必须和声明的顺序一致。&lt;/li>
&lt;/ul>
&lt;h3 id="字面值常量类">字面值常量类&lt;/h3>
&lt;ul>
&lt;li>&lt;code>constexpr&lt;/code>函数的参数和返回值必须是字面值。&lt;/li>
&lt;li>&lt;strong>字面值类型&lt;/strong>：除了算术类型、引用和指针外，某些类也是字面值类型。&lt;/li>
&lt;li>数据成员都是字面值类型的聚合类是字面值常量类。&lt;/li>
&lt;li>如果不是聚合类，则必须满足下面所有条件：
&lt;ul>
&lt;li>数据成员都必须是字面值类型。&lt;/li>
&lt;li>类必须至少含有一个&lt;code>constexpr&lt;/code>构造函数。&lt;/li>
&lt;li>如果一个数据成员含有类内部初始值，则内置类型成员的初始值必须是一条常量表达式；或者如果成员属于某种类类型，则初始值必须使用成员自己的&lt;code>constexpr&lt;/code>构造函数。&lt;/li>
&lt;li>类必须使用析构函数的默认定义，该成员负责销毁类的对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="类的静态成员">类的静态成员&lt;/h2>
&lt;ul>
&lt;li>非&lt;code>static&lt;/code>数据成员存在于类类型的每个对象中。&lt;/li>
&lt;li>&lt;code>static&lt;/code>数据成员独立于该类的任意对象而存在。&lt;/li>
&lt;li>每个&lt;code>static&lt;/code>数据成员是与类关联的对象，并不与该类的对象相关联。&lt;/li>
&lt;li>声明：
&lt;ul>
&lt;li>声明之前加上关键词&lt;code>static&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用：
&lt;ul>
&lt;li>使用&lt;strong>作用域运算符&lt;/strong>&lt;code>::&lt;/code>直接访问静态成员:&lt;code>r = Account::rate();&lt;/code>&lt;/li>
&lt;li>也可以使用对象访问：&lt;code>r = ac.rate();&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>定义：
&lt;ul>
&lt;li>在类外部定义时不用加&lt;code>static&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>初始化：
&lt;ul>
&lt;li>通常不在类的内部初始化，而是在定义时进行初始化，如 &lt;code>double Account::interestRate = initRate();&lt;/code>&lt;/li>
&lt;li>如果一定要在类内部定义，则要求必须是字面值常量类型的&lt;code>constexpr&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>ch08</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch08/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch08/</guid><description>&lt;h1 id="第八章-io-库">第八章 IO 库&lt;/h1>
&lt;h2 id="前面章节已经在用的-io-库设施">前面章节已经在用的 IO 库设施&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>istream&lt;/strong>：输入流类型，提供输入操作。&lt;/li>
&lt;li>&lt;strong>ostream&lt;/strong>：输出流类型，提供输出操作&lt;/li>
&lt;li>&lt;strong>cin&lt;/strong>：一个&lt;code>istream&lt;/code>对象，从标准输入读取数据。&lt;/li>
&lt;li>&lt;strong>cout&lt;/strong>：一个&lt;code>ostream&lt;/code>对象，向标准输出写入数据。&lt;/li>
&lt;li>&lt;strong>cerr&lt;/strong>：一个&lt;code>ostream&lt;/code>对象，向标准错误写入消息。&lt;/li>
&lt;li>&lt;strong>&amp;raquo;运算符&lt;/strong>：用来从一个&lt;code>istream&lt;/code>对象中读取输入数据。&lt;/li>
&lt;li>&lt;strong>&amp;laquo;运算符&lt;/strong>：用来向一个&lt;code>ostream&lt;/code>对象中写入输出数据。&lt;/li>
&lt;li>&lt;strong>getline 函数&lt;/strong>：从一个给定的&lt;code>istream&lt;/code>对象中读取一行数据，存入到一个给定的&lt;code>string&lt;/code>对象中。&lt;/li>
&lt;/ul>
&lt;h2 id="io-类">IO 类&lt;/h2>
&lt;h3 id="标准库定义的-io-类型">标准库定义的 IO 类型&lt;/h3>
&lt;ul>
&lt;li>&lt;code>iostream&lt;/code>头文件：从标准流中读写数据，&lt;code>istream&lt;/code>、&lt;code>ostream&lt;/code>等。&lt;/li>
&lt;li>&lt;code>fstream&lt;/code>头文件：从文件中读写数据，&lt;code>ifstream&lt;/code>、&lt;code>ofstream&lt;/code>等。&lt;/li>
&lt;li>&lt;code>sstream&lt;/code>头文件：从字符串中读写数据，&lt;code>istringstream&lt;/code>、&lt;code>ostringstream&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="io-对象不可复制或赋值">IO 对象不可复制或赋值&lt;/h3>
&lt;ul>
&lt;li>1.IO 对象不能存在容器里.&lt;/li>
&lt;li>2.形参和返回类型也不能是流类型。&lt;/li>
&lt;li>3.形参和返回类型一般是流的&lt;strong>引用&lt;/strong>。&lt;/li>
&lt;li>4.读写一个 IO 对象会改变其状态，因此传递和返回的引用不能是&lt;code>const&lt;/code>的。&lt;/li>
&lt;/ul>
&lt;h3 id="条件状态">条件状态&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>状态&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>strm:iostate&lt;/code>&lt;/td>
&lt;td>是一种机器无关的&lt;strong>类型&lt;/strong>，提供了表达条件状态的完整功能&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strm:badbit&lt;/code>&lt;/td>
&lt;td>用来指出流已经崩溃&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strm:failbit&lt;/code>&lt;/td>
&lt;td>用来指出一个 IO 操作失败了&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strm:eofbit&lt;/code>&lt;/td>
&lt;td>用来指出流到达了文件结束&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strm:goodbit&lt;/code>&lt;/td>
&lt;td>用来指出流未处于错误状态，此值保证为零&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.eof()&lt;/code>&lt;/td>
&lt;td>若流&lt;code>s&lt;/code>的&lt;code>eofbit&lt;/code>置位，则返回&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.fail()&lt;/code>&lt;/td>
&lt;td>若流&lt;code>s&lt;/code>的&lt;code>failbit&lt;/code>置位，则返回&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.bad()&lt;/code>&lt;/td>
&lt;td>若流&lt;code>s&lt;/code>的&lt;code>badbit&lt;/code>置位，则返回&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.good()&lt;/code>&lt;/td>
&lt;td>若流&lt;code>s&lt;/code>处于有效状态，则返回&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.clear()&lt;/code>&lt;/td>
&lt;td>将流&lt;code>s&lt;/code>中所有条件状态位复位，将流的状态设置成有效，返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.clear(flags)&lt;/code>&lt;/td>
&lt;td>将流&lt;code>s&lt;/code>中指定的条件状态位复位，返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.setstate(flags)&lt;/code>&lt;/td>
&lt;td>根据给定的标志位，将流&lt;code>s&lt;/code>中对应的条件状态位置位，返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.rdstate()&lt;/code>&lt;/td>
&lt;td>返回流&lt;code>s&lt;/code>的当前条件状态，返回值类型为&lt;code>strm::iostate&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上表中，&lt;code>strm&lt;/code>是一种 IO 类型，（如&lt;code>istream&lt;/code>）， &lt;code>s&lt;/code>是一个流对象。&lt;/p>
&lt;h3 id="管理输出缓冲">管理输出缓冲&lt;/h3>
&lt;ul>
&lt;li>每个输出流都管理一个缓冲区，执行输出的代码，文本串可能立即打印出来，也可能被操作系统保存在缓冲区内，随后再打印。&lt;/li>
&lt;li>刷新缓冲区，可以使用如下 IO 操纵符：
&lt;ul>
&lt;li>&lt;code>endl&lt;/code>：输出一个换行符并刷新缓冲区。&lt;/li>
&lt;li>&lt;code>flush&lt;/code>：刷新流，单不添加任何字符。&lt;/li>
&lt;li>&lt;code>ends&lt;/code>：在缓冲区插入空字符&lt;code>null&lt;/code>，然后刷新。&lt;/li>
&lt;li>&lt;code>unitbuf&lt;/code>：告诉流接下来每次操作之后都要进行一次&lt;code>flush&lt;/code>操作。&lt;/li>
&lt;li>&lt;code>nounitbuf&lt;/code>：回到正常的缓冲方式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="文件输入输出">文件输入输出&lt;/h2>
&lt;ul>
&lt;li>头文件&lt;code>fstream&lt;/code>定义了三个类型来支持文件 IO：
&lt;ul>
&lt;li>&lt;code>ifstream&lt;/code>从一个给定文件读取数据。&lt;/li>
&lt;li>&lt;code>ofstream&lt;/code>向一个给定文件写入数据。&lt;/li>
&lt;li>&lt;code>fstream&lt;/code>可以读写给定文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>文件流&lt;/strong>：需要读写文件时，必须定义自己的文件流对象，并绑定在需要的文件上。&lt;/li>
&lt;/ul>
&lt;h3 id="fstream-特有的操作">fstream 特有的操作&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>fstream fstrm;&lt;/code>&lt;/td>
&lt;td>创建一个未绑定的文件流。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fstream fstrm(s);&lt;/code>&lt;/td>
&lt;td>创建一个文件流，并打开名为&lt;code>s&lt;/code>的文件，&lt;code>s&lt;/code>可以是&lt;code>string&lt;/code>也可以是&lt;code>char&lt;/code>指针&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fstream fstrm(s, mode);&lt;/code>&lt;/td>
&lt;td>与前一个构造函数类似，但按指定&lt;code>mode&lt;/code>打开文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fstrm.open(s)&lt;/code>&lt;/td>
&lt;td>打开名为&lt;code>s&lt;/code>的文件，并和&lt;code>fstrm&lt;/code>绑定&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fstrm.close()&lt;/code>&lt;/td>
&lt;td>关闭和&lt;code>fstrm&lt;/code>绑定的文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fstrm.is_open()&lt;/code>&lt;/td>
&lt;td>返回一个&lt;code>bool&lt;/code>值，指出与&lt;code>fstrm&lt;/code>关联的文件是否成功打开且尚未关闭&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上表中，&lt;code>fstream&lt;/code>是头文件&lt;code>fstream&lt;/code>中定义的一个类型，&lt;code>fstrm&lt;/code>是一个文件流对象。&lt;/p>
&lt;h3 id="文件模式">文件模式&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件模式&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>in&lt;/code>&lt;/td>
&lt;td>以读的方式打开&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>out&lt;/code>&lt;/td>
&lt;td>以写的方式打开&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>app&lt;/code>&lt;/td>
&lt;td>每次写操作前均定位到文件末尾&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ate&lt;/code>&lt;/td>
&lt;td>打开文件后立即定位到文件末尾&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trunc&lt;/code>&lt;/td>
&lt;td>截断文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>binary&lt;/code>&lt;/td>
&lt;td>以二进制方式进行 IO 操作。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="string-流">string 流&lt;/h2>
&lt;ul>
&lt;li>头文件&lt;code>sstream&lt;/code>定义了三个类型来支持内存 IO：
&lt;ul>
&lt;li>&lt;code>istringstream&lt;/code>从&lt;code>string&lt;/code>读取数据。&lt;/li>
&lt;li>&lt;code>ostringstream&lt;/code>向&lt;code>string&lt;/code>写入数据。&lt;/li>
&lt;li>&lt;code>stringstream&lt;/code>可以读写给定&lt;code>string&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="stringstream-特有的操作">stringstream 特有的操作&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>sstream strm&lt;/code>&lt;/td>
&lt;td>定义一个未绑定的&lt;code>stringstream&lt;/code>对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sstream strm(s)&lt;/code>&lt;/td>
&lt;td>用&lt;code>s&lt;/code>初始化对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strm.str()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>strm&lt;/code>所保存的&lt;code>string&lt;/code>的拷贝&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>strm.str(s)&lt;/code>&lt;/td>
&lt;td>将&lt;code>s&lt;/code>拷贝到&lt;code>strm&lt;/code>中，返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>上表中&lt;code>sstream&lt;/code>是头文件&lt;code>sstream&lt;/code>中任意一个类型。&lt;code>s&lt;/code>是一个&lt;code>string&lt;/code>。&lt;/p></description></item><item><title>ch09</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch09/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch09/</guid><description>&lt;h1 id="第九章-顺序容器">第九章 顺序容器&lt;/h1>
&lt;h2 id="顺序容器概述">顺序容器概述&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>顺序容器&lt;/strong>（sequential container）：为程序员提供了控制元素存储和访问顺序的能力。这种顺序不依赖于元素的值，而是与元素加入容器时的位置相对应。&lt;/li>
&lt;/ul>
&lt;h3 id="顺序容器类型">顺序容器类型&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>容器类型&lt;/th>
&lt;th>介绍&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>vector&lt;/code>&lt;/td>
&lt;td>可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>deque&lt;/code>&lt;/td>
&lt;td>双端队列。支持快速随机访问。在头尾位置插入/删除速度很快。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>list&lt;/code>&lt;/td>
&lt;td>双向链表。只支持双向顺序访问。在&lt;code>list&lt;/code>中任何位置进行插入/删除操作速度都很快。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>forward_list&lt;/code>&lt;/td>
&lt;td>单向链表。只支持单向顺序访问。在链表任何位置进行插入/删除操作速度都很快。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>array&lt;/code>&lt;/td>
&lt;td>固定大小数组。支持快速随机访问。不能添加或者删除元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string&lt;/code>&lt;/td>
&lt;td>与&lt;code>vector&lt;/code>相似的容器，但专门用于保存字符。随机访问块。在尾部插入/删除速度快。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>除了固定大小的&lt;code>array&lt;/code>外，其他容器都提供高效、灵活的内存管理。&lt;/li>
&lt;li>&lt;code>forward_list&lt;/code>和&lt;code>array&lt;/code>是新 C++标准增加的类型。&lt;/li>
&lt;li>通常使用&lt;code>vector&lt;/code>是最好的选择，除非你有很好的理由选择其他容器。&lt;/li>
&lt;li>新标准库的容器比旧版的快得多。&lt;/li>
&lt;/ul>
&lt;h2 id="容器操作">容器操作&lt;/h2>
&lt;h3 id="类型">类型&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>iterator&lt;/code>&lt;/td>
&lt;td>此容器类型的迭代器类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>const_iterator&lt;/code>&lt;/td>
&lt;td>可以读取元素但不能修改元素的迭代器类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>size_type&lt;/code>&lt;/td>
&lt;td>无符号整数类型，足够保存此种容器类型最大可能的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>difference_type&lt;/code>&lt;/td>
&lt;td>带符号整数类型，足够保存两个迭代器之间的距离&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>value_type&lt;/code>&lt;/td>
&lt;td>元素类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>reference&lt;/code>&lt;/td>
&lt;td>元素的左值类型；和&lt;code>value_type &amp;amp;&lt;/code>含义相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>const_reference&lt;/code>&lt;/td>
&lt;td>元素的&lt;code>const&lt;/code>左值类型，即&lt;code>const value_type &amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="构造函数">构造函数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>C c;&lt;/code>&lt;/td>
&lt;td>默认构造函数，构造空容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C c1(c2);&lt;/code>或&lt;code>C c1 = c2;&lt;/code>&lt;/td>
&lt;td>构造&lt;code>c2&lt;/code>的拷贝&lt;code>c1&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C c(b, e)&lt;/code>&lt;/td>
&lt;td>构造&lt;code>c&lt;/code>，将迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>指定范围内的所有元素拷贝到&lt;code>c&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C c(a, b, c...)&lt;/code>&lt;/td>
&lt;td>列表初始化&lt;code>c&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C c(n)&lt;/code>&lt;/td>
&lt;td>只支持顺序容器，且不包括&lt;code>array&lt;/code>，包含&lt;code>n&lt;/code>个元素，这些元素进行了值初始化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>C c(n, t)&lt;/code>&lt;/td>
&lt;td>包含&lt;code>n&lt;/code>个初始值为&lt;code>t&lt;/code>的元素&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>只有顺序容器的构造函数才接受大小参数，关联容器并不支持。&lt;/li>
&lt;li>&lt;code>array&lt;/code>具有固定大小。&lt;/li>
&lt;li>和其他容器不同，默认构造的&lt;code>array&lt;/code>是非空的。&lt;/li>
&lt;li>直接复制：将一个容器复制给另一个容器时，类型必须匹配：容器类型和元素类型都必须相同。&lt;/li>
&lt;li>使用迭代器复制：不要求容器类型相同，容器内的元素类型也可以不同。&lt;/li>
&lt;/ul>
&lt;h3 id="赋值和swap">赋值和&lt;code>swap&lt;/code>&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c1 = c2;&lt;/code>&lt;/td>
&lt;td>将&lt;code>c1&lt;/code>中的元素替换成&lt;code>c2&lt;/code>中的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c1 = {a, b, c...}&lt;/code>&lt;/td>
&lt;td>将&lt;code>c1&lt;/code>中的元素替换成列表中的元素（不适用于&lt;code>array&lt;/code>）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c1.swap(c2)&lt;/code>&lt;/td>
&lt;td>交换&lt;code>c1&lt;/code>和&lt;code>c2&lt;/code>的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>swap(c1, c2)&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>c1.swap(c2)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.assign(b, e)&lt;/code>&lt;/td>
&lt;td>将&lt;code>c&lt;/code>中的元素替换成迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>表示范围中的元素，&lt;code>b&lt;/code>和&lt;code>e&lt;/code>不能指向&lt;code>c&lt;/code>中的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.assign(il)&lt;/code>&lt;/td>
&lt;td>将&lt;code>c&lt;/code>中的元素替换成初始化列表&lt;code>il&lt;/code>中的元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.assign(n, r)&lt;/code>&lt;/td>
&lt;td>将&lt;code>c&lt;/code>中的元素替换为&lt;code>n&lt;/code>个值是&lt;code>t&lt;/code>的元素&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>使用非成员版本的&lt;code>swap&lt;/code>是一个好习惯。&lt;/li>
&lt;li>&lt;code>assign&lt;/code>操作不适用于关联容器和&lt;code>array&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="大小">大小&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.size()&lt;/code>&lt;/td>
&lt;td>&lt;code>c&lt;/code>中元素的数目（不支持&lt;code>forward_list&lt;/code>）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.max_size()&lt;/code>&lt;/td>
&lt;td>&lt;code>c&lt;/code>中可保存的最大元素数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.empty()&lt;/code>&lt;/td>
&lt;td>若&lt;code>c&lt;/code>中存储了元素，返回&lt;code>false&lt;/code>，否则返回&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="添加元素">添加元素&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.push_back(t)&lt;/code>&lt;/td>
&lt;td>在&lt;code>c&lt;/code>尾部创建一个值为&lt;code>t&lt;/code>的元素，返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.emplace_back(args)&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.push_front(t)&lt;/code>&lt;/td>
&lt;td>在&lt;code>c&lt;/code>头部创建一个值为&lt;code>t&lt;/code>的元素，返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.emplace_front(args)&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.insert(p, t)&lt;/code>&lt;/td>
&lt;td>在迭代器&lt;code>p&lt;/code>指向的元素之前创建一个值是&lt;code>t&lt;/code>的元素，返回指向新元素的迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.emplace(p, args)&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.insert(p, n, t)&lt;/code>&lt;/td>
&lt;td>在迭代器&lt;code>p&lt;/code>指向的元素之前插入&lt;code>n&lt;/code>个值为&lt;code>t&lt;/code>的元素，返回指向第一个新元素的迭代器；如果&lt;code>n&lt;/code>是 0，则返回&lt;code>p&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.insert(p, b, e)&lt;/code>&lt;/td>
&lt;td>将迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>范围内的元素，插入到&lt;code>p&lt;/code>指向的元素之前；如果范围为空，则返回&lt;code>p&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.insert(p, il)&lt;/code>&lt;/td>
&lt;td>&lt;code>il&lt;/code>是一个花括号包围中的元素值列表，将其插入到&lt;code>p&lt;/code>指向的元素之前；如果&lt;code>il&lt;/code>是空，则返回&lt;code>p&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>因为这些操作会改变大小，因此不适用于&lt;code>array&lt;/code>。&lt;/li>
&lt;li>&lt;code>forward_list&lt;/code>有自己专有版本的&lt;code>insert&lt;/code>和&lt;code>emplace&lt;/code>。&lt;/li>
&lt;li>&lt;code>forward_list&lt;/code>不支持&lt;code>push_back&lt;/code>和&lt;code>emplace_back&lt;/code>。&lt;/li>
&lt;li>当我们用一个对象去初始化容器或者将对象插入到容器时，实际上放入的是对象的拷贝。&lt;/li>
&lt;li>&lt;code>emplace&lt;/code>开头的函数是新标准引入的，这些操作是构造而不是拷贝元素。&lt;/li>
&lt;li>传递给&lt;code>emplace&lt;/code>的参数必须和元素类型的构造函数相匹配。&lt;/li>
&lt;/ul>
&lt;h3 id="访问元素">访问元素&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.back()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>c&lt;/code>中尾元素的引用。若&lt;code>c&lt;/code>为空，函数行为未定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.front()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>c&lt;/code>中头元素的引用。若&lt;code>c&lt;/code>为空，函数行为未定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c[n]&lt;/code>&lt;/td>
&lt;td>返回&lt;code>c&lt;/code>中下标是&lt;code>n&lt;/code>的元素的引用，&lt;code>n&lt;/code>时候一个无符号证书。若&lt;code>n&amp;gt;=c.size()&lt;/code>，则函数行为未定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.at(n)&lt;/code>&lt;/td>
&lt;td>返回下标为&lt;code>n&lt;/code>的元素引用。如果下标越界，则抛出&lt;code>out_of_range&lt;/code>异常&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>访问成员函数返回的是引用。&lt;/li>
&lt;li>&lt;code>at&lt;/code>和下标操作只适用于&lt;code>string&lt;/code>、&lt;code>vector&lt;/code>、&lt;code>deque&lt;/code>、&lt;code>array&lt;/code>。&lt;/li>
&lt;li>&lt;code>back&lt;/code>不适用于&lt;code>forward_list&lt;/code>。&lt;/li>
&lt;li>如果希望下标是合法的，可以使用&lt;code>at&lt;/code>函数。&lt;/li>
&lt;/ul>
&lt;h3 id="删除元素">删除元素&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.pop_back()&lt;/code>&lt;/td>
&lt;td>删除&lt;code>c&lt;/code>中尾元素，若&lt;code>c&lt;/code>为空，则函数行为未定义。函数返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.pop_front()&lt;/code>&lt;/td>
&lt;td>删除&lt;code>c&lt;/code>中首元素，若&lt;code>c&lt;/code>为空，则函数行为未定义。函数返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.erase(p)&lt;/code>&lt;/td>
&lt;td>删除迭代器&lt;code>p&lt;/code>指向的元素，返回一个指向被删除元素之后的元素的迭代器，若&lt;code>p&lt;/code>本身是尾后迭代器，则函数行为未定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.erase(b, e)&lt;/code>&lt;/td>
&lt;td>删除迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>范围内的元素，返回指向最后一个被删元素之后元素的迭代器，若&lt;code>e&lt;/code>本身就是尾后迭代器，则返回尾后迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.clear()&lt;/code>&lt;/td>
&lt;td>删除&lt;code>c&lt;/code>中所有元素，返回&lt;code>void&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>会改变容器大小，不适用于&lt;code>array&lt;/code>。&lt;/li>
&lt;li>&lt;code>forward_list&lt;/code>有特殊版本的&lt;code>erase&lt;/code>&lt;/li>
&lt;li>&lt;code>forward_list&lt;/code>不支持&lt;code>pop_back&lt;/code>&lt;/li>
&lt;li>&lt;code>vector&lt;/code>和&lt;code>string&lt;/code>不支持&lt;code>pop_front&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="特殊的-forwad_list-操作">特殊的 forwad_list 操作&lt;/h3>
&lt;ul>
&lt;li>链表在删除元素时需要修改前置节点的内容，双向链表会前驱的指针，但是单向链表没有保存，因此需要增加获取前置节点的方法。&lt;/li>
&lt;li>&lt;code>forward_list&lt;/code>定义了&lt;code>before_begin&lt;/code>，即首前（off-the-begining）迭代器，允许我们再在首元素之前添加或删除元素。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>lst.before_begin()&lt;/code>&lt;/td>
&lt;td>返回指向链表首元素之前不存在的元素的迭代器，此迭代器不能解引用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.cbefore_begin()&lt;/code>&lt;/td>
&lt;td>同上，但是返回的是常量迭代器。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.insert_after(p, t)&lt;/code>&lt;/td>
&lt;td>在迭代器&lt;code>p&lt;/code>之后插入元素。&lt;code>t&lt;/code>是一个对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.insert_after(p, n, t)&lt;/code>&lt;/td>
&lt;td>在迭代器&lt;code>p&lt;/code>之后插入元素。&lt;code>t&lt;/code>是一个对象，&lt;code>n&lt;/code>是数量。若&lt;code>n&lt;/code>是 0 则函数行为未定义&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.insert_after(p, b, e)&lt;/code>&lt;/td>
&lt;td>在迭代器&lt;code>p&lt;/code>之后插入元素。由迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>指定范围。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.insert_after(p, il)&lt;/code>&lt;/td>
&lt;td>在迭代器&lt;code>p&lt;/code>之后插入元素。由&lt;code>il&lt;/code>指定初始化列表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>emplace_after(p, args)&lt;/code>&lt;/td>
&lt;td>使用&lt;code>args&lt;/code>在&lt;code>p&lt;/code>之后的位置，创建一个元素，返回一个指向这个新元素的迭代器。若&lt;code>p&lt;/code>为尾后迭代器，则函数行为未定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.erase_after(p)&lt;/code>&lt;/td>
&lt;td>删除&lt;code>p&lt;/code>指向位置之后的元素，返回一个指向被删元素之后的元素的迭代器，若&lt;code>p&lt;/code>指向&lt;code>lst&lt;/code>的尾元素或者是一个尾后迭代器，则函数行为未定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.erase_after(b, e)&lt;/code>&lt;/td>
&lt;td>类似上面，删除对象换成从&lt;code>b&lt;/code>到&lt;code>e&lt;/code>指定的范围。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="改变容器大小">改变容器大小&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.resize(n)&lt;/code>&lt;/td>
&lt;td>调整&lt;code>c&lt;/code>的大小为&lt;code>n&lt;/code>个元素，若&lt;code>n&amp;lt;c.size()&lt;/code>，则多出的元素被丢弃。若必须添加新元素，对新元素进行值初始化&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.resize(n, t)&lt;/code>&lt;/td>
&lt;td>调整&lt;code>c&lt;/code>的大小为&lt;code>n&lt;/code>个元素，任何新添加的元素都初始化为值&lt;code>t&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="获取迭代器">获取迭代器&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.begin()&lt;/code>, &lt;code>c.end()&lt;/code>&lt;/td>
&lt;td>返回指向&lt;code>c&lt;/code>的首元素和尾元素之后位置的迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.cbegin()&lt;/code>, &lt;code>c.cend()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>const_iterator&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>以&lt;code>c&lt;/code>开头的版本是 C++11 新标准引入的&lt;/li>
&lt;li>当不需要写访问时，应该使用&lt;code>cbegin&lt;/code>和&lt;code>cend&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="反向容器的额外成员">反向容器的额外成员&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>reverse_iterator&lt;/code>&lt;/td>
&lt;td>按逆序寻址元素的迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>const_reverse_iterator&lt;/code>&lt;/td>
&lt;td>不能修改元素的逆序迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.rbegin()&lt;/code>, &lt;code>c.rend()&lt;/code>&lt;/td>
&lt;td>返回指向&lt;code>c&lt;/code>的尾元素和首元素之前位置的迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.crbegin()&lt;/code>, &lt;code>c.crend()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>const_reverse_iterator&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>不支持&lt;code>forward_list&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="迭代器">迭代器&lt;/h3>
&lt;ul>
&lt;li>迭代器范围：&lt;code>begin&lt;/code>到&lt;code>end&lt;/code>，即第一个元素到最后一个元素的后面一个位置。&lt;/li>
&lt;li>左闭合区间：&lt;code>[begin, end)&lt;/code>&lt;/li>
&lt;li>左闭合范围蕴含的编程设定：
&lt;ul>
&lt;li>如果&lt;code>begin&lt;/code>和&lt;code>end&lt;/code>相等，则范围为空。&lt;/li>
&lt;li>如果二者不等，则范围至少包含一个元素，且&lt;code>begin&lt;/code>指向该范围中的第一个元素。&lt;/li>
&lt;li>可以对&lt;code>begin&lt;/code>递增若干次，使得&lt;code>begin == end&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="容器操作可能使迭代器失效">容器操作可能使迭代器失效&lt;/h3>
&lt;ul>
&lt;li>在向容器添加元素后：
&lt;ul>
&lt;li>如果容器是&lt;code>vector&lt;/code>或&lt;code>string&lt;/code>，且存储空间被重新分配，则指向容器的迭代器、指针、引用都会失效。&lt;/li>
&lt;li>对于&lt;code>deque&lt;/code>，插入到除首尾位置之外的任何位置都会导致指向容器的迭代器、指针、引用失效。如果在首尾位置添加元素，迭代器会失效，但指向存在元素的引用和指针不会失效。&lt;/li>
&lt;li>对于&lt;code>list&lt;/code>和&lt;code>forward_list&lt;/code>，指向容器的迭代器、指针和引用依然有效。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在从一个容器中删除元素后：
&lt;ul>
&lt;li>对于&lt;code>list&lt;/code>和&lt;code>forward_list&lt;/code>，指向容器其他位置的迭代器、引用和指针仍然有效。&lt;/li>
&lt;li>对于&lt;code>deque&lt;/code>，如果在首尾之外的任何位置删除元素，那么指向被删除元素外其他元素的迭代器、指针、引用都会失效；如果是删除&lt;code>deque&lt;/code>的尾元素，则尾后迭代器会失效，但其他不受影响；如果删除的是&lt;code>deque&lt;/code>的头元素，这些也不会受影响。&lt;/li>
&lt;li>对于&lt;code>vector&lt;/code>和&lt;code>string&lt;/code>，指向被删元素之前的迭代器、引用、指针仍然有效。&lt;/li>
&lt;li>注意：当我们删除元素时，尾后迭代器总是会失效。&lt;/li>
&lt;li>注意：使用失效的迭代器、指针、引用是严重的运行时错误！&lt;/li>
&lt;li>建议：将要求迭代器必须保持有效的程序片段最小化。&lt;/li>
&lt;li>建议：不要保存&lt;code>end&lt;/code>返回的迭代器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="容器内元素的类型约束">容器内元素的类型约束&lt;/h3>
&lt;ul>
&lt;li>元素类型必须支持赋值运算；&lt;/li>
&lt;li>元素类型的对象必须可以复制。&lt;/li>
&lt;li>除了输入输出标准库类型外，其他所有标准库类型都是有效的容器元素类型。&lt;/li>
&lt;/ul>
&lt;h2 id="vector-对象是如何增长的">vector 对象是如何增长的&lt;/h2>
&lt;p>&lt;code>vector&lt;/code>和&lt;code>string&lt;/code>在内存中是连续保存的，如果原先分配的内存位置已经使用完，则需要重新分配新空间，将已有元素从就位置移动到新空间中，然后添加新元素。&lt;/p>
&lt;h3 id="管理容量的成员函数">管理容量的成员函数&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.shrink_to_fit()&lt;/code>&lt;/td>
&lt;td>将&lt;code>capacity()&lt;/code>减少到和&lt;code>size()&lt;/code>相同大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.capacity()&lt;/code>&lt;/td>
&lt;td>不重新分配内存空间的话，&lt;code>c&lt;/code>可以保存多少个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.reverse(n)&lt;/code>&lt;/td>
&lt;td>分配至少能容纳&lt;code>n&lt;/code>个元素的内存空间&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;code>shrink_to_fit&lt;/code>只适用于&lt;code>vector&lt;/code>、&lt;code>string&lt;/code>和&lt;code>deque&lt;/code>&lt;/li>
&lt;li>&lt;code>capacity&lt;/code>和&lt;code>reverse&lt;/code>只适用于&lt;code>vector&lt;/code>和&lt;code>string&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="额外的-string-操作">额外的 string 操作&lt;/h2>
&lt;h3 id="构造-string-的其他方法">构造 string 的其他方法&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>string s(cp, n)&lt;/code>&lt;/td>
&lt;td>&lt;code>s&lt;/code>是&lt;code>cp&lt;/code>指向的数组中前&lt;code>n&lt;/code>个字符的拷贝，此数组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string s(s2, pos2)&lt;/code>&lt;/td>
&lt;td>&lt;code>s&lt;/code>是&lt;code>string s2&lt;/code>从下标&lt;code>pos2&lt;/code>开始的字符的拷贝。若&lt;code>pos2 &amp;gt; s2.size()&lt;/code>，则构造函数的行为未定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>string s(s2, pos2, len2)&lt;/code>&lt;/td>
&lt;td>&lt;code>s&lt;/code>是&lt;code>string s2&lt;/code>从下标&lt;code>pos2&lt;/code>开始的&lt;code>len2&lt;/code>个字符的拷贝。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;code>n&lt;/code>,&lt;code>len2&lt;/code>,&lt;code>pos2&lt;/code>都是无符号值。&lt;/li>
&lt;/ul>
&lt;h3 id="substr-操作">substr 操作&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.substr(pos, n)&lt;/code>&lt;/td>
&lt;td>返回一个&lt;code>string&lt;/code>，包含&lt;code>s&lt;/code>中从&lt;code>pos&lt;/code>开始的&lt;code>n&lt;/code>个字符的拷贝。&lt;code>pos&lt;/code>的默认值是 0，&lt;code>n&lt;/code>的默认值是&lt;code>s.size() - pos&lt;/code>，即拷贝从&lt;code>pos&lt;/code>开始的所有字符。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="改变-string-的其他方法">改变 string 的其他方法&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.insert(pos, args)&lt;/code>&lt;/td>
&lt;td>在&lt;code>pos&lt;/code>之前插入&lt;code>args&lt;/code>指定的字符。&lt;code>pos&lt;/code>可以使是下标或者迭代器。接受下标的版本返回指向&lt;code>s&lt;/code>的引用；接受迭代器的版本返回指向第一个插入字符的迭代器。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.erase(pos, len)&lt;/code>&lt;/td>
&lt;td>删除从&lt;code>pos&lt;/code>开始的&lt;code>len&lt;/code>个字符，如果&lt;code>len&lt;/code>被省略，则删除后面所有字符，返回指向&lt;code>s&lt;/code>的引用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.assign(args)&lt;/code>&lt;/td>
&lt;td>将&lt;code>s&lt;/code>中的字符替换成&lt;code>args&lt;/code>指定的字符。返回一个指向&lt;code>s&lt;/code>的引用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.append(args)&lt;/code>&lt;/td>
&lt;td>将&lt;code>args&lt;/code>指定的字符追加到&lt;code>s&lt;/code>，返回一个指向&lt;code>s&lt;/code>的引用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.replace(range, args)&lt;/code>&lt;/td>
&lt;td>删除&lt;code>s&lt;/code>中范围&lt;code>range&lt;/code>中的字符，替换成&lt;code>args&lt;/code>指定的字符。返回一个指向&lt;code>s&lt;/code>的引用。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="string-搜索操作">string 搜索操作&lt;/h3>
&lt;ul>
&lt;li>&lt;code>string&lt;/code>类提供了 6 个不同的搜索函数，每个函数都有 4 个重载版本。&lt;/li>
&lt;li>每个搜索操作都返回一个&lt;code>string::size_type&lt;/code>值，表示匹配发生位置的下标。如果搜索失败则返回一个名为&lt;code>string::npos&lt;/code>的&lt;code>static&lt;/code>成员（类型是&lt;code>string::size_type&lt;/code>，初始化值是-1，也就是&lt;code>string&lt;/code>最大的可能大小）。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>搜索操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.find(args)&lt;/code>&lt;/td>
&lt;td>查找&lt;code>s&lt;/code>中&lt;code>args&lt;/code>第一次出现的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.rfind(args)&lt;/code>&lt;/td>
&lt;td>查找&lt;code>s&lt;/code>中&lt;code>args&lt;/code>最后一次出现的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_first_of(args)&lt;/code>&lt;/td>
&lt;td>在&lt;code>s&lt;/code>中查找&lt;code>args&lt;/code>中任何一个字符第一次出现的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_last_of(args)&lt;/code>&lt;/td>
&lt;td>在&lt;code>s&lt;/code>中查找&lt;code>args&lt;/code>中任何一个字符最后一次出现的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_first_not_of(args)&lt;/code>&lt;/td>
&lt;td>在&lt;code>s&lt;/code>中查找第一个不在&lt;code>args&lt;/code>中的字符&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.find_first_not_of(args)&lt;/code>&lt;/td>
&lt;td>在&lt;code>s&lt;/code>中查找最后一个不在&lt;code>args&lt;/code>中的字符&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>args 必须是一下的形式之一：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;code>args&lt;/code>形式&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c, pos&lt;/code>&lt;/td>
&lt;td>从&lt;code>s&lt;/code>中位置&lt;code>pos&lt;/code>开始查找字符&lt;code>c&lt;/code>。&lt;code>pos&lt;/code>默认是 0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s2, pos&lt;/code>&lt;/td>
&lt;td>从&lt;code>s&lt;/code>中位置&lt;code>pos&lt;/code>开始查找字符串&lt;code>s&lt;/code>。&lt;code>pos&lt;/code>默认是 0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cp, pos&lt;/code>&lt;/td>
&lt;td>从&lt;code>s&lt;/code>中位置&lt;code>pos&lt;/code>开始查找指针&lt;code>cp&lt;/code>指向的以空字符结尾的 C 风格字符串。&lt;code>pos&lt;/code>默认是 0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cp, pos, n&lt;/code>&lt;/td>
&lt;td>从&lt;code>s&lt;/code>中位置&lt;code>pos&lt;/code>开始查找指针&lt;code>cp&lt;/code>指向的前&lt;code>n&lt;/code>个字符。&lt;code>pos&lt;/code>和&lt;code>n&lt;/code>无默认值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="scompare-的几种参数形式">s.compare 的几种参数形式&lt;/h3>
&lt;p>逻辑类似于 C 标准库的&lt;code>strcmp&lt;/code>函数，根据&lt;code>s&lt;/code>是等于、大于还是小于参数指定的字符串，&lt;code>s.compare&lt;/code>返回 0、正数或负数。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数形式&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s2&lt;/code>&lt;/td>
&lt;td>比较&lt;code>s&lt;/code>和&lt;code>s2&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pos1, n1, s2&lt;/code>&lt;/td>
&lt;td>比较&lt;code>s&lt;/code>从&lt;code>pos1&lt;/code>开始的&lt;code>n1&lt;/code>个字符和&lt;code>s2&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pos1, n1, s2, pos2, n2&lt;/code>&lt;/td>
&lt;td>比较&lt;code>s&lt;/code>从&lt;code>pos1&lt;/code>开始的&lt;code>n1&lt;/code>个字符和&lt;code>s2&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>cp&lt;/code>&lt;/td>
&lt;td>比较&lt;code>s&lt;/code>和&lt;code>cp&lt;/code>指向的以空字符结尾的字符数组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pos1, n1, cp&lt;/code>&lt;/td>
&lt;td>比较&lt;code>s&lt;/code>从&lt;code>pos1&lt;/code>开始的&lt;code>n1&lt;/code>个字符和&lt;code>cp&lt;/code>指向的以空字符结尾的字符数组&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pos1, n1, cp, n2&lt;/code>&lt;/td>
&lt;td>比较&lt;code>s&lt;/code>从&lt;code>pos1&lt;/code>开始的&lt;code>n1&lt;/code>个字符和&lt;code>cp&lt;/code>指向的地址开始&lt;code>n2&lt;/code>个字符&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="string-和数值转换">string 和数值转换&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>转换&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>to_string(val)&lt;/code>&lt;/td>
&lt;td>一组重载函数，返回数值&lt;code>val&lt;/code>的&lt;code>string&lt;/code>表示。&lt;code>val&lt;/code>可以使任何算术类型。对每个浮点类型和&lt;code>int&lt;/code>或更大的整型，都有相应版本的&lt;code>to_string()&lt;/code>。和往常一样，小整型会被提升。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stoi(s, p, b)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>s&lt;/code>起始子串（表示整数内容）的数值，&lt;code>p&lt;/code>是&lt;code>s&lt;/code>中第一个非数值字符的下标，默认是 0，&lt;code>b&lt;/code>是转换所用的基数。返回&lt;code>int&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stol(s, p, b)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stoul(s, p, b)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>unsigned long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stoll(s, p, b)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>long long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stoull(s, p, b)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>unsigned long long&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stof(s, p)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>s&lt;/code>起始子串（表示浮点数内容）的数值，&lt;code>p&lt;/code>是&lt;code>s&lt;/code>中第一个非数值字符的下标，默认是 0。返回&lt;code>float&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stod(s, p)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>double&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>stold(s, p)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>long double&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="容器适配器adapter">容器适配器（adapter）&lt;/h2>
&lt;ul>
&lt;li>适配器是使一事物的行为类似于另一事物的行为的一种机制，例如&lt;code>stack&lt;/code>可以使任何一种顺序容器以栈的方式工作。&lt;/li>
&lt;li>初始化 &lt;code>deque&amp;lt;int&amp;gt; deq; stack&amp;lt;int&amp;gt; stk(deq);&lt;/code> 从&lt;code>deq&lt;/code>拷贝元素到&lt;code>stk&lt;/code>。&lt;/li>
&lt;li>创建适配器时，指定一个顺序容器，可以覆盖默认的基础容器： &lt;code>stack&amp;lt;string, vector&amp;lt;string&amp;gt; &amp;gt; str_stk;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="适配器的通用操作和类型">适配器的通用操作和类型&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>size_type&lt;/code>&lt;/td>
&lt;td>一种类型，须以保存当前类型的最大对象的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>value_type&lt;/code>&lt;/td>
&lt;td>元素类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>container_type&lt;/code>&lt;/td>
&lt;td>实现适配器的底层容器类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>A a;&lt;/code>&lt;/td>
&lt;td>创建一个名为&lt;code>a&lt;/code>的空适配器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>A a(c)&lt;/code>&lt;/td>
&lt;td>创建一个名为&lt;code>a&lt;/code>的适配器，带有容器&lt;code>c&lt;/code>的一个拷贝&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>关系运算符&lt;/td>
&lt;td>每个适配器都支持所有关系运算符：&lt;code>==&lt;/code>、&lt;code>!=&lt;/code>、&lt;code>&amp;lt;&lt;/code>、 &lt;code>&amp;lt;=&lt;/code>、&lt;code>&amp;gt;&lt;/code>、&lt;code>&amp;gt;=&lt;/code>这些运算符返回底层容器的比较结果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a.empty()&lt;/code>&lt;/td>
&lt;td>若&lt;code>a&lt;/code>包含任何元素，返回&lt;code>false&lt;/code>;否则返回&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a.size()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>a&lt;/code>中的元素数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>swap(a, b)&lt;/code>&lt;/td>
&lt;td>交换&lt;code>a&lt;/code>和&lt;code>b&lt;/code>的内容，&lt;code>a&lt;/code>和&lt;code>b&lt;/code>必须有相同类型，包括底层容器类型也必须相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a.swap(b)&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="stack">stack&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>s.pop()&lt;/code>&lt;/td>
&lt;td>删除栈顶元素，不返回。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.push(item)&lt;/code>&lt;/td>
&lt;td>创建一个新元素，压入栈顶，该元素通过拷贝或移动&lt;code>item&lt;/code>而来&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.emplace(args)&lt;/code>&lt;/td>
&lt;td>同上，但元素由&lt;code>args&lt;/code>来构造。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.top()&lt;/code>&lt;/td>
&lt;td>返回栈顶元素，不删除。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>定义在&lt;code>stack&lt;/code>头文件中。&lt;/li>
&lt;li>&lt;code>stack&lt;/code>默认基于&lt;code>deque&lt;/code>实现，也可以在&lt;code>list&lt;/code>或&lt;code>vector&lt;/code>之上实现。&lt;/li>
&lt;/ul>
&lt;h3 id="queue-和-priority_queue">queue 和 priority_queue&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>q.pop()&lt;/code>&lt;/td>
&lt;td>删除队首元素，但不返回。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.front()&lt;/code>&lt;/td>
&lt;td>返回队首元素的值，不删除。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.back()&lt;/code>&lt;/td>
&lt;td>返回队尾元素的值，不删除。只适用于&lt;code>queue&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.top()&lt;/code>&lt;/td>
&lt;td>返回具有最高优先级的元素值，不删除。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.push(item)&lt;/code>&lt;/td>
&lt;td>在队尾压入一个新元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q.emplace(args)&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>定义在&lt;code>queue&lt;/code>头文件中。&lt;/li>
&lt;li>&lt;code>queue&lt;/code>默认基于&lt;code>deque&lt;/code>实现，&lt;code>priority_queue&lt;/code>默认基于&lt;code>vector&lt;/code>实现。&lt;/li>
&lt;li>&lt;code>queue&lt;/code>可以在&lt;code>list&lt;/code>或&lt;code>vector&lt;/code>之上实现，&lt;code>priority_queue&lt;/code>也可以用&lt;code>deque&lt;/code>实现。&lt;/li>
&lt;/ul></description></item><item><title>ch10</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch10/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch10/</guid><description>&lt;h1 id="第十章-泛型算法">第十章 泛型算法&lt;/h1>
&lt;h2 id="泛型算法">泛型算法&lt;/h2>
&lt;ul>
&lt;li>因为它们实现共同的操作，所以称之为“&lt;strong>算法&lt;/strong>”；而“&lt;strong>泛型&lt;/strong>”、指的是它们可以操作在多种容器类型上。&lt;/li>
&lt;li>泛型算法本身不执行容器操作，只是单独依赖迭代器和迭代器操作实现。&lt;/li>
&lt;li>头文件： &lt;code>#include &amp;lt;algorithm&amp;gt;&lt;/code>或者 &lt;code>#include &amp;lt;numeric&amp;gt;&lt;/code>(算数相关)&lt;/li>
&lt;li>大多数算法是通过遍历两个迭代器标记的一段元素来实现其功能。&lt;/li>
&lt;li>必要的编程假定：算法永远不会改变底层容器的大小。算法可能改变容器中保存的元素的值，也可能在容器内移动元素，但不能直接添加或者删除元素。&lt;/li>
&lt;/ul>
&lt;h3 id="find">find&lt;/h3>
&lt;ul>
&lt;li>&lt;code>vector&amp;lt;int&amp;gt;::const_iterator result = find(vec.begin(), vec.end(), search_value);&lt;/code>&lt;/li>
&lt;li>输入：两个标记范围的迭代器和目标查找值。返回：如果找到，返回对应的迭代器，否则返回第二个参数，即标记结尾的迭代器。&lt;/li>
&lt;/ul>
&lt;h2 id="初识泛型算法">初识泛型算法&lt;/h2>
&lt;ul>
&lt;li>标准库提供了超过 100 个算法，但这些算法有一致的结构。&lt;/li>
&lt;li>理解算法的最基本的方法是了解它们是否读取元素、改变元素、重排元素顺序。&lt;/li>
&lt;/ul>
&lt;h3 id="只读算法">只读算法&lt;/h3>
&lt;ul>
&lt;li>只读取范围中的元素，不改变元素。&lt;/li>
&lt;li>如 &lt;code>find&lt;/code>和 &lt;code>accumulate&lt;/code>（在&lt;code>numeric&lt;/code>中定义，求和）。&lt;/li>
&lt;li>&lt;code>find_first_of&lt;/code>，输入：两对迭代器标记两段范围，在第一段中找第二段中任意元素，返回第一个匹配的元素，找不到返回第一段的&lt;code>end&lt;/code>迭代器。&lt;/li>
&lt;li>通常最好使用&lt;code>cbegin&lt;/code>和&lt;code>cend&lt;/code>。&lt;/li>
&lt;li>&lt;code>equal&lt;/code>：确定两个序列是否保存相同的值。&lt;/li>
&lt;/ul>
&lt;h3 id="写容器元素的算法">写容器元素的算法&lt;/h3>
&lt;ul>
&lt;li>一些算法将新值赋予序列中的元素。&lt;/li>
&lt;li>算法不检查写操作。&lt;/li>
&lt;li>&lt;code>fill&lt;/code>： &lt;code>fill(vec.begin(), vec.end(), 0);&lt;/code> 将每个元素重置为 0&lt;/li>
&lt;li>&lt;code>fill_n&lt;/code>： &lt;code>fill_n(vec.begin(), 10, 0);&lt;/code>&lt;/li>
&lt;li>插入迭代器&lt;code>back_inserter&lt;/code>：
&lt;ul>
&lt;li>用来确保算法有足够的空间存储数据。&lt;/li>
&lt;li>&lt;code>#include &amp;lt;iterator&amp;gt;&lt;/code>&lt;/li>
&lt;li>&lt;code>back_inserter(vec)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>拷贝算法&lt;code>copy&lt;/code>：&lt;/li>
&lt;li>输入：前两个参数指定输入范围，第三个指向目标序列。&lt;/li>
&lt;li>&lt;code>copy (ilst.begin(), ilst.end(), back_inserter(ivec));&lt;/code>&lt;/li>
&lt;li>&lt;code>copy&lt;/code>时必须保证目标目的序列至少要包含与输入序列一样多的元素。&lt;/li>
&lt;/ul>
&lt;h3 id="重排容器元素的算法">重排容器元素的算法&lt;/h3>
&lt;ul>
&lt;li>这些算法会重排容器中元素的顺序。&lt;/li>
&lt;li>排序算法&lt;code>sort&lt;/code>：
&lt;ul>
&lt;li>接受两个迭代器，表示要排序的元素范围。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>消除重复&lt;code>unique&lt;/code>：
&lt;ul>
&lt;li>之前要先调用&lt;code>sort&lt;/code>&lt;/li>
&lt;li>返回的迭代器指向最后一个不重复元素之后的位置。&lt;/li>
&lt;li>顺序会变，重复的元素被“删除”。&lt;/li>
&lt;li>并没有真正删除，真正删除必须使用容器操作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="定制操作">定制操作&lt;/h2>
&lt;h3 id="向算法传递函数">向算法传递函数：&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>谓词（&lt;code>predicate&lt;/code>）：&lt;/p>
&lt;ul>
&lt;li>是一个&lt;strong>可调用的表达式&lt;/strong>，返回结果是一个能用作条件的值&lt;/li>
&lt;li>一元谓词：接受一个参数&lt;/li>
&lt;li>二元谓词：接受两个参数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>例子：&lt;/p>
&lt;ul>
&lt;li>&lt;code>stable_sort&lt;/code>：
&lt;ul>
&lt;li>保留相等元素的原始相对位置。&lt;/li>
&lt;li>&lt;code>stable_sort(words.begin(), words.end(), isShorter);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="lambda-表达式">lambda 表达式&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>有时可能希望操作可以接受更多的参数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>lambda&lt;/code>表达式表示一个可调用的代码单元，可以理解成是一个未命名的内联函数。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>形式：&lt;code>[capture list](parameter list) -&amp;gt; return type {function body}&lt;/code>。&lt;/p>
&lt;ul>
&lt;li>其中&lt;code>capture list&lt;/code>捕获列表是一个&lt;code>lambda&lt;/code>所在函数定义的局部变量的列表（通常为空）。不可忽略。&lt;/li>
&lt;li>&lt;code>return type&lt;/code>是返回类型。可忽略。&lt;/li>
&lt;li>&lt;code>parameter&lt;/code>是参数列表。可忽略。&lt;/li>
&lt;li>&lt;code>function body&lt;/code>是函数体。不可忽略。&lt;/li>
&lt;li>&lt;code>auto f = [] {return 42;}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>例子：&lt;/p>
&lt;ul>
&lt;li>&lt;code>find_if&lt;/code>:
&lt;ul>
&lt;li>接受一对表示范围的迭代器和一个谓词，用来查找第一个满足特定要求的元素。返回第一个使谓词返回非 0 值的元素。&lt;/li>
&lt;li>&lt;code>auto wc = find_if(words.begin(), words.end(), [sz](const string &amp;amp;a){return a.size() &amp;gt;= sz;});&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>for_each&lt;/code>：
&lt;ul>
&lt;li>接受一个可调用对象，并对序列中每个元素调用此对象。&lt;/li>
&lt;li>&lt;code>for_each(wc, words.end(), [](const string &amp;amp;s){cout &amp;lt;&amp;lt; s &amp;lt;&amp;lt; &amp;quot; &amp;quot;;})&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="lambda-捕获和返回">lambda 捕获和返回&lt;/h3>
&lt;ul>
&lt;li>定义&lt;code>lambda&lt;/code>时会生成一个新的类类型和该类型的一个对象。&lt;/li>
&lt;li>默认情况下，从&lt;code>lambda&lt;/code>生成的类都包含一个对应该&lt;code>lambda&lt;/code>所捕获的变量的数据成员，在&lt;code>lambda&lt;/code>对象创建时被初始化。&lt;/li>
&lt;li>&lt;strong>值捕获&lt;/strong>：前提是变量可以拷贝，&lt;code>size_t v1 = 42; auto f = [v1] {return v1;};&lt;/code>。&lt;/li>
&lt;li>&lt;strong>引用捕获&lt;/strong>：必须保证在&lt;code>lambda&lt;/code>执行时，变量是存在的，&lt;code>auto f2 = [&amp;amp;v1] {return v1;};&lt;/code>&lt;/li>
&lt;li>尽量减少捕获的数据量，尽可能避免捕获指针或引用。&lt;/li>
&lt;li>&lt;strong>隐式捕获&lt;/strong>：让编译器推断捕获列表，在捕获列表中写一个&lt;code>&amp;amp;&lt;/code>（引用方式）或&lt;code>=&lt;/code>（值方式）。&lt;code>auto f3 = [=] {return v1;}&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>lambda 捕获列表&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>捕获列表&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>[]&lt;/code>&lt;/td>
&lt;td>空捕获列表。&lt;code>lambda&lt;/code>不能使用所在函数中的变量。一个&lt;code>lambda&lt;/code>只有在捕获变量后才能使用它们。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[names]&lt;/code>&lt;/td>
&lt;td>&lt;code>names&lt;/code>是一个逗号分隔的名字列表，这些名字都是在&lt;code>lambda&lt;/code>所在函数的局部变量，捕获列表中的变量都被拷贝，名字前如果使用了&lt;code>&amp;amp;&lt;/code>，则采用引用捕获方式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[&amp;amp;]&lt;/code>&lt;/td>
&lt;td>隐式捕获列表，采用引用捕获方式。&lt;code>lambda&lt;/code>体中所使用的来自所在函数的实体都采用引用方式使用。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[=]&lt;/code>&lt;/td>
&lt;td>隐式捕获列表，采用值捕获方式。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[&amp;amp;, identifier_list]&lt;/code>&lt;/td>
&lt;td>&lt;code>identifier_list&lt;/code>是一个逗号分隔的列表，包含 0 个或多个来自所在函数的变量。这些变量采用值捕获方式，而任何隐式捕获的变量都采用引用方式捕获。&lt;code>identifier_list&lt;/code>中的名字前面不能使用&lt;code>&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[=, identifier_list]&lt;/code>&lt;/td>
&lt;td>&lt;code>identifier_list&lt;/code>中的变量采用引用方式捕获，而任何隐式捕获的变量都采用值方式捕获。&lt;code>identifier_list&lt;/code>中的名字不能包括&lt;code>this&lt;/code>，且前面必须使用&lt;code>&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="参数绑定">参数绑定&lt;/h3>
&lt;ul>
&lt;li>&lt;code>lambda&lt;/code>表达式更适合在一两个地方使用的简单操作。&lt;/li>
&lt;li>如果是很多地方使用相同的操作，还是需要定义函数。&lt;/li>
&lt;li>函数如何包装成一元谓词？使用参数绑定。&lt;/li>
&lt;li>标准库&lt;code>bind&lt;/code>函数：
&lt;ul>
&lt;li>定义在头文件&lt;code>functional&lt;/code>中，可以看做为一个通用的函数适配器。&lt;/li>
&lt;li>&lt;code>auto newCallable = bind(callable, arg_list);&lt;/code>&lt;/li>
&lt;li>我们再调用&lt;code>newCallable&lt;/code>的时候，&lt;code>newCallable&lt;/code>会调用&lt;code>callable&lt;/code>并传递给它&lt;code>arg_list&lt;/code>中的参数。&lt;/li>
&lt;li>&lt;code>_n&lt;/code>代表第 n 个位置的参数。定义在&lt;code>placeholders&lt;/code>的命名空间中。&lt;code>using std::placeholder::_1;&lt;/code>&lt;/li>
&lt;li>&lt;code>auto g = bind(f, a, b, _2, c, _1);&lt;/code>，调用&lt;code>g(_1, _2)&lt;/code>实际上调用&lt;code>f(a, b, _2, c, _1)&lt;/code>&lt;/li>
&lt;li>非占位符的参数要使用引用传参，必须使用标准库&lt;code>ref&lt;/code>函数或者&lt;code>cref&lt;/code>函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="再探迭代器">再探迭代器&lt;/h2>
&lt;h3 id="插入迭代器">插入迭代器&lt;/h3>
&lt;ul>
&lt;li>插入器是一种迭代器适配器，接受一个容器，生成一个迭代器，能实现向给定容器添加元素。&lt;/li>
&lt;li>三种类型：
&lt;ul>
&lt;li>&lt;code>back_inserter&lt;/code>：创建一个使用&lt;code>push_back&lt;/code>的迭代器。&lt;/li>
&lt;li>&lt;code>front_inserter&lt;/code>创建一个使用&lt;code>push_front&lt;/code>的迭代器。&lt;/li>
&lt;li>&lt;code>inserter&lt;/code>创建一个使用&lt;code>insert&lt;/code>的迭代器。接受第二个参数，即一个指向给定容器的迭代器，元素会被查到迭代器所指向的元素之前。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>插入迭代器操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>it=t&lt;/code>&lt;/td>
&lt;td>在&lt;code>it&lt;/code>指定的当前位置插入值&lt;code>t&lt;/code>。假定&lt;code>c&lt;/code>是&lt;code>it&lt;/code>绑定的容器，依赖于插入迭代器的不同种类，此赋值会分别调用&lt;code>c.push_back(t)&lt;/code>、&lt;code>c.push_front(t)&lt;/code>、&lt;code>c.insert(t, p)&lt;/code>，其中&lt;code>p&lt;/code>是传递给&lt;code>inserter&lt;/code>的迭代器位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*it, ++it, it++&lt;/code>&lt;/td>
&lt;td>这些操作虽然存在，但不会对&lt;code>it&lt;/code>做任何事情，每个操作都返回&lt;code>it&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="iostream-迭代器">iostream 迭代器&lt;/h3>
&lt;ul>
&lt;li>迭代器可与输入或输出流绑定在一起，用于迭代遍历所关联的 IO 流。&lt;/li>
&lt;li>通过使用流迭代器，我们可以用泛型算法从流对象中读取数据以及向其写入数据。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>istream_iterator 的操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>istream_iterator&amp;lt;T&amp;gt; in(is);&lt;/code>&lt;/td>
&lt;td>&lt;code>in&lt;/code>从输入流&lt;code>is&lt;/code>读取类型为&lt;code>T&lt;/code>的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>istream_iterator&amp;lt;T&amp;gt; end;&lt;/code>&lt;/td>
&lt;td>读取类型是&lt;code>T&lt;/code>的值的&lt;code>istream_iterator&lt;/code>迭代器，表示尾后位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>in1 == in2&lt;/code>&lt;/td>
&lt;td>&lt;code>in1&lt;/code>和&lt;code>in2&lt;/code>必须读取相同类型。如果他们都是尾后迭代器，或绑定到相同的输入，则两者相等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>in1 != in2&lt;/code>&lt;/td>
&lt;td>类似上条&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*in&lt;/code>&lt;/td>
&lt;td>返回从流中读取的值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>in-&amp;gt;mem&lt;/code>&lt;/td>
&lt;td>与&lt;code>*(in).mem&lt;/code>含义相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>++in, in++&lt;/code>&lt;/td>
&lt;td>使用元素类型所定义的&lt;code>&amp;gt;&amp;gt;&lt;/code>运算符从流中读取下一个值。前置版本返回一个指向递增后迭代器的引用，后置版本返回旧值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>ostream_iterator 的操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>ostream_iterator&amp;lt;T&amp;gt; out(os);&lt;/code>&lt;/td>
&lt;td>&lt;code>out&lt;/code>将类型为&lt;code>T&lt;/code>的值写到输出流&lt;code>os&lt;/code>中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ostream_iterator&amp;lt;T&amp;gt; out(os, d);&lt;/code>&lt;/td>
&lt;td>&lt;code>out&lt;/code>将类型为&lt;code>T&lt;/code>的值写到输出流&lt;code>os&lt;/code>中，每个值后面都输出一个&lt;code>d&lt;/code>。&lt;code>d&lt;/code>指向一个空字符结尾的字符数组。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>out = val&lt;/code>&lt;/td>
&lt;td>用&lt;code>&amp;lt;&amp;lt;&lt;/code>运算符将&lt;code>val&lt;/code>写入到&lt;code>out&lt;/code>所绑定的&lt;code>ostream&lt;/code>中。&lt;code>val&lt;/code>的类型必须和&lt;code>out&lt;/code>可写的类型兼容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*out, ++out, out++&lt;/code>&lt;/td>
&lt;td>这些运算符是存在的，但不对&lt;code>out&lt;/code>做任何事情。每个运算符都返回&lt;code>out&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="反向迭代器">反向迭代器&lt;/h3>
&lt;ul>
&lt;li>反向迭代器就是在容器中从尾元素向首元素反向移动的迭代器。&lt;/li>
&lt;li>对于反向迭代器，递增和递减的操作含义会颠倒。&lt;/li>
&lt;li>实现向后遍历，配合&lt;code>rbegin&lt;/code>和&lt;code>rend&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="泛型算法结构">泛型算法结构&lt;/h2>
&lt;h3 id="5-类迭代器">5 类迭代器&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>迭代器类别&lt;/th>
&lt;th>解释&lt;/th>
&lt;th>支持的操作&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>输入迭代器&lt;/td>
&lt;td>只读，不写；单遍扫描，只能递增&lt;/td>
&lt;td>&lt;code>==&lt;/code>,&lt;code>!=&lt;/code>,&lt;code>++&lt;/code>,&lt;code>*&lt;/code>,&lt;code>-&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>输出迭代器&lt;/td>
&lt;td>只写，不读；单遍扫描，只能递增&lt;/td>
&lt;td>&lt;code>++&lt;/code>,&lt;code>*&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>前向迭代器&lt;/td>
&lt;td>可读写；多遍扫描，只能递增&lt;/td>
&lt;td>&lt;code>==&lt;/code>,&lt;code>!=&lt;/code>,&lt;code>++&lt;/code>,&lt;code>*&lt;/code>,&lt;code>-&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>双向迭代器&lt;/td>
&lt;td>可读写；多遍扫描，可递增递减&lt;/td>
&lt;td>&lt;code>==&lt;/code>,&lt;code>!=&lt;/code>,&lt;code>++&lt;/code>,&lt;code>--&lt;/code>,&lt;code>*&lt;/code>,&lt;code>-&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>随机访问迭代器&lt;/td>
&lt;td>可读写，多遍扫描，支持全部迭代器运算&lt;/td>
&lt;td>&lt;code>==&lt;/code>,&lt;code>!=&lt;/code>,&lt;code>&amp;lt;&lt;/code>,&lt;code>&amp;lt;=&lt;/code>,&lt;code>&amp;gt;&lt;/code>,&lt;code>&amp;gt;=&lt;/code>,&lt;code>++&lt;/code>,&lt;code>--&lt;/code>,&lt;code>+&lt;/code>,&lt;code>+=&lt;/code>,&lt;code>-&lt;/code>,&lt;code>-=&lt;/code>,&lt;code>*&lt;/code>,&lt;code>-&amp;gt;&lt;/code>,&lt;code>iter[n]&lt;/code>==&lt;code>*(iter[n])&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="算法的形参模式">算法的形参模式&lt;/h3>
&lt;ul>
&lt;li>&lt;code>alg(beg, end, other args);&lt;/code>&lt;/li>
&lt;li>&lt;code>alg(beg, end, dest, other args);&lt;/code>&lt;/li>
&lt;li>&lt;code>alg(beg, end, beg2, other args);&lt;/code>&lt;/li>
&lt;li>&lt;code>alg(beg, end, beg2, end2, other args);&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>其中，&lt;code>alg&lt;/code>是算法名称，&lt;code>beg&lt;/code>和&lt;code>end&lt;/code>表示算法所操作的输入范围。&lt;code>dest&lt;/code>、&lt;code>beg2&lt;/code>、&lt;code>end2&lt;/code>都是迭代器参数，是否使用要依赖于执行的操作。&lt;/p>
&lt;h3 id="算法命名规范">算法命名规范&lt;/h3>
&lt;ul>
&lt;li>一些算法使用重载形式传递一个谓词。&lt;/li>
&lt;li>接受一个元素值的算法通常有一个&lt;strong>不同名&lt;/strong>的版本：加&lt;code>_if&lt;/code>，接受一个谓词代替元素值。&lt;/li>
&lt;li>区分拷贝元素的版本和不拷贝的版本：拷贝版本通常加&lt;code>_copy&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="特定容器算法">特定容器算法&lt;/h2>
&lt;ul>
&lt;li>对于&lt;code>list&lt;/code>和&lt;code>forward_list&lt;/code>，优先使用成员函数版本的算法而不是通用算法。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>list 和 forward_list 成员函数版本的算法&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>lst.merge(lst2)&lt;/code>&lt;/td>
&lt;td>将来自&lt;code>lst2&lt;/code>的元素合并入&lt;code>lst&lt;/code>，二者都必须是有序的，元素将从&lt;code>lst2&lt;/code>中删除。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.merge(lst2, comp)&lt;/code>&lt;/td>
&lt;td>同上，给定比较操作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.remove(val)&lt;/code>&lt;/td>
&lt;td>调用&lt;code>erase&lt;/code>删除掉与给定值相等(==)的每个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.remove_if(pred)&lt;/code>&lt;/td>
&lt;td>调用&lt;code>erase&lt;/code>删除掉令一元谓词为真的每个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.reverse()&lt;/code>&lt;/td>
&lt;td>反转&lt;code>lst&lt;/code>中元素的顺序&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.sort()&lt;/code>&lt;/td>
&lt;td>使用&lt;code>&amp;lt;&lt;/code>排序元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.sort(comp)&lt;/code>&lt;/td>
&lt;td>使用给定比较操作排序元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.unique()&lt;/code>&lt;/td>
&lt;td>调用&lt;code>erase&lt;/code>删除同一个值的连续拷贝。使用&lt;code>==&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>lst.unique(pred)&lt;/code>&lt;/td>
&lt;td>调用&lt;code>erase&lt;/code>删除同一个值的连续拷贝。使用给定的二元谓词。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>上面的操作都返回&lt;code>void&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>list 和 forward_list 的 splice 成员函数版本的参数&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>(p, lst2)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>是一个指向&lt;code>lst&lt;/code>中元素的迭代器，或者一个指向&lt;code>flst&lt;/code>首前位置的迭代器。函数将&lt;code>lst2&lt;/code>中的所有元素移动到&lt;code>lst&lt;/code>中&lt;code>p&lt;/code>之前的位置或是&lt;code>flst&lt;/code>中&lt;code>p&lt;/code>之后的位置。将元素从&lt;code>lst2&lt;/code>中删除。&lt;code>lst2&lt;/code>的类型必须和&lt;code>lst&lt;/code>相同，而且不能是同一个链表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(p, lst2, p2)&lt;/code>&lt;/td>
&lt;td>同上，&lt;code>p2&lt;/code>是一个指向&lt;code>lst2&lt;/code>中位置的有效的迭代器，将&lt;code>p2&lt;/code>指向的元素移动到&lt;code>lst&lt;/code>中，或将&lt;code>p2&lt;/code>之后的元素移动到&lt;code>flst&lt;/code>中。&lt;code>lst2&lt;/code>可以是于&lt;code>lst&lt;/code>或&lt;code>flst&lt;/code>相同的链表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(p, lst2, b, e)&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>和&lt;code>e&lt;/code>表示&lt;code>lst2&lt;/code>中的合法范围。将给定范围中的元素从&lt;code>lst2&lt;/code>移动到&lt;code>lst&lt;/code>或&lt;code>first&lt;/code>中。&lt;code>lst2&lt;/code>与&lt;code>lst&lt;/code>可以使相同的链表，但&lt;code>p&lt;/code>不能指向给定范围中的元素。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>使用&lt;code>lst.splice(args)&lt;/code>或&lt;code>flst.splice_after(args)&lt;/code>&lt;/li>
&lt;/ul></description></item><item><title>ch11</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch11/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch11/</guid><description>&lt;h1 id="第十一章-关联容器">第十一章 关联容器&lt;/h1>
&lt;ul>
&lt;li>关联容器和顺序容器的不同：关联容器中的元素时按照&lt;strong>关键字&lt;/strong>来保存和访问的。&lt;/li>
&lt;li>关联容器支持通过关键字来高效地查找和读取元素，基本的关联容器类型是 &lt;code>map&lt;/code>和 &lt;code>set&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>关联容器类型&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>容器类型&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>按顺序存储&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>map&lt;/code>&lt;/td>
&lt;td>关键数组：保存&lt;code>关键字-值&lt;/code>对&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>set&lt;/code>&lt;/td>
&lt;td>关键字即值，即只保存关键字的容器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>multimap&lt;/code>&lt;/td>
&lt;td>支持同一个键多次出现的&lt;code>map&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>multiset&lt;/code>&lt;/td>
&lt;td>支持同一个键多次出现的&lt;code>set&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>无序集合&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unordered_map&lt;/code>&lt;/td>
&lt;td>用哈希函数组织的&lt;code>map&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unordered_set&lt;/code>&lt;/td>
&lt;td>用哈希函数组织的&lt;code>set&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unordered_multimap&lt;/code>&lt;/td>
&lt;td>哈希组织的&lt;code>map&lt;/code>，关键字可以重复出现&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unordered_multiset&lt;/code>&lt;/td>
&lt;td>哈希组织的&lt;code>set&lt;/code>，关键字可以重复出现&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="关联容器概述">关联容器概述&lt;/h2>
&lt;h3 id="定义关联容器">定义关联容器&lt;/h3>
&lt;ul>
&lt;li>需要指定元素类型。&lt;/li>
&lt;li>列表初始化：
&lt;ul>
&lt;li>&lt;code>map&lt;/code>：&lt;code>map&amp;lt;string, int&amp;gt; word_count = {{&amp;quot;a&amp;quot;, 1}, {&amp;quot;b&amp;quot;, 2}};&lt;/code>&lt;/li>
&lt;li>&lt;code>set&lt;/code>：&lt;code>set&amp;lt;string&amp;gt; exclude = {&amp;quot;the&amp;quot;, &amp;quot;a&amp;quot;};&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="关键字类型的要求">关键字类型的要求&lt;/h3>
&lt;ul>
&lt;li>对于有序容器，关键字类型必须定义元素比较的方法。默认是&lt;code>&amp;lt;&lt;/code>。&lt;/li>
&lt;li>如果想传递一个比较的函数，可以这样定义：&lt;code>multiset&amp;lt;Sales_data, decltype(compareIsbn)*&amp;gt; bookstore(compareIsbn);&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="pair">pair&lt;/h3>
&lt;ul>
&lt;li>在&lt;code>utility&lt;/code>头文件中定义。&lt;/li>
&lt;li>一个&lt;code>pair&lt;/code>保存两个数据成员，两个类型不要求一样。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>pair 的操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>pair&amp;lt;T1, T2&amp;gt; p;&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>是一个&lt;code>pair&lt;/code>，两个类型分别是&lt;code>T1&lt;/code>和&lt;code>T2&lt;/code>的成员都进行了值初始化。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pair&amp;lt;T1, T2&amp;gt; p(v1, v2);&lt;/code>&lt;/td>
&lt;td>&lt;code>first&lt;/code>和&lt;code>second&lt;/code>分别用&lt;code>v1&lt;/code>和&lt;code>v2&lt;/code>进行初始化。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pair&amp;lt;T1, T2&amp;gt;p = {v1, v2};&lt;/code>&lt;/td>
&lt;td>等价于`p(v1, v2)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>make_pair(v1, v2);&lt;/code>&lt;/td>
&lt;td>&lt;code>pair&lt;/code>的类型从&lt;code>v1&lt;/code>和&lt;code>v2&lt;/code>的类型推断出来。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.first&lt;/code>&lt;/td>
&lt;td>返回&lt;code>p&lt;/code>的名为&lt;code>first&lt;/code>的数据成员。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.second&lt;/code>&lt;/td>
&lt;td>返回&lt;code>p&lt;/code>的名为&lt;code>second&lt;/code>的数据成员。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p1 relop p2&lt;/code>&lt;/td>
&lt;td>运算关系符按字典序定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p1 == p2&lt;/code>&lt;/td>
&lt;td>必须两对元素两两相等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p1 != p2&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="关联容器操作">关联容器操作&lt;/h2>
&lt;p>&lt;strong>关联容器额外的类型别名&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>类型别名&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>key_type&lt;/code>&lt;/td>
&lt;td>此容器类型的关键字类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mapped_type&lt;/code>&lt;/td>
&lt;td>每个关键字关联的类型，只适用于&lt;code>map&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>value_type&lt;/code>&lt;/td>
&lt;td>对于&lt;code>map&lt;/code>，是&lt;code>pair&amp;lt;const key_type, mapped_type&amp;gt;&lt;/code>; 对于&lt;code>set&lt;/code>，和&lt;code>key_type&lt;/code>相同。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="关联容器迭代器">关联容器迭代器&lt;/h3>
&lt;ul>
&lt;li>解引用一个关联容器迭代器时，会得到一个类型为容器的&lt;code>value_type&lt;/code>的值的引用。&lt;/li>
&lt;li>&lt;code>set&lt;/code>的迭代器是&lt;code>const&lt;/code>的。&lt;/li>
&lt;li>遍历关联容器：使用&lt;code>begin&lt;/code>和&lt;code>end&lt;/code>，遍历&lt;code>map&lt;/code>、&lt;code>multimap&lt;/code>、&lt;code>set&lt;/code>、&lt;code>multiset&lt;/code>时，迭代器按&lt;strong>关键字升序&lt;/strong>遍历元素。&lt;/li>
&lt;/ul>
&lt;h3 id="添加元素">添加元素&lt;/h3>
&lt;p>&lt;strong>关联容器&lt;code>insert&lt;/code>操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;code>insert&lt;/code>操作&lt;/th>
&lt;th>关联容器&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.insert(v)&lt;/code> &lt;code>c.emplace(args)&lt;/code>&lt;/td>
&lt;td>&lt;code>v&lt;/code>是&lt;code>value_type&lt;/code>类型的对象；&lt;code>args&lt;/code>用来构造一个元素。对于&lt;code>map&lt;/code>和&lt;code>set&lt;/code>，只有元素的关键字不存在&lt;code>c&lt;/code>中才插入或构造元素。函数返回一个&lt;code>pair&lt;/code>，包含一个迭代器，指向具有指定关键字的元素，以及一个指示插入是否成功的&lt;code>bool&lt;/code>值。对于&lt;code>multimap&lt;/code>和&lt;code>multiset&lt;/code>则会插入范围中的每个元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.insert(b, e)&lt;/code> &lt;code>c.insert(il)&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>和&lt;code>e&lt;/code>是迭代器，表示一个&lt;code>c::value_type&lt;/code> 类型值的范围；&lt;code>il&lt;/code>是这种值的花括号列表。函数返回&lt;code>void&lt;/code>。对于 &lt;code>map&lt;/code>和&lt;code>set&lt;/code>，只插入关键字不在&lt;code>c&lt;/code>中的元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.insert(p, v)&lt;/code> &lt;code>c.emplace(p, args)&lt;/code>&lt;/td>
&lt;td>类似&lt;code>insert(v)&lt;/code>，但将迭代器&lt;code>p&lt;/code>作为一个提示，指出从哪里开始搜索新元素应该存储的位置。返回一个迭代器，指向具有给定关键字的元素。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>向&lt;code>map&lt;/code>添加元素：&lt;/p>
&lt;ul>
&lt;li>&lt;code>word_count.insert({word, 1});&lt;/code>&lt;/li>
&lt;li>&lt;code>word_count.insert(make_pair(word, 1));&lt;/code>&lt;/li>
&lt;li>&lt;code>word_count.insert(pair&amp;lt;string, size_t&amp;gt;(word, 1));&lt;/code>&lt;/li>
&lt;li>&lt;code>word_count.insert(map&amp;lt;string, size_t&amp;gt;::value_type (word, 1));&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="删除元素">删除元素&lt;/h3>
&lt;p>&lt;strong>从关联容器中删除元素&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.erase(k)&lt;/code>&lt;/td>
&lt;td>从&lt;code>c&lt;/code>中删除每个关键字为&lt;code>k&lt;/code>的元素。返回一个&lt;code>size_type&lt;/code>值，指出删除的元素的数量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.erase(p)&lt;/code>&lt;/td>
&lt;td>从&lt;code>c&lt;/code>中删除迭代器&lt;code>p&lt;/code>指定的元素。&lt;code>p&lt;/code>必须指向&lt;code>c&lt;/code>中一个真实元素，不能等于&lt;code>c.end()&lt;/code>。返回一个指向&lt;code>p&lt;/code>之后元素的迭代器，若&lt;code>p&lt;/code>指向&lt;code>c&lt;/code>中的尾元素，则返回&lt;code>c.end()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.erase(b, e)&lt;/code>&lt;/td>
&lt;td>删除迭代器对&lt;code>b&lt;/code>和&lt;code>e&lt;/code>所表示范围中的元素。返回&lt;code>e&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="下标操作">下标操作&lt;/h3>
&lt;p>&lt;strong>&lt;code>map&lt;/code>和&lt;code>unordered_map&lt;/code>的下标操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c[k]&lt;/code>&lt;/td>
&lt;td>返回关键字为&lt;code>k&lt;/code>的元素；如果&lt;code>k&lt;/code>不在&lt;code>c&lt;/code>中，添加一个关键字为&lt;code>k&lt;/code>的元素，对其值初始化。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.at(k)&lt;/code>&lt;/td>
&lt;td>访问关键字为&lt;code>k&lt;/code>的元素，带参数检查；若&lt;code>k&lt;/code>不存在在&lt;code>c&lt;/code>中，抛出一个&lt;code>out_of_range&lt;/code>异常。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="查找元素">查找元素&lt;/h3>
&lt;p>&lt;strong>在一个关联容器中查找元素&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>c.find(k)&lt;/code>&lt;/td>
&lt;td>返回一个迭代器，指向第一个关键字为&lt;code>k&lt;/code>的元素，若&lt;code>k&lt;/code>不在容器中，则返回尾后迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.count(k)&lt;/code>&lt;/td>
&lt;td>返回关键字等于&lt;code>k&lt;/code>的元素的数量。对于不允许重复关键字的容器，返回值永远是 0 或 1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.lower_bound(k)&lt;/code>&lt;/td>
&lt;td>返回一个迭代器，指向第一个关键字&lt;strong>不小于&lt;/strong>&lt;code>k&lt;/code>的元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.upper_bound(k)&lt;/code>&lt;/td>
&lt;td>返回一个迭代器，指向第一个关键字&lt;strong>大于&lt;/strong>&lt;code>k&lt;/code>的元素。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.equal_range(k)&lt;/code>&lt;/td>
&lt;td>返回一个迭代器&lt;code>pair&lt;/code>，表示关键字等于&lt;code>k&lt;/code>的元素的范围。若&lt;code>k&lt;/code>不存在，&lt;code>pair&lt;/code>的两个成员均等于&lt;code>c.end()&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;code>lower_bound&lt;/code>和&lt;code>upper_bound&lt;/code>不适用于无序容器。&lt;/li>
&lt;li>下标和&lt;code>at&lt;/code>操作只适用于非&lt;code>const&lt;/code>的&lt;code>map&lt;/code>和&lt;code>unordered_map&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="无序容器">无序容器&lt;/h2>
&lt;ul>
&lt;li>有序容器使用比较运算符来组织元素；无序容器使用哈希函数和关键字类型的&lt;code>==&lt;/code>运算符。&lt;/li>
&lt;li>理论上哈希技术可以获得更好的性能。&lt;/li>
&lt;li>无序容器在存储上组织为一组桶(bucket)，每个桶保存零个或多个元素。无序容器使用一个哈希函数将元素映射到桶。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>无序容器管理操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>桶接口&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.bucket_count()&lt;/code>&lt;/td>
&lt;td>正在使用的桶的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.max_bucket_count()&lt;/code>&lt;/td>
&lt;td>容器能容纳的最多的桶的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.bucket_size(n)&lt;/code>&lt;/td>
&lt;td>第&lt;code>n&lt;/code>个桶中有多少个元素&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.bucket(k)&lt;/code>&lt;/td>
&lt;td>关键字为&lt;code>k&lt;/code>的元素在哪个桶中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>桶迭代&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>local_iterator&lt;/code>&lt;/td>
&lt;td>可以用来访问桶中元素的迭代器类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>const_local_iterator&lt;/code>&lt;/td>
&lt;td>桶迭代器的&lt;code>const&lt;/code>版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.begin(n)&lt;/code>，&lt;code>c.end(n)&lt;/code>&lt;/td>
&lt;td>桶&lt;code>n&lt;/code>的首元素迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.cbegin(n)&lt;/code>，&lt;code>c.cend(n)&lt;/code>&lt;/td>
&lt;td>与前两个函数类似，但返回&lt;code>const_local_iterator&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>哈希策略&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.load_factor()&lt;/code>&lt;/td>
&lt;td>每个桶的平均元素数量，返回&lt;code>float&lt;/code>值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.max_load_factor()&lt;/code>&lt;/td>
&lt;td>&lt;code>c&lt;/code>试图维护的平均比桶大小，返回&lt;code>float&lt;/code>值。&lt;code>c&lt;/code>会在需要时添加新的桶，以使得&lt;code>load_factor&amp;lt;=max_load_factor&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.rehash(n)&lt;/code>&lt;/td>
&lt;td>重组存储，使得&lt;code>bucket_count&amp;gt;=n&lt;/code>，且&lt;code>bucket_count&amp;gt;size/max_load_factor&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>c.reverse(n)&lt;/code>&lt;/td>
&lt;td>重组存储，使得&lt;code>c&lt;/code>可以保存&lt;code>n&lt;/code>个元素且不必&lt;code>rehash&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>ch12</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch12/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch12/</guid><description>&lt;h1 id="第十二章-动态内存">第十二章 动态内存&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>对象的生命周期：&lt;/p>
&lt;ul>
&lt;li>全局对象在程序启动时分配，结束时销毁。&lt;/li>
&lt;li>局部对象在进入程序块时创建，离开块时销毁。&lt;/li>
&lt;li>局部&lt;code>static&lt;/code>对象在第一次使用前分配，在程序结束时销毁。&lt;/li>
&lt;li>动态分配对象：只能显式地被释放。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>对象的内存位置：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>静态内存&lt;/strong>用来保存局部&lt;code>static&lt;/code>对象、类&lt;code>static&lt;/code>对象、定义在任何函数之外的变量。&lt;/li>
&lt;li>&lt;strong>栈内存&lt;/strong>用来保存定义在函数内的非&lt;code>static&lt;/code>对象。&lt;/li>
&lt;li>&lt;strong>堆内存&lt;/strong>，又称自由空间，用来存储&lt;strong>动态分配&lt;/strong>的对象。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="动态内存与智能指针">动态内存与智能指针&lt;/h2>
&lt;ul>
&lt;li>动态内存管理：
&lt;ul>
&lt;li>&lt;code>new&lt;/code>：在动态内存中为对象分配空间并返回一个指向该对象的指针。&lt;/li>
&lt;li>&lt;code>delete&lt;/code>：接受一个动态对象的指针，销毁该对象，并释放与之关联的内存。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>智能指针：
&lt;ul>
&lt;li>管理动态对象。&lt;/li>
&lt;li>行为类似常规指针。&lt;/li>
&lt;li>负责自动释放所指向的对象。&lt;/li>
&lt;li>智能指针也是模板。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="shared_ptr-类">shared_ptr 类&lt;/h3>
&lt;p>&lt;strong>shared_ptr 和 unique_ptr 都支持的操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;T&amp;gt; sp&lt;/code> &lt;code>unique_ptr&amp;lt;T&amp;gt; up&lt;/code>&lt;/td>
&lt;td>空智能指针，可以指向类型是&lt;code>T&lt;/code>的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p&lt;/code>&lt;/td>
&lt;td>将&lt;code>p&lt;/code>用作一个条件判断，若&lt;code>p&lt;/code>指向一个对象，则为&lt;code>true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*p&lt;/code>&lt;/td>
&lt;td>解引用&lt;code>p&lt;/code>，获得它指向的对象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p-&amp;gt;mem&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>(*p).mem&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.get()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>p&lt;/code>中保存的指针，要小心使用，若智能指针释放了对象，返回的指针所指向的对象也就消失了。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>swap(p, q)&lt;/code> &lt;code>p.swap(q)&lt;/code>&lt;/td>
&lt;td>交换&lt;code>p&lt;/code>和&lt;code>q&lt;/code>中的指针&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>shared_ptr 独有的操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>make_shared&amp;lt;T&amp;gt;(args)&lt;/code>&lt;/td>
&lt;td>返回一个&lt;code>shared_ptr&lt;/code>，指向一个动态分配的类型为&lt;code>T&lt;/code>的对象。使用&lt;code>args&lt;/code>初始化此对象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;T&amp;gt;p(q)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>是&lt;code>shared_ptr q&lt;/code>的拷贝；此操作会&lt;strong>递增&lt;/strong>&lt;code>q&lt;/code>中的计数器。&lt;code>q&lt;/code>中的指针必须能转换为&lt;code>T*&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p = q&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>和&lt;code>q&lt;/code>都是&lt;code>shared_ptr&lt;/code>，所保存的指针必须能互相转换。此操作会&lt;strong>递减&lt;/strong>&lt;code>p&lt;/code>的引用计数，&lt;strong>递增&lt;/strong>&lt;code>q&lt;/code>的引用计数；若&lt;code>p&lt;/code>的引用计数变为 0，则将其管理的原内存释放。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.unique()&lt;/code>&lt;/td>
&lt;td>若&lt;code>p.use_count()&lt;/code>是 1，返回&lt;code>true&lt;/code>；否则返回&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.use_count()&lt;/code>&lt;/td>
&lt;td>返回与&lt;code>p&lt;/code>共享对象的智能指针数量；可能很慢，主要用于调试。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>使用动态内存的三种原因&lt;/strong>：
&lt;ul>
&lt;li>程序不知道自己需要使用多少对象（比如容器类）。&lt;/li>
&lt;li>程序不知道所需要对象的准确类型。&lt;/li>
&lt;li>程序需要在多个对象间共享数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="直接管理内存">直接管理内存&lt;/h3>
&lt;ul>
&lt;li>用&lt;code>new&lt;/code>动态分配和初始化对象。
&lt;ul>
&lt;li>&lt;code>new&lt;/code>无法为分配的对象命名（因为自由空间分配的内存是无名的），因此是返回一个指向该对象的指针。&lt;/li>
&lt;li>&lt;code>int *pi = new int(123);&lt;/code>&lt;/li>
&lt;li>一旦内存耗尽，会抛出类型是&lt;code>bad_alloc&lt;/code>的异常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用&lt;code>delete&lt;/code>将动态内存归还给系统。
&lt;ul>
&lt;li>接受一个指针，指向要释放的对象。&lt;/li>
&lt;li>&lt;code>delete&lt;/code>后的指针称为空悬指针（dangling pointer）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用&lt;code>new&lt;/code>和&lt;code>delete&lt;/code>管理动态内存存在三个常见问题：
&lt;ul>
&lt;li>1.忘记&lt;code>delete&lt;/code>内存。&lt;/li>
&lt;li>2.使用已经释放掉的对象。&lt;/li>
&lt;li>3.同一块内存释放两次。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>坚持只使用智能指针可以避免上述所有问题。&lt;/li>
&lt;/ul>
&lt;h3 id="shared_ptr-和-new-结合使用">shared_ptr 和 new 结合使用&lt;/h3>
&lt;p>&lt;strong>定义和改变 shared_ptr 的其他方法&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;T&amp;gt; p(q)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>管理内置指针&lt;code>q&lt;/code>所指向的对象；&lt;code>q&lt;/code>必须指向&lt;code>new&lt;/code>分配的内存，且能够转换为&lt;code>T*&lt;/code>类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;T&amp;gt; p(u)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>从&lt;code>unique_ptr u&lt;/code>那里接管了对象的所有权；将&lt;code>u&lt;/code>置为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;T&amp;gt; p(q, d)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>接管了内置指针&lt;code>q&lt;/code>所指向的对象的所有权。&lt;code>q&lt;/code>必须能转换为&lt;code>T*&lt;/code>类型。&lt;code>p&lt;/code>将使用可调用对象&lt;code>d&lt;/code>来代替&lt;code>delete&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shared_ptr&amp;lt;T&amp;gt; p(p2, d)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>是&lt;code>shared_ptr p2&lt;/code>的拷贝，唯一的区别是&lt;code>p&lt;/code>将可调用对象&lt;code>d&lt;/code>来代替&lt;code>delete&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.reset()&lt;/code>&lt;/td>
&lt;td>若&lt;code>p&lt;/code>是唯一指向其对象的&lt;code>shared_ptr&lt;/code>，&lt;code>reset&lt;/code>会释放此对象。若传递了可选的参数内置指针&lt;code>q&lt;/code>，会令&lt;code>p&lt;/code>指向&lt;code>q&lt;/code>，否则会将&lt;code>p&lt;/code>置空。若还传递了参数&lt;code>d&lt;/code>，则会调用&lt;code>d&lt;/code>而不是&lt;code>delete&lt;/code>来释放&lt;code>q&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.reset(q)&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>p.reset(q, d)&lt;/code>&lt;/td>
&lt;td>同上&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="智能指针和异常">智能指针和异常&lt;/h3>
&lt;ul>
&lt;li>如果使用智能指针，即使程序块由于异常过早结束，智能指针类也能确保在内存不需要的时候将其释放。&lt;/li>
&lt;li>&lt;strong>智能指针陷阱&lt;/strong>：
&lt;ul>
&lt;li>不用相同的内置指针初始化（或&lt;code>reset&lt;/code>）多个智能指针&lt;/li>
&lt;li>不&lt;code>delete get()&lt;/code>返回的指针。&lt;/li>
&lt;li>如果你使用&lt;code>get()&lt;/code>返回的指针，记得当最后一个对应的智能指针销毁后，你的指针就无效了。&lt;/li>
&lt;li>如果你使用智能指针管理的资源不是&lt;code>new&lt;/code>分配的内存，记住传递给它一个删除器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="unique_ptr">unique_ptr&lt;/h3>
&lt;ul>
&lt;li>某一个时刻只能有一个&lt;code>unique_ptr&lt;/code>指向一个给定的对象。&lt;/li>
&lt;li>不支持拷贝或者赋值操作。&lt;/li>
&lt;li>向后兼容：&lt;code>auto_ptr&lt;/code>：老版本，具有&lt;code>unique_ptr&lt;/code>的部分特性。特别是，不能在容器中保存&lt;code>auto_ptr&lt;/code>，也不能从函数返回&lt;code>auto_ptr&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>unique_ptr 操作&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>unique_ptr&amp;lt;T&amp;gt; u1&lt;/code>&lt;/td>
&lt;td>空&lt;code>unique_ptr&lt;/code>，可以指向类型是&lt;code>T&lt;/code>的对象。&lt;code>u1&lt;/code>会使用&lt;code>delete&lt;/code>来是释放它的指针。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unique_ptr&amp;lt;T, D&amp;gt; u2&lt;/code>&lt;/td>
&lt;td>&lt;code>u2&lt;/code>会使用一个类型为&lt;code>D&lt;/code>的可调用对象来释放它的指针。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unique_ptr&amp;lt;T, D&amp;gt; u(d)&lt;/code>&lt;/td>
&lt;td>空&lt;code>unique_ptr&lt;/code>，指向类型为&lt;code>T&lt;/code>的对象，用类型为&lt;code>D&lt;/code>的对象&lt;code>d&lt;/code>代替&lt;code>delete&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u = nullptr&lt;/code>&lt;/td>
&lt;td>释放&lt;code>u&lt;/code>指向的对象，将&lt;code>u&lt;/code>置为空。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u.release()&lt;/code>&lt;/td>
&lt;td>&lt;code>u&lt;/code>放弃对指针的控制权，返回指针，并将&lt;code>u&lt;/code>置空。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u.reset()&lt;/code>&lt;/td>
&lt;td>释放&lt;code>u&lt;/code>指向的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u.reset(q)&lt;/code>&lt;/td>
&lt;td>令&lt;code>u&lt;/code>指向&lt;code>q&lt;/code>指向的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u.reset(nullptr)&lt;/code>&lt;/td>
&lt;td>将&lt;code>u&lt;/code>置空&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="weak_ptr">weak_ptr&lt;/h3>
&lt;ul>
&lt;li>&lt;code>weak_ptr&lt;/code>是一种不控制所指向对象生存期的智能指针。&lt;/li>
&lt;li>指向一个由&lt;code>shared_ptr&lt;/code>管理的对象，不改变&lt;code>shared_ptr&lt;/code>的引用计数。&lt;/li>
&lt;li>一旦最后一个指向对象的&lt;code>shared_ptr&lt;/code>被销毁，对象就会被释放，不管有没有&lt;code>weak_ptr&lt;/code>指向该对象。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>weak_ptr 操作&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>weak_ptr&amp;lt;T&amp;gt; w&lt;/code>&lt;/td>
&lt;td>空&lt;code>weak_ptr&lt;/code>可以指向类型为&lt;code>T&lt;/code>的对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>weak_ptr&amp;lt;T&amp;gt; w(sp)&lt;/code>&lt;/td>
&lt;td>与&lt;code>shared_ptr&lt;/code>指向相同对象的&lt;code>weak_ptr&lt;/code>。&lt;code>T&lt;/code>必须能转换为&lt;code>sp&lt;/code>指向的类型。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>w = p&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>可以是&lt;code>shared_ptr&lt;/code>或一个&lt;code>weak_ptr&lt;/code>。赋值后&lt;code>w&lt;/code>和&lt;code>p&lt;/code>共享对象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>w.reset()&lt;/code>&lt;/td>
&lt;td>将&lt;code>w&lt;/code>置为空。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>w.use_count()&lt;/code>&lt;/td>
&lt;td>与&lt;code>w&lt;/code>共享对象的&lt;code>shared_ptr&lt;/code>的数量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>w.expired()&lt;/code>&lt;/td>
&lt;td>若&lt;code>w.use_count()&lt;/code>为 0，返回&lt;code>true&lt;/code>，否则返回&lt;code>false&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>w.lock()&lt;/code>&lt;/td>
&lt;td>如果&lt;code>expired&lt;/code>为&lt;code>true&lt;/code>，则返回一个空&lt;code>shared_ptr&lt;/code>；否则返回一个指向&lt;code>w&lt;/code>的对象的&lt;code>shared_ptr&lt;/code>。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="动态数组">动态数组&lt;/h2>
&lt;h3 id="new-和数组">new 和数组&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;code>new&lt;/code>一个动态数组：&lt;/p>
&lt;ul>
&lt;li>类型名之后加一对方括号，指明分配的对象数目（必须是整型，不必是常量）。&lt;/li>
&lt;li>返回&lt;strong>指向第一个对象的指针&lt;/strong>。&lt;/li>
&lt;li>&lt;code>int *p = new int[size];&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>delete&lt;/code>一个动态数组：&lt;/p>
&lt;ul>
&lt;li>&lt;code>delete [] p;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;code>unique_ptr&lt;/code>和数组：&lt;/p>
&lt;ul>
&lt;li>指向数组的&lt;code>unique_ptr&lt;/code>不支持成员访问运算符（点和箭头）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>unique_ptr&amp;lt;T[]&amp;gt; u&lt;/code>&lt;/td>
&lt;td>&lt;code>u&lt;/code>可以指向一个动态分配的数组，整数元素类型为&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unique_ptr&amp;lt;T[]&amp;gt; u(p)&lt;/code>&lt;/td>
&lt;td>&lt;code>u&lt;/code>指向内置指针&lt;code>p&lt;/code>所指向的动态分配的数组。&lt;code>p&lt;/code>必须能转换为类型&lt;code>T*&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>u[i]&lt;/code>&lt;/td>
&lt;td>返回&lt;code>u&lt;/code>拥有的数组中位置&lt;code>i&lt;/code>处的对象。&lt;code>u&lt;/code>必须指向一个数组。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="allocator-类">allocator 类&lt;/h3>
&lt;ul>
&lt;li>标准库&lt;code>allocator&lt;/code>类定义在头文件&lt;code>memory&lt;/code>中，帮助我们将内存分配和对象构造分离开。&lt;/li>
&lt;li>分配的是原始的、未构造的内存。&lt;/li>
&lt;li>&lt;code>allocator&lt;/code>是一个模板。&lt;/li>
&lt;li>&lt;code>allocator&amp;lt;string&amp;gt; alloc;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>标准库 allocator 类及其算法&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>allocator&amp;lt;T&amp;gt; a&lt;/code>&lt;/td>
&lt;td>定义了一个名为&lt;code>a&lt;/code>的&lt;code>allocator&lt;/code>对象，它可以为类型为&lt;code>T&lt;/code>的对象分配内存&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a.allocate(n)&lt;/code>&lt;/td>
&lt;td>分配一段原始的、未构造的内存，保存&lt;code>n&lt;/code>个类型为&lt;code>T&lt;/code>的对象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a.deallocate(p, n)&lt;/code>&lt;/td>
&lt;td>释放从&lt;code>T*&lt;/code>指针&lt;code>p&lt;/code>中地址开始的内存，这块内存保存了&lt;code>n&lt;/code>个类型为&lt;code>T&lt;/code>的对象；&lt;code>p&lt;/code>必须是一个先前由&lt;code>allocate&lt;/code>返回的指针。且&lt;code>n&lt;/code>必须是&lt;code>p&lt;/code>创建时所要求的大小。在调用&lt;code>deallocate&lt;/code>之前，用户必须对每个在这块内存中创建的对象调用&lt;code>destroy&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a.construct(p, args)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>必须是一个类型是&lt;code>T*&lt;/code>的指针，指向一块原始内存；&lt;code>args&lt;/code>被传递给类型为&lt;code>T&lt;/code>的构造函数，用来在&lt;code>p&lt;/code>指向的内存中构造一个对象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a.destroy(p)&lt;/code>&lt;/td>
&lt;td>&lt;code>p&lt;/code>为&lt;code>T*&lt;/code>类型的指针，此算法对&lt;code>p&lt;/code>指向的对象执行析构函数。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>allocator 伴随算法&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>uninitialized_copy(b, e, b2)&lt;/code>&lt;/td>
&lt;td>从迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>给定的输入范围中拷贝元素到迭代器&lt;code>b2&lt;/code>指定的未构造的原始内存中。&lt;code>b2&lt;/code>指向的内存必须足够大，能够容纳输入序列中元素的拷贝。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uninitialized_copy_n(b, n, b2)&lt;/code>&lt;/td>
&lt;td>从迭代器&lt;code>b&lt;/code>指向的元素开始，拷贝&lt;code>n&lt;/code>个元素到&lt;code>b2&lt;/code>开始的内存中。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uninitialized_fill(b, e, t)&lt;/code>&lt;/td>
&lt;td>在迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>执行的原始内存范围中创建对象，对象的值均为&lt;code>t&lt;/code>的拷贝。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uninitialized_fill_n(b, n, t)&lt;/code>&lt;/td>
&lt;td>从迭代器&lt;code>b&lt;/code>指向的内存地址开始创建&lt;code>n&lt;/code>个对象。&lt;code>b&lt;/code>必须指向足够大的未构造的原始内存，能够容纳给定数量的对象。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>定义在头文件&lt;code>memory&lt;/code>中。&lt;/li>
&lt;li>在给定目的位置创建元素，而不是由系统分配内存给他们。&lt;/li>
&lt;/ul></description></item><item><title>ch13</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch13/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch13/</guid><description>&lt;h1 id="第十三章-拷贝控制">第十三章 拷贝控制&lt;/h1>
&lt;p>&lt;strong>拷贝控制操作&lt;/strong>（copy control）:&lt;/p>
&lt;ul>
&lt;li>拷贝构造函数（copy constructor）&lt;/li>
&lt;li>拷贝赋值运算符（copy-assignment operator）&lt;/li>
&lt;li>移动构造函数（move constructor）&lt;/li>
&lt;li>移动赋值函数（move-assignement operator）&lt;/li>
&lt;li>析构函数（destructor）&lt;/li>
&lt;/ul>
&lt;h2 id="拷贝赋值和销毁">拷贝、赋值和销毁&lt;/h2>
&lt;h3 id="拷贝构造函数">拷贝构造函数&lt;/h3>
&lt;ul>
&lt;li>如果一个构造函数的第一个参数是&lt;strong>自身类类型的引用&lt;/strong>，且任何额外参数都有默认值，则此构造函数是&lt;strong>拷贝构造函数&lt;/strong>。&lt;/li>
&lt;li>&lt;code>class Foo{ public: Foo(const Foo&amp;amp;); }&lt;/code>&lt;/li>
&lt;li>&lt;strong>合成的拷贝构造函数&lt;/strong>（synthesized copy constructor）：会将参数的成员逐个拷贝到正在创建的对象中。&lt;/li>
&lt;li>&lt;strong>拷贝初始化&lt;/strong>：
&lt;ul>
&lt;li>将右侧运算对象拷贝到正在创建的对象中，如果需要，还需进行类型转换。&lt;/li>
&lt;li>通常使用拷贝构造函数完成。&lt;/li>
&lt;li>&lt;code>string book = &amp;quot;9-99&amp;quot;;&lt;/code>&lt;/li>
&lt;li>出现场景：
&lt;ul>
&lt;li>用&lt;code>=&lt;/code>定义变量时。&lt;/li>
&lt;li>将一个对象作为实参传递给一个非引用类型的形参。&lt;/li>
&lt;li>从一个返回类型为非引用类型的函数返回一个对象。&lt;/li>
&lt;li>用花括号列表初始化一个数组中的元素或者一个聚合类中的成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="拷贝赋值运算符">拷贝赋值运算符&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>重载赋值运算符&lt;/strong>：
&lt;ul>
&lt;li>重写一个名为&lt;code>operator=&lt;/code>的函数.&lt;/li>
&lt;li>通常返回一个指向其左侧运算对象的引用。&lt;/li>
&lt;li>&lt;code>Foo&amp;amp; operator=(const Foo&amp;amp;);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>合成拷贝赋值运算符&lt;/strong>：
&lt;ul>
&lt;li>将右侧运算对象的每个非&lt;code>static&lt;/code>成员赋予左侧运算对象的对应成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="析构函数">析构函数&lt;/h3>
&lt;ul>
&lt;li>释放对象所使用的资源，并销毁对象的非&lt;code>static&lt;/code>数据成员。&lt;/li>
&lt;li>名字由波浪号接类名构成。没有返回值，也不接受参数。&lt;/li>
&lt;li>&lt;code>~Foo();&lt;/code>&lt;/li>
&lt;li>调用时机：
&lt;ul>
&lt;li>变量在离开其作用域时。&lt;/li>
&lt;li>当一个对象被销毁时，其成员被销毁。&lt;/li>
&lt;li>容器被销毁时，其元素被销毁。&lt;/li>
&lt;li>动态分配的对象，当对指向它的指针应用&lt;code>delete&lt;/code>运算符时。&lt;/li>
&lt;li>对于临时对象，当创建它的完整表达式结束时。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>合成析构函数&lt;/strong>：
&lt;ul>
&lt;li>空函数体执行完后，&lt;strong>成员会被自动销毁。&lt;/strong>&lt;/li>
&lt;li>注意：析构函数体本身并不直接销毁成员。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="三五法则">三/五法则&lt;/h3>
&lt;ul>
&lt;li>需要析构函数的类也需要拷贝和赋值操作。&lt;/li>
&lt;li>需要拷贝操作的类也需要赋值操作，反之亦然。&lt;/li>
&lt;/ul>
&lt;h3 id="使用default">使用=default&lt;/h3>
&lt;ul>
&lt;li>可以通过将拷贝控制成员定义为&lt;code>=default&lt;/code>来显式地要求编译器生成合成的版本。&lt;/li>
&lt;li>合成的函数将隐式地声明为内联的。&lt;/li>
&lt;/ul>
&lt;h3 id="阻止拷贝">阻止拷贝&lt;/h3>
&lt;ul>
&lt;li>大多数类应该定义默认构造函数、拷贝构造函数和拷贝赋值运算符，无论是隐式地还是显式地。&lt;/li>
&lt;li>定义删除的函数：&lt;code>=delete&lt;/code>。&lt;/li>
&lt;li>虽然声明了它们，但是不能以任何方式使用它们。&lt;/li>
&lt;li>析构函数不能是删除的成员。&lt;/li>
&lt;li>如果一个类有数据成员不能默认构造、拷贝、复制或者销毁，则对应的成员函数将被定义为删除的。&lt;/li>
&lt;li>老版本使用&lt;code>private&lt;/code>声明来阻止拷贝。&lt;/li>
&lt;/ul>
&lt;h2 id="拷贝控制和资源管理">拷贝控制和资源管理&lt;/h2>
&lt;ul>
&lt;li>类的行为可以像一个值，也可以像一个指针。
&lt;ul>
&lt;li>行为像值：对象有自己的状态，副本和原对象是完全独立的。&lt;/li>
&lt;li>行为像指针：共享状态，拷贝一个这种类的对象时，副本和原对象使用相同的底层数据。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="交换操作">交换操作&lt;/h2>
&lt;ul>
&lt;li>管理资源的类通常还定义一个名为&lt;code>swap&lt;/code>的函数。&lt;/li>
&lt;li>经常用于重排元素顺序的算法。&lt;/li>
&lt;li>用&lt;code>swap&lt;/code>而不是&lt;code>std::swap&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="对象移动">对象移动&lt;/h2>
&lt;ul>
&lt;li>很多拷贝操作后，原对象会被销毁，因此引入移动操作可以大幅度提升性能。&lt;/li>
&lt;li>在新标准中，我们可以用容器保存不可拷贝的类型，只要它们可以被移动即可。&lt;/li>
&lt;li>标准库容器、&lt;code>string&lt;/code>和&lt;code>shared_ptr&lt;/code>类既可以支持移动也支持拷贝。&lt;code>IO&lt;/code>类和&lt;code>unique_ptr&lt;/code>类可以移动但不能拷贝。&lt;/li>
&lt;/ul>
&lt;h3 id="右值引用">右值引用&lt;/h3>
&lt;ul>
&lt;li>新标准引入右值引用以支持移动操作。&lt;/li>
&lt;li>通过&lt;code>&amp;amp;&amp;amp;&lt;/code>获得右值引用。&lt;/li>
&lt;li>只能绑定到一个将要销毁的对象。&lt;/li>
&lt;li>常规引用可以称之为左值引用。&lt;/li>
&lt;li>左值持久，右值短暂。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>move 函数&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>int &amp;amp;&amp;amp;rr2 = std::move(rr1);&lt;/code>&lt;/li>
&lt;li>&lt;code>move&lt;/code>告诉编译器，我们有一个左值，但我希望像右值一样处理它。&lt;/li>
&lt;li>调用&lt;code>move&lt;/code>意味着：除了对&lt;code>rr1&lt;/code>赋值或者销毁它外，我们将不再使用它。&lt;/li>
&lt;/ul>
&lt;h3 id="移动构造函数和移动赋值运算符">移动构造函数和移动赋值运算符&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>移动构造函数&lt;/strong>：
&lt;ul>
&lt;li>第一个参数是该类类型的一个引用，关键是，这个引用参数是一个&lt;strong>右值引用&lt;/strong>。&lt;/li>
&lt;li>&lt;code>StrVec::StrVec(StrVec &amp;amp;&amp;amp;s) noexcept{}&lt;/code>&lt;/li>
&lt;li>不分配任何新内存，只是接管给定的内存。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>移动赋值运算符&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>StrVec&amp;amp; StrVec::operator=(StrVec &amp;amp;&amp;amp; rhs) noexcept{}&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>移动右值，拷贝左值。&lt;/li>
&lt;li>如果没有移动构造函数，右值也被拷贝。&lt;/li>
&lt;li>更新三/五法则：如果一个类定义了任何一个拷贝操作，它就应该定义所有五个操作。&lt;/li>
&lt;li>移动迭代器：
&lt;ul>
&lt;li>&lt;code>make_move_iterator&lt;/code>函数讲一个普通迭代器转换为一个移动迭代器。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>建议：小心地使用移动操作，以获得性能提升。&lt;/li>
&lt;/ul>
&lt;h3 id="右值引用和成员函数">右值引用和成员函数&lt;/h3>
&lt;ul>
&lt;li>区分移动和拷贝的重载函数通常有一个版本接受一个&lt;code>const T&amp;amp;&lt;/code>，而另一个版本接受一个&lt;code>T&amp;amp;&amp;amp;&lt;/code>。&lt;/li>
&lt;li>引用限定符：
&lt;ul>
&lt;li>在参数列表后面防止一个&lt;code>&amp;amp;&lt;/code>，限定只能向可修改的左值赋值而不能向右值赋值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>ch14</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch14/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch14/</guid><description>&lt;h1 id="第十四章-重载运算与类型转换">第十四章 重载运算与类型转换&lt;/h1>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;ul>
&lt;li>重载运算符是具有特殊名字的函数：由关键字&lt;code>operator&lt;/code>和其后要定义的运算符号共同组成。&lt;/li>
&lt;li>当一个重载的运算符是成员函数时，&lt;code>this&lt;/code>绑定到左侧运算对象。动态运算符符函数的参数数量比运算对象的数量&lt;strong>少一个&lt;/strong>。&lt;/li>
&lt;li>只能重载大多数的运算符，而不能发明新的运算符号。&lt;/li>
&lt;li>重载运算符的优先级和结合律跟对应的内置运算符保持一致。&lt;/li>
&lt;li>调用方式：
&lt;ul>
&lt;li>&lt;code>data1 + data2;&lt;/code>&lt;/li>
&lt;li>&lt;code>operator+(data1, data2);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>是否是成员函数：
&lt;ul>
&lt;li>赋值（&lt;code>=&lt;/code>）、下标（&lt;code>[]&lt;/code>）、调用（&lt;code>()&lt;/code>）和成员访问箭头（&lt;code>-&amp;gt;&lt;/code>）运算符必须是成员。&lt;/li>
&lt;li>复合赋值运算符一般来说是成员。&lt;/li>
&lt;li>改变对象状态的运算符或者和给定类型密切相关的运算符通常是成员，如递增、解引用。&lt;/li>
&lt;li>具有对称性的运算符如算术、相等性、关系和位运算符等，通常是非成员函数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>运算符&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>可以被重载&lt;/th>
&lt;th>不可以被重载&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>+&lt;/code>, &lt;code>-&lt;/code>, &lt;code>*&lt;/code>, &lt;code>/&lt;/code>, &lt;code>%&lt;/code>, &lt;code>^&lt;/code>&lt;/td>
&lt;td>&lt;code>::&lt;/code>, &lt;code>.*&lt;/code>, &lt;code>.&lt;/code>, &lt;code>? :&lt;/code>,&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;&lt;/code>, `&lt;/td>
&lt;td>&lt;code>, &lt;/code>~&lt;code>, &lt;/code>!&lt;code>, &lt;/code>,&lt;code>, &lt;/code>=`&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&lt;/code>, &lt;code>&amp;gt;&lt;/code>, &lt;code>&amp;lt;=&lt;/code>, &lt;code>&amp;gt;=&lt;/code>, &lt;code>++&lt;/code>, &lt;code>--&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;lt;&amp;lt;&lt;/code>, &lt;code>&amp;gt;&amp;gt;&lt;/code>, &lt;code>==&lt;/code>, &lt;code>!=&lt;/code>, &lt;code>&amp;amp;&amp;amp;&lt;/code>, `&lt;/td>
&lt;td>&lt;/td>
&lt;td>`&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>+=&lt;/code>, &lt;code>-=&lt;/code>, &lt;code>/=&lt;/code>, &lt;code>%=&lt;/code>, &lt;code>^=&lt;/code>, &lt;code>&amp;amp;=&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>|=, &lt;code>*=&lt;/code>, &lt;code>&amp;lt;&amp;lt;=&lt;/code>, &lt;code>&amp;gt;&amp;gt;=&lt;/code>, &lt;code>[]&lt;/code>, &lt;code>()&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>-&amp;gt;&lt;/code>, &lt;code>-&amp;gt;*&lt;/code>, &lt;code>new&lt;/code>, &lt;code>new[]&lt;/code>, &lt;code>delete&lt;/code>, &lt;code>delete[]&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="输入和输出运算符">输入和输出运算符&lt;/h2>
&lt;h3 id="重载输出运算符">重载输出运算符&amp;laquo;&lt;/h3>
&lt;ul>
&lt;li>第一个形参通常是一个非常量的&lt;code>ostream&lt;/code>对象的引用。非常量是因为向流中写入会改变其状态；而引用是因为我们无法复制一个&lt;code>ostream&lt;/code>对象。&lt;/li>
&lt;li>输入输出运算符必须是非成员函数。&lt;/li>
&lt;/ul>
&lt;h3 id="重载输入运算符">重载输入运算符&amp;raquo;&lt;/h3>
&lt;ul>
&lt;li>第一个形参通常是运算符将要读取的流的引用，第二个形参是将要读取到的（非常量）对象的引用。&lt;/li>
&lt;li>输入运算符必须处理输入可能失败的情况，而输出运算符不需要。&lt;/li>
&lt;/ul>
&lt;h2 id="算数和关系运算符-">算数和关系运算符（+、-、*、/）&lt;/h2>
&lt;ul>
&lt;li>如果类同时定义了算数运算符和相关的复合赋值运算符，则通常情况下应该使用复合赋值来实现算数运算符。&lt;/li>
&lt;/ul>
&lt;h3 id="相等运算符">相等运算符==&lt;/h3>
&lt;ul>
&lt;li>如果定义了&lt;code>operator==&lt;/code>，则这个类也应该定义&lt;code>operator!=&lt;/code>。&lt;/li>
&lt;li>相等运算符和不等运算符的一个应该把工作委托给另一个。&lt;/li>
&lt;li>相等运算符应该具有传递性。&lt;/li>
&lt;li>如果某个类在逻辑上有相等性的含义，则该类应该定义&lt;code>operator==&lt;/code>，这样做可以使用户更容易使用标准库算法来处理这个类。&lt;/li>
&lt;/ul>
&lt;h3 id="关系运算符">关系运算符&lt;/h3>
&lt;ul>
&lt;li>如果存在唯一一种逻辑可靠的&lt;code>&amp;lt;&lt;/code>定义，则应该考虑为这个类定义&lt;code>&amp;lt;&lt;/code>运算符。如果同时还包含&lt;code>==&lt;/code>，则当且晋档&lt;code>&amp;lt;&lt;/code>的定义和&lt;code>++&lt;/code>产生的结果一直时才定义&lt;code>&amp;lt;&lt;/code>运算符。&lt;/li>
&lt;/ul>
&lt;h2 id="赋值运算符">赋值运算符=&lt;/h2>
&lt;ul>
&lt;li>我们可以重载赋值运算符。不论形参的类型是什么，赋值运算符都必须定义为成员函数。&lt;/li>
&lt;li>赋值运算符必须定义成类的成员，复合赋值运算符通常情况下也应该这么做。这两类运算符都应该返回左侧运算对象的引用。&lt;/li>
&lt;/ul>
&lt;h2 id="下标运算符">下标运算符[]&lt;/h2>
&lt;ul>
&lt;li>下标运算符必须是成员函数。&lt;/li>
&lt;li>一般会定义两个版本：
&lt;ul>
&lt;li>1.返回普通引用。&lt;/li>
&lt;li>2.类的常量成员，并返回常量引用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="递增和递减运算符--">递增和递减运算符（++、&amp;ndash;）&lt;/h2>
&lt;ul>
&lt;li>定义递增和递减运算符的类应该同时定义前置版本和后置版本。&lt;/li>
&lt;li>通常应该被定义成类的成员。&lt;/li>
&lt;li>为了和内置版本保持一致，前置运算符应该返回递增或递减后对象的引用。&lt;/li>
&lt;li>同样为了和内置版本保持一致，后置运算符应该返回递增或递减前对象的值，而不是引用。&lt;/li>
&lt;li>后置版本接受一个额外的，不被使用的&lt;code>int&lt;/code>类型的形参。因为不会用到，所以无需命名。&lt;/li>
&lt;/ul>
&lt;h2 id="成员访问运算符-">成员访问运算符（*、-&amp;gt;）&lt;/h2>
&lt;ul>
&lt;li>箭头运算符必须是类的成员。解引用运算符通常也是类的成员，尽管并非必须如此。&lt;/li>
&lt;li>重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的某个类的对象。&lt;/li>
&lt;li>解引用和乘法的区别是一个是一元运算符，一个是二元运算符。&lt;/li>
&lt;/ul>
&lt;h2 id="函数调用运算符">函数调用运算符&lt;/h2>
&lt;ul>
&lt;li>可以像使用函数一样，调用该类的对象。因为这样对待类同时也能存储状态，所以与普通函数相比更加灵活。&lt;/li>
&lt;li>函数调用运算符必须是成员函数。&lt;/li>
&lt;li>一个类可以定义多个不同版本的调用运算符，相互之间应该在参数数量或类型上有所区别。&lt;/li>
&lt;li>如果累定义了调用运算符，则该类的对象称作&lt;strong>函数对象&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="lambda是函数对象">&lt;code>lambda&lt;/code>是函数对象&lt;/h3>
&lt;ul>
&lt;li>&lt;code>lambda&lt;/code>捕获变量：&lt;code>lambda&lt;/code>产生的类必须为每个值捕获的变量建立对应的数据成员，同时创建构造函数。&lt;/li>
&lt;/ul>
&lt;h3 id="标准库定义的函数对象">标准库定义的函数对象&lt;/h3>
&lt;p>&lt;strong>标准库函数对象&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>算术&lt;/th>
&lt;th>关系&lt;/th>
&lt;th>逻辑&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>plus&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>equal_to&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>logical_and&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>minus&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>not_equal_to&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>logical_or&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>multiplies&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>greater&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>logical_not&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>divides&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>greater_equal&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>modulus&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>less&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>negate&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;code>less_equal&amp;lt;Type&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>可以在算法中使用标准库函数对象。&lt;/li>
&lt;/ul>
&lt;h3 id="可调用对象与-function">可调用对象与 function&lt;/h3>
&lt;p>&lt;strong>标准库 function 类型&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>function&amp;lt;T&amp;gt; f;&lt;/code>&lt;/td>
&lt;td>&lt;code>f&lt;/code>是一个用来存储可调用对象的空&lt;code>function&lt;/code>，这些可调用对象的调用形式应该与类型&lt;code>T&lt;/code>相同。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>function&amp;lt;T&amp;gt; f(nullptr);&lt;/code>&lt;/td>
&lt;td>显式地构造一个空&lt;code>function&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>function&amp;lt;T&amp;gt; f(obj)&lt;/code>&lt;/td>
&lt;td>在&lt;code>f&lt;/code>中存储可调用对象&lt;code>obj&lt;/code>的副本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>f&lt;/code>&lt;/td>
&lt;td>将&lt;code>f&lt;/code>作为条件：当&lt;code>f&lt;/code>含有一个可调用对象时为真；否则为假。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>定义为&lt;code>function&amp;lt;T&amp;gt;&lt;/code>的成员的类型&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>result_type&lt;/code>&lt;/td>
&lt;td>该&lt;code>function&lt;/code>类型的可调用对象返回的类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>argument_type&lt;/code>&lt;/td>
&lt;td>当&lt;code>T&lt;/code>有一个或两个实参时定义的类型。如果&lt;code>T&lt;/code>只有一个实参，则&lt;code>argument_type&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>first_argument_type&lt;/code>&lt;/td>
&lt;td>第一个实参的类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>second_argument_type&lt;/code>&lt;/td>
&lt;td>第二个实参的类型&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>例如：声明一个&lt;code>function&lt;/code>类型，它可以表示接受两个&lt;code>int&lt;/code>，返回一个&lt;code>int&lt;/code>的可调用对象。&lt;code>function&amp;lt;int(int, int)&amp;gt;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="重载类型转换运算符">重载、类型转换、运算符&lt;/h2>
&lt;h3 id="类型转换运算符">类型转换运算符&lt;/h3>
&lt;ul>
&lt;li>类型转换运算符是类的一种特殊成员函数，它负责将一个类类型的值转换成其他类型。类型转换函数的一般形式如下：&lt;code>operator type() const;&lt;/code>&lt;/li>
&lt;li>一个类型转换函数必须是类的成员函数；它不能声明返回类型，形参列表也必须为空。类型转换函数通常应该是&lt;code>const&lt;/code>。&lt;/li>
&lt;li>避免过度使用类型转换函数。&lt;/li>
&lt;li>C++11 引入了显式的类型转换运算符。&lt;/li>
&lt;li>向&lt;code>bool&lt;/code>的类型转换通常用在条件部分，因此&lt;code>operator bool&lt;/code>一般定义成&lt;code>explicit&lt;/code>的。&lt;/li>
&lt;/ul>
&lt;h3 id="避免有二义性的类型转换">避免有二义性的类型转换&lt;/h3>
&lt;ul>
&lt;li>通常，不要为类第几个亿相同的类型转换，也不要在类中定义两个及以上转换源或转换目标是算术类型的转换。&lt;/li>
&lt;li>在调用重载函数时，如果需要额外的标准类型转换，则该转换的级别只有当所有可行函数都请求同一个用户定义的类型转换时才有用。如果所需的用户定义的类型转换不止一个，则该调用具有二义性。&lt;/li>
&lt;/ul>
&lt;h3 id="函数匹配与重载运算符">函数匹配与重载运算符&lt;/h3>
&lt;ul>
&lt;li>如果&lt;code>a&lt;/code>是一种类型，则表达式&lt;code>a sym b&lt;/code>可能是：
&lt;ul>
&lt;li>&lt;code>a.operatorsym(b);&lt;/code>&lt;/li>
&lt;li>&lt;code>operatorsym(a,b);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果我们队同一个类既提供了转换目标是算术类型的类型转换，也提供了重载的运算符，则将会遇到重载运算符与内置运算符的二义性问题。&lt;/li>
&lt;/ul></description></item><item><title>ch15</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch15/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch15/</guid><description>&lt;h1 id="第十五章-面向对象程序设计">第十五章 面向对象程序设计&lt;/h1>
&lt;h2 id="oop概述">OOP：概述&lt;/h2>
&lt;ul>
&lt;li>面向对象程序设计（object-oriented programming）的核心思想是数据抽象、继承和动态绑定。&lt;/li>
&lt;li>&lt;strong>继承&lt;/strong>（inheritance）：
&lt;ul>
&lt;li>通过继承联系在一起的类构成一种层次关系。&lt;/li>
&lt;li>通常在层次关系的根部有一个&lt;strong>基类&lt;/strong>（base class）。&lt;/li>
&lt;li>其他类直接或者简介从基类继承而来，这些继承得到的类成为&lt;strong>派生类&lt;/strong>（derived class）。&lt;/li>
&lt;li>基类负责定义在层次关系中所有类共同拥有的成员，而每个派生类定义各自特有的成员。&lt;/li>
&lt;li>对于某些函数，基类希望它的派生类个自定义适合自己的版本，此时基类就将这些函数声明成&lt;strong>虚函数&lt;/strong>（virtual function）。&lt;/li>
&lt;li>派生类必须通过使用&lt;strong>类派生列表&lt;/strong>（class derivation list）明确指出它是从哪个基类继承而来。形式：一个冒号，后面紧跟以逗号分隔的基类列表，每个基类前都可以有访问说明符。&lt;code>class Bulk_quote : public Quote{};&lt;/code>&lt;/li>
&lt;li>派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上&lt;code>virtual&lt;/code>关键字，也可以不加。C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个&lt;code>override&lt;/code>关键字。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;strong>动态绑定&lt;/strong>（dynamic binding，又称运行时绑定）：
&lt;ul>
&lt;li>使用同一段代码可以分别处理基类和派生类的对象。&lt;/li>
&lt;li>函数的运行版本由实参决定，即在运行时选择函数的版本。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="定义基类和派生类">定义基类和派生类&lt;/h2>
&lt;h3 id="定义基类">定义基类&lt;/h3>
&lt;ul>
&lt;li>基类通常都应该定义一个虚析构函数，即使该函数不执行任何实际操作也是如此。&lt;/li>
&lt;li>基类通过在其成员函数的声明语句前加上关键字&lt;code>virtual&lt;/code>使得该函数执行&lt;strong>动态绑定&lt;/strong>。&lt;/li>
&lt;li>如果成员函数没有被声明为虚函数，则解析过程发生在编译时而非运行时。&lt;/li>
&lt;li>访问控制：
&lt;ul>
&lt;li>&lt;code>protected&lt;/code>： 基类和和其派生类还有友元可以访问。&lt;/li>
&lt;li>&lt;code>private&lt;/code>： 只有基类本身和友元可以访问。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="定义派生类">定义派生类&lt;/h3>
&lt;ul>
&lt;li>派生类必须通过类派生列表（class derivation list）明确指出它是从哪个基类继承而来。形式：冒号，后面紧跟以逗号分隔的基类列表，每个基类前面可以有一下三种访问说明符的一个：&lt;code>public&lt;/code>、&lt;code>protected&lt;/code>、&lt;code>private&lt;/code>。&lt;/li>
&lt;li>C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个&lt;code>override&lt;/code>关键字。&lt;/li>
&lt;li>派生类构造函数：派生类必须使用基类的构造函数去初始化它的基类部分。&lt;/li>
&lt;li>静态成员：如果基类定义了一个基类成员，则在整个继承体系中只存在该成员的唯一定义。&lt;/li>
&lt;li>派生类的声明：声明中不包含它的派生列表。&lt;/li>
&lt;li>C++11 新标准提供了一种防止继承的方法，在类名后面跟一个关键字&lt;code>final&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="类型转换与继承">类型转换与继承&lt;/h3>
&lt;ul>
&lt;li>理解基类和派生类之间的类型抓换是理解 C++语言面向对象编程的关键所在。&lt;/li>
&lt;li>可以将基类的指针或引用绑定到派生类对象上。&lt;/li>
&lt;li>不存在从基类向派生类的隐式类型转换。&lt;/li>
&lt;li>派生类向基类的自动类型转换只对指针或引用类型有效，对象之间不存在类型转换。&lt;/li>
&lt;/ul>
&lt;h2 id="虚函数">虚函数&lt;/h2>
&lt;ul>
&lt;li>使用虚函数可以执行动态绑定。&lt;/li>
&lt;li>OOP 的核心思想是多态性（polymorphism）。&lt;/li>
&lt;li>当且仅当对通过指针或引用调用虚函数时，才会在运行时解析该调用，也只有在这种情况下对象的动态类型才有可能与静态类型不同。&lt;/li>
&lt;li>派生类必须在其内部对所有重新定义的虚函数进行声明。可以在函数之前加上&lt;code>virtual&lt;/code>关键字，也可以不加。&lt;/li>
&lt;li>C++11 新标准允许派生类显式地注明它将使用哪个成员函数改写基类的虚函数，即在函数的形参列表之后加一个&lt;code>override&lt;/code>关键字。&lt;/li>
&lt;li>如果我们想覆盖某个虚函数，但不小心把形参列表弄错了，这个时候就不会覆盖基类中的虚函数。加上&lt;code>override&lt;/code>可以明确程序员的意图，让编译器帮忙确认参数列表是否出错。&lt;/li>
&lt;li>如果虚函数使用默认实参，则基类和派生类中定义的默认实参最好一致。&lt;/li>
&lt;li>通常，只有成员函数（或友元）中的代码才需要使用&lt;strong>作用域运算符&lt;/strong>（&lt;code>::&lt;/code>）来回避虚函数的机制。&lt;/li>
&lt;/ul>
&lt;h2 id="抽象基类">抽象基类&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>纯虚函数&lt;/strong>（pure virtual）：清晰地告诉用户当前的函数是没有实际意义的。纯虚函数无需定义，只用在函数体的位置前书写&lt;code>=0&lt;/code>就可以将一个虚函数说明为纯虚函数。&lt;/li>
&lt;li>含有纯虚函数的类是&lt;strong>抽象基类&lt;/strong>（abstract base class）。不能创建抽象基类的对象。&lt;/li>
&lt;/ul>
&lt;h2 id="访问控制与继承">访问控制与继承&lt;/h2>
&lt;ul>
&lt;li>受保护的成员：
&lt;ul>
&lt;li>&lt;code>protected&lt;/code>说明符可以看做是&lt;code>public&lt;/code>和&lt;code>private&lt;/code>中的产物。&lt;/li>
&lt;li>类似于私有成员，受保护的成员对类的用户来说是不可访问的。&lt;/li>
&lt;li>类似于公有成员，受保护的成员对于派生类的成员和友元来说是可访问的。&lt;/li>
&lt;li>派生类的成员或友元只能通过派生类对象来访问基类的受保护成员。派生类对于一个基类对象中的受保护成员没有任何访问特权。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>派生访问说明符：
&lt;ul>
&lt;li>对于派生类的成员（及友元）能否访问其直接积累的成员没什么影响。&lt;/li>
&lt;li>派生访问说明符的目的是：控制派生类用户对于基类成员的访问权限。比如&lt;code>struct Priv_Drev: private Base{}&lt;/code>意味着在派生类&lt;code>Priv_Drev&lt;/code>中，从&lt;code>Base&lt;/code>继承而来的部分都是&lt;code>private&lt;/code>的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>友元关系不能继承。&lt;/li>
&lt;li>改变个别成员的可访问性：使用&lt;code>using&lt;/code>。&lt;/li>
&lt;li>默认情况下，使用&lt;code>class&lt;/code>关键字定义的派生类是私有继承的；使用&lt;code>struct&lt;/code>关键字定义的派生类是公有继承的。&lt;/li>
&lt;/ul>
&lt;h2 id="继承中的类作用域">继承中的类作用域&lt;/h2>
&lt;ul>
&lt;li>每个类定义自己的作用域，在这个作用域内我们定义类的成员。当存在继承关系时，派生类的作用域嵌套在其基类的作用域之内。&lt;/li>
&lt;li>派生类的成员将隐藏同名的基类成员。&lt;/li>
&lt;li>除了覆盖继承而来的虚函数之外，派生类最好不要重用其他定义在基类中的名字。&lt;/li>
&lt;/ul>
&lt;h2 id="构造函数与拷贝控制">构造函数与拷贝控制&lt;/h2>
&lt;h3 id="虚析构函数">虚析构函数&lt;/h3>
&lt;ul>
&lt;li>基类通常应该定义一个虚析构函数，这样我们就能动态分配继承体系中的对象了。&lt;/li>
&lt;li>如果基类的析构函数不是虚函数，则&lt;code>delete&lt;/code>一个指向派生类对象的基类指针将产生未定义的行为。&lt;/li>
&lt;li>虚析构函数将阻止合成移动操作。&lt;/li>
&lt;/ul>
&lt;h3 id="合成拷贝控制与继承">合成拷贝控制与继承&lt;/h3>
&lt;ul>
&lt;li>基类或派生类的合成拷贝控制成员的行为和其他合成的构造函数、赋值运算符或析构函数类似：他们对类本身的成员依次进行初始化、赋值或销毁的操作。&lt;/li>
&lt;/ul>
&lt;h3 id="派生类的拷贝控制成员">派生类的拷贝控制成员&lt;/h3>
&lt;ul>
&lt;li>当派生类定义了拷贝或移动操作时，该操作负责拷贝或移动包括基类部分成员在内的整个对象。&lt;/li>
&lt;li>派生类析构函数：派生类析构函数先执行，然后执行基类的析构函数。&lt;/li>
&lt;/ul>
&lt;h3 id="继承的构造函数">继承的构造函数&lt;/h3>
&lt;ul>
&lt;li>C++11 新标准中，派生类可以重用其直接基类定义的构造函数。&lt;/li>
&lt;li>如&lt;code>using Disc_quote::Disc_quote;&lt;/code>，注明了要继承&lt;code>Disc_quote&lt;/code>的构造函数。&lt;/li>
&lt;/ul>
&lt;h2 id="容器与继承">容器与继承&lt;/h2>
&lt;ul>
&lt;li>当我们使用容器存放继承体系中的对象时，通常必须采用间接存储的方式。&lt;/li>
&lt;li>派生类对象直接赋值给积累对象，其中的派生类部分会被切掉。&lt;/li>
&lt;li>在容器中放置（智能）指针而非对象。&lt;/li>
&lt;li>对于 C++面向对象的编程来说，一个悖论是我们无法直接使用对象进行面向对象编程。相反，我们必须使用指针和引用。因为指针会增加程序的复杂性，所以经常定义一些辅助的类来处理这些复杂的情况。&lt;/li>
&lt;/ul>
&lt;h2 id="文本查询程序再探">文本查询程序再探&lt;/h2>
&lt;ul>
&lt;li>使系统支持：单词查询、逻辑非查询、逻辑或查询、逻辑与查询。&lt;/li>
&lt;/ul>
&lt;h3 id="面向对象的解决方案">面向对象的解决方案&lt;/h3>
&lt;ul>
&lt;li>将几种不同的查询建模成相互独立的类，这些类共享一个公共基类：
&lt;ul>
&lt;li>&lt;code>WordQuery&lt;/code>&lt;/li>
&lt;li>&lt;code>NotQuery&lt;/code>&lt;/li>
&lt;li>&lt;code>OrQuery&lt;/code>&lt;/li>
&lt;li>&lt;code>AndQuery&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>这些类包含两个操作：
&lt;ul>
&lt;li>&lt;code>eval&lt;/code>：接受一个&lt;code>TextQuery&lt;/code>对象并返回一个&lt;code>QueryResult&lt;/code>。&lt;/li>
&lt;li>&lt;code>rep&lt;/code>：返回基础查询的&lt;code>string&lt;/code>表示形式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>继承和组合：
&lt;ul>
&lt;li>当我们令一个类公有地继承另一个类时，派生类应当反映与基类的“是一种（Is A）”的关系。&lt;/li>
&lt;li>类型之间另一种常见的关系是“有一个（Has A）”的关系。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>对于面向对象编程的新手来说，想要理解一个程序，最困难的部分往往是理解程序的设计思路。一旦掌握了设计思路，接下来的实现也就水到渠成了。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Query 程序设计&lt;/strong>:&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>Query&lt;/code>程序接口类和操作&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>TextQuery&lt;/code>&lt;/td>
&lt;td>该类读入给定的文件并构建一个查找图。包含一个&lt;code>query&lt;/code>操作，它接受一个&lt;code>string&lt;/code>实参，返回一个&lt;code>QueryResult&lt;/code>对象；该&lt;code>QueryResult&lt;/code>对象表示&lt;code>string&lt;/code>出现的行。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>QueryResult&lt;/code>&lt;/td>
&lt;td>该类保存一个&lt;code>query&lt;/code>操作的结果。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Query&lt;/code>&lt;/td>
&lt;td>是一个接口类，指向&lt;code>Query_base&lt;/code>派生类的对象。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Query q(s)&lt;/code>&lt;/td>
&lt;td>将&lt;code>Query&lt;/code>对象&lt;code>q&lt;/code>绑定到一个存放着&lt;code>string s&lt;/code>的新&lt;code>WordQuery&lt;/code>对象上。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>q1 &amp;amp; q2&lt;/code>&lt;/td>
&lt;td>返回一个&lt;code>Query&lt;/code>对象，该&lt;code>Query&lt;/code>绑定到一个存放&lt;code>q1&lt;/code>和&lt;code>q2&lt;/code>的新&lt;code>AndQuery&lt;/code>对象上。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`q1&lt;/td>
&lt;td>q2`&lt;/td>
&lt;td>返回一个&lt;code>Query&lt;/code>对象，该&lt;code>Query&lt;/code>绑定到一个存放&lt;code>q1&lt;/code>和&lt;code>q2&lt;/code>的新&lt;code>OrQuery&lt;/code>对象上。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>~q&lt;/code>&lt;/td>
&lt;td>返回一个&lt;code>Query&lt;/code>对象，该&lt;code>Query&lt;/code>绑定到一个存放&lt;code>q&lt;/code>的新&lt;code>NotQuery&lt;/code>对象上。&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Query&lt;/code>程序实现类&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Query_base&lt;/code>&lt;/td>
&lt;td>查询类的抽象基类&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>WordQuery&lt;/code>&lt;/td>
&lt;td>&lt;code>Query_base&lt;/code>的派生类，用于查找一个给定的单词&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>NotQuery&lt;/code>&lt;/td>
&lt;td>&lt;code>Query_base&lt;/code>的派生类，用于查找一个给定的单词&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>BinaryQuery&lt;/code>&lt;/td>
&lt;td>&lt;code>Query_base&lt;/code>的派生类，查询结果是&lt;code>Query&lt;/code>运算对象没有出现的行的集合&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>OrQuery&lt;/code>&lt;/td>
&lt;td>&lt;code>Query_base&lt;/code>的派生类，返回它的两个运算对象分别出现的行的并集&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>AndQuery&lt;/code>&lt;/td>
&lt;td>&lt;code>Query_base&lt;/code>的派生类，返回它的两个运算对象分别出现的行的交集&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>ch16</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch16/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch16/</guid><description>&lt;h1 id="第十六章-模板和泛型编程">第十六章 模板和泛型编程&lt;/h1>
&lt;ul>
&lt;li>面向对象编程和泛型编程都能处理在编写程序时不知道类型的情况。
&lt;ul>
&lt;li>OOP 能处理类型在程序运行之前都未知的情况；&lt;/li>
&lt;li>泛型编程中，在编译时就可以获知类型。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="定义模板">定义模板&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>模板&lt;/strong>：模板是泛型编程的基础。一个模板就是一个创建类或函数的蓝图或者说公式。&lt;/li>
&lt;/ul>
&lt;h3 id="函数模板">函数模板&lt;/h3>
&lt;ul>
&lt;li>&lt;code>template &amp;lt;typename T&amp;gt; int compare(const T &amp;amp;v1, const T &amp;amp;v2){}&lt;/code>&lt;/li>
&lt;li>模板定义以关键字 &lt;code>template&lt;/code>开始，后接&lt;strong>模板形参表&lt;/strong>，模板形参表是用&lt;strong>尖括号&lt;/strong>&lt;code>&amp;lt;&amp;gt;&lt;/code>括住的一个或多个&lt;strong>模板形参&lt;/strong>的列表，用逗号分隔，&lt;strong>不能为空&lt;/strong>。&lt;/li>
&lt;li>使用模板时，我们显式或隐式地指定模板实参，将其绑定到模板参数上。&lt;/li>
&lt;li>模板类型参数：类型参数前必须使用关键字&lt;code>class&lt;/code>或者&lt;code>typename&lt;/code>，这两个关键字含义相同，可以互换使用。旧的程序只能使用&lt;code>class&lt;/code>。&lt;/li>
&lt;li>非类型模板参数：表示一个值而非一个类型。实参必须是常量表达式。&lt;code>template &amp;lt;class T, size_t N&amp;gt; void array_init(T (&amp;amp;parm)[N]){}&lt;/code>&lt;/li>
&lt;li>内联函数模板： &lt;code>template &amp;lt;typename T&amp;gt; inline T min(const T&amp;amp;, const T&amp;amp;);&lt;/code>&lt;/li>
&lt;li>模板程序应该尽量减少对实参类型的要求。&lt;/li>
&lt;li>函数模板和类模板成员函数的定义通常放在头文件中。&lt;/li>
&lt;/ul>
&lt;h3 id="类模板">类模板&lt;/h3>
&lt;ul>
&lt;li>类模板用于生成类的蓝图。&lt;/li>
&lt;li>不同于函数模板，编译器不能推断模板参数类型。&lt;/li>
&lt;li>&lt;strong>定义类模板&lt;/strong>：
&lt;ul>
&lt;li>&lt;code>template &amp;lt;class Type&amp;gt; class Queue {};&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>实例化类模板：提供显式模板实参列表，来实例化出特定的类。&lt;/li>
&lt;li>一个类模板中所有的实例都形成一个独立的类。&lt;/li>
&lt;li>&lt;strong>模板形参作用域&lt;/strong>：模板形参的名字可以在声明为模板形参之后直到模板声明或定义的末尾处使用。&lt;/li>
&lt;li>类模板的成员函数：
&lt;ul>
&lt;li>&lt;code>template &amp;lt;typename T&amp;gt; ret-type Blob::member-name(parm-list)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>默认情况下，对于一个实例化了的类模板，其成员只有在使用时才被实例化。&lt;/li>
&lt;li>新标准允许模板将自己的类型参数成为友元。&lt;code>template &amp;lt;typename T&amp;gt; class Bar{friend T;};&lt;/code>。&lt;/li>
&lt;li>模板类型别名：因为模板不是一个类型，因此无法定义一个&lt;code>typedef&lt;/code>引用一个模板，但是新标准允许我们为类模板定义一个类型别名：&lt;code>template&amp;lt;typename T&amp;gt; using twin = pair&amp;lt;T, T&amp;gt;;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="模板参数">模板参数&lt;/h3>
&lt;ul>
&lt;li>模板参数与作用域：一个模板参数名的可用范围是在声明之后，至模板声明或定义结束前。&lt;/li>
&lt;li>一个特定文件所需要的所有模板的声明通常一起放置在文件开始位置。&lt;/li>
&lt;li>当我们希望通知编译器一个名字表示类型时，必须使用关键字&lt;code>typename&lt;/code>，而不能使用&lt;code>class&lt;/code>。&lt;/li>
&lt;li>默认模板实参：&lt;code>template &amp;lt;class T = int&amp;gt; class Numbers{}&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="成员模板">成员模板&lt;/h3>
&lt;ul>
&lt;li>成员模板（member template）：本身是模板的函数成员。
&lt;ul>
&lt;li>普通（非模板）类的成员模板。&lt;/li>
&lt;li>类模板的成员模板。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="控制实例化">控制实例化&lt;/h3>
&lt;ul>
&lt;li>动机：在多个文件中实例化相同模板的额外开销可能非常严重。&lt;/li>
&lt;li>显式实例化：
&lt;ul>
&lt;li>&lt;code>extern template declaration; // 实例化声明&lt;/code>&lt;/li>
&lt;li>&lt;code>template declaration; // 实例化定义&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="效率与灵活性">效率与灵活性&lt;/h3>
&lt;h2 id="模板实参推断">模板实参推断&lt;/h2>
&lt;ul>
&lt;li>对函数模板，编译器利用调用中的函数实参来确定其模板参数，这个过程叫&lt;strong>模板实参推断&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;h3 id="类型转换与模板类型参数">类型转换与模板类型参数&lt;/h3>
&lt;ul>
&lt;li>能够自动转换类型的只有：
&lt;ul>
&lt;li>和其他函数一样，顶层&lt;code>const&lt;/code>会被忽略。&lt;/li>
&lt;li>数组实参或函数实参转换为指针。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="函数模板显式实参">函数模板显式实参&lt;/h3>
&lt;ul>
&lt;li>某些情况下，编译器无法推断出模板实参的类型。&lt;/li>
&lt;li>定义：&lt;code>template &amp;lt;typename T1, typename T2, typename T3&amp;gt; T1 sum(T2, T3);&lt;/code>&lt;/li>
&lt;li>使用函数显式实参调用：&lt;code>auto val3 = sum&amp;lt;long long&amp;gt;(i, lng); // T1是显式指定，T2和T3都是从函数实参类型推断而来&lt;/code>&lt;/li>
&lt;li>&lt;strong>注意&lt;/strong>：正常类型转换可以应用于显式指定的实参。&lt;/li>
&lt;/ul>
&lt;h3 id="尾置返回类型与类型转换">尾置返回类型与类型转换&lt;/h3>
&lt;ul>
&lt;li>使用场景：并不清楚返回结果的准确类型，但知道所需类型是和参数相关的。&lt;/li>
&lt;li>&lt;code>template &amp;lt;typename It&amp;gt; auto fcn(It beg, It end) -&amp;gt; decltype(*beg)&lt;/code>&lt;/li>
&lt;li>尾置返回允许我们在参数列表之后声明返回类型。&lt;/li>
&lt;/ul>
&lt;p>标准库的&lt;strong>类型转换&lt;/strong>模板：&lt;/p>
&lt;ul>
&lt;li>定义在头文件&lt;code>type_traits&lt;/code>中。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>对&lt;code>Mod&amp;lt;T&amp;gt;&lt;/code>，其中&lt;code>Mod&lt;/code>是：&lt;/th>
&lt;th>若&lt;code>T&lt;/code>是：&lt;/th>
&lt;th>则&lt;code>Mod&amp;lt;T&amp;gt;::type&lt;/code>是：&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>remove_reference&lt;/code>&lt;/td>
&lt;td>&lt;code>X&amp;amp;&lt;/code>或&lt;code>X&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;td>&lt;code>X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>add_const&lt;/code>&lt;/td>
&lt;td>&lt;code>X&amp;amp;&lt;/code>或&lt;code>const X&lt;/code>或函数&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>const T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>add_lvalue_reference&lt;/code>&lt;/td>
&lt;td>&lt;code>X&amp;amp;&lt;/code>&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;code>X&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;td>&lt;code>X&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>add_rvalue_reference&lt;/code>&lt;/td>
&lt;td>&lt;code>X&amp;amp;&lt;/code>或&lt;code>X&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remove_pointer&lt;/code>&lt;/td>
&lt;td>&lt;code>X*&lt;/code>&lt;/td>
&lt;td>&lt;code>X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>add_pointer&lt;/code>&lt;/td>
&lt;td>&lt;code>X&amp;amp;&lt;/code>或&lt;code>X&amp;amp;&amp;amp;&lt;/code>&lt;/td>
&lt;td>&lt;code>X*&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T*&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>make_signed&lt;/code>&lt;/td>
&lt;td>&lt;code>unsigned X&lt;/code>&lt;/td>
&lt;td>&lt;code>X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>make_unsigned&lt;/code>&lt;/td>
&lt;td>带符号类型&lt;/td>
&lt;td>&lt;code>unsigned X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remove_extent&lt;/code>&lt;/td>
&lt;td>&lt;code>X[n]&lt;/code>&lt;/td>
&lt;td>&lt;code>X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>remove_all_extents&lt;/code>&lt;/td>
&lt;td>&lt;code>X[n1][n2]...&lt;/code>&lt;/td>
&lt;td>&lt;code>X&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>否则&lt;/td>
&lt;td>&lt;code>T&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="函数指针和实参推断">函数指针和实参推断&lt;/h3>
&lt;ul>
&lt;li>当使用一个函数模板初始化一个函数指针或为一个函数指针赋值时，编译器使用指针的类型来推断模板实参。&lt;/li>
&lt;/ul>
&lt;h3 id="模板实参推断和引用">模板实参推断和引用&lt;/h3>
&lt;ul>
&lt;li>从左值引用函数推断类型：若形如&lt;code>T&amp;amp;&lt;/code>，则只能传递给它一个左值。但如果是&lt;code>const T&amp;amp;&lt;/code>，则可以接受一个右值。&lt;/li>
&lt;li>从右值引用函数推断类型：若形如&lt;code>T&amp;amp;&amp;amp;&lt;/code>，则只能传递给它一个右值。&lt;/li>
&lt;li>引用折叠和右值引用参数：
&lt;ul>
&lt;li>规则 1：当我们将一个左值传递给函数的右值引用参数，且右值引用指向模板类型参数时（如&lt;code>T&amp;amp;&amp;amp;&lt;/code>），编译器会推断模板类型参数为实参的左值引用类型。&lt;/li>
&lt;li>规则 2：如果我们间接创造一个引用的引用，则这些引用形成了&lt;strong>折叠&lt;/strong>。折叠引用只能应用在间接创造的引用的引用，如类型别名或模板参数。对于一个给定类型&lt;code>X&lt;/code>：
&lt;ul>
&lt;li>&lt;code>X&amp;amp; &amp;amp;&lt;/code>、&lt;code>X&amp;amp; &amp;amp;&amp;amp;&lt;/code>和&lt;code>X&amp;amp;&amp;amp; &amp;amp;&lt;/code>都折叠成类型&lt;code>X&amp;amp;&lt;/code>。&lt;/li>
&lt;li>类型&lt;code>X&amp;amp;&amp;amp; &amp;amp;&amp;amp;&lt;/code>折叠成&lt;code>X&amp;amp;&amp;amp;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>上面两个例外规则导致两个重要结果：
&lt;ul>
&lt;li>1.如果一个函数参数是一个指向模板类型参数的右值引用（如&lt;code>T&amp;amp;&amp;amp;&lt;/code>），则它可以被绑定到一个左值上；&lt;/li>
&lt;li>2.如果实参是一个左值，则推断出的模板实参类型将是一个左值引用，且函数参数将被实例化为一个左值引用参数（&lt;code>T&amp;amp;&lt;/code>）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="理解-stdmove">理解 std::move&lt;/h3>
&lt;ul>
&lt;li>标准库&lt;code>move&lt;/code>函数是使用右值引用的模板的一个很好的例子。&lt;/li>
&lt;li>从一个左值&lt;code>static_cast&lt;/code>到一个右值引用是允许的。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typename&lt;/span> &lt;span class="n">remove_reference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">move&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">static_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">remove_reference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="转发">转发&lt;/h3>
&lt;ul>
&lt;li>使用一个名为&lt;code>forward&lt;/code>的新标准库设施来传递参数，它能够保持原始实参的类型。&lt;/li>
&lt;li>定义在头文件&lt;code>utility&lt;/code>中。&lt;/li>
&lt;li>必须通过显式模板实参来调用。&lt;/li>
&lt;li>&lt;code>forward&lt;/code>返回显式实参类型的右值引用。即，&lt;code>forward&amp;lt;T&amp;gt;&lt;/code>的返回类型是&lt;code>T&amp;amp;&amp;amp;&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h2 id="重载与模板">重载与模板&lt;/h2>
&lt;ul>
&lt;li>多个可行模板：当有多个重载模板对一个调用提供同样好的匹配时，会选择最特例化的版本。&lt;/li>
&lt;li>非模板和模板重载：对于一个调用，如果一个非函数模板与一个函数模板提供同样好的匹配，则选择非模板版本。&lt;/li>
&lt;/ul>
&lt;h2 id="可变参数模板">可变参数模板&lt;/h2>
&lt;p>&lt;strong>可变参数模板&lt;/strong>就是一个接受可变数目参数的模板函数或模板类。&lt;/p>
&lt;ul>
&lt;li>可变数目的参数被称为参数包。
&lt;ul>
&lt;li>模板参数包：标识另个或多个模板参数。&lt;/li>
&lt;li>函数参数包：标识另个或者多个函数参数。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用一个省略号来指出一个模板参数或函数参数，表示一个包。&lt;/li>
&lt;li>&lt;code>template &amp;lt;typename T, typename... Args&amp;gt;&lt;/code>，&lt;code>Args&lt;/code>第一个模板参数包。&lt;/li>
&lt;li>&lt;code>void foo(const T &amp;amp;t, const Args&amp;amp; ... rest);&lt;/code>，&lt;code>rest&lt;/code>是一个函数参数包。&lt;/li>
&lt;li>&lt;code>sizeof...&lt;/code>运算符，返回参数的数目。&lt;/li>
&lt;/ul>
&lt;h3 id="编写可变参数函数模板">编写可变参数函数模板&lt;/h3>
&lt;ul>
&lt;li>可变参数函数通常是递归的：第一步调用处理包中的第一个实参，然后用剩余实参调用自身。&lt;/li>
&lt;/ul>
&lt;h3 id="包扩展">包扩展&lt;/h3>
&lt;ul>
&lt;li>对于一个参数包，除了获取它的大小，唯一能做的事情就是&lt;strong>扩展&lt;/strong>（expand）。&lt;/li>
&lt;li>扩展一个包时，还要提供用于每个扩展元素的&lt;strong>模式&lt;/strong>（pattern）。&lt;/li>
&lt;/ul>
&lt;h3 id="转发参数包">转发参数包&lt;/h3>
&lt;ul>
&lt;li>新标准下可以组合使用可变参数模板和&lt;code>forward&lt;/code>机制，实现将实参不变地传递给其他函数。&lt;/li>
&lt;/ul>
&lt;h2 id="模板特例化specializations">模板特例化（Specializations）&lt;/h2>
&lt;ul>
&lt;li>定义函数模板特例化：关键字&lt;code>template&lt;/code>后面跟一个空尖括号对（&lt;code>&amp;lt;&amp;gt;&lt;/code>）。&lt;/li>
&lt;li>特例化的本质是实例化一个模板，而不是重载它。特例化不影响函数匹配。&lt;/li>
&lt;li>模板及其特例化版本应该声明在同一个头文件中。所有同名模板的声明应该放在前面，然后是特例化版本。&lt;/li>
&lt;li>我们可以部分特例化类模板，但不能部分特例化函数模板。&lt;/li>
&lt;/ul></description></item><item><title>ch17</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch17/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch17/</guid><description>&lt;h1 id="第十七章-标准库特殊设施">第十七章 标准库特殊设施&lt;/h1>
&lt;h2 id="tuple-类型">tuple 类型&lt;/h2>
&lt;ul>
&lt;li>&lt;code>tuple&lt;/code>是类似&lt;code>pair&lt;/code>的模板，每个成员类型都可以不同，但&lt;code>tuple&lt;/code>可以有任意数量的成员。&lt;/li>
&lt;li>但每个确定的&lt;code>tuple&lt;/code>类型的成员数目是固定的。&lt;/li>
&lt;li>我们可以将&lt;code>tuple&lt;/code>看做一个“快速而随意”的数据结构。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>tuple 支持的操作&lt;/strong>：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>tuple&amp;lt;T1, T2, ..., Tn&amp;gt; t;&lt;/code>&lt;/td>
&lt;td>&lt;code>t&lt;/code>是一个&lt;code>tuple&lt;/code>，成员数为&lt;code>n&lt;/code>，第&lt;code>i&lt;/code>个成员的类型是&lt;code>Ti&lt;/code>所有成员都进行值初始化。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tuple&amp;lt;T1, T2, ..., Tn&amp;gt; t(v1, v2, ..., vn);&lt;/code>&lt;/td>
&lt;td>每个成员用对应的初始值&lt;code>vi&lt;/code>进行初始化。此构造函数是&lt;code>explicit&lt;/code>的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>make_tuple(v1, v2, ..., vn)&lt;/code>&lt;/td>
&lt;td>返回一个用给定初始值初始化的&lt;code>tuple&lt;/code>。&lt;code>tuple&lt;/code>的类型从初始值的类型&lt;strong>推断&lt;/strong>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>t1 == t2&lt;/code>&lt;/td>
&lt;td>当两个&lt;code>tuple&lt;/code>具有相同数量的成员且成员对应相等时，两个&lt;code>tuple&lt;/code>相等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>t1 relop t2&lt;/code>&lt;/td>
&lt;td>&lt;code>tuple&lt;/code>的关系运算使用&lt;strong>字典序&lt;/strong>。两个&lt;code>tuple&lt;/code>必须具有相同数量的成员。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>get&amp;lt;i&amp;gt;(t)&lt;/code>&lt;/td>
&lt;td>返回&lt;code>t&lt;/code>的第&lt;code>i&lt;/code>个数据成员的引用：如果&lt;code>t&lt;/code>是一个左值，结果是一个左值引用；否则，结果是一个右值引用。&lt;code>tuple&lt;/code>的所有成员都是&lt;code>public&lt;/code>的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tuple_size&amp;lt;tupleType&amp;gt;::value&lt;/code>&lt;/td>
&lt;td>一个类模板，可以通过一个&lt;code>tuple&lt;/code>类型来初始化。它有一个名为&lt;code>value&lt;/code>的&lt;code>public constexpr static&lt;/code>数据成员，类型为&lt;code>size_t&lt;/code>，表示给定&lt;code>tuple&lt;/code>类型中成员的数量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>tuple_element&amp;lt;i, tupleType&amp;gt;::type&lt;/code>&lt;/td>
&lt;td>一个类模板，可以通过一个整型常量和一个&lt;code>tuple&lt;/code>类型来初始化。它有一个名为&lt;code>type&lt;/code>的&lt;code>public&lt;/code>成员，表示给定&lt;code>tuple&lt;/code>类型中指定成员的类型。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="定义和初始化-tuple">定义和初始化 tuple&lt;/h3>
&lt;p>定义和初始化示例：&lt;/p>
&lt;ul>
&lt;li>&lt;code>tuple&amp;lt;size_t, size_t, size_t&amp;gt; threeD;&lt;/code>&lt;/li>
&lt;li>&lt;code>tuple&amp;lt;size_t, size_t, size_t&amp;gt; threeD{1,2,3};&lt;/code>&lt;/li>
&lt;li>&lt;code>auto item = make_tuple(&amp;quot;0-999-78345-X&amp;quot;, 3, 2.00)；&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>访问 tuple 成员：&lt;/p>
&lt;ul>
&lt;li>&lt;code>auto book = get&amp;lt;0&amp;gt;(item);&lt;/code>&lt;/li>
&lt;li>&lt;code>get&amp;lt;2&amp;gt;(item) *= 0.8;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="使用-tuple-返回多个值">使用 tuple 返回多个值&lt;/h3>
&lt;ul>
&lt;li>&lt;code>tuple&lt;/code>最常见的用途是从一个函数返回多个值。&lt;/li>
&lt;/ul>
&lt;h2 id="bitset-类型">bitset 类型&lt;/h2>
&lt;ul>
&lt;li>处理二进制位的有序集；&lt;/li>
&lt;li>&lt;code>bitset&lt;/code>也是类模板，但尖括号中输入的是&lt;code>bitset&lt;/code>的长度而不是元素类型，因为元素类型是固定的，都是一个二进制位。&lt;/li>
&lt;/ul>
&lt;p>初始化&lt;code>bitset&lt;/code>的方法：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>bitset&amp;lt;n&amp;gt; b;&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>有&lt;code>n&lt;/code>位；每一位均是 0.此构造函数是一个&lt;code>constexpr&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bitset&amp;lt;n&amp;gt; b(u);&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>是&lt;code>unsigned long long&lt;/code>值&lt;code>u&lt;/code>的低&lt;code>n&lt;/code>位的拷贝。如果&lt;code>n&lt;/code>大于&lt;code>unsigned long long&lt;/code>的大小，则&lt;code>b&lt;/code>中超出&lt;code>unsigned long long&lt;/code>的高位被置为 0。此构造函数是一个&lt;code>constexpr&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bitset&amp;lt;n&amp;gt; b(s, pos, m, zero, one);&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>是&lt;code>string s&lt;/code>从位置&lt;code>pos&lt;/code>开始&lt;code>m&lt;/code>个字符的拷贝。&lt;code>s&lt;/code>只能包含字符&lt;code>zero&lt;/code>或&lt;code>one&lt;/code>：如果&lt;code>s&lt;/code>包含任何其他字符，构造函数会抛出&lt;code>invalid_argument&lt;/code>异常。字符在&lt;code>b&lt;/code>中分别保存为&lt;code>zero&lt;/code>和&lt;code>one&lt;/code>。&lt;code>pos&lt;/code>默认为 0，&lt;code>m&lt;/code>默认为&lt;code>string::npos&lt;/code>，&lt;code>zero&lt;/code>默认为'0&amp;rsquo;，&lt;code>one&lt;/code>默认为'1&amp;rsquo;。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>bitset&amp;lt;n&amp;gt; b(cp, pos, m, zero, one);&lt;/code>&lt;/td>
&lt;td>和上一个构造函数相同，但从&lt;code>cp&lt;/code>指向的字符数组中拷贝字符。如果未提供&lt;code>m&lt;/code>，则&lt;code>cp&lt;/code>必须指向一个&lt;code>C&lt;/code>风格字符串。如果提供了&lt;code>m&lt;/code>，则从&lt;code>cp&lt;/code>开始必须至少有&lt;code>m&lt;/code>个&lt;code>zero&lt;/code>或&lt;code>one&lt;/code>字符。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>初始化案例；&lt;/p>
&lt;ul>
&lt;li>&lt;code>bitset&amp;lt;13&amp;gt; bitvec1(0xbeef);&lt;/code>&lt;/li>
&lt;li>&lt;code>bitset&amp;lt;32&amp;gt; bitvec4(&amp;quot;1100&amp;quot;);&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>bitset&lt;/code>操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>b.any()&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>中是否存在 1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.all()&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>中都是 1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.none()&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>中是否没有 1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.count()&lt;/code>&lt;/td>
&lt;td>&lt;code>b&lt;/code>中 1 的个数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.size()&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.test(pos)&lt;/code>&lt;/td>
&lt;td>&lt;code>pos&lt;/code>下标是否是 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.set(pos)&lt;/code>&lt;/td>
&lt;td>&lt;code>pos&lt;/code>置 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.set()&lt;/code>&lt;/td>
&lt;td>所有都置 1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.reset(pos)&lt;/code>&lt;/td>
&lt;td>将位置&lt;code>pos&lt;/code>处的位复位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.reset()&lt;/code>&lt;/td>
&lt;td>将&lt;code>b&lt;/code>中所有位复位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.flip(pos)&lt;/code>&lt;/td>
&lt;td>将位置&lt;code>pos&lt;/code>处的位取反&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.flip()&lt;/code>&lt;/td>
&lt;td>将&lt;code>b&lt;/code>中所有位取反&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b[pos]&lt;/code>&lt;/td>
&lt;td>访问&lt;code>b&lt;/code>中位置&lt;code>pos&lt;/code>处的位；如果&lt;code>b&lt;/code>是&lt;code>const&lt;/code>的，则当该位置位时，返回&lt;code>true&lt;/code>；否则返回&lt;code>false&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.to_ulong()&lt;/code>&lt;/td>
&lt;td>返回一个&lt;code>unsigned long&lt;/code>值，其位模式和&lt;code>b&lt;/code>相同。如果&lt;code>b&lt;/code>中位模式不能放入指定的结果类型，则抛出一个&lt;code>overflow_error&lt;/code>异常。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.to_ullong()&lt;/code>&lt;/td>
&lt;td>类似上面，返回一个&lt;code>unsigned long long&lt;/code>值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b.to_string(zero, one)&lt;/code>&lt;/td>
&lt;td>返回一个&lt;code>string&lt;/code>，表示&lt;code>b&lt;/code>中位模式。&lt;code>zero&lt;/code>和&lt;code>one&lt;/code>默认为 0 和 1。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>os &amp;lt;&amp;lt; b&lt;/code>&lt;/td>
&lt;td>将&lt;code>b&lt;/code>中二进制位打印为字符&lt;code>1&lt;/code>或&lt;code>0&lt;/code>，打印到流&lt;code>os&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is &amp;gt;&amp;gt; b&lt;/code>&lt;/td>
&lt;td>从&lt;code>is&lt;/code>读取字符存入&lt;code>b&lt;/code>。当下一个字符不是 1 或 0 时，或是已经读入&lt;code>b.size()&lt;/code>个位时，读取过程停止。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="正则表达式">正则表达式&lt;/h2>
&lt;ul>
&lt;li>正则表达式（reqular expression）是一种描述字符序列的方法，是一种很强大的工具。&lt;/li>
&lt;/ul>
&lt;p>正则表达式库组件：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>组件&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>regex&lt;/code>&lt;/td>
&lt;td>表示一个正则表达式的类&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>regex_match&lt;/code>&lt;/td>
&lt;td>将一个字符序列与一个正则表达式匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>regex_search&lt;/code>&lt;/td>
&lt;td>寻找第一个与正则表达式匹配的子序列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>regex_replace&lt;/code>&lt;/td>
&lt;td>使用给定格式替换一个正则表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sregex_iterator&lt;/code>&lt;/td>
&lt;td>迭代器适配器，调用&lt;code>regex_searcg&lt;/code>来遍历一个&lt;code>string&lt;/code>中所有匹配的子串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>smatch&lt;/code>&lt;/td>
&lt;td>容器类，保存在&lt;code>string&lt;/code>中搜索的结果&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ssub_match&lt;/code>&lt;/td>
&lt;td>&lt;code>string&lt;/code>中匹配的子表达式的结果&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;code>regex_match&lt;/code>和&lt;code>regex_search&lt;/code>的参数：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>(seq, m, r, mft)&lt;/code>&lt;/td>
&lt;td>在字符序列&lt;code>seq&lt;/code>中查找&lt;code>regex&lt;/code>对象&lt;code>r&lt;/code>中的正则表达式。&lt;code>seq&lt;/code>可以是一个&lt;code>string&lt;/code>、标识范围的一对迭代器、一个指向空字符结尾的字符数组的指针。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(seq, r, mft)&lt;/code>&lt;/td>
&lt;td>&lt;code>m&lt;/code>是一个&lt;code>match&lt;/code>对象，用来保存匹配结果的相关细节。&lt;code>m&lt;/code>和&lt;code>seq&lt;/code>必须具有兼容的类型。&lt;code>mft&lt;/code>是一个可选的&lt;code>regex_constants::match_flag_type&lt;/code>值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>这些操作会返回&lt;code>bool&lt;/code>值，指出是否找到匹配。&lt;/li>
&lt;/ul>
&lt;h3 id="使用正则表达式库">使用正则表达式库&lt;/h3>
&lt;ul>
&lt;li>&lt;code>regex&lt;/code>使用的正则表达式语言是&lt;code>ECMAScript&lt;/code>，模式&lt;code>[[::alpha::]]&lt;/code>匹配任意字母。&lt;/li>
&lt;li>由于反斜线是 C++中的特殊字符，在模式中每次出现&lt;code>\&lt;/code>的地方，必须用一个额外的反斜线&lt;code>\\&lt;/code>告知 C++我们需要一个反斜线字符。&lt;/li>
&lt;li>简单案例：
&lt;ul>
&lt;li>&lt;code>string pattern(&amp;quot;[^c]ei&amp;quot;); pattern = &amp;quot;[[:alpha:]]*&amp;quot; + pattern + &amp;quot;[[:alpha:]]*&amp;quot;&lt;/code> 查找不在字符 c 之后的字符串 ei&lt;/li>
&lt;li>&lt;code>regex r(pattern);&lt;/code> 构造一个用于查找模式的 regex&lt;/li>
&lt;li>&lt;code>smatch results;&lt;/code> 定义一个对象保存搜索结果&lt;/li>
&lt;li>&lt;code>string test_str = &amp;quot;receipt freind theif receive&amp;quot;;&lt;/code>&lt;/li>
&lt;li>&lt;code>if (regex_search(test_str, results, r)) cout &amp;lt;&amp;lt; results.str() &amp;lt;&amp;lt; endl;&lt;/code> 如有匹配子串，打印匹配的单词。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;code>regex&lt;/code>（和&lt;code>wregex&lt;/code>）选项：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>regex r(re)&lt;/code> &lt;code>regex r(re, f)&lt;/code>&lt;/td>
&lt;td>&lt;code>re&lt;/code>表示一个正则表达式，它可以是一个&lt;code>string&lt;/code>、一对表示字符范围的迭代器、一个指向空字符结尾的字符数组的指针、一个字符指针和一个计数器、一个花括号包围的字符列表。&lt;code>f&lt;/code>是指出对象如何处理的标志。&lt;code>f&lt;/code>通过下面列出来的值来设置。如果未指定&lt;code>f&lt;/code>，其默认值为&lt;code>ECMAScript&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r1 = re&lt;/code>&lt;/td>
&lt;td>将&lt;code>r1&lt;/code>中的正则表达式替换 Wie&lt;code>re&lt;/code>。&lt;code>re&lt;/code>表示一个正则表达式，它可以是另一个&lt;code>regex&lt;/code>对象、一个&lt;code>string&lt;/code>、一个指向空字符结尾的字符数组的指针或是一个花括号包围的字符列表。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r1.assign(re, f)&lt;/code>&lt;/td>
&lt;td>和使用赋值运算符（=）的效果相同：可选的标志&lt;code>f&lt;/code>也和&lt;code>regex&lt;/code>的构造函数中对应的参数含义相同。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r.mark_count()&lt;/code>&lt;/td>
&lt;td>&lt;code>r&lt;/code>中子表达式的数目&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r.flags()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>r&lt;/code>的标志集&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>定义&lt;code>regex&lt;/code>时指定的标志：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>icase&lt;/code>&lt;/td>
&lt;td>在匹配过程中忽略大小写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>nosubs&lt;/code>&lt;/td>
&lt;td>不保存匹配的子表达式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>optimize&lt;/code>&lt;/td>
&lt;td>执行速度优先于构造速度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ECMAScript&lt;/code>&lt;/td>
&lt;td>使用&lt;code>ECMA-262&lt;/code>指定的语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>basic&lt;/code>&lt;/td>
&lt;td>使用&lt;code>POSIX&lt;/code>基本的正则表达式语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extended&lt;/code>&lt;/td>
&lt;td>使用&lt;code>POSIX&lt;/code>扩展的正则表达式语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>awk&lt;/code>&lt;/td>
&lt;td>使用&lt;code>POSIX&lt;/code>版本的&lt;code>awk&lt;/code>语言的语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>grep&lt;/code>&lt;/td>
&lt;td>使用&lt;code>POSIX&lt;/code>版本的&lt;code>grep&lt;/code>的语法&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>egrep&lt;/code>&lt;/td>
&lt;td>使用&lt;code>POSIX&lt;/code>版本的&lt;code>egrep&lt;/code>的语法&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>可以将正则表达式本身看做是一种简单程序语言设计的程序。在运行时，当一个&lt;code>regex&lt;/code>对象被初始化或被赋予新模式时，才被“编译”。&lt;/li>
&lt;li>如果编写的正则表达式存在错误，会在运行时抛出一个&lt;code>regex_error&lt;/code>的异常。&lt;/li>
&lt;li>避免创建不必要的正则表达式。构建一个&lt;code>regex&lt;/code>对象可能比较耗时。&lt;/li>
&lt;/ul>
&lt;h3 id="匹配与-regex-迭代器类型">匹配与 regex 迭代器类型&lt;/h3>
&lt;p>&lt;code>sregex_iterator&lt;/code>操作（用来获得所有匹配）：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>sregex_iterator it(b, e, r);&lt;/code>&lt;/td>
&lt;td>一个&lt;code>sregex_iterator&lt;/code>，遍历迭代器&lt;code>b&lt;/code>和&lt;code>e&lt;/code>表示的&lt;code>string&lt;/code>。它调用&lt;code>sregex_search(b, e, r)&lt;/code>将&lt;code>it&lt;/code>定位到输入中第一个匹配的位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>sregex_iterator end;&lt;/code>&lt;/td>
&lt;td>&lt;code>sregex_iterator&lt;/code>的尾后迭代器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*it&lt;/code>， &lt;code>it-&amp;gt;&lt;/code>&lt;/td>
&lt;td>根据最后一个调用&lt;code>regex_search&lt;/code>的结果，返回一个&lt;code>smatch&lt;/code>对象的引用或一个指向&lt;code>smatch&lt;/code>对象的指针。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>++it&lt;/code> ， &lt;code>it++&lt;/code>&lt;/td>
&lt;td>从输入序列当前匹配位置开始调用&lt;code>regex_search&lt;/code>。前置版本返回递增后迭代器；后置版本返回旧值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>it1 == it2&lt;/code>&lt;/td>
&lt;td>如果两个&lt;code>sregex_iterator&lt;/code>都是尾后迭代器，则它们相等。两个非尾后迭代器是从相同的输入序列和&lt;code>regex&lt;/code>对象构造，则它们相等。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将字符串file中所有匹配模式r的子串输出
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">sregex_iterator&lt;/span> &lt;span class="n">it&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">begin&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">file&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">end&lt;/span>&lt;span class="p">(),&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">end_it&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">end_it&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">it&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">it&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>smatch&lt;/code>操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>m.ready()&lt;/code>&lt;/td>
&lt;td>如果已经通过调用&lt;code>regex_search&lt;/code>或&lt;code>regex_match&lt;/code>设置了&lt;code>m&lt;/code>，则返回&lt;code>true&lt;/code>；否则返回&lt;code>false&lt;/code>。如果&lt;code>ready&lt;/code>返回&lt;code>false&lt;/code>，则对&lt;code>m&lt;/code>进行操作是未定义的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.size()&lt;/code>&lt;/td>
&lt;td>如果匹配失败，则返回 0，；否则返回最近一次匹配的正则表达式中子表达式的数目。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.empty()&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>m.size() == 0&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.prefix()&lt;/code>&lt;/td>
&lt;td>一个&lt;code>ssub_match&lt;/code>对象，标识当前匹配之前的序列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.suffix()&lt;/code>&lt;/td>
&lt;td>一个&lt;code>ssub_match&lt;/code>对象，标识当前匹配之后的部分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.format(...)&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.length(n)&lt;/code>&lt;/td>
&lt;td>第&lt;code>n&lt;/code>个匹配的子表达式的大小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.position(n)&lt;/code>&lt;/td>
&lt;td>第&lt;code>n&lt;/code>个子表达式距离序列开始的长度&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.str(n)&lt;/code>&lt;/td>
&lt;td>第&lt;code>n&lt;/code>个子表达式匹配的&lt;code>string&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m[n]&lt;/code>&lt;/td>
&lt;td>对应第&lt;code>n&lt;/code>个子表达式的&lt;code>ssub_match&lt;/code>对象&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.begin(), m.end()&lt;/code>&lt;/td>
&lt;td>表示&lt;code>m&lt;/code>中&lt;code>ssub_match&lt;/code>元素范围的迭代器。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>m.cbegin(), m.cend()&lt;/code>&lt;/td>
&lt;td>常量迭代器&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="使用子表达式">使用子表达式&lt;/h3>
&lt;ul>
&lt;li>正则表达式语法通常用括号表示子表达式。&lt;/li>
&lt;li>子表达式的索引从 1 开始。&lt;/li>
&lt;li>在&lt;code>fmt&lt;/code>中用&lt;code>$&lt;/code>后跟子表达式的索引号来标识一个特定的子表达式。&lt;/li>
&lt;/ul>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">regex_search&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">filename&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">results&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// .str(1)获取第一个子表达式匹配结果
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>ssub_match&lt;/code>子匹配操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>matched&lt;/code>&lt;/td>
&lt;td>一个&lt;code>public bool&lt;/code>数据成员，指出&lt;code>ssub_match&lt;/code>是否匹配了&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>first&lt;/code>， &lt;code>second&lt;/code>&lt;/td>
&lt;td>&lt;code>public&lt;/code>数据成员，指向匹配序列首元素和尾后位置的迭代器。如果未匹配，则&lt;code>first&lt;/code>和&lt;code>second&lt;/code>是相等的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>length()&lt;/code>&lt;/td>
&lt;td>匹配的大小，如果&lt;code>matched&lt;/code>为&lt;code>false&lt;/code>，则返回 0。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>str()&lt;/code>&lt;/td>
&lt;td>返回一个包含输入中匹配部分的&lt;code>string&lt;/code>。如果&lt;code>matched&lt;/code>为&lt;code>false&lt;/code>，则返回空&lt;code>string&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s = ssub&lt;/code>&lt;/td>
&lt;td>将&lt;code>ssub_match&lt;/code>对象&lt;code>ssub&lt;/code>转化为&lt;code>string&lt;/code>对象&lt;code>s&lt;/code>。等价于&lt;code>s=ssub.str()&lt;/code>，转换运算符不是&lt;code>explicit&lt;/code>的。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="使用-regex_replace">使用 regex_replace&lt;/h3>
&lt;p>正则表达式替换操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>m.format(dest, fmt, mft)&lt;/code>, &lt;code>m.format(fmt, mft)&lt;/code>&lt;/td>
&lt;td>使用格式字符串&lt;code>fmt&lt;/code>生成格式化输出，匹配在&lt;code>m&lt;/code>中，可选的&lt;code>match_flag_type&lt;/code>标志在&lt;code>mft&lt;/code>中。第一个版本写入迭代器&lt;code>dest&lt;/code>指向的目的为止，并接受&lt;code>fmt&lt;/code>参数，可以是一个&lt;code>string&lt;/code>，也可以是一个指向空字符结尾的字符数组的指针。&lt;code>mft&lt;/code>的默认值是&lt;code>format_default&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>rege_replace(dest, seq, r, fmt, mft)&lt;/code>， &lt;code>regex_replace(seq, r, fmt, mft)&lt;/code>&lt;/td>
&lt;td>遍历&lt;code>seq&lt;/code>，用&lt;code>regex_search&lt;/code>查找与&lt;code>regex&lt;/code>对象&lt;code>r&lt;/code>相匹配的子串，使用格式字符串&lt;code>fmt&lt;/code>和可选的&lt;code>match_flag_type&lt;/code>标志来生成输出。&lt;code>mft&lt;/code>的默认值是&lt;code>match_default&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">phone&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;(&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">()?(&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">d{3})(&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">))?([-. ])?(&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">d{3})([-. ]?)(&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s">d{4})&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">fmt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;$2.$5.$7&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 将号码格式改为ddd.ddd.dddd
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">regex&lt;/span> &lt;span class="nf">r&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">phone&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 用来寻找模式的regex对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;(908) 555-1800&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">regex_replace&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">number&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">r&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>匹配标志：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>match_default&lt;/code>&lt;/td>
&lt;td>等价于&lt;code>format_default&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_not_bol&lt;/code>&lt;/td>
&lt;td>不将首字符作为行首处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_not_eol&lt;/code>&lt;/td>
&lt;td>不将尾字符作为行尾处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_not_bow&lt;/code>&lt;/td>
&lt;td>不将首字符作为单词首处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_not_eow&lt;/code>&lt;/td>
&lt;td>不将尾字符作为单词尾处理&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_any&lt;/code>&lt;/td>
&lt;td>如果存在多于一个匹配，则可以返回任意一个匹配&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_not_null&lt;/code>&lt;/td>
&lt;td>不匹配任何空序列&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_continuous&lt;/code>&lt;/td>
&lt;td>匹配必须从输入的首字符开始&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>match_prev_avail&lt;/code>&lt;/td>
&lt;td>输入序列包含第一个匹配之前的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>format_default&lt;/code>&lt;/td>
&lt;td>用&lt;code>ECMAScript&lt;/code>规则替换字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>format_sed&lt;/code>&lt;/td>
&lt;td>用&lt;code>POSIX sed&lt;/code>规则替换字符串&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>format_no_copy&lt;/code>&lt;/td>
&lt;td>不输出输入序列中未匹配的部分&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>format_first_only&lt;/code>&lt;/td>
&lt;td>只替换子表达式的第一次出现&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="随机数">随机数&lt;/h2>
&lt;ul>
&lt;li>新标准之前，C 和 C++都依赖一个简单的 C 库函数&lt;code>rand&lt;/code>来生成随机数，且只符合均匀分布。&lt;/li>
&lt;li>新标准：&lt;strong>随机数引擎&lt;/strong> + &lt;strong>随机数分布类&lt;/strong>， 定义在 &lt;code>random&lt;/code>头文件中。&lt;/li>
&lt;li>C++程序应该使用&lt;code>default_random_engine&lt;/code>类和恰当的分布类对象。&lt;/li>
&lt;/ul>
&lt;h3 id="随机数引擎和分布">随机数引擎和分布&lt;/h3>
&lt;p>随机数引擎操作&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>Engine e;&lt;/code>&lt;/td>
&lt;td>默认构造函数；使用该引擎类型默认的种子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Engine e(s);&lt;/code>&lt;/td>
&lt;td>使用整型值&lt;code>s&lt;/code>作为种子&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>e.seed(s)&lt;/code>&lt;/td>
&lt;td>使用种子&lt;code>s&lt;/code>重置引擎的状态&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>e.min()&lt;/code>，&lt;code>e.max()&lt;/code>&lt;/td>
&lt;td>此引擎可生成的最小值和最大值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Engine::result_type&lt;/code>&lt;/td>
&lt;td>此引擎生成的&lt;code>unsigned&lt;/code>整型类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>e.discard(u)&lt;/code>&lt;/td>
&lt;td>将引擎推进&lt;code>u&lt;/code>步；&lt;code>u&lt;/code>的类型为&lt;code>unsigned long long&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化分布类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">uniform_int_distribution&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">unsigned&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">9&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 初始化引擎
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">default_random_engine&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 随机生成0-9的无符号整数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cout&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">endl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>设置随机数发生器种子&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>种子就是一个数值，引擎可以利用它从序列中一个新位置重新开始生成随机数。&lt;/li>
&lt;li>种子可以使用系统函数&lt;code>time(0)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="其他随机数分布">其他随机数分布&lt;/h3>
&lt;p>分布类型的操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>Dist d;&lt;/code>&lt;/td>
&lt;td>默认够赞函数；使&lt;code>d&lt;/code>准备好被使用。其他构造函数依赖于&lt;code>Dist&lt;/code>的类型；分布类型的构造函数是&lt;code>explicit&lt;/code>的。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d(e)&lt;/code>&lt;/td>
&lt;td>用相同的&lt;code>e&lt;/code>连续调用&lt;code>d&lt;/code>的话，会根据&lt;code>d&lt;/code>的分布式类型生成一个随机数序列；&lt;code>e&lt;/code>是一个随机数引擎对象。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d.min()&lt;/code>,&lt;code>d.max()&lt;/code>&lt;/td>
&lt;td>返回&lt;code>d(e)&lt;/code>能生成的最小值和最大值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>d.reset()&lt;/code>&lt;/td>
&lt;td>重建&lt;code>d&lt;/code>的状态，是的随后对&lt;code>d&lt;/code>的使用不依赖于&lt;code>d&lt;/code>已经生成的值。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="io-库再探">IO 库再探&lt;/h2>
&lt;h3 id="格式化输入与输出">格式化输入与输出&lt;/h3>
&lt;ul>
&lt;li>使用操纵符改变格式状态。&lt;/li>
&lt;li>控制布尔值的格式： &lt;code>cout &amp;lt;&amp;lt; boolalpha &amp;lt;&amp;lt; true &amp;lt;&amp;lt; endl;&lt;/code>&lt;/li>
&lt;li>指定整型的进制：&lt;code>cout &amp;lt;&amp;lt; dec &amp;lt;&amp;lt; 20 &amp;lt;&amp;lt; endl;&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>定义在&lt;code>iostream&lt;/code>中的操纵符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操纵符&lt;/th>
&lt;th>解释&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>boolalpha&lt;/code>&lt;/td>
&lt;td>将&lt;code>true&lt;/code>和&lt;code>false&lt;/code>输出为字符串&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>* noboolalpha&lt;/code>&lt;/td>
&lt;td>将&lt;code>true&lt;/code>和&lt;code>false&lt;/code>输出为 1,0&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>showbase&lt;/code>&lt;/td>
&lt;td>对整型值输出表示进制的前缀&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>* noshowbase&lt;/code>&lt;/td>
&lt;td>不生成表示进制的前缀&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>showpoint&lt;/code>&lt;/td>
&lt;td>对浮点值总是显示小数点&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>* noshowpoint&lt;/code>&lt;/td>
&lt;td>只有当浮点值包含小数部分时才显示小数点&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>showpos&lt;/code>&lt;/td>
&lt;td>对非负数显示&lt;code>+&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>* noshowpos&lt;/code>&lt;/td>
&lt;td>对非负数不显示&lt;code>+&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>uppercase&lt;/code>&lt;/td>
&lt;td>在十六进制中打印&lt;code>0X&lt;/code>，在科学计数法中打印&lt;code>E&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>* nouppercase&lt;/code>&lt;/td>
&lt;td>在十六进制中打印&lt;code>0x&lt;/code>，在科学计数法中打印&lt;code>e&lt;/code>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>* dec&lt;/code>&lt;/td>
&lt;td>整型值显示为十进制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>hex&lt;/code>&lt;/td>
&lt;td>整型值显示为十六进制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>oct&lt;/code>&lt;/td>
&lt;td>整型值显示为八进制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>left&lt;/code>&lt;/td>
&lt;td>在值的右侧添加填充字符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>right&lt;/code>&lt;/td>
&lt;td>在值的左侧添加填充字符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>internal&lt;/code>&lt;/td>
&lt;td>在符号和值之间添加填充字符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fixed&lt;/code>&lt;/td>
&lt;td>浮点值显示为定点十进制&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>scientific&lt;/code>&lt;/td>
&lt;td>浮点值显示为科学计数法&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>hexfloat&lt;/code>&lt;/td>
&lt;td>浮点值显示为十六进制（C++11）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>defaultfloat&lt;/code>&lt;/td>
&lt;td>充值浮点数格式为十进制（C++11）&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unitbuf&lt;/code>&lt;/td>
&lt;td>每次输出操作后都刷新缓冲区&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>&lt;code>* nounitbuf&lt;/code>&lt;/td>
&lt;td>恢复正常的缓冲区刷新模式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>* skipws&lt;/code>&lt;/td>
&lt;td>输入运算符跳过空白符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>noskipws&lt;/code>&lt;/td>
&lt;td>输入运算符不跳过空白符&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>flush&lt;/code>&lt;/td>
&lt;td>刷新&lt;code>ostream&lt;/code>缓冲区&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ends&lt;/code>&lt;/td>
&lt;td>插入空字符，然后刷新&lt;code>ostream&lt;/code>缓冲区&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>endl&lt;/code>&lt;/td>
&lt;td>插入换行，然后刷新&lt;code>ostream&lt;/code>缓冲区&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中&lt;code>*&lt;/code>表示默认的流状态。&lt;/p>
&lt;h3 id="未格式化的输入输出操作">未格式化的输入/输出操作&lt;/h3>
&lt;p>单字节低层 IO 操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>is.get(ch)&lt;/code>&lt;/td>
&lt;td>从&lt;code>istream is&lt;/code>读取下一个字节存入字符&lt;code>cn&lt;/code>中。返回&lt;code>is&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>os.put(ch)&lt;/code>&lt;/td>
&lt;td>将字符&lt;code>ch&lt;/code>输出到&lt;code>ostream os&lt;/code>。返回&lt;code>os&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.get()&lt;/code>&lt;/td>
&lt;td>将&lt;code>is&lt;/code>的下一个字节作为&lt;code>int&lt;/code>返回&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.putback(ch)&lt;/code>&lt;/td>
&lt;td>将字符&lt;code>ch&lt;/code>放回&lt;code>is&lt;/code>。返回&lt;code>is&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.unget()&lt;/code>&lt;/td>
&lt;td>将&lt;code>is&lt;/code>向后移动一个字节。返回&lt;code>is&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.peek()&lt;/code>&lt;/td>
&lt;td>将下一个字节作为&lt;code>int&lt;/code>返回，但不从流中删除它。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>多字节低层 IO 操作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>is.get(sink, size, delim)&lt;/code>&lt;/td>
&lt;td>从&lt;code>is&lt;/code>中读取最多&lt;code>size&lt;/code>个字节，并保存在字符数组中，字符数组的起始地址由&lt;code>sink&lt;/code>给出。读取过程直到遇到字符&lt;code>delim&lt;/code>或读取了&lt;code>size&lt;/code>个字节或遇到文件尾时停止。如果遇到了&lt;code>delim&lt;/code>，则将其留在输入流中，不读取出来存入&lt;code>sink&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.getline(sink, size, delim)&lt;/code>&lt;/td>
&lt;td>与接收三个参数的&lt;code>get&lt;/code>版本类似，但会读取并丢弃&lt;code>delim&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.read(sink, size)&lt;/code>&lt;/td>
&lt;td>读取最多&lt;code>size&lt;/code>个字节，存入字符数组&lt;code>sink&lt;/code>中。返回&lt;code>is&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.gcount()&lt;/code>&lt;/td>
&lt;td>返回上一个未格式化读取从&lt;code>is&lt;/code>读取的字节数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>os.write(source, size)&lt;/code>&lt;/td>
&lt;td>将字符数组&lt;code>source&lt;/code>中的&lt;code>size&lt;/code>个字节写入&lt;code>os&lt;/code>。返回&lt;code>os&lt;/code>。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>is.ignore(size, delim)&lt;/code>&lt;/td>
&lt;td>读取并忽略最多&lt;code>size&lt;/code>个字符，包括&lt;code>delim&lt;/code>。与其他未格式化函数不同，&lt;code>ignore&lt;/code>有默认参数：&lt;code>size&lt;/code>默认值是 1，&lt;code>delim&lt;/code>的默认值为文件尾。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>注意：一般情况下，主张使用标准库提供的高层抽象，低层函数容易出错。&lt;/li>
&lt;/ul>
&lt;h3 id="流随机访问">流随机访问&lt;/h3>
&lt;ul>
&lt;li>只适用于&lt;code>fstream&lt;/code>和&lt;code>sstream&lt;/code>。&lt;/li>
&lt;li>通过将标记&lt;code>seek&lt;/code>到一个给定位置来重定位它。&lt;/li>
&lt;li>&lt;code>tell&lt;/code>告诉我们标记的当前位置。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>操作&lt;/th>
&lt;th>解释&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>tellg()&lt;/code>，&lt;code>tellp&lt;/code>&lt;/td>
&lt;td>返回一个输入流中（&lt;code>tellg&lt;/code>）或输出流中（&lt;code>tellp&lt;/code>）标记的当前位置。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>seekg(pos)&lt;/code>，&lt;code>seekp(pos)&lt;/code>&lt;/td>
&lt;td>在一个输入流或输出流中将标记重定位到给定的绝对地址。&lt;code>pos&lt;/code>通常是一个当前&lt;code>teelg&lt;/code>或&lt;code>tellp&lt;/code>返回的值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>seekp(off, from)&lt;/code>，&lt;code>seekg(off, from)&lt;/code>&lt;/td>
&lt;td>在一个输入流或输出流中将标记定位到&lt;code>from&lt;/code>之前或之后&lt;code>off&lt;/code>个字符，&lt;code>from&lt;/code>可以是下列值之一：&lt;code>beg&lt;/code>，偏移量相对于流开始位置；&lt;code>cur&lt;/code>，偏移量相对于流当前位置；&lt;code>end&lt;/code>，偏移量相对于流结尾位置。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>ch18</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch18/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch18/</guid><description>&lt;h1 id="第十八章-用于大型程序的工具">第十八章 用于大型程序的工具&lt;/h1>
&lt;p>大规模应用程序的特殊要求包括：&lt;/p>
&lt;ul>
&lt;li>在独立开发的子系统之间协同处理错误的能力。&lt;/li>
&lt;li>使用各种库进行协同开发的能力。&lt;/li>
&lt;li>对比较复杂的应用概念建模的能力。&lt;/li>
&lt;/ul>
&lt;h2 id="异常处理">异常处理&lt;/h2>
&lt;p>&lt;strong>异常处理&lt;/strong>（exception handling）机制允许程序中独立开发的部分能够在运行时就出现的问题进行通信并作出相应的处理。&lt;/p>
&lt;h3 id="抛出异常">抛出异常&lt;/h3>
&lt;p>在 C++语言中，我们通过&lt;strong>抛出&lt;/strong>（throwing）一条表达式来&lt;strong>引发&lt;/strong>（raised）一个异常。异常类型和当前的调用链决定了哪段&lt;strong>处理代码&lt;/strong>（handler）将用来处理该异常。&lt;/p>
&lt;p>程序的控制权从&lt;code>throw&lt;/code>转移到&lt;code>catch&lt;/code>模块。&lt;/p>
&lt;p>&lt;strong>栈展开&lt;/strong>：当&lt;code>throw&lt;/code>出现在一个&lt;code>try语句块&lt;/code>时，检查该&lt;code>try语句块&lt;/code>相关的&lt;code>catch&lt;/code>字句，若有匹配则处理；若无匹配，则继续检查外层的&lt;code>try&lt;/code>匹配的&lt;code>catch&lt;/code>。&lt;/p>
&lt;p>若一个异常没有被捕获，则它将终止当前的程序。&lt;/p>
&lt;p>对象销毁：&lt;/p>
&lt;ul>
&lt;li>块退出后，它的局部对象将被销毁。&lt;/li>
&lt;li>若异常发生在构造函数中，即使某个对象只构造了一部分，也要确保已构造的成员正确地被销毁。&lt;/li>
&lt;li>将资源释放放在类的析构函数中，以保证资源能被正确释放。析构函数本身不会引发异常。&lt;/li>
&lt;/ul>
&lt;h3 id="捕获异常">捕获异常&lt;/h3>
&lt;p>若无需访问抛出的异常对象，则可以忽略捕获形参的名字。&lt;/p>
&lt;p>通常，若&lt;code>catch&lt;/code>接受的异常与某个继承体系有关，则最好将该&lt;code>catch&lt;/code>的参数定义成引用类型。&lt;/p>
&lt;p>搜索&lt;code>catch&lt;/code>未必是最佳匹配，而是第一个匹配，因此，越细化的&lt;code>catch&lt;/code>越应该放在&lt;code>catch&lt;/code>列表前段。&lt;/p>
&lt;p>重新抛出：&lt;code>catch&lt;/code>代码执行一条&lt;code>throw;&lt;/code>将异常传递给另一个&lt;code>catch&lt;/code>语句。&lt;/p>
&lt;p>捕获所有异常：&lt;code>catch(...)&lt;/code>&lt;/p>
&lt;h3 id="构造函数">构造函数&lt;/h3>
&lt;p>处理构造函数初始值异常的唯一方法是将构造函数协程函数&lt;code>try&lt;/code>语句块。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">template&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">typename&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Blob&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;::&lt;/span>&lt;span class="n">Blob&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">initializer_list&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">il&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">try&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">data&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">make_shared&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">il&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*函数体*/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">bad_alloc&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="n">handle_out_of_memory&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="noexcept-异常说明">noexcept 异常说明&lt;/h3>
&lt;p>使用&lt;code>noexcept&lt;/code>说明指定某个函数不会抛出异常。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">recoup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//C++11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">coid&lt;/span> &lt;span class="nf">recoup&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">throw&lt;/span>&lt;span class="p">();&lt;/span> &lt;span class="c1">//老版本
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="异常类层次">异常类层次&lt;/h3>
&lt;p>标准 exception 层次：&lt;/p>
&lt;ul>
&lt;li>exception
&lt;ul>
&lt;li>bad_cast&lt;/li>
&lt;li>bad_alloc&lt;/li>
&lt;li>runtime_error
&lt;ul>
&lt;li>overflow_error&lt;/li>
&lt;li>underflow_error&lt;/li>
&lt;li>range_error&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>logic_error
&lt;ul>
&lt;li>domain_error&lt;/li>
&lt;li>invalid_argument&lt;/li>
&lt;li>out_of_range&lt;/li>
&lt;li>length_error&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>自定义异常类：&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">out_of_stock&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">explicit&lt;/span> &lt;span class="nf">out_of_stock&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">runtime_error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="命名空间">命名空间&lt;/h2>
&lt;p>多个库将名字放置在全局命名空间中将引发&lt;strong>命名空间污染&lt;/strong>（namespace pollution）。&lt;strong>命名空间&lt;/strong>（namespace）分割了全局命名空间，其中每个命名空间是一个作用域。&lt;/p>
&lt;h3 id="命名空间定义">命名空间定义&lt;/h3>
&lt;p>命名空间的定义包含两部分：1.关键字&lt;code>namespace&lt;/code>；2.命名空间名称。后面是一系列由花括号括起来的声明和定义。命名空间作用域后面无需分号。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">cplusplus_primer&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>每个命名空间都是一个&lt;strong>作用域&lt;/strong>。定义在某个命名空间内的名字可以被该命名空间内的其他成员直接访问，也可以被这些成员内嵌套作用域中的任何单位访问。位于该命名空间之外的代码必须明确指出所用的名字是属于哪个命名空间的。&lt;/p>
&lt;p>命名空间可以是&lt;strong>不连续&lt;/strong>的。这点不同于其他作用域，意味着同一命名空间可以在多处出现。&lt;/p>
&lt;p>&lt;strong>内联命名空间&lt;/strong>（C++11）：&lt;/p>
&lt;p>无需使用该命名空间的前缀，通过外层命名空间就可以直接访问。&lt;/p>
&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">cplusplus_primer&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">inline&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">FifthEd&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 表示本书第5版代码
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Query_base&lt;/span> &lt;span class="p">{};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cplusplus_primer&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">Query_base&lt;/span> &lt;span class="n">qb&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>未命名的命名空间&lt;/strong>：&lt;/p>
&lt;p>指关键字&lt;code>namespace&lt;/code>后面紧跟花括号的用法。未命名的命名空间中定义的变量拥有静态的声明周期：在第一次使用前创建，直到程序结束才销毁。不能跨越多个文件。&lt;/p>
&lt;h3 id="使用命名空间成员">使用命名空间成员&lt;/h3>
&lt;p>像&lt;code>namespace_name::member_name&lt;/code>这样使用命名空间的成员非常繁琐。&lt;/p>
&lt;p>&lt;strong>命名空间的别名&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">primer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cplusplus_primer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>using 声明&lt;/strong>（using declaration）：&lt;/p>
&lt;p>一条&lt;code>using&lt;/code>声明语句一次只引入命名空间的一个成员。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>using 指示&lt;/strong>（using directive）：&lt;/p>
&lt;p>使得某个特定的命名空间中所有的名字都可见。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">using&lt;/span> &lt;span class="k">namespace&lt;/span> &lt;span class="n">std&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="类命名空间与作用域">类、命名空间与作用域&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-cpp" data-lang="cpp">&lt;span class="line">&lt;span class="cl">&lt;span class="k">namespace&lt;/span> &lt;span class="n">A&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">class&lt;/span> &lt;span class="nc">C1&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">f3&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">A&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">C1&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">f3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="重载与命名空间">重载与命名空间&lt;/h3>
&lt;p>&lt;code>using&lt;/code>声明语句声明的是一个名字，而非特定的函数，也就是包括该函数的所有版本，都被引入到当前作用域中。&lt;/p>
&lt;h2 id="多重继承与虚继承">多重继承与虚继承&lt;/h2>
&lt;h3 id="多重继承">多重继承&lt;/h3>
&lt;h3 id="类型转换与多个基类">类型转换与多个基类&lt;/h3>
&lt;h3 id="多重继承下的类作用域">多重继承下的类作用域&lt;/h3>
&lt;ul>
&lt;li>当一个类拥有多个基类时，有可能出现派生类从两个或更多基类中继承了同名成员的情况。此时，不加前缀限定符直接使用该名字将引发二义性。&lt;/li>
&lt;/ul>
&lt;h3 id="虚继承">虚继承&lt;/h3>
&lt;ul>
&lt;li>虚继承的目的是令某个类做出声明，承诺愿意共享它的基类。其中，共享的基类子对象成为&lt;strong>虚基类&lt;/strong>。在这种机制下，不论虚基类在继承体系中出现了多少次，在派生类中都只包含唯一一个共享的虚基类子对象。&lt;/li>
&lt;li>虚派生只影响从指定了虚基类的派生类中进一步派生出的类，它不会影响派生类本身。&lt;/li>
&lt;/ul>
&lt;h3 id="构造函数与虚继承">构造函数与虚继承&lt;/h3>
&lt;ul>
&lt;li>h 含有虚基类的对象的构造顺序与一般的顺序稍有&lt;strong>区别&lt;/strong>：首先使用提供给最底层派生类构造函数的初始值初始化该对象的虚基类子部分，接下来按照直接基类在派生列表中出现的次序对其进行初始化。&lt;/li>
&lt;li>虚基类总是先于非虚基类构造，与它们在继承体系中的次序和位置无关。&lt;/li>
&lt;/ul></description></item><item><title>ch19</title><link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/cpp/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/c++-primer/ch19/</guid><description>&lt;h1 id="第十九章-特殊工具与技术">第十九章 特殊工具与技术&lt;/h1>
&lt;h2 id="控制内存分配">控制内存分配&lt;/h2>
&lt;h3 id="重载-new-和-delete">重载 new 和 delete&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>&lt;code>new&lt;/code>表达式的工作机理&lt;/strong>：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a value&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">//分配并初始化一个string对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">string&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// 分配10个默认初始化的string对象
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>上述代码实际执行了&lt;strong>三步操作&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;code>new&lt;/code>表达式调用一个名为&lt;code>operator new&lt;/code>(或&lt;code>operator new []&lt;/code>)的标准库函数，它分配一块&lt;strong>足够大的&lt;/strong>、&lt;strong>原始的&lt;/strong>、&lt;strong>未命名的&lt;/strong>内存空间以便存储特定类型的对象(或对象的数组)。&lt;/li>
&lt;li>编译器运行相应的构造函数以构造这些对象，并为其传入初始值。&lt;/li>
&lt;li>对象被分配了空间并构造完成，返回一个指向该对象的指针。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>&lt;code>delete&lt;/code>表达式的工作机理&lt;/strong>：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">delete&lt;/span> &lt;span class="n">sp&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 销毁*sp，然后释放sp指向的内存空间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">delete&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 销毁数组中的元素，然后释放对应的内存空间
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>上述代码实际执行了&lt;strong>两步操作&lt;/strong>：
&lt;ul>
&lt;li>对&lt;code>sp&lt;/code>所指向的对象或者&lt;code>arr&lt;/code>所指的数组中的元素执行对应的析构函数。&lt;/li>
&lt;li>编译器调用名为&lt;code>operator delete&lt;/code>(或&lt;code>operator delete[]&lt;/code>)的标准库函数释放内存空间。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>当自定义了全局的&lt;code>operator new&lt;/code>函数和&lt;code>operator delete&lt;/code>函数后，我们就担负起了控制动态内存分配的职责。这两个函数&lt;strong>必须是正确的&lt;/strong>。因为它们是程序整个处理过程中至关重要的一部分。&lt;/li>
&lt;li>标准库定义了&lt;code>operator new&lt;/code>函数和&lt;code>operator delete&lt;/code>函数的 8 个重载版本：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 这些版本可能抛出异常
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 分配一个对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 分配一个数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 释放一个对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 释放一个数组
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 这些版本承诺不会抛出异常
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nothrow_t&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="k">new&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="n">size_t&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nothrow_t&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nothrow_t&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="k">delete&lt;/span>&lt;span class="p">[](&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">nothrow_t&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>应用程序可以自定义上面函数版本中的任意一个，前提是自定义的版本必须位于&lt;strong>全局作用域&lt;/strong>或者&lt;strong>类作用域&lt;/strong>中。&lt;/li>
&lt;li>&lt;strong>注意：&lt;/strong> 提供新的&lt;code>operator new&lt;/code>函数和&lt;code>operator delete&lt;/code>函数的目的在于改变内存分配的方式，但是不管怎样，都不能改变&lt;code>new&lt;/code>运算符和&lt;code>delete&lt;/code>运算符的基本含义。&lt;/li>
&lt;li>使用从 C 语言继承的函数&lt;code>malloc&lt;/code>和&lt;code>free&lt;/code>函数能实现以某种方式执行分配内存和释放内存的操作：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;cstdlib&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">operator&lt;/span> &lt;span class="nf">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">mme&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">throw&lt;/span> &lt;span class="n">bad_alloc&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="k">operator&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">mem&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">noexcept&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">mem&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="定位-new-表达式">定位 new 表达式&lt;/h3>
&lt;ul>
&lt;li>应该使用 new 的定位&lt;code>new(placement new)&lt;/code>形式传递一个地址，定位&lt;code>new&lt;/code>的形式如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">place_address&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">type&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">place_address&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">initializers&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">place_address&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">new&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">place_address&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">braced&lt;/span> &lt;span class="n">initializer&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// place_address必须是一个指针，同时在initializers中提供一个(可能为空的)以逗号分隔的初始值列表，该初始值列表将用于构造新分配的对象。
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当只传入一个指针类型的实参时，定位&lt;code>new&lt;/code>表达式构造对象但是不分配内存。&lt;/li>
&lt;li>调用析构函数会销毁对象，但是不会释放内存。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">string&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">sp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">string&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;a value&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 分配并初始化一个string对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">sp&lt;/span>&lt;span class="o">-&amp;gt;~&lt;/span>&lt;span class="n">string&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="运行时类型识别">运行时类型识别&lt;/h2>
&lt;ul>
&lt;li>运行时类型识别&lt;code>(run-time type identification, RTTI)&lt;/code>的功能由两个运算符实现：
&lt;ul>
&lt;li>&lt;code>typeid&lt;/code>运算符， 用于返回表达式的类型。&lt;/li>
&lt;li>&lt;code>dynamic_cast&lt;/code>运算符，用于将基类的指针或引用安全地转换曾派生类的指针或引用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用&lt;code>RTTI&lt;/code>必须要加倍小心。在可能的情况下，最好定义虚函数而非直接接管类型管理的重任。&lt;/li>
&lt;/ul>
&lt;h3 id="dynamic_cast-运算符">dynamic_cast 运算符&lt;/h3>
&lt;ul>
&lt;li>dynamic_cast 运算符的使用形式如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">dynamic_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// e必须是一个有效的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">dynamic_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// e必须是一个左值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">dynamic_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">&amp;amp;&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">e&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// e不能是左值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 以上，type类型必须时一个类类型，并且通常情况下该类型应该含有虚函数。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// e的类型必须符合三个条件中的任意一个，它们是：
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. e的类型是目标type的公有派生类；
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 2. e的类型是目标type的共有基类；
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 3. e的类型就是目标type的类型；
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 指针类型的dynamic_cast
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 假设Base类至少含有一个虚函数，Derived是Base的共有派生类。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Derived&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">dynamic_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="o">*&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bp&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用dp指向的Derived对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// bp指向一个Base对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 使用dp指向的Base对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 引用类型的dynamic_cast
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">try&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="n">Derived&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">d&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">dynamic_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="o">&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 使用b引用的Derived对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bad_cast&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 处理类型转换失败的情况
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>可以对一个空指针执行&lt;code>dynamic_cast&lt;/code>，结果是所需类型的空指针。&lt;/li>
&lt;/ul>
&lt;h3 id="typeid-运算符">typeid 运算符&lt;/h3>
&lt;ul>
&lt;li>&lt;code>typeid运算符(typeid operator)&lt;/code>，它允许程序向表达式提问：&lt;strong>你的对象是什么类型？&lt;/strong>&lt;/li>
&lt;li>&lt;code>typeid&lt;/code>表达式的形式是&lt;code>typeid(e)&lt;/code>，其中&lt;code>e&lt;/code>可以是任意表达式或类型的名字，它操作的结果是一个常量对象的引用。它可以作用于任意类型的表达式。&lt;/li>
&lt;li>通常情况下，使用 typeid 比较两条表达式的类型是否相同，或者比较一条表达式的类型是否与指定类型相同：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Derived&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Base&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">bp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">dp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">bp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">dp&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// bp和dp指向同一类型的对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">bp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// bp实际指向Derived对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当 typeid 作用于指针时(而非指针所指向的对象)，返回的结果是该指针的静态编译时类型。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 下面的检查永远是失败的：bp的类型是指向Base的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bp&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Derived&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 永远不会执行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="使用-rtti">使用 RTTI&lt;/h3>
&lt;ul>
&lt;li>用途：为具有继承关系的类实现相等运算符时。对于两个对象来说，如果它们的类型相同并且对应的数据成员取值相同，则说这两个对象是相等的。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 类的层次关系
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">class&lt;/span> &lt;span class="nc">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">friend&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Base的接口成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">virtual&lt;/span> &lt;span class="kt">bool&lt;/span> &lt;span class="n">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Base的数据成员和其他用于实现的成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">Derived&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">public&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Derived的其他接口成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">protected&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="n">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Derived的数据成员和其他用于实现的成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 类型敏感的相等运算符
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="k">operator&lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">lhs&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 如果typeid不相同，返回false；否则虚调用equal
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nf">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">lhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">typeid&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">lhs&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rhs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 虚equal函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">auto&lt;/span> &lt;span class="n">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">dynamic_cast&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Derived&lt;/span>&lt;span class="o">&amp;amp;&amp;gt;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">rhs&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 执行比较两个Derived对象的操作并返回结果
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 基类equal函数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">bool&lt;/span> &lt;span class="n">Base&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">equal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">rhs&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 执行比较Base对象的操作
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="type_info-类">type_info 类&lt;/h3>
&lt;h2 id="枚举类型">枚举类型&lt;/h2>
&lt;ul>
&lt;li>枚举类型&lt;code>(enumeration)&lt;/code>使我们可以将一组整型常量组织在一起。枚举属于字面值常量类型。&lt;/li>
&lt;li>&lt;strong>限定作用域的枚举类型(scoped enumeration)&lt;/strong>：首先是关键字&lt;code>enum class(或enum struct)&lt;/code>，随后是枚举类型名字以及用花括号括起来的以逗号分隔的枚举成员列表，最后是一个分号。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">open_modes&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">output&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">append&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>不限定作用域的枚举类型&lt;code>(unscoped enumeration)&lt;/code>：省略关键字&lt;code>class(或struct)&lt;/code>，枚举类型的名字是可选的。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="nc">color&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">red&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">yellow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">green&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">floatPrec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">doublePrec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">double_doublePrec&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="类成员指针">类成员指针&lt;/h2>
&lt;p>&lt;strong>成员指针&lt;/strong>：指可以指向类的非静态成员的指针。&lt;/p>
&lt;h3 id="数据成员指针">数据成员指针&lt;/h3>
&lt;ul>
&lt;li>和其他指针一样，在声明成员指针时也使用*来表示当前声明的名字是一个指针。与普通指针不同的时，成员指针还必须包含成员所属的类。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// pdata可以指向一个常量(非常量)Screen对象的string成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="n">string&lt;/span> &lt;span class="n">Screen&lt;/span>&lt;span class="o">::*&lt;/span>&lt;span class="n">pdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// C++11
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">auto&lt;/span> &lt;span class="n">pdata&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">Screen&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">contents&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>当我们初始化一个成员指针或为成员指针赋值时，该指针没有指向任何数据。成员指针指定了成员而非该成员所属的对象，只有当解引用成员指针时才提供对象的信息。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Screen&lt;/span> &lt;span class="n">myScreen&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pScreen&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">myScreen&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">auto&lt;/span> &lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">myScreen&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">pdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">s&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">pScreen&lt;/span>&lt;span class="o">-&amp;gt;*&lt;/span>&lt;span class="n">pdata&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="成员函数指针">成员函数指针&lt;/h3>
&lt;ul>
&lt;li>因为函数调用运算符的优先级较高，所以在声明指向成员函数的指针并使用这些的指针进行函数调用时，括号必不可少：&lt;code>(C::*p)(parms)&lt;/code>和&lt;code>(obj.*p)(args)&lt;/code>。&lt;/li>
&lt;/ul>
&lt;h3 id="将成员函数用作可调用对象">将成员函数用作可调用对象&lt;/h3>
&lt;h2 id="嵌套类">嵌套类&lt;/h2>
&lt;ul>
&lt;li>一个类可以定义在另一个类的内部，前者称为嵌套类(nested class)或嵌套类型(nested type)。&lt;strong>嵌套类常用于定义作为实现部分的类&lt;/strong>。&lt;/li>
&lt;li>嵌套类是一个独立的类，与外层类基本没有什么关系。特别是，外层类的对象和嵌套类的对象是相互独立的。&lt;/li>
&lt;li>嵌套类的名字在外层类作用域中是可见的，在外层类作用域之外不可见。&lt;/li>
&lt;/ul>
&lt;h2 id="union一种节省空间的类">union：一种节省空间的类&lt;/h2>
&lt;ul>
&lt;li>&lt;code>联合(union)&lt;/code>是一种特殊的类。一个&lt;code>union&lt;/code>可以有多个数据成员，但是在任意时刻只有一个数据成员可以有值。&lt;strong>它不能含有引用类型的成员和虚函数&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Token类型的对象只有一个成员，该成员的类型可能是下列类型中的任意一种
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">union&lt;/span> &lt;span class="nc">Token&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 默认情况下成员是共有的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">cval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">ival&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">dval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>匿名union(anonymous union)&lt;/code>是一个未命名的&lt;code>union&lt;/code>，并且在右花括号和分号之间没有任何声明。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">union&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">cval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">ival&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">double&lt;/span> &lt;span class="n">dval&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 可以直接访问它的成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">cal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ival&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">42&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;strong>注意：&lt;/strong> &lt;code>匿名union&lt;/code>不能包含受保护的成员或私有成员，也不能定义成员函数。&lt;/li>
&lt;/ul>
&lt;h2 id="局部类">局部类&lt;/h2>
&lt;ul>
&lt;li>&lt;code>局部类(local class)&lt;/code>：可以定义在某个函数的内部的类。它的类型只在定义它的作用域内可见。和嵌套类不同，局部类的成员受到严格限制。&lt;/li>
&lt;li>局部类的所有成员(包括函数在内)都必须完整定义在类的内部。因此，局部类的作用与嵌套类相比相差很远。&lt;/li>
&lt;li>&lt;strong>局部类不能使用函数作用域中的变量。&lt;/strong>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">inti&lt;/span> &lt;span class="n">si&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="nc">loc&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Bar是foo的局部类
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">Bar&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Loc&lt;/span> &lt;span class="n">locVal&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 正确：使用一个局部类型名
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">barVal&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="n">fooBar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">Loc&lt;/span> &lt;span class="n">l&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// 正确：默认实参是Loc::a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">barVal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 错误：val是foo的局部变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">barVal&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">::&lt;/span>&lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 正确：使用一个全局对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">barVal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">si&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 正确：使用一个静态局部对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">locVal&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 正确：使用一个枚举成员
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="err">；&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="固有的不可移植的特性">固有的不可移植的特性&lt;/h2>
&lt;p>所谓不可移植的特性是指&lt;strong>因机器而异的特性&lt;/strong>，当将含有不可移植特性的程序从一台机器转移到另一台机器上时，通常需要重新编写该程序。&lt;/p>
&lt;h3 id="位域">位域&lt;/h3>
&lt;ul>
&lt;li>类可以将其(非静态)数据成员定义成&lt;strong>位域(bit-field)&lt;/strong>，在一个位域中含有一定数量的二进制位。当一个程序需要向其他程序或硬件设备传递二进制数据时，通常会用到位域。&lt;/li>
&lt;li>位域在内存中的布局是与机器相关的。&lt;/li>
&lt;li>位域的类型必须是整型或枚举类型。因为带符号位域的行为是由具体实现确定的，通常情况下我们使用无符号类型保存一个位域。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">Bit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">class&lt;/span> &lt;span class="nc">File&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Bit&lt;/span> &lt;span class="nl">mode&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Bit&lt;/span> &lt;span class="nl">modified&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Bit&lt;/span> &lt;span class="nl">prot_owner&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Bit&lt;/span> &lt;span class="nl">prot_group&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Bit&lt;/span> &lt;span class="nl">prot_world&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">public&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="nc">modes&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="n">READ&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mo">01&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">WRITE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mo">02&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">EXECUTE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mo">03&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">File&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modes&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">close&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">write&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">bool&lt;/span> &lt;span class="nf">isRead&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="k">const&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setWrite&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 使用位域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">write&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">modified&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">close&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">modified&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// ...保存内容
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">File&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">File&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">open&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">File&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">modes&lt;/span> &lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">mode&lt;/span> &lt;span class="o">|=&lt;/span> &lt;span class="n">READ&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// 按默认方式设置READ
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 其他处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span> &lt;span class="o">&amp;amp;&lt;/span> &lt;span class="n">WRITE&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">// 如果打开了READ和WRITE
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// 按照读/写方式打开文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="volatile-限定符">volatile 限定符&lt;/h3>
&lt;ul>
&lt;li>当对象的值可能在程序的控制或检测之外被改变时，应该将该对象声明为&lt;code>volatile&lt;/code>。关键字&lt;code>volatile&lt;/code>告诉编译器不应对这样的对象进行优化。&lt;/li>
&lt;li>&lt;code>const&lt;/code>和&lt;code>volatile&lt;/code>的一个重要区别是不能使用合成的拷贝/移动构造函数及赋值运算符初始化&lt;code>volatile&lt;/code>对象或者从&lt;code>volatile&lt;/code>对象赋值。&lt;/li>
&lt;/ul>
&lt;h3 id="链接指示extern-c">链接指示：extern &amp;ldquo;C&amp;rdquo;&lt;/h3>
&lt;ul>
&lt;li>&lt;code>C++&lt;/code>使用&lt;code>链接指示(linkage directive)&lt;/code>指出任意非&lt;code>C++&lt;/code>函数所用的语言。&lt;/li>
&lt;li>要想把&lt;code>C++&lt;/code>代码和其他语言(包括&lt;code>C&lt;/code>语言)编写的代码放在一起使用，要求我们必须有权访问该语言的编译器，并且这个编译器与当前的&lt;code>C++&lt;/code>编译器是兼容的。&lt;/li>
&lt;li>&lt;code>C++&lt;/code>从 C 语言继承的标准库函数可以定义为&lt;code>C&lt;/code>函数，但并非必须：决定使用&lt;code>C&lt;/code>还是&lt;code>C++&lt;/code>实现的&lt;code>C&lt;/code>标准库，是每个&lt;code>C++&lt;/code>实现的事情。&lt;/li>
&lt;li>有时需要在 C 和 C++中编译同一个源文件，为了实现这一目的，在编译 C++版本的程序时预处理器定义&lt;code>__cplusplus&lt;/code>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef __cplusplus
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="s">&amp;#34;C&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>