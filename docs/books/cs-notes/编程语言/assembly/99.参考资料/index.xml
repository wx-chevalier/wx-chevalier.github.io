<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>99.参考资料 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/assembly/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <atom:link href="https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/assembly/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml" />
    <description>99.参考资料</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>99.参考资料</title>
      <link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/assembly/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
    </image>
    
    <item>
      <title>2023-Learn x86-64 assembly by writing a GUI from scratch</title>
      <link>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/assembly/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2023-learn-x86-64-assembly-by-writing-a-gui-from-scratch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cs-notes/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/assembly/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2023-learn-x86-64-assembly-by-writing-a-gui-from-scratch/</guid>
      <description>&lt;h1 id=&#34;learn-x86-64-assembly-by-writing-a-gui-from-scratch&#34;&gt;Learn x86-64 assembly by writing a GUI from scratch&lt;/h1&gt;
&lt;p&gt;Most people think assembly is only to be used to write toy programs for learning purposes, or to write a highly optimized version of a specific function inside a codebase written in a high-level language.&lt;/p&gt;
&lt;p&gt;Well, what if we wrote a whole program in assembly that opens a GUI window? It will be the hello world of the GUI world, but that still counts. Here is what we are working towards:&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://gaultier.github.io/blog/x11_x64_final.png&#34; alt=&#34;Result&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;I wanted to expand my knowledge of assembly and by doing something fun and motivating. It all originated from the observation that so many program binaries today are very big, often over 30 Mib (!), and I asked myself: How small a binary can be for a (very simplistic) GUI? Well, it turns out, very little. Spoiler alert: around 1 KiB!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am by no means an expert in assembly or in X11. I just hope to provide an entertaining, approachable article, something a beginner can understand. Something I wished I had found when I was learning those topics. If you spot an error, please open a &lt;a href=&#34;https://github.com/gaultier/blog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github issue&lt;/a&gt;!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#what-do-we-need&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What do we need?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#x11-basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;X11 basics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#main-in-x64-assembly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Main in x64 assembly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A stack primer
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#a-small-stack-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A small stack example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#opening-a-socket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Opening a socket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#connecting-to-the-server&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Connecting to the server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#sending-data-over-the-socket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sending data over the socket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#generating-ids&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Generating ids&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#opening-a-font&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Opening a font&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#creating-a-graphical-context&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creating a graphical context&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#creating-the-window&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creating the window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#mapping-the-window&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mapping the window&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#polling-for-server-messages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polling for server messages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#drawing-text&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Drawing text&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#the-end&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The end&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gaultier.github.io/blog/x11_x64.html#addendum-the-full-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Addendum: the full code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;what-do-we-need&#34;&gt;What do we need?&lt;/h2&gt;
&lt;p&gt;I will be using the &lt;code&gt;nasm&lt;/code&gt; assembler which is simple, cross-platform, fast, and has quite a readable syntax.&lt;/p&gt;
&lt;p&gt;For the GUI, I will be using X11 since I am based on Linux and it has some interesting properties that make it easy to do without external libraries. If you are running Wayland, it should work with XWayland out of the box, and perhaps also on macOS with XQuartz, but I have not tested those.&lt;/p&gt;
&lt;p&gt;Note that the only difference between *nix operating systems in the context of this program is the system call values. Since I am based on Linux I will be using the Linux system call values, but ‘porting’ this program to, say, FreeBSD, would only require to change those values, possibly using the nasm macros:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;%ifdef linux
  %define SYSCALL_EXIT 1
%elifdef freebsd
  %define SYSCALL_EXIT 60
%endif
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;%define&lt;/code&gt; and its variants are part of the macro system in &lt;code&gt;nasm&lt;/code&gt;, which is powerful but we will only use it here to define constants, just like in C: &lt;code&gt;#define FOO 3&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;No need for additional tooling to cross-compile, issues with dynamic libraries, libc differences, etc. Just compile on Linux by defining the right variable on the command line, send the binary to your friend on FreeBSD, and it just works(tm). That’s refreshing.&lt;/p&gt;
&lt;p&gt;So let’s dive in!&lt;/p&gt;
&lt;h2 id=&#34;x11-basics&#34;&gt;X11 basics&lt;/h2&gt;
&lt;p&gt;X11 is a server accessible over the network that handles windowing and rendering inside those windows. A client opens a socket, connects to the server, and sends commands in a specific format to open a window, draw shapes, text, etc. The server sends message about errors or events to the client.&lt;/p&gt;
&lt;p&gt;Most applications will want to use &lt;code&gt;libX11&lt;/code&gt; or &lt;code&gt;libxcb&lt;/code&gt; which offer a C API, but we want to do that ourselves.&lt;/p&gt;
&lt;p&gt;Where the server lives is actually not relevant for a client, it might run on the same machine or in a datacenter far far away. Of course, in the context of a desktop computer in 2023, it will be running on the same machine, but that’s a detail.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official documentation&lt;/a&gt; is pretty good, so in doubt we can refer to it.&lt;/p&gt;
&lt;h2 id=&#34;main-in-x64-assembly&#34;&gt;Main in x64 assembly&lt;/h2&gt;
&lt;p&gt;Let’s start slow with minimal program that simply exits with 0, and build from there.&lt;/p&gt;
&lt;p&gt;First, we tell nasm we are writing a 64 bit program and that we target x86_64. Then, we need a main function, which we call &lt;code&gt;_start&lt;/code&gt; and needs to be visible since this is the entry point of our program (hence the &lt;code&gt;global&lt;/code&gt; keyword):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Comments start with a semicolon!
BITS 64 ; 64 bits.
CPU X64 ; Target the x86_64 family of CPUs.

section .text
global _start
_start:
  xor rax, rax ; Set rax to 0. Not actually needed, it&amp;#39;s just to avoid having an empty body.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;section .text&lt;/code&gt; is telling &lt;code&gt;nasm&lt;/code&gt; and the linker, that what follows is code that should be placed in the text section of the executable.&lt;/p&gt;
&lt;p&gt;We will soon have a &lt;code&gt;section .data&lt;/code&gt; for our global variables.&lt;/p&gt;
&lt;p&gt;Note that those section usually get mapped by the OS to different pages in memory with different permissions (visible with &lt;code&gt;readelf -l&lt;/code&gt;) so that the text section is not writable and the data section is not executable, but that varies from OS to OS.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;_start&lt;/code&gt; function has a body that does nothing for now, but not for long. The actual name of the main function is actually up to us, it’s just that &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;_start&lt;/code&gt; is usual.&lt;/p&gt;
&lt;p&gt;We build and run our little program like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nasm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elf64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nasm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;nasm&lt;/code&gt; actually only produces an object file, so to get an executable out of it, we need to invoke the linker &lt;code&gt;ld&lt;/code&gt;. The flag &lt;code&gt;-g&lt;/code&gt; is telling &lt;code&gt;nasm&lt;/code&gt; to produce debugging information which is immensely useful when writing raw assembly, since firing the debugger is often our only recourse in face of a bug.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;To remove the debugging information, we can pass &lt;code&gt;-s&lt;/code&gt; to the linker, for example when we are about to ship our program and want to save a few KiB.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We finally have an executable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ file ./main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;main: ELF 64-bit LSB executable, x86-64, version &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;SYSV&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;, statically linked, with debug_info, not stripped
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can see the different sections with &lt;code&gt;readelf -a ./main&lt;/code&gt;, and it tells us that the &lt;code&gt;.text&lt;/code&gt; section, which contains our code, is only 3 bytes long.&lt;/p&gt;
&lt;p&gt;Now, if we try to run our program, it will segfault. That’s because we are expected by the operating system to exit (using the exit system call) ourselves. That’s what libc does for us in C programs, so let’s handle that:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;%define SYSCALL_EXIT 60

global _start:
_start:
  mov rax, SYSCALL_EXIT
  mov rdi, 0
  syscall
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;nasm&lt;/code&gt; uses the intel syntax: &lt;code&gt;&amp;lt;instruction&amp;gt; &amp;lt;destination&amp;gt;, &amp;lt;source&amp;gt;&lt;/code&gt;, so &lt;code&gt;mov rdi, 0&lt;/code&gt; puts 0 into the register &lt;code&gt;rdi&lt;/code&gt;. Other assemblers use the AT&amp;amp;T syntax which swaps the source and destination. My advice: pick one syntax and one assembler and stick to it, both syntaxes are fine and most tools have some support for both.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Following the System V ABI, which is required on Linux and other Unices for system calls, invoking a system call requires us to put the system call code in the register &lt;code&gt;rax&lt;/code&gt;, the parameters to the syscall (up to 6) in the registers &lt;code&gt;rdi&lt;/code&gt;, &lt;code&gt;rsi&lt;/code&gt;, &lt;code&gt;rdx&lt;/code&gt;, &lt;code&gt;rcx&lt;/code&gt;, &lt;code&gt;r8&lt;/code&gt;, &lt;code&gt;r9&lt;/code&gt;, and additional parameters, if any, on the stack (which will not happen in this program so we can forget about it). We then use the instruction &lt;code&gt;syscall&lt;/code&gt; and check &lt;code&gt;rax&lt;/code&gt; for the return value, &lt;code&gt;0&lt;/code&gt; usually meaning: no error.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that Linux has a ‘fun’ difference, which is that the fourth parameter of a system call is actually passed using the register &lt;code&gt;r10&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that the System V ABI is required when making system calls and when interfacing with C but we are free to use whatever conventions we want in our own assembly code. For a long time, Go was using a different calling convention than the System V ABI, for example, when calling functions (passing arguments on the stack). Most tools (debuggers, profilers) expect the System V ABI though, so I recommend sticking to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Back to our program: when we run it, we see…nothing. That’s because everything went well, true to the UNIX philosophy!&lt;/p&gt;
&lt;p&gt;We can check the exit code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./main&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Changing &lt;code&gt;mov rdi, 0&lt;/code&gt; to &lt;code&gt;mov rdi, 8&lt;/code&gt; will now result in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ./main&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;m&#34;&gt;8&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Another way to observe system calls made by a program is with &lt;code&gt;strace&lt;/code&gt;, which will also prove very useful when troubleshooting. On some BSD, its equivalent is &lt;code&gt;truss&lt;/code&gt; or &lt;code&gt;dtruss&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;execve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./main&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./main&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x7ffc60e6bf10&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 60 vars */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                                 &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;+++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exited&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s change it back to 0 and continue.&lt;/p&gt;
&lt;h2 id=&#34;a-stack-primer&#34;&gt;A stack primer&lt;/h2&gt;
&lt;p&gt;Before we can continue, we need to know the basics of how the stack works in assembly since we have no friendly compiler to do that for us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The three most important things about the stack are:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It grows downwards: to reserve more space on the stack, we decrease the value of &lt;code&gt;rsp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A function must restore the stack pointer to its original value before the function returns, meaning, either remember the original value and set &lt;code&gt;rsp&lt;/code&gt; to this, or, match every decrement by an increment of the same value.&lt;/li&gt;
&lt;li&gt;Before a function call, the stack pointer needs to be 16 bytes aligned, according to the System V ABI. Also, at the very beginning of a function, the stack pointer value is: &lt;code&gt;16*N + 8&lt;/code&gt;. That’s because before the function call, its value was 16 byte aligned, i.e. &lt;code&gt;16*N&lt;/code&gt;, and the &lt;code&gt;call&lt;/code&gt; instruction pushes on the stack the current location (the register &lt;code&gt;rip&lt;/code&gt;, which is 8 bytes long), to know where to jump when the called function returns.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not abiding by those rules will result in nasty crashes, so be warned. That’s because the location of where to jump when the function returns will be likely overwritten and the program will jump to the wrong location. That, or the stack content will be overwritten and the program will operate on wrong values. Bad either way.&lt;/p&gt;
&lt;h3 id=&#34;a-small-stack-example&#34;&gt;A small stack example&lt;/h3&gt;
&lt;p&gt;Let’s write a function that prints &lt;code&gt;hello&lt;/code&gt; to the standard out, using the stack, to learn the ropes.&lt;/p&gt;
&lt;p&gt;We need to reserve (at least) 5 bytes on the stack, since that’s the length in bytes of &lt;code&gt;hello&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The stack looks like this:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&amp;hellip;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;rbp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;And &lt;code&gt;rsp&lt;/code&gt; points to the bottom of it.&lt;/p&gt;
&lt;p&gt;Here’s how we access each element:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Memory location (example)&lt;/th&gt;
&lt;th&gt;Assembly code&lt;/th&gt;
&lt;th&gt;Stack element&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0x1016&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1015&lt;/td&gt;
&lt;td&gt;rsp + 5&lt;/td&gt;
&lt;td&gt;rbp&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1014&lt;/td&gt;
&lt;td&gt;rsp + 4&lt;/td&gt;
&lt;td&gt;o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1013&lt;/td&gt;
&lt;td&gt;rsp + 3&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1012&lt;/td&gt;
&lt;td&gt;rsp + 2&lt;/td&gt;
&lt;td&gt;l&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1011&lt;/td&gt;
&lt;td&gt;rsp + 1&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0x1010&lt;/td&gt;
&lt;td&gt;rsp + 0&lt;/td&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;We then pass the address on the stack of the beginning of the string to the &lt;code&gt;write&lt;/code&gt; syscall, as well as its length:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;%define SYSCALL_WRITE 1
%define STDOUT 1

print_hello:
  push rbp ; Save rbp on the stack to be able to restore it at the end of the function.
  mov rbp, rsp ; Set rbp to rsp

  sub rsp, 5 ; Reserve 5 bytes of space on the stack.
  mov BYTE [rsp + 0], &amp;#39;h&amp;#39; ; Set each byte on the stack to a string character.
  mov BYTE [rsp + 1], &amp;#39;e&amp;#39;
  mov BYTE [rsp + 2], &amp;#39;l&amp;#39;
  mov BYTE [rsp + 3], &amp;#39;l&amp;#39;
  mov BYTE [rsp + 4], &amp;#39;o&amp;#39;

  ; Make the write syscall
  mov rax, SYSCALL_WRITE
  mov rdi, STDOUT ; Write to stdout.
  lea rsi, [rsp] ; Address on the stack of the string.
  mov rdx, 5 ; Pass the length of the string which is 5.
  syscall

  add rsp, 5 ; Restore the stack to its original value.

  pop rbp ; Restore rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;lea destination, source&lt;/code&gt; loads the effective address of the source into the destination, which is how C pointers are implemented. To dereference a mememory location we use square brackets. So, assuming we just have loaded an address into &lt;code&gt;rdi&lt;/code&gt; with &lt;code&gt;lea&lt;/code&gt;, e.g. &lt;code&gt;lea rdi, [hello_world]&lt;/code&gt;, and we want to store the value at the address into &lt;code&gt;rax&lt;/code&gt;, we do: &lt;code&gt;mov rax, [rdi]&lt;/code&gt;. We usually have to tell &lt;code&gt;nasm&lt;/code&gt; how many bytes to dereference with &lt;code&gt;BYTE&lt;/code&gt;, &lt;code&gt;WORD&lt;/code&gt;, &lt;code&gt;DWORD&lt;/code&gt;, &lt;code&gt;QWORD&lt;/code&gt; so: &lt;code&gt;mov rax, DWORD [rdi]&lt;/code&gt;, because &lt;code&gt;nasm&lt;/code&gt; does not keep track of the sizes of each variable. That’s also what the C compiler does when we dereference a &lt;code&gt;int8_t&lt;/code&gt;, &lt;code&gt;int16_t&lt;/code&gt;, &lt;code&gt;int32_t&lt;/code&gt;, and &lt;code&gt;int64_t&lt;/code&gt; pointer, respectively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is a lot to unpack here.&lt;/p&gt;
&lt;p&gt;First, what is &lt;code&gt;rbp&lt;/code&gt;? That’s a register like any other. But, you can choose to follow the convention of not using this register like the other registers, to store arbitrary values, and instead, use it to store a linked list of call frames. That’s a lot of words.&lt;/p&gt;
&lt;p&gt;Basically, at the very beginning of a function, the value of &lt;code&gt;rbp&lt;/code&gt; is stored on the stack (that’s &lt;code&gt;push rbp&lt;/code&gt;). Since &lt;code&gt;rbp&lt;/code&gt; stores an address (the address of the frame that’s called us), we are storing on the stack the address of the caller in a known location.&lt;/p&gt;
&lt;p&gt;Immediately after that, we set &lt;code&gt;rbp&lt;/code&gt; to &lt;code&gt;rsp&lt;/code&gt;, that is, to the stack pointer at the beginning of the function. &lt;code&gt;push rbp&lt;/code&gt; and &lt;code&gt;mov rbp, rsp&lt;/code&gt; are thus usually referred to as the function prolog.&lt;/p&gt;
&lt;p&gt;For the rest of the function body, we treat &lt;code&gt;rbp&lt;/code&gt; as a constant and only decrease &lt;code&gt;rsp&lt;/code&gt; if we need to reserve space on the stack.&lt;/p&gt;
&lt;p&gt;So if function A calls function B which in turn calls function C, and each function stores on the stack the address of the caller frame, we know where to find on the stack the address of each. Thus, we can print a stack trace in any location of our program simply by inspecting the stack. Pretty nifty. That’s already very useful to profilers and other similar tools.&lt;/p&gt;
&lt;p&gt;We must not forget of course, just before we exit the function, to restore &lt;code&gt;rbp&lt;/code&gt; to its original value (which is still on the stack at that point): that’s &lt;code&gt;pop rbp&lt;/code&gt;. This is also known as the function epilog. Another way to look at it is that we remove the last element of the linked list of call frames, since we are exiting the leaf function.&lt;/p&gt;
&lt;p&gt;Don’t worry if you have not fully understood everything, just remember to always have the function epilogs and prologs and you’ll be fine:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;my_function:
  push rbp
  mov rbp, rsp

  sub rsp, N

  [...]


  add rsp, N
  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: There is an optimization method that uses &lt;code&gt;rbp&lt;/code&gt; as a standard register (with a C compiler, that’s the flag &lt;code&gt;-fomit-frame-pointer&lt;/code&gt;), which means we lose the information about the call stack. My advice is: never do this, it is no worth it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Wait, but didn’t you say the stack needs to be 16 byte aligned (that is, a multiple of 16)? Last time I checked, 5 is not really a multiple of 16!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Good catch! The only reason why this program works, is that &lt;code&gt;print_hello&lt;/code&gt; is a leaf function, meaning it does not call another function. Remember, the stack needs to be 16 bytes aligned when we do a &lt;code&gt;call&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;So the correct way would be:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;print_hello:
  push rbp
  mov rbp, rsp

  sub rsp, 16
  mov BYTE [rsp + 0], &amp;#39;h&amp;#39;
  mov BYTE [rsp + 1], &amp;#39;e&amp;#39;
  mov BYTE [rsp + 2], &amp;#39;l&amp;#39;
  mov BYTE [rsp + 3], &amp;#39;l&amp;#39;
  mov BYTE [rsp + 4], &amp;#39;o&amp;#39;

  mov rax, SYSCALL_WRITE
  mov rdi, STDOUT
  lea rsi, [rsp]
  mov rdx, 5
  syscall

  call print_world

  add rsp, 16

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since when we enter the function, the value of &lt;code&gt;rsp&lt;/code&gt; is &lt;code&gt;16*N+8&lt;/code&gt;, and pushing &lt;code&gt;rbp&lt;/code&gt; increases it by 8, the stack pointer is 16 bytes aligned at the point of &lt;code&gt;sub rsp, 16&lt;/code&gt;. Decrementing it by 16 (or a multiple of 16) keeps it 16 bytes aligned.&lt;/p&gt;
&lt;p&gt;We know can safely call another function from within &lt;code&gt;print_hello&lt;/code&gt;:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;print_world:
  push rbp
  mov rbp, rsp

  sub rsp, 16
  mov BYTE [rsp + 0], &amp;#39; &amp;#39;
  mov BYTE [rsp + 1], &amp;#39;w&amp;#39;
  mov BYTE [rsp + 2], &amp;#39;o&amp;#39;
  mov BYTE [rsp + 3], &amp;#39;r&amp;#39;
  mov BYTE [rsp + 4], &amp;#39;l&amp;#39;
  mov BYTE [rsp + 5], &amp;#39;d&amp;#39;

  mov rax, SYSCALL_WRITE
  mov rdi, STDOUT
  lea rsi, [rsp]
  mov rdx, 6
  syscall

  add rsp, 16

  pop rbp
  ret

print_hello:
  push rbp
  mov rbp, rsp

  sub rsp, 16
  mov BYTE [rsp + 0], &amp;#39;h&amp;#39;
  mov BYTE [rsp + 1], &amp;#39;e&amp;#39;
  mov BYTE [rsp + 2], &amp;#39;l&amp;#39;
  mov BYTE [rsp + 3], &amp;#39;l&amp;#39;
  mov BYTE [rsp + 4], &amp;#39;o&amp;#39;

  mov rax, SYSCALL_WRITE
  mov rdi, STDOUT
  lea rsi, [rsp]
  mov rdx, 5
  syscall

  call print_world

  add rsp, 16

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And we get &lt;code&gt;hello world&lt;/code&gt; as an output.&lt;/p&gt;
&lt;p&gt;Now, try to do &lt;code&gt;sub rsp, 5&lt;/code&gt; in &lt;code&gt;print_hello&lt;/code&gt;, and your program &lt;em&gt;may&lt;/em&gt; crash. There is no guarantee, that’s what makes it hard to track down.&lt;/p&gt;
&lt;p&gt;My advice is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Always use the standard function prologs and epilogs&lt;/li&gt;
&lt;li&gt;Always increment/decrement &lt;code&gt;rsp&lt;/code&gt; by (a multiple of) 16&lt;/li&gt;
&lt;li&gt;If you have to decrement &lt;code&gt;rsp&lt;/code&gt; by a value that’s unknown at compile time (similar to how &lt;code&gt;alloca()&lt;/code&gt; works in C), you can &lt;code&gt;and rsp, -16&lt;/code&gt; to 16 bytes align it.&lt;/li&gt;
&lt;li&gt;Address items on the stack relative to &lt;code&gt;rsp&lt;/code&gt;, i.e. &lt;code&gt;mov BYTE [rsp + 4], &#39;o&#39;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And you’ll be safe.&lt;/p&gt;
&lt;p&gt;The last point is interesting, see for yourself:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; p -100 &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; -16
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -112
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;gdb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; p -112 &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt; -16
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -112
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which translates in assembly to:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;sub rsp, 100
and rsp, -16
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, following those conventions means that our assembly functions can be safely called from C or other languages following the &lt;a href=&#34;https://wiki.osdev.org/System_V_ABI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;System V ABI&lt;/a&gt;, without any modification, which is great.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;I have not talked about the red zone which is a 128 byte region at the bottom of the stack which our program is free to use as it pleases without having to change the stack pointer. In my opinion, it is not helpful and creates hard to track bugs, so I do not recommend to use it. To disable it entirely, run: &lt;code&gt;nasm -f elf64 -g main.nasm &amp;amp;&amp;amp; cc main.o -static -o main -mno-red-zone -nostdlib&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;opening-a-socket&#34;&gt;Opening a socket&lt;/h2&gt;
&lt;p&gt;We now are ready to open a socket with the &lt;code&gt;socket(2)&lt;/code&gt; syscall, so we add a few constants, taken from the libc headers (&lt;em&gt;note that those values might actually be different on a different Unix, I have not checked. Again, a few &lt;code&gt;%ifdef&lt;/code&gt; can easily remedy this discrepancy&lt;/em&gt;):&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;%define AF_UNIX 1
%define SOCK_STREAM 1

%define SYSCALL_SOCKET 41
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;AF_UNIX&lt;/code&gt; constant means we want a Unix domain socket, and &lt;code&gt;SOCK_STREAM&lt;/code&gt; means TCP. We use a domain socket since we now that our server is running on the same machine and it should be faster, but we could change it to &lt;code&gt;AF_INET&lt;/code&gt; to connect to a remote IPv4 address for example.&lt;/p&gt;
&lt;p&gt;We then fill the relevant registers with those values and invoke the system call:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;  mov rax, SYSCALL_SOCKET
  mov rdi, AF_UNIX ; Unix socket.
  mov rsi, SOCK_STREAM ; Tcp-like.
  mov rdx, 0 ; Automatic protocol.
  syscall
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The C equivalent would be: &lt;code&gt;socket(AF_UNIX, SOCK_STREAM, 0);&lt;/code&gt;. So you see that if we fill the registers in the same order as the C function parameters, we stay close to what C code would do.&lt;/p&gt;
&lt;p&gt;The whole program now looks like this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;BITS 64 ; 64 bits.
CPU X64 ; Target the x86_64 family of CPUs.

section .text

%define AF_UNIX 1
%define SOCK_STREAM 1

%define SYSCALL_SOCKET 41
%define SYSCALL_EXIT 60

global _start:
_start:
  ; open a unix socket.
  mov rax, SYSCALL_SOCKET
  mov rdi, AF_UNIX ; Unix socket.
  mov rsi, SOCK_STREAM ; Tcp-like.
  mov rdx, 0 ; automatic protocol.
  syscall


  ; The end.
  mov rax, SYSCALL_EXIT
  mov rdi, 0
  syscall
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Building and running it under &lt;code&gt;strace&lt;/code&gt; shows that it works and we get a socket with the file descriptor &lt;code&gt;3&lt;/code&gt; (in this case, it might be different for you if you are following at home):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nasm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elf64&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;g&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nasm&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ld&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;strace&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;execve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./main&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;./main&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mh&#34;&gt;0x7ffe54dfe550&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* 60 vars */&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SOCK_STREAM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;         &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;                                 &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;+++&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;exited&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+++&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;connecting-to-the-server&#34;&gt;Connecting to the server&lt;/h2&gt;
&lt;p&gt;Now that we have created a socket, we can connect to the server with the &lt;code&gt;connect(2)&lt;/code&gt; system call.&lt;/p&gt;
&lt;p&gt;It’s a good time to extract that logic in its own little function, just like in any other high-level language.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;x11_connect_to_server:
  ; TODO
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In assembly, a function is simply a label we can jump to. But for clarity, both for readers of the code and tools, we can add a hint that this is a real function we can call, like this: &lt;code&gt;call x11_connect_to_server&lt;/code&gt;. This will improve the call stack for example when using &lt;code&gt;strace -k&lt;/code&gt;. This hint has the form (in &lt;code&gt;nasm&lt;/code&gt;): &lt;code&gt;static &amp;lt;name of the function&amp;gt;:function&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Of course, we also need to add our standard function prolog and epilog:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;x11_connect_to_server:
static x11_connect_to_server:function
  push rbp
  mov rbp, rsp

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;An additional help when reading functions in assembly code is adding comments describing what parameters they accept and what is the return value, if any. Since there is no language level feature for this, we resort to comments:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Create a UNIX domain socket and connect to the X11 server.
; @returns The socket file descriptor.
x11_connect_to_server:
static x11_connect_to_server:function
  push rbp
  mov rbp, rsp

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;First, let’s move the socket creation logic to our function and call it in the program:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Create a UNIX domain socket and connect to the X11 server.
; @returns The socket file descriptor.
x11_connect_to_server:
static x11_connect_to_server:function
  push rbp
  mov rbp, rsp

  ; Open a Unix socket: socket(2).
  mov rax, SYSCALL_SOCKET
  mov rdi, AF_UNIX ; Unix socket.
  mov rsi, SOCK_STREAM ; Tcp-like.
  mov rdx, 0 ; Automatic protocol.
  syscall

  cmp rax, 0
  jle die

  mov rdi, rax ; Store socket fd in `rdi` for the remainder of the function.

  pop rbp
  ret

die:
  mov rax, SYSCALL_EXIT
  mov rdi, 1
  syscall

_start:
global _start:function
  call x11_connect_to_server

  ; The end.
  mov rax, SYSCALL_EXIT
  mov rdi, 0
  syscall
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The error checking is very simplistic: we only check that the return value of the system call (in &lt;code&gt;rax&lt;/code&gt;) is what we expect, otherwise we exit the program with a non-zero code by jumping to the &lt;code&gt;die&lt;/code&gt; section.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;jle&lt;/code&gt; is a conditional jump, which inspects global flags, hopefully set just before with &lt;code&gt;cmp&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;, and jumps to a label if the condition is true. Here, we compare the returned value with 0, and if it is lower or equal to 0, we jump to the error label. That’s how we implement conditionals and loops.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;p&gt;Ok, we can finally connect to the server now. The &lt;code&gt;connect(2)&lt;/code&gt; system call takes the address of a &lt;code&gt;sockaddr_un&lt;/code&gt; structure as the second argument. This structure is too big to fit in a register.&lt;/p&gt;
&lt;p&gt;This is the first syscall we encounter that needs to be passed a pointer, in other words, the address of a region in memory. That region can be on the stack or on the heap, or even be our own executable mapped in memory. That’s assembly, we get to do whatever we want.&lt;/p&gt;
&lt;p&gt;Since we want to keep things simple and fast, we will store everything in this program on the stack. And since we have 8 MiB of it (according to &lt;code&gt;limit&lt;/code&gt;, on my machine, that is), it’ll be plenty enough. Actually, the most space we will need on the stack in this program will be 32 KiB.&lt;/p&gt;
&lt;p&gt;The size of the &lt;code&gt;sockaddr_un&lt;/code&gt; structure is 110 bytes, so we reserve 112 to align &lt;code&gt;rsp&lt;/code&gt; to 16 bytes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nasm does have structs, but they are rather a way to define offsets with a name, than structures like in C with a specific syntax to address a specific field. For the sake of simplicity, I’ll use the manual way, without &lt;code&gt;nasm&lt;/code&gt; structs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We set the first 2 bytes of this structure to &lt;code&gt;AF_UNIX&lt;/code&gt; since this is a domain socket. Then comes the path of the Unix domain socket which X11 expects to be in a certain format. We want to display our window on the first monitor starting at 0, so the string is: &lt;code&gt;/tmp/.X11-unix/X0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In C, we would do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sockaddr_un&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sun_family&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sun_path&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/tmp/.X11-unix/X0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;connect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x11_socket_fd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;sockaddr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*)&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How do we translate that to assembly, especially the string part?&lt;/p&gt;
&lt;p&gt;We could set each byte to each character of the string in the structure, on the stack, manually, one by one. Another &lt;a href=&#34;https://en.wikibooks.org/wiki/X86_Assembly/Data_Transfer#Move_String&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;way&lt;/a&gt; to do it is to use the &lt;code&gt;rep movsb&lt;/code&gt; idiom, which instructs the CPU to copy a character from a string A to another string B, N times. This is exactly what we need!&lt;/p&gt;
&lt;p&gt;The way it works is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We put the string in the &lt;code&gt;.rodata&lt;/code&gt; section (same as the data section but read-only)&lt;/li&gt;
&lt;li&gt;We load its address in &lt;code&gt;rsi&lt;/code&gt; (it’s the source)&lt;/li&gt;
&lt;li&gt;We load the address of the string in the structure on the stack in &lt;code&gt;rdi&lt;/code&gt; (it’s the destination)&lt;/li&gt;
&lt;li&gt;We set &lt;code&gt;rcx&lt;/code&gt; to the number of bytes to be copied&lt;/li&gt;
&lt;li&gt;We use &lt;code&gt;cld&lt;/code&gt; to clear the &lt;code&gt;DF&lt;/code&gt; flag to ensure the copy is done forwards (since it can also be done backwards)&lt;/li&gt;
&lt;li&gt;We call &lt;code&gt;rep movsb&lt;/code&gt; and voila&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s basically &lt;code&gt;memcpy&lt;/code&gt; from C.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a interesting case: we can see that some instructions expect some of their operands to be in certain registers and there is no way around it. So, we have to plan ahead and expect those registers to be overwritten. If we need to keep their original values around, we have to store those values elsewhere, for example on the stack (that’s called spilling) or in other registers. This is a broader topic of register allocation which is NP-hard! In small functions, it’s manageable though.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;First, the &lt;code&gt;.rodata&lt;/code&gt; section:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;section .rodata

sun_path: db &amp;#34;/tmp/.X11-unix/X0&amp;#34;, 0
static sun_path:data
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we copy the string:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;  mov WORD [rsp], AF_UNIX ; Set sockaddr_un.sun_family to AF_UNIX
  ; Fill sockaddr_un.sun_path with: &amp;#34;/tmp/.X11-unix/X0&amp;#34;.
  lea rsi, sun_path
  mov r12, rdi ; Save the socket file descriptor in `rdi` in `r12`.
  lea rdi, [rsp + 2]
  cld ; Move forward
  mov ecx, 19 ; Length is 19 with the null terminator.
  rep movsb ; Copy.
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;ecx&lt;/code&gt; is the 32 bit form of the register &lt;code&gt;rcx&lt;/code&gt;, meaning we only set here the lower 32 bits of the 64 bit register. &lt;a href=&#34;https://wiki.osdev.org/CPU_Registers_x86-64&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This handy table&lt;/a&gt; lists all of the forms for all of the registers. But be cautious of the pitfall case of only setting a value in part of a register, and then using the whole register later. The rest of the bits that have not been set will contain some past value, which is hard to troubleshoot. The solution is to use &lt;code&gt;movzx&lt;/code&gt; to zero extend, meaning setting the rest of the bits to 0. A good way to visualize this is to use &lt;code&gt;info registers&lt;/code&gt; within gdb, and that will display for each register the value for each of its forms, e.g. for &lt;code&gt;rcx&lt;/code&gt;, it will display the value for &lt;code&gt;rcx&lt;/code&gt;, &lt;code&gt;ecx&lt;/code&gt;, &lt;code&gt;cx&lt;/code&gt;, &lt;code&gt;ch&lt;/code&gt;, &lt;code&gt;cl&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then, we do the syscall, check the returned value, exit the program if the value is not 0, and finally return the socket file descriptor, which will be used every time in the rest of the program when talking to the X11 server.&lt;/p&gt;
&lt;p&gt;Everything together, it looks like:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Create a UNIX domain socket and connect to the X11 server.
; @returns The socket file descriptor.
x11_connect_to_server:
static x11_connect_to_server:function
  push rbp
  mov rbp, rsp

  ; Open a Unix socket: socket(2).
  mov rax, SYSCALL_SOCKET
  mov rdi, AF_UNIX ; Unix socket.
  mov rsi, SOCK_STREAM ; Tcp-like.
  mov rdx, 0 ; Automatic protocol.
  syscall

  cmp rax, 0
  jle die

  mov rdi, rax ; Store socket fd in `rdi` for the remainder of the function.

  sub rsp, 112 ; Store struct sockaddr_un on the stack.

  mov WORD [rsp], AF_UNIX ; Set sockaddr_un.sun_family to AF_UNIX
  ; Fill sockaddr_un.sun_path with: &amp;#34;/tmp/.X11-unix/X0&amp;#34;.
  lea rsi, sun_path
  mov r12, rdi ; Save the socket file descriptor in `rdi` in `r12`.
  lea rdi, [rsp + 2]
  cld ; Move forward
  mov ecx, 19 ; Length is 19 with the null terminator.
  rep movsb ; Copy.

  ; Connect to the server: connect(2).
  mov rax, SYSCALL_CONNECT
  mov rdi, r12
  lea rsi, [rsp]
  %define SIZEOF_SOCKADDR_UN 2+108
  mov rdx, SIZEOF_SOCKADDR_UN
  syscall

  cmp rax, 0
  jne die

  mov rax, rdi ; Return the socket fd.

  add rsp, 112
  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We are ready to talk to the X11 server!&lt;/p&gt;
&lt;h2 id=&#34;sending-data-over-the-socket&#34;&gt;Sending data over the socket&lt;/h2&gt;
&lt;p&gt;There is the &lt;code&gt;send(2)&lt;/code&gt; syscall to do this, but we can keep it simple and use the generic &lt;code&gt;write(2)&lt;/code&gt; syscall instead. Either way works.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;%define SYSCALL_WRITE 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The C structure for the handshake looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;typedef&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;u8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;u8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pad1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;u16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;major&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;minor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;u16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auth_proto&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;auth_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;u16&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pad2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x11_connection_req_t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pad*&lt;/code&gt; fields can be ignored since they are padding and their value is not read by the server.&lt;/p&gt;
&lt;p&gt;For our handshake, we need to set the &lt;code&gt;order&lt;/code&gt; to be &lt;code&gt;l&lt;/code&gt;, that is, little-endian, since X11 can be told to interpret message as big or little endian. Since x64 is little-endian, we do not want to have a endianness translation layer and so we stick to little-endian.&lt;/p&gt;
&lt;p&gt;We also need to set the &lt;code&gt;major&lt;/code&gt; field, which is the version, to &lt;code&gt;11&lt;/code&gt;. I’ll leave it to the reader to guess why.&lt;/p&gt;
&lt;p&gt;In C, we would do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;x11_connection_req_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;l&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;major&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This structure is only 12 bytes long, but since we will have to read the response from the server which is quite big (around 14 KiB during my testing), we will right away reserve a lot of space on the stack, 32 KiB, to be safe:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;  sub rsp, 1&amp;lt;&amp;lt;15
  mov BYTE [rsp + 0], &amp;#39;l&amp;#39; ; Set order to &amp;#39;l&amp;#39;.
  mov WORD [rsp + 2], 11 ; Set major version to 11.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we send it to the server:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;  ; Send the handshake to the server: write(2).
  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 12*8
  syscall

  cmp rax, 12*8 ; Check that all bytes were written.
  jnz die
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After that, we read the server response, which should be at first 8 bytes:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;  ; Read the server response: read(2).
  ; Use the stack for the read buffer.
  ; The X11 server first replies with 8 bytes. Once these are read, it replies with a much bigger message.
  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 8
  syscall

  cmp rax, 8 ; Check that the server replied with 8 bytes.
  jnz die

  cmp BYTE [rsp], 1 ; Check that the server sent &amp;#39;success&amp;#39; (first byte is 1).
  jnz die
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The first byte in the server response is &lt;code&gt;0&lt;/code&gt; for failure and &lt;code&gt;1&lt;/code&gt; for success (and &lt;code&gt;2&lt;/code&gt; for authentication but we will not need it here).&lt;/p&gt;
&lt;p&gt;The server send sends a big message with a lot of general information, which we will need for later, so we store certain fields in global variables located in the data section.&lt;/p&gt;
&lt;p&gt;First we add those variables, each 4 bytes big:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;section .data

id: dd 0
static id:data

id_base: dd 0
static id_base:data

id_mask: dd 0
static id_mask:data

root_visual_id: dd 0
static root_visual_id:data
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then we read the server response, and skip over the parts we are not interested in. This boils down to incrementing a pointer by a dynamic value, a few times. Note that since we do not do any checks here, that would be a great attack vector to trigger a stack overflow or such in our program.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;  ; Read the rest of the server response: read(2).
  ; Use the stack for the read buffer.
  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 1&amp;lt;&amp;lt;15
  syscall

  cmp rax, 0 ; Check that the server replied with something.
  jle die

  ; Set id_base globally.
  mov edx, DWORD [rsp + 4]
  mov DWORD [id_base], edx

  ; Set id_mask globally.
  mov edx, DWORD [rsp + 8]
  mov DWORD [id_mask], edx

  ; Read the information we need, skip over the rest.
  lea rdi, [rsp] ; Pointer that will skip over some data.

  mov cx, WORD [rsp + 16] ; Vendor length (v).
  movzx rcx, cx

  mov al, BYTE [rsp + 21]; Number of formats (n).
  movzx rax, al ; Fill the rest of the register with zeroes to avoid garbage values.
  imul rax, 8 ; sizeof(format) == 8

  add rdi, 32 ; Skip the connection setup
  add rdi, rcx ; Skip over the vendor information (v).
  add rdi, rax ; Skip over the format information (n*8).

  mov eax, DWORD [rdi] ; Store (and return) the window root id.

  ; Set the root_visual_id globally.
  mov edx, DWORD [rdi + 32]
  mov DWORD [root_visual_id], edx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;All together:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Send the handshake to the X11 server and read the returned system information.
; @param rdi The socket file descriptor
; @returns The window root id (uint32_t) in rax.
x11_send_handshake:
static x11_send_handshake:function
  push rbp
  mov rbp, rsp

  sub rsp, 1&amp;lt;&amp;lt;15
  mov BYTE [rsp + 0], &amp;#39;l&amp;#39; ; Set order to &amp;#39;l&amp;#39;.
  mov WORD [rsp + 2], 11 ; Set major version to 11.

  ; Send the handshake to the server: write(2).
  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 12*8
  syscall

  cmp rax, 12*8 ; Check that all bytes were written.
  jnz die

  ; Read the server response: read(2).
  ; Use the stack for the read buffer.
  ; The X11 server first replies with 8 bytes. Once these are read, it replies with a much bigger message.
  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 8
  syscall

  cmp rax, 8 ; Check that the server replied with 8 bytes.
  jnz die

  cmp BYTE [rsp], 1 ; Check that the server sent &amp;#39;success&amp;#39; (first byte is 1).
  jnz die

  ; Read the rest of the server response: read(2).
  ; Use the stack for the read buffer.
  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 1&amp;lt;&amp;lt;15
  syscall

  cmp rax, 0 ; Check that the server replied with something.
  jle die

  ; Set id_base globally.
  mov edx, DWORD [rsp + 4]
  mov DWORD [id_base], edx

  ; Set id_mask globally.
  mov edx, DWORD [rsp + 8]
  mov DWORD [id_mask], edx

  ; Read the information we need, skip over the rest.
  lea rdi, [rsp] ; Pointer that will skip over some data.

  mov cx, WORD [rsp + 16] ; Vendor length (v).
  movzx rcx, cx

  mov al, BYTE [rsp + 21]; Number of formats (n).
  movzx rax, al ; Fill the rest of the register with zeroes to avoid garbage values.
  imul rax, 8 ; sizeof(format) == 8

  add rdi, 32 ; Skip the connection setup
  add rdi, rcx ; Skip over the vendor information (v).
  add rdi, rax ; Skip over the format information (n*8).

  mov eax, DWORD [rdi] ; Store (and return) the window root id.

  ; Set the root_visual_id globally.
  mov edx, DWORD [rdi + 32]
  mov DWORD [root_visual_id], edx

  add rsp, 1&amp;lt;&amp;lt;15
  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;From this point on, I will assume you are familiar with the basics of assembly and X11 and will not go as much into details.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;generating-ids&#34;&gt;Generating ids&lt;/h2&gt;
&lt;p&gt;When creating resources on the server-side, we usually first generate an id on the client side, and send that id to the server when creating the resource.&lt;/p&gt;
&lt;p&gt;We store the current id in a global variable and increment it each time a new id is generated.&lt;/p&gt;
&lt;p&gt;This is how we do it:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Increment the global id.
; @return The new id.
x11_next_id:
static x11_next_id:function
  push rbp
  mov rbp, rsp

  mov eax, DWORD [id] ; Load global id.

  mov edi, DWORD [id_base] ; Load global id_base.
  mov edx, DWORD [id_mask] ; Load global id_mask.

  ; Return: id_mask &amp;amp; (id) | id_base
  and eax, edx
  or eax, edi

  add DWORD [id], 1 ; Increment id.

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;opening-a-font&#34;&gt;Opening a font&lt;/h2&gt;
&lt;p&gt;To open a font, which is a prerequisite to draw text, we send a message to the server specifying (part of) the name of the font we want, and the server will select a matching font.&lt;/p&gt;
&lt;p&gt;To play with another font, you can use &lt;code&gt;xfontsel&lt;/code&gt; which displays all the font names that the X11 server knows about.&lt;/p&gt;
&lt;p&gt;First, we generate an id for the font locally, and then we send it alongside the font name.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Open the font on the server side.
; @param rdi The socket file descriptor.
; @param esi The font id.
x11_open_font:
static x11_open_font:function
  push rbp
  mov rbp, rsp

  %define OPEN_FONT_NAME_BYTE_COUNT 5
  %define OPEN_FONT_PADDING ((4 - (OPEN_FONT_NAME_BYTE_COUNT % 4)) % 4)
  %define OPEN_FONT_PACKET_U32_COUNT (3 + (OPEN_FONT_NAME_BYTE_COUNT + OPEN_FONT_PADDING) / 4)
  %define X11_OP_REQ_OPEN_FONT 0x2d

  sub rsp, 6*8
  mov DWORD [rsp + 0*4], X11_OP_REQ_OPEN_FONT | (OPEN_FONT_NAME_BYTE_COUNT &amp;lt;&amp;lt; 16)
  mov DWORD [rsp + 1*4], esi
  mov DWORD [rsp + 2*4], OPEN_FONT_NAME_BYTE_COUNT
  mov BYTE [rsp + 3*4 + 0], &amp;#39;f&amp;#39;
  mov BYTE [rsp + 3*4 + 1], &amp;#39;i&amp;#39;
  mov BYTE [rsp + 3*4 + 2], &amp;#39;x&amp;#39;
  mov BYTE [rsp + 3*4 + 3], &amp;#39;e&amp;#39;
  mov BYTE [rsp + 3*4 + 4], &amp;#39;d&amp;#39;


  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, OPEN_FONT_PACKET_U32_COUNT*4
  syscall

  cmp rax, OPEN_FONT_PACKET_U32_COUNT*4
  jnz die

  add rsp, 6*8

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;creating-a-graphical-context&#34;&gt;Creating a graphical context&lt;/h2&gt;
&lt;p&gt;Since an application in X11 can have multiple windows, we first need to create a graphical context containing the general information. When we create a window, we refer to this graphical context by id.&lt;/p&gt;
&lt;p&gt;Again, we need to generate an id for the graphical context to be.&lt;/p&gt;
&lt;p&gt;X11 stores a hierarchy of windows, so when creating the graphical context, we also need to give it the root window id (i.e. the parent id).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Create a X11 graphical context.
; @param rdi The socket file descriptor.
; @param esi The graphical context id.
; @param edx The window root id.
; @param ecx The font id.
x11_create_gc:
static x11_create_gc:function
  push rbp
  mov rbp, rsp

  sub rsp, 8*8

%define X11_OP_REQ_CREATE_GC 0x37
%define X11_FLAG_GC_BG 0x00000004
%define X11_FLAG_GC_FG 0x00000008
%define X11_FLAG_GC_FONT 0x00004000
%define X11_FLAG_GC_EXPOSE 0x00010000

%define CREATE_GC_FLAGS X11_FLAG_GC_BG | X11_FLAG_GC_FG | X11_FLAG_GC_FONT
%define CREATE_GC_PACKET_FLAG_COUNT 3
%define CREATE_GC_PACKET_U32_COUNT (4 + CREATE_GC_PACKET_FLAG_COUNT)
%define MY_COLOR_RGB 0x0000ffff

  mov DWORD [rsp + 0*4], X11_OP_REQ_CREATE_GC | (CREATE_GC_PACKET_U32_COUNT&amp;lt;&amp;lt;16)
  mov DWORD [rsp + 1*4], esi
  mov DWORD [rsp + 2*4], edx
  mov DWORD [rsp + 3*4], CREATE_GC_FLAGS
  mov DWORD [rsp + 4*4], MY_COLOR_RGB
  mov DWORD [rsp + 5*4], 0
  mov DWORD [rsp + 6*4], ecx

  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, CREATE_GC_PACKET_U32_COUNT*4
  syscall

  cmp rax, CREATE_GC_PACKET_U32_COUNT*4
  jnz die

  add rsp, 8*8

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;creating-the-window&#34;&gt;Creating the window&lt;/h2&gt;
&lt;p&gt;We can now create the window, which refers to the freshly created graphical context. We also provide the desired x and y coordinates of the window, as well as the desired dimensions (width and height).&lt;/p&gt;
&lt;p&gt;Note that those are simply hints and the resulting window may well have different coordinates and dimensions, for example when using a tiling window manager, or when resizing the window.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Create the X11 window.
; @param rdi The socket file descriptor.
; @param esi The new window id.
; @param edx The window root id.
; @param ecx The root visual id.
; @param r8d Packed x and y.
; @param r9d Packed w and h.
x11_create_window:
static x11_create_window:function
  push rbp
  mov rbp, rsp

  %define X11_OP_REQ_CREATE_WINDOW 0x01
  %define X11_FLAG_WIN_BG_COLOR 0x00000002
  %define X11_EVENT_FLAG_KEY_RELEASE 0x0002
  %define X11_EVENT_FLAG_EXPOSURE 0x8000
  %define X11_FLAG_WIN_EVENT 0x00000800

  %define CREATE_WINDOW_FLAG_COUNT 2
  %define CREATE_WINDOW_PACKET_U32_COUNT (8 + CREATE_WINDOW_FLAG_COUNT)
  %define CREATE_WINDOW_BORDER 1
  %define CREATE_WINDOW_GROUP 1

  sub rsp, 12*8

  mov DWORD [rsp + 0*4], X11_OP_REQ_CREATE_WINDOW | (CREATE_WINDOW_PACKET_U32_COUNT &amp;lt;&amp;lt; 16)
  mov DWORD [rsp + 1*4], esi
  mov DWORD [rsp + 2*4], edx
  mov DWORD [rsp + 3*4], r8d
  mov DWORD [rsp + 4*4], r9d
  mov DWORD [rsp + 5*4], CREATE_WINDOW_GROUP | (CREATE_WINDOW_BORDER &amp;lt;&amp;lt; 16)
  mov DWORD [rsp + 6*4], ecx
  mov DWORD [rsp + 7*4], X11_FLAG_WIN_BG_COLOR | X11_FLAG_WIN_EVENT
  mov DWORD [rsp + 8*4], 0
  mov DWORD [rsp + 9*4], X11_EVENT_FLAG_KEY_RELEASE | X11_EVENT_FLAG_EXPOSURE


  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, CREATE_WINDOW_PACKET_U32_COUNT*4
  syscall

  cmp rax, CREATE_WINDOW_PACKET_U32_COUNT*4
  jnz die

  add rsp, 12*8

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;mapping-the-window&#34;&gt;Mapping the window&lt;/h2&gt;
&lt;p&gt;If you are following along at home, and just ran the program, you have realized nothing is displayed.&lt;/p&gt;
&lt;p&gt;That is because X11 does not show the window until we have mapped it. This is a simple message to send:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Map a X11 window.
; @param rdi The socket file descriptor.
; @param esi The window id.
x11_map_window:
static x11_map_window:function
  push rbp
  mov rbp, rsp

  sub rsp, 16

  %define X11_OP_REQ_MAP_WINDOW 0x08
  mov DWORD [rsp + 0*4], X11_OP_REQ_MAP_WINDOW | (2&amp;lt;&amp;lt;16)
  mov DWORD [rsp + 1*4], esi

  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 2*4
  syscall

  cmp rax, 2*4
  jnz die

  add rsp, 16

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now have a black window:&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://gaultier.github.io/blog/x11_x64_black_window.png&#34; alt=&#34;Black window&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Yay!&lt;/p&gt;
&lt;h2 id=&#34;polling-for-server-messages&#34;&gt;Polling for server messages&lt;/h2&gt;
&lt;p&gt;We would like to draw text in the window now, but we have to wait for the &lt;code&gt;Expose&lt;/code&gt; event to be sent to us, which means that the window is visible, to be able to start drawing on it.&lt;/p&gt;
&lt;p&gt;We want to listen for all server messages actually, be it errors or events, for example when the user presses a key on the keyboard.&lt;/p&gt;
&lt;p&gt;If we do a simple blocking &lt;code&gt;read(2)&lt;/code&gt;, but the server sends nothing, the program will appear not responding. Not good. The solution is to use the &lt;code&gt;poll(2)&lt;/code&gt; system call to be awoken by the operating system whenever there is data to be read on the socket, a la NodeJS or Nginx.&lt;/p&gt;
&lt;p&gt;First, we need to mark the socket as ‘non-blocking’ since it is by default in blocking mode:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Set a file descriptor in non-blocking mode.
; @param rdi The file descriptor.
set_fd_non_blocking:
static set_fd_non_blocking:function
  push rbp
  mov rbp, rsp

  mov rax, SYSCALL_FCNTL
  mov rdi, rdi
  mov rsi, F_GETFL
  mov rdx, 0
  syscall

  cmp rax, 0
  jl die

  ; `or` the current file status flag with O_NONBLOCK.
  mov rdx, rax
  or rdx, O_NONBLOCK

  mov rax, SYSCALL_FCNTL
  mov rdi, rdi
  mov rsi, F_SETFL
  mov rdx, rdx
  syscall

  cmp rax, 0
  jl die

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then, we write a small function to read data on the socket. For simplicity, we only read 32 bytes of data, because most messages from X11 are of this size. We also return the first byte which contains the event type.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Read the X11 server reply.
; @return The message code in al.
x11_read_reply:
static x11_read_reply:function
  push rbp
  mov rbp, rsp

  sub rsp, 32

  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 32
  syscall

  cmp rax, 1
  jle die

  mov al, BYTE [rsp]

  add rsp, 32

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We now can poll. If an error occurs or the other side has closed their end of the socket, we exit the program.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Poll indefinitely messages from the X11 server with poll(2).
; @param rdi The socket file descriptor.
; @param esi The window id.
; @param edx The gc id.
poll_messages:
static poll_messages:function
  push rbp
  mov rbp, rsp

  sub rsp, 32

  %define POLLIN 0x001
  %define POLLPRI 0x002
  %define POLLOUT 0x004
  %define POLLERR  0x008
  %define POLLHUP  0x010
  %define POLLNVAL 0x020

  mov DWORD [rsp + 0*4], edi
  mov DWORD [rsp + 1*4], POLLIN

  mov DWORD [rsp + 16], esi ; window id
  mov DWORD [rsp + 20], edx ; gc id

  .loop:
    mov rax, SYSCALL_POLL
    lea rdi, [rsp]
    mov rsi, 1
    mov rdx, -1
    syscall

    cmp rax, 0
    jle die

    cmp DWORD [rsp + 2*4], POLLERR
    je die

    cmp DWORD [rsp + 2*4], POLLHUP
    je die

    mov rdi, [rsp + 0*4]
    call x11_read_reply

    jmp .loop

  add rsp, 16
  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;drawing-text&#34;&gt;Drawing text&lt;/h2&gt;
&lt;p&gt;At last, we can draw text. The small difficulty here is that the text is of unknown length in the general case, so we have to compute the size of the X11 message, including the padding at the end. So far, we only had messages of fixed size.&lt;/p&gt;
&lt;p&gt;The official documentation has formulas to compute those values.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Draw text in a X11 window with server-side text rendering.
; @param rdi The socket file descriptor.
; @param rsi The text string.
; @param edx The text string length in bytes.
; @param ecx The window id.
; @param r8d The gc id.
; @param r9d Packed x and y.
x11_draw_text:
static x11_draw_text:function
  push rbp
  mov rbp, rsp

  sub rsp, 1024

  mov DWORD [rsp + 1*4], ecx ; Store the window id directly in the packet data on the stack.
  mov DWORD [rsp + 2*4], r8d ; Store the gc id directly in the packet data on the stack.
  mov DWORD [rsp + 3*4], r9d ; Store x, y directly in the packet data on the stack.

  mov r8d, edx ; Store the string length in r8 since edx will be overwritten next.
  mov QWORD [rsp + 1024 - 8], rdi ; Store the socket file descriptor on the stack to free the register.

  ; Compute padding and packet u32 count with division and modulo 4.
  mov eax, edx ; Put dividend in eax.
  mov ecx, 4 ; Put divisor in ecx.
  cdq ; Sign extend.
  idiv ecx ; Compute eax / ecx, and put the remainder (i.e. modulo) in edx.
  ; LLVM optimizer magic: `(4-x)%4 == -x &amp;amp; 3`, for some reason.
  neg edx
  and edx, 3
  mov r9d, edx ; Store padding in r9.

  mov eax, r8d
  add eax, r9d
  shr eax, 2 ; Compute: eax /= 4
  add eax, 4 ; eax now contains the packet u32 count.


  %define X11_OP_REQ_IMAGE_TEXT8 0x4c
  mov DWORD [rsp + 0*4], r8d
  shl DWORD [rsp + 0*4], 8
  or DWORD [rsp + 0*4], X11_OP_REQ_IMAGE_TEXT8
  mov ecx, eax
  shl ecx, 16
  or [rsp + 0*4], ecx

  ; Copy the text string into the packet data on the stack.
  mov rsi, rsi ; Source string in rsi.
  lea rdi, [rsp + 4*4] ; Destination
  cld ; Move forward
  mov ecx, r8d ; String length.
  rep movsb ; Copy.

  mov rdx, rax ; packet u32 count
  imul rdx, 4
  mov rax, SYSCALL_WRITE
  mov rdi, QWORD [rsp + 1024 - 8] ; fd
  lea rsi, [rsp]
  syscall

  cmp rax, rdx
  jnz die

  add rsp, 1024

  pop rbp
  ret
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We then call this function inside the polling loop, and we store the ‘exposed’ state in a boolean on the stack to know whether we should render the text or not:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;    %define X11_EVENT_EXPOSURE 0xc
    cmp eax, X11_EVENT_EXPOSURE
    jnz .received_other_event

    .received_exposed_event:
    mov BYTE [rsp + 24], 1 ; Mark as exposed.

    .received_other_event:

    cmp BYTE [rsp + 24], 1 ; exposed?
    jnz .loop

    .draw_text:
      mov rdi, [rsp + 0*4] ; socket fd
      lea rsi, [hello_world] ; string
      mov edx, 13 ; length
      mov ecx, [rsp + 16] ; window id
      mov r8d, [rsp + 20] ; gc id
      mov r9d, 100 ; x
      shl r9d, 16
      or r9d, 100 ; y
      call x11_draw_text
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, we see our &lt;code&gt;Hello, world!&lt;/code&gt; text displayed inside the window:&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://gaultier.github.io/blog/x11_x64_final.png&#34; alt=&#34;Result&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;the-end&#34;&gt;The end&lt;/h2&gt;
&lt;p&gt;Wow, that was a lot. But we did it! We wrote a (albeit simplistic) GUI program in pure assembly, no dependencies, and that’s just 600 lines of code in the end.&lt;/p&gt;
&lt;p&gt;How did we fare on the executable size part?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With debug information: 10744 bytes (10 KiB)&lt;/li&gt;
&lt;li&gt;Without debug information (stripped): 8592 bytes (8 KiB)&lt;/li&gt;
&lt;li&gt;Stripped and OMAGIC (&lt;code&gt;--omagic&lt;/code&gt; linker flag, from the man page: &lt;code&gt;Set the text and data sections to be readable and writable. Also, do not page-align the data segment&lt;/code&gt;): 1776 bytes (1 KiB)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Not too shaby, a GUI program in 1 KiB.&lt;/p&gt;
&lt;p&gt;Where to go from there?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We could move text rendering client-side. Doing it server-side has lots of limitations.&lt;/li&gt;
&lt;li&gt;We could add shape rendering, such as quads and circles&lt;/li&gt;
&lt;li&gt;We could listen to keyboard and mouse events (the polling loop is easy to extend to do that)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that you had as much fun as I did!&lt;/p&gt;
&lt;h2 id=&#34;addendum-the-full-code&#34;&gt;Addendum: the full code&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-x86asm&#34; data-lang=&#34;x86asm&#34;&gt;; Build with: nasm -f elf64 -g main.nasm &amp;amp;&amp;amp; ld main.o -static -o main

BITS 64 ; 64 bits.
CPU X64 ; Target the x86_64 family of CPUs.

section .rodata

sun_path: db &amp;#34;/tmp/.X11-unix/X0&amp;#34;, 0
static sun_path:data

hello_world: db &amp;#34;Hello, world!&amp;#34;
static hello_world:data

section .data

id: dd 0
static id:data

id_base: dd 0
static id_base:data

id_mask: dd 0
static id_mask:data

root_visual_id: dd 0
static root_visual_id:data


section .text

%define AF_UNIX 1
%define SOCK_STREAM 1

%define SYSCALL_READ 0
%define SYSCALL_WRITE 1
%define SYSCALL_POLL 7
%define SYSCALL_SOCKET 41
%define SYSCALL_CONNECT 42
%define SYSCALL_EXIT 60
%define SYSCALL_FCNTL 72

; Create a UNIX domain socket and connect to the X11 server.
; @returns The socket file descriptor.
x11_connect_to_server:
static x11_connect_to_server:function
  push rbp
  mov rbp, rsp

  ; Open a Unix socket: socket(2).
  mov rax, SYSCALL_SOCKET
  mov rdi, AF_UNIX ; Unix socket.
  mov rsi, SOCK_STREAM ; Tcp-like.
  mov rdx, 0 ; Automatic protocol.
  syscall

  cmp rax, 0
  jle die

  mov rdi, rax ; Store socket fd in `rdi` for the remainder of the function.

  sub rsp, 112 ; Store struct sockaddr_un on the stack.

  mov WORD [rsp], AF_UNIX ; Set sockaddr_un.sun_family to AF_UNIX
  ; Fill sockaddr_un.sun_path with: &amp;#34;/tmp/.X11-unix/X0&amp;#34;.
  lea rsi, sun_path
  mov r12, rdi ; Save the socket file descriptor in `rdi` in `r12`.
  lea rdi, [rsp + 2]
  cld ; Move forward
  mov ecx, 19 ; Length is 19 with the null terminator.
  rep movsb ; Copy.

  ; Connect to the server: connect(2).
  mov rax, SYSCALL_CONNECT
  mov rdi, r12
  lea rsi, [rsp]
  %define SIZEOF_SOCKADDR_UN 2+108
  mov rdx, SIZEOF_SOCKADDR_UN
  syscall

  cmp rax, 0
  jne die

  mov rax, rdi ; Return the socket fd.

  add rsp, 112
  pop rbp
  ret

; Send the handshake to the X11 server and read the returned system information.
; @param rdi The socket file descriptor
; @returns The window root id (uint32_t) in rax.
x11_send_handshake:
static x11_send_handshake:function
  push rbp
  mov rbp, rsp

  sub rsp, 1&amp;lt;&amp;lt;15
  mov BYTE [rsp + 0], &amp;#39;l&amp;#39; ; Set order to &amp;#39;l&amp;#39;.
  mov WORD [rsp + 2], 11 ; Set major version to 11.

  ; Send the handshake to the server: write(2).
  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 12*8
  syscall

  cmp rax, 12*8 ; Check that all bytes were written.
  jnz die

  ; Read the server response: read(2).
  ; Use the stack for the read buffer.
  ; The X11 server first replies with 8 bytes. Once these are read, it replies with a much bigger message.
  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 8
  syscall

  cmp rax, 8 ; Check that the server replied with 8 bytes.
  jnz die

  cmp BYTE [rsp], 1 ; Check that the server sent &amp;#39;success&amp;#39; (first byte is 1).
  jnz die

  ; Read the rest of the server response: read(2).
  ; Use the stack for the read buffer.
  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 1&amp;lt;&amp;lt;15
  syscall

  cmp rax, 0 ; Check that the server replied with something.
  jle die

  ; Set id_base globally.
  mov edx, DWORD [rsp + 4]
  mov DWORD [id_base], edx

  ; Set id_mask globally.
  mov edx, DWORD [rsp + 8]
  mov DWORD [id_mask], edx

  ; Read the information we need, skip over the rest.
  lea rdi, [rsp] ; Pointer that will skip over some data.

  mov cx, WORD [rsp + 16] ; Vendor length (v).
  movzx rcx, cx

  mov al, BYTE [rsp + 21]; Number of formats (n).
  movzx rax, al ; Fill the rest of the register with zeroes to avoid garbage values.
  imul rax, 8 ; sizeof(format) == 8

  add rdi, 32 ; Skip the connection setup
  add rdi, rcx ; Skip over the vendor information (v).
  add rdi, rax ; Skip over the format information (n*8).

  mov eax, DWORD [rdi] ; Store (and return) the window root id.

  ; Set the root_visual_id globally.
  mov edx, DWORD [rdi + 32]
  mov DWORD [root_visual_id], edx

  add rsp, 1&amp;lt;&amp;lt;15
  pop rbp
  ret

; Increment the global id.
; @return The new id.
x11_next_id:
static x11_next_id:function
  push rbp
  mov rbp, rsp

  mov eax, DWORD [id] ; Load global id.

  mov edi, DWORD [id_base] ; Load global id_base.
  mov edx, DWORD [id_mask] ; Load global id_mask.

  ; Return: id_mask &amp;amp; (id) | id_base
  and eax, edx
  or eax, edi

  add DWORD [id], 1 ; Increment id.

  pop rbp
  ret

; Open the font on the server side.
; @param rdi The socket file descriptor.
; @param esi The font id.
x11_open_font:
static x11_open_font:function
  push rbp
  mov rbp, rsp

  %define OPEN_FONT_NAME_BYTE_COUNT 5
  %define OPEN_FONT_PADDING ((4 - (OPEN_FONT_NAME_BYTE_COUNT % 4)) % 4)
  %define OPEN_FONT_PACKET_U32_COUNT (3 + (OPEN_FONT_NAME_BYTE_COUNT + OPEN_FONT_PADDING) / 4)
  %define X11_OP_REQ_OPEN_FONT 0x2d

  sub rsp, 6*8
  mov DWORD [rsp + 0*4], X11_OP_REQ_OPEN_FONT | (OPEN_FONT_NAME_BYTE_COUNT &amp;lt;&amp;lt; 16)
  mov DWORD [rsp + 1*4], esi
  mov DWORD [rsp + 2*4], OPEN_FONT_NAME_BYTE_COUNT
  mov BYTE [rsp + 3*4 + 0], &amp;#39;f&amp;#39;
  mov BYTE [rsp + 3*4 + 1], &amp;#39;i&amp;#39;
  mov BYTE [rsp + 3*4 + 2], &amp;#39;x&amp;#39;
  mov BYTE [rsp + 3*4 + 3], &amp;#39;e&amp;#39;
  mov BYTE [rsp + 3*4 + 4], &amp;#39;d&amp;#39;


  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, OPEN_FONT_PACKET_U32_COUNT*4
  syscall

  cmp rax, OPEN_FONT_PACKET_U32_COUNT*4
  jnz die

  add rsp, 6*8

  pop rbp
  ret

; Create a X11 graphical context.
; @param rdi The socket file descriptor.
; @param esi The graphical context id.
; @param edx The window root id.
; @param ecx The font id.
x11_create_gc:
static x11_create_gc:function
  push rbp
  mov rbp, rsp

  sub rsp, 8*8

%define X11_OP_REQ_CREATE_GC 0x37
%define X11_FLAG_GC_BG 0x00000004
%define X11_FLAG_GC_FG 0x00000008
%define X11_FLAG_GC_FONT 0x00004000
%define X11_FLAG_GC_EXPOSE 0x00010000

%define CREATE_GC_FLAGS X11_FLAG_GC_BG | X11_FLAG_GC_FG | X11_FLAG_GC_FONT
%define CREATE_GC_PACKET_FLAG_COUNT 3
%define CREATE_GC_PACKET_U32_COUNT (4 + CREATE_GC_PACKET_FLAG_COUNT)
%define MY_COLOR_RGB 0x0000ffff

  mov DWORD [rsp + 0*4], X11_OP_REQ_CREATE_GC | (CREATE_GC_PACKET_U32_COUNT&amp;lt;&amp;lt;16)
  mov DWORD [rsp + 1*4], esi
  mov DWORD [rsp + 2*4], edx
  mov DWORD [rsp + 3*4], CREATE_GC_FLAGS
  mov DWORD [rsp + 4*4], MY_COLOR_RGB
  mov DWORD [rsp + 5*4], 0
  mov DWORD [rsp + 6*4], ecx

  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, CREATE_GC_PACKET_U32_COUNT*4
  syscall

  cmp rax, CREATE_GC_PACKET_U32_COUNT*4
  jnz die

  add rsp, 8*8

  pop rbp
  ret

; Create the X11 window.
; @param rdi The socket file descriptor.
; @param esi The new window id.
; @param edx The window root id.
; @param ecx The root visual id.
; @param r8d Packed x and y.
; @param r9d Packed w and h.
x11_create_window:
static x11_create_window:function
  push rbp
  mov rbp, rsp

  %define X11_OP_REQ_CREATE_WINDOW 0x01
  %define X11_FLAG_WIN_BG_COLOR 0x00000002
  %define X11_EVENT_FLAG_KEY_RELEASE 0x0002
  %define X11_EVENT_FLAG_EXPOSURE 0x8000
  %define X11_FLAG_WIN_EVENT 0x00000800

  %define CREATE_WINDOW_FLAG_COUNT 2
  %define CREATE_WINDOW_PACKET_U32_COUNT (8 + CREATE_WINDOW_FLAG_COUNT)
  %define CREATE_WINDOW_BORDER 1
  %define CREATE_WINDOW_GROUP 1

  sub rsp, 12*8

  mov DWORD [rsp + 0*4], X11_OP_REQ_CREATE_WINDOW | (CREATE_WINDOW_PACKET_U32_COUNT &amp;lt;&amp;lt; 16)
  mov DWORD [rsp + 1*4], esi
  mov DWORD [rsp + 2*4], edx
  mov DWORD [rsp + 3*4], r8d
  mov DWORD [rsp + 4*4], r9d
  mov DWORD [rsp + 5*4], CREATE_WINDOW_GROUP | (CREATE_WINDOW_BORDER &amp;lt;&amp;lt; 16)
  mov DWORD [rsp + 6*4], ecx
  mov DWORD [rsp + 7*4], X11_FLAG_WIN_BG_COLOR | X11_FLAG_WIN_EVENT
  mov DWORD [rsp + 8*4], 0
  mov DWORD [rsp + 9*4], X11_EVENT_FLAG_KEY_RELEASE | X11_EVENT_FLAG_EXPOSURE


  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, CREATE_WINDOW_PACKET_U32_COUNT*4
  syscall

  cmp rax, CREATE_WINDOW_PACKET_U32_COUNT*4
  jnz die

  add rsp, 12*8

  pop rbp
  ret

; Map a X11 window.
; @param rdi The socket file descriptor.
; @param esi The window id.
x11_map_window:
static x11_map_window:function
  push rbp
  mov rbp, rsp

  sub rsp, 16

  %define X11_OP_REQ_MAP_WINDOW 0x08
  mov DWORD [rsp + 0*4], X11_OP_REQ_MAP_WINDOW | (2&amp;lt;&amp;lt;16)
  mov DWORD [rsp + 1*4], esi

  mov rax, SYSCALL_WRITE
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 2*4
  syscall

  cmp rax, 2*4
  jnz die

  add rsp, 16

  pop rbp
  ret

; Read the X11 server reply.
; @return The message code in al.
x11_read_reply:
static x11_read_reply:function
  push rbp
  mov rbp, rsp

  sub rsp, 32

  mov rax, SYSCALL_READ
  mov rdi, rdi
  lea rsi, [rsp]
  mov rdx, 32
  syscall

  cmp rax, 1
  jle die

  mov al, BYTE [rsp]

  add rsp, 32

  pop rbp
  ret

die:
  mov rax, SYSCALL_EXIT
  mov rdi, 1
  syscall


; Set a file descriptor in non-blocking mode.
; @param rdi The file descriptor.
set_fd_non_blocking:
static set_fd_non_blocking:function
  push rbp
  mov rbp, rsp

  %define F_GETFL 3
  %define F_SETFL 4

  %define O_NONBLOCK 2048

  mov rax, SYSCALL_FCNTL
  mov rdi, rdi
  mov rsi, F_GETFL
  mov rdx, 0
  syscall

  cmp rax, 0
  jl die

  ; `or` the current file status flag with O_NONBLOCK.
  mov rdx, rax
  or rdx, O_NONBLOCK

  mov rax, SYSCALL_FCNTL
  mov rdi, rdi
  mov rsi, F_SETFL
  mov rdx, rdx
  syscall

  cmp rax, 0
  jl die

  pop rbp
  ret

; Poll indefinitely messages from the X11 server with poll(2).
; @param rdi The socket file descriptor.
; @param esi The window id.
; @param edx The gc id.
poll_messages:
static poll_messages:function
  push rbp
  mov rbp, rsp

  sub rsp, 32

  %define POLLIN 0x001
  %define POLLPRI 0x002
  %define POLLOUT 0x004
  %define POLLERR  0x008
  %define POLLHUP  0x010
  %define POLLNVAL 0x020

  mov DWORD [rsp + 0*4], edi
  mov DWORD [rsp + 1*4], POLLIN

  mov DWORD [rsp + 16], esi ; window id
  mov DWORD [rsp + 20], edx ; gc id
  mov BYTE [rsp + 24], 0 ; exposed? (boolean)

  .loop:
    mov rax, SYSCALL_POLL
    lea rdi, [rsp]
    mov rsi, 1
    mov rdx, -1
    syscall

    cmp rax, 0
    jle die

    cmp DWORD [rsp + 2*4], POLLERR
    je die

    cmp DWORD [rsp + 2*4], POLLHUP
    je die

    mov rdi, [rsp + 0*4]
    call x11_read_reply

    %define X11_EVENT_EXPOSURE 0xc
    cmp eax, X11_EVENT_EXPOSURE
    jnz .received_other_event

    .received_exposed_event:
    mov BYTE [rsp + 24], 1 ; Mark as exposed.

    .received_other_event:

    cmp BYTE [rsp + 24], 1 ; exposed?
    jnz .loop

    .draw_text:
      mov rdi, [rsp + 0*4] ; socket fd
      lea rsi, [hello_world] ; string
      mov edx, 13 ; length
      mov ecx, [rsp + 16] ; window id
      mov r8d, [rsp + 20] ; gc id
      mov r9d, 100 ; x
      shl r9d, 16
      or r9d, 100 ; y
      call x11_draw_text


    jmp .loop


  add rsp, 16
  pop rbp
  ret

; Draw text in a X11 window with server-side text rendering.
; @param rdi The socket file descriptor.
; @param rsi The text string.
; @param edx The text string length in bytes.
; @param ecx The window id.
; @param r8d The gc id.
; @param r9d Packed x and y.
x11_draw_text:
static x11_draw_text:function
  push rbp
  mov rbp, rsp

  sub rsp, 1024

  mov DWORD [rsp + 1*4], ecx ; Store the window id directly in the packet data on the stack.
  mov DWORD [rsp + 2*4], r8d ; Store the gc id directly in the packet data on the stack.
  mov DWORD [rsp + 3*4], r9d ; Store x, y directly in the packet data on the stack.

  mov r8d, edx ; Store the string length in r8 since edx will be overwritten next.
  mov QWORD [rsp + 1024 - 8], rdi ; Store the socket file descriptor on the stack to free the register.

  ; Compute padding and packet u32 count with division and modulo 4.
  mov eax, edx ; Put dividend in eax.
  mov ecx, 4 ; Put divisor in ecx.
  cdq ; Sign extend.
  idiv ecx ; Compute eax / ecx, and put the remainder (i.e. modulo) in edx.
  ; LLVM optimizer magic: `(4-x)%4 == -x &amp;amp; 3`, for some reason.
  neg edx
  and edx, 3
  mov r9d, edx ; Store padding in r9.

  mov eax, r8d
  add eax, r9d
  shr eax, 2 ; Compute: eax /= 4
  add eax, 4 ; eax now contains the packet u32 count.


  %define X11_OP_REQ_IMAGE_TEXT8 0x4c
  mov DWORD [rsp + 0*4], r8d
  shl DWORD [rsp + 0*4], 8
  or DWORD [rsp + 0*4], X11_OP_REQ_IMAGE_TEXT8
  mov ecx, eax
  shl ecx, 16
  or [rsp + 0*4], ecx

  ; Copy the text string into the packet data on the stack.
  mov rsi, rsi ; Source string in rsi.
  lea rdi, [rsp + 4*4] ; Destination
  cld ; Move forward
  mov ecx, r8d ; String length.
  rep movsb ; Copy.

  mov rdx, rax ; packet u32 count
  imul rdx, 4
  mov rax, SYSCALL_WRITE
  mov rdi, QWORD [rsp + 1024 - 8] ; fd
  lea rsi, [rsp]
  syscall

  cmp rax, rdx
  jnz die

  add rsp, 1024

  pop rbp
  ret

_start:
global _start:function
  call x11_connect_to_server
  mov r15, rax ; Store the socket file descriptor in r15.

  mov rdi, rax
  call x11_send_handshake

  mov r12d, eax ; Store the window root id in r12.

  call x11_next_id
  mov r13d, eax ; Store the gc_id in r13.

  call x11_next_id
  mov r14d, eax ; Store the font_id in r14.

  mov rdi, r15
  mov esi, r14d
  call x11_open_font


  mov rdi, r15
  mov esi, r13d
  mov edx, r12d
  mov ecx, r14d
  call x11_create_gc

  call x11_next_id

  mov ebx, eax ; Store the window id in ebx.

  mov rdi, r15 ; socket fd
  mov esi, eax
  mov edx, r12d
  mov ecx, [root_visual_id]
  mov r8d, 200 | (200 &amp;lt;&amp;lt; 16) ; x and y are 200
  %define WINDOW_W 800
  %define WINDOW_H 600
  mov r9d, WINDOW_W | (WINDOW_H &amp;lt;&amp;lt; 16)
  call x11_create_window

  mov rdi, r15 ; socket fd
  mov esi, ebx
  call x11_map_window

  mov rdi, r15 ; socket fd
  call set_fd_non_blocking

  mov rdi, r15 ; socket fd
  mov esi, ebx ; window id
  mov edx, r13d ; gc id
  call poll_messages

  ; The end.
  mov rax, SYSCALL_EXIT
  mov rdi, 0
  syscall
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
