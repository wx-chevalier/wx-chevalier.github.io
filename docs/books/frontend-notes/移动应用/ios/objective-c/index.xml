<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Objective-C | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/ios/objective-c/</link><atom:link href="https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/ios/objective-c/index.xml" rel="self" type="application/rss+xml"/><description>Objective-C</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Objective-C</title><link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/ios/objective-c/</link></image><item><title>语法基础</title><link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/ios/objective-c/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/ios/objective-c/%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;h2 id="coding-style">Coding Style&lt;/h2>
&lt;blockquote>
&lt;p>参考资料&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/github/objective-c-style-guide" target="_blank" rel="noopener">objective-c-style-guide&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h1 id="数据结构">数据结构&lt;/h1>
&lt;h2 id="basic">Basic&lt;/h2>
&lt;h3 id="id">id&lt;/h3>
&lt;p>id 在 Objective C 中是一个类型，一个 complier 所认可的 Objective C 类型，跟 void *是不一样的，比如一个 id userName, 和 void *pUserName，[userName print] 是可以的，但[pUserName print] 在编译时就会报错，因为 ObjeciveC 的编译器看到 id，会假定它可以接受任何 message，虽然在 runtime 时可能并不是这样的，但 pUserName 并不是 Objective C 类型，编译器就会报错，但是 void *有可能时可以接收 print message 的。&lt;/p>
&lt;pre tabindex="0">&lt;code>/**
* Type for Objective-C objects.
*/
typedef struct objc_object
{
/**
* Pointer to this object&amp;#39;s class. Accessing this directly is STRONGLY
* discouraged. You are recommended to use object_getClass() instead.
*/
#ifndef __OBJC_RUNTIME_INTERNAL__
__attribute__((deprecated))
#endif
Class isa;
} *id;
&lt;/code>&lt;/pre>&lt;h3 id="sel函数指针">SEL：函数指针&lt;/h3>
&lt;p>其作用相当于函数指针，现在我看到的大多说用法都是在调用某些函数需要传递一个函数指针参数时，使用@selector。它会在当前类里面查找 selector 后面所跟的函数，返回一个 SEL 类型的值。&lt;/p>
&lt;p>譬如：&lt;/p>
&lt;pre tabindex="0">&lt;code>[对象　performSelector:SEL变量　withObject:参数1　withObject:参数2];
&lt;/code>&lt;/pre>&lt;p>既代指使用 performSelecor 方法来执行。在调用 respondsToSelector:@selector(method)时，这个 method 只有在该方法存在参数时需要 &amp;ldquo;:&amp;quot;，如果该方法不需要参数就不需要加这个冒号。否则，编译不会报错，只是执行返回的值不对。当然如果方法有多个参数，需要多个冒号，参数有名称的需要带上参数名称。换言之，就是需要带上完整的参数名。&lt;/p>
&lt;p>如：有如下方法：&lt;/p>
&lt;p>-(NSString*)toXmlString;&lt;/p>
&lt;p>此时调用类似于：&lt;/p>
&lt;p>[self respondsToSelector:@selector(toXmlString)]&lt;/p>
&lt;p>如果 toXmlString 方法的定义为：&lt;/p>
&lt;p>-(NSString*)toXmlString:(NSString*)prefix;&lt;/p>
&lt;p>那么调用就必须加上冒号，如：[self respondsToSelector:@selector(toXmlString:)]&lt;/p>
&lt;h3 id="nsnumber数值类型">NSNumber(数值类型)&lt;/h3>
&lt;p>NSNumber 是 OJC 中的数字对象，可以使用 NSNumber 对象来创建和初始化不同类型的数字对象。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl"> &lt;span class="cp">#import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSNumber&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">myNumber&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">floatNumber&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">intNumber&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">number1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建integer类型对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">intNumber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSNumber&lt;/span> &lt;span class="nl">numberWithInteger&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">123&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%i&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">intNumber&lt;/span> &lt;span class="n">integerValue&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建long类型对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">myNumber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSNumber&lt;/span> &lt;span class="nl">numberWithLong&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mh">0xababab&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%lx&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">myNumber&lt;/span> &lt;span class="n">longValue&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建char类型对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">myNumber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSNumber&lt;/span> &lt;span class="nl">numberWithChar&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="sc">&amp;#39;K&amp;#39;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%c&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">myNumber&lt;/span> &lt;span class="n">charValue&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建float类型对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">floatNumber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSNumber&lt;/span> &lt;span class="nl">numberWithFloat&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">123.00&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%f&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">floatNumber&lt;/span> &lt;span class="n">floatValue&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//创建double类型对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">myNumber&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSNumber&lt;/span> &lt;span class="nl">numberWithDouble&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mf">112233e+15&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%lg&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">myNumber&lt;/span> &lt;span class="n">doubleValue&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//从字符串中创建NSNumber对象，一般是先用NSString自带的*Value类型方法转化为Primitive类型，再用NSNumber的number*类型方法进行转化。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">result&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">NSNumber&lt;/span> &lt;span class="nl">numberWithFloat&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">ss&lt;/span> &lt;span class="n">floatValue&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//判断两个对象的值是否相等
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="n">intNumber&lt;/span> &lt;span class="nl">isEqualToNumber&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">floatNumber&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">YES&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;值相等&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;值不相等&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//比较两个对象的值大小
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">intNumber&lt;/span> &lt;span class="nl">compare&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">myNumber&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">NSOrderedAscending&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;左边的数字小&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;左边的数字大&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//初始化实例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">number1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">NSNumber&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">initWithInt&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,[&lt;/span>&lt;span class="n">number1&lt;/span> &lt;span class="n">intValueunsigned&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">number1&lt;/span> &lt;span class="k">release&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="datetime">DateTime&lt;/h2>
&lt;h3 id="nsdate">NSDate&lt;/h3>
&lt;p>如果需要获取到今日日期：&lt;/p>
&lt;pre tabindex="0">&lt;code>NSDate *now = [[NSDate alloc] init];
&lt;/code>&lt;/pre>&lt;p>不过需要注意的是，OC 获取到的默认是格林尼治时间，所以需要获取到本地时间的话别忘了转换时区。Cocoa 的 Date 也非常方便的提供了计算功能，可以基于时间间隔来获取新的时间，譬如可以获取明天或者昨天：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSTimeInterval&lt;/span> &lt;span class="n">secondsPerDay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">24&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tomorrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">initWithTimeIntervalSinceNow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">secondsPerDay&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">yesterday&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">initWithTimeIntervalSinceNow&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">secondsPerDay&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">tomorrow&lt;/span> &lt;span class="k">release&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">yesterday&lt;/span> &lt;span class="k">release&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以在今天的基础上进行加减：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSTimeInterval&lt;/span> &lt;span class="n">secondsPerDay&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">24&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="mi">60&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">today&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tomorrow&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">yesterday&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">tomorrow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">today&lt;/span> &lt;span class="nl">dateByAddingTimeInterval&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">secondsPerDay&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">yesterday&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">today&lt;/span> &lt;span class="nl">dateByAddingTimeInterval&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">secondsPerDay&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">[&lt;/span>&lt;span class="n">today&lt;/span> &lt;span class="k">release&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="本地化时间">本地化时间&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">@implementation&lt;/span> &lt;span class="nc">NSDate&lt;/span>&lt;span class="nl">(Utils)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-(&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">toLocalTime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSTimeZone&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSTimeZone&lt;/span> &lt;span class="n">localTimeZone&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSInteger&lt;/span> &lt;span class="n">seconds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">tz&lt;/span> &lt;span class="nl">secondsFromGMTForDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="nl">dateWithTimeInterval&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">seconds&lt;/span> &lt;span class="nl">sinceDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-(&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">toGlobalTime&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSTimeZone&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">tz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSTimeZone&lt;/span> &lt;span class="n">defaultTimeZone&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSInteger&lt;/span> &lt;span class="n">seconds&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">tz&lt;/span> &lt;span class="nl">secondsFromGMTForDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="nl">dateWithTimeInterval&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">seconds&lt;/span> &lt;span class="nl">sinceDate&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意，这种情况下的转化而来的标准时间，尚为&lt;/p>
&lt;h4 id="时间差">时间差&lt;/h4>
&lt;p>NSDate 自带有&lt;code>timeIntervalSinceDate&lt;/code>方法，可以计算两个 NSDate 之间的时间间隔(秒级别)。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">startDate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">endDate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">...;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSCalendar&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">gregorian&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">NSCalendar&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">initWithCalendarIdentifier&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">NSGregorianCalendar&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSUInteger&lt;/span> &lt;span class="n">unitFlags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">NSMonthCalendarUnit&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">NSDayCalendarUnit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSDateComponents&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">components&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">gregorian&lt;/span> &lt;span class="nl">components&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">unitFlags&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">fromDate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">startDate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nl">toDate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">endDate&lt;/span> &lt;span class="nl">options&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSInteger&lt;/span> &lt;span class="n">months&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">components&lt;/span> &lt;span class="n">month&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">NSInteger&lt;/span> &lt;span class="n">days&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">components&lt;/span> &lt;span class="n">day&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="时间比较">时间比较&lt;/h4>
&lt;ul>
&lt;li>判断是否为同一天&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">double&lt;/span> &lt;span class="n">timezoneFix&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSTimeZone&lt;/span> &lt;span class="n">localTimeZone&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">secondsFromGMT&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)(([&lt;/span>&lt;span class="n">nowDate&lt;/span> &lt;span class="n">timeIntervalSince1970&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">timezoneFix&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">3600&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">-&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)(([&lt;/span>&lt;span class="n">lastDate&lt;/span> &lt;span class="n">timeIntervalSince1970&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">timezoneFix&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">24&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="mi">3600&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">YES&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="nsdateformatter">NSDateFormatter&lt;/h3>
&lt;p>在开发 iOS 程序时，有时候需要将时间格式调整成自己希望的格式，这个时候我们可以用 NSDateFormatter 类来处理。&lt;/p>
&lt;p>例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//实例化一个NSDateFormatter对象
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSDateFormatter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dateFormatter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">NSDateFormatter&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//设定时间格式,这里可以设置成自己需要的格式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">dateFormatter&lt;/span> &lt;span class="nl">setDateFormat&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;yyyy-MM-dd HH:mm:ss&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//用[NSDate date]可以获取系统当前时间
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">currentDateStr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">dateFormatter&lt;/span> &lt;span class="nl">stringFromDate&lt;/span>&lt;span class="p">:[&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="n">date&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//输出格式为：2010-10-27 10:22:13
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">NSLog&lt;/span>&lt;span class="p">(@&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="o">%&lt;/span>&lt;span class="p">@&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">currentDateStr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//alloc后对不使用的对象别忘了release
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">dateFormatter&lt;/span> &lt;span class="k">release&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出格式通 setDateStyle 和 setTimeStyle 设置，分别定义的日期和时间的格式可选一下的系统给出的方法：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">enum&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSDateFormatterNoStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kCFDateFormatterNoStyle&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSDateFormatterShortStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kCFDateFormatterShortStyle&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//“11/23/37” or “3:30pm”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">NSDateFormatterMediumStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kCFDateFormatterMediumStyle&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//\&amp;#34;Nov 23, 1937\&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">NSDateFormatterLongStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kCFDateFormatterLongStyle&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="c1">//\&amp;#34;November 23, 1937” or “3:30:32pm\&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">NSDateFormatterFullStyle&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">kCFDateFormatterFullStyle&lt;/span>&lt;span class="c1">//“Tuesday, April 12, 1952 AD” or “3:30:42pm PST”
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span> &lt;span class="n">NSDateFormatterStyle&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了这种传统的时间格式化需求之外，往往我们还需要将时间转化为譬如几分钟前，几小时前这种方式，可以参考如下代码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="p">+(&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">dateFormaterString:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">stringDate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//为空判断
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">stringDate&lt;/span> &lt;span class="nl">isEqualToString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">stringDate&lt;/span> &lt;span class="nl">isEqualToString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;-10086&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">stringDate&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="s">@&amp;#34;未知时间&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSDate&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">time&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSDate&lt;/span> &lt;span class="nl">dateWithTimeIntervalSince1970&lt;/span>&lt;span class="p">:([&lt;/span>&lt;span class="n">stringDate&lt;/span> &lt;span class="n">integerValue&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="mi">1000&lt;/span>&lt;span class="p">)];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">YLMoment&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">moment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">YLMoment&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">initWithDate&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">time&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">moment&lt;/span> &lt;span class="n">fromNow&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="nl">rangeOfString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;years&amp;#34;&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="nl">rangeOfString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;months&amp;#34;&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="nl">rangeOfString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;days&amp;#34;&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="nl">rangeOfString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;day&amp;#34;&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">length&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">//不属于今天
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">fromNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">moment&lt;/span> &lt;span class="nl">format&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;M月d日 HH:mm&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="c1">//对于一天当中，具体情况的处理 an hour ago
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSArray&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">temArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="nl">componentsSeparatedByString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="nl">rangeOfString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;hours&amp;#34;&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="o">||&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">fromNow&lt;/span> &lt;span class="nl">rangeOfString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;hour&amp;#34;&lt;/span>&lt;span class="p">].&lt;/span>&lt;span class="n">length&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="n">temArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">isEqualToString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;an&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fromNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;1小时前&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fromNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="nl">stringWithFormat&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;%@小时前&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">temArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>&lt;span class="c1">//秒统一处理成一分钟前、分钟 a few seconds ago
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">([&lt;/span>&lt;span class="n">temArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">isEqualToString&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;a&amp;#34;&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fromNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">@&amp;#34;1分钟前&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fromNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="nl">stringWithFormat&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="s">@&amp;#34;%@分钟前&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">temArray&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">fromNow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="ylmomenthttpsgithubcomyannicklylmoment">&lt;a href="https://github.com/yannickl/YLMoment" target="_blank" rel="noopener">&lt;strong>YLMoment&lt;/strong>&lt;/a>&lt;/h3>
&lt;h2 id="string">String&lt;/h2>
&lt;blockquote>
&lt;p>参考资料&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="http://blog.csdn.net/shaofeiwang/article/details/6895744" target="_blank" rel="noopener">OJC-String 教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code> //求字符串对象的长度
NSInteger length = [str8 length]
NSLog( @&amp;#34;%ld&amp;#34;, length )
//判断一个字符串对象是否拥有前缀字符串
BOOL result1 = [str8 hasPrefix:@&amp;#34;If&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, result1 ? @&amp;#34;YES&amp;#34; : @&amp;#34;NO&amp;#34; )
//判断一个字符串对象是否拥有后缀
BOOL result2 = [str8 hasSuffix:@&amp;#34;en&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, result2 ? @&amp;#34;YES&amp;#34; : @&amp;#34;NO&amp;#34; )
//判断一个字符串对象是否和另一个字符串对象相同
BOOL result3 = [str8 isEqualToString:str7]
NSLog( @&amp;#34;%@&amp;#34;, result3 ? @&amp;#34;YES&amp;#34; : @&amp;#34;NO&amp;#34; )
NSLog( @&amp;#34;%d&amp;#34;, result3 )
&lt;/code>&lt;/pre>&lt;h3 id="创建增删">创建增删&lt;/h3>
&lt;pre tabindex="0">&lt;code> //使用初始化方法创建
// NSString *str1 = [[NSString alloc] initWithString:@&amp;#34;name&amp;#34;]
NSString *str1 = @&amp;#34;name&amp;#34;
NSLog( @&amp;#34;%@&amp;#34;, str1 )
// NSString *str2 = [NSString stringWithString:@&amp;#34;name&amp;#34;]
NSString *str2 = @&amp;#34;name&amp;#34;
NSLog( @&amp;#34;%@&amp;#34;, str2 )
char *cStr = &amp;#34;haha&amp;#34;
//将C语言字符串转成OC的对象
NSString *str3 = [[NSString alloc] initWithCString:cStr encoding:NSUTF8StringEncoding]
NSLog( @&amp;#34;%@&amp;#34;, str3 )
NSString *str4 = [NSString stringWithCString:cStr encoding:NSUTF8StringEncoding]
NSLog( @&amp;#34;%@&amp;#34;, str4 )
//根据指定格式创建字符串
NSString *str5 = [[NSString alloc] initWithFormat:@&amp;#34;%@+%d&amp;#34;, @&amp;#34;en&amp;#34;, 1001]
NSLog( @&amp;#34;%@&amp;#34;, str5 )
NSString *str6 = [NSString stringWithFormat:@&amp;#34;%@+%d&amp;#34;, @&amp;#34;ne&amp;#34;, 10014]
NSLog( @&amp;#34;%@&amp;#34;, str6 )
//根据指定路径的文件内容创建字符串对象
NSString *str7 = [[NSString alloc] initWithContentsOfFile:@&amp;#34;/Users/lanouhn/Desktop/test.txt&amp;#34; encoding:NSUTF8StringEncoding error:nil]
NSLog( @&amp;#34;%@&amp;#34;, str7 )
// NSError *err = [NSError init]
NSString *str8 = [NSString stringWithContentsOfFile:@&amp;#34;/Users/lanouhn/Desktop/words.txt&amp;#34; encoding:NSUTF8StringEncoding error:nil]
NSLog( @&amp;#34;%@&amp;#34;, str8 )
&lt;/code>&lt;/pre>&lt;h3 id="索引遍历">索引遍历&lt;/h3>
&lt;pre tabindex="0">&lt;code> //字符串比较排序结果
NSComparisonResult result4 = [str8 compare:str7]
NSLog( @&amp;#34;%ld&amp;#34;, result4 )
//获取子字符串
//从指定下标的字符开始(包含改字符)到字符串结束的子字符串，下标从 0 开始。
NSString *subStr1 = [str8 substringFromIndex:1]
NSLog( @&amp;#34;%@&amp;#34;, subStr1 )
//从下标为0的字符开始到指定的下标结束，此范围内的字符串
NSString *subStr2 = [str8 substringToIndex:2]
NSLog( @&amp;#34;%@&amp;#34;, subStr2 )
//NSRange 为结构体类型，成员location描述下标位置，成员length描述需要截取的字符串长度
NSRange rang = NSMakeRange(1, 3)
// rang.length = 4
// rang.location = 2
NSString *subStr3 = [str8 substringWithRange:rang]
NSLog( @&amp;#34;%@&amp;#34;, subStr3 )
//字符串拼接
//根据给定的参数字符串拼接并产生新的字符串，不改变原有的字符串。(不可变字符串)
NSString *newString1 = [str8 stringByAppendingString:@&amp;#34;+100&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, newString1 )
//根据给定的格式串以及参数拼接产生新的字符串
NSString *newString2 = [str8 stringByAppendingFormat:@&amp;#34;%d&amp;#34;, 1001]
NSLog( @&amp;#34;%@&amp;#34;, newString2 )
//路径拼接
NSString *newString3 = [str8 stringByAppendingPathComponent:@&amp;#34;xx.avi&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, newString3 )
//字符串替换
//通过给定的第二字符串替换str8中存在的字符串,所有的都替换
NSString *newString4 = [str8 stringByReplacingOccurrencesOfString:@&amp;#34;e&amp;#34; withString:@&amp;#34;呵呵&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, newString4 )
//字符串与数值类型数据的转换
NSString *numString1 = @&amp;#34;1&amp;#34;
NSInteger integerValue = [numString1 integerValue]
NSLog( @&amp;#34;%ld&amp;#34;, integerValue )
float integerValue1 = [numString1 floatValue]
NSLog( @&amp;#34;%f&amp;#34;, integerValue1 )
//大小写转换
NSString *string = @&amp;#34; i love you&amp;#34;
//转成大写字符
NSString *upperCaseStr = [string uppercaseString]
NSLog( @&amp;#34;%@&amp;#34;, upperCaseStr )
//转成小写字符
NSString *lowercaseStr = [upperCaseStr lowercaseString]
NSLog( @&amp;#34;%@&amp;#34;, lowercaseStr )
//转成首字母大写字符串(每个字符串的首字母转成大写的)
NSString *capitalString = [string capitalizedString]
NSLog( @&amp;#34;%@&amp;#34;, capitalString )
&lt;/code>&lt;/pre>&lt;h3 id="其他操作">其他操作&lt;/h3>
&lt;h4 id="format">Format&lt;/h4>
&lt;h3 id="nsmutablestring">NSMutableString&lt;/h3>
&lt;pre tabindex="0">&lt;code> NSMutableString *mutableStr1 = [[NSMutableString alloc] init]
NSLog( @&amp;#34;%@&amp;#34;, mutableStr1 )
NSMutableString *mutableStr2 = [NSMutableString string]
//可变字符串的拼接
[mutableStr1 appendString:@&amp;#34;abcdef&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, mutableStr1 )
NSString *resultString = [mutableStr1 stringByAppendingString:@&amp;#34;xxxx&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, resultString )
NSLog( @&amp;#34;%@&amp;#34;, mutableStr1 )
//另一个字符串拼接方法
//stringByAppendingFormat : appendFormat
[mutableStr2 appendFormat:@&amp;#34;wang+%d&amp;#34;, 1001]
NSLog( @&amp;#34;%@&amp;#34;, mutableStr2 )
//删除字符串
[mutableStr2 deleteCharactersInRange:NSMakeRange(2, 4)]
NSLog( @&amp;#34;%@&amp;#34;, mutableStr2 )
//插入字符串
//在给定的下标之前插入指定的字符串(前插)
[mutableStr2 insertString:@&amp;#34;123&amp;#34; atIndex:2]
NSLog( @&amp;#34;%@&amp;#34;, mutableStr2 )
//替换字符串
//根据给定的字符串的替换指定范围的字符们
[mutableStr2 replaceCharactersInRange:NSMakeRange(0, 3) withString:@&amp;#34;xxx&amp;#34;]
NSLog( @&amp;#34;%@&amp;#34;, mutableStr2 )
&lt;/code>&lt;/pre>&lt;h2 id="array">Array&lt;/h2>
&lt;h3 id="array-1">Array&lt;/h3>
&lt;h4 id="nsarray不可变数组">NSArray:不可变数组&lt;/h4>
&lt;p>[array count] : 数组的长度。&lt;/p>
&lt;p>[array objectAtIndex 0]: 传入数组脚标的 id 得到数据对象。&lt;/p>
&lt;p>[arrayWithObjects; &amp;hellip;] :向数组对象初始化赋值。这里可以写任意对象的指针,结尾必须使用 nil。&lt;/p>
&lt;pre tabindex="0">&lt;code>#import &amp;lt;Foundation/Foundation.h&amp;gt;
int main(int argc, const char * argv[])
{
@autoreleasepool {
NSObject *obj = [[NSObject alloc]init];
NSArray *array = [NSArray arrayWithObjects:
@&amp;#34;a&amp;#34;,
obj,
@&amp;#34;c&amp;#34;,nil];
NSLog(@&amp;#34;array Count:%lu&amp;#34;,[array count]);
//遍历数组
for (NSObject *object in array) {
NSLog(@&amp;#34;数组对象:%@&amp;#34;, object);
}
[obj release];
}
return 0;
}
&lt;/code>&lt;/pre>&lt;h4 id="nsmutablearray-可变对象数组">NSMutableArray 可变对象数组&lt;/h4>
&lt;ul>
&lt;li>创建增删&lt;/li>
&lt;/ul>
&lt;p>[NSMutableArray arrayWithCapacity:6] :初始化可变数组对象的长度，如果后面代码继续添加数组超过长度 6 以后 NSMutableArray 的长度会自动扩充，6 是自己可以设置的颗粒度。&lt;/p>
&lt;p>[array addObject:&amp;hellip;] : 向可变数组尾部添加数据对象。&lt;/p>
&lt;p>[array addObjectsFromArray:..] :向可变数组尾部添加一个数组对象。&lt;/p>
&lt;p>[array removeObject:(id)] :删除数组中指定元素，根据对象 isEqual 消息判断。&lt;/p>
&lt;p>[array removeObjectIdenticalTo:(id)] : 删除数组中指定元素,根据对象的地址判断&lt;/p>
&lt;p>[array removeObjectIdenticalTo:(id) inRange:(NSRange)] : 在指定范围内删除指定的元素。&lt;/p>
&lt;p>[array removeObjectsInArray:(NSArray *)] :删除一个数组的元素。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>索引遍历&lt;/p>
&lt;pre tabindex="0">&lt;code>for (NSObject * object in muArray) {
NSLog(@&amp;#34;数组对象:%@&amp;#34;, object);
}
&lt;/code>&lt;/pre>&lt;/li>
&lt;/ul>
&lt;h3 id="set">Set&lt;/h3>
&lt;h4 id="nsset">NSSet&lt;/h4>
&lt;p>NSSet 是 Objective-C 中的不可变集合。&lt;/p>
&lt;pre tabindex="0">&lt;code> // 两种初始化方式
NSSet *set1 = [[NSSet alloc] initWithObjects:@&amp;#34;1&amp;#34;, @&amp;#34;2&amp;#34;, @&amp;#34;3&amp;#34;, nil]
NSLog( @&amp;#34;%@&amp;#34;, set1 )
NSSet *set2 = [NSSet setWithObjects:@&amp;#34;12&amp;#34;, @&amp;#34;23&amp;#34;, @&amp;#34;34&amp;#34;, nil]
NSLog( @&amp;#34;%@&amp;#34;, set2 )
//用数组对象来创建集合对象
NSArray *array = @[@1, @2, @2]
//initWithArray 和 setWithArray 将数组对象转换成集合对象，这样能将数组中重复的对象过滤掉
NSSet *set3 = [[NSSet alloc] initWithArray:array]
NSLog( @&amp;#34;%@&amp;#34;, set3 )
NSSet *set4 = [NSSet setWithArray:array]
NSLog( @&amp;#34;%@&amp;#34;, set4 )
//获取集合中对象的个数
NSLog( @&amp;#34;%ld&amp;#34;, [set4 count] )
//获取集合中的对象(返回的是任意一个对象，如果集合中没有对象，则返回nil)
id object1 = [set4 anyObject]
NSLog( @&amp;#34;%@&amp;#34;, object1 )
//判断一个给定的对象是否包含在指定的集合中
NSString *result1 = [set4 containsObject:@2] ? @&amp;#34;YES&amp;#34; : @&amp;#34;NO&amp;#34;
NSLog( @&amp;#34;%@ is contained int set %@&amp;#34;, @2, result1 )
// @2 换成 @&amp;#34;2&amp;#34; 结果打印的是 NO
// NSString *result1 = [set4 containsObject:@&amp;#34;2&amp;#34;] ? @&amp;#34;YES&amp;#34; : @&amp;#34;NO&amp;#34;
// NSLog( @&amp;#34;%@ is contained int set %@&amp;#34;, @&amp;#34;2&amp;#34;, result1 )
&lt;/code>&lt;/pre>&lt;h4 id="nsmutableset">NSMutableSet&lt;/h4>
&lt;p>NSMutableSet 是可变集合。&lt;/p>
&lt;pre tabindex="0">&lt;code> //初始化
NSMutableSet *mutableSet1 = [[NSMutableSet alloc] init]
NSLog( @&amp;#34;%@&amp;#34;, mutableSet1 )
NSMutableSet *mutableSet2 = [NSMutableSet set]
NSLog( @&amp;#34;%@&amp;#34;, mutableSet2 )
//通过不可变对象创建
NSMutableSet *mutableSet3 = [[NSMutableSet alloc] initWithSet:set1]
NSLog( @&amp;#34;%@&amp;#34;, mutableSet3 )
NSMutableSet *mutableSet4 = [NSMutableSet setWithSet: set1]
NSLog( @&amp;#34;%@&amp;#34;, mutableSet4 )
//添加集合元素(注意：@4 和 @&amp;#34;4&amp;#34;不一样)
[mutableSet4 addObject:@4]
NSLog( @&amp;#34;%@&amp;#34;, mutableSet4 )
//删除单个集合元素
[mutableSet4 removeObject:@4]
NSLog( @&amp;#34;%@&amp;#34;, mutableSet4 )
//删除所有集合元素
[mutableSet4 removeAllObjects]
NSLog( @&amp;#34;%@&amp;#34;, mutableSet4 )
&lt;/code>&lt;/pre>&lt;h4 id="nscountedset">NSCountedSet&lt;/h4>
&lt;p>NSCountedSet 是 NSSet 的子类，能记录集合中的元素的重复次数。&lt;/p>
&lt;pre tabindex="0">&lt;code>NSCountedSet *countSet1 = [NSCountedSet set]
[countSet1 addObject:@1]
[countSet1 addObject:@2]
[countSet1 addObject:@3]
[countSet1 addObject:@2]
NSLog( @&amp;#34;%@&amp;#34;, countSet1 )
//单独获取某个对象在集合中出现过多少次
// NSLog( @&amp;#34;%ld&amp;#34;, [countSet1 countOfObjc:@3] )
NSLog( @&amp;#34;%ld&amp;#34;, [countSet1 countForObject:@5] )
&lt;/code>&lt;/pre>&lt;h1 id="流程控制">流程控制&lt;/h1>
&lt;h1 id="函数">函数&lt;/h1>
&lt;h2 id="代码块block">代码块(Block)&lt;/h2>
&lt;p>代码块本质上是和其他变量类似。不同的是，代码块存储的数据是一个函数体。使用代码块是，你可以像调用其他标准函数一样，传入参数数，并得到返回值。脱字符(^)是块的语法标记。按照我们熟悉的参数语法规约所定义的返回值以及块的主体(也就是可以执行的代码)。下图是如何把块变量赋值给一个变量的语法讲解：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://my.csdn.net/uploads/201208/07/1344323584_7609.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>类比而言，可以认为 Block 就是声明了一个匿名函数。&lt;/p>
&lt;pre tabindex="0">&lt;code> void (^printBlock)(NSString *x);
printBlock = ^(NSString* str)
{
NSLog(@&amp;#34;print:%@&amp;#34;, str);
};
printBlock(@&amp;#34;hello world!&amp;#34;);
&lt;/code>&lt;/pre>&lt;p>一般来说，建议把某个代码块声明为变量类型进行使用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="nf">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">^&lt;/span>&lt;span class="n">printBlock&lt;/span>&lt;span class="p">)(&lt;/span>&lt;span class="n">NSString&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="变量访问">变量访问&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="http://blog.csdn.net/chsadin/article/details/Block%E7%BC%96%E7%A8%8B%E5%80%BC%E5%BE%97%E6%B3%A8%E6%84%8F%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF" target="_blank" rel="noopener">Block 编程值得注意的那些事儿&lt;/a>(使用)
&lt;blockquote>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="http://www.cnblogs.com/wustlj/archive/2013/08/12/3252152.html" target="_blank" rel="noopener">ios 之 Block 研究&lt;/a> (Block 内部数据结构)
&lt;blockquote>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="http://www.cocoachina.com/applenews/devnews/2013/0802/6725.html" target="_blank" rel="noopener">谈 Objective-C Block 的实现&lt;/a> (Block 内部数据结构)
&lt;blockquote>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="http://www.cnblogs.com/biosli/archive/2013/05/29/iOS_Objective-C_Block.html" target="_blank" rel="noopener">对 Objective-C 中 Block 的追探&lt;/a> (Block 内部数据结构，讲得很好)&lt;/li>
&lt;/ul>
&lt;p>TestBlock.h 与 TestBlock.m 的实现&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// TestBlock.m
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// BlockDemo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Created by fenglh on 14-8-18.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copyright (c) 2014年 yons. All rights reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#import &amp;#34;TestBlock.h&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@implementation&lt;/span> &lt;span class="nc">TestBlock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@synthesize&lt;/span> &lt;span class="n">m_age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">init:&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nv">age&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">self&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nb">super&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">nil&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">m_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">AccessVarInBlock&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">typedef&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">MyBlock&lt;/span> &lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">outside_age&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">20&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Block 外部的整形变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">outside_age&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//Block 外部的指针变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">MyBlock&lt;/span> &lt;span class="n">aBlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="p">(){&lt;/span> &lt;span class="c1">//start Block
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34; class member variable:&lt;/span>&lt;span class="se">\t&lt;/span>&lt;span class="s">m_age = %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_age&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34; outside variable: &lt;/span>&lt;span class="se">\t\t&lt;/span>&lt;span class="s">outside_age = %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">outside_age&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">NSLog&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">@&amp;#34; outside point variable:p_age = %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_age&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">};&lt;/span> &lt;span class="c1">//end Block
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">m_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//语句1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//语句2
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">outside_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//语句3
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">aBlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>main 函数&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// main.m
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// BlockDemo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Created by fenglh on 14-8-18.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copyright (c) 2014年 yons. All rights reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#import &amp;lt;Foundation/Foundation.h&amp;gt;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#import &amp;#34;TestBlock.h&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">TestBlock&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">test&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">TestBlock&lt;/span> &lt;span class="n">alloc&lt;/span> &lt;span class="p">]&lt;/span> &lt;span class="nl">init&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">[&lt;/span>&lt;span class="n">test&lt;/span> &lt;span class="n">AccessVarInBlock&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果：&lt;/p>
&lt;pre tabindex="0">&lt;code>2014-08-18 23:40:35.334 BlockDemo[2136:303] class member variable: m_age = 100
2014-08-18 23:40:35.336 BlockDemo[2136:303] outside variable: outside_age = 20
2014-08-18 23:40:35.337 BlockDemo[2136:303] outside point variable:p_age = 100
&lt;/code>&lt;/pre>&lt;p>先看，AccessVarInBlock 方法，如果把代码 1、2、3(即 aBlock(); 上面三句)都&lt;strong>注释掉&lt;/strong>的话，其输出结果为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2014&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">08&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">35&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mf">06.513&lt;/span> &lt;span class="n">BlockDemo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2111&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">303&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="n">member&lt;/span> &lt;span class="nl">variable&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">m_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2014&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">08&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">35&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mf">06.516&lt;/span> &lt;span class="n">BlockDemo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2111&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">303&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">outside&lt;/span> &lt;span class="nl">variable&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">outside_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mi">2014&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">08&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">18&lt;/span> &lt;span class="mi">23&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">35&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mf">06.517&lt;/span> &lt;span class="n">BlockDemo&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2111&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="mi">303&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">outside&lt;/span> &lt;span class="n">point&lt;/span> &lt;span class="nl">variable&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="n">p_age&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可得出以下结论：&lt;/p>
&lt;ul>
&lt;li>指针变量和类成员变量，在 Block 的内部实现中，是一种引用而非拷贝。&lt;/li>
&lt;li>其他基本类型的变量，在 Block 的内部实现中，是一种拷贝。&lt;/li>
&lt;/ul>
&lt;h3 id="block-机制">Block 机制&lt;/h3>
&lt;p>将以下 Objective-C 文件进行 Clang 编译：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl"> &lt;span class="n">include&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">stdio&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">h&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">intint&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span> &lt;span class="o">=&amp;amp;&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">typedef&lt;/span> &lt;span class="nf">void&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">^&lt;/span> &lt;span class="n">typeBlock&lt;/span> &lt;span class="p">)(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">typeBlock&lt;/span> &lt;span class="n">aBlock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;i = %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;*p = %d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">aBlock&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c++" data-lang="c++">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="nc">__main_block_impl_0&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">__block_impl&lt;/span> &lt;span class="n">impl&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="nc">__main_block_desc_0&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">Desc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">// 定义一个整形变量(并非引用)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">//定义了一个指针变量，也就是一个引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">__main_block_impl_0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="nc">__main_block_desc_0&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">desc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">_i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">_p&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_i&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">_p&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="c1">//构造函数，赋值
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">impl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">isa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">_NSConcreteStackBlock&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">impl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">Flags&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">flags&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">impl&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">FuncPtr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">fp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Desc&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">desc&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现：&lt;/p>
&lt;p>1)原本的变量 i,在 block 的内部重新定义了一个 i 并且在该结构体的构造函数进行赋值，也就是对 i 进行了一份拷贝。&lt;/p>
&lt;p>2)指针变量 p，在 block 内部也有一个变量 p，但是在构造函数的时候，它是指针地址的赋值，也就是说是一份引用。&lt;/p>
&lt;p>3)可以猜测，类成员变量，在 block 的内部数据结构中也是类似一个指针的这样的实现！&lt;/p>
&lt;h1 id="类与对象">类与对象&lt;/h1>
&lt;h2 id="定义与实例化">定义与实例化&lt;/h2>
&lt;p>Objective-C 类的定义中需要在.h 文件中定义@interface,在.m 文件中也存在有@interface 与@implementation。在.h 文件的@interface 中定义的属性是公有属性，可以被外部文件访问。而.m 文件的@interface 中定义的属性是私有属性，只可以被内部文件访问。譬如在.h 文件中：&lt;/p>
&lt;pre tabindex="0">&lt;code>#import &amp;lt;UIKit/UIKit.h&amp;gt;
@interface ViewController : UIViewController
@end
&lt;/code>&lt;/pre>&lt;p>在.m 文件中：&lt;/p>
&lt;pre tabindex="0">&lt;code>#import &amp;#34;ViewController.h&amp;#34;
@interface ViewController ()
@property (nonatomic, weak) IBOutlet UIView *referencedView;
@end
@implementation ViewController
- (void)viewDidLoad {
[super viewDidLoad];
// Do any additional setup after loading the view, typically from a nib.
}
- (void)didReceiveMemoryWarning {
[super didReceiveMemoryWarning];
// Dispose of any resources that can be recreated.
}
@end
&lt;/code>&lt;/pre>&lt;h3 id="属性">属性&lt;/h3>
&lt;p>&lt;a href="http://blog.talisk.cn/blog/2016/03/05/iOS-@property/" target="_blank" rel="noopener">ObjectiveC 中的前世今生&lt;/a>&lt;/p>
&lt;p>在成员变量的管理上主要是依靠手动计数与 ARC 这两大机制，详情可以查看下文的 Advanced-内存管理这一章节。&lt;/p>
&lt;p>基本的成员变量的声明方式为：&lt;/p>
&lt;pre tabindex="0">&lt;code>@property int age; // 默认是赋值
@property(retain) Book * book; // retain 参数实现内存管理
&lt;/code>&lt;/pre>&lt;p>成员变量的相关属性有：&lt;/p>
&lt;p>(1)内存管理的相关参数&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数名&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>retain&lt;/td>
&lt;td>release 旧值，retain 新值&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>assign&lt;/td>
&lt;td>直接赋值，默认就是这个，适用于非 OC 对象类型&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>copy&lt;/td>
&lt;td>release 旧值，copy 新值&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>retain 是指针拷贝，copy 是内容拷贝。需要注意的是，如果需要为某个类添加 int、bool 这样的非 object 的属性，应该使用 assign 参数，即：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">@interface&lt;/span> &lt;span class="nc">MyClass&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@property&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">assign&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">BOOL&lt;/span> &lt;span class="n">myBool&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@end&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@implementation&lt;/span> &lt;span class="nc">MyClass&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@synthesize&lt;/span> &lt;span class="n">myBool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_myBool&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// creates an ivar myBool_ to back the property myBool.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">@end&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>(2)是否要生成 set 方法&lt;/p>
&lt;pre tabindex="0">&lt;code>@property (readonly) int age; // 只读，只生成getter方法
@property (readwrite) int name; // 读写,默认是读写
&lt;/code>&lt;/pre>&lt;p>(3)多线程管理&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>参数名&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>nonautomic&lt;/td>
&lt;td>性能高，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>automic&lt;/td>
&lt;td>性能低(默认)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;pre tabindex="0">&lt;code>　　@property (nonautomic, assign) int age; // 以后这样写,默认的assign也要写出来，这样比较明显
　　@property (setter = myAge：) int age; // setter = set方法名，自定义setter方法名，不要忘记冒号
　　@property (getter = getAge) int age; // getter = get方法名，自定义getter方法名
　　@property (getter = isRich) BOOL rich; // 一般这个会用在BOOL类型的变量声明，getter方法名以is开头
&lt;/code>&lt;/pre>&lt;p>(4)指针类型&lt;/p>
&lt;p>iOS 常见的指针类型有 strong 与 weak 两种，二者的区别可以借鉴于&lt;a href="http://stackoverflow.com/questions/9262535/explanation-of-strong-and-weak-storage-in-ios5" target="_blank" rel="noopener">StackOverflow&lt;/a>上的这篇文章，简而言之：weak 和 strong 不同的是 当一个对象不再有 strong 类型的指针指向它的时候 它会被释放，即使还有 weak 型指针指向它。一旦最后一个 strong 型指针离去，这个对象将被释放，所有剩余的 weak 型指针都将被清除。&lt;/p>
&lt;p>可能有个例子形容是妥当的。想象我们的对象是一条狗，狗想要跑掉(被释放)。strong 型指针就像是栓住的狗。只要你用牵绳挂住狗，狗就不会跑掉。如果有 5 个人牵着一条狗(5 个 strong 型指针指向 1 个对象)，除非 5 个牵绳都脱落，否着狗是不会跑掉的。weak 型指针就像是一个小孩指着狗喊到：“看！一只狗在那” 只要狗一直被栓着，小孩就能看到狗，(weak 指针)会一直指向它。只要狗的牵绳脱落，狗就会跑掉，不管有多少小孩在看着它。&lt;/p>
&lt;p>只要最后一个 strong 型指针不再指向对象，那么对象就会被释放，同时所有的 weak 型指针都将会被清除。&lt;/p>
&lt;p>(5)读写属性&lt;/p>
&lt;p>Objective-C 语言关键词，@property 与@synthesize 配对使用。@synthesize 可以为某个属性方法。&lt;/p>
&lt;h4 id="延迟实例化">延迟实例化&lt;/h4>
&lt;p>对于复杂数据类型的类的成员变量而言，往往面临着一个分配与实例化的要求。如果把这种实例化全部写入 init 方法中，无疑会导致极大的内存消耗。很多成员变量可能并不需要被实例化，OJC 提供了一种类似于 Getter/Setter 的方法来进行延迟实例化：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//.h
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">@property&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">nonatomic&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">strong&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">NSMutableArray&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">myArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//.m
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">@synthesize&lt;/span> &lt;span class="n">myArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">_myArray&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="c1">//新版Xcode中自动会加上这句话
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">NSMutableArray&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">myArray&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">_myArray&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_myArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="n">NSMutableArray&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nl">initWithCapacity&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">_myArray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="方法">方法&lt;/h3>
&lt;p>Objective-C 中，调用方法被称为发送消息，通知对象执行某种操作。语法如下：[shape draw]&lt;/p>
&lt;p>(1)类声明(接口)：&lt;/p>
&lt;p>一般公开方法的声明会放置在.h 文件的@interface 中，隐私方法的声明放在.m 文件的@interface 中。方法也可以不需要声明而直接实现。&lt;/p>
&lt;pre tabindex="0">&lt;code>@interface TestCoop : NSObject {
int iMonth;
int iYear;
int iDay;
}
- (void) setYear: (int) iYear;
- (void) primalSetData: (int)iYear :(int)iMonth :(int)iDay;
- (void) setData: (int)Year iMonth:(int)iMonth iDay:(int)iDay;
- (void) displayDateInfo;
@end
&lt;/code>&lt;/pre>&lt;p>1、前面的短线/- 表示这是 Objective-C 方法的声明，用来区分函数原型(C 语言中)与(Objective—C 中)方法声明的方式。短线后面是方法的返回类型/比如(void)，位于圆括号中。方法名字前面的单个减号(-)表明该方法是一个实例方法。如果方法名字前面是一个加号(+)，则表明该方法是一个类(static)方法。&lt;/p>
&lt;p>1.1 注意，方法的声明在括号后面，@end 之前 {}区域里只有变量的定义，这点和 C++很不一样。&lt;/p>
&lt;p>2、返回类型后面自然是函数名字，和 C 语言一样的，不同的是参数声明方法&lt;/p>
&lt;p>2.1、无参数的函数后面不需要加括号和冒号，直接是函数名结束加分号，比如: &lt;code>- (void) displayDateInfo;&lt;/code>&lt;/p>
&lt;p>2.2、有参数的后面加冒号和参数类型名字，比如：&lt;/p>
&lt;pre tabindex="0">&lt;code>- (void) setDay: (int) iDay; //单个参数
- (void) primalSetData: (int)iYear :(int)iMonth :(int)iDay;//多个参数
&lt;/code>&lt;/pre>&lt;p>objective 还提供一种中缀符的语法，方法的名称和参数都是和在一起的：&lt;/p>
&lt;p>参数前面多加一个标识符，通常和变量名一样，如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>- (void) setData: (int)Year iMonth:(int)iMonth iDay:(int)iDay;//多个参数
&lt;/code>&lt;/pre>&lt;h3 id="实例化">实例化&lt;/h3>
&lt;pre tabindex="0">&lt;code>TestCoop *ptest = [TestCoop new];
TestCoop *ptest = [[TestCoop alloc] init];
&lt;/code>&lt;/pre>&lt;p>苹果推荐使用第二种方法，虽然繁琐点。
在引入了 Swift 之后，如果要在 Objective-C 中调用含有参数的 Swift 的&lt;/p>
&lt;h4 id="单例模式">单例模式&lt;/h4>
&lt;p>单例模式是常用的设计模式之一，有助于减少冗余代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-objective-c" data-lang="objective-c">&lt;span class="line">&lt;span class="cl">&lt;span class="p">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">id&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">sharedInstance&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">static&lt;/span> &lt;span class="n">dispatch_once_t&lt;/span> &lt;span class="n">pred&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">__strong&lt;/span> &lt;span class="k">static&lt;/span> &lt;span class="kt">id&lt;/span> &lt;span class="n">_sharedObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">nil&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">dispatch_once&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">pred&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">^&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">_sharedObject&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="nb">self&lt;/span> &lt;span class="n">alloc&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="n">init&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="c1">// or some other init method
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">_sharedObject&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="匿名类">匿名类&lt;/h3>
&lt;p>譬如&lt;code>id&amp;lt;NSObject&amp;gt;&lt;/code>这样的就是代表一个匿名类。&lt;/p>
&lt;h2 id="protocol--delegate">Protocol &amp;amp; Delegate&lt;/h2>
&lt;p>Protocol 类似 C++中的抽象类和 Java 中的 interface。分为 Formal protocol 和 informal protocol 两种，其中在 Objective C 2.0 之前，informal protocol 是 Cocoa 中实现 delegate 的重要基础。因为 Objective C 2.0 引入了@optional 和@required 关键字。delegate 是一种常用的设计模式，而不是 Objective C 或者 Cocoa 的 feature，也没有任何关键字是给 delegate 用的。Delegate 其实表示的是一种代理模式，&lt;/p>
&lt;p>举例而言，这叫好比我想买个手机，所以我有个 buyIphone 方法,但是我不知道谁那买手机,所以把这个需求发布出去(比如公布在网站上),如果有卖手机的商人(也就是说他能实现 buyIphone 这个方法)看到，他就会接受我的委托,(在商人自己的类中实现&lt;XXXdelegate>),那么我的委托对象就指向了这个商人..当我要买手机的时候，直接找他就行了.&lt;/p>
&lt;pre tabindex="0">&lt;code>@protocol MyDelegate
-(void)buyIphone:(NSString *)iphoneType money:(NSString *)money;
@end
@interface My : NSObject
{
id&amp;lt;MyDelegate&amp;gt; deleage;
}
@property(assign,nonatomic)id&amp;lt;MyDelegate&amp;gt; delegate;
@end
&lt;/code>&lt;/pre>&lt;p>代码中声明了一个协议 名叫 Mydelegate,在其中有一个 buyIphone 方法，即一个委托项。当我要购买手机的时候只需要通过 delegate 调用 BuyIphone 方法即可.&lt;/p>
&lt;p>如下:&lt;/p>
&lt;pre tabindex="0">&lt;code>delegate = [[Business alloc] init]
-(void)willbuy
{
[delegate buyIphone:@&amp;#34;iphone 4s&amp;#34; money:@&amp;#34;4888&amp;#34;];
}
&lt;/code>&lt;/pre>&lt;p>例如:商人类实现了这一委托(用&lt;Mydelegate>表示实现)&lt;/p>
&lt;pre tabindex="0">&lt;code>#import &amp;lt;Foundation/Foundation.h&amp;gt;
#import &amp;#34;My.h&amp;#34;
@interface Business : NSObject&amp;lt;MyDelegate&amp;gt;
@end
&lt;/code>&lt;/pre>&lt;p>然后在 @implementation Business 中调用 buyIphone 方法&lt;/p>
&lt;pre tabindex="0">&lt;code>#import &amp;#34;Business.h&amp;#34;
@implementation Business
-(void)buyIphone:(NSString *)iphoneType money:(NSString *)money
{
NSLog(@&amp;#34;手机有货，这个价钱卖你了，发货中!!&amp;#34;);
}
@end
&lt;/code>&lt;/pre>&lt;h1 id="advanced">Advanced&lt;/h1>
&lt;h2 id="内存管理">内存管理&lt;/h2>
&lt;p>苹果的内存管理从早期的手动的引用计数到后面的 autoreleasepool，以及到现在的 ARC。&lt;/p>
&lt;blockquote>
&lt;p>参考资料&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://segmentfault.com/a/1190000002879323" target="_blank" rel="noopener">Objective-C 内存管理的历史和参考资料&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;h3 id="自动释放池">自动释放池&lt;/h3>
&lt;h3 id="arc">ARC&lt;/h3></description></item></channel></rss>