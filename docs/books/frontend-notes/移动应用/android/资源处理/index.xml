<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>资源处理 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/</link>
      <atom:link href="https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/index.xml" rel="self" type="application/rss+xml" />
    <description>资源处理</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>资源处理</title>
      <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/</link>
    </image>
    
    <item>
      <title>字符串</title>
      <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86/%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;本文主要讲解 Android 开发中常见的 strings.xml 的使用技巧。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;避免过度复用&#34;&gt;避免过度复用&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;不要复用不同页面上的字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.假设你现在在 Sign In 与 Sign Up 两个界面上都设置了一个加载提示框，因为两个都是用于提示正在加载中的，因此你打算使用相同的提示语：&lt;code&gt;R.string.loading&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;不过后来 PM 说这样实在太不友好了，因此你打算用两个更具体点的提示语来代替，因此你将你的&lt;code&gt;strings.xml&lt;/code&gt;修改为了:&lt;/p&gt;
&lt;p&gt;2.对于一个国际化的项目，你并不知道应用最后需要支持多少种语言，可能你需要在某些语言中表述某些情景是相同的词汇，而某些语言中某些情景压根不同，譬如:&lt;/p&gt;
&lt;p&gt;注意，在英文版本中的 strings.xml 中对于&lt;em&gt;R.string.download_file_yes&lt;/em&gt; 与 &lt;em&gt;R.string.terms_of_use_yes&lt;/em&gt; 都使用了 Yes，而 Ukrainian 版本中则是两个单词。&lt;/p&gt;
&lt;h1 id=&#34;合理分割&#34;&gt;合理分割&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;对于相同页面中的字符串以前缀与注释分割&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1.添加前缀到字符串上有助于辅助快速地识别字符串是属于哪个页面的。2.清晰的字符串的区分也有助于未来对国际化的支持，可以按照页面来逐个地进行多语言支持。&lt;/p&gt;
&lt;h1 id=&#34;format&#34;&gt;Format&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 Resources#getString(int id, Object&amp;hellip;formatArgs) 来格式化字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽量避免使用&lt;code&gt;+&lt;/code&gt;来连接字符串，因为在不同的语言里对于词汇的划分是不一致的。&lt;/p&gt;
&lt;p&gt;正确的方法是使用:&lt;a href=&#34;https://developer.android.com/reference/android/content/res/Resources.html#getString%28int,%20java.lang.Object...%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;Resources#getString(int id, Object… formatArgs)&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;plurals复数处理&#34;&gt;Plurals：复数处理&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用&lt;code&gt;Resources#getQuantityString (int id, int quantity)&lt;/code&gt;来处理复数字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽量不要在 Java 代码中判断是否需要使用复数表述，同样是因为不同的语言对于复数表述的文法规则是不一样的。&lt;/p&gt;
&lt;p&gt;正确的方法是使用&lt;code&gt;Resources#getQuantityString (int id, int quantity)&lt;/code&gt;来进行处理:&lt;/p&gt;
&lt;h1 id=&#34;words-highlighting单词高亮&#34;&gt;Words highlighting：单词高亮&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 HTML 文法规范来进行单词高亮&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果我们希望在 TextView 中修改一些单次的颜色，可能&lt;code&gt;ForegroundColorSpan&lt;/code&gt;不一定是最佳的选择，同样是因为基于下标的高亮策略可能在不同的语言中出现问题。最好的呢，也还是使用 HTML 的字体颜色标签进行控制，譬如你希望在&lt;code&gt;Discover and play games&lt;/code&gt;这一段话中需要将&lt;code&gt;Discover&lt;/code&gt;与&lt;code&gt;play&lt;/code&gt;进行高亮展示:&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
