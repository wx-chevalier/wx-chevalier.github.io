<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>工程实践 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</link>
      <atom:link href="https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/index.xml" rel="self" type="application/rss+xml" />
    <description>工程实践</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>工程实践</title>
      <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/</link>
    </image>
    
    <item>
      <title>Android Development ： Some of the best practices</title>
      <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/android-development-some-of-the-best-practices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/android-development-some-of-the-best-practices/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Apk 解析</title>
      <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/apk-%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/apk-%E8%A7%A3%E6%9E%90/</guid>
      <description>&lt;h1 id=&#34;apk-解析&#34;&gt;Apk 解析&lt;/h1&gt;
&lt;p&gt;系统为每个 APK 创建进程时，都会通过 PathClassLoader 类进行加载，同时开发者也可以通过 DexClassLoader 动态加载额外的 Dex 文件，有点类似于 dlopen 和 dlsym 函数的作用。PathClassLoader 和 DexClassLoader 两者都承继自 BaseDexClassLoader，最终都是通过 DexFile 完成对 dex 的加载。一般情况下每个 ClassLoader 对应一个 DexFile，但其本身是可以包含多个 DexFile 的，当要加载一个 Class 时，会遍历各个 DexFile。&lt;/p&gt;
&lt;p&gt;类 DexFile 底层是通过 JNI 方式实现的，针对 APK 文件(包括 jar 和 zip)和二进制字节流，系统分别提供了 dvmDexFileOpenFromFd 和 dvmDexFileOpenPartial 两个函数进行处理。这两个流程最终目的都是构造出 DexOrJar 结构体，并通过 JNI 接口把该结构体的地址保存到 DexFile 的私有成员变量 mCookie。DexOrJar 结构主要由 RawDexFile 和 JarFile 组成。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Best Practices for Android Developer Productivity</title>
      <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/best-practices-for-android-developer-productivity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/best-practices-for-android-developer-productivity/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@sergii/best-practices-for-android-developer-productivity-cfd6ffba804c#.bp2tjpwt0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原文地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;软件工程师的工作效率不仅依赖于知识的掌握程度与经验，也会依赖于你选择的工具集合、合适的环境配置以及团队内的合作技巧。本文即是作者在&lt;a href=&#34;http://droidcon.de/en/sessions/effective-android-development&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Droidcon Berlin&lt;/a&gt;上演讲的总结。&lt;/p&gt;
&lt;h1 id=&#34;看穿你的-androidmanifest&#34;&gt;看穿你的 AndroidManifest&lt;/h1&gt;
&lt;p&gt;众所周知，我们开发时候在文本编辑器中看到的&lt;code&gt;AndroidManifest.xml&lt;/code&gt;并非最终打包到应用中的&lt;code&gt;AndroidManifest.xml&lt;/code&gt;文件。在打包时，编译器会自动地将你所使用的第三方依赖库中的譬如&lt;code&gt;&amp;lt;uses-permission/&amp;gt;&lt;/code&gt;这些元素从它们自己的 Manifests 文件中抽取出来然后统一在主入口的&lt;code&gt;AndroidManifest.xml&lt;/code&gt;文件中声明，关于这部分的详细说明可以参考&lt;a href=&#34;https://commonsware.com/blog/2015/06/25/hey-where-did-these-permissions-come-from.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。Android Studio 2.2 中提供了一个新特性，&lt;a href=&#34;http://android-developers.blogspot.de/2016/05/android-studio-22-preview-new-ui.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Merged Manifest Viewer&lt;/a&gt;可以用于预览在 APK 构建之后最终生成的&lt;code&gt;AndroidManifest.xml&lt;/code&gt;文件，该文件中会包含项目依赖中声明的构建类型、变量等等信息。&lt;/p&gt;
&lt;h1 id=&#34;好好使用-support-annotations&#34;&gt;好好使用 Support Annotations&lt;/h1&gt;
&lt;p&gt;另一个非常有用的工具就是 Support Annotations Library，可以直接在 build.gradle 文件中添加&lt;code&gt;com.android.support:support-annotations:23.4.0&lt;/code&gt;依赖，然后可以在代码中添加元注释来辅助很快地 Bug 追踪与代码规则定义。最常见的使用场景就是用于标记 Nullable 与 Non-Nullable 变量，将整型标记为资源标识符以及设置某个函数的运行线程。不过因为这些注释属于 Metadata Annotations，即使某些定义的规则被破坏了项目还是会正常编译。只不过 Android Studio 与 Lint 会自动高亮地展示这些警告，并且在 CI 工具中也可以使用这些警告。&lt;/p&gt;
&lt;h1 id=&#34;快速的-code-review&#34;&gt;快速的 Code Review&lt;/h1&gt;
&lt;p&gt;Code Review 是项目开发中的常见操作，我们需要切换到某个 Feature 分支，然后重新编译运行项目，常见的工作流如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;暂存本分支的更改&lt;/li&gt;
&lt;li&gt;检出待 Review 的分支&lt;/li&gt;
&lt;li&gt;在 IDE 中重载 gradle 配置文件&lt;/li&gt;
&lt;li&gt;在 IDE 中浏览代码&lt;/li&gt;
&lt;li&gt;编译、运行与测试应用&lt;/li&gt;
&lt;li&gt;切换分支并且重复以上步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述流程很规范很正常，不过当你的项目拥有 1000 个以上的类与不同的配置时，估计你要好几分钟来等待项目编译完毕。我们的解决方案是为特征分支使用单独的 IDE 实例与仓库文件夹，这样会避免你来回地进行分支切换。如果你想用这套方案，那么建议你到电脑至少要 16GB 以上的 RAM，你会觉得物有所值的。&lt;/p&gt;
&lt;h1 id=&#34;修改的热加载&#34;&gt;修改的热加载&lt;/h1&gt;
&lt;p&gt;笔者在 React 开发中使用 HOT Reload 是个很不错的体验，而在 Android 开发中，即使是一个很小的 Android 项目，也需要等待不少的时间来等待修改之后的代码重新构建与部署，更何况对于那些有成百上千个类与 XML 布局文件的项目。另一方面，你也需要在你的应用中跳转选择到合适的页面来查看你做的更改的实际效果。2015 年底，Android 社区逐步使用两个工具来加速代码更改的加载速度，首先是&lt;a href=&#34;https://zeroturnaround.com/software/jrebel-for-android/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JRebel&lt;/a&gt;，源于 Java 在服务端开发中的长期实践。另一个是 Google 团队随着 Android Studio 2.0 一起推出的工具：&lt;a href=&#34;https://developer.android.com/studio/run/index.html#instant-run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Instant Run&lt;/a&gt;。两个工具的目标差不多，不过 JRebel 包含更多的特性，但是它也需要付费。作者编辑了一个简单的表单来描述二者的特性对比&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.android.com/studio/run/index.html#instant-run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developer.android.com/studio/run/index.html#instant-run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reto Meier: “Instant Run: How Does it Work?!”&lt;/li&gt;
&lt;li&gt;Oleg Selajev: “Looking at JRebel for Android and Instant Run …”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两个工具都正处在不断的开发与完善中，从我们的经验来看，目前还有很多的用户场景并没有被涉及到，因此我们也相信未来这两个工具的提升空间令人期待。&lt;/p&gt;
&lt;h1 id=&#34;性能分析与执行效率估测&#34;&gt;性能分析与执行效率估测&lt;/h1&gt;
&lt;p&gt;另一个应用调试与性能分析中常需的用户特性是对于方法的输入输出与执行时间的日志记录，作者在这方面是使用了 Jake Wharton 开源的&lt;a href=&#34;https://github.com/JakeWharton/hugo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo&lt;/a&gt;，这个工具在你不希望使用复杂的譬如 Systrace 工具的时候很有帮助。譬如我们会希望监测如下的目标方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@DebugLog
public String getName(String first, String last) {/* ... */}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后在控制台中我们可以看到如下的信息&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;V/Example: --&amp;gt; getName(first=&amp;#34;Jake&amp;#34;, last=&amp;#34;Wharton&amp;#34;)
V/Example: &amp;lt;-- getName [16ms] = &amp;#34;Jake Wharton&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;读取设备中的日志输出&#34;&gt;读取设备中的日志输出&lt;/h1&gt;
&lt;p&gt;我们在开发过程中经常会使用 Android Studio 内置的 Android Monitor 来读取日志信息，这种方式确实很简单易用，不过也有很大的缺陷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们必须使用额外的工具来对日志记录进行格式化&lt;/li&gt;
&lt;li&gt;Android Studio 的调试工具是附着到应用的进程 ID 上，一旦我们重新部署应用或者杀掉了进程，之前打印出来的日志就会被覆盖掉&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作者在这里推荐的是 Jake Wharton 开源的另一款工具&lt;a href=&#34;https://github.com/JakeWharton/pidcat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pidcat&lt;/a&gt;，其优势在于&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更友好的配色与格式化&lt;/li&gt;
&lt;li&gt;根据包名来获取调试信息，即使重新部署应用也不会删除之前的日志记录&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;网络调试与分析&#34;&gt;网络调试与分析&lt;/h1&gt;
&lt;p&gt;应用开发中我们也常常需要通过查看 HTTPClient 库的日志记录来读取客户端与服务端的交互信息，不过这种方法往往会有如下的一些缺陷&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你在开发过程中全程保持网络的日志输出，会大大影响应用的运行性能，毕竟需要一些时间来输出日志&lt;/li&gt;
&lt;li&gt;如果你的应用使用的其他依赖库需要进行网络通信，譬如 Google Analytics 这样的分析工具，我们需要进行额外的配置来过滤掉这些扰乱的信息&lt;/li&gt;
&lt;li&gt;在生产环境下无法监测到网络通信信息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这边作者首先建议的方法是使用类似于&lt;a href=&#34;https://www.charlesproxy.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Charles Proxy&lt;/a&gt;这样的 HTTP 监测与代理工具，它可以将你的应用当成黑箱对待，并且提供了以下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP/HTTPS 的流量监控与记录&lt;/li&gt;
&lt;li&gt;重定义某些特定情况下的服务端返回信息&lt;/li&gt;
&lt;li&gt;设置部分网络调用的断点&lt;/li&gt;
&lt;li&gt;为设备安装合适的 SSL 证书来阅读加密的流量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个推荐的工具就是&lt;a href=&#34;http://facebook.github.io/stetho/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook Stetho&lt;/a&gt;，它允许开发者在生产环境下获取网络交互数据，不过我们在开发中肯定也是可以使用该工具，不过作者发现好像它还不能读取基于 SSL 的加密信息。&lt;/p&gt;
&lt;h1 id=&#34;多版本测试&#34;&gt;多版本测试&lt;/h1&gt;
&lt;p&gt;在应用开发过程中，作者建议务必要在 Lollipop 以及更高级的 API(API 21+) 以上来进行应用测试，从而发现因为系统适配而导致的潜在问题。我们最常见的 Bug 就是因为触摸反馈与系统颜色问题导致的 Bug，譬如我们经常看到因为使用了老版本的 API 而导致应用崩溃。&lt;/p&gt;
&lt;h1 id=&#34;ui-自动化测试&#34;&gt;UI 自动化测试&lt;/h1&gt;
&lt;p&gt;有些用户场景下我们需要在不同的设备中进行重复的 UI 点击或者输入操作，如果你需要在两三个设备上进行重复的测试，估摸着你会爆炸的。我们首先想到的方法是通过输入&lt;code&gt;adb&lt;/code&gt;命令来模拟用户点击输入，譬如&lt;em&gt;adb shell input keyevent 4&lt;/em&gt;等效于在测试设备上点击了 UP 按钮。这样的话你可以在 adb 中完成系统按键点击、键盘输入与屏幕点击。而在多设备的环境下，我们建议使用 Roman Nurik 开源的 &lt;a href=&#34;https://github.com/romannurik/env/blob/master/bin/ninja-adb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;adb-ninja&lt;/a&gt; 脚本来在多个设备间同步提交指令。&lt;/p&gt;
&lt;h1 id=&#34;buildgradle-配置检测&#34;&gt;build.gradle 配置检测&lt;/h1&gt;
&lt;p&gt;即使是有经验的开发者也往往会使用些过时的配置方案，作者建议根据如下顺序来检查下你的 build.gradle 配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 jcenter 来替换 mavenCentral，jcenter 的响应速度比 mavenCentral 好。&lt;/li&gt;
&lt;li&gt;检测 &lt;em&gt;Android Plugin for Gradle&lt;/em&gt; 的版本号，使用最新版本的依赖有助于提高编译速度。&lt;/li&gt;
&lt;li&gt;不要使用范围来定义依赖的版本号，而使用 “23.4.0” 这样固定的版本号来避免不确定的依赖中的 API 的变化。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://153.3.251.190:11900/best-practices-for-android-developer-productivity&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>应用加固</title>
      <link>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E5%BA%94%E7%94%A8%E5%8A%A0%E5%9B%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/frontend-notes/%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8/android/%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E5%BA%94%E7%94%A8%E5%8A%A0%E5%9B%BA/</guid>
      <description>&lt;h1 id=&#34;应用加固&#34;&gt;应用加固&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;第一代：落地加载：其原理是基于 Java 虚拟机提供的动态加载技术。缺点是 Dex 落地加载，破解成本非常低。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第二代：内存加载：其原理是基于 inline hook 技术对系统 read 和 write 函数添加额外的加解密处理，或直接调用 Dalvik 虚拟机提供的函数，以字节流方式加载。该加固方案虽然避免文件落地的缺陷，但缺点是解密后的 Dex 连续完整的在内存中存在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第三代：指令抽离：其原理是在类被执行时才进行函数修复，解决了 Dex 内存连续的问题。但由于指令抽离技术方案使用了大量虚拟机内部结构的特性，再加上 Android ROM 厂商复杂的定制，带来了大量的兼容性问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;第四代：Java2C：Java2C 是目前 Dex 加固保护中安全性最高的方案，与前三代 Dex 加固不同的是它脱离了虚拟提供的动态加载技术。其原理是将 Java 代码翻译成 C 并生对应的二进制文件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
