<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux 资源隔离 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/</link><atom:link href="https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/index.xml" rel="self" type="application/rss+xml"/><description>Linux 资源隔离</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Linux 资源隔离</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/</link></image><item><title>AUFS</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/aufs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/aufs/</guid><description>&lt;h1 id="aufs">AUFS&lt;/h1>
&lt;p>联合文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into asingle virtual filesystem)。联合文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。另外，不同 Docker 容器就可以共享一些基础的文件系统层，同时再加上自己独有的改动层，大大提高了存储的效率。&lt;/p>
&lt;p>Docker 支持的 UnionFS 包括 OverlayFS，AUFS，devicemapper，vfs 以及 btrfs 等，查看 UnionFS 版本可以用 docker info 查看对应输出中的 Storage 项即可，早期的 Docker 版本用 AUFS 和 devicemapper 居多，新版本 Docker 在 Linux 3.18 之后版本基本默认用 OverlayFS。&lt;/p>
&lt;h1 id="overlayfs">OverlayFS&lt;/h1>
&lt;p>OverlayFS 与早期用过的 AUFS 类似，不过它比 AUFS 更简单，读写性能更好，在 docker-ce18.03 版本中默认用的存储驱动是 overlay2，老版本 overlay 官方已经不推荐使用。它将两个目录 upperdir 和 lowdir 联合挂载到一个 merged 目录，提供统一视图。其中 upperdir 是可读写层，对容器修改写入在该目录中，它也会隐藏 lowerdir 中相同的文件。而 lowdir 是只读层，Docker 镜像在这层。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230424144518.png" alt="OverlayFS" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在看 Docker 镜像和容器存储结构前，可以先简单操作下 OverlayFS 看下基本概念。创建了 lowerdir 和 upperdir 两个目录，然后用 overlayfs 挂载到 merged 目录，这样在 merged 目录可以看到两个目录的所有文件 both.txt 和 only.txt。其中 upperdir 是可读写的，而 lowerdir 只读。通过 merged 目录来操作文件可以发现：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>读取文件时，如果 upperdir 不存在该文件，则会从 lowerdir 直接读取。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改文件时并不影响 lowerdir 中的文件，因为它是只读的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果修改的文件在 upperdir 不存在，则会从 lowerdir 拷贝到 upperdir，然后在 upperdir 里面修改该文件，并不影响 lowerdir 目录的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>删除文件则是将 upperdir 中将对应文件设置成了 c 类型，即字符设备类型来隐藏已经删除的文件(与 AUFS 创建一个 whiteout 文件略有不同)。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># tree -a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">&lt;/span>&lt;span class="o">|--&lt;/span> &lt;span class="n">lowerdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- merged
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- upperdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">`-- workdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">work&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">5&lt;/span> &lt;span class="n">directories&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="n">files&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># mount -t overlay overlay -olowerdir=./lowerdir,upperdir=./upperdir,workdir=./workdir ./merged&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># tree&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">&lt;/span>&lt;span class="o">|--&lt;/span> &lt;span class="n">lowerdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- merged
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| |-- both.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">only.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span> &lt;span class="n">upperdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- both.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">`&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">workdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">`-- work
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">5 directories, 5 files
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root@host:/home/vagrant/overlaytest# tree -a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- lowerdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| |-- both.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">only.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span> &lt;span class="n">merged&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- upperdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">`-- workdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">work&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">5&lt;/span> &lt;span class="n">directories&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="n">files&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># echo &amp;#34;modified both&amp;#34; &amp;gt; merged/both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># cat upperdir/both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">modified&lt;/span> &lt;span class="n">both&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># cat lowerdir/both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">lower&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># echo &amp;#34;modified only&amp;#34; &amp;gt; merged/only.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># tree&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">&lt;/span>&lt;span class="o">|--&lt;/span> &lt;span class="n">lowerdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- merged
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| |-- both.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">only.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span> &lt;span class="n">upperdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">`&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">workdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">`-- work
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">5 directories, 6 files
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root@host:/home/vagrant/overlaytest# cat upperdir/only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">modified only
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root@host:/home/vagrant/overlaytest# cat lowerdir/only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">lower only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root@host:/home/vagrant/overlaytest# tree -a
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- lowerdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| |-- both.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">only.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span> &lt;span class="n">merged&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- upperdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| |-- both.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">only.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">`-- workdir
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n"> `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">work&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">5&lt;/span> &lt;span class="n">directories&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="n">files&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># rm merged/both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># tree -a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">&lt;/span>&lt;span class="o">|--&lt;/span> &lt;span class="n">lowerdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">|-- merged
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">| `&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">only.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|--&lt;/span> &lt;span class="n">upperdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="o">|--&lt;/span> &lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">|&lt;/span> &lt;span class="n">`-- only.txt
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">`&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">workdir&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">`&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="n">work&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlaytest&lt;/span>&lt;span class="c1"># ls -ls upperdir/both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="o">---------&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">02&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">31&lt;/span> &lt;span class="n">upperdir&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">both.txt&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>回到 Docker 里面，我们拉取一个 Nginx 镜像，有三层镜像，可以看到在 overlay2 对应每一层都有个目录(注意，这个目录名跟镜像层名从 docker1.10 版本后名字已经不对应了)，另外的 l 目录是指向镜像层的软链接。最底层存储的是基础镜像 debian/alpine，上一层是安装了 nginx 增加的可执行文件和配置文件，而最上层是链接/dev/stdout 到 nginx 日志文件。而每个子目录下面的 diff 目录用于存储镜像内容，work 目录是 OverlayFS 内部使用的，而 link 文件存储的是该镜像层对应的短名称，lower 文件存储的是下一层的短名称。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># docker pull nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Using&lt;/span> &lt;span class="n">default&lt;/span> &lt;span class="n">tag&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">latest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">latest&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Pulling&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="n">library&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">f2aa67a397c4&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Pull&lt;/span> &lt;span class="n">complete&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">3&lt;/span>&lt;span class="n">c091c23e29d&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Pull&lt;/span> &lt;span class="n">complete&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span>&lt;span class="n">a99993b8636&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Pull&lt;/span> &lt;span class="n">complete&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Digest&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">sha256&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="n">fb320e2a1b1620b4905facb3447e3d84ad36da0b2c8aa8fe3a5a81d1187b884&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Status&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Downloaded&lt;/span> &lt;span class="n">newer&lt;/span> &lt;span class="n">image&lt;/span> &lt;span class="n">for&lt;/span> &lt;span class="n">nginx&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">latest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># ls -ls /var/lib/docker/overlay2/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">total&lt;/span> &lt;span class="m">16&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">04&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="m">09495e5085&lt;/span>&lt;span class="n">bced25e8017f558147f82e61b012a8f632a0b6aac363462b1db8b0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">04&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="m">8&lt;/span>&lt;span class="n">af95287a343b26e9c3dd679258773880e7bdbbe914198ba63a8ed1b4c5f5554&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">04&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="n">f311565fe9436eb8606f846e1f73f38287841773e8d041933a41259fe6f96afe&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">04&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># ls 09495e5085bced25e8017f558147f82e61b012a8f632a0b6aac363462b1db8b0/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">diff&lt;/span> &lt;span class="n">link&lt;/span> &lt;span class="n">lower&lt;/span> &lt;span class="n">work&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>从我们示例可以看到，三层中 f311 是最顶层，下面分别是 0949 和 8af9 这两层。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># cat f311565fe9436eb8606f846e1f73f38287841773e8d041933a41259fe6f96afe/lower&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">l&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">7&lt;/span>&lt;span class="n">B2WM6DC226TCJU6QHJ4ABKRI6&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">l&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="n">FHO2G5SWWRIX44IFDHU62Z7X2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># cat 09495e5085bced25e8017f558147f82e61b012a8f632a0b6aac363462b1db8b0/lower&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">l&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">4&lt;/span>&lt;span class="n">FHO2G5SWWRIX44IFDHU62Z7X2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># cat 8af95287a343b26e9c3dd679258773880e7bdbbe914198ba63a8ed1b4c5f5554/link&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span>&lt;span class="n">FHO2G5SWWRIX44IFDHU62Z7X2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时我们启动一个 Nginx 容器，可以看到 overlay2 目录多了两个目录，多出来的就是容器层的目录和只读的容器 init 层。容器目录下面的 merged 就是我们前面提到的联合挂载目录了，而 lowdir 则是它下层目录。而容器 init 层用来存储与这个容器内环境相关的内容，如 /etc/hosts 和 /etc/resolv.conf 文件，它居于其他镜像层之上，容器层之下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># docker run -idt --name nginx nginx&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">01&lt;/span>&lt;span class="n">a873eeba41f00a5a3deb083adf5ed892c55b4680fbc2f1880e282195d3087b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># ls -ls&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">04&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="m">09495e5085&lt;/span>&lt;span class="n">bced25e8017f558147f82e61b012a8f632a0b6aac363462b1db8b0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="m">11&lt;/span>&lt;span class="n">b7579a1f1775ad71fe0f0f45fcb74c241fce319f5125b1b92cb442385065b1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="m">11&lt;/span>&lt;span class="n">b7579a1f1775ad71fe0f0f45fcb74c241fce319f5125b1b92cb442385065b1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">init&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">04&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="m">8&lt;/span>&lt;span class="n">af95287a343b26e9c3dd679258773880e7bdbbe914198ba63a8ed1b4c5f5554&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">04&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">17&lt;/span> &lt;span class="n">f311565fe9436eb8606f846e1f73f38287841773e8d041933a41259fe6f96afe&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="n">l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># ls -ls /var/lib/docker/overlay2/11b7579a1f1775ad71fe0f0f45fcb74c241fce319f5125b1b92cb442385065b1/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwxr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">xr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="n">diff&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">rw&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">26&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="n">link&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">rw&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="n">r&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">115&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="n">lower&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwxr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">xr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="n">merged&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">4&lt;/span> &lt;span class="n">drwx&lt;/span>&lt;span class="o">------&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">4096&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">09&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">11&lt;/span> &lt;span class="n">work&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># ls 11b7579a1f1775ad71fe0f0f45fcb74c241fce319f5125b1b92cb442385065b1/merged/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">bin&lt;/span> &lt;span class="n">boot&lt;/span> &lt;span class="n">dev&lt;/span> &lt;span class="n">etc&lt;/span> &lt;span class="n">home&lt;/span> &lt;span class="n">lib&lt;/span> &lt;span class="n">lib64&lt;/span> &lt;span class="n">media&lt;/span> &lt;span class="n">mnt&lt;/span> &lt;span class="n">opt&lt;/span> &lt;span class="n">proc&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">run&lt;/span> &lt;span class="n">sbin&lt;/span> &lt;span class="n">srv&lt;/span> &lt;span class="n">sys&lt;/span> &lt;span class="n">tmp&lt;/span> &lt;span class="n">usr&lt;/span> &lt;span class="n">var&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">stretch&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">lib&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">docker&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">overlay2&lt;/span>&lt;span class="c1"># ls 11b7579a1f1775ad71fe0f0f45fcb74c241fce319f5125b1b92cb442385065b1/diff/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">run&lt;/span> &lt;span class="n">var&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果我们在容器中修改文件，则会反映到容器层的 merged 目录相关文件，容器层的 diff 目录相当于 upperdir，其他层是 lowerdir。如果之前容器层 diff 目录不存在该文件，则会拷贝该文件到 diff 目录并修改。读取文件时，如果 upperdir 目录找不到，则会直接从下层的镜像层中读取。&lt;/p>
&lt;h1 id="写时复制">写时复制&lt;/h1>
&lt;p>容器运行时的只读模板。每一个镜像由一系列的层 (layers) 组成，层是由 Dockerfile 指定。copy on write 写时复制。容器是由镜像所创建，会根据多层文件系统构建一个镜像栈，只有栈的最顶层是读写层。如果发生对只读层的写操作时会将该文件复制到读写层，并隐藏只读层的文件。&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/" target="_blank" rel="noopener">https://jvns.ca/blog/2019/11/18/how-containers-work--overlayfs/&lt;/a> How containers work: overlayfs&lt;/li>
&lt;/ul></description></item><item><title>CGroups</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/cgroups/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/cgroups/</guid><description>&lt;h1 id="cgroups">CGroups&lt;/h1>
&lt;p>2006 年，Google 的工程师发明了 Linux 控制组，缩写为 CGroups。这是 Linux 内核的一项功能，可隔离和控制用户进程的资源使用情况。这些进程可以放入命名空间，实质上是共享相同资源限制的进程集合。计算机可以有多个命名空间，每个命名空间都具有内核强制执行的资源属性。&lt;/p>
&lt;p>我们可以管理每个命名空间的资源分配，以便限制一组进程可以使用的总 CPU，RAM 等的数量。例如，后台日志聚合应用程序可能需要限制其资源，以免意外地压倒它正在记录的实际服务器。虽然不是原始功能，但 Linux 中的 CGroups 最终被重新设计为包含命名空间隔离的功能。命名空间隔离本身并不新鲜，Linux 已经有多种命名空间隔离。一个常见的例子是进程隔离，它将每个单独的进程分开并防止诸如共享内存之类的事情。&lt;/p>
&lt;p>CGroups 隔离是一种更高级别的隔离，可确保 CGroups 命名空间中的进程独立于其他命名空间中的进程。&lt;/p>
&lt;ul>
&lt;li>PID（进程标识符）命名空间：这可确保一个命名空间内的进程不知道其他命名空间中的进程。&lt;/li>
&lt;li>网络命名空间：隔离网络接口控制器，iptables，路由表和其他低级网络工具。&lt;/li>
&lt;li>挂载命名空间：已挂载文件系统，因此命名空间的文件系统范围仅限于已挂载的目录。&lt;/li>
&lt;li>用户名空间：将命名空间内的用户限制为仅限该命名空间，并避免跨命名空间的用户 ID 冲突。&lt;/li>
&lt;/ul>
&lt;h1 id="cgroup-bin">cgroup-bin&lt;/h1>
&lt;p>通过工具 cgroup-bin (&lt;code>sudo apt-get install cgroup-bin&lt;/code>)可以创建 CGroup 并进入该 CGroup 执行命令。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># cgcreate -a vagrant -g cpu:cg1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># ls /sys/fs/cgroup/cpu/cg1/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cgroup.clone_children&lt;/span> &lt;span class="n">cpu.cfs_period_us&lt;/span> &lt;span class="n">cpu.shares&lt;/span> &lt;span class="n">cpuacct.stat&lt;/span> &lt;span class="n">cpuacct.usage_all&lt;/span> &lt;span class="n">cpuacct.usage_percpu_sys&lt;/span> &lt;span class="n">cpuacct.usage_sys&lt;/span> &lt;span class="n">notify_on_release&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">cgroup.procs&lt;/span> &lt;span class="n">cpu.cfs_quota_us&lt;/span> &lt;span class="n">cpu.stat&lt;/span> &lt;span class="n">cpuacct.usage&lt;/span> &lt;span class="n">cpuacct.usage_percpu&lt;/span> &lt;span class="n">cpuacct.usage_percpu_user&lt;/span> &lt;span class="n">cpuacct.usage_user&lt;/span> &lt;span class="n">tasks&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cpu.cfs_period_us 和 cpu.cfs_quota_us，它们分别用来限制该组中的所有进程在单位时间里可以使用的 cpu 时间，这里的 cfs(Completely Fair Scheduler) 是完全公平调度器的意思。cpu.cfs_period_us 是时间周期，默认为 100000，即 100 毫秒。而 cpu.cfs_quota_us 是在时间周期内可以使用的时间，默认为-1 即无限制。cpu.shares 用于限制 cpu 使用的，它用于控制各个组之间的配额。比如组 cg1 的 cpu.shares 为 1024，组 cg2 的 cpu.shares 也是 1024，如果都有进程在运行则它们都可以使用最多 50%的限额。如果 cg2 组内进程比较空闲，那么 cg1 组可以将使用几乎整个 cpu，tasks 存储的是该组里面的进程 ID。&lt;/p>
&lt;p>我们先在默认的分组里面运行一个死循环程序 loop.py，因为默认分组/sys/fs/cgroup/cpu/cpu.cfs_period_us 和 cfs_quota_us 是默认值，所以是没有限制 cpu 使用的。可以发现 1 个 cpu us 立马接近 100%了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-py" data-lang="py">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># loop.py&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="kc">True&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="k">pass&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>设置 cg1 组的 cfs_quota_us 位 50000，即表示该组内进程最多使用 50%的 cpu 时间，运行 cgexec 命令进入 cg1 的 cpu 组，然后运行 loop.py，可以发现 cpu us 在 50%以内了，此时也可以在 tasks 文件中看到我们刚刚 cgexec 创建的进程 ID。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># echo 50000 &amp;gt; /sys/fs/cgroup/cpu/cg1/cpu.cfs_quota_us&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># cgexec -g cpu:cg1 /bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Docker 里面要限制内存和 CPU 使用，可以在启动时指定相关参数即可。比如限制 cpu 使用率，加 cpu-period 和 cpu-quota 参数，限制执行的 cpu 核，加&amp;ndash;cpuset-cpus 参数。限制内存使用，加&amp;ndash;memory 参数。当然，我们可以看到在 /sys/fs/cgroup/cpu/docker/目录下有个以 containerid 为名的分组，该分组下面的 cpu.cfs_period_us 和 cpu.cfs_quota_us 的值就是我们在启动容器时指定的值。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># docker run -i -t --cpu-period=100000 --cpu-quota=50000 --memory=512000000 alpine /bin/ash&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="capabilities">Capabilities&lt;/h1>
&lt;p>我们在启动容器时会时常看到这样的参数 &lt;code>--cap-add=NET_ADMIN&lt;/code>，这是用到了 Linux 的 capability 特性。capability 是为了实现更精细化的权限控制而加入的。我们以前熟知通过设置文件的 SUID 位，这样非 root 用户的可执行文件运行后的 euid 会成为文件的拥有者 ID，比如 passwd 命令运行起来后有 root 权限，有 SUID 权限的可执行文件如果存在漏洞会有安全风险。(查看文件的 capability 的命令为 filecap -a，而查看进程 capability 的命令为 pscap -a，pscap 和 filecap 工具需要安装 libcap-ng-utils 这个包)。&lt;/p>
&lt;p>对于 capability，可以看一个简单的例子便于理解。如 Debian 系统中自带的 ping 工具，它是有设置 SUID 位的。这里拷贝 ping 重命名为 anotherping，anotherping 的 SUID 位没有设置，运行会提示权限错误。这里，我们只要将其加上 cap_net_raw 权限即可，不需要设置 SUID 位那么大的权限。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">vagrant&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:~$&lt;/span> &lt;span class="n">ls&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">ls&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ping&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">60&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">rwsr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">xr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">61240&lt;/span> &lt;span class="n">Nov&lt;/span> &lt;span class="m">10&lt;/span> &lt;span class="m">2016&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ping&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vagrant&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:~$&lt;/span> &lt;span class="n">cp&lt;/span> &lt;span class="o">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ping&lt;/span> &lt;span class="n">anotherping&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vagrant&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:~$&lt;/span> &lt;span class="n">ls&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">ls&lt;/span> &lt;span class="n">anotherping&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">60&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">rwxr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">xr&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">vagrant&lt;/span> &lt;span class="n">vagrant&lt;/span> &lt;span class="m">61240&lt;/span> &lt;span class="n">May&lt;/span> &lt;span class="m">19&lt;/span> &lt;span class="m">10&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">18&lt;/span> &lt;span class="n">anotherping&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vagrant&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:~$&lt;/span> &lt;span class="n">./anotherping&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c1&lt;/span> &lt;span class="n">yue.uu.163.com&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">ping&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">socket&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">Operation&lt;/span> &lt;span class="n">not&lt;/span> &lt;span class="n">permitted&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vagrant&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:~$&lt;/span> &lt;span class="n">sudo&lt;/span> &lt;span class="n">setcap&lt;/span> &lt;span class="n">cap_net_raw&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">ep&lt;/span> &lt;span class="n">./anotherping&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vagrant&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:~$&lt;/span> &lt;span class="n">./anotherping&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c1&lt;/span> &lt;span class="n">yue.uu.163.com&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">PING&lt;/span> &lt;span class="nf">yue.uu.163.com &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">59.111.137.252&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="m">56&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">84&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="n">of&lt;/span> &lt;span class="n">data.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">64&lt;/span> &lt;span class="n">bytes&lt;/span> &lt;span class="n">from&lt;/span> &lt;span class="m">59.111.137.252&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="m">59.111.137.252&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">icmp_seq&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="n">ttl&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">63&lt;/span> &lt;span class="n">time&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">53.9&lt;/span> &lt;span class="n">ms&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">---&lt;/span> &lt;span class="n">yue.uu.163.com&lt;/span> &lt;span class="n">ping&lt;/span> &lt;span class="n">statistics&lt;/span> &lt;span class="o">---&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span> &lt;span class="n">packets&lt;/span> &lt;span class="n">transmitted&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="n">received&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="m">0&lt;/span>% &lt;span class="n">packet&lt;/span> &lt;span class="n">loss&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">time&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="n">ms&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rtt&lt;/span> &lt;span class="n">min&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">avg&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">max&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">mdev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">53.919&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">53.919&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">53.919&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="m">0.000&lt;/span> &lt;span class="n">ms&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>LXC</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/lxc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/lxc/</guid><description>&lt;h1 id="lxc">LXC&lt;/h1>
&lt;p>LXC 是一种操作系统级虚拟化方法，在执行时不用重复加载内核, 且其内核与宿主共享，允许其他一些沙盒进程运行在一块相对独立的空间，并且能够方便的控制他们的资源调度。&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/cnr_J9u_vjrZJiQSktd_xQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/cnr_J9u_vjrZJiQSktd_xQ&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Namespaces</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/namespaces/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/namespaces/</guid><description>&lt;h1 id="namespaces">Namespaces&lt;/h1>
&lt;p>简单的讲就是，Linux Namespace 允许用户在独立进程之间隔离 CPU 等资源。进程的访问权限及可见性仅限于其所在的 Namespaces。因此，用户无需担心在一个 Namespace 内运行的进程与在另一个 Namespace 内运行的进程冲突。甚至可以同一台机器上的不同容器中运行具有相同 PID 的进程。同样的，两个不同容器中的应用程序可以使用相同的端口。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://tva1.sinaimg.cn/large/007rAy9hgy1g2zdhwngx6j30u00m0wgg.jpg" alt="Linux Container Namespace" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Namespaces 用于环境隔离，Linux kernel 支持的 Namespace 包括 UTS, IPC, PID, NET, NS, USER 以及新加入的 CGROUP 等，UTS 用于隔离主机名和域名，使用标识 CLONE_NEWUTS，IPC 用于隔离进程间通信资源如消息队列等，使用标识 CLONE_NEWIPC，PID 隔离进程，NET 用于隔离网络，NS 用于隔离挂载点，USER 用于隔离用户组。默认情况下，通过 clone 系统调用创建子进程的 namespace 与父进程是一致的，而你可以在 clone 系统调用中通过 flag 参数设置隔离的名字空间来隔离，当然也可以更加方便的直接用 unshare 命令来创建新的 namespace。查看一个进程的各 Namespace 命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">root@host:/home/vagrant# ls -ls /proc/self/ns/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">17&lt;/span> 22:04 cgroup -&amp;gt; cgroup:&lt;span class="o">[&lt;/span>4026531835&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">17&lt;/span> 22:04 ipc -&amp;gt; ipc:&lt;span class="o">[&lt;/span>4026531839&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">17&lt;/span> 22:04 mnt -&amp;gt; mnt:&lt;span class="o">[&lt;/span>4026531840&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">17&lt;/span> 22:04 net -&amp;gt; net:&lt;span class="o">[&lt;/span>4026531957&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">17&lt;/span> 22:04 pid -&amp;gt; pid:&lt;span class="o">[&lt;/span>4026531836&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">17&lt;/span> 22:04 user -&amp;gt; user:&lt;span class="o">[&lt;/span>4026531837&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">17&lt;/span> 22:04 uts -&amp;gt; uts:&lt;span class="o">[&lt;/span>4026531838&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="pid-namespace">PID Namespace&lt;/h1>
&lt;p>在容器中，有自己的 Pid namespace，因此我们看到的只有 PID 为 1 的初始进程以及它的子进程，而宿主机的其他进程容器内是看不到的。通常来说，Linux 启动后它会先启动一个 PID 为 1 的进程，这是系统进程树的根进程，根进程会接着创建子进程来初始化系统服务。PID namespace 允许在新的 namespace 创建一棵新的进程树，它可以有自己的 PID 为 1 的进程。在 PID namespace 的隔离下，子进程名字空间无法知道父进程名字空间的进程，如在 Docker 容器中无法看到宿主机的进程，而父进程名字空间可以看到子进程名字空间的所有进程。如图所示：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230424143451.png" alt="Pid Namespace" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Linux 内核加入 PID Namespace 后，对 pid 结构进行了修改，新增的 upid 结构用于跟踪 namespace 和 pid。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">## 加入PID Namespace之前的pid结构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">atomic_t&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* reference counter */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">nr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* the pid value */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">hlist_node&lt;/span> &lt;span class="n">pid_chain&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* hash chain */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">## 加入PID Namespace之后的pid结构
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">upid&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">nr&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* moved from struct pid */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">pid_namespace&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ns&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">hlist_node&lt;/span> &lt;span class="n">pid_chain&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* moved from struct pid */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">pid&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">level&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="cm">/* the number of upids */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">upid&lt;/span> &lt;span class="n">numbers&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以通过 unshare 测试下 PID namespace，可以看到新的 bash 进程它的 pid namespace 与父进程的不同了，而且它的 pid 是 1。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">root@host:/home/vagrant# unshare --fork --pid bash
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@host:/home/vagrant# &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$$&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">root@host:/home/vagrant# ls -ls /proc/self/ns/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">19&lt;/span> 15:24 cgroup -&amp;gt; cgroup:&lt;span class="o">[&lt;/span>4026531835&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">19&lt;/span> 15:24 ipc -&amp;gt; ipc:&lt;span class="o">[&lt;/span>4026531839&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">19&lt;/span> 15:24 mnt -&amp;gt; mnt:&lt;span class="o">[&lt;/span>4026531840&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">19&lt;/span> 15:24 net -&amp;gt; net:&lt;span class="o">[&lt;/span>4026531957&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">19&lt;/span> 15:24 pid -&amp;gt; pid:&lt;span class="o">[&lt;/span>4026532232&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">19&lt;/span> 15:24 user -&amp;gt; user:&lt;span class="o">[&lt;/span>4026531837&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span> lrwxrwxrwx &lt;span class="m">1&lt;/span> root root &lt;span class="m">0&lt;/span> May &lt;span class="m">19&lt;/span> 15:24 uts -&amp;gt; uts:&lt;span class="o">[&lt;/span>4026531838&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="僵尸进程">僵尸进程&lt;/h2>
&lt;p>容器的本质实际上是一个进程，是一个视图被隔离，资源受限的进程。容器里面 PID=1 的进程就是应用本身，这意味着管理虚拟机等于管理基础设施，因为我们是在管理机器，但管理容器却等于直接管理应用本身。这也是之前说过的不可变基础设施的一个最佳体现，这个时候，你的应用就等于你的基础设施，它一定是不可变的。&lt;/p>
&lt;p>在容器中，1 号进程一般是 entry point 进程，针对上面这种将孤儿进程的父进程置为 1 号进程进而避免僵尸进程处理方式，容器是处理不了的。进而就会导致容器中在孤儿进程这种异常场景下僵尸进程无法彻底处理的窘境。所以说，容器的单进程模型的本质其实是容器中的 1 号进程并不具有管理多进程、多线程等复杂场景下的能力。如果一定在容器中处理这些复杂情况的，那么需要开发者对 entry point 进程赋予这种能力。这无疑是加重了开发者的心智负担，这是任何一项大众技术或者平台框架都不愿看到的尴尬之地。&lt;/p>
&lt;p>例子里面有一个程序叫做 Helloworld，这个 Helloworld 程序实际上是由一组进程组成的，需要注意一下，这里说的进程实际上等同于 Linux 中的线程。因为 Linux 中的线程是轻量级进程，所以如果从 Linux 系统中去查看 Helloworld 中的 pstree，将会看到这个 Helloworld 实际上是由四个线程组成的，分别是 {api、main、log、compute}。也就是说，四个这样的线程共同协作，共享 Helloworld 程序的资源，组成了 Helloworld 程序的真实工作情况。这是操作系统里面进程组或者线程组中一个非常真实的例子，以上就是进程组的一个概念。&lt;/p>
&lt;p>Helloworld 程序由四个进程组成，这些进程之间会共享一些资源和文件。那么现在有一个问题：假如说现在把 Helloworld 程序用容器跑起来，你会怎么去做？&lt;/p>
&lt;p>当然，最自然的一个解法就是，我现在就启动一个 Docker 容器，里面运行四个进程。可是这样会有一个问题，这种情况下容器里面 PID=1 的进程该是谁? 比如说，它应该是我的 main 进程，那么问题来了，“谁”又负责去管理剩余的 3 个进程呢？&lt;/p>
&lt;p>这个核心问题在于，容器的设计本身是一种“单进程”模型，不是说容器里只能起一个进程，由于容器的应用等于进程，所以只能去管理 PID=1 的这个进程，其他再起来的进程其实是一个托管状态。所以说服务应用进程本身就具有“进程管理”的能力。&lt;/p>
&lt;p>比如说 Helloworld 的程序有 system 的能力，或者直接把容器里 PID=1 的进程直接改成 systemd，否则这个应用，或者是容器是没有办法去管理很多个进程的。因为 PID=1 进程是应用本身，如果现在把这个 PID=1 的进程给 kill 了，或者它自己运行过程中死掉了，那么剩下三个进程的资源就没有人回收了，这个是非常严重的一个问题。&lt;/p>
&lt;p>反过来，如果真的把这个应用本身改成了 systemd，或者在容器里面运行了一个 systemd，将会导致另外一个问题：使得管理容器不再是管理应用本身了，而等于是管理 systemd，这里的问题就非常明显了。比如说我这个容器里面 run 的程序或者进程是 systemd，那么接下来，这个应用是不是退出了？是不是 fail 了？是不是出现异常失败了？实际上是没办法直接知道的，因为容器管理的是 systemd。这就是为什么在容器里面运行一个复杂程序往往比较困难的一个原因。&lt;/p>
&lt;p>这里再帮大家梳理一下：由于容器实际上是一个“单进程”模型，所以如果你在容器里启动多个进程，只有一个可以作为 PID=1 的进程，而这时候，如果这个 PID=1 的进程挂了，或者说失败退出了，那么其他三个进程就会自然而然的成为孤儿，没有人能够管理它们，没有人能够回收它们的资源，这是一个非常不好的情况。&lt;/p>
&lt;p>注意：Linux 容器的“单进程”模型，指的是容器的生命周期等同于 PID=1 的进程（容器应用进程）的生命周期，而不是说容器里不能创建多进程。当然，一般情况下，容器应用进程并不具备进程管理能力，所以你通过 exec 或者 ssh 在容器里创建的其他进程，一旦异常退出（比如 ssh 终止）是很容易变成孤儿进程的。&lt;/p>
&lt;p>反过来，其实可以在容器里面 run 一个 systemd，用它来管理其他所有的进程。这样会产生第二个问题：实际上没办法直接管理我的应用了，因为我的应用被 systemd 给接管了，那么这个时候应用状态的生命周期就不等于容器生命周期。这个管理模型实际上是非常非常复杂的。&lt;/p>
&lt;h1 id="ns-namespace">NS Namespace&lt;/h1>
&lt;p>NS Namespace 用于隔离挂载点，不同 NS Namespace 的挂载点互不影响。创建一个新的 Mount Namespace 效果有点类似 chroot，不过它隔离的比 chroot 更加完全。这是历史上的第一个 Linux Namespace，由此得到了 NS 这个名字而不是用的 Mount。&lt;/p>
&lt;p>在最初的 NS Namespace 版本中，挂载点是完全隔离的。初始状态下，子进程看到的挂载点与父进程是一样的。在新的 Namespace 中，子进程可以随意 mount/umount 任何目录，而不会影响到父 Namespace。使用 NS Namespace 完全隔离挂载点初衷很好，但是也带来了某些情况下不方便，比如我们新加了一块磁盘，如果完全隔离则需要在所有的 Namespace 中都挂载一遍。为此，Linux 在 2.6.15 版本中加入了一个 shared subtree 特性，通过指定 Propagation 来确定挂载事件如何传播。比如通过指定 MS_SHARED 来允许在一个 peer group(子 namespace 和父 namespace 就属于同一个组)共享挂载点，mount/umount 事件会传播到 peer group 成员中。使用 MS_PRIVATE 不共享挂载点和传播挂载事件。其他还有 MS_SLAVE 和 NS_UNBINDABLE 等选项。可以通过查看 cat /proc/self/mountinfo 来看挂载点信息，若没有传播参数则为 MS_PRIVATE 的选项。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230424143519.png" alt="Mount Namespace" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>例如你在初始 namespace 有两个挂载点，通过 mount &amp;ndash;make-shared /dev/sda1 /mntS 设置/mntS 为 shared 类型，mount &amp;ndash;make-private /dev/sda1 /mntP 设置/mntP 为 private 类型。当你使用 unshare -m bash 新建一个 namespace 并在它们下面挂载子目录时，可以发现/mntS 下面的子目录 mount/umount 事件会传播到父 namespace，而/mntP 则不会。&lt;/p>
&lt;p>在前面例子 Pid namespace 隔离后，我们在新的名字空间执行 ps -ef 可以看到宿主机进程，这是因为 ps 命令是从 /proc 文件系统读取的数据，而文件系统我们还没有隔离，为此，我们需要在新的 NS Namespace 重新挂载 proc 文件系统来模拟类似 Docker 容器的功能。&lt;/p>
&lt;pre tabindex="0">&lt;code>root@host:/home/vagrant# unshare --pid --fork --mount-proc bash
root@host:/home/vagrant# ps -ef
UID PID PPID C STIME TTY TIME CMD
root 1 0 0 15:36 pts/1 00:00:00 bash
root 2 1 0 15:36 pts/1 00:00:00 ps -ef
&lt;/code>&lt;/pre>&lt;p>可以看到，隔离了 NS namespace 并重新挂载了 proc 后，ps 命令只能看到 2 个进程了，跟我们在 Docker 容器中看到的一致。&lt;/p>
&lt;h1 id="net-namespace">NET Namespace&lt;/h1>
&lt;p>Docker 容器中另一个重要特性是网络独立(之所以不用隔离一词是因为容器的网络还是要借助宿主机的网络来通信的)，使用到 Linux 的 NET Namespace 以及 vet。veth 主要的目的是为了跨 NET namespace 之间提供一种类似于 Linux 进程间通信的技术，所以 veth 总是成对出现，如下面的 veth0 和 veth1。它们位于不同的 NET namespace 中，在 veth 设备任意一端接收到的数据，都会从另一端发送出去。veth 实现了不同 namespace 的网络数据传输。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230424143547.png" alt="Docker Bridge" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在 Docker 中，宿主机的 veth 端会桥接到网桥中，接收到容器中的 veth 端发过来的数据后会经由网桥 docker0 再转发到宿主机网卡 eth0，最终通过 eth0 发送数据。当然在发送数据前，需要经过 iptables MASQUERADE 规则将源地址改成宿主机 ip，这样才能接收到响应数据包。而宿主机网卡接收到的数据会通过 iptables DNAT 根据端口号修改目的地址和端口为容器的 ip 和端口，然后根据路由规则发送到网桥 docker0 中，并最终由网桥 docker0 发送到对应的容器中。&lt;/p>
&lt;p>Docker 里面网络模式分为 bridge，host，overlay 等几种模式，默认是采用 bridge 模式网络如图所示。如果使用 host 模式，则不隔离直接使用宿主机网络。overlay 网络则是更加高级的模式，可以实现跨主机的容器通信。&lt;/p>
&lt;h1 id="user-namespace">USER Namespace&lt;/h1>
&lt;p>user namespace 用于隔离用户和组信息，在不同的 namespace 中用户可以有相同的 UID 和 GID，它们之间互相不影响。父子 namespace 之间可以进行用户映射，如父 namespace(宿主机)的普通用户映射到子 namespace(容器)的 root 用户，以减少子 namespace 的 root 用户操作父 namespace 的风险。user namespace 功能虽然在很早就出现了，但是直到 Linux kernel 3.8 之后这个功能才趋于完善。&lt;/p>
&lt;p>创建新的 user namespace 之后第一步就是设置好 user 和 group 的映射关系。这个映射通过设置 &lt;code>/proc/PID/uid_map(gid_map)&lt;/code> 实现，格式如下，ID-inside-ns 是容器内的 uid/gid，而 ID-outside-ns 则是容器外映射的真实 uid/gid。比如 0 1000 1 表示将真实的 uid=1000 映射为容器内的 uid=0，length 为映射的范围。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">ID&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">inside&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ns&lt;/span> &lt;span class="n">ID&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">outside&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ns&lt;/span> &lt;span class="n">length&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>不是所有的进程都能随便修改映射文件的，必须同时具备如下条件：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>修改映射文件的进程必须有 PID 进程所在 user namespace 的 CAP_SETUID/CAP_SETGID 权限。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>修改映射文件的进程必须是跟 PID 在同一个 user namespace 或者 PID 的父 namespace。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>映射文件 uid_map 和 gid_map 只能写入一次，再次写入会报错。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Docker1.10 之后的版本可以通过在 docker daemon 启动时加上 &lt;code>--userns-remap=[USERNAME]&lt;/code> 来实现 USER Namespace 的隔离。我们指定了 username=test 启动 dockerd，查看 subuid 文件可以发现 test 映射的 uid 范围是 165536 到 165536+65536= 231072，而且在 docker 目录下面对应 test 有一个独立的目录 165536.165536 存在。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># cat /etc/subuid&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">vagrant&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">100000&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">65536&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">test&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">165536&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="m">65536&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># ls /var/lib/docker/165536.165536/&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">builder&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">containerd&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">containers&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">image&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="n">network&lt;/span>&lt;span class="o">/&lt;/span> &lt;span class="kc">...&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 &lt;code>docker images -a&lt;/code> 等命令可以发现在启用 user namespace 之前的镜像都看不到了。此时只能看到在新的 user namespace 里面创建的 docker 镜像和容器。而此时我们创建一个测试容器，可以在容器外看到容器进程的 uid_map 已经设置为 ssj，这样容器中的 root 用户映射到宿主机就是 test 这个用户了，此时如果要删除我们挂载的/bin 目录中的文件，会提示没有权限，增强了安全性。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">### dockerd 启动时加了 --userns-remap=test&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># docker run -it -v /bin:/host/bin --name demo alpine /bin/ash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">/&lt;/span> &lt;span class="c1"># rm /host/bin/which&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rm&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">remove&lt;/span> &lt;span class="s">&amp;#39;/host/bin/which&amp;#39;&lt;/span>&lt;span class="o">?&lt;/span> &lt;span class="n">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">rm&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">can&lt;/span>&lt;span class="s">&amp;#39;t remove &amp;#39;&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">bin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">which&lt;/span>&lt;span class="s">&amp;#39;: Permission denied
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">### 宿主机查看容器进程uid_map文件
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">root@host:/home/vagrant# CPID=`ps -ef|grep &amp;#39;&lt;/span>&lt;span class="n">\&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">bin\&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">ash&lt;/span>&lt;span class="s">&amp;#39;|awk &amp;#39;&lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="n">printf&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="m">2&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="s">&amp;#39;&lt;/span>&lt;span class="err">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># cat /proc/$CPID/uid_map&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="m">0&lt;/span> &lt;span class="m">165536&lt;/span> &lt;span class="m">65536&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="其他-namespace">其他 Namespace&lt;/h1>
&lt;p>UTS namespace 用于隔离主机名等。可以看到在新的 uts namespace 修改主机名并不影响原 namespace 的主机名。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># unshare --uts --fork bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">host&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># hostname modified&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">modified&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># exit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># hostname&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">host&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>IPC Namespace 用于隔离 IPC 消息队列等。可以看到，新老 ipc namespace 的消息队列互不影响。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># ipcmk -Q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Message&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># ipcs -q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">------&lt;/span> &lt;span class="n">Message&lt;/span> &lt;span class="n">Queues&lt;/span> &lt;span class="o">--------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">key&lt;/span> &lt;span class="n">msqid&lt;/span> &lt;span class="n">owner&lt;/span> &lt;span class="n">perms&lt;/span> &lt;span class="n">used&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">bytes&lt;/span> &lt;span class="n">messages&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="mh">0x26c3371c&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="m">644&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># unshare --ipc --fork bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">root&lt;/span>&lt;span class="o">@&lt;/span>&lt;span class="n">host&lt;/span>&lt;span class="o">:/&lt;/span>&lt;span class="n">home&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">vagrant&lt;/span>&lt;span class="c1"># ipcs -q&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">------&lt;/span> &lt;span class="n">Message&lt;/span> &lt;span class="n">Queues&lt;/span> &lt;span class="o">--------&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">key&lt;/span> &lt;span class="n">msqid&lt;/span> &lt;span class="n">owner&lt;/span> &lt;span class="n">perms&lt;/span> &lt;span class="n">used&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">bytes&lt;/span> &lt;span class="n">messages&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>CGROUP Namespace 是 Linux4.6 以后才支持的新 namespace。容器技术使用 namespace 和 cgroup 实现环境隔离和资源限制，但是对于 cgroup 本身并没有隔离。没有 cgroup namespace 前，容器中一旦挂载 cgroup 文件系统，便可以修改整全局的 cgroup 配置。有了 cgroup namespace 后，每个 namespace 中的进程都有自己的 cgroup 文件系统视图，增强了安全性，同时也让容器迁移更加方便。&lt;/p></description></item><item><title>虚拟内核</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/%E8%99%9A%E6%8B%9F%E5%86%85%E6%A0%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/linux-%E8%B5%84%E6%BA%90%E9%9A%94%E7%A6%BB/%E8%99%9A%E6%8B%9F%E5%86%85%E6%A0%B8/</guid><description>&lt;h1 id="虚拟内核">虚拟内核&lt;/h1>
&lt;p>Docker 等容器解决方案只是&lt;/p></description></item></channel></rss>