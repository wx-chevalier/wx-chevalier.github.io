<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swarm | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/swarm/</link><atom:link href="https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/swarm/index.xml" rel="self" type="application/rss+xml"/><description>Swarm</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Swarm</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/swarm/</link></image><item><title>Swarm</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/swarm/swarm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/swarm/swarm/</guid><description>&lt;h1 id="swarm">Swarm&lt;/h1>
&lt;p>Docker Swarm 是 Docker 自己的 Docker 容器本地集群解决方案，具有与 Docker 生态系统紧密集成并使用自己的 API 的优势。它监视跨服务器群集的容器数量，是在没有其他硬件的情况下创建群集 docker 应用程序的最便捷方式。它为 Dockerized 应用程序提供了一个小规模但有用的编排系统。&lt;/p>
&lt;h1 id="概述">概述&lt;/h1>
&lt;h2 id="优缺点">优缺点&lt;/h2>
&lt;p>使用 Docker Swarm 的优点：&lt;/p>
&lt;ul>
&lt;li>**以更快的速度运行：**当您使用虚拟环境时，您可能已经意识到它需要很长时间，并且包括启动和启动您要运行的应用程序的繁琐程序。使用 Docker Swarm，这不再是一个问题。Docker Swarm 消除了启动完整虚拟机的需要，使应用程序能够快速在虚拟和软件定义的环境中运行，并有助于 DevOps 实施。&lt;/li>
&lt;li>&lt;strong>文档提供了所有信息：&lt;/strong> Docker 团队在文档方面脱颖而出！Docker 正在迅速发展，并为整个平台赢得了热烈的掌声。当版本在很短的时间间隔内发布时，某些平台不会维护文档。但是 Docker Swarm 从未与它妥协。如果该信息仅适用于 Docker Swarm 的某些版本，则文档会确保更新所有信息。&lt;/li>
&lt;li>&lt;strong>提供简单快速的配置：&lt;/strong> Docker Swarm 的一个主要优点是它简化了问题。Docker Swarm 使用户可以自己配置，将其放入代码中并轻松部署。由于 Docker Swarm 可以在各种环境中使用，因此需求不受应用程序环境的约束。&lt;/li>
&lt;li>&lt;strong>确保应用程序是孤立的&lt;/strong>：Docker Swarm 注意每个容器与其他容器隔离并拥有自己的资源。可以部署各种容器以在不同堆栈中运行单独的应用程序。除此之外，当每个应用程序在自己的容器上运行时，Docker Swarm 会清除应用程序删除。如果不再需要该应用程序，则可以删除其容器。它不会在您的主机操作系统上留下任何临时或配置文件。&lt;/li>
&lt;li>&lt;strong>版本控制和组件重用&lt;/strong>：使用 Docker Swarm，您可以跟踪容器的连续版本，检查差异或回滚到先前版本。容器重复使用前面层中的组件，这使得它们显着轻量级。&lt;/li>
&lt;/ul>
&lt;p>使用 Docker Swarm 的缺点：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Docker 依赖于平台&lt;/strong>：Docker Swarm 是一个 Linux 激动人心的平台。虽然 Docker 支持 Windows 和 Mac OS X，但它利用虚拟机在非 Linux 平台上运行。设计为在 Windows 上的 Docker 容器中运行的应用程序无法在 Linux 上运行，反之亦然。&lt;/li>
&lt;li>&lt;strong>不提供存储选项&lt;/strong>：Docker Swarm 不提供将容器连接到存储的无障碍方式，这是主要缺点之一。其数据量需要在主机和手动配置上进行大量即兴创作。如果您期望 Docker Swarm 解决存储问题，可能会以高效且用户友好的方式完成。&lt;/li>
&lt;li>&lt;strong>监控不良&lt;/strong>：Docker Swarm 提供有关容器的基本信息，如果您正在寻找基本的监控解决方案，那么 Stats 命令就足够了。如果您正在寻找高级监控，那么 Docker Swarm 永远不是一个选择。虽然有像 CAdvisor 这样的第三方工具可以提供更多监控，但使用 Docker 本身实时收集有关容器的更多数据是不可行的。&lt;/li>
&lt;/ul></description></item><item><title>基于 Docker Swarm 的微服务编排与监控</title><link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/swarm/%E5%9F%BA%E4%BA%8E-docker-swarm-%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E4%B8%8E%E7%9B%91%E6%8E%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/swarm/%E5%9F%BA%E4%BA%8E-docker-swarm-%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E7%BC%96%E6%8E%92%E4%B8%8E%E7%9B%91%E6%8E%A7/</guid><description>&lt;h1 id="基于-docker-swarm-的简单微服务编排与治理">基于 Docker Swarm 的(简单)微服务编排与治理&lt;/h1>
&lt;p>本文更多着眼于应用层的微服务架构，对于存储层/虚拟化层则另文讨论目前正在着手进行 K8s 迁移&lt;/p>
&lt;p>应用服务本身尽可能无状态化&lt;/p>
&lt;p>我司只有不到二十位开发人员，尚无专业的运维或者 SRE，希望以最小的代价满足应用部署与线上监控的目标。&lt;/p>
&lt;p>使用 Docker 进行自动化部署，使用 Docker Swarm 进行集群管理与自动负载均衡，使用 Portainer 进行界面化的容器管理与监控，使用 Declarative Crawler 进行应用级别的监控。&lt;/p>
&lt;p>涉及到静态页面、Node.js、Java、Python&lt;/p>
&lt;p>使用 Caddy 作为反向代理与请求路口，使用 Jenkins 作为持续集成构建服务，使用 MySQL/TiDB 作为核心关系型数据库，使用 Redis 作为缓存数据库，使用 ElasticSearch/Kibana 作为搜索引擎支撑，使用 Presto 作为跨数据库查询层，使用 FileBeat 进行日志搜集，使用 Kafka / Kafka Streaming 作为消息队列以及简易流处理工具。&lt;/p>
&lt;p>在早期的基础设施架构中我们只是做了 RAID，然后使用 Xen 对物理服务器进行了虚拟化操作，在虚拟机层面进行了容灾备份。除了专门的数据存储服务器以及反向代理服务器是由统一管理，其他各个产品线的应用都是由开发人员自己登陆可用的服务器进行部署；对于同一台机器需要部署多个应用的情况，我们是使用 tmux 开启多个 Session，这种模式对于调试还是非常友好的。这就导致了本身基础设施的混乱，以及应用的不可控；譬如尚未做隔离的情况下，某个应用的崩溃或者误操作可能会导致其所在的虚拟机崩溃，最终导致该虚拟机承载的其他服务或者其他依赖服务连锁崩溃。&lt;/p>
&lt;p>另一个笔者发现，在这种朴素的模式中，往往部署所需要的配置是直接后来服务器增加到了十余台，线上应用的可用性与整个 IT 资源的可控性却感觉越发地低了。&lt;/p>
&lt;ul>
&lt;li>构建与部署剥离&lt;/li>
&lt;li>开发人员尽量避免直接登录服务器&lt;/li>
&lt;li>运维配置、脚本同样入库管理&lt;/li>
&lt;/ul>
&lt;p>Next Step: Try K8s &amp;amp;Terraform &amp;amp; Rancher&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://camo.githubusercontent.com/36bc60e2ccb6ae78a757a5c5a7214a23514b20ff/68747470733a2f2f706172672e636f2f555a73" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="环境配置">环境配置&lt;/h1>
&lt;p>也可以使用 Ansible 等自动化工具进行批量配置&lt;/p>
&lt;h1 id="基础架构">基础架构&lt;/h1>
&lt;h2 id="docker-集群">Docker 集群&lt;/h2>
&lt;h2 id="状态分布式数据存储服务">状态(分布式数据存储)服务&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">REDIS_CONFIG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;port 6379
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">cluster-enabled yes
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">cluster-config-file nodes.conf
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">cluster-node-timeout 5000
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s1">appendonly yes&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">network&lt;/span>&lt;span class="o">=&lt;/span>mynet
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker service create --name redis &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --network &lt;span class="nv">$network&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> --replicas&lt;span class="o">=&lt;/span>&lt;span class="m">6&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">REDIS_CONFIG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$REDIS_CONFIG&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -e &lt;span class="nv">REDIS_CONFIG_FILE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/etc/redis/redis.conf&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> redis:3.2.6-alpine sh -c &lt;span class="s1">&amp;#39;mkdir -p $(dirname $REDIS_CONFIG_FILE) &amp;amp;&amp;amp; echo &amp;#34;$REDIS_CONFIG&amp;#34; &amp;gt; $REDIS_CONFIG_FILE &amp;amp;&amp;amp; cat $REDIS_CONFIG_FILE &amp;amp;&amp;amp; redis-server $REDIS_CONFIG_FILE&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">sleep &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker service ps redis --no-trunc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># run the redis-trib.rb script(the docker inspect runs on the host and the echo output is passed the along to the ruby container)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">docker run -it --rm --net &lt;span class="nv">$network&lt;/span> ruby sh -c &lt;span class="s2">&amp;#34;\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> gem install redis --version 3.2 \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;amp;&amp;amp; wget http://download.redis.io/redis-stable/src/redis-trib.rb \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> &amp;amp;&amp;amp; ruby redis-trib.rb create --replicas 1 \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> \$(getent hosts tasks.redis | awk &amp;#39;{print \$1 \&amp;#34;:6379\&amp;#34;}&amp;#39;) &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>./redis.sh
&lt;/code>&lt;/pre>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">docker run -it --rm --net mynet redis:3.2.6 redis-cli -c -h redis -p &lt;span class="m">6379&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.0.0.7:6379&amp;gt; &lt;span class="nb">set&lt;/span> mykey1 &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.0.0.7:6379&amp;gt; &lt;span class="nb">set&lt;/span> mykey2 &lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-&amp;gt; Redirected to slot &lt;span class="o">[&lt;/span>14119&lt;span class="o">]&lt;/span> located at 10.0.0.6:6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.0.0.6:6379&amp;gt; &lt;span class="nb">set&lt;/span> mykey3 &lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-&amp;gt; Redirected to slot &lt;span class="o">[&lt;/span>9990&lt;span class="o">]&lt;/span> located at 10.0.0.4:6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">OK
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.0.0.4:6379&amp;gt; get mykey1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-&amp;gt; Redirected to slot &lt;span class="o">[&lt;/span>1860&lt;span class="o">]&lt;/span> located at 10.0.0.7:6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.0.0.7:6379&amp;gt; get mykey2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-&amp;gt; Redirected to slot &lt;span class="o">[&lt;/span>14119&lt;span class="o">]&lt;/span> located at 10.0.0.6:6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.0.0.6:6379&amp;gt; get mykey3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-&amp;gt; Redirected to slot &lt;span class="o">[&lt;/span>9990&lt;span class="o">]&lt;/span> located at 10.0.0.4:6379
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">10.0.0.4:6379&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="serverless">Serverless&lt;/h2>
&lt;p>使用 &lt;a href="https://github.com/alexellis/faas" target="_blank" rel="noopener">faas&lt;/a> 工具&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 抓取代码库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://github.com/alexellis/faas
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 执行 Stack 安装&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">./deploy_stack.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># docker-composer.yml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">version: &lt;span class="s2">&amp;#34;3&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">services:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Core API services are pinned, HA is provided for functions.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gateway:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> volumes:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - &lt;span class="s2">&amp;#34;/var/run/docker.sock:/var/run/docker.sock&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> ports:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - 8080:8080
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> image: functions/gateway:0.6.1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> networks:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> - functions
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> environment:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> dnsrr: &lt;span class="s2">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="c1"># Temporarily use dnsrr in place of VIP while issue persists on PWD&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> deploy:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> placement:
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> constraints: &lt;span class="o">[&lt;/span>node.role &lt;span class="o">==&lt;/span> manager&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>root@ubuntu-176:/tmp/faas# docker stack ps func
ID NAME IMAGE NODE DESIRED STATE CURRENT STATE ERROR PORTS
ehg6btnb78g3 func_nodeinfo.1 functions/nodeinfo:latest ubuntu-177 Running Preparing 2 minutes ago
od9h1nhdyejc func_alertmanager.1 functions/alertmanager:latest Ubuntu-11 Running Preparing 2 minutes ago
cn43a00rhp9l func_hubstats.1 alexellis2/faas-dockerhubstats:latest Ubuntu-15 Running Running about a minute ago
u59bj7p586m4 func_prometheus.1 functions/prometheus:latest Ubuntu-11 Running Preparing 2 minutes ago
yt9gmyhccrcu func_echoit.1 functions/alpine:health ubuntu-178 Running Running about a minute ago
vy5wsgr50z61 func_gateway.1 functions/gateway:0.6.1 Ubuntu-11 Running Preparing 2 minutes ago
y42uhzjsikoo func_decodebase64.1 functions/alpine:health ubuntu-77.14 Running Running less than a second ago
xen7wn6timqz func_base64.1 functions/alpine:health Ubuntu-11 Running Preparing 2 minutes ago
kcz0sym9jqu6 func_webhookstash.1 functions/webhookstash:latest ubuntu-179 Running Running 24 seconds ago
3udkdbip8c4p func_wordcount.1 functions/alpine:health Ubuntu-15 Running Running 2 minutes ago
st0c4ibfze83 func_markdown.1 alexellis2/faas-markdownrender:latest Ubuntu-11 Running Running about a minute ago
root@ubuntu-176:/tmp/faas# docker stack services func
ID NAME MODE REPLICAS IMAGE PORTS
3wniopfhdykt func_echoit replicated 1/1 functions/alpine:health
6he8cqjmb0jm func_decodebase64 replicated 1/1 functions/alpine:health
d6f9xlqdbwe8 func_webhookstash replicated 1/1 functions/webhookstash:latest
en5at93ev76k func_gateway replicated 1/1 functions/gateway:0.6.1 *:8080-&amp;gt;8080/tcp
nsfmi41aphbj func_base64 replicated 1/1 functions/alpine:health
qngwiey9b8ek func_nodeinfo replicated 1/1 functions/nodeinfo:latest
s6i49lq9epas func_prometheus replicated 0/1 functions/prometheus:latest *:9090-&amp;gt;9090/tcp
skkmxt2bx4je func_wordcount replicated 1/1 functions/alpine:health
ty5rbwoozz6e func_hubstats replicated 1/1 alexellis2/faas-dockerhubstats:latest
xne9dph1xcit func_alertmanager replicated 0/1 functions/alertmanager:latest *:9093-&amp;gt;9093/tcp
xvwb9uuvqemo func_markdown replicated 1/1 alexellis2/faas-markdownrender:latest
&lt;/code>&lt;/pre>&lt;h1 id="服务网关">服务网关&lt;/h1>
&lt;p>可以参考笔者的&lt;a href="https://zhuanlan.zhihu.com/p/25850060" target="_blank" rel="noopener">清新脱俗的 Web 服务器 Caddy&lt;/a> 一文。&lt;/p>
&lt;h1 id="devops">DevOps&lt;/h1>
&lt;p>DevOps 包含了 CI 应用服务部署与更新与 Monitor &amp;amp; Alert 监控与告警两部分&lt;/p>
&lt;p>构建与部署剥离&lt;/p>
&lt;p>使用 ELK 进行日志处理，使用 Prometheus 进行线上应用实时监控&lt;/p></description></item></channel></rss>