<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>04.网络 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/04.%E7%BD%91%E7%BB%9C/</link>
      <atom:link href="https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/04.%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <description>04.网络</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>04.网络</title>
      <link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/04.%E7%BD%91%E7%BB%9C/</link>
    </image>
    
    <item>
      <title>网络模型</title>
      <link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/04.%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/04.%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;网络&#34;&gt;网络&lt;/h1&gt;
&lt;p&gt;要想实现网络通信，机器至少需要一个网络接口(物理接口或虚拟接口)与外界相通，并可以收发数据包；另外，如果不同子网之间要进行通信，则需要额外的路由机制。Docker 的网络接口默认都是虚拟接口。虚拟接口的最大优势就是转发效率极高！之所以会这样，那是因为 Linux 通过在内核中进行数据复制来实现虚拟接口间的数据转发，即直接复制发送接口的发送缓存中的数据包到接收接口的接收缓存中，而无需通过外部物理网络设备进行交换。对于本地系统和容器内系统来看，虚拟接口和一个正常的以太网卡相比并无区别，只是虚拟接口的速度要快得多。&lt;/p&gt;
&lt;p&gt;创建一对虚拟接口，分别放到宿主机和容器的命名空间中；宿主机一端的虚拟接口连接到默认的 docker0 网桥或指定网桥上，并具有一个以 veth 开头的唯一的名字；容器一端的虚拟接口将被放到容器中，并修改名称为 eth0，且这个接口只对该容器的命名空间可见；4. 从网桥可用地址段中获取一个空闲的地址分配给容器的 eth0(如 172.17.0.2/16)，并配置默认路由网关为 docker0 网卡的内部接口 docker0 的 IP 地址(如 172.17.42.1/16)；完成以上这些，容器就可以使用自身可见的 eth0 虚拟网卡来连接其他容器和访问外部网络。另外，可以在容器创建启动时通过&amp;ndash;net 参数来指定容器的网络配置&lt;/p&gt;
&lt;h1 id=&#34;cnm-网络模型&#34;&gt;CNM 网络模型&lt;/h1&gt;
&lt;p&gt;Docker 通过 libnetwork 实现了 CNM 网络模型。libnetwork 设计 doc 中对 CNM 模型的简单诠释如下：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5803001/45594781-e6211a80-b9d2-11e8-8252-3d4f52277a17.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;CNM 模型有三个组件：&lt;/p&gt;
&lt;p&gt;Sandbox(沙盒)：每个沙盒包含一个容器网络栈(network stack)的配置，配置包括：容器的网口、路由表和 DNS 设置等。
Endpoint(端点)：通过 Endpoint，沙盒可以被加入到一个 Network 里。
Network(网络)：一组能相互直接通信的 Endpoints。&lt;/p&gt;
&lt;p&gt;CNM 模型在 Linux 上的参考实现技术，比如：沙盒的实现可以是一个 Linux Network Namespace；Endpoint 可以是一对 VETH；Network 则可以用 Linux Bridge 或 Vxlan 实&lt;/p&gt;
&lt;p&gt;veth 对只是不同网络命名空间通信的一种解决方案，还有其他方案。&lt;/p&gt;
&lt;p&gt;Linux Bridge，即 Linux 网桥设备，是 Linux 提供的一种虚拟网络设备之一。其工作方式非常类似于物理的网络交换机设备。Linux Bridge 可以工作在二&lt;/p&gt;
&lt;p&gt;层，也可以工作在三层，默认工作在二层。工作在二层时，可以在同一网络的不同主机间转发以太网报文；一旦你给一个 Linux Bridge 分配了 IP 地址，&lt;/p&gt;
&lt;p&gt;也就开启了该 Bridge 的三层工作模式。在 Linux 下，你可以用 iproute2 工具包或 brctl 命令对 Linux bridge 进行管理。&lt;/p&gt;
&lt;p&gt;VETH(Virtual Ethernet )是 Linux 提供的另外一种特殊的网络设备，中文称为虚拟网卡接口。它总是成对出现，要创建就创建一个 pair。一个 Pair 中的&lt;/p&gt;
&lt;p&gt;veth 就像一个网络线缆的两个端点，数据从一个端点进入，必然从另外一个端点流出。每个 veth 都可以被赋予 IP 地址，并参与三层网络路由过程。Network namespace，网络名字空间，允许你在 Linux 创建相互隔离的网络视图，每个网络名字空间都有独立的网络配置，比如：网络设备、路由表&lt;/p&gt;
&lt;p&gt;等。新建的网络名字空间与主机默认网络名字空间之间是隔离的。我们平时默认操作的是主机的默认网络名字空间。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5803001/45594763-b5d97c00-b9d2-11e8-9001-377d8957d488.png&#34; alt=&#34;image&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>网络配置</title>
      <link>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/04.%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/cloud-notes/01.%E8%99%9A%E6%8B%9F%E5%8C%96/docker/04.%E7%BD%91%E7%BB%9C/%E7%BD%91%E7%BB%9C%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;h1 id=&#34;docker-网络配置&#34;&gt;Docker 网络配置&lt;/h1&gt;
&lt;p&gt;Docker 1.9 中正式引入了所谓的 &amp;ldquo;Container Network Model&amp;rdquo;，也就适合所谓的 &lt;a href=&#34;https://blog.docker.com/2015/04/docker-networking-takes-a-step-in-the-right-direction-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CNM&lt;/a&gt; 的概念。CNM 即用于创建小型微分割的网络来使得不同组的容器之间进行相互连接。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://blog.docker.com/media/2015/04/cnm-model.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;basic-usage--基本使用&#34;&gt;Basic Usage | 基本使用&lt;/h2&gt;
&lt;h3 id=&#34;端口映射&#34;&gt;端口映射&lt;/h3&gt;
&lt;p&gt;容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 &lt;code&gt;-P&lt;/code&gt;或&lt;code&gt;-p&lt;/code&gt; 参数来指定端口映射。&lt;/p&gt;
&lt;p&gt;当使用 -P 标记时，Docker 会随机映射一个 &lt;code&gt;49000~49900&lt;/code&gt; 的端口到内部容器开放的网络端口。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;docker ps&lt;/code&gt; 可以看到，本地主机的 49155 被映射到了容器的 5000 端口。此时访问本机的 49155 端口即可访问容器内 web 应用提供的界面。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo docker run -d -P training/webapp python app.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo docker ps -l
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;CONTAINER ID  IMAGE                   COMMAND       CREATED        STATUS        PORTS                    NAMESbc533791f3f5  training/webapp:latest  python app.py &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; seconds ago  Up &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; seconds  0.0.0.0:49155-&amp;gt;5000/tcp  nostalgic_morse
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同样的，可以通过 &lt;code&gt;docker logs&lt;/code&gt; 命令来查看应用的信息。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ sudo docker logs -f nostalgic_morse
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;* Running on http://0.0.0.0:5000/10.0.2.2 - - &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;23/May/2014 20:16:31&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET / HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; -10.0.2.2 - - &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;23/May/2014 20:16:31&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;GET /favicon.ico HTTP/1.1&amp;#34;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;404&lt;/span&gt; -
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;-p (小写的)则可以指定要映射的端口，并且，在一个指定端口上只可以绑定一个容器。支持的格式有 &lt;code&gt;ip:hostPort:containerPort | ip::containerPort | hostPort:containerPort&lt;/code&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射所有接口地址&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;hostPort:containerPort&lt;/code&gt; 格式本地的 5000 端口映射到容器的 5000 端口，可以执行&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d -p 5000:5000 training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时默认会绑定本地所有接口上的所有地址。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;映射到指定地址的指定端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以使用 &lt;code&gt;ip:hostPort:containerPort&lt;/code&gt; 格式指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;映射到指定地址的任意端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;ip::containerPort&lt;/code&gt; 绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d -p 127.0.0.1::5000 training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还可以使用 udp 标记来指定 udp 端口&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;查看映射端口配置&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;docker port&lt;/code&gt; 来查看当前映射的端口配置，也可以查看到绑定的地址&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker port nostalgic_morse 5000127.0.0.1:49155.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器有自己的内部网络和 ip 地址(使用 &lt;code&gt;docker inspect&lt;/code&gt; 可以获取所有的变量，Docker 还可以有一个可变的网络配置。)&lt;/li&gt;
&lt;li&gt;-p 标记可以多次使用来绑定多个端口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例如&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d -p 5000:5000  -p 3000:80 training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，网络映射的操作只会在 run 命令中起作用，如果已经运行了一个容器，需要重新设置其网络映射情况，请使用 commit 将容器转化为镜像之后再创建新的容器。&lt;/p&gt;
&lt;h3 id=&#34;容器互联-links&#34;&gt;容器互联 (Links)&lt;/h3&gt;
&lt;p&gt;容器的连接(linking )系统是除了端口映射外，另一种跟容器中应用交互的方式。&lt;/p&gt;
&lt;p&gt;该系统会在源和接收容器之间创建一个隧道，接收容器可以看到源容器指定的信息。&lt;/p&gt;
&lt;h4 id=&#34;自定义容器命名&#34;&gt;自定义容器命名&lt;/h4&gt;
&lt;p&gt;连接系统依据容器的名称来执行。因此，首先需要自定义一个好记的容器命名。&lt;/p&gt;
&lt;p&gt;虽然当创建容器的时候，系统默认会分配一个名字。自定义命名容器有 2 个好处：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自定义的命名，比较好记，比如一个 web 应用容器我们可以给它起名叫 web&lt;/li&gt;
&lt;li&gt;当要连接其他容器时候，可以作为一个有用的参考点，比如连接 web 容器到 db 容器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;--name&lt;/code&gt; 标记可以为容器自定义命名。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d -P --name web training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;使用 &lt;code&gt;docker ps&lt;/code&gt; 来验证设定的命名。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker ps -lCONTAINER ID  IMAGE                  COMMAND        CREATED       STATUS       PORTS                    NAMESaed84ee21bde  training/webapp:latest python app.py  12 hours ago  Up 2 seconds 0.0.0.0:49154-&amp;gt;5000/tcp  web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也可以使用 &lt;code&gt;docker inspect&lt;/code&gt; 来查看容器的名字&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker inspect -f &amp;#34;{{ .Name }}&amp;#34; aed84ee21bde/web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：容器的名称是唯一的。如果已经命名了一个叫 web 的容器，当你要再次使用 web 这个名称的时候，需要先用&lt;code&gt;docker rm&lt;/code&gt; 来删除之前创建的同名容器。&lt;/p&gt;
&lt;p&gt;在执行 &lt;code&gt;docker run&lt;/code&gt; 的时候如果添加 &lt;code&gt;--rm&lt;/code&gt; 标记，则容器在终止后会立刻删除。注意，&lt;code&gt;--rm&lt;/code&gt; 和 &lt;code&gt;-d&lt;/code&gt; 参数不能同时使用。&lt;/p&gt;
&lt;h4 id=&#34;容器互联&#34;&gt;容器互联&lt;/h4&gt;
&lt;p&gt;使用 &lt;code&gt;--link&lt;/code&gt; 参数可以让容器之间安全的进行交互。&lt;/p&gt;
&lt;p&gt;下面先创建一个新的数据库容器。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d --name db training/postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;删除之前创建的 web 容器&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker rm -f web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后创建一个新的 web 容器，并将它连接到 db 容器&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -d -P --name web --link db:db training/webapp python app.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时，db 容器和 web 容器建立互联关系。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--link&lt;/code&gt; 参数的格式为 &lt;code&gt;--link name:alias&lt;/code&gt;，其中 &lt;code&gt;name&lt;/code&gt; 是要链接的容器的名称，&lt;code&gt;alias&lt;/code&gt;是这个连接的别名。&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;docker ps&lt;/code&gt; 来查看容器的连接&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker psCONTAINER ID  IMAGE                     COMMAND               CREATED             STATUS             PORTS                    NAMES349169744e49  training/postgres:latest  su postgres -c &amp;#39;/usr  About a minute ago  Up About a minute  5432/tcp                 db, web/dbaed84ee21bde  training/webapp:latest    python app.py         16 hours ago        Up 2 minutes       0.0.0.0:49154-&amp;gt;5000/tcp  web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以看到自定义命名的容器，db 和 web，db 容器的 names 列有 db 也有 web/db。这表示 web 容器链接到 db 容器，web 容器将被允许访问 db 容器的信息。&lt;/p&gt;
&lt;p&gt;Docker 在两个互联的容器之间创建了一个安全隧道，而且不用映射它们的端口到宿主主机上。在启动 db 容器的时候并没有使用 &lt;code&gt;-p&lt;/code&gt; 和 &lt;code&gt;-P&lt;/code&gt; 标记，从而避免了暴露数据库端口到外部网络上。&lt;/p&gt;
&lt;p&gt;Docker 通过 2 种方式为容器公开连接信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;环境变量&lt;/li&gt;
&lt;li&gt;更新 &lt;code&gt;/etc/hosts&lt;/code&gt; 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用 &lt;code&gt;env&lt;/code&gt; 命令来查看 web 容器的环境变量&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run --rm --name web2 --link db:db training/webapp env. . .DB_NAME=/web2/dbDB_PORT=tcp://172.17.0.5:5432DB_PORT_5000_TCP=tcp://172.17.0.5:5432DB_PORT_5000_TCP_PROTO=tcpDB_PORT_5000_TCP_PORT=5432DB_PORT_5000_TCP_ADDR=172.17.0.5. . .
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中 DB_ 开头的环境变量是供 web 容器连接 db 容器使用，前缀采用大写的连接别名。&lt;/p&gt;
&lt;p&gt;除了环境变量，Docker 还添加 host 信息到父容器的 &lt;code&gt;/etc/hosts&lt;/code&gt; 的文件。下面是父容器 web 的 hosts 文件&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ sudo docker run -t -i --rm --link db:db training/webapp /bin/bashroot@aed84ee21bde:/opt/webapp# cat /etc/hosts172.17.0.7  aed84ee21bde. . .172.17.0.5  db
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里有 2 个 hosts，第一个是 web 容器，web 容器用 id 作为他的主机名，第二个是 db 容器的 ip 和主机名。可以在 web 容器中安装 ping 命令来测试跟 db 容器的连通。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;root@aed84ee21bde:/opt/webapp# apt-get install -yqq inetutils-pingroot@aed84ee21bde:/opt/webapp# ping dbPING db (172.17.0.5): 48 data bytes56 bytes from 172.17.0.5: icmp_seq=0 ttl=64 time=0.267 ms56 bytes from 172.17.0.5: icmp_seq=1 ttl=64 time=0.250 ms56 bytes from 172.17.0.5: icmp_seq=2 ttl=64 time=0.256 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;用 ping 来测试 db 容器，它会解析成 &lt;code&gt;172.17.0.5&lt;/code&gt;。* 注意：官方的 ubuntu 镜像默认没有安装 ping，需要自行安装。&lt;/p&gt;
&lt;p&gt;用户可以链接多个父容器到子容器，比如可以链接多个 web 到 db 容器上。&lt;/p&gt;
&lt;h2 id=&#34;networking-网络-&#34;&gt;Networking( 网络 )&lt;/h2&gt;
&lt;p&gt;在 Docker 1.9 之后，Docker 正式宣布可以将 Networking 应用于生产环境中，并且可以与 Swarm 以及 Compose 进行较好的结合。与传统的 List 相比，Networking 具有以下优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许不同物理主机或者虚拟主机上的容器进行通信&lt;/li&gt;
&lt;li&gt;使用了 Networking 的容器可以很方便地进行停止、启动或者重启等操作而不用担心会影响到与其他容器之间的连接&lt;/li&gt;
&lt;li&gt;并不需要在连接到某个容器之前就直接创建它，换言之，Networking 不再像原本的 List 一样会依赖某个容器而存在&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://dockerone.com/uploads/article/20151106/4f9a1786e78de4e9b3d6db5df9afbeeb.jpg&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;single-host-networking&#34;&gt;Single Host Networking&lt;/h3&gt;
&lt;p&gt;可以直接使用&lt;code&gt;docker network&lt;/code&gt;命令来使用 Networking，其中可以使用&lt;code&gt;docker network create&lt;/code&gt;来创建一个新的网络，在这个示例中，我们会创建一个叫做&lt;code&gt;frontend&lt;/code&gt;的网络并且在其中运行一个 nginx 容器：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker network create frontend$ docker run -itd --net=frontend --name web nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们使用网络来分割应用，乃至于分割应用中的不同模块。在本例子中，我们可以创建另一个包含了应用程序的网络&lt;code&gt;app&lt;/code&gt;，然后将这个网络与&lt;code&gt;frontend&lt;/code&gt;网络相连，命令如下所示：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker network create app$ docker run -itd --name myapp --net=app &amp;lt;my application container&amp;gt;$ docker network connect app web
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样我们的 Nginx 服务器就可以使用&lt;code&gt;myapp.app&lt;/code&gt;这个主机名来连接到应用程序中。我们创建两个基于 busybox 的容器来进行尝试：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker run -d --name rose --net=frontend busybox topc1fa2dc7fa3a412b52b53f5facd25ba11e99c362d77be8cea4ff49f3d5e2cafc$ docker run --rm --net=frontend busybox ping -c 4 rosePING rose (172.19.0.2): 56 data bytes64 bytes from 172.19.0.2: seq=0 ttl=64 time=0.122 ms64 bytes from 172.19.0.2: seq=1 ttl=64 time=0.078 ms64 bytes from 172.19.0.2: seq=2 ttl=64 time=0.098 ms64 bytes from 172.19.0.2: seq=3 ttl=64 time=0.241 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们已将第二个容器附着到&lt;code&gt;frontend&lt;/code&gt;网路中，并且用&lt;code&gt;ping&lt;/code&gt;命令来进行内建的容器发现，我们可以用&lt;code&gt;inspect&lt;/code&gt;命令来查看网络的详情：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker network inspect frontend[    {        &amp;#34;Name&amp;#34;: &amp;#34;frontend&amp;#34;,        &amp;#34;Id&amp;#34;: &amp;#34;a639a457122020faa69a4ab906bc33217c9c6d73048f3dbbb69e53dbe5e0952c&amp;#34;,        &amp;#34;Scope&amp;#34;: &amp;#34;local&amp;#34;,        &amp;#34;Driver&amp;#34;: &amp;#34;bridge&amp;#34;,        &amp;#34;IPAM&amp;#34;: {            &amp;#34;Driver&amp;#34;: &amp;#34;default&amp;#34;,            &amp;#34;Config&amp;#34;: [                {}            ]        },        &amp;#34;Containers&amp;#34;: {            &amp;#34;c1fa2dc7fa3a412b52b53f5facd25ba11e99c362d77be8cea4ff49f3d5e2cafc&amp;#34;: {                &amp;#34;EndpointID&amp;#34;: &amp;#34;976bab21d4a11cd21d5d1c1560f67f39ef15245662aeacf097eb1d5c148ed748&amp;#34;,                &amp;#34;MacAddress&amp;#34;: &amp;#34;02:42:ac:13:00:02&amp;#34;,                &amp;#34;IPv4Address&amp;#34;: &amp;#34;172.19.0.2/16&amp;#34;,                &amp;#34;IPv6Address&amp;#34;: &amp;#34;&amp;#34;            }        },        &amp;#34;Options&amp;#34;: {}    }]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在前端网络之外，我们也可以创建一个自定义的后端网络，用于连接其他容器：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker network create backend09733cac7890edca439cdc3d476b4cd1959e44065217aa581d359575b8d2288f$ docker network connect backend rose$ docker network inspect backend    {        &amp;#34;name&amp;#34;: &amp;#34;backend&amp;#34;,        &amp;#34;id&amp;#34;: &amp;#34;09733cac7890edca439cdc3d476b4cd1959e44065217aa581d359575b8d2288f&amp;#34;,        &amp;#34;scope&amp;#34;: &amp;#34;local&amp;#34;,        &amp;#34;driver&amp;#34;: &amp;#34;bridge&amp;#34;,        &amp;#34;ipam&amp;#34;: {            &amp;#34;driver&amp;#34;: &amp;#34;default&amp;#34;,            &amp;#34;config&amp;#34;: [                {}            ]        },        &amp;#34;containers&amp;#34;: {            &amp;#34;c1fa2dc7fa3a412b52b53f5facd25ba11e99c362d77be8cea4ff49f3d5e2cafc&amp;#34;: {                &amp;#34;endpoint&amp;#34;: &amp;#34;438730c588915dd54dc694efdb3a15c77bc5e86c744f5f87a65f6ac46b43e5ad&amp;#34;,                &amp;#34;mac_address&amp;#34;: &amp;#34;02:42:ac:14:00:02&amp;#34;,                &amp;#34;ipv4_address&amp;#34;: &amp;#34;172.20.0.2/16&amp;#34;,                &amp;#34;ipv6_address&amp;#34;: &amp;#34;&amp;#34;            }        },        &amp;#34;options&amp;#34;: {}    }]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;再看一下容器中具体的网络的设置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker inspect -f &amp;#39;{{ json .NetworkSettings }}&amp;#39; rose{  &amp;#34;Bridge&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;SandboxID&amp;#34;: &amp;#34;b600bebe1e2bb6dee92335e6acfe49215c30c4964d7a982711ec12c6acca3309&amp;#34;,  &amp;#34;HairpinMode&amp;#34;: false,  &amp;#34;LinkLocalIPv6Address&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;LinkLocalIPv6PrefixLen&amp;#34;: 0,  &amp;#34;Ports&amp;#34;: {},  &amp;#34;SandboxKey&amp;#34;: &amp;#34;/var/run/docker/netns/b600bebe1e2b&amp;#34;,  &amp;#34;SecondaryIPAddresses&amp;#34;: null,  &amp;#34;SecondaryIPv6Addresses&amp;#34;: null,  &amp;#34;EndpointID&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;Gateway&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;GlobalIPv6Address&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;GlobalIPv6PrefixLen&amp;#34;: 0,  &amp;#34;IPAddress&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;IPPrefixLen&amp;#34;: 0,  &amp;#34;IPv6Gateway&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;MacAddress&amp;#34;: &amp;#34;&amp;#34;,  &amp;#34;Networks&amp;#34;: {    &amp;#34;backend&amp;#34;: {      &amp;#34;EndpointID&amp;#34;: &amp;#34;438730c588915dd54dc694efdb3a15c77bc5e86c744f5f87a65f6ac46b43e5ad&amp;#34;,      &amp;#34;Gateway&amp;#34;: &amp;#34;172.20.0.1&amp;#34;,      &amp;#34;IPAddress&amp;#34;: &amp;#34;172.20.0.2&amp;#34;,      &amp;#34;IPPrefixLen&amp;#34;: 16,      &amp;#34;IPv6Gateway&amp;#34;: &amp;#34;&amp;#34;,      &amp;#34;GlobalIPv6Address&amp;#34;: &amp;#34;&amp;#34;,      &amp;#34;GlobalIPv6PrefixLen&amp;#34;: 0,      &amp;#34;MacAddress&amp;#34;: &amp;#34;02:42:ac:14:00:02&amp;#34;    },    &amp;#34;frontend&amp;#34;: {      &amp;#34;EndpointID&amp;#34;: &amp;#34;976bab21d4a11cd21d5d1c1560f67f39ef15245662aeacf097eb1d5c148ed748&amp;#34;,      &amp;#34;Gateway&amp;#34;: &amp;#34;172.19.0.1&amp;#34;,      &amp;#34;IPAddress&amp;#34;: &amp;#34;172.19.0.2&amp;#34;,      &amp;#34;IPPrefixLen&amp;#34;: 16,      &amp;#34;IPv6Gateway&amp;#34;: &amp;#34;&amp;#34;,      &amp;#34;GlobalIPv6Address&amp;#34;: &amp;#34;&amp;#34;,      &amp;#34;GlobalIPv6PrefixLen&amp;#34;: 0,      &amp;#34;MacAddress&amp;#34;: &amp;#34;02:42:ac:13:00:02&amp;#34;    }  }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在容器中使用&lt;code&gt;ifconfig&lt;/code&gt;命令查看时：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker exec rose ifconifgeth0      Link encap:Ethernet  HWaddr 02:42:AC:13:00:02          inet addr:172.19.0.2  Bcast:0.0.0.0  Mask:255.255.0.0          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:27 errors:0 dropped:0 overruns:0 frame:0          TX packets:16 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0          RX bytes:2238 (2.1 KiB)  TX bytes:1208 (1.1 KiB)eth1      Link encap:Ethernet  HWaddr 02:42:AC:14:00:02          inet addr:172.20.0.2  Bcast:0.0.0.0  Mask:255.255.0.0          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1          RX packets:16 errors:0 dropped:0 overruns:0 frame:0          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0          RX bytes:1296 (1.2 KiB)  TX bytes:648 (648.0 B)lo        Link encap:Local Loopback          inet addr:127.0.0.1  Mask:255.0.0.0          UP LOOPBACK RUNNING  MTU:65536  Metric:1          RX packets:0 errors:0 dropped:0 overruns:0 frame:0          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0          collisions:0 txqueuelen:0          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而如果要将某个容器从网络中断开时，可以使用如下命令：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ docker network disconnect backend rose
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种网络配置方式的初衷即将服务独立出来成为一个网络中不同的容器之间相互交流的唯一信息。换言之，在实践中，需要构建出大量的小型网络，每个网络中只负责某个服务的通信，并且不同的网络之间应该是相互隔离的。一个典型的例子就是负载均衡器、前端、后端以及一个数据库。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://www.container42.com/assets/cnm-demo.png&#34; alt=&#34;img&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;network-customization&#34;&gt;Network Customization&lt;/h4&gt;
&lt;p&gt;在创建网络的时候我们也可以设置很多的自定义的配置：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  --aux-address=map[]      auxiliary ipv4 or ipv6 addresses used by Network driver  -d, --driver=&amp;#34;bridge&amp;#34;    Driver to manage the Network  --gateway=[]             ipv4 or ipv6 Gateway for the master subnet  --help=false             Print usage  --ip-range=[]            allocate container ip from a sub-range  --ipam-driver=default    IP Address Management Driver  -o, --opt=map[]          set driver specific options  --subnet=[]              subnet in CIDR format that represents a network segment
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们首先来看下&lt;code&gt;--driver&lt;/code&gt;选项，该选项可以来选定具体的网络驱动方式来管理网络，目前 Docker 提供了如下两种驱动器：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bridge &amp;ndash; This driver provides the same sort of networking via veth bridge devices that prior versions of docker use, it is the default.&lt;/li&gt;
&lt;li&gt;overlay &amp;ndash; Not to be confused with the &amp;ldquo;overlay&amp;rdquo; storage driver (thanks overlayfs), this driver provides native multi-host networking for docker clusters. When using swarm, this is the default driver.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个常用的选项是&lt;code&gt;--ipam-driver&lt;/code&gt;，用来确定 IP 地址是如何分配的。目前 Docker 仅内置了一种 IP 地址分配方案，未来会添加上 DHCP IAMP 方式。&lt;/p&gt;
&lt;h3 id=&#34;multi-host-networking&#34;&gt;Multi-Host Networking&lt;/h3&gt;
</description>
    </item>
    
  </channel>
</rss>
