<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/</link><atom:link href="https://ng-tech.icu/books/awesome-cs-books/frontend/web/index.xml" rel="self" type="application/rss+xml"/><description>Web</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Web</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/</link></image><item><title>2010-《精通 CSS 高级 Web 标准解决方案》</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2010-%E7%B2%BE%E9%80%9A-css-%E9%AB%98%E7%BA%A7-web-%E6%A0%87%E5%87%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2010-%E7%B2%BE%E9%80%9A-css-%E9%AB%98%E7%BA%A7-web-%E6%A0%87%E5%87%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2010-精通 CSS 高级 Web 标准解决方案</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2010-%E7%B2%BE%E9%80%9A-css-%E9%AB%98%E7%BA%A7-web-%E6%A0%87%E5%87%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2010-%E7%B2%BE%E9%80%9A-css-%E9%AB%98%E7%BA%A7-web-%E6%A0%87%E5%87%86%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2011-《深入浅出 NodeJS》</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2011-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-nodejs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2011-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-nodejs/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2011-深入浅出NodeJS</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2011-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAnodejs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2011-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAnodejs/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2012-《Mastering HTML and CSS》</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2012-mastering-html-and-css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2012-mastering-html-and-css/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2012-Mastering HTML and CSS</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2012-mastering-html-and-css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2012-mastering-html-and-css/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2015-《CSS Secrets. Better Solutions to Everyday Web Design Problems》</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2015-css-secrets.-better-solutions-to-everyday-web-design-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2015-css-secrets.-better-solutions-to-everyday-web-design-problems/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2015-Apress.Pro.React</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2015-apress.pro.react/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2015-apress.pro.react/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2015-CSS Secrets. Better Solutions to Everyday Web Design Problems</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2015-css-secrets.-better-solutions-to-everyday-web-design-problems/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2015-css-secrets.-better-solutions-to-everyday-web-design-problems/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2016-《Cascading Style Sheets Level 2 Revision 2 Specification》</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2016-cascading-style-sheets-level-2-revision-2-specification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2016-cascading-style-sheets-level-2-revision-2-specification/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2016-Cascading Style Sheets Level 2 Revision 2 Specification</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2016-cascading-style-sheets-level-2-revision-2-specification/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2016-cascading-style-sheets-level-2-revision-2-specification/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2017-Monterail-《State of Vue.js report》</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2017-monterail-state-of-vue.js-report/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2017-monterail-state-of-vue.js-report/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2017-State of Vue.js report 2017 by Monterail</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2017-state-of-vue.js-report-2017-by-monterail/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2017-state-of-vue.js-report-2017-by-monterail/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote></description></item><item><title>2018-于航-《深入浅出 WebAssembly》</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2018-%E4%BA%8E%E8%88%AA-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-webassembly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2018-%E4%BA%8E%E8%88%AA-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-webassembly/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote>
&lt;h1 id="第-1-章-漫谈-webassembly-发展史-1">第 1 章 漫谈 WebAssembly 发展史&amp;hellip;. 1&lt;/h1>
&lt;h2 id="11-javascript-的发展和弊端-1">1.1 JavaScript 的发展和弊端&amp;hellip;. 1&lt;/h2>
&lt;p>1.1.1 快速发展与基准测试&amp;hellip;. 1
1.1.2 Web 新时代与不断挑战&amp;hellip;. 8
1.1.3 无法跨越的“阻碍”&amp;hellip;. 11
1.1.4 Chrome V8 引擎链路&amp;hellip;. 17&lt;/p>
&lt;h2 id="12-曾经尝试asmjs-与-pnacl-28">1.2 曾经尝试——ASM.js 与 PNaCl. 28&lt;/h2>
&lt;p>1.2.1 失落的 ASM.js. 28
1.2.2 古老的 NaCl 与 PNaCl. 42&lt;/p>
&lt;h2 id="13-新的可能webassembly-57">1.3 新的可能——WebAssembly.. 57&lt;/h2>
&lt;p>1.3.1 改变与颠覆&amp;hellip;. 57
1.3.2 一路向前，WCG 与 WWG.. 85&lt;/p>
&lt;h1 id="第-2-章-webassembly-核心原理基于-mvp-标准-90">第 2 章 WebAssembly 核心原理（基于 MVP 标准）&amp;hellip;. 90&lt;/h1>
&lt;h2 id="21-应用与标准-web-接口-90">2.1 应用与标准 Web 接口&amp;hellip;. 90&lt;/h2>
&lt;p>2.1.1 编译与初始化&amp;hellip;. 90
2.1.2 验证模块&amp;hellip;. 106
2.1.3 遇到错误&amp;hellip;. 106
2.1.4 内存分配&amp;hellip;. 108
2.1.5 表&amp;hellip;. 112&lt;/p>
&lt;h2 id="22-深入设计模型堆栈机-118">2.2 深入设计模型——堆栈机&amp;hellip;. 118&lt;/h2>
&lt;p>2.2.1 堆栈式虚拟机&amp;hellip;. 119
2.2.2 逆波兰表达式&amp;hellip;. 125
2.2.3 Shunting-yard 算法&amp;hellip;. 126
2.2.4 标签与跳转&amp;hellip;. 130
2.2.5 条件语句&amp;hellip;. 135
2.2.6 子程序调用&amp;hellip;. 137
2.2.7 变量&amp;hellip;. 138
2.2.8 栈帧&amp;hellip;. 139
2.2.9 堆&amp;hellip;. 140&lt;/p>
&lt;h2 id="23-类型检查-141">2.3 类型检查&amp;hellip;. 141&lt;/h2>
&lt;p>2.3.1 数据指令类型&amp;hellip;. 142
2.3.2 基本流程控制&amp;hellip;. 144
2.3.3 基于表达式的控制流&amp;hellip;. 149
2.3.4 类型堆栈的一致性&amp;hellip;. 151
2.3.5 不可达代码&amp;hellip;. 155&lt;/p>
&lt;h2 id="24-二进制编码-156">2.4 二进制编码&amp;hellip;. 156&lt;/h2>
&lt;p>2.4.1 字节序——大端模式与小端模式&amp;hellip;. 157
2.4.2 基于 LEB-128 的整数编码&amp;hellip;. 161
2.4.3 基于 IEEE-754—2008 的浮点数编码&amp;hellip;. 163
2.4.4 基于 UTF-8 的字符串编码&amp;hellip;. 167
2.4.5 模块数据类型&amp;hellip;. 168
2.4.6 虚拟指令与编码&amp;hellip;. 169
2.4.7 类型构造符&amp;hellip;. 174&lt;/p>
&lt;h2 id="25-模块-175">2.5 模块&amp;hellip;. 175&lt;/h2>
&lt;p>2.5.1 段&amp;hellip;. 175
2.5.2 索引空间&amp;hellip;. 185
2.5.3 二进制原型结构&amp;hellip;. 186&lt;/p>
&lt;h2 id="26-内存结构-196">2.6 内存结构&amp;hellip;. 196&lt;/h2>
&lt;p>2.6.1 操作运算符&amp;hellip;. 197
2.6.2 寻址&amp;hellip;. 197
2.6.3 对齐&amp;hellip;. 198
2.6.4 溢出与调整&amp;hellip;. 203&lt;/p>
&lt;h1 id="第-3-章-动态链接与-simd基于-mvp-标准-204">第 3 章 动态链接与 SIMD（基于 MVP 标准）&amp;hellip;. 204&lt;/h1>
&lt;h2 id="31-动态链接dynamic-linking-204">3.1 动态链接（Dynamic Linking）&amp;hellip;. 204&lt;/h2>
&lt;p>3.1.1 ELF.. 206
3.1.2 符号重定向（Symbol Relocation）&amp;hellip;. 212
3.1.3 GOT（Global Offset Table，全局偏移表）&amp;hellip;. 225
3.1.4 PLT（Procedure Lookup Table，过程查询表）&amp;hellip;. 229
3.1.5 基于表的 Wasm 模块动态链接&amp;hellip;. 233&lt;/p>
&lt;h2 id="32-单指令多数据流simd-237">3.2 单指令多数据流（SIMD）&amp;hellip;. 237&lt;/h2>
&lt;p>3.2.1 SIMD 应用&amp;hellip;. 239
3.2.2 并行与并发&amp;hellip;. 243
3.2.3 费林分类法&amp;hellip;. 244
3.2.4 SIMD.js &amp;amp; TC39.. 246
3.2.5 WebAssembly 上的 SIMD 扩展&amp;hellip;. 248&lt;/p>
&lt;h1 id="第-4-章-深入-llvm-与-wat-250">第 4 章 深入 LLVM 与 WAT.. 250&lt;/h1>
&lt;h2 id="41-llvm底层虚拟机-250">4.1 LLVM——底层虚拟机&amp;hellip;. 250&lt;/h2>
&lt;p>4.1.1 传统的编译器架构&amp;hellip;. 251
4.1.2 LLVM 中间表示层&amp;hellip;. 252
4.1.3 基于 LLVM 的编译器架构&amp;hellip;. 254
4.1.4 LLVM 优化策略&amp;hellip;. 256
4.1.5 LLVM 命令行工具&amp;hellip;. 261
4.1.6 WebAssembly 与 LLVM&amp;hellip; 268&lt;/p>
&lt;h2 id="42-基于-llvm-定义新的编程语言-272">4.2 基于 LLVM 定义新的编程语言&amp;hellip;. 272&lt;/h2>
&lt;p>4.2.1 图灵完备与 DSL.. 276
4.2.2 简易词法分析器&amp;hellip;. 280
4.2.3 RDP 与 OPP 算法&amp;hellip;. 287
4.2.4 AST（抽象语法树）&amp;hellip;. 295
4.2.5 简易语法分析器&amp;hellip;. 296
4.2.6 生成 LLVM-IR 代码&amp;hellip;. 303
4.2.7 链接优化器&amp;hellip;. 307
4.2.8 编译到目标代码&amp;hellip;. 308
4.2.9 整合 IO 交互层&amp;hellip;. 312&lt;/p>
&lt;h2 id="43-wat-315">4.3 WAT.. 315&lt;/h2>
&lt;p>4.3.1 S-表达式&amp;hellip;. 317
4.3.2 WAT/Wasm 与 Binary-AST.. 318
4.3.3 其他与设计原则&amp;hellip;. 320&lt;/p>
&lt;h1 id="第-5-章-emscripten-基础应用-322">第 5 章 Emscripten 基础应用&amp;hellip;. 322&lt;/h1>
&lt;h2 id="51-利器emscripten-工具链-322">5.1 利器——Emscripten 工具链&amp;hellip;. 322&lt;/h2>
&lt;p>5.1.1 Emscripten 发展历史&amp;hellip;. 322
5.1.2 Emscripten 组成结构&amp;hellip;. 324
5.1.3 Emscripten 下载、安装与配置&amp;hellip;. 326
5.1.4 运行测试套件&amp;hellip;. 330
5.1.5 编译到 ASM.js. 331&lt;/p>
&lt;h2 id="52-连接-cc与-webassembly-333">5.2 连接 C/C++与 WebAssembly.. 333&lt;/h2>
&lt;p>5.2.1 构建类型&amp;hellip;. 334
5.2.2 Emscripten 运行时环境&amp;hellip;. 342
5.2.3 在 JavaScript 代码中调用 C/C++函数&amp;hellip;. 351
5.2.4 在 C/C++代码中调用 JavaScript 函数&amp;hellip;. 363&lt;/p>
&lt;h1 id="第-6-章-基于-emscripten-的语言关系绑定-382">第 6 章 基于 Emscripten 的语言关系绑定&amp;hellip;. 382&lt;/h1>
&lt;h2 id="61-基于-embind-实现关系绑定-384">6.1 基于 Embind 实现关系绑定&amp;hellip;. 384&lt;/h2>
&lt;p>6.1.1 简单类&amp;hellip;. 389
6.1.2 数组与对象类型&amp;hellip;. 391
6.1.3 高级类元素&amp;hellip;. 393
6.1.4 重载函数&amp;hellip;. 407
6.1.5 枚举类型&amp;hellip;. 408
6.1.6 基本类型&amp;hellip;. 409
6.1.7 容器类型&amp;hellip;. 411
6.1.8 转译 JavaScript 代码&amp;hellip;. 413
6.1.9 内存视图&amp;hellip;. 416&lt;/p>
&lt;h2 id="62-基于-webidl-实现关系绑定-417">6.2 基于 WebIDL 实现关系绑定&amp;hellip;. 417&lt;/h2>
&lt;p>6.2.1 指针、引用和值类型&amp;hellip;. 420
6.2.2 类成员变量&amp;hellip;. 422
6.2.3 常量“const”关键字&amp;hellip;. 423
6.2.4 命名空间&amp;hellip;.. 424
6.2.5 运算符重载&amp;hellip;. 425
6.2.6 枚举类型&amp;hellip;. 426
6.2.7 接口类&amp;hellip;. 429
6.2.8 原始指针、空指针与 void 指针&amp;hellip;. 431
6.2.9 默认类型转换&amp;hellip;. 434&lt;/p>
&lt;h1 id="第-7-章-探索-emscripten-高级特性-437">第 7 章 探索 Emscripten 高级特性&amp;hellip;. 437&lt;/h1>
&lt;h2 id="71-加入优化流程-437">7.1 加入优化流程&amp;hellip;. 437&lt;/h2>
&lt;p>7.1.1 使用编译器代码优化策略&amp;hellip;. 442
7.1.2 使用 GCC 压缩代码&amp;hellip;. 444
7.1.3 使用 IndexedDB 缓存模块对象&amp;hellip;. 446
7.1.4 其他优化参数&amp;hellip;. 453&lt;/p>
&lt;h2 id="72-使用标准库与文件系统-454">7.2 使用标准库与文件系统&amp;hellip;. 454&lt;/h2>
&lt;p>7.2.1 使用基于 musl 和 libc++的标准库&amp;hellip;. 455
7.2.2 虚拟文件系统结构&amp;hellip;. 458
7.2.3 打包初始化文件&amp;hellip;. 460
7.2.4 基本文件系统操作&amp;hellip;. 461
7.2.5 懒加载&amp;hellip;. 470
7.2.6 Fetch API. 474&lt;/p>
&lt;h2 id="73-处理浏览器事件-479">7.3 处理浏览器事件&amp;hellip;. 479&lt;/h2>
&lt;p>7.3.1 事件注册函数&amp;hellip;. 480
7.3.2 事件回调函数&amp;hellip;. 481
7.3.3 通用类型与返回值类型&amp;hellip;. 482
7.3.4 常用事件&amp;hellip;. 484&lt;/p>
&lt;h2 id="74-基于-eglopenglsdl-和-openal-的多媒体处理-487">7.4 基于 EGL、OpenGL、SDL 和 OpenAL 的多媒体处理&amp;hellip;. 487&lt;/h2>
&lt;p>7.4.1 使用 EGL 与 OpenGL 处理图形&amp;hellip;. 488
7.4.2 使用 SDL 处理图形&amp;hellip;. 494
7.4.3 使用 OpenAL 处理音频&amp;hellip;. 497&lt;/p>
&lt;h2 id="75-调试-webassembly-应用-500">7.5 调试 WebAssembly 应用&amp;hellip;. 500&lt;/h2>
&lt;p>7.5.1 编译器的调试信息&amp;hellip;. 500
7.5.2 使用调试模式&amp;hellip;. 502
7.5.3 手动跟踪&amp;hellip;. 503
7.5.4 其他常用编译器调试选项&amp;hellip;. 505&lt;/p>
&lt;h1 id="第-8-章-webassembly-综合实践发展与未来-506">第 8 章 WebAssembly 综合实践、发展与未来&amp;hellip;. 506&lt;/h1>
&lt;h2 id="81-dip-综合实践应用-506">8.1 DIP 综合实践应用&amp;hellip;. 506&lt;/h2>
&lt;p>8.1.1 应用描述&amp;hellip;. 506
8.1.2 滤镜与卷积&amp;hellip;. 507
8.1.3 基本组件类型与架构&amp;hellip;. 511
8.1.4 编写基本页面骨架（HTML 与 CSS）&amp;hellip;. 512
8.1.5 编写核心卷积函数（C++）&amp;hellip;. 513
8.1.6 编写主渲染循环与“胶水”代码（JavaScript）&amp;hellip;. 515
8.1.7 使用 Emscripten 编译并运行应用&amp;hellip;. 520
8.1.8 性能对比&amp;hellip;. 521&lt;/p>
&lt;h2 id="82-webassembly-常用工具集-522">8.2 WebAssembly 常用工具集&amp;hellip;. 522&lt;/h2>
&lt;p>8.2.1 Cheerp.. 522
8.2.2 Webpack 4.. 524
8.2.3 Go 和 Rust 的 WebAssembly 实践&amp;hellip;. 526
8.2.4 Binaryen.. 529
8.2.5 WasmFiddle. 530
8.2.6 Wabt. 531
8.2.7 AssemblyScript. 531&lt;/p>
&lt;h2 id="83-webassembly-未来草案-531">8.3 WebAssembly 未来草案&amp;hellip;. 531&lt;/h2>
&lt;p>8.3.1 GC（垃圾回收）&amp;hellip;. 532
8.3.2 Multi-Thread（多线程）与原子操作&amp;hellip;. 532
8.3.3 异常处理&amp;hellip;. 532
8.3.4 多返回值扩展&amp;hellip;. 532
8.3.5 ES 模块&amp;hellip;. 532
8.3.6 尾递归&amp;hellip;. 533
8.3.7 BigInts 的双向支持&amp;hellip;. 533
8.3.8 自定义注释语法&amp;hellip;. 533&lt;/p></description></item><item><title>2018-于航-深入浅出 WebAssembly</title><link>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2018-%E4%BA%8E%E8%88%AA-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-webassembly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cs-books/frontend/web/2018-%E4%BA%8E%E8%88%AA-%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-webassembly/</guid><description>&lt;blockquote>
&lt;p>参考地址：https://ngte.cowtransfer.com/s/0973a01be80b40&lt;/p>
&lt;/blockquote>
&lt;h1 id="第-1-章-漫谈-webassembly-发展史-1">第 1 章 漫谈 WebAssembly 发展史&amp;hellip;. 1&lt;/h1>
&lt;h2 id="11-javascript-的发展和弊端-1">1.1 JavaScript 的发展和弊端&amp;hellip;. 1&lt;/h2>
&lt;p>1.1.1 快速发展与基准测试&amp;hellip;. 1
1.1.2 Web 新时代与不断挑战&amp;hellip;. 8
1.1.3 无法跨越的“阻碍”&amp;hellip;. 11
1.1.4 Chrome V8 引擎链路&amp;hellip;. 17&lt;/p>
&lt;h2 id="12-曾经尝试asmjs-与-pnacl-28">1.2 曾经尝试——ASM.js 与 PNaCl. 28&lt;/h2>
&lt;p>1.2.1 失落的 ASM.js. 28
1.2.2 古老的 NaCl 与 PNaCl. 42&lt;/p>
&lt;h2 id="13-新的可能webassembly-57">1.3 新的可能——WebAssembly.. 57&lt;/h2>
&lt;p>1.3.1 改变与颠覆&amp;hellip;. 57
1.3.2 一路向前，WCG 与 WWG.. 85&lt;/p>
&lt;h1 id="第-2-章-webassembly-核心原理基于-mvp-标准-90">第 2 章 WebAssembly 核心原理（基于 MVP 标准）&amp;hellip;. 90&lt;/h1>
&lt;h2 id="21-应用与标准-web-接口-90">2.1 应用与标准 Web 接口&amp;hellip;. 90&lt;/h2>
&lt;p>2.1.1 编译与初始化&amp;hellip;. 90
2.1.2 验证模块&amp;hellip;. 106
2.1.3 遇到错误&amp;hellip;. 106
2.1.4 内存分配&amp;hellip;. 108
2.1.5 表&amp;hellip;. 112&lt;/p>
&lt;h2 id="22-深入设计模型堆栈机-118">2.2 深入设计模型——堆栈机&amp;hellip;. 118&lt;/h2>
&lt;p>2.2.1 堆栈式虚拟机&amp;hellip;. 119
2.2.2 逆波兰表达式&amp;hellip;. 125
2.2.3 Shunting-yard 算法&amp;hellip;. 126
2.2.4 标签与跳转&amp;hellip;. 130
2.2.5 条件语句&amp;hellip;. 135
2.2.6 子程序调用&amp;hellip;. 137
2.2.7 变量&amp;hellip;. 138
2.2.8 栈帧&amp;hellip;. 139
2.2.9 堆&amp;hellip;. 140&lt;/p>
&lt;h2 id="23-类型检查-141">2.3 类型检查&amp;hellip;. 141&lt;/h2>
&lt;p>2.3.1 数据指令类型&amp;hellip;. 142
2.3.2 基本流程控制&amp;hellip;. 144
2.3.3 基于表达式的控制流&amp;hellip;. 149
2.3.4 类型堆栈的一致性&amp;hellip;. 151
2.3.5 不可达代码&amp;hellip;. 155&lt;/p>
&lt;h2 id="24-二进制编码-156">2.4 二进制编码&amp;hellip;. 156&lt;/h2>
&lt;p>2.4.1 字节序——大端模式与小端模式&amp;hellip;. 157
2.4.2 基于 LEB-128 的整数编码&amp;hellip;. 161
2.4.3 基于 IEEE-754—2008 的浮点数编码&amp;hellip;. 163
2.4.4 基于 UTF-8 的字符串编码&amp;hellip;. 167
2.4.5 模块数据类型&amp;hellip;. 168
2.4.6 虚拟指令与编码&amp;hellip;. 169
2.4.7 类型构造符&amp;hellip;. 174&lt;/p>
&lt;h2 id="25-模块-175">2.5 模块&amp;hellip;. 175&lt;/h2>
&lt;p>2.5.1 段&amp;hellip;. 175
2.5.2 索引空间&amp;hellip;. 185
2.5.3 二进制原型结构&amp;hellip;. 186&lt;/p>
&lt;h2 id="26-内存结构-196">2.6 内存结构&amp;hellip;. 196&lt;/h2>
&lt;p>2.6.1 操作运算符&amp;hellip;. 197
2.6.2 寻址&amp;hellip;. 197
2.6.3 对齐&amp;hellip;. 198
2.6.4 溢出与调整&amp;hellip;. 203&lt;/p>
&lt;h1 id="第-3-章-动态链接与-simd基于-mvp-标准-204">第 3 章 动态链接与 SIMD（基于 MVP 标准）&amp;hellip;. 204&lt;/h1>
&lt;h2 id="31-动态链接dynamic-linking-204">3.1 动态链接（Dynamic Linking）&amp;hellip;. 204&lt;/h2>
&lt;p>3.1.1 ELF.. 206
3.1.2 符号重定向（Symbol Relocation）&amp;hellip;. 212
3.1.3 GOT（Global Offset Table，全局偏移表）&amp;hellip;. 225
3.1.4 PLT（Procedure Lookup Table，过程查询表）&amp;hellip;. 229
3.1.5 基于表的 Wasm 模块动态链接&amp;hellip;. 233&lt;/p>
&lt;h2 id="32-单指令多数据流simd-237">3.2 单指令多数据流（SIMD）&amp;hellip;. 237&lt;/h2>
&lt;p>3.2.1 SIMD 应用&amp;hellip;. 239
3.2.2 并行与并发&amp;hellip;. 243
3.2.3 费林分类法&amp;hellip;. 244
3.2.4 SIMD.js &amp;amp; TC39.. 246
3.2.5 WebAssembly 上的 SIMD 扩展&amp;hellip;. 248&lt;/p>
&lt;h1 id="第-4-章-深入-llvm-与-wat-250">第 4 章 深入 LLVM 与 WAT.. 250&lt;/h1>
&lt;h2 id="41-llvm底层虚拟机-250">4.1 LLVM——底层虚拟机&amp;hellip;. 250&lt;/h2>
&lt;p>4.1.1 传统的编译器架构&amp;hellip;. 251
4.1.2 LLVM 中间表示层&amp;hellip;. 252
4.1.3 基于 LLVM 的编译器架构&amp;hellip;. 254
4.1.4 LLVM 优化策略&amp;hellip;. 256
4.1.5 LLVM 命令行工具&amp;hellip;. 261
4.1.6 WebAssembly 与 LLVM&amp;hellip; 268&lt;/p>
&lt;h2 id="42-基于-llvm-定义新的编程语言-272">4.2 基于 LLVM 定义新的编程语言&amp;hellip;. 272&lt;/h2>
&lt;p>4.2.1 图灵完备与 DSL.. 276
4.2.2 简易词法分析器&amp;hellip;. 280
4.2.3 RDP 与 OPP 算法&amp;hellip;. 287
4.2.4 AST（抽象语法树）&amp;hellip;. 295
4.2.5 简易语法分析器&amp;hellip;. 296
4.2.6 生成 LLVM-IR 代码&amp;hellip;. 303
4.2.7 链接优化器&amp;hellip;. 307
4.2.8 编译到目标代码&amp;hellip;. 308
4.2.9 整合 IO 交互层&amp;hellip;. 312&lt;/p>
&lt;h2 id="43-wat-315">4.3 WAT.. 315&lt;/h2>
&lt;p>4.3.1 S-表达式&amp;hellip;. 317
4.3.2 WAT/Wasm 与 Binary-AST.. 318
4.3.3 其他与设计原则&amp;hellip;. 320&lt;/p>
&lt;h1 id="第-5-章-emscripten-基础应用-322">第 5 章 Emscripten 基础应用&amp;hellip;. 322&lt;/h1>
&lt;h2 id="51-利器emscripten-工具链-322">5.1 利器——Emscripten 工具链&amp;hellip;. 322&lt;/h2>
&lt;p>5.1.1 Emscripten 发展历史&amp;hellip;. 322
5.1.2 Emscripten 组成结构&amp;hellip;. 324
5.1.3 Emscripten 下载、安装与配置&amp;hellip;. 326
5.1.4 运行测试套件&amp;hellip;. 330
5.1.5 编译到 ASM.js. 331&lt;/p>
&lt;h2 id="52-连接-cc与-webassembly-333">5.2 连接 C/C++与 WebAssembly.. 333&lt;/h2>
&lt;p>5.2.1 构建类型&amp;hellip;. 334
5.2.2 Emscripten 运行时环境&amp;hellip;. 342
5.2.3 在 JavaScript 代码中调用 C/C++函数&amp;hellip;. 351
5.2.4 在 C/C++代码中调用 JavaScript 函数&amp;hellip;. 363&lt;/p>
&lt;h1 id="第-6-章-基于-emscripten-的语言关系绑定-382">第 6 章 基于 Emscripten 的语言关系绑定&amp;hellip;. 382&lt;/h1>
&lt;h2 id="61-基于-embind-实现关系绑定-384">6.1 基于 Embind 实现关系绑定&amp;hellip;. 384&lt;/h2>
&lt;p>6.1.1 简单类&amp;hellip;. 389
6.1.2 数组与对象类型&amp;hellip;. 391
6.1.3 高级类元素&amp;hellip;. 393
6.1.4 重载函数&amp;hellip;. 407
6.1.5 枚举类型&amp;hellip;. 408
6.1.6 基本类型&amp;hellip;. 409
6.1.7 容器类型&amp;hellip;. 411
6.1.8 转译 JavaScript 代码&amp;hellip;. 413
6.1.9 内存视图&amp;hellip;. 416&lt;/p>
&lt;h2 id="62-基于-webidl-实现关系绑定-417">6.2 基于 WebIDL 实现关系绑定&amp;hellip;. 417&lt;/h2>
&lt;p>6.2.1 指针、引用和值类型&amp;hellip;. 420
6.2.2 类成员变量&amp;hellip;. 422
6.2.3 常量“const”关键字&amp;hellip;. 423
6.2.4 命名空间&amp;hellip;.. 424
6.2.5 运算符重载&amp;hellip;. 425
6.2.6 枚举类型&amp;hellip;. 426
6.2.7 接口类&amp;hellip;. 429
6.2.8 原始指针、空指针与 void 指针&amp;hellip;. 431
6.2.9 默认类型转换&amp;hellip;. 434&lt;/p>
&lt;h1 id="第-7-章-探索-emscripten-高级特性-437">第 7 章 探索 Emscripten 高级特性&amp;hellip;. 437&lt;/h1>
&lt;h2 id="71-加入优化流程-437">7.1 加入优化流程&amp;hellip;. 437&lt;/h2>
&lt;p>7.1.1 使用编译器代码优化策略&amp;hellip;. 442
7.1.2 使用 GCC 压缩代码&amp;hellip;. 444
7.1.3 使用 IndexedDB 缓存模块对象&amp;hellip;. 446
7.1.4 其他优化参数&amp;hellip;. 453&lt;/p>
&lt;h2 id="72-使用标准库与文件系统-454">7.2 使用标准库与文件系统&amp;hellip;. 454&lt;/h2>
&lt;p>7.2.1 使用基于 musl 和 libc++的标准库&amp;hellip;. 455
7.2.2 虚拟文件系统结构&amp;hellip;. 458
7.2.3 打包初始化文件&amp;hellip;. 460
7.2.4 基本文件系统操作&amp;hellip;. 461
7.2.5 懒加载&amp;hellip;. 470
7.2.6 Fetch API. 474&lt;/p>
&lt;h2 id="73-处理浏览器事件-479">7.3 处理浏览器事件&amp;hellip;. 479&lt;/h2>
&lt;p>7.3.1 事件注册函数&amp;hellip;. 480
7.3.2 事件回调函数&amp;hellip;. 481
7.3.3 通用类型与返回值类型&amp;hellip;. 482
7.3.4 常用事件&amp;hellip;. 484&lt;/p>
&lt;h2 id="74-基于-eglopenglsdl-和-openal-的多媒体处理-487">7.4 基于 EGL、OpenGL、SDL 和 OpenAL 的多媒体处理&amp;hellip;. 487&lt;/h2>
&lt;p>7.4.1 使用 EGL 与 OpenGL 处理图形&amp;hellip;. 488
7.4.2 使用 SDL 处理图形&amp;hellip;. 494
7.4.3 使用 OpenAL 处理音频&amp;hellip;. 497&lt;/p>
&lt;h2 id="75-调试-webassembly-应用-500">7.5 调试 WebAssembly 应用&amp;hellip;. 500&lt;/h2>
&lt;p>7.5.1 编译器的调试信息&amp;hellip;. 500
7.5.2 使用调试模式&amp;hellip;. 502
7.5.3 手动跟踪&amp;hellip;. 503
7.5.4 其他常用编译器调试选项&amp;hellip;. 505&lt;/p>
&lt;h1 id="第-8-章-webassembly-综合实践发展与未来-506">第 8 章 WebAssembly 综合实践、发展与未来&amp;hellip;. 506&lt;/h1>
&lt;h2 id="81-dip-综合实践应用-506">8.1 DIP 综合实践应用&amp;hellip;. 506&lt;/h2>
&lt;p>8.1.1 应用描述&amp;hellip;. 506
8.1.2 滤镜与卷积&amp;hellip;. 507
8.1.3 基本组件类型与架构&amp;hellip;. 511
8.1.4 编写基本页面骨架（HTML 与 CSS）&amp;hellip;. 512
8.1.5 编写核心卷积函数（C++）&amp;hellip;. 513
8.1.6 编写主渲染循环与“胶水”代码（JavaScript）&amp;hellip;. 515
8.1.7 使用 Emscripten 编译并运行应用&amp;hellip;. 520
8.1.8 性能对比&amp;hellip;. 521&lt;/p>
&lt;h2 id="82-webassembly-常用工具集-522">8.2 WebAssembly 常用工具集&amp;hellip;. 522&lt;/h2>
&lt;p>8.2.1 Cheerp.. 522
8.2.2 Webpack 4.. 524
8.2.3 Go 和 Rust 的 WebAssembly 实践&amp;hellip;. 526
8.2.4 Binaryen.. 529
8.2.5 WasmFiddle. 530
8.2.6 Wabt. 531
8.2.7 AssemblyScript. 531&lt;/p>
&lt;h2 id="83-webassembly-未来草案-531">8.3 WebAssembly 未来草案&amp;hellip;. 531&lt;/h2>
&lt;p>8.3.1 GC（垃圾回收）&amp;hellip;. 532
8.3.2 Multi-Thread（多线程）与原子操作&amp;hellip;. 532
8.3.3 异常处理&amp;hellip;. 532
8.3.4 多返回值扩展&amp;hellip;. 532
8.3.5 ES 模块&amp;hellip;. 532
8.3.6 尾递归&amp;hellip;. 533
8.3.7 BigInts 的双向支持&amp;hellip;. 533
8.3.8 自定义注释语法&amp;hellip;. 533&lt;/p></description></item></channel></rss>