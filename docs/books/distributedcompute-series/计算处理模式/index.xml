<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算处理模式 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
      <atom:link href="https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/index.xml" rel="self" type="application/rss+xml" />
    <description>计算处理模式</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>计算处理模式</title>
      <link>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/</link>
    </image>
    
    <item>
      <title>Lambda 架构</title>
      <link>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/lambda-%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/lambda-%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;h1 id=&#34;lambda-架构&#34;&gt;Lambda 架构&lt;/h1&gt;
&lt;p&gt;如果批处理用于重新处理历史数据，并且流处理用于处理最近的更新，那么如何将这两者结合起来？Lambda 架构是这方面的一个建议，引起了很多关注。Lambda 架构的核心思想是通过将不可变事件附加到不断增长的数据集来记录传入数据，这类似于事件溯源，为了从这些事件中衍生出读取优化的视图，Lambda 架构建议并行运行两个不同的系统：批处理系统（如 Hadoop MapReduce）和独立的流处理系统（如 Storm）。&lt;/p&gt;
&lt;p&gt;在 Lambda 方法中，流处理器消耗事件并快速生成对视图的近似更新；批处理器稍后将使用同一组事件并生成衍生视图的更正版本。这个设计背后的原因是批处理更简单，因此不易出错，而流处理器被认为是不太可靠和难以容错的，流处理可以使用快速近似算法，而批处理使用较慢的精确算法。&lt;/p&gt;
&lt;p&gt;Lambda 架构是一种有影响力的想法，它将数据系统的设计变得更好，尤其是通过推广这样的原则：在不可变事件流上建立衍生视图，并在需要时重新处理事件。但是我也认为它有一些实际问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在批处理和流处理框架中维护相同的逻辑是很显著的额外工作。虽然像 Summingbird 这样的库提供了一种可以在批处理和流处理的上下文中运行的计算抽象。调试，调整和维护两个不同系统的操作复杂性依然存在。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于流管道和批处理管道产生独立的输出，因此需要合并它们以响应用户请求。如果计算是基于滚动窗口的简单聚合，则合并相当容易，但如果视图基于更复杂的操作（例如连接和会话化）而导出，或者输出不是时间序列，则会变得非常困难。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尽管有能力重新处理整个历史数据集是很好的，但在大型数据集上这样做经常会开销巨大。因此，批处理流水线通常需要设置为处理增量批处理（例如，在每小时结束时处理一小时的数据），而不是重新处理所有内容。这引发了“关于时间的推理”中讨论的问题，例如处理分段器和处理跨批次边界的窗口。增加批量计算会增加复杂性，使其更类似于流式传输层，这与保持批处理层尽可能简单的目标背道而驰。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;统一批处理和流处理&#34;&gt;统一批处理和流处理&lt;/h2&gt;
&lt;p&gt;最近的工作使得 Lambda 架构的优点在没有其缺点的情况下得以实现，允许批处理计算（重新处理历史数据）和流计算（处理事件到达时）在同一个系统中实现。在一个系统中统一批处理和流处理需要以下功能，这些功能越来越广泛：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;通过处理最近事件流的相同处理引擎来重放历史事件的能力。例如，基于日志的消息代理可以重放消息，某些流处理器可以从 HDFS 等分布式文件系统读取输入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于流处理器来说，恰好一次语义，即确保输出与未发生故障的输出相同，即使事实上发生故障。与批处理一样，这需要丢弃任何失败任务的部分输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;按事件时间进行窗口化的工具，而不是按处理时间进行窗口化，因为处理历史事件时，处理时间毫无意义。例如，Apache Beam 提供了用于表达这种计算的 API，然后可以使用 Apache Flink 或 Google Cloud Dataflow 运行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>批处理与流处理</title>
      <link>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/%E6%89%B9%E5%A4%84%E7%90%86%E4%B8%8E%E6%B5%81%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/%E6%89%B9%E5%A4%84%E7%90%86%E4%B8%8E%E6%B5%81%E5%A4%84%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;批处理与流处理&#34;&gt;批处理与流处理&lt;/h1&gt;
&lt;p&gt;数据集成的目标是，确保数据最终能在所有正确的地方表现出正确的形式。这样做需要消费输入，转换，连接，过滤，聚合，训练模型，评估，以及最终写出适当的输出。批处理和流处理是实现这一目标的工具。批处理和流处理的输出是衍生数据集，例如搜索索引，物化视图，向用户显示的建议，聚合指标等；流处理允许将输入中的变化以低延迟反映在衍生视图中，而批处理允许重新处理大量累积的历史数据以便将新视图导出到现有数据集上。批处理和流处理有许多共同的原则，主要的根本区别在于流处理器在无限数据集上运行，而批处理输入是已知的有限大小。处理引擎的实现方式也有很多细节上的差异，但是这些区别已经开始模糊。&lt;/p&gt;
&lt;p&gt;Spark 在批处理引擎上执行流处理，将流分解为微批次（Micro Batches），而 Apache Flink 则在流处理引擎上执行批处理。原则上，一种类型的处理可以用另一种类型来模拟，但是性能特征会有所不同：例如，在跳跃或滑动窗口上，微批次可能表现不佳。批处理有着很强的函数式风格（即使其代码不是用函数式语言编写的）：它鼓励确定性的纯函数，其输出仅依赖于输入，除了显式输出外没有副作用，将输入视作不可变的，且输出是仅追加的。流处理与之类似，但它扩展了算子以允许受管理的，容错的状态。具有良好定义的输入和输出的确定性函数的原理不仅有利于容错，也简化了有关组织中数据流的推理。无论衍生数据是搜索索引，统计模型还是缓存，采用这种观点思考都是很有帮助的：将其视为从一个东西衍生出另一个的数据管道，将一个系统的状态变更推送至函数式应用代码中，并将其效果应用至衍生系统中。&lt;/p&gt;
&lt;p&gt;原则上，衍生数据系统可以同步地维护，就像关系数据库在与被索引表写入操作相同的事务中同步更新辅助索引一样。然而，异步是基于事件日志的系统稳健的原因：它允许系统的一部分故障被抑制在本地，而如果任何一个参与者失败，分布式事务将中止，因此它们倾向于通过将故障传播到系统的其余部分来放大故障。我们在“分区与次级索引”中看到，二级索引经常跨越分区边界。具有二级索引的分区系统需要将写入发送到多个分区（如果索引按关键词分区的话）或将读取发送到所有分区。如果索引是异步维护的，这种交叉分区通信也是最可靠和最可扩展的。&lt;/p&gt;
&lt;h2 id=&#34;批处理与流处理-1&#34;&gt;批处理与流处理&lt;/h2&gt;
&lt;p&gt;流处理和批处理之间的差异对于应用程序来说也是非常重要的。为批处理而构建的应用程序，通过定义处理数据，具有延迟性。在具有多个步骤的数据管道中，这些延迟会累积。此外，新数据的到达与该数据的处理之间的延迟将取决于直到下一批处理窗口的时间&amp;ndash;从在某些情况下完全没有时间到批处理窗口之间的全部时间不等，这些数据是在批处理开始后到达的。因此，批处理应用程序(及其用户)不能依赖一致的响应时间，需要相应地调整以适应这种不一致性和更大的延迟。&lt;/p&gt;
&lt;p&gt;Flink、Beam 等都支持流式处理优先，将批处理视为流式处理的特殊情况的理念，这个理念也经常被认为是构建跨实时和离线数据应用程序的强大方式，可以大大降低数据基础设施的复杂性。“批处理只是流式处理的一个特例”并不意味着所有的流式处理器都能用于批处理——流式处理器的出现并没有让批处理器变得过时：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;纯流式处理系统在批处理工作负载时其实是很慢的。没有人会认为使用流式处理器来分析海量数据是个好主意。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;像 Apache Beam 这样的统一 API 通常会根据数据是持续的（无界）还是固定的（有界）将工作负载委托给不同的运行时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Flink 提供了一个流式 API，可以处理有界和无界的场景，同时仍然提供了单独的 DataSet API 和运行时用于批处理，因为速度会更快。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>事务处理</title>
      <link>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/distributedcompute-series/%E8%AE%A1%E7%AE%97%E5%A4%84%E7%90%86%E6%A8%A1%E5%BC%8F/%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</guid>
      <description>&lt;h1 id=&#34;事务处理&#34;&gt;事务处理&lt;/h1&gt;
&lt;p&gt;公司将各种应用程序用于日常业务活动，例如企业资源规划（ERP）系统，客户关系管理（CRM）软件和基于 Web 的应用程序。这些系统通常设计有单独的层，用于数据处理（应用程序本身）和数据存储（事务数据库系统）：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s1.ax1x.com/2020/10/11/0cJZpq.png&#34; alt=&#34;传统数据业务&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;应用程序通常连接到外部服务或直接面向用户，并持续处理传入的事件，如网站上的订单，电子邮件或点击。处理事件时，应用程序将会读取远程数据库的状态，或者通过运行事务来更新它。通常，一个数据库系统可以服务于多个应用程序，它们有时会访问相同的数据库或表。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
