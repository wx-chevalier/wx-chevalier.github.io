<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>组件化 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/</link>
      <atom:link href="https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/index.xml" rel="self" type="application/rss+xml" />
    <description>组件化</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>组件化</title>
      <link>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/</link>
    </image>
    
    <item>
      <title>依赖注入</title>
      <link>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</guid>
      <description>&lt;h1 id=&#34;web-组件的依赖注入&#34;&gt;Web 组件的依赖注入&lt;/h1&gt;
&lt;p&gt;依赖注入的概念最早由 Google Angular 引入到 Web 前端编码中，而随着组件化概念的流行，特别是类组件的方式逐步成为主流，我们也可以在前端编码中实践依赖注入或者控制反转的模式。&lt;/p&gt;
&lt;p&gt;控制反转并非多么复杂的模式，我们可以将那些通过 Props 传入的 Every function passed in via props is an “injection of a dependency”, and every component that declares a prop for handling events or user interaction is observing “inversion of control”. The borrowed terms have now been rendered obsolete through ubiquity, save perhaps for use as shibboleth for JavaScripters who have lived through the reign of Angular.&lt;/p&gt;
&lt;p&gt;# Constructor Injection&lt;/p&gt;
&lt;p&gt;As the name implies, this component would receive its dependencies via the constructor. Here’s what such a component would look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Knight&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`🐴 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And you would use it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Knight&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sword&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Of course, you should typically use the prop directly instead of duplicating it.&lt;/p&gt;
&lt;h1 id=&#34;setter-injection&#34;&gt;Setter Injection&lt;/h1&gt;
&lt;p&gt;Instead of setting dependencies in the constructor, a component would have methods available that can be called after initialization, with dependencies passed in as the argument.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Knight&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;setWeapon&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`🐴 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;componentDidMount&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;knight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setWeapon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sword&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Knight&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ref&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;knight&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Again, you almost certainly would not want do this instead of passing dependencies directly via props.&lt;/p&gt;
&lt;h1 id=&#34;interface-injection&#34;&gt;Interface Injection&lt;/h1&gt;
&lt;p&gt;The props of a component are its interface to its clients, thus “required props” would come the closest to an analogy for interface injection with React:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Knight&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;propTypes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PropTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;any&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isRequired&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`🐴 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and you would use it simply as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Knight&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;weapon&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sword&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I hope these examples illustrate how commonplace Dependency Injection has become, and gave you some talking points should the topic ever comes up.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>组件规范</title>
      <link>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/%E7%BB%84%E4%BB%B6%E8%A7%84%E8%8C%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/%E7%BB%84%E4%BB%B6%E8%A7%84%E8%8C%83/</guid>
      <description>&lt;h1 id=&#34;usage&#34;&gt;Usage&lt;/h1&gt;
&lt;h1 id=&#34;lifecycle&#34;&gt;LifeCycle&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;created / componentWillMount&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;mounted / componentDidMount&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;shouldComponentUpdate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;updated / componentDidUpdate&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;unmounted / componentWillUnMount&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;beforeCreate — called after the instance has been initialized but before watchers/events have been setup&lt;/p&gt;
&lt;p&gt;created — called after the instance has been initialized, the computed props, data watchers and events have been setup but the component has not been mounted to the el dom element&lt;/p&gt;
&lt;p&gt;beforeMount — called right before mounting process begins&lt;/p&gt;
&lt;p&gt;mounted — called after the instance has been mounted and the el in the DOM is replaced with your component.&lt;/p&gt;
&lt;p&gt;beforeUpdate — called after the data changes but before the virtual DOM has been updated&lt;/p&gt;
&lt;p&gt;updated — called after the DOM was updated&lt;/p&gt;
&lt;p&gt;beforeDestroy — called before an instance is about to be destroyed but full functionality of the instance is still available&lt;/p&gt;
&lt;p&gt;destroy — called after the instance has been destroyed&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>组件驱动开发</title>
      <link>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/%E7%BB%84%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/web-engineering-series/%E7%BB%84%E4%BB%B6%E5%8C%96/%E7%BB%84%E4%BB%B6%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/</guid>
      <description>&lt;h1 id=&#34;组件驱动开发&#34;&gt;组件驱动开发&lt;/h1&gt;
&lt;p&gt;Component Driven Development is a way of building user interfaces (UIs) by starting with their smallest parts: the components. Emphasis on components is a theme in UI development that has been gaining momentum since the introduction of modern UI libraries like React.&lt;/p&gt;
&lt;p&gt;CDD denotes a set of tools (such as React Storybook) and a way of developing applications to really take advantage of this change in emphasis. Some advantages of CDD include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The ability to parallelize work as different people work on different components.&lt;/li&gt;
&lt;li&gt;The ability to use a “Visual TDD” approach to allow building UIs in a more rigorous fashion.&lt;/li&gt;
&lt;li&gt;Increased communication opportunities between designers and other product people and the developers building the components.&lt;/li&gt;
&lt;li&gt;Reuse of components between applications and features.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll talk more about why I think CDD is great in future posts, but hopefully some of these advantages will become clear as we develop our todo list app.&lt;/p&gt;
&lt;h1 id=&#34;组件代码风格&#34;&gt;组件代码风格&lt;/h1&gt;
&lt;p&gt;本小节我们关注如何写出漂亮的组件，你或许可以认为萝卜青菜各有所爱，但是代码本身是应当保证其可读性，特别是在一个团队中，你的代码是注定要被其他人阅读的。计算机是不会在意这些的，不管你朝它们扔过去什么，它们都会老老实实的解释，但是你的队友们可不会这样，他们会把丑陋的代码扔回到你的脸上。一般来说，漂亮的组件应该具备以下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即使没有任何注释的情况下也易于理解&lt;/li&gt;
&lt;li&gt;比乱麻般的代码有更好的性能表现&lt;/li&gt;
&lt;li&gt;更易于进行 Bug 追溯&lt;/li&gt;
&lt;li&gt;简洁明了，一句顶一万句&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在讨论语法的语法细节之前，我们应该遵循如下的基本原则：&lt;/p&gt;
&lt;p&gt;-  每个文件中只包含一个 React 组件。
-  尽可能地使用 JSX 语法。
-  除非不用 JSX 语法创建一个应用，否则不要使用&lt;code&gt;React.createElement&lt;/code&gt;方法。&lt;/p&gt;
&lt;h2 id=&#34;组件规范&#34;&gt;组件规范&lt;/h2&gt;
&lt;p&gt;### Class 与 React.createClass 方法&lt;/p&gt;
&lt;p&gt;尽可能地使用 ES6 中的类的语法，除非有特殊的对于 Mixin 的需求。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Listing&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Listing&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;###  组件命名&lt;/p&gt;
&lt;p&gt;-  扩展名：使用.jsx 作为 React 组件的扩展名。
-  文件名：使用帕斯卡命名法命名文件，譬如 ReservationCard.jsx。
-  引用命名：使用帕斯卡命名法命名组件和 camelCase 命名实例。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reservationCard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./ReservationCard&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ReservationCard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;./ReservationCard&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ReservationItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReservationCard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reservationItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReservationCard&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;### Props&lt;/p&gt;
&lt;p&gt;-  对于 Props 的命名使用 camelCase。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;UserName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;phone_number&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345678&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;userName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;phoneNumber&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;12345678&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;-  将 Props 或者 State 的声明写在类外。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PropTypes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;react&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;propTypes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PropTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isRequired&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PropTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;isRequired&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PropTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;defaultProps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Link&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kr&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;methodsAreOk&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;props&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/a&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;propTypes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;propTypes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nx&#34;&gt;Link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;defaultProps&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;defaultProps&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;### Declaration(声明)&lt;/p&gt;
&lt;p&gt;-  不要使用 displayName 来命名组件，而使用引用。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;displayName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ReservationCard&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// stuff goes here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReservationCard&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;合理使用对象结构与属性扩展&#34;&gt;合理使用对象结构与属性扩展&lt;/h3&gt;
&lt;p&gt;大的组件往往受困于&lt;code&gt;this.props&lt;/code&gt;过长的窘境，典型的如下所示:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;render() {
  return (
  &amp;lt;ProductPrice
  hidePriceFulfillmentDisplay=
 {this.props.hidePriceFulfillmentDisplay}
  primaryOffer={this.props.primaryOffer}
  productType={this.props.productType}
  productPageUrl={this.props.productPageUrl}
  inventory={this.props.inventory}
  submapType={this.props.submapType}
  ppu={this.props.ppu}
  isLoggedIn={this.props.isLoggedIn}
  gridView={this.props.isGridView}
  /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这么多的 Props 估计看着都头疼，如果我们要将这些 Props 继续传入下一层，大概就要变成下面这个样子了:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;render() {
  const {
  hidePriceFulfillmentDisplay,
  primaryOffer,
  productType,
  productPageUrl,
  inventory,
  submapType,
  ppu,
  isLoggedIn,
  gridView
  } = this.props;
  return (
  &amp;lt;ProductPrice
  hidePriceFulfillmentDisplay={hidePriceFulfillmentDisplay}
  primaryOffer={primaryOffer}
  productType={productType}
  productPageUrl={productPageUrl}
  inventory={inventory}
  submapType={submapType}
  ppu={ppu}
  isLoggedIn={isLoggedIn}
  gridView={isGridView}
  /&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;暂时不考虑 unKnown Props，我们可以使用解构赋值来实现这个功能:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;render() {
  const props = this.props;
  return &amp;lt;ProductPrice {...props} /&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;jsx-规范&#34;&gt;JSX 规范&lt;/h2&gt;
&lt;p&gt;### Alignment(对齐)&lt;/p&gt;
&lt;p&gt;-  跟随如下的 JSX 的语法&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;superLongParam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;     &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anotherSuperLongParam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;superLongParam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anotherSuperLongParam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// if props fit in one line then keep it on the same line
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// children get indented normally
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;superLongParam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;anotherSuperLongParam&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Spazz&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/Foo&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;### Quotes&lt;/p&gt;
&lt;p&gt;对于 JSX 的属性用双引号表示，对于其他属性，用单引号表示。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// bad
&amp;lt;Foo bar=&amp;#39;bar&amp;#39; /&amp;gt;

// good
&amp;lt;Foo bar=&amp;#34;bar&amp;#34; /&amp;gt;

// bad
&amp;lt;Foo style={{ left: &amp;#34;20px&amp;#34; }} /&amp;gt;

// good
&amp;lt;Foo style={{ left: &amp;#39;20px&amp;#39; }} /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;### Spacing(空格)&lt;/p&gt;
&lt;p&gt;-  在自闭合的标签中仅使用单空格。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// bad
&amp;lt;Foo/&amp;gt;

// very bad
&amp;lt;Foo                 /&amp;gt;

// bad
&amp;lt;Foo
 /&amp;gt;

// good
&amp;lt;Foo /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;###  多段&lt;/p&gt;
&lt;p&gt;-  当 JSX 包含多行代码时，将它们包含在小括号中。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;/// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyComponent&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;long body&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;           &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyChild&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;         &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/MyComponent&amp;gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyComponent&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;className&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;long body&amp;#34;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyChild&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/MyComponent&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good, when single line
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;div&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/div&amp;gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyComponent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;/MyComponent&amp;gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;方法规范&#34;&gt;方法规范&lt;/h2&gt;
&lt;p&gt;### Naming(方法命名)&lt;/p&gt;
&lt;p&gt;-  对于一个 React 组件的内部方法，不要使用下划线作为前缀。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// bad
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createClass&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;_onClickSubmit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// do stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// other stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// good
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;React&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onClickSubmit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// do stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;err&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// other stuff
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;### Ordering(顺序)&lt;/p&gt;
&lt;p&gt;- React.Component 子类&lt;/p&gt;
&lt;p&gt;1. constructor
2. optional static methods
3. getChildContext
4. componentWillMount
5. componentDidMount
6. componentWillReceiveProps
7. shouldComponentUpdate
8. componentWillUpdate
9. componentDidUpdate
10. componentWillUnmount
11. &lt;em&gt;clickHandlers or eventHandlers&lt;/em&gt; like onClickSubmit() or onChangeDescription()
12. &lt;em&gt;getter methods for render&lt;/em&gt; like getSelectReason() or getFooterContent()
13. &lt;em&gt;Optional render methods&lt;/em&gt; like renderNavigation() or renderProfilePicture()
14. render&lt;/p&gt;
&lt;p&gt;- React.createClass&lt;/p&gt;
&lt;p&gt;1. displayName
2. propTypes
3. contextTypes
4. childContextTypes
5. mixins
6. statics
7. defaultProps
8. getDefaultProps
9. getInitialState
10. getChildContext
11. componentWillMount
12. componentDidMount
13. componentWillReceiveProps
14. shouldComponentUpdate
15. componentWillUpdate
16. componentDidUpdate
17. componentWillUnmount
18. &lt;em&gt;clickHandlers or eventHandlers&lt;/em&gt; like onClickSubmit() or onChangeDescription()
19. &lt;em&gt;getter methods for render&lt;/em&gt; like getSelectReason() or getFooterContent()
20. &lt;em&gt;Optional render methods&lt;/em&gt; like renderNavigation() or renderProfilePicture()
21. render&lt;/p&gt;
&lt;h3 id=&#34;使用箭头函数减少冗余代码&#34;&gt;使用箭头函数减少冗余代码&lt;/h3&gt;
&lt;p&gt;箭头函数是 ES6 引入的新特性之一，其不仅可以帮我们避免手动绑定&lt;code&gt;this&lt;/code&gt;指针，还能让我们不用声明过多的&lt;code&gt;function&lt;/code&gt;关键字，譬如我觉得非常适用 Arrow Function 的地方就是 Redux 的 mapStateToProps 函数:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const mapStateToProps = ({isLoading}) =&amp;gt; {
  return ({
  loading: isLoading,
  });
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;需要注意的是，如果你返回的是 Object，你需要包裹在大括号内:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;const mapStateToProps = ({isLoading}) =&amp;gt; ({
  loading: isLoading
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;# Communication
React 组件一个很大的特性在于其拥有自己完整的生命周期，因此我们可以将 React 组件视作可自运行的小型系统，它拥有自己的内部状态、输入与输出。&lt;/p&gt;
&lt;h2 id=&#34;input&#34;&gt;Input&lt;/h2&gt;
&lt;p&gt;对于 React 组件而言，其输入的来源就是 Props，我们会用如下方式向某个 React 组件传入数据:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;class Title extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;{ this.props.text }&amp;lt;/h1&amp;gt;;
  }
};
Title.propTypes = {
  text: React.PropTypes.string
};
Title.defaultProps = {
  text: &amp;#39;Hello world&amp;#39;
};

// App.jsx
class App extends React.Component {
  render() {
    return &amp;lt;Title text=&amp;#39;Hello React&amp;#39; /&amp;gt;;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;text&lt;/code&gt;是&lt;code&gt;Text&lt;/code&gt;组件自己的输入域，父组件&lt;code&gt;App&lt;/code&gt;在使用子组件&lt;code&gt;Title&lt;/code&gt;时候应该提供&lt;code&gt;text&lt;/code&gt;属性值。除了标准的属性名之外，我们还会用到如下两个设置:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;propTypes:用于定义 Props 的类型，这有助于追踪运行时误设置的 Prop 值。&lt;/li&gt;
&lt;li&gt;defaultProps:定义 Props 的默认值，这个在开发时很有帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Props 中还有一个特殊的属性&lt;code&gt;props.children&lt;/code&gt;可以允许我们使用子组件:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;  render() {
    return (
      &amp;lt;h1&amp;gt;
        { this.props.text }
        { this.props.children }
      &amp;lt;/h1&amp;gt;
    );
  }
};

class App extends React.Component {
  render() {
    return (
      &amp;lt;Title text=&amp;#39;Hello React&amp;#39;&amp;gt;
        &amp;lt;span&amp;gt;community&amp;lt;/span&amp;gt;
      &amp;lt;/Title&amp;gt;
    );
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，如果我们不主动在&lt;code&gt;Title&lt;/code&gt;组件的&lt;code&gt;render&lt;/code&gt;函数中设置&lt;code&gt;{this.props.children}&lt;/code&gt;，那么&lt;code&gt;span&lt;/code&gt;标签是不会被渲染出来的。除了 Props 之外，另一个隐性的组件的输入即是&lt;code&gt;context&lt;/code&gt;，整个 React 组件树会拥有一个&lt;code&gt;context&lt;/code&gt;对象，它可以被树中挂载的每个组件所访问到，关于此部分更多的内容请参考&lt;a href=&#34;https://github.com/krasimir/react-in-patterns/tree/master/patterns/dependency-injection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;依赖注入&lt;/a&gt;这一章节。&lt;/p&gt;
&lt;h2 id=&#34;output&#34;&gt;Output&lt;/h2&gt;
&lt;p&gt;组件最明显的输出就是渲染后的 HTML 文本，即是 React 组件渲染结果的可视化展示。当然，部分包含了逻辑的组件也可能发送或者触发某些 Action 或者 Event。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;  render() {
    return (
      &amp;lt;h1&amp;gt;
        &amp;lt;a onClick={ this.props.logoClicked }&amp;gt;
          &amp;lt;img src=&amp;#39;path/to/logo.png&amp;#39; /&amp;gt;
        &amp;lt;/a&amp;gt;
      &amp;lt;/h1&amp;gt;
    );
  }
};

class App extends React.Component {
  render() {
    return &amp;lt;Title logoClicked={ this.logoClicked } /&amp;gt;;
  }
  logoClicked() {
    console.log(&amp;#39;logo clicked&amp;#39;);
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在&lt;code&gt;App&lt;/code&gt;组件中我们向&lt;code&gt;Title&lt;/code&gt;组件传入了可以从&lt;code&gt;Title&lt;/code&gt;调用的回调函数，在&lt;code&gt;logoClicked&lt;/code&gt;函数中我们可以设置或者修改需要传回父组件的数据。需要注意的是，React 并没有提供可以访问子组件状态的 API，换言之，我们不能使用&lt;code&gt;this.props.children[0].state&lt;/code&gt;或者类似的方法。正确的从子组件中获取数据的方法应该是在 Props 中传入回调函数，而这种隔离也有助于我们定义更加清晰的 API 并且促进了所谓单向数据流。&lt;/p&gt;
&lt;h1 id=&#34;composition&#34;&gt;Composition&lt;/h1&gt;
&lt;p&gt;React 最大的特性之一即是其强大的组件的可组合性，实际上除了 React 之外，笔者并不知道还有哪个框架能够提供如此简单易用的方式来创建与组合各式各样的组件。本章我们会一起讨论些常用的组合技巧，我们以一个简单的例子来进行讲解。假设在我们的应用中有一个页首栏目，并且其中放置了导航栏。我们创建了三个独立的 React 组件:&lt;code&gt;App&lt;/code&gt;,&lt;code&gt;Header&lt;/code&gt;以及&lt;code&gt;Navigation&lt;/code&gt;。将这三个组件依次嵌套组合，可以得到以下的代码:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-&lt;App&gt;&#34; data-lang=&#34;&lt;App&gt;&#34;&gt;  &amp;lt;Header&amp;gt;
    &amp;lt;Navigation&amp;gt; ... &amp;lt;/Navigation&amp;gt;
  &amp;lt;/Header&amp;gt;
&amp;lt;/App&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在 JSX 中组合这些组件的方式就是在需要的时候引用它们:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;import Header from &amp;#39;./Header.jsx&amp;#39;;

export default class App extends React.Component {
  render() {
    return &amp;lt;Header /&amp;gt;;
  }
}

// Header.jsx
import Navigation from &amp;#39;./Navigation.jsx&amp;#39;;

export default class Header extends React.Component {
  render() {
    return &amp;lt;header&amp;gt;&amp;lt;Navigation /&amp;gt;&amp;lt;/header&amp;gt;;
  }
}

// Navigation.jsx
export default class Navigation extends React.Component {
  render() {
    return (&amp;lt;nav&amp;gt; ... &amp;lt;/nav&amp;gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;不过这种方式却可能存在以下的问题:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们将&lt;code&gt;App&lt;/code&gt;当做各个组件间的连接线，也是整个应用的入口，因此在&lt;code&gt;App&lt;/code&gt;中进行各个独立组件的组合是个不错的方法。不过&lt;code&gt;Header&lt;/code&gt;元素中可能包含像图标、搜索栏或者 Slogan 这样的元素。而如果我们需要另一个不包含&lt;code&gt;Navigation&lt;/code&gt;功能的&lt;code&gt;Header&lt;/code&gt;组件时，像上面这种直接将&lt;code&gt;Navigation&lt;/code&gt;组件硬编码进入&lt;code&gt;Header&lt;/code&gt;的方式就会难于修改。&lt;/li&gt;
&lt;li&gt;这种硬编码的方式会难以测试，如果我们在&lt;code&gt;Header&lt;/code&gt;中加入一些自定义的业务逻辑代码，那么在测试的时候当我们要创建&lt;code&gt;Header&lt;/code&gt;实例时，因为其依赖于其他组件而导致了这种依赖层次过深(这里不包含&lt;a href=&#34;https://facebook.github.io/react/docs/test-utils.html#shallow-rendering&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shallow Rendering&lt;/a&gt;这种仅渲染父组件而不渲染嵌套的子组件方式)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;使用-react-的childrenapi&#34;&gt;使用 React 的&lt;code&gt;children&lt;/code&gt;API&lt;/h2&gt;
&lt;p&gt;React 为我们提供了&lt;code&gt;this.props.children&lt;/code&gt;来允许父组件访问其子组件，这种方式有助于保证我们的&lt;code&gt;Header&lt;/code&gt;独立并且不需要与其他组件解耦合。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;export default class App extends React.Component {
  render() {
    return (
      &amp;lt;Header&amp;gt;
        &amp;lt;Navigation /&amp;gt;
      &amp;lt;/Header&amp;gt;
    );
  }
}

// Header.jsx
export default class Header extends React.Component {
  render() {
    return &amp;lt;header&amp;gt;{ this.props.children }&amp;lt;/header&amp;gt;;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式也有助于测试，我们可以选择输入空白的&lt;code&gt;div&lt;/code&gt;元素，从而将要测试的目标元素隔离开来而专注于我们需要测试的部分。&lt;/p&gt;
&lt;h2 id=&#34;将子组件以属性方式传入&#34;&gt;将子组件以属性方式传入&lt;/h2&gt;
&lt;p&gt;React 组件可以接受 Props 作为输入，我们也可以选择将需要封装的组件以 Props 方式传入:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;class App extends React.Component {
  render() {
    var title = &amp;lt;h1&amp;gt;Hello there!&amp;lt;/h1&amp;gt;;

    return (
      &amp;lt;Header title={ title }&amp;gt;
        &amp;lt;Navigation /&amp;gt;
      &amp;lt;/Header&amp;gt;
    );
  }
};

// Header.jsx
export default class Header extends React.Component {
  render() {
    return (
      &amp;lt;header&amp;gt;
        { this.props.title }
        &amp;lt;hr /&amp;gt;
        { this.props.children }
      &amp;lt;/header&amp;gt;
    );
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种方式在我们需要对传入的待组合组件进行一些修正时非常适用。&lt;/p&gt;
&lt;h1 id=&#34;higher-order-components&#34;&gt;Higher-order components&lt;/h1&gt;
&lt;p&gt;Higher-Order Components 模式看上去非常类似于装饰器模式，它会用于包裹某个组件然后为其添加一些新的功能。这里展示一个简单的用于构造 Higher-Order Component 的函数:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-var&#34; data-lang=&#34;var&#34;&gt;  class Enhance extends React.Component {
    render() {
      return (
        &amp;lt;Component
          {...this.state}
          {...this.props}
        /&amp;gt;
      )
    }
  };

export default enhanceComponent;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通常情况下我们会构建一个工厂函数，接收原始的组件然后返回一个所谓的增强或者包裹后的版本，譬如:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-var&#34; data-lang=&#34;var&#34;&gt;class App extends React.Component {
  render() {
    return React.createElement(enhanceComponent(OriginalComponent));
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一般来说，高阶组件的首要工作就是渲染原始的组件，我们经常也会将 Props 与 State 传递进去，将这两个属性传递进去会有助于我们建立一个数据代理。HOC 模式允许我们控制组件的输入，即将需要传入的数据以 Props 传递进去。譬如我们需要为原始组件添加一些配置:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-var&#34; data-lang=&#34;var&#34;&gt;var enhanceComponent = (Component) =&amp;gt;
  class Enhance extends React.Component {
    render() {
      return (
        &amp;lt;Component
          {...this.state}
          {...this.props}
          title={ config.appTitle }
        /&amp;gt;
      )
    }
  };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里对于&lt;code&gt;configuration&lt;/code&gt;的细节实现会被隐藏到高阶组件中，原始组件只需要了解从 Props 中获取到&lt;code&gt;title&lt;/code&gt;变量然后渲染到界面上。原始组件并不会关心变量存于何地，从何而来，这种模式最大的优势在于我们能够以独立的模式对该组件进行测试，并且可以非常方便地对该组件进行 Mocking。在 HOC 模式下我们的原始组件会变成这样子:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-var&#34; data-lang=&#34;var&#34;&gt;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;dependency-injection&#34;&gt;Dependency injection&lt;/h1&gt;
&lt;p&gt;我们写的大部分组件与模块都会包含一些依赖，合适的依赖管理有助于创建良好可维护的项目结构。而所谓的依赖注入技术正是解决这个问题的常用技巧，无论是在 Java 还是其他应用程序中，依赖注入都受到了广泛的使用。而 React 中对于依赖注入的需要也是显而易见的，让我们假设有如下的应用树结构:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;export default function Title(props) {
  return &amp;lt;h1&amp;gt;{ props.title }&amp;lt;/h1&amp;gt;;
}

// Header.jsx
import Title from &amp;#39;./Title.jsx&amp;#39;;
export default function Header() {
  return (
    &amp;lt;header&amp;gt;
      &amp;lt;Title /&amp;gt;
    &amp;lt;/header&amp;gt;
  );
}

// App.jsx
import Header from &amp;#39;./Header.jsx&amp;#39;;
class App extends React.Component {
  constructor(props) {
    super(props);
    this.state = { title: &amp;#39;React in patterns&amp;#39; };
  }
  render() {
    return &amp;lt;Header /&amp;gt;;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;title&lt;/code&gt;这个变量的值是在&lt;code&gt;App&lt;/code&gt;组件中被定义好的，我们需要将其传入到&lt;code&gt;Title&lt;/code&gt;组件中。最直接的方法就是将其从&lt;code&gt;App&lt;/code&gt;组件传入到&lt;code&gt;Header&lt;/code&gt;组件，然后再由&lt;code&gt;Header&lt;/code&gt;组件传入到&lt;code&gt;Title&lt;/code&gt;组件中。这种方法在这里描述的简单的仅有三个组件的应用中还是非常清晰可维护的，不过随着项目功能与复杂度的增加，这种层次化的传值方式会导致很多的组件要去考虑它们并不需要的属性。在上文所讲的 HOC 模式中我们已经使用了数据注入的方式，这里我们使用同样的技术来注入&lt;code&gt;title&lt;/code&gt;变量:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;var title = &amp;#39;React in patterns&amp;#39;;
var enhanceComponent = (Component) =&amp;gt;
  class Enhance extends React.Component {
    render() {
      return (
        &amp;lt;Component
          {...this.state}
          {...this.props}
          title={ title }
        /&amp;gt;
      )
    }
  };
export default enhanceComponent;

// Header.jsx
import enhance from &amp;#39;./enhance.jsx&amp;#39;;
import Title from &amp;#39;./Title.jsx&amp;#39;;

var EnhancedTitle = enhance(Title);
export default function Header() {
  return (
    &amp;lt;header&amp;gt;
      &amp;lt;EnhancedTitle /&amp;gt;
    &amp;lt;/header&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在上文这种 HOC 模式中，&lt;code&gt;title&lt;/code&gt;变量被包含在了一个隐藏的中间层中，我们将其作为 Props 值传入到原始的&lt;code&gt;Title&lt;/code&gt;变量中并且得到一个新的组件。这种方式思想是不错，不过还是只解决了部分问题。现在我们可以不去显式地将&lt;code&gt;title&lt;/code&gt;变量传递到&lt;code&gt;Title&lt;/code&gt;组件中即可以达到同样的&lt;code&gt;enhance.jsx&lt;/code&gt;效果。
React 为我们提供了&lt;code&gt;context&lt;/code&gt;的概念，&lt;code&gt;context&lt;/code&gt;是贯穿于整个 React 组件树允许每个组件访问的对象。有点像所谓的 Event Bus，一个简单的例子如下所示:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;var context = { title: &amp;#39;React in patterns&amp;#39; };
class App extends React.Component {
  getChildContext() {
    return context;
  }
  ...
};
App.childContextTypes = {
  title: React.PropTypes.string
};

// a place where we need data
class Inject extends React.Component {
  render() {
    var title = this.context.title;
    ...
  }
}
Inject.contextTypes = {
  title: React.PropTypes.string
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，我们要使用 context 对象必须要通过&lt;code&gt;childContextTypes&lt;/code&gt;与&lt;code&gt;contextTypes&lt;/code&gt;指明其构成。如果在&lt;code&gt;context&lt;/code&gt;对象中未指明这些那么&lt;code&gt;context&lt;/code&gt;会被设置为空，这可能会添加些额外的代码。因此我们最好不要将&lt;code&gt;context&lt;/code&gt;当做一个简单的 object 对象而为其设置一些封装方法:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;export default {
  data: {},
  get(key) {
    return this.data[key];
  },
  register(key, value) {
    this.data[key] = value;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样，我们的&lt;code&gt;App&lt;/code&gt;组件会被改造成这样子:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-import&#34; data-lang=&#34;import&#34;&gt;dependencies.register(&amp;#39;title&amp;#39;, &amp;#39;React in patterns&amp;#39;);

class App extends React.Component {
  getChildContext() {
    return dependencies;
  }
  render() {
    return &amp;lt;Header /&amp;gt;;
  }
};
App.childContextTypes = {
  data: React.PropTypes.object,
  get: React.PropTypes.func,
  register: React.PropTypes.func
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而在&lt;code&gt;Title&lt;/code&gt;组件中，我们需要进行如下设置:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;export default class Title extends React.Component {
  render() {
    return &amp;lt;h1&amp;gt;{ this.context.get(&amp;#39;title&amp;#39;) }&amp;lt;/h1&amp;gt;
  }
}
Title.contextTypes = {
  data: React.PropTypes.object,
  get: React.PropTypes.func,
  register: React.PropTypes.func
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当然我们不希望在每次要使用&lt;code&gt;contextTypes&lt;/code&gt;的时候都需要显式地声明一下，我们可以将这些声明细节包含在一个高阶组件中。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;import wire from &amp;#39;./wire&amp;#39;;

function Title(props) {
  return &amp;lt;h1&amp;gt;{ props.title }&amp;lt;/h1&amp;gt;;
}

export default wire(Title, [&amp;#39;title&amp;#39;], function resolve(title) {
  return { title };
});
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的&lt;code&gt;wire&lt;/code&gt;函数的第一个参数是 React 组件对象，第二个参数是一系列需要注入的依赖值，注意，这些依赖值务必已经调用过&lt;code&gt;register&lt;/code&gt;函数。最后一个参数则是所谓的映射函数，它接收存储在&lt;code&gt;context&lt;/code&gt;中的某个原始值然后返回 React Props 中需要的值。因为在这个例子里&lt;code&gt;context&lt;/code&gt;中存储的值与&lt;code&gt;Title&lt;/code&gt;组件中需要的值都是&lt;code&gt;title&lt;/code&gt;变量，因此我们直接返回即可。不过在真实的应用中可能是一个数据集合、配置等等。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-export&#34; data-lang=&#34;export&#34;&gt;  class Inject extends React.Component {
    render() {
      var resolved = dependencies.map(this.context.get.bind(this.context));
      var props = mapper(...resolved);

      return React.createElement(Component, props);
    }
  }
  Inject.contextTypes = {
    data: React.PropTypes.object,
    get: React.PropTypes.func,
    register: React.PropTypes.func
  };
  return Inject;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的 Inject 就是某个可以访问&lt;code&gt;context&lt;/code&gt;的高阶组件，而&lt;code&gt;mapper&lt;/code&gt;就是用于接收&lt;code&gt;context&lt;/code&gt;中的数据并将其转化为组件所需要的 Props 的函数。实际上现在大部分的依赖注入的解决方案都是基于&lt;code&gt;context&lt;/code&gt;，我觉得了解这种方式的底层原理还是很有意义的。譬如现在流行的&lt;code&gt;Redux&lt;/code&gt;，其核心的&lt;code&gt;connect&lt;/code&gt;函数与&lt;code&gt;Provider&lt;/code&gt;组件都是基于&lt;code&gt;context&lt;/code&gt;。&lt;/p&gt;
&lt;h1 id=&#34;one-direction-data-flow&#34;&gt;One direction data flow&lt;/h1&gt;
&lt;p&gt;单向数据流是 React 中主要的数据驱动模式，其核心概念在于组件并不会修改它们接收到的数据，它们只是负责接收新的数据而后重新渲染到界面上或者发出某些 Action 以触发某些专门的业务代码来修改数据存储中的数据。我们先设置一个包含一个按钮的&lt;code&gt;Switcher&lt;/code&gt;组件，当我们点击该按钮时会触发某个&lt;code&gt;flag&lt;/code&gt;变量的改变:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;  constructor(props) {
    super(props);
    this.state = { flag: false };
    this._onButtonClick = e =&amp;gt; this.setState({ flag: !this.state.flag });
  }
  render() {
    return (
      &amp;lt;button onClick={ this._onButtonClick }&amp;gt;
        { this.state.flag ? &amp;#39;lights on&amp;#39; : &amp;#39;lights off&amp;#39; }
      &amp;lt;/button&amp;gt;
    );
  }
};

// ... and we render it
class App extends React.Component {
  render() {
    return &amp;lt;Switcher /&amp;gt;;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时我们将所有的数据放置到组件内，换言之，&lt;code&gt;Switcher&lt;/code&gt;是唯一的包含我们&lt;code&gt;flag&lt;/code&gt;变量的地方，我们来尝试下将这些数据托管于专门的 Store 中:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-var&#34; data-lang=&#34;var&#34;&gt;  _flag: false,
  set: function(value) {
    this._flag = value;
  },
  get: function() {
    return this._flag;
  }
};

class Switcher extends React.Component {
  constructor(props) {
    super(props);
    this.state = { flag: false };
    this._onButtonClick = e =&amp;gt; {
      this.setState({ flag: !this.state.flag }, () =&amp;gt; {
        this.props.onChange(this.state.flag);
      });
    }
  }
  render() {
    return (
      &amp;lt;button onClick={ this._onButtonClick }&amp;gt;
        { this.state.flag ? &amp;#39;lights on&amp;#39; : &amp;#39;lights off&amp;#39; }
      &amp;lt;/button&amp;gt;
    );
  }
};

class App extends React.Component {
  render() {
    return &amp;lt;Switcher onChange={ Store.set.bind(Store) } /&amp;gt;;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这里的&lt;code&gt;Store&lt;/code&gt;对象是一个简单的单例对象，可以帮助我们设置与获取&lt;code&gt;_flag&lt;/code&gt;属性值。而通过将&lt;code&gt;getter&lt;/code&gt;函数传递到组件内，可以允许我们在&lt;code&gt;Store&lt;/code&gt;外部修改这些变量，此时我们的应用工作流大概是这样的:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-User&#39;s&#34; data-lang=&#34;User&#39;s&#34;&gt; |
Switcher -------&amp;gt; Store
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;假设我们已经将&lt;code&gt;flag&lt;/code&gt;值保存到某个后端服务中，我们需要为该组件设置一个合适的初始状态。此时就会存在一个问题在于同一份数据保存在了两个地方，对于 UI 与&lt;code&gt;Store&lt;/code&gt;分别保存了各自独立的关于&lt;code&gt;flag&lt;/code&gt;的数据状态，我们等于在&lt;code&gt;Store&lt;/code&gt;与&lt;code&gt;Switcher&lt;/code&gt;之间建立了双向的数据流:&lt;code&gt;Store ---&amp;gt; Switcher&lt;/code&gt;与&lt;code&gt;Switcher ---&amp;gt; Store&lt;/code&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-//&#34; data-lang=&#34;//&#34;&gt;&amp;lt;Switcher
  value={ Store.get() }
  onChange={ Store.set.bind(Store) } /&amp;gt;

// ... in Switcher component
constructor(props) {
  super(props);
  this.state = { flag: this.props.value };
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时我们的数据流向变成了:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-User&#39;s&#34; data-lang=&#34;User&#39;s&#34;&gt; |
Switcher &amp;lt;-------&amp;gt; Store
^ |
| |
| |
| v
Service communicating
with our backend
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种双向数据流下，如果我们在外部改变了&lt;code&gt;Store&lt;/code&gt;中的状态之后，我们需要将改变之后的最新值更新到&lt;code&gt;Switcher&lt;/code&gt;中，这样也在无形之间增加了应用的复杂度。而单向数据流则是解决了这个问题，它强制在全局只保留一个状态存储，通常是存放在 Store 中。在单向数据流下，我们需要添加一些订阅 Store 中状态改变的响应函数:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-var&#34; data-lang=&#34;var&#34;&gt;  _handlers: [],
  _flag: &amp;#39;&amp;#39;,
  onChange: function(handler) {
    this._handlers.push(handler);
  },
  set: function(value) {
    this._flag = value;
    this._handlers.forEach(handler =&amp;gt; handler())
  },
  get: function() {
    return this._flag;
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后我们在&lt;code&gt;App&lt;/code&gt;组件中设置了钩子函数，这样每次&lt;code&gt;Store&lt;/code&gt;改变其值的时候我们都会强制重新渲染:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;  constructor(props) {
    super(props);
    Store.onChange(this.forceUpdate.bind(this));
  }
  render() {
    return (
      &amp;lt;div&amp;gt;
        &amp;lt;Switcher
          value={ Store.get() }
          onChange={ Store.set.bind(Store) } /&amp;gt;
      &amp;lt;/div&amp;gt;
    );
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意，这里使用的&lt;code&gt;forceUpdate&lt;/code&gt;并不是一个推荐的用法，我们通常会使用 HOC 模式来进行重渲染，这里使用&lt;code&gt;forceUpdate&lt;/code&gt;只是用于演示说明。在基于上述的改造，我们就不需要在组件中继续保留内部状态:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-class&#34; data-lang=&#34;class&#34;&gt;  constructor(props) {
    super(props);
    this._onButtonClick = e =&amp;gt; {
      this.props.onChange(!this.props.value);
    }
  }
  render() {
    return (
      &amp;lt;button onClick={ this._onButtonClick }&amp;gt;
        { this.props.value ? &amp;#39;lights on&amp;#39; : &amp;#39;lights off&amp;#39; }
      &amp;lt;/button&amp;gt;
    );
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种模式的优势在于会将我们的组件改造为简单的&lt;code&gt;Store&lt;/code&gt;中数据的呈现，此时才是真正无状态的 View。我们可以以完全声明式的方式来编写组件，而将应用中复杂的业务逻辑放置到单独的地方。此时我们应用程序的流图变成了:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-Service&#34; data-lang=&#34;Service&#34;&gt;with our backend
^
|
v
Store &amp;lt;-----
||
v|
Switcher ----&amp;gt;
^
|
|
User input
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在这种单向数据流中我们不再需要同步系统中的多个部分，这种单向数据流的概念并不仅仅适用于基于 React 的应用。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
