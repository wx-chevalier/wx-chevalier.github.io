<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MobX | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-engineering-series/4.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/mobx/</link><atom:link href="https://ng-tech.icu/books/web-engineering-series/4.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/mobx/index.xml" rel="self" type="application/rss+xml"/><description>MobX</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>MobX</title><link>https://ng-tech.icu/books/web-engineering-series/4.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/mobx/</link></image><item><title>底层原理与透明响应</title><link>https://ng-tech.icu/books/web-engineering-series/4.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/mobx/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%8F%E6%98%8E%E5%93%8D%E5%BA%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-engineering-series/4.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/mobx/%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86%E4%B8%8E%E9%80%8F%E6%98%8E%E5%93%8D%E5%BA%94/</guid><description>&lt;h1 id="mobx-底层原理与透明响应式实现">MobX 底层原理与透明响应式实现&lt;/h1>
&lt;h1 id="单次执行">单次执行&lt;/h1>
&lt;h1 id="同步推导">同步推导&lt;/h1>
&lt;h1 id="计算值与响应">计算值与响应&lt;/h1>
&lt;h1 id="mobx-基础设计理念阐述">MobX 基础设计理念阐述&lt;/h1>
&lt;p>数周之前 &lt;a href="https://twitter.com/solkimicreb1" target="_blank" rel="noopener">Bertalan Miklos&lt;/a> 撰写了一篇非常精彩的对比 MobX 与 基于 Proxy 的 NX 系列框架的&lt;a href="http://www.nx-framework.com/blog/public/mobx-vs-nx/" target="_blank" rel="noopener">博文&lt;/a>。该文不仅详细解释了基于 Proxy 的响应式框架的原理，还介绍了 MobX 以及背后的 Transparent Reactivity (Automatic Reactivity) 的理念，这其中有很多我本人之前都尚未详细阐述的。本文即是我分享关于 MobX 的独特特性的文章。&lt;/p>
&lt;h1 id="derivations-synchronously--mobx-为何进行同步推导">Derivations Synchronously | MobX 为何进行同步推导&lt;/h1>
&lt;p>MobX 的重要特性之一即是所有的 Derivations 都是同步计算的，这一点很不同于现有的主流框架。对于 RxJS 这样的 Event Stream 流派的响应式框架，虽然它们也能保证同步推导，但是缺乏了所谓的透明追踪(Transparent Tracking)的特性。而对于 Meteor、Knockout、Angular、Ember 以及 Vue 这些主流的双向数据绑定的 MVVM 框架的响应式表现很类似于 MobX，但是它们在可预测性(Predictability)上的表现差强人意。形象的解释就是如果某个框架重复运行你的代码(譬如重复渲染)或者延迟执行时，开发者很难进行调试，即使是像&lt;code>Promise&lt;/code>这样的简单的抽象都因为其异步性而难以调试。Flux 或者 Redux 这样的 Action-Dispatcher 框架的核心优势即是在项目动态扩展的同时保证了其可预测性。MobX 则另辟蹊径，没有像 Redux 这样基于纯函数的运行与数据流追踪，而是尝试从根本上去解决这个问题。Transparent Reactivity 本身具有声明式、高阶以及简洁明了的特性，而 MobX 在此之上添加了两个约束：&lt;/p>
&lt;ul>
&lt;li>对于任何状态的更改，MobX 会保证所有相关的 Derivation 只会被执行一次。&lt;/li>
&lt;li>Derivations 没有任何的延迟，对于 Observer 而言完全是同步进行的。&lt;/li>
&lt;/ul>
&lt;p>约束一着眼于解决多次运行的问题(Double Runs), 即如果某个推导值依赖于其他推导值，整个 Derivations 会以正确的顺序执行。因此任何的推导值都不会有所谓的过时的、不一致状态出现，关于其实现原理参考之前的&lt;a href="https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254" target="_blank" rel="noopener">博文&lt;/a>。约束二：所有的 Derivations 都不会是旧值 则更有意思了。约束二主要是为了解决所谓的临时不一致(Temporary Inconsistencies)的情形，这也是 MobX 采用了与其他 UI 库不一样的更新调度(Scheduling Derivation)策略。目前的 UI 库采取的策略往往是脏检测机制，即首先将发生变化的 Derivations 标记为脏数据，然后在下一轮更新的时候重新运行相关渲染。这种方式简单粗暴，适用于专注 DOM 更新的场景。DOM 本身就具有一定的延迟，我们往往也不会选择在程序里从 DOM 中读取数据，因此临时的数据不一致性(Temporary Staleness)是可以被容忍的。而这种临时的数据不一致性却是任何响应式库的致命缺陷，譬如下面这个例子：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">const&lt;/span> &lt;span class="nx">user&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">observable&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">firstName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="nx">Michel&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">lastName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="nx">Weststrate&lt;/span>&lt;span class="err">”&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// MobX computed attribute
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">fullName&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nx">computed&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">function&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">firstName&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34; &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">})&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">user&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lastName&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="err">“&lt;/span>&lt;span class="nx">Vaillant&lt;/span>&lt;span class="err">”&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">sendLetterToUser&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">user&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>问题来了，在上述代码中当我们调用&lt;code>sendLetterToUser(user)&lt;/code>这一句时，我们能够确定读取到的&lt;code>user&lt;/code>对象中的&lt;code>fullName&lt;/code>值是更新之后的值还是旧值？在 MobX 中我们能够确定整个推导过程是同步进行的，即永远得到的都是最新的正确的值。这一特性能够保证程序的可预测性，并且 MobX 在调用栈中记录了完整的更新过程，使得调试也变得简单很多。当你想要了解某个值是如何计算而来的，只需要查看整个更新调用栈即可。在 MobX 项目最初启动的时候，很多人都会质疑我们是否能够保证高效地同时达到整个 Derivation Tree 的按序计算与每次更新都会触发属性值的重推导。&lt;/p>
&lt;h1 id="transactions--actions">Transactions &amp;amp; Actions&lt;/h1>
&lt;p>了解 React setState 原理的同学肯定都对其中的事务(Transaction)的概念不陌生，我们应该将多个更新包裹在某个事务内然后一次性计算以提高性能。MobX 中我们同样存在事务的概念，实际上所有的 Derivations 都是在某个事务的结束期进行计算的，不过如果用户在事务结束前就去读取某个属性，那么 MobX 也会保证得到正确的、最新的推导值。MobX 3 中将事务相关的接口修正为了内部接口，而 &lt;a href="https://medium.com/@mweststrate/mobx-2-2-explicit-actions-controlled-mutations-and-improved-dx-45cdc73c7c8d?source=user_profile---------14----------" target="_blank" rel="noopener">actions&lt;/a> 本身是会自动包裹在事务内的。Actions 即用于声明某个函数会更新状态，其与 reactions 相辅相成，后者代表某个函数会响应状态的变化。&lt;/p>
&lt;h1 id="computed-values--reactions">Computed Values &amp;amp; Reactions&lt;/h1></description></item><item><title>响应式监听</title><link>https://ng-tech.icu/books/web-engineering-series/4.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/mobx/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9B%91%E5%90%AC/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-engineering-series/4.%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/mobx/%E5%93%8D%E5%BA%94%E5%BC%8F%E7%9B%91%E5%90%AC/</guid><description>&lt;h1 id="mobx">MobX&lt;/h1>
&lt;h2 id="术语介绍">术语介绍&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">numbers&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">observable&lt;/span>&lt;span class="p">([&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">computed&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">reduce&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="nx">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">b&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">var&lt;/span> &lt;span class="nx">disposer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">autorun&lt;/span>&lt;span class="p">(()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="nx">console&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">log&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">sum&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">get&lt;/span>&lt;span class="p">()));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 打印 &amp;#39;6&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 打印 &amp;#39;10&amp;#39;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">disposer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">numbers&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 此时并不会打印出任何对象
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="可观测类型">可观测类型&lt;/h2>
&lt;h2 id="理解-mobx-的监听对象">理解 MobX 的监听对象&lt;/h2></description></item></channel></rss>