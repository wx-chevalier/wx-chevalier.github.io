<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MessageQueue | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/index.xml" rel="self" type="application/rss+xml" />
    <description>MessageQueue</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>MessageQueue</title>
      <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/</link>
    </image>
    
    <item>
      <title>Kafka-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/kafka-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/kafka-list/</guid>
      <description>&lt;h1 id=&#34;kafka-list&#34;&gt;Kafka List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/YFMFCijamQvz_O-MPv5yfA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微信开源 PhxQueue 高可用、高可靠、高性能的分布式队列&lt;/a&gt;: 本文对比了 Kafka 与 PhxQueue，讨论了 Kafka 的不足。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jasongj.com/kafka/high_throughput/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 设计解析(六)-Kafka 高性能架构之道&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/apache-kafka-goes-1-0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Apache Kafka Goes 1.0&lt;/a&gt;: The feature set and the broad deployments all speak of a stable and Enterprise-ready product, which leads to an important step we are taking with this release: as of today, Apache Kafka is going 1.0!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resouces&#34;&gt;Resouces&lt;/h1&gt;
&lt;h2 id=&#34;collection&#34;&gt;Collection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/infoslack/awesome-kafka#books&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Kafka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;series&#34;&gt;Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/benchmarking-kafka-performance-part-1-write-throughput-7c7a76ab7db1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Benchmarking Kafka Performance #Series#&lt;/a&gt;：a series that explores Kafka performance on multiple public cloud providers. &lt;a href=&#34;https://hackernoon.com/benchmarking-kafka-performance-part-1-write-throughput-7c7a76ab7db1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part 1: Write Throughput&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/smartloli/p/4543211.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 实战：简单实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;message-queue&#34;&gt;Message Queue&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://softwaremill.com/using-kafka-as-a-message-queue/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Using Kafka as a message queue&lt;/a&gt;: In this post I’d like to outline a possible implementation of a Kafka-based Message Queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bJE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-View Counting at Reddit&lt;/a&gt;: Reddit’s data pipeline is primarily oriented around Apache Kafka. When a user views a post, an event gets fired and sent to an event collector server, which batches the events and persists them into Kafka.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;internals&#34;&gt;Internals&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zqhxuyuan1.gitbooks.io/kafka/content/chapter1-intro.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 源码分析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jasongj.com/2015/01/02/Kafka%e6%b7%b1%e5%ba%a6%e8%a7%a3%e6%9e%90/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 深度解析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;opensource&#34;&gt;OpenSource&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edenhill/kafkacat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-kafkacat 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Generic command line non-JVM Apache Kafka producer and consumer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/provectus/kafka-ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Kafka UI 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: UI for Apache Kafka is a free, open-source web UI to monitor and manage Apache Kafka clusters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MessageQueue-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/messagequeue-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/messagequeue-list/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*LBocICeBuP3FSLPMBLA04g/RS/w1408.png?&amp;amp;ssl=1&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;message-oriented-middleware-list--消息中间件资料索引&#34;&gt;Message Oriented Middleware List | 消息中间件资料索引&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/b3YGm8uMuOZNRhZdA7egSQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-云原生时代消息中间件的演进路线&lt;/a&gt;: 本文整理自作者于 2020 年云原生微服务大会上的分享《云原生时代的消息中间件演进》，主要探讨了传统的消息中间件如何持续进化为云原生的消息服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/understanding-message-brokers/9781492049296/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding Message Brokers 📚&lt;/a&gt;: Messaging is one of the more poorly understood areas of IT; most developers and architects have only a passing familiarity with how broker-based messaging technologies work. This practical report not only helps you get up to speed on the essentials of messaging, but also compares two of today’s most popular messaging technologies—Apache ActiveMQ and Apache Kafka.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comparison&#34;&gt;Comparison&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/faL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-消息队列的流派之争&lt;/a&gt;: 这篇文章的标题很难起，网上一翻全是各种 MQ 的性能比较，很容易让人以为我也是这么“粗俗”的人（o(╯□╰)o）。我这篇文章想要表达的是——它们根本不是一个东西，有毛的性能好比较？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/f056a74d77a4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-消息队列的对比调研&lt;/a&gt;：我们发现 Redis 的作者出了一个新的消息队列系统 Disque，我做了一点调研来决定我们使用哪种消息队列，主要对比了 Disque、Kafka 和 RocketMQ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Kafka &amp;amp; Redis Streams&lt;/a&gt;: Let’s talk about queue design.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.qiniu.com/archives/4791&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-携程异步消息系统实践&lt;/a&gt;: 今天会跟大家分享一下我们在携程，现在应该是正在推广的一个新的消息系统，主要会偏重于讲一些架构和实现方面的内容。目前我在携程大概一年多都在做新的消息系统 Hermes。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/fai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-阿里巴巴分布式消息系统的演进之路&lt;/a&gt;: 阿里中间件给客户提供的是一套企业互联网应用架构整体解决方案，里面有很多组件，比如用来做分布式应用编写的应用平台（EDAS），做可无限扩展的分布式数据库（DRDS）和金融级可靠的消息队列服务（AliMQ）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/F94YPWQzI2_bb9pdDG4mtA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-网易云音乐的消息队列改造之路&lt;/a&gt;: 本文整理自网易云音乐消息队列负责人林德智在近期 Apache Flink&amp;amp;RocketMQ Meetup 上海站的分享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/qsLNavqAhYv49r6WTAJy9w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-今日头条在消息服务平台和容灾体系建设方面的实践与思考&lt;/a&gt;: 今日头条的业务背景；为什么选择 RocketMQ；RocketMQ 在头条的落地实践；头条的容灾系统建设。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spec&#34;&gt;Spec&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudevents/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Cloud Events&lt;/a&gt;: CloudEvents is a specification for describing event data in common formats to provide interoperability across services, platforms and systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;system-design&#34;&gt;System Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tech.meituan.com/2016/07/01/mq-design.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-消息队列设计精要&lt;/a&gt;: 当你需要使用消息队列时，首先需要考虑它的必要性。可以使用 mq 的场景有很多，最常用的几种，是做业务解耦/最终一致性/广播/错峰流控等。反之，如果需要强一致性，关注业务逻辑的处理结果，则 RPC 显得更为合适。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/fav&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-设计消息中间件时我关心什么?(解密电商数据一致性与完整性实现)&lt;/a&gt;: 今天主要给大家分享一下消息队列基础组件的设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/AgdayVL0pvcwL0amLouu-Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Message Queue 的设计和实现&lt;/a&gt;: 终于过完年了，老王也回归了，这周给大家带来的是 Message Queue（业界喜欢简称为 MQ）的设计和实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;opensource&#34;&gt;OpenSource&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>MOM-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/mom-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/mom-list/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://img.readitlater.com/i/cdn-images-1.medium.com/max/800/1*LBocICeBuP3FSLPMBLA04g/RS/w1408.png?&amp;amp;ssl=1&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;message-oriented-middleware-list--消息中间件资料索引&#34;&gt;Message Oriented Middleware List | 消息中间件资料索引&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/b3YGm8uMuOZNRhZdA7egSQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-云原生时代消息中间件的演进路线&lt;/a&gt;: 本文整理自作者于 2020 年云原生微服务大会上的分享《云原生时代的消息中间件演进》，主要探讨了传统的消息中间件如何持续进化为云原生的消息服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://learning.oreilly.com/library/view/understanding-message-brokers/9781492049296/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding Message Brokers 📚&lt;/a&gt;: Messaging is one of the more poorly understood areas of IT; most developers and architects have only a passing familiarity with how broker-based messaging technologies work. This practical report not only helps you get up to speed on the essentials of messaging, but also compares two of today’s most popular messaging technologies—Apache ActiveMQ and Apache Kafka.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;comparison&#34;&gt;Comparison&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/faL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-消息队列的流派之争&lt;/a&gt;: 这篇文章的标题很难起，网上一翻全是各种 MQ 的性能比较，很容易让人以为我也是这么“粗俗”的人（o(╯□╰)o）。我这篇文章想要表达的是——它们根本不是一个东西，有毛的性能好比较？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/f056a74d77a4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-消息队列的对比调研&lt;/a&gt;：我们发现 Redis 的作者出了一个新的消息队列系统 Disque，我做了一点调研来决定我们使用哪种消息队列，主要对比了 Disque、Kafka 和 RocketMQ。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Kafka &amp;amp; Redis Streams&lt;/a&gt;: Let’s talk about queue design.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.qiniu.com/archives/4791&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-携程异步消息系统实践&lt;/a&gt;: 今天会跟大家分享一下我们在携程，现在应该是正在推广的一个新的消息系统，主要会偏重于讲一些架构和实现方面的内容。目前我在携程大概一年多都在做新的消息系统 Hermes。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/fai&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-阿里巴巴分布式消息系统的演进之路&lt;/a&gt;: 阿里中间件给客户提供的是一套企业互联网应用架构整体解决方案，里面有很多组件，比如用来做分布式应用编写的应用平台（EDAS），做可无限扩展的分布式数据库（DRDS）和金融级可靠的消息队列服务（AliMQ）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/F94YPWQzI2_bb9pdDG4mtA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-网易云音乐的消息队列改造之路&lt;/a&gt;: 本文整理自网易云音乐消息队列负责人林德智在近期 Apache Flink&amp;amp;RocketMQ Meetup 上海站的分享。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/qsLNavqAhYv49r6WTAJy9w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-今日头条在消息服务平台和容灾体系建设方面的实践与思考&lt;/a&gt;: 今日头条的业务背景；为什么选择 RocketMQ；RocketMQ 在头条的落地实践；头条的容灾系统建设。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;spec&#34;&gt;Spec&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudevents/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Cloud Events&lt;/a&gt;: CloudEvents is a specification for describing event data in common formats to provide interoperability across services, platforms and systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;system-design&#34;&gt;System Design&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tech.meituan.com/2016/07/01/mq-design.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-消息队列设计精要&lt;/a&gt;: 当你需要使用消息队列时，首先需要考虑它的必要性。可以使用 mq 的场景有很多，最常用的几种，是做业务解耦/最终一致性/广播/错峰流控等。反之，如果需要强一致性，关注业务逻辑的处理结果，则 RPC 显得更为合适。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/fav&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-设计消息中间件时我关心什么?(解密电商数据一致性与完整性实现)&lt;/a&gt;: 今天主要给大家分享一下消息队列基础组件的设计。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/AgdayVL0pvcwL0amLouu-Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Message Queue 的设计和实现&lt;/a&gt;: 终于过完年了，老王也回归了，这周给大家带来的是 Message Queue（业界喜欢简称为 MQ）的设计和实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;opensource&#34;&gt;OpenSource&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Pulsar-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/pulsar-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/pulsar-list/</guid>
      <description>&lt;h1 id=&#34;pulsar-list&#34;&gt;Pulsar List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/v4A--nGiDTt58pZyIzepeg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-比拼 Kafka，大数据分析新秀 Pulsar 到底好在哪&lt;/a&gt;: 本文将详述 Pulsar 和 Kafka 消息模型之间的区别，以及 Pulsar 与 Kafka 在系统架构设计方面的差异。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.cn/article/ZDTYKqekhRo8gtG20j5l&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-急需降低系统复杂性，我们从 Kafka 迁移到了 Pulsar&lt;/a&gt;: Iterable 使用工作队列执行客户指定的营销工作流、webhooks 和其他类型的工作安排或进展。其他组件（如提取用户和事件）使用流模型处理有序消息流。分布式消息系统通常支持流和队列两种语义，而最适合使用这两种语义的场景则有所不同。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RabbitMQ-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/rabbitmq-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/rabbitmq-list/</guid>
      <description>&lt;h1 id=&#34;rabbitmq-list&#34;&gt;RabbitMQ List&lt;/h1&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rabbitmq/rabbitmq-tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RabbitMQ Tutorial&lt;/a&gt;: This project contains code for RabbitMQ tutorials with their ports to various languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/dP1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-RabbitMQ for beginners #Series#&lt;/a&gt;: Gives a brief understanding of messaging and important RabbitMQ concepts are defined.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RocketMQ-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/rocketmq-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/messagequeue/rocketmq-list/</guid>
      <description>&lt;h1 id=&#34;rocketmq-list&#34;&gt;RocketMQ List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rocketmq.incubator.apache.org/docs/quick-start/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache RocketMQ Official&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://jm.taobao.org/2017/03/09/20170309/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Apache RocketMQ 背后的设计思路与最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/news/2017/02/RocketMQ-future-idea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-专访 RocketMQ 联合创始人：项目思路、技术细节和未来规划&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/chunlongyu/article/category/6638499&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-分布式消息队列 RocketMQ #Series#&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/a417930422/article/category/6423649&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-RocketMQ 源码分析系列文章 #Series#&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://jaskey.github.io/blog/2016/12/15/rocketmq-concept/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Jaskey RocketMQ 系列文章 #Series#&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/YunaiV/Blog/tree/master/RocketMQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-YunaiV RocketMQ 源码解析系列文章 #Series#&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;internals&#34;&gt;Internals&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/453c6e7ff81c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-分布式开放消息系统 (RocketMQ) 的原理与实践&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/d06e9bc6c463&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-RocketMQ 高性能之底层存储设计&lt;/a&gt;: RocketMQ 在底层存储上借鉴了 Kafka，但是也有它独到的设计，本文主要关注深刻影响着 RocketMQ 性能的底层文件存储结构，中间会穿插一点点 Kafka 的东西以作为对比。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
