<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/index.xml" rel="self" type="application/rss+xml"/><description>Redis</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Redis</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/</link></image><item><title>Redis-Cluster-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/redis-cluster-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/redis-cluster-list/</guid><description>&lt;h1 id="cluster--集群架构">Cluster | 集群架构&lt;/h1>
&lt;h2 id="sharding">Sharding&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Kne" target="_blank" rel="noopener">2016-这可能是最全的 Redis 集群方案介绍了&lt;/a>: 各大企业在 3.0 版本还没发布前为了解决 Redis 的存储瓶颈，纷纷推出了各自的 Redis 集群方案。这些方案的核心思想是把数据分片（sharding）存储在多个 Redis 实例中，每一片就是一个 Redis 实例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/by5" target="_blank" rel="noopener">2017-Redis 集群实现原理探讨&lt;/a>：Redis 集群是一个 distribute、fault-tolerant 的 Redis 实现，主要设计目标是达到线性可扩展性、可用性、数据一致性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="redis-cluster">Redis Cluster&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/mindfloating/article/details/50458768" target="_blank" rel="noopener">Redis 集群的合纵与连横&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/dc_726/article/details/48552531" target="_blank" rel="noopener">全面剖析 Redis Cluster 原理和应用&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://my.oschina.net/andylucc/blog/704440" target="_blank" rel="noopener">Redis Cluster 分区实现原理&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA3MzYwNjQ3NA==&amp;amp;mid=2651296996&amp;amp;idx=2&amp;amp;sn=5f4811d73e74e2a63b1cb0d3d532862a" target="_blank" rel="noopener">深入浅出 Redis Cluster 原理&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="ha--高可用架构">HA | 高可用架构&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zhuoroger.github.io/2016/08/03/redis-cluster-imbalance/" target="_blank" rel="noopener">2016-Redis 集群“倾斜”问题 &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/dc_726/article/details/48733265" target="_blank" rel="noopener">Redis Cluster 架构优化&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://rdc.hundsun.com/portal/article/669.html" target="_blank" rel="noopener">如何部署高可用的 Redis 集群架构&lt;/a>：本文主要介绍 redis 在不同模式下的部署方式，并且对几种模式进行了一些简单的对比。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Redis-Internals-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/redis-internals-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/redis-internals-list/</guid><description>&lt;h1 id="redis-internals-list">Redis Internals List&lt;/h1>
&lt;h1 id="event-loop">Event Loop&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://my.oschina.net/andylucc/blog/679222" target="_blank" rel="noopener">Redis 网络架构及单线程模型 &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://my.oschina.net/andylucc/blog/693981" target="_blank" rel="noopener">Redis 异步组件化模型&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://draveness.me/redis-eventloop" target="_blank" rel="noopener">2016-Redis 中的事件循环&lt;/a>: 在目前的很多服务中，由于需要持续接受客户端或者用户的输入，所以需要一个事件循环来等待并处理外部事件，这篇文章主要会介绍 Redis 中的事件循环是如何处理事件的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/idwtwt/article/details/79460217" target="_blank" rel="noopener">2018-Redis 源码阅读——基于 epoll 的事件模型&lt;/a>: Redis 的事件模型实现基于 linux 的 epoll，sun 的 export,FreeBSD 和 Mac osx 的 queue，还有 select。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="commands">Commands&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://blog.csdn.net/hanhuili/article/details/17339005" target="_blank" rel="noopener">深入理解 Redis：命令处理流程 &lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="communication">Communication&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/articles/communication-redis-clientserver" target="_blank" rel="noopener">深入浅出 Redis client/server 交互流程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuoroger.github.io/2016/07/30/redis-client-two-buffers/" target="_blank" rel="noopener">Redis 客户端查询缓冲区和输出缓冲区&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="datatypes">DataTypes&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://my.oschina.net/andylucc/blog/715325" target="_blank" rel="noopener">Redis 压缩列表原理与应用分析&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/acceptedxukai/article/details/17333673" target="_blank" rel="noopener">Redis 内部数据结构详解之跳跃表(skiplist) &lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="optimization">Optimization&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://blog.jobbole.com/106466/" target="_blank" rel="noopener">Redis 内存使用优化与存储&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.jobbole.com/99099/" target="_blank" rel="noopener">Redis 时延问题分析及应对&lt;/a>: 在笔者自己的 Redis 的实践中，发现 Redis 本身的并发能力还是非常强悍的，但是往往瓶颈会发生在网络延迟中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuoroger.github.io/2016/08/14/redis-data-loss/" target="_blank" rel="noopener">Redis 数据丢失问题&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuoroger.github.io/2016/08/12/redis-delete-large-keys/" target="_blank" rel="noopener">如何优雅地删除 Redis 大键&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&amp;amp;mid=401738746&amp;amp;idx=1&amp;amp;sn=281af530d5abec981f3607d6e729914a&amp;amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Redis 的性能幻想与残酷现实&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://redisplanet.com/redis/under-the-hood-of-redis-hash-part-1/" target="_blank" rel="noopener">Under the Hood of Redis&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Redis-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/redis-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/database/keyvalue/redis/redis-list/</guid><description>&lt;h1 id="redis-list">Redis List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://zzyongx.github.io/blogs/redis-memory-optimization-when-store-small-data.html" target="_blank" rel="noopener">Redis 存储海量小数据，如何优化内存使用&lt;/a> s&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cachecloud.github.io/2017/02/16/Redis%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/" target="_blank" rel="noopener">Redis 的内存优化&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/TBCEwLVAXdsTszRVpXhVug" target="_blank" rel="noopener">Redis 架构之防雪崩设计：网站不宕机背后的兵法&lt;/a>：互联网系统中不可避免要大量用到缓存，在缓存的使用过程中，架构师需要注意哪些问题？本文以 Redis 为例，详细探讨了最关键的 3 个问题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.epubit.com.cn/article/504" target="_blank" rel="noopener">你不可不知的 Redis 常用命令&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/antirez/redis-doc/blob/master/topics/data-types-intro.md" target="_blank" rel="noopener">data-types-intro&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://ifeve.com/redis-data-types-intro/" target="_blank" rel="noopener">Redis 的数据类型和抽象概念介绍&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://my.oschina.net/andylucc/blog/679222" target="_blank" rel="noopener">Redis 缓存失效机制&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="case-study">Case Study&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/uqMrYp7FTI11zBIm8kiTLg" target="_blank" rel="noopener">2018-携程 Redis 容器化实践&lt;/a>: 携程的 Redis 使用规模有 200T+，并且每天有百万亿次的访问频率，如此大规模的 Redis 容器化对于我们来说是个不小的挑战，本文分享携程 Redis 容器化落地的一些实践经验。&lt;/li>
&lt;/ul>
&lt;h1 id="resource">Resource&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md" target="_blank" rel="noopener">The Little Redis Book 中文教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://redisgraph.io/design/" target="_blank" rel="noopener">RedisGraph
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A High Performance In-Memory Graph Database as a Redis Module.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/xueqiu/rdr" target="_blank" rel="noopener">2018-RDR
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: RDR(redis data reveal) is a tool to parse redis rdbfile. Comparing to redis-rdb-tools, RDR is implemented by golang, much faster (5GB rdbfile takes about 2mins on my PC).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="extended-edition">Extended Edition&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/JohnSully/KeyDB" target="_blank" rel="noopener">2018-KeyDB
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A Multithreaded Fork of Redis&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/fJi5JEATVcuQVtysqqJp_w" target="_blank" rel="noopener">2020-Kvrocks
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Kvrocks 是基于 RocksDB 之上兼容 Redis 协议的 NoSQL 存储服务，设计目标是提供一个低成本以及大容量的 Redis 服务，作为 Redis 在大数据量场景的互补服务，选择兼容 Redis 协议是因为简单易用且业务迁移成本低。目前线上使用的公司包含: 美图、携程、百度以及白山云等，在线上经过两年多大规模实例的验证。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="management">Management&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/alibaba/RedisShake" target="_blank" rel="noopener">Redis-shake
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Redis-shake 是一个用于在两个 redis 之间同步数据的工具，满足用户非常灵活的同步、迁移需求。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ngbdf/redis-manager" target="_blank" rel="noopener">2019-Redis Manager
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Redis 一站式管理平台，支持集群的监控、安装、管理、告警以及基本的数据操作。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/luin/medis" target="_blank" rel="noopener">2019-Medis
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 💻 Medis is a beautiful, easy-to-use Mac database management application for Redis.&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>