<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/index.xml" rel="self" type="application/rss+xml"/><description>Docker</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Docker</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/</link></image><item><title>Docker-Compose-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-compose-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-compose-list/</guid><description/></item><item><title>Docker-Configuration-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-configuration-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-configuration-list/</guid><description>&lt;h1 id="docker-configuration-list">Docker Configuration List&lt;/h1>
&lt;h1 id="system">System&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://cizixs.com/2017/08/04/docker-resources-limit" target="_blank" rel="noopener">2018-使用 docker 对容器资源进行限制&lt;/a>: 这篇文章就介绍如何使用 docker 来限制 CPU、内存和 IO，以及对应的 cgroups 文件。&lt;/li>
&lt;/ul>
&lt;h1 id="docker-storage">Docker Storage&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ur8" target="_blank" rel="noopener">2016-Docker : Storage Patterns for Persistence&lt;/a>: We’ll go over several variants when it comes down to data persistence.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://thenewstack.io/methods-dealing-container-storage/" target="_blank" rel="noopener">2017-Managing Persistence for Docker Containers&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@gchudnov/copying-data-between-docker-containers-26890935da3f" target="_blank" rel="noopener">copying-data-between-docker-containers&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://container42.com/2014/11/03/docker-indepth-volumes/" target="_blank" rel="noopener">docker-indepth-volumes&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dockone.io/article/128" target="_blank" rel="noopener">深入理解 Docker Volume&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="network">Network&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://dockone.io/article/1255" target="_blank" rel="noopener">Docker 网络部分执行流分析(Libnetwork 源码解读)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.container42.com/2015/10/30/docker-networking-reborn/" target="_blank" rel="noopener">Docker Networking: Reborn&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.nigelpoulton.com/demystifying-docker-overlay-networking/" target="_blank" rel="noopener">2018-Demystifying Docker overlay networking&lt;/a>: We’ll explain the theory behind how it works.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="dockerfile">Dockerfile&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UyX" target="_blank" rel="noopener">2018-An Exhaustive Guide to Writing Dockerfiles for Node.js Web Apps&lt;/a>: This post is filled with examples ranging from a simple Dockerfile to multistage production builds for Node.js web apps.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/a9d08ba3d979?from=groupmessage&amp;amp;isappinstalled=0" target="_blank" rel="noopener">高效编写 Dockerfile 的几条准则&lt;/a>: 写 Dockerfile 也像写代码一样，一份精心设计、Clean Code 的 Dockerfile 能在提高可读性的同时也大大提升 Docker 的使用效率。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="registry">Registry&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/fzuleta/private-docker-registry-ssl" target="_blank" rel="noopener">private-docker-registry-ssl&lt;/a>: Private Docker registry protected with Let&amp;rsquo;s Encrypt SSL&lt;/li>
&lt;/ul>
&lt;h1 id="application">Application&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://codefresh.io/blog/node_docker_multistage/" target="_blank" rel="noopener">2017-Create lean Node.js image with Docker multi-stage build&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/3-tricks-for-mastering-docker-with-python-99876412348d?source=reading_list---------6-1---------" target="_blank" rel="noopener">3 tricks for mastering Docker with Python&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="engineering-practices">Engineering Practices&lt;/h1>
&lt;h2 id="security">Security&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.sqreen.io/resources/docker-security-best-practices" target="_blank" rel="noopener">Docker Security Best Practices&lt;/a>: This Docker Security Cheat Sheet will walk you through five actions to protect your Docker containers and infrastructure. Improve your Docker security today.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/d6b" target="_blank" rel="noopener">Docker Security CheatSheet&lt;/a>: The following tips should help you to secure a container based system.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/i9lMWgST6ZdRGxau5hGt9g" target="_blank" rel="noopener">2019-Docker 容器安全的“终极武器” AIM&lt;/a>: 我们需要关注 Docker 中的安全问题吗？这个得具体分析。Docker 拥有相当强大的安全保障能力，因此如果大家只使用官方 Docker 镜像而且不需要进行机器间通信，就完全没必要为安全而担心。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="optimization">Optimization&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beS" target="_blank" rel="noopener">2017-Tips to Reduce Docker Image Sizes&lt;/a>: Docker images can easily get to 2–3GB. Here’s some tips that can help reduce their sizes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dockone.io/article/132" target="_blank" rel="noopener">Dockerfile 最佳实践&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dockone.io/article/255" target="_blank" rel="noopener">Dockerfile 优化浅谈&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/lIW" target="_blank" rel="noopener">记一次 docker 问题定位&lt;/a>: 性能测试发现业务进程运行在容器中比业务进程运行在宿主机上吞吐量下降了 100 倍，这让周一显得更加阴暗。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docker-Internals-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-internals-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-internals-list/</guid><description>&lt;h1 id="docker-internals-list--docker-内部原理资料索引">Docker Internals List | Docker 内部原理资料索引&lt;/h1>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/7a1ce51a0eba" target="_blank" rel="noopener">2018-Docker 底层技术&lt;/a>: Docker 容器技术已经发展了好些年，在很多项目都有应用，线上运行也很稳定。整理了部分 Docker 的学习笔记以及新版本特性，对 Docker 感兴趣的同学可以看看，之前整理过的 Linux namespace 可以见之前的博文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://segmentfault.com/a/1190000002766882" target="_blank" rel="noopener">深入 Docker：容器和镜像&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://draveness.me/docker" target="_blank" rel="noopener">Docker 核心技术与实现原理&lt;/a>: 作为在生产环境中广泛应用的产品，Docker 有着非常成熟的社区以及大量的使用者，代码库中的内容也变得非常庞大。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/357107501" target="_blank" rel="noopener">2021-万字长文：彻底搞懂容器镜像构建&lt;/a>: 我将在这篇文章中深入 Docker 的源码，与你聊聊镜像构建的原理。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="cgroup">cgroup&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://cizixs.com/2017/08/25/linux-cgroup" target="_blank" rel="noopener">2017-Docker 容器基础技术：linux cgroup 简介&lt;/a>: Linux cgroups 的全称是 Linux Control Groups，它是 Linux 内核的特性，主要作用是限制、记录和隔离进程组（process groups）使用的物理资源（cpu、memory、IO 等）。&lt;/li>
&lt;/ul>
&lt;h1 id="网络">网络&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://blog.csdn.net/xuguokun1986/article/details/54411394" target="_blank" rel="noopener">2017-理解 Docker 容器网络之 Linux Network Namespace&lt;/a>: 在本文中我们将尝试理解 Linux Network Namespace 及相关 Linux 内核网络设备的概念，并手工模拟 Docker 容器网络模型的部分实现，包括单机容器网络中的容器与主机连通、容器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/Jdxct8qHrBUtkUq-hnxSRw" target="_blank" rel="noopener">2019-浅聊几种主流 Docker 网络的实现原理&lt;/a>: 本文接下来将详细介绍目前主流容器网络的实现原理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://iximiuz.com/en/posts/container-networking-is-simple/" target="_blank" rel="noopener">2020-Container networking is simple&lt;/a>: Luckily, we&amp;rsquo;ve been looking under the hood of the containerization technology for quite some time already and even managed to uncover that containers are just isolated and restricted Linux processes, that images aren&amp;rsquo;t really needed to run containers, and on the contrary - to build an image we need to run some containers.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="存储">存储&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://jpetazzo.github.io/assets/2015-03-03-not-so-deep-dive-into-docker-storage-drivers.html" target="_blank" rel="noopener">2015-Deep dive into Docker storage drivers&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.csdn.net/article/2015-08-21/2825511" target="_blank" rel="noopener">2015-深入分析 Docker 镜像原理&lt;/a>: 分享内容包含两个部分：1.Docker 镜像的基本知识；2.Dockerfile、Docker 镜像与 Docker 容器的关系。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cameronlonsdale.com/2018/11/26/whats-in-a-docker-image/" target="_blank" rel="noopener">2018-What&amp;rsquo;s in a Docker image?&lt;/a>: Not only do I want to give you the answer, but I want to show you how I got there.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docker-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-list/</guid><description>&lt;h1 id="docker-list--docker-资料索引">Docker List | Docker 资料索引&lt;/h1>
&lt;p>&lt;a href="./https://parg.co/o90">Docker Links&lt;/a> aggregates curated popular links for studing Docker and the Ecosystem. More reference about ITCS can turn to &lt;a href="https://github.com/wx-chevalier/Awesome-Lists" target="_blank" rel="noopener">AwesomeList: Guide to Galaxy&lt;/a>, which collects valuable, popular and up-to-date links for CS, including Programming Language, Software Engineering, Server Side Application, Infrastructure, InfoSecurity, Industrial Application, DataScienceAI, Frontend Technology(iOS, Android, RN, Electron), etc.&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;h2 id="cheatsheet">CheatSheet&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/eon01/DockerCheatSheet" target="_blank" rel="noopener">2017-DockerCheatSheet&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wsargent/docker-cheat-sheet#images" target="_blank" rel="noopener">docker-cheat-sheet&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gist.github.com/botchagalupe/53695f50eebbd3eaa9aa" target="_blank" rel="noopener">Docker Tutorial - Cheatsheet&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="resource">Resource&lt;/h1>
&lt;h2 id="book">Book&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/xianlubird/mydocker" target="_blank" rel="noopener">2016-mydocker 📚&lt;/a>: 本书在详细分析 Docker 所依赖的技术栈的基础上,一步一步地通过代码实例,让读者可以自己循 序渐进地用 Go 语言构建出一个容器的引擎。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.phei.com.cn/module/goods/wssd_content.jsp?bookid=50014" target="_blank" rel="noopener">2017-自己动手写 Docker 📚&lt;/a>：通过讲解 Docker 使用到的各种底层技术，例如 Namespace、Cgroups 等来自己一步步动手完成一个简单版本的 Docker。在自己动手的过程中，从而对 Docker 这个技术有一个整体、细致的了解。能够明白 Docker 的原理以及结构，从而加深对目前炽手可热的 Docker 技术的理解，方便解决工作中使用 Docker 遇到的各种问题。&lt;a href="https://yq.aliyun.com/articles/64928" target="_blank" rel="noopener">系列书摘&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bjC" target="_blank" rel="noopener">2017-The DevOps 2.1 Toolkit: Docker Swarm 📚&lt;/a>: Viktor Farcic&amp;rsquo;s latest book, The DevOps 2.1 Toolkit: Docker Swarm, shows you how to successfully integrate Docker Swarm into your DevOps toolset.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UrV" target="_blank" rel="noopener">2017-Continuous Delivery with Docker and Jenkins 📚&lt;/a>: Unleash the combination of Docker and Jenkins in order to enhance the DevOps workflow.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://thenewstack.io/ebooks/" target="_blank" rel="noopener">2017-The New Stack-The Docker and Container Ecosystem 📚&lt;/a>: The container ecosystem is constantly changing and impacting the developer landscape. Our five ebook series on the container ecosystem covers everything from application development to orchestration, networking, security, data storage, and monitoring.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/yeasy/docker_practice" target="_blank" rel="noopener">2017-Docker 从入门到实践 📚&lt;/a>: Learn and understand Docker technologies, with real DevOps practice!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/badtuxx/DescomplicandoDocker" target="_blank" rel="noopener">2021-DescomplicandoDocker
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: This book will teach you all you need to know to get started with Docker, and use it to build, ship, and run your applications. It will be your guide in the world of containers, and on the path to ship code better than you ever did before.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="tutorial">Tutorial&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UVt" target="_blank" rel="noopener">Docker + Kubernetes&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UvP" target="_blank" rel="noopener">2018-A crash course on Docker — Learn to swim with the big fish&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docker-curriculum.com/" target="_blank" rel="noopener">2018-Docker for Beginners&lt;/a>: Learn to build and deploy your distributed applications easily to the cloud with Docker.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/prakhar1989/docker-curriculum" target="_blank" rel="noopener">2018-docker-curriculum&lt;/a>: A comprehensive tutorial on getting started with Docker!&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Docker-OpenSource-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-opensource-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/docker-opensource-list/</guid><description>&lt;h1 id="docker">Docker&lt;/h1>
&lt;h1 id="scratch">Scratch&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/p8952/bocker" target="_blank" rel="noopener">2015-Bocker&lt;/a>: Docker implemented in around 100 lines of bash.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/rancher/docker-from-scratch" target="_blank" rel="noopener">2015-Tiny Docker in Docker
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Docker-in-Docker image based off of the empty image scratch. Only the bare minimum required files are included to make Docker run. This image weighs in around 25MB expanded.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://coolshell.cn/articles/17010.html" target="_blank" rel="noopener">2015-Docker 基础技术 #Series#&lt;/a>: 我会用几篇文章来把这些技术给大家做个介绍，希望通过这些文章大家可以自己打造一个山寨版的 docker。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://docker-saigon.github.io/post/Docker-Internals/" target="_blank" rel="noopener">2016-Docker Internals&lt;/a>: A Deep Dive Into Docker For Engineers Interested In The Gritty Details.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Fewbytes/rubber-docker" target="_blank" rel="noopener">2017-rubber-docker
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A workshop on Linux containers: Rebuild Docker from Scratch&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UvM" target="_blank" rel="noopener">2018-手把手教你写 Docker&lt;/a>: 模拟 Docker 实现一个简单的容器不到 200 行代码(包括空行、注释、异常处理)。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="tool">Tool&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/bcicen/ctop" target="_blank" rel="noopener">ctop
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Top-like interface for container metrics&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/GoogleCloudPlatform/container-diff" target="_blank" rel="noopener">container-diff
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: container-diff is a tool for analyzing and comparing container images. container-diff can examine images along several different criteria&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wagoodman/dive" target="_blank" rel="noopener">dive
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A tool for exploring each layer in a docker image.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/docker-slim/docker-slim" target="_blank" rel="noopener">2019-docker-slim
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: DockerSlim (docker-slim): Don&amp;rsquo;t change anything in your Docker container image and minify it by up to 30x (and for compiled languages even more) making it secure too! (free and open source)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="storage--存储">Storage | 存储&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/ClusterHQ/flocker" target="_blank" rel="noopener">2015-Flocker
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Flocker is an open-source Container Data Volume Manager for your Dockerized applications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/thecodeteam/rexray" target="_blank" rel="noopener">2017-REX-Ray
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: REX-Ray is a container storage orchestration engine enabling persistence for cloud native workloads&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/gluster/glusterfs" target="_blank" rel="noopener">GlusterFS
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Gluster is a software defined distributed storage that can scale to several petabytes. It provides interfaces for object, block and file storage.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="registry">Registry&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/alibaba/Dragonfly" target="_blank" rel="noopener">Dragonfly
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Dragonfly is an intelligent P2P based file distribution system. It aims to resolve issues related to low-efficiency, low-success rate and waste of network bandwidth in file transferring process.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://goharbor.io/" target="_blank" rel="noopener">Harbor
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Harbor is an open source container image registry that secures images with role-based access control, scans images for vulnerabilities, and signs images as trusted.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/andrey-pohilko/registry-cli" target="_blank" rel="noopener">registry-cli
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Scripts for easy manipulation of docker-registry from command line (and from scripts).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="docker-compose">Docker Compose&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Wowu/docker-rollout" target="_blank" rel="noopener">2023-Wowu/docker-rollout
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/Wowu/docker-rollout" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Docker CLI plugin that updates Docker Compose services without downtime.&lt;/li>
&lt;/ul></description></item><item><title>Dokcer-Swarm-List</title><link>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/dokcer-swarm-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/4.infrastructure/cloud/container/docker/dokcer-swarm-list/</guid><description>&lt;h1 id="docker-swarm-list">Docker Swarm List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/wangtaoking1/article/details/46731913" target="_blank" rel="noopener">Swarm 介绍&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://technologyconversations.com/2015/11/04/docker-clustering-tools-compared-kubernetes-vs-docker-swarm/" target="_blank" rel="noopener">Docker Clustering Tools Compared: Kubernetes vs Docker Swarm&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.nigelpoulton.com/demystifying-docker-overlay-networking/" target="_blank" rel="noopener">2016-Demystifying Docker overlay networking&lt;/a>: we’ll build and test a Docker overlay network in swarm mode; We’ll explain the theory behind how it works.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://embaby.com/blog/using-glusterfs-docker-swarm-cluster/" target="_blank" rel="noopener">2017-Using GlusterFS with Docker swarm cluster&lt;/a>: In this blog I will create a 3 node Docker swarm cluster and use GlusterFS to share volume storage across Docker swarm nodes.&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>