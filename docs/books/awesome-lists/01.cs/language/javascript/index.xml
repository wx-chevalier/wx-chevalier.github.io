<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JavaScript | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/index.xml" rel="self" type="application/rss+xml" />
    <description>JavaScript</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>JavaScript</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/</link>
    </image>
    
    <item>
      <title>JavaScript-Async-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-async-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-async-list/</guid>
      <description>&lt;h1 id=&#34;javascript-async-list--javascript-异步编程资料索引&#34;&gt;JavaScript Async List | JavaScript 异步编程资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.codingplayboy.com/2016/01/20/js_async_intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-JavaScript 之异步编程简述&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.codingplayboy.com/2017/04/25/js_async/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JavaScript 异步编程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/asynchronous-javascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Evolution of Asynchronous JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24444262&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;最后谈一次 JavaScript 异步编程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://tutorials.pluralsight.com/front-end-javascript/introduction-to-asynchronous-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction-to-asynchronous-javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.vullum.io/javascript-flow-callback-hell-vs-async-vs-highland/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js Flow (part 1) - Callback Hell vs. Async vs. Highland&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;event-loop&#34;&gt;Event Loop&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2014/10/event-loop.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2014-阮一峰-JavaScript 运行机制详解：再谈 Event Loop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-Tasks, microtasks, queues and schedules&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ccforward/cc/issues/47&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-理解事件循环&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000008589736&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Vue 源码详解之 nextTick：MutationObserver 只是浮云，microtask 才是核心！&lt;/a&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/YuzuJS/setImmediate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-setImmediate.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; &lt;/a&gt;: setImmediate.js is a highly cross-browser implementation of the setImmediate and clearImmediate APIs, proposed by Microsoft to the Web Performance Working Group.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@BenDiuguid/asynchronous-adventures-in-javascript-understanding-the-event-loop-fc6f968d5f72#.6td5rwy71&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Asynchronous Adventures in JavaScript: Understanding the Event Loop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://altitudelabs.com/blog/what-is-the-javascript-event-loop/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is the JavaScript Event Loop?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec?source=linkShare-fe48c4221a4c-1503534847&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding Javascript Function Executions — Call Stack, Event Loop, Tasks &amp;amp; more &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/54882306&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;浏览器和 Node 中 Event Loop 其实是不相同的。&lt;/a&gt;: 本文我们将会介绍 JS 实现异步的原理，并且了解了在浏览器和 Node 中 Event Loop 其实是不相同的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;nodejs-eventloop&#34;&gt;Node.js EventLoop&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Node.js Event Loop, Timers, and process.nextTick()&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-at-scale-understanding-node-js-event-loop/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Understanding the Node.js Event Loop&lt;/a&gt;: This article helps you to understand how the Node.js event loop works, and how you can leverage it to build fast applications. We’ll also discuss the most common problems you might encounter, and the solutions for them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b1l&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-The Node.js Event Loop, Timers, and process.nextTick()&lt;/a&gt;: The event loop is what allows Node.js to perform non-blocking IO operations — despite the fact that JavaScript is single-threaded — by offloading operations to the system kernel whenever possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://asafdav2.github.io/2017/node-js-timers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How does Node.js manage timers internally&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://voidcanvas.com/setimmediate-vs-nexttick-vs-settimeout/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-setImmediate() vs nextTick() vs setTimeout(fn,0) – in depth explanation&lt;/a&gt;: And going through official documents of Node may not really be feasible for non-advanced developers. Hence I decided to come up with this article.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;callback&#34;&gt;Callback&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://callbackhell.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callback Hell&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://oren.github.io/blog/zalgo.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Don&amp;rsquo;t release Zalgo!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;promise&#34;&gt;Promise&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bhz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How to make the fastest Promise library&lt;/a&gt;: I have developed Aigle which is a fast Promise library. It is inspired byBluebird. The library is not only a benchmark exercise but a production-ready library that implements the Promise A+ standard, and does so faster than Bluebird.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://bupt-hjm.github.io/2017/03/23/study-promise/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-理解 Promise 简单实现的背后原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/dkundel/a-quick-guide-to-javascript-promises&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-A quick guide to JavaScript Promises&lt;/a&gt;: When you are writing JavaScript, callbacks are one of the most confusing concepts. Promises are the new approach to improve working with async code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UYb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-ES6 Promises: Patterns and Anti-Patterns&lt;/a&gt;: Here I’ll lay out a few basic patterns I’ve learned while working with Promises, as well as some gotchas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/xieranmaya/blog/issues/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;剖析 Promise 内部结构&lt;/a&gt;: 一步一步实现一个完整的、能通过所有 Test case 的 Promise 类。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/23312442&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;写一个符合 Promises/A+ 规范并可配合 ES7 async/await 使用的 Promise&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261#.yeuxdynfz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Master the JavaScript Interview: What is a Promise?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://staltz.com/promises-are-not-neutral-enough.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Promises are not neutral enough&lt;/a&gt;: Promises in JavaScript create problems which affect the entire ecosystem. In this blog post I’ll explain some of those problems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;generator&#34;&gt;Generator&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bignerdranch.com/blog/asyncing-feeling-about-javascript-generators/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Asyncing Feeling about JavaScript Generators&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uhl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The Hidden Power of ES6 Generators: Observable Async Flow Control&lt;/a&gt;: In that article, I intentionally sidestepped another major use-case for generators. Arguably, the primary use case: Asynchronous flow control.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;asyncawait&#34;&gt;async/await&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jakearchibald.com/2014/es7-async-functions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2014-es7-async-functions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nikgrozev.com/2017/10/01/async-await/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Await and Async Explained with Diagrams and Examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@bluepnume/even-with-async-await-you-probably-still-need-promises-9b259854c161#.w1k2udirb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Even with async/await, raw promises are still key to writing optimal concurrent javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/jIIzOs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The 80/20 Guide to Async/Await in Node.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@matansokolovsky/es7-async-await-pitfalls-d24331388a70#.xkeyncsca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-ES7 Async/Await pitfalls&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nikgrozev.com/2017/10/01/async-await/#composite-promises&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Await and Async Explained with Diagrams and Examples&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UGj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How JavaScript works: Event loop and the rise of Async programming + 5 ways to better coding with async/await&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hapijs/bounce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Bounce 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Selective error catching and rewrite rules. &lt;a href=&#34;https://medium.com/@eranhammer/learning-to-throw-again-79b498504d28&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learning to Throw Again&lt;/a&gt;, &lt;a href=&#34;https://medium.com/@eranhammer/catching-without-awaiting-b2cb7df45790&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Catching without Awaiting&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U6L&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JavaScript ES 2017: Learn Async/Await by Example&lt;/a&gt;: Async/Await explained through a clear example.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/ZMNvVy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Async Await BIBLE: Sequential, Parallel, Nest, Dynamic and Error Handling in Javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yortus/asyncawait#1-introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asyncawait&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.sitepoint.com/simplifying-asynchronous-coding-es7-async-functions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simplifying-asynchronous-coding-es7-async-functions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://pouchdb.com/2015/03/05/taming-the-async-beast-with-es7.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Taming the asynchronous beast with ES7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/mastering-async-await-in-nodejs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mastering Async Await in Node.js&lt;/a&gt;: In this article, you will learn how you can simplify your callback or Promise based Node.js application with async functions (async/await).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://v8.dev/blog/fast-async&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Faster async functions and promises&lt;/a&gt;: This article explores how we optimized async functions and promises in V8 (and to some extent in other JavaScript engines as well), and describes how we improved the debugging experience for async code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;reactive-programming&#34;&gt;Reactive Programming&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bhR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How to build a reactive engine in JavaScript.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-Collection-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-collection-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-collection-list/</guid>
      <description>&lt;h1 id=&#34;javascript-collection-list&#34;&gt;JavaScript Collection List&lt;/h1&gt;
&lt;h1 id=&#34;indexed-collection&#34;&gt;Indexed Collection&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://benediktmeurer.de/2017/07/14/faster-collection-iterators/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Faster Collection Iterators&lt;/a&gt;：ECMAScript 2015 中引入了 Map 与 Set 等常用的集合，这些集合同样实现了迭代器的特性，因此也就允许我们使用 &lt;code&gt;for-of&lt;/code&gt; 或者扩展操作符来迭代操作这些集合。不过在很多的评测中这些新引入的集合的迭代遍历性能并不是很好，本文则详细介绍了引擎中导致 Set 等集合迭代性能较差的原因，并且给出了解决方案与未来的实现规划。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;array&#34;&gt;Array&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bgq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JavaScript 数组所有 API 全解密&lt;/a&gt;：系统讲解了 JavaScript 数组的各种特性和 API。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.com/reduce-f47a7da511a9#.tfgm534ek&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How JavaScript’s Reduce method works, when to use it, and some of the cool things it can do&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;set&#34;&gt;Set&lt;/h2&gt;
&lt;h1 id=&#34;keyed-collection&#34;&gt;Keyed Collection&lt;/h1&gt;
&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;h2 id=&#34;map&#34;&gt;Map&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e#.w282eacyx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What You Should Know About ES6 Maps&lt;/a&gt;: JavaScript ES6 introduces a new data structure, called maps. Maps are designed as an alternative to using Object literals for storing key/value pairs that require unique keys, and provide very useful methods for iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e#.w282eacyx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What You Should Know About ES6 Maps&lt;/a&gt;: JavaScript ES6 introduces a new data structure, called maps. Maps are designed as an alternative to using Object literals for storing key/value pairs that require unique keys, and provide very useful methods for iteration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;dataview&#34;&gt;DataView&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/U83&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A cartoon intro to ArrayBuffers and SharedArrayBuffers&lt;/a&gt;: In the last article, I explained how memory-managed languages like JavaScript work with memory. I also explained how manual memory management works in languages like C.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-DataStructure-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-datastructure-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-datastructure-list/</guid>
      <description>&lt;h1 id=&#34;javascript-datastructure-list&#34;&gt;JavaScript DataStructure List&lt;/h1&gt;
&lt;h1 id=&#34;basic-datatype&#34;&gt;Basic DataType&lt;/h1&gt;
&lt;h2 id=&#34;number&#34;&gt;Number&lt;/h2&gt;
&lt;h2 id=&#34;boolean&#34;&gt;Boolean&lt;/h2&gt;
&lt;h2 id=&#34;symbol&#34;&gt;Symbol&lt;/h2&gt;
&lt;h2 id=&#34;null--undefined--空类型&#34;&gt;Null &amp;amp; Undefined | 空类型&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24881939&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;探索 JavaScript 中 Null 和 Undefined 的深渊&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;7 tips to handle undefined in JavaScript&lt;/a&gt;: When I started to learn JavaScript about eight years ago, a bizarre situation for me was the existence of both undefined and null that represent empty values. What is the clear difference between them? They both seem to define empty values, and moreover the comparison null == undefined evaluates to true.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;type-coercion--类型转换&#34;&gt;Type Coercion | 类型转换&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/U8B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-JavaScript type coercion explained&lt;/a&gt;: Type coercion is the process of converting value from one type to another.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;string&#34;&gt;String&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jeffjade.com/2016/11/24/116-JavaScript-string-operation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 字符串实用常操纪要&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;template-literals&#34;&gt;Template Literals&lt;/h2&gt;
&lt;h2 id=&#34;codec--编码&#34;&gt;Codec | 编码&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://zcw.me/blogwp/front-end-urldecode-gbk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;纯前端 Js 解决各种汉字 urlencode,urldecode(GBK、UTF-8 均可)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2010/02/url_encoding.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阮一峰的网络日志 : 关于 URL 编码&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;datatime&#34;&gt;DataTime&lt;/h1&gt;
&lt;h1 id=&#34;regular-expressions--正则表达式&#34;&gt;Regular Expressions | 正则表达式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://2ality.com/2015/07/regexp-es6.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-New regular expression features in ECMAScript 6&lt;/a&gt;: This blog post explains new regular expression features in ECMAScript 6.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ponyfoo.com/articles/regular-expressions-post-es6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Regular Expressions in a post-ES6 world&lt;/a&gt;: In this article we’ll take a look at regular expressions in and after ES6. There’s a couple of regular expressions flags which were introduced in ES6: the /y or sticky flag, and the /u or Unicode flag. Then we’ll discuss five proposals which are making their way through the ECMAScript specification development process at TC39.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-Engine-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-engine-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-engine-list/</guid>
      <description>&lt;h1 id=&#34;javascript-engine--v8-list&#34;&gt;JavaScript Engine &amp;amp; V8 List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27628685&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-认识 V8 引擎&lt;/a&gt;：V8 是如何使得 JavaScript 性能有大幅提升的呢？通过对一些书籍和文章的学习，梳理了 V8 的相关内容，本文将带你认识 V8。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U3B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding JS Engine with Cartoons&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Node.js V8 internals: an illustrative primer&lt;/a&gt;: It’s really interesting to dig some proof of concept technology, it also will help us to write better code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://6me.us/2dRAT4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;High-performance ES2015 and beyond&lt;/a&gt;: Over the last couple of months the V8 team focused on bringing the performance of newly added ES2015 and other even more recent JavaScript features on par with their transpiled ES5 counterparts.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resource&#34;&gt;Resource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/a0viedo/demystifying-js-engines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;demystifying-js-engines&lt;/a&gt;: 一系列讲解 JavaScript 虚拟机构造的资源整合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://v8project.blogspot.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v8project.blogspot.com 🗃️&lt;/a&gt;: Official V8 blog&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://hllvm.group.iteye.com/group/topic/37596&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rednaxelafx: 各 JavaScript 引擎的简介，及相关资料 / 博客收集帖&lt;/a&gt;: 各 JavaScript 引擎的简介，及相关资料 / 博客收集帖&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/thlorenz/v8-perf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;v8-perf&lt;/a&gt;: Notes and resources related to v8 and thus Node.js performance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.slideshare.net/RednaxelaFX/implement-js-krystalmok20131110&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rednaxelafx: Implementing a JavaScript Engine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;complier&#34;&gt;Complier&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How The Performance Characteristics of V8&amp;rsquo;s Turbofan Will Affect The Way WE Optimize &lt;/a&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Utm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code&lt;/a&gt;: All of our systems consists of microprocessors, the thing that is sitting inside your computer right now and allowing you to read this.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding V8’s Bytecode&lt;/a&gt;: This article explains V8’s bytecode format — which is actually easy to read once you understand some basic concepts.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ast&#34;&gt;AST&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JavaScript Generator: &lt;a href=&#34;https://github.com/inikulin/esotope&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECMAScript code generator on steroids&lt;/a&gt;, &lt;a href=&#34;https://github.com/estools/escodegen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECMAScript code generator&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/understanding-asts-building-babel-plugin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding ASTs by Building Your Own Babel Plugin&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-16-BIT VM IN JAVASCRIPT&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/31096468&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端工程师为什么要学习编译原理？&lt;/a&gt;: 而编译原理，作为一门基础理论学科，除了 JS 语言本身的编译器之外，更成为 Babel、ESLint、Stylus、Flow、Pug、YAML、Vue、React、Marked 等开源前端框架的理论基石之一。了解编译原理能够对所接触的框架有更充分的认识。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;optimization&#34;&gt;Optimization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/Uuv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-An Introduction to Speculative Optimization in V8&lt;/a&gt;: An impressively low-level article that we hope gives you a good idea about what happens in V8 when it comes to optimization.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;babel&#34;&gt;Babel&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/thejameskyle/babel-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Babel Handbook》📚&lt;/a&gt;: A guided handbook on how to use Babel and how to create plugins for Babel.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;memory-management&#34;&gt;Memory Management&lt;/h1&gt;
&lt;h2 id=&#34;memory-allocation&#34;&gt;Memory Allocation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jayconrod.com/posts/52/a-tour-of-v8-object-representation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A tour of V8: object representation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/30848981/answer/51997592&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 中使用 object[key] 查找属性的过程是怎样的呢(相对于 Array 查找元素)？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/exposing-homeobject-e61061cbfe17#.e9vdk64zd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Exposing HomeObject&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MDN: Memory Management&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b70&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Fast Properties in V8&lt;/a&gt;: In this blog post we would like to explain how V8 handles JavaScript properties internally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;garbage-collection&#34;&gt;Garbage Collection&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UpK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Orinoco: young generation garbage collection&lt;/a&gt;: V8 partitions its managed heap into generations where objects are initially allocated in the “nursery” of the young generation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bQG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Garbage collection in V8, an illustrated guide&lt;/a&gt;: I would also like to mention that this guide is meant to be beginner friendly, and does not cover every aspect of memory management within V8, and the rest of V8 internals.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9p&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A crash course in memory management&lt;/a&gt;: To understand why ArrayBuffer and SharedArrayBuffer were added to JavaScript, you need to understand a bit about memory management.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://roman01la.github.io/js-memory-usage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript Memory Usage&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-at-scale-node-js-garbage-collection/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js at Scale - Node.js Garbage Collection Explained&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;memory-leak&#34;&gt;Memory Leak&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://wwsun.github.io/posts/understanding-nodejs-gc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入理解 Node.js 中的垃圾回收和内存泄漏的捕获&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bnw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How JavaScript works: memory management + how to handle 4 common memory leaks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2017/04/memory-leak.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JavaScript 内存泄漏教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.future-processing.pl/blog/a-curious-case-of-memory-leak-in-a-node-js-app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A curious case of memory leak in a node.js app&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://thlorenz.com/talks/demystifying-v8/talk.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Demystifying v8 and JavaScript Performance&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://v8docs.nodesource.com/node-7.2/db/d85/classv8_1_1_object.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 Docs: Object Class Links&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/7413168/how-does-v8-manage-the-memory-of-object-instances&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How does V8 manage the memory of object instances?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.sessionstack.com/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code-ac089e62b12e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How JavaScript works: inside the V8 engine + 5 tips on how to write optimized code&lt;/a&gt;: The first post of the series focused on providing an overview of the engine, the runtime and the call stack. This second post will be diving into the internal parts of Google’s V8 JavaScript engine.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-FunctionalProgramming-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-functionalprogramming-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-functionalprogramming-list/</guid>
      <description>&lt;h1 id=&#34;javascript-functional-programming-list&#34;&gt;JavaScript Functional Programming List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/SJr7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Eric Elliott: Composing Software&lt;/a&gt;: series on learning functional programming and compositional software techniques in JavaScript ES6+ from the ground up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/1P1r&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Functional Programming In JavaScriptn #Series#&lt;/a&gt;: Functional Programming(FP) can change the way you program for the better. But it’s hard to learn and many posts and tutorials don’t go into details like Monads, Applicative and so on and don’t seem to use practical examples to help us use powerful FP techniques on a daily basis. That’s why I thought of writing a post to make it easier to use FP techniques.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-functional-programming-7f218c68b3a0#.huw4ylx0v&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Master the JavaScript Interview: What is Functional Programming?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hemanth/functional-programming-jargon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Functional Programming Jargon In JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;So You Want to be a Functional Programmer&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UQn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-avascript and Functional Programming #Series#&lt;/a&gt;: This is part of the “Javascript and Functional Programming” series on learning functional programming techniques in JavaScript ES6+.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;immutable&#34;&gt;Immutable&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@dtinth/immutable-js-persistent-data-structures-and-structural-sharing-6d163fbd73d2#.owzsyqtbd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Immutable.js, persistent data structures and structural sharing&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/camsong/blog/issues/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Immutable 详解及 React 中实践&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;high-order-function&#34;&gt;High-Order Function&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/pigtail/p/3447660.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端开发者进阶之函数柯里化 Currying&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/pigtail/p/3450852.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端开发者进阶之函数反柯里化 unCurrying&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fe.ele.me/javascript-zhong-de-wei-diao-yong/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 中的尾调用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Functional Mixins&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;functor--monad&#34;&gt;Functor &amp;amp; Monad&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bB3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JavaScript Monads Made Simple&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Challenge: Program without variables #javascript&lt;/a&gt;: The challenge is to create a piece of software (something real, tangible and more than a hello world) without any variables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/briancavalier/3296186&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A proof that Promises/A is a Monad&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://curiosity-driven.org/monads-in-javascript#continuation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Monads in JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/07/monad.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;图解 Monad&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@roman01la/understanding-transducers-in-javascript-3500d3bd9624#.qicl6ze0h&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Understanding Transducers in JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;libraries&#34;&gt;Libraries&lt;/h1&gt;
&lt;h2 id=&#34;immer&#34;&gt;immer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/introducing-immer-immutability-the-easy-way-9d73d8f71cb3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Introducing Immer: Immutability the easy way&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-list/</guid>
      <description>&lt;h1 id=&#34;awesome-javascript-list&#34;&gt;Awesome JavaScript List&lt;/h1&gt;
&lt;p&gt;This file aggregates curated popular links for learning JavaScript. More reference about ITCS can turn to &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList: Guide to Galaxy&lt;/a&gt;, which collects valuable, popular and up-to-date links for CS, including Programming Language, Software Engineering, Server Side Application, Infrastructure, InfoSecurity, Industrial Application, DataScienceAI, Frontend Technology(iOS, Android, RN, Electron), etc.&lt;/p&gt;
&lt;h1 id=&#34;overview--概述&#34;&gt;Overview | 概述&lt;/h1&gt;
&lt;h2 id=&#34;javascript-history&#34;&gt;JavaScript History&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/a-brief-history-of-javascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-A Brief History of JavaScript&lt;/a&gt;: We take a look at the evolution of JavaScript, arguably one of the most important languages of today, and tomorrow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/javascript-a-first-class-language-at-last-209376f69731&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JavaScript — A First-Class Language At Last&lt;/a&gt;: As a JavaScript engineer, I wanted to dig deeper into the public perception of the language and how rooted in reality it is. What I found is that some criticisms hold water, but many do not.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cheatsheet--语法速览&#34;&gt;CheatSheet | 语法速览&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/I7A1iC8Et6uOGZ234DsTlA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JavaScript 核心概念归纳整理&lt;/a&gt;：本文针对 JavaScript 语言的核心概念进行简单的梳理，对应的每个知识点仅仅点到为止，不作详细介绍。目的是为了方便大家快速审查自己对 JavaScript 的知识结构是否完善，如有遗漏或不正确的地方，还望批评指正。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/scastiel/writing-modern-javascript-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Writing modern JavaScript code&lt;/a&gt;: I&amp;rsquo;ll try here to list some good practices to make your JavaScript code easier to write, read and maintain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/denysdovhan/wtfjs#-is-equal-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-What the f*ck JavaScript?&lt;/a&gt;: A list of funny and tricky JavaScript examples&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mbeaudru/modern-js-cheatsheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Modern JavaScript Cheatsheet&lt;/a&gt;: This document is a cheatsheet for JavaScript you will frequently encounter in modern projects and most contemporary sample code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UZS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The Definitive JavaScript Handbook for a developer interview &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Chalarangelo/30-seconds-of-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-30 seconds of code&lt;/a&gt;: Curated collection of useful Javascript snippets that you can understand in 30 seconds or less.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource--资料集锦&#34;&gt;Resource | 资料集锦&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/snwXG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Master JavaScript Programming With 18 OpenSource Books 🗃️&lt;/a&gt;: This compilation focuses on the JavaScript language with 18 solid recommendations. There are books here for beginner, intermediate, and advanced programmers alike. All of the texts are released under an open source license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sorrycc/awesome-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome JavaScript 🗃️&lt;/a&gt;: A collection of awesome browser-side JavaScript libraries, resources and shiny things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://bonsaiden.github.io/JavaScript-Garden/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript-Garden&lt;/a&gt;: JavaScript Garden is a growing collection of documentation about the most quirky parts of the JavaScript programming language. It gives advice to avoid common mistakes and subtle bugs, as well as performance issues and bad practices, that non-expert JavaScript programmers may encounter on their endeavours into the depths of the language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U37&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Must-Watch JavaScript 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This is a collection of well-received talks about JavaScript, covering topics such as ES6, JavaScript frameworks, client-side apps, mobile integration, JavaScript performance, tooling, leveling up, and more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://es6.ruanyifeng.com/#README&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-ECMAScript 6 入门》📚&lt;/a&gt;：ECMAScript 6 入门是由阮一峰老师编写的一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ponyfoo.com/articles/tagged/es6-in-depth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-ES6 in Depth》📚&lt;/a&gt;: A twenty-four article-long series of pragmatic articles describing JavaScript language features in ES6. 中文译本&lt;a href=&#34;&#34;&gt;深入浅出 ES6&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://exploringjs.com/es6/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-Exploring ES6》📚&lt;/a&gt;: Upgrade to the next version of JavaScript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://javascript.info/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The Modern JavaScript Tutorial》📚&lt;/a&gt;: How it&amp;rsquo;s done now. From the basics to advanced topics with simple, but detailed explanations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bpesquet/thejsway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The JavaScript Wa》📚&lt;/a&gt;: A modern introduction to an essential language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/iliakan/javascript-tutorial-en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern JavaScript Tutorial》📚&lt;/a&gt;: How it&amp;rsquo;s done now. From the basics to advanced topics with simple, but detailed explanations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dmitrysoshnikov.com/ecmascript/javascript-the-core-2nd-edition/#class&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript. The Core: 2nd Edition》📚&lt;/a&gt;: This is the second edition of the JavaScript. The Core overview lecture, devoted to ECMAScript programming language and core components of its runtime system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://exploringjs.com/es2018-es2019/toc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Exploring ES2018 and ES2019》📚&lt;/a&gt;: This book is about two versions of JavaScript: ECMAScript 2018 and ECMAScript 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;You don’t know Js&lt;/a&gt;: 关于 JavaScript 中很多的细节部分讲解&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://eloquentjavascript.net/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eloquent Javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://exploringjs.com/deep-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Deep JavaScript: Theory and techniques》📚&lt;/a&gt;: This book dives deeply into JavaScript, It teaches practical techniques for using the language better. It teaches how the language works and why. What it teaches is firmly grounded in the ECMAScript specification (which the book explains and refers to).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sumn2u/learn-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023-Learn JavaScript》📚&lt;/a&gt;: This book is divided into three main parts. The first 14 chapters cover the JavaScript language. The following three chapters discuss how JavaScript is used to program web browsers. The final two chapters are miscellaneous, and exercises. Various important topics and cases related to JavaScript programming are described in the Miscellaneous chapter, which is followed exercises.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;collection&#34;&gt;Collection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/javascript-society/javascript-path&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github-JavaScript Path JavaScript 学习规划&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ericelliott/essential-javascript-links&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;essential-javascript-links&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wwsun/awesome-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;awesome-javascript-guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;course&#34;&gt;Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bradtraversy/vanillawebprojects&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-20+ Web Projects With Vanilla JavaScript 🎥&lt;/a&gt;: Mini projects built with HTML5, CSS &amp;amp; JavaScript. No frameworks or libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/beginners-intro-javascript-node&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Beginner&amp;rsquo;s Series: Introduction to JavaScript (Node.js) 🎥&lt;/a&gt;: We created a video series to aid the burgeoning developer curious about writing JavaScript for Node.js. Our goal is to help show you enough JavaScript to give you the background needed to begin working through quick starts and tutorials focused on frameworks and SDKs using JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;series&#34;&gt;Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sohamsshah/JavaScriptONLY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScriptONLY #Series#&lt;/a&gt;: Its an attempt to provide high quality, well-written set of notes for anyone who wants to learn and refer JavaScript concepts in deep.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Asabeneh/30-Days-Of-JavaScript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-30-Days-Of-JavaScript #Series#&lt;/a&gt;: 30 days of JavaScript programming challenge is a step-by-step guide to learn JavaScript programming language in 30 days. This challenge may take more than 100 days, please just follow your own pace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wesbos/JavaScript30&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-JavaScript30 #Series#&lt;/a&gt;: Starter Files + Completed solutions for the JavaScript 30 Day Challenge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://exploringjs.com/es2018-es2019/toc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Exploring ES2018 and ES2019&lt;/a&gt;: This book is about two versions of JavaScript: ECMAScript 2018 and ECMAScript 2019.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bwX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-To type or not to type: quantifying detectable bugs in JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://weeklywebwisdom.com/2017/09/24/javascript-closures-explained-in-depth/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Javascript closures explained in depth&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UlR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;6 Simple Tips on How to Start Writing Clean Code&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.datchley.name/es6-promises/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-ES6 Promises&lt;/a&gt;: there is a better pattern using Promises, which give us much more than just an escape from callback hell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/how-to-write-clean-code-for-cascaded-promises-809de5b950fd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How to write clean code for cascaded promises&lt;/a&gt;: An in-depth guide about working with Interdependent Promises&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeburst.io/promise-error-handling-in-depth-90b0965149c0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Promise error handling in-depth&lt;/a&gt;: This blog is written in Q and A form and targeting those who are looking for the answers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vasanthk/js-bits&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-js-bits #Series#&lt;/a&gt;: JavaScript concepts explained with code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Asabeneh/30DaysOfJavaScript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-30DaysOfJavaScript #Series#&lt;/a&gt;: A 30 days of JavaScript programming challenge.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;es6&#34;&gt;ES6&lt;/h2&gt;
&lt;h2 id=&#34;modern-javascript--现代-javascript-明晰&#34;&gt;Modern JavaScript | 现代 JavaScript 明晰&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/10-languages-compile-javascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10 Languages That Compile to JavaScript&lt;/a&gt;: This article includes a list of ten interesting languages that can be transpiled to JavaScript to be executed in the browser or on a platform like Node.js.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mbeaudru/modern-js-cheatsheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modern JavaScript cheatsheet&lt;/a&gt;: This document is a cheatsheet for JavaScript you will frequently encounter in modern projects and in most contemporary sample code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-A Brief, Incomplete History of JavaScript&lt;/a&gt;: Where did we start, where are we now, how did we get here, and why?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UAf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Modern JavaScript Explained For Dinosaurs&lt;/a&gt;: The ecosystem is growing and changing so rapidly that it’s hard to understand the problems that different tools are trying to solve.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-What’s the difference between JavaScript and ECMAScript?&lt;/a&gt;: This article represents my current understanding of the differences between JavaScript and ECMAScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/craft-academy/everything-i-learned-from-javascript30-d8d2db246b7?source=userActivityShare-fe48c4221a4c-1488448383&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Everything I learned from #Javascript30&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/glossary-of-modern-javascript-concepts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Glossary of Modern JavaScript&lt;/a&gt;: In this article, we&amp;rsquo;ll address concepts that are crucial to understanding functional programming, reactive programming, and functional reactive programming and their use with JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codetower.github.io/es6-features/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;简明 ES6 Features 列表&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/the-real-story-behind-es4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Real Story Behind ECMAScript 4&lt;/a&gt;: Our JavaScript history article sparked interesting comments regarding what really happened during the ECMAScript 4 era. Below you will find a more detailed perspective of what really went down between 1999 and 2008 in the world of JavaScript. Read on!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@Eugeniya/es8-feature-set-javascript-is-getting-asynchronous-2a8a43dd0cbc#.brnqngo2n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ES8 Feature Set: JavaScript is Getting Asynchronous&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://speakerdeck.com/rauschma/ecmascript-2017-and-beyond&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECMAScript 2017 and beyond&lt;/a&gt;: In this talk, we’ll go into the latest JavaScript features and how they are designed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ecmascript&#34;&gt;ECMAScript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bXD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TC39, ECMAScript, and the Future of JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-opensource-list/</guid>
      <description>&lt;h1 id=&#34;javascript-opensource-list&#34;&gt;JavaScript OpenSource List&lt;/h1&gt;
&lt;h1 id=&#34;showcase&#34;&gt;Showcase&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/olistic/warriorjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WarriorJS 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: An exciting game of programming and Artificial Intelligence.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JoelOtter/kajero&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kajero 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Interactive JavaScript notebooks with clever graphing&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;devtools&#34;&gt;DevTools&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nuxt/consola&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Consola 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Elegant Console Logger&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pastelsky/bundlephobia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bundlephobia 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Find out the cost of adding a new frontend dependency to your project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;compiler&#34;&gt;Compiler&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://babeljs.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Babel 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Babel is a JavaScript compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://swc.rs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;swc 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: swc is a typescript / javascript compiler. It consumes a javascript or typescript file which uses recently added features like async-await and emits javascript code which can be executed on old browsers.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;library&#34;&gt;Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ramdajs.com/0.22.1/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rambda 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mweststrate/immer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;immer 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Create the next immutable state tree by simply modifying the current tree.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/isaacs/minimatch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;minimatch&lt;/a&gt;: a glob matcher in javascript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/fbjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fbjs 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A collection of utility libraries used by other Facebook JS projects.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;datastructure&#34;&gt;DataStructure&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fzred/calculatorjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Calculatorjs 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Accurately arithmetic library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/adamwdraper/Numeral-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Numeral-js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A javascript library for formatting and manipulating numbers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ecrmnn/collect.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;collect.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Convenient and dependency free wrapper for working with arrays and objects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AsyncBanana/microdiff&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microdiff 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Microdiff is a tiny (currently &amp;lt;1kb), fast, zero dependency object and array comparison library. It is significantly faster than most other deep comparison libraries, and has full TypeScript support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ChrisCavs/aimless.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023-Aimless.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/ChrisCavs/aimless.js&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Aimless is the missing JS randomness library. It&amp;rsquo;s tiny (&amp;lt; 6kB), unopinionated, dependency-free, and provides a variety of helpful random number utilities. Best of all, it&amp;rsquo;s compatible with all your favorite PRNGs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;string&#34;&gt;String&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Polymer/lit-html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lit-html 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: An efficient, expressive, extensible HTML templating library for JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/patorjk/figlet.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;figlet.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This project aims to fully implement the FIGfont spec in JavaScript. It works in the browser and with Node.js. You can see it in action here: &lt;a href=&#34;http://patorjk.com/software/taag/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://patorjk.com/software/taag/&lt;/a&gt; (the figlet.js file was written to power that application)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;object-schema&#34;&gt;Object Schema&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jquense/yup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yup 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Dead simple Object schema validation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kristianmandrup/schema-to-yup&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;schema-to-yup 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Schema to Yup validation schema conversion.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;datetime&#34;&gt;DateTime&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/moment/luxon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Luxon 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Luxon is a library for working with dates and times in Javascript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/xx45/dayjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dayjs 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Fast 2KB immutable date library alternative to Moment.js with the same modern API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://date-fns.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;date-fns 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: date-fns provides the most comprehensive, yet simple and consistent toolset for manipulating JavaScript dates in a browser &amp;amp; Node.js.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;class&#34;&gt;Class&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/typestack/typedi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeDI 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: TypeDI is a dependency injection tool for JavaScript and TypeScript. Using TypeDI you can build well-structured and easily tested applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;other&#34;&gt;Other&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sweetjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sweet 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Sweet brings the hygienic macros of languages like Scheme and Rust to JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nearform/lyra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lyra 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 🌌 Fast, in-memory, typo-tolerant, full-text search engine written in TypeScript.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;engine&#34;&gt;Engine&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/hermes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hermes 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Hermes is a small and lightweight JavaScript engine optimized for running React Native on Android.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jerryscript-project/jerryscript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JerryScript 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Ultra-lightweight JavaScript engine for the Internet of Things.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Jarred-Sumner/bun&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bun 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Incredibly fast JavaScript runtime, bundler, transpiler and package manager – all in one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;parser&#34;&gt;Parser&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ternjs/acorn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Acorn 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A small, fast, JavaScript-based JavaScript parser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/babel/babylon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;babylon 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://astexplorer.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AST Explorer 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/axa-group/Parsr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Parsr 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Transforms PDF, Documents and Images into Enriched Structured Data&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;interpreter&#34;&gt;Interpreter&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bramblex/jsjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jsjs 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 简易的 JavaScript 元循环解释器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/axetroy/vm.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vm.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Javascript Interpreter, run Javascript code in ECMAScript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/losfair/blueboat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blueboat 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Blueboat is an all-in-one, multi-tenant serverless JavaScript runtime. See the site for a brief introduction on features.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-Pattern-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-pattern-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-pattern-list/</guid>
      <description>&lt;h1 id=&#34;javascript-epractices-list&#34;&gt;JavaScript EPractices List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJ4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Composing Software #Series#&lt;/a&gt;: the “Composing Software” series on learning functional programming and compositional software techniques in JavaScript ES6+ from the ground up.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://jinlong.github.io/2015/08/31/secrets-of-awesome-javascript-api-design/?utm_source=tuicool&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript API 设计原则&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;styleguide&#34;&gt;StyleGuide&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/airbnb/javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-Airbnb JavaScript Style Guide 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; &lt;/a&gt;: A mostly reasonable approach to JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/danielstjules/jsinspect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-jsinspect 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; &lt;/a&gt;:Detect copy-pasted and structurally similar code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/javascript-scene/elements-of-javascript-style-caa8821cb99f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Elements of JavaScript Style&lt;/a&gt;: These guidelines have stood the test of time for good reason: They’re usually right. Deviate from them only for good reason — not simply on a whim or a personal style preference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bI3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Project Guidelines&lt;/a&gt;: A set of best practices for JavaScript projects&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/J450&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How linting and ESLint improve code quality&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/how-to-use-eslint-in-node-js-applications-cc4b2298ce55&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to use ESLint in Node.js Applications?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/Mi8op&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Rethinking JavaScript #Series#&lt;/a&gt;: 本系列文章介绍了作者在 JavaScript 开发中的一些实践技巧，包括 &lt;a href=&#34;https://hackernoon.com/rethinking-javascript-death-of-the-for-loop-c431564c84a8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Death of the for Loop&lt;/a&gt; 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://jstherightway.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript The Right Way&lt;/a&gt; - An easy-to-read, quick reference for JS best practices, accepted coding standards, and links around the Web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://google.github.io/styleguide/jsguide.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google JavaScript Style Guide&lt;/a&gt; - This document serves as the complete definition of Google’s coding standards for source code in the JavaScript programming language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/airbnb/javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airbnb JavaScript Style Guide&lt;/a&gt; - A mostly reasonable approach to JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://contribute.jquery.org/style-guide/js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jQuery Core Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://addyosmani.com/blog/javascript-style-guides-and-beautifiers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript Style Guides And Beautifiers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3schools.com/js/js_conventions.asp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript Style Guide and Coding Conventions&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://javascript.crockford.com/code.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code Conventions for the JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;design-pattern&#34;&gt;Design Pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Learning JavaScript Design Patterns&lt;/a&gt;: In this book we will explore applying both classical and modern design patterns to the JavaScript programming language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;eslint&#34;&gt;ESLint&lt;/h2&gt;
&lt;h1 id=&#34;performance&#34;&gt;Performance&lt;/h1&gt;
&lt;h1 id=&#34;production&#34;&gt;Production&lt;/h1&gt;
&lt;h2 id=&#34;tool&#34;&gt;Tool&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>JavaScript-TypeSystem-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-typesystem-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/javascript-typesystem-list/</guid>
      <description>&lt;h1 id=&#34;javascript-typesystem-list&#34;&gt;JavaScript TypeSystem List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/niieani/typescript-vs-flowtype&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-TypeScript vs Flow&lt;/a&gt;: Differences between Flowtype and TypeScript &amp;ndash; syntax and usability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://jaredforsyth.com/type-systems-js-dev/#/5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Type systems will make you a better JavaScript programmer&lt;/a&gt;: Managing large JavaScript codebases is challenging — whenever we casually pass objects from Chrome’s JavaScript to Objective-C just to receive a callback on a different thread in Node.js, we need a guarantee that the individual pieces fit together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://thejameskyle.com/adopting-flow-and-typescript.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Adopting Flow &amp;amp; TypeScript&lt;/a&gt;: A comparison between the two on-boarding processes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://djcordhose.github.io/flow-vs-typescript/flow-typescript-2.html#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flow vs TypeScript Type Systems for JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@preethikasireddy/why-use-static-types-in-javascript-part-1-8382da1e0adb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why use static types in JavaScript? #Series#&lt;/a&gt;: Note that I chose Flow over TypeScript in the examples in this post because of my familiarity with it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;runtime-type-information&#34;&gt;Runtime Type Information&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bB5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Runtime type information for JavaScript&lt;/a&gt;: Chrome’s V8 can now collect type information at runtime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;flow&#34;&gt;Flow&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-What I Love and Hate About Flow&lt;/a&gt;: I’m not talking about incontinence, that’s flomax!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26401539&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flow 中的联结类型使用详解&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tutoria--教程&#34;&gt;Tutoria | 教程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/type-checking-in-javascript-getting-started-with-flow-8532c11aceb3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type Checking In JavaScript: Getting Started with Flow.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26204569&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Flow 的使用入门&lt;/a&gt;：Facebook 刚刚上线了重构之后的 Flow 官方站点，新的站点结构清晰、内容丰富。如果你想深入学习使用 Flow，最好的办法当然是直接看官方文档；不过如果你没有太多时间去看完整文档，我们为你准备了这篇 Flow 的基本入门知识。注意，本文不会分享如何具体安装以及在项目中配置 Flow，关于这些，你可以参考这篇文章。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26401539&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Flow 中的联结类型使用详解&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b27&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The definitive guide for using Flow static JavaScript type checker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resource--资源&#34;&gt;Resource | 资源&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dustinspecker/awesome-flow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-awesome-flow&lt;/a&gt;: A list of awesome Flow integrations, tools, tutorials, etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;syntax--语法介绍&#34;&gt;Syntax | 语法介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.callstack.io/type-checking-react-and-redux-thunk-with-flow-part-1-ad12de935c36#.i4tr67qtz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Type-checking React and Redux (+Thunk) with Flow — Part 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices--实践&#34;&gt;Engineering Practices | 实践&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@forbeslindesay/covariance-and-contravariance-c3b43d805611#.1jh1c2s36&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flow’s best kept secret&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@gcanti/immutability-with-flow-faa050a1aef4#.66vxtew0s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Immutability with Flow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ryyppy/shipping-flowtype-definitions-in-npm-packages-c987917efb65#.3d39c4xr4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shipping Flowtype Definitions in NPM Packages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Linting in Flow&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/typescript-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/typescript-list/</guid>
      <description>&lt;h1 id=&#34;typescript-list&#34;&gt;TypeScript List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://redditblog.com/2017/06/30/why-we-chose-typescript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Why We Chose Typescript&lt;/a&gt;: Frontend engineering is in a very different state than it was when Reddit was first conceived.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://slack.engineering/typescript-at-slack-a81307fa288d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-TypeScript at Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript-Handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-TypeScript Handbook》📚&lt;/a&gt;: The TypeScript Handbook is a comprehensive guide to the TypeScript language.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://basarat.gitbooks.io/typescript/content/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-TypeScript Deep Dive》📚&lt;/a&gt;: This is based on the lessons from Stack Overflow / DefinitelyTyped and general engagement with the TypeScript community. 中文版参考 &lt;a href=&#34;https://jkchao.github.io/typescript-book-chinese/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入理解 TypeScript&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dzharii/awesome-typescript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome TypeScript 🗃️&lt;/a&gt;: A collection of awesome TypeScript resources for client-side and server-side development. Write your awesome JavaScript in TypeScript. Inspired by the awesome lists.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design Patterns in TypeScript 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Here are the implementations of the following design patterns in TypeScript.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shekhargulati/52-technologies-in-2016/tree/master/17-typescript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Let&amp;rsquo;s Learn TypeScript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepen.com/blog/2017/11/01/common-typescript-error-messages/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Common TypeScript Error Messages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codewithstyle.info/advanced-functional-programming-typescript-monads-generators/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Advanced functional programming in TypeScript&lt;/a&gt;: In this post, you’ll see how to take advantage of generators to make the monadic code more readable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeScript Practical Introduction&lt;/a&gt;: Let&amp;rsquo;s learn TypeScript features through practical examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@KevinBGreene/surviving-the-typescript-ecosystem-writing-type-safe-ish-javascript-code-1e8375819d2e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Surviving the TypeScript Ecosystem #Series#&lt;/a&gt;: I won’t be explaining anything around the JavaScript ecosystem and I won’t be covering with any depth TypeScript features that are intuitive and/or consistent with other statically-typed languages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mariusschulz.com/blog/series/typescript-evolution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-TypeScript Evolution #Series#&lt;/a&gt;: The TypeScript Evolution series consists of 40 posts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://startup-cto.net/10-bad-typescript-habits-to-break-this-year/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-10 bad TypeScript habits to break this year&lt;/a&gt;: TypeScript and JavaScript have steadily evolved over the last years, and some of the habits we built over the last decades have become obsolete. Some might never have been meaningful. Here&amp;rsquo;s a list of 10 habits that we all should break.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/total-typescript/beginners-typescript-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-beginners-typescript 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: An interactive TypeScript tutorial for beginners.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;advanced-types&#34;&gt;Advanced Types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/type-challenges/type-challenges&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;type-challenges 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Collection of TypeScript type challenges with online judge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cassiozen/TDungeon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TDungeon 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: TDungeon is a small adventure game that runs in the Typescript type system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/total-typescript/advanced-patterns-workshop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TS Patterns&lt;/a&gt;: An interactive TypeScript repo on advanced patterns (WIP)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>TypeScript-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/typescript-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/javascript/typescript-opensource-list/</guid>
      <description>&lt;h1 id=&#34;typescript-opensource-list&#34;&gt;TypeScript OpenSource List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/reflect-metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;reflect-metadata 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A number of use cases (Composition/Dependency Injection, Runtime Type Assertions, Reflection/Mirroring, Testing) want the ability to add additional metadata to a class in a consistent manner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DefinitelyTyped 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The repository for high quality TypeScript type definitions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://palantir.github.io/tslint/usage/tslint-json/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tslint.json 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: When using the CLI or many third-party tools, a file named tslint.json is used to configure which rules get run.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/deepkit/deepkit-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deepkit-framework 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A new full-featured and high-performance web framework for sophisticated web applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/samchon/typescript-json&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;typescript-json 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Super-fast Runtime validator (type checker) with only one line&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/colinhacks/zod&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;zod 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: TypeScript-first schema validation with static type inference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/total-typescript/ts-reset&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023-ts-reset 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/total-typescript/ts-reset&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A &amp;lsquo;CSS reset&amp;rsquo; for TypeScript, improving types for common JavaScript API&amp;rsquo;s&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
