<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ConcurrentProgramming | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/index.xml" rel="self" type="application/rss+xml" />
    <description>ConcurrentProgramming</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>ConcurrentProgramming</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/</link>
    </image>
    
    <item>
      <title>Akka-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/akka-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/akka-list/</guid>
      <description>&lt;h1 id=&#34;akka-list&#34;&gt;Akka List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/cn/java/j-jvmc5/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 并发性: 使用 Akka 执行异步操作&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/news/2015/12/akka-to-the-rescue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Akka 来优化 Spark+ElasticSearch 的准实时系统&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzIxMjAzMDA1MQ==&amp;amp;mid=2648945467&amp;amp;idx=1&amp;amp;sn=bc28e770ecce7e02511124c2830230d2#rd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;什么才是真正的 Actor 模型&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java-Async-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/java-async-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/java-async-list/</guid>
      <description>&lt;h1 id=&#34;java-async-list&#34;&gt;Java Async List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jianshu.com/p/0cd258eecf60&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-这可能是最好的 RxJava 2.x 教程&lt;/a&gt;: 近两年来国内的技术圈子中越来越多的开始提及 RxJava，越来越多的应用和面试中都会有 RxJava。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://realm.io/news/mobilization-hugo-visser-rxjava-for-rest-of-us/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RxJava for the Rest of Us&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/lzyzsd/article/details/41833541&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 RxJava&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.danlew.net/2016/01/25/rxjavas-repeatwhen-and-retrywhen-explained/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RxJava&amp;rsquo;s repeatWhen and retryWhen, explained&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ms.csdn.net/geek/57742&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;彻底搞懂 RxJava&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mcxiaoke.gitbooks.io/rxdocs/content/Intro.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RxJava 官方文档中文翻译&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/fuzz/howdy-rxjava-8f40fef88181#.hzvemavv6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;howdy-rxjava&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lzyzsd/Awesome-RxJava&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Awesome RxJava 🗃️&lt;/a&gt;: RxJava resources.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mgp/effective-rxjava&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Effective RxJava&lt;/a&gt;:一系列基于 RxJava 最佳实践的文章&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/lzyzsd/article/details/41833541&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 RxJava&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java-ConcurrentProgramming-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/java-concurrentprogramming-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/java-concurrentprogramming-list/</guid>
      <description>&lt;h1 id=&#34;java-concurrent-programming-list&#34;&gt;Java Concurrent Programming List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ifeve.com/concurrency-paper/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2014-Java 并发导论&lt;/a&gt;：由于之前工作中的疏忽，在使用 Java 多线程并发的时候出了问题，遂决心全面学习并发相关知识。写作本文的意图只是希望在写作过程中把想不清楚或是一时无法掌握的地方反复揣摩记录下来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.qingjingjie.com/blogs/23&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 并发编程模型览&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-concurrency/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-Java Concurrency/Multithreading Tutorial&lt;/a&gt;: The trail will primarily be concerned with multithreading in Java, but some of the problems occurring in multithreading are similar to problems occurring in multitasking and in distributed systems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.open-open.com/lib/view/open1421202894171.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 并发的四种风味：Thread、Executor、ForkJoin 和 Actor&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://winterbe.com/posts/2015/04/07/java8-concurrency-tutorial-thread-executor-examples/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;java8-concurrency-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://tutorials.jenkov.com/java-util-concurrent/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;java-util-concurrent&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@behzodbekqodirov/threading-java-541bd986647d#.lmwvdmeje&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Threading in Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ginobefunny.com/post/java_concurrent_interview_questions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-面试小结之并发篇&lt;/a&gt;：最近面试一些公司，被问到的关于 Java 并发编程的问题，以及自己总结的回答。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bO2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-所有对象都自动含有单一的锁与一个对象可以被多次加锁的矛盾？&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/0478e283cfef&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Java 线程池的理论与实践&lt;/a&gt;：本文将会包含以下内容：Java 中的 Thread 与操作系统中的线程的关系、线程切换的各种开销、ThreadGroup 存在的意义、使用线程池减少线程开销、Executor 的概念、ThreadPoolExecutor 中的一些具体实现、如何监控线程的健康、参考 ThreadPoolExecutor 来设计适合自己的线程模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/using-timer-class-to-schedule-tasks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Using the Timer Class to Schedule Tasks&lt;/a&gt;: Setting up simple scheduled tasks within an app is easy with the Timer class. There&amp;rsquo;s a lot of versatility in the class, giving you plenty of customization.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/using-timer-class-to-schedule-tasks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using the Timer Class to Schedule Tasks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Concurrency Patterns and Features 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Concurrency Patterns and features found in Java, through multithreaded programming. Threads, Locks, Atomics and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.callicoder.com/java-concurrency-multithreading-basics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Java Concurrency / Multithreading Basics&lt;/a&gt;: Concurrency is the ability to do more than one thing at the same time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;collection&#34;&gt;Collection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/qiurunze123/threadandjuc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-threadandjuc 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/qiurunze123/threadandjuc&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: ⭐⭐⭐⭐ 高并发-高可靠-高性能 three-high-import 导入系统-高并发多线程进阶&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/CL0610/Java-concurrency&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-CL0610/Java-concurrency 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/CL0610/Java-concurrency&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;:
整个系列文章为 Java 并发专题，一是自己的兴趣，二是，这部分在实际理解上很有难度，另外在面试过程中也是经常被问到。所以在学习过程中，记录了 Java 并发相关的基础知识，一是自己对知识能够建立体系，同时也希望有幸能够对其他人有用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;series&#34;&gt;Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cmsblogs.com/?author=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;死磕 Java 并发系列 #Series#&lt;/a&gt;：&lt;a href=&#34;http://cmsblogs.com/?p=2188&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;J.U.C 之 AQS：CLH 同步队列&lt;/a&gt;、&lt;a href=&#34;http://cmsblogs.com/?p=2174&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;J.U.C 之 AQS：AQS 简介&lt;/a&gt;、&lt;a href=&#34;http://cmsblogs.com/?p=2167&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 内存模型之总结&lt;/a&gt;、&lt;a href=&#34;http://cmsblogs.com/?p=2161&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 内存模型之从 JMM 角度分析 DCL&lt;/a&gt;、&lt;a href=&#34;http://cmsblogs.com/?p=2148&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 内存模型之分析 volatile&lt;/a&gt;、&lt;a href=&#34;http://cmsblogs.com/?p=2122&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;死磕 Java 系列博客&lt;/a&gt;、&lt;a href=&#34;http://cmsblogs.com/?p=2116&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 内存模型之重排序&lt;/a&gt;、&lt;a href=&#34;http://cmsblogs.com/?p=2102&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Java 内存模型之 happens-before&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/RedSpider1/concurrent&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-RedSpider Concurrent #Series#&lt;/a&gt;: 这是 RedSpider 社区成员原创与维护的 Java 多线程系列文章。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;concurrency-primitives--并发单元&#34;&gt;Concurrency Primitives | 并发单元&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/aCoder2013/blog/issues/3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-深度解析 Java 线程池的异常处理机制&lt;/a&gt;: 线程池提交的任务如果没有 catch 异常，那么会抛到哪里去？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/TOE3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-从 0 到 1 学习 Java 线程池 #Series#&lt;/a&gt;：该系列文章总共三篇，介绍了 Java 线程池的使用以及原理，并且最后会实现一个基本的线程池。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;async-patterns--异步模式&#34;&gt;Async Patterns | 异步模式&lt;/h1&gt;
&lt;h1 id=&#34;concurrency-control--并发控制&#34;&gt;Concurrency Control | 并发控制&lt;/h1&gt;
&lt;h2 id=&#34;variables--变量&#34;&gt;Variables | 变量&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.baeldung.com/java-atomic-variables&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-An Introduction to Atomic Variables in Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://allenwu.itscoder.com/threadlocal-source&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入理解 Java 之 ThreadLocal 工作原理&lt;/a&gt;: 简单理解“Thread”即线程，“Local”即本地。连续起来理解就是 每个线程本地独有的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;coroutine&#34;&gt;Coroutine&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://cr.openjdk.java.net/~rpressler/loom/Loom-Proposal.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Project Loom: Fibers and Continuations for the Java Virtual Machine&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.callicoder.com/java-8-completablefuture-tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Java CompletableFuture Tutorial with Examples&lt;/a&gt;: In this post I’ll give you a detailed explanation of CompletableFuture and all its methods using simple examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Java-ConcurrentProgramming-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/java-concurrentprogramming-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/01.cs/language/java/concurrentprogramming/java-concurrentprogramming-opensource-list/</guid>
      <description>&lt;h1 id=&#34;java-concurrent-programming-list&#34;&gt;Java Concurrent Programming List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alibaba/transmittable-thread-local&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-TransmittableThreadLocal 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/alibaba/transmittable-thread-local&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 📌 TransmittableThreadLocal (TTL), the missing Java™ std lib(simple &amp;amp; 0-dependency) for framework/middleware, provide an enhanced InheritableThreadLocal that transmits values between threads even using thread pooling components.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
