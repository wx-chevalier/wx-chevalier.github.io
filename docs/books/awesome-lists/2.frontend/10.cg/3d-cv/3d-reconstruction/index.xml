<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>3D-Reconstruction | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/10.cg/3d-cv/3d-reconstruction/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/2.frontend/10.cg/3d-cv/3d-reconstruction/index.xml" rel="self" type="application/rss+xml"/><description>3D-Reconstruction</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>3D-Reconstruction</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/10.cg/3d-cv/3d-reconstruction/</link></image><item><title>3D-Reconstruction-List</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/10.cg/3d-cv/3d-reconstruction/3d-reconstruction-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/2.frontend/10.cg/3d-cv/3d-reconstruction/3d-reconstruction-list/</guid><description>&lt;h1 id="3d-reconstruction-list">3D Reconstruction List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/openMVG/awesome_3DReconstruction_list" target="_blank" rel="noopener">2017-Awesome 3D reconstruction list 🗃️&lt;/a>: A curated list of papers &amp;amp; resources linked to 3D reconstruction from images.&lt;/li>
&lt;/ul>
&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/LiangliangNan/PolyFit" target="_blank" rel="noopener">2017-PolyFit
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/LiangliangNan/PolyFit" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: PolyFit implements the hypothesis and selection based surface reconstruction method described in the following paper.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/danielTobon43/pointcloudToMesh" target="_blank" rel="noopener">2018-pointcloudToMesh
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/danielTobon43/pointcloudToMesh" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: C++ application to convert pcd file, ply file, txt file or xyz point cloud to MESH representation (Gp3).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lynetcha/completion3d" target="_blank" rel="noopener">2019-completion3d
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/lynetcha/completion3d" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Source code for baselines of the Stanford 3D Point Cloud Completion Benchmark (completion3d.stanford.edu) and TopNet: Structural Point Cloud Decoder, CVPR 2019&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ranahanocka/Point2Mesh" target="_blank" rel="noopener">2020-Point2Mesh
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/ranahanocka/Point2Mesh" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Point2Mesh is a technique for reconstructing a surface mesh from an input point cloud. This approach &amp;ldquo;learns&amp;rdquo; from a single object, by optimizing the weights of a CNN to deform some initial mesh to shrink-wrap the input point cloud. The argument for going this route is: since the (local) convolutional kernels are optimized globally across the entire shape, this encourages local-scale geometric self-similarity across the reconstructed shape surface.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/cvg/pcdmeshing" target="_blank" rel="noopener">2021-pcdmeshing
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/cvg/pcdmeshing" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: pcdmeshing is a Python package to reconstruct meshes from point clouds using CGAL.&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>