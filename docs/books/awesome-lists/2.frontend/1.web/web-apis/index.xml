<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web APIs | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/index.xml" rel="self" type="application/rss+xml"/><description>Web APIs</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Web APIs</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/</link></image><item><title>DOM-List</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/dom-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/dom-list/</guid><description>&lt;h1 id="dom-list">DOM List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/dom/" target="_blank" rel="noopener">What is the DOM?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">MDN 上关于 DOM 的概述&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/fjner/p/5892325.html" target="_blank" rel="noopener">JAVAScript 中 DOM 与 BOM 的差异分析&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bOa" target="_blank" rel="noopener">2016-JavaScript 中 DOM 对象&lt;/a>：文档对象模型(Document Object Model，DOM)是表示和操作 HTML 和 XML 文档内容的基础 API。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://javascript.ruanyifeng.com/bom/engine.html#" target="_blank" rel="noopener">阮一峰 - 浏览器对象&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://domenlightenment.com/#3.1" target="_blank" rel="noopener">2017-DOM Enlightenment&lt;/a>: Exploring the relationship between JavaScript and the modern HTML DOM.&lt;/li>
&lt;/ul>
&lt;h2 id="tutorial">Tutorial&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://plainjs.com/javascript/selecting/" target="_blank" rel="noopener">PlainJS&lt;/a>: 一系列关于常用的 DOM 操作的示范&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">你不需要 jQuery，提供了一系列类似于 jQuery 的原生操作&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="element">Element&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://davidwalsh.name/add-rules-stylesheets" target="_blank" rel="noopener">2014-Add Rules to Stylesheets with JavaScript&lt;/a>: Another way we can make our pages efficient and fast is to dynamically add and remove styles directly to a stylesheet instead of constantly querying the DOM for elements and applying styles.&lt;/li>
&lt;/ul>
&lt;h1 id="storage">Storage&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://segmentfault.com/a/1190000004132566" target="_blank" rel="noopener">H5 缓存机制浅析 移动端 Web 加载性能优化&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4ODIxMzg5MQ==&amp;amp;mid=2653995942&amp;amp;idx=1&amp;amp;sn=87f21b6412eeede0d5ee7dc2f6e153d2&amp;amp;scene=23&amp;amp;srcid=07289ghBMh6Cv1zfwS12xfDu#rd" target="_blank" rel="noopener">聊一聊前端存储那些事儿&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Web-Event-List</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-event-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-event-list/</guid><description>&lt;h1 id="dom-事件处理资料索引">DOM 事件处理资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/articles/touch-pointer-event" target="_blank" rel="noopener">移动 Web 之触摸和指针事件详解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://javascript.ruanyifeng.com/dom/event.html#toc43" target="_blank" rel="noopener">阮一峰 JavaScript 标准参考教材之 DOM 中的事件&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/cssmagic/blog/issues/48" target="_blank" rel="noopener">前端进阶之路：点击事件绑定&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000006864910" target="_blank" rel="noopener">如何让 H5 体验接近 APP：(一)触摸反馈&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="event-handle">Event Handle&lt;/h1>
&lt;h2 id="event-delegation">Event Delegation&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/zichi/p/4713038.html" target="_blank" rel="noopener">JavaScript 事件冒泡与事件捕获&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://davidwalsh.name/event-delegate" target="_blank" rel="noopener">How JavaScript Event Delegation Works&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://icant.co.uk/sandbox/eventdelegation/" target="_blank" rel="noopener">Event Delegation versus Event Handling&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://api.jquery.com/delegate/" target="_blank" rel="noopener">jQuery.delegate&lt;/a> is event delegation + selector specification&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://api.jquery.com/on/#direct-and-delegated-events" target="_blank" rel="noopener">jQuery.on&lt;/a> uses event delegation when passed a selector as the 2nd parameter&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://web.archive.org/web/20090420170842/http://usabletype.com/weblog/event-delegation-without-javascript-library/" target="_blank" rel="noopener">Event delegation without a JavaScript library&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://lists.evolt.org/archive/Week-of-Mon-20090209/127339.html" target="_blank" rel="noopener">Closures vs Event delegation&lt;/a>: takes a look at the pros of &lt;em>not&lt;/em> converting code to use event delegation&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Interesting approach PPK uncovered for &lt;a href="http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html" target="_blank" rel="noopener">delegating the &lt;code>focus&lt;/code> and &lt;code>blur&lt;/code> events&lt;/a> (which do &lt;em>not&lt;/em>bubble)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="event-type">Event Type&lt;/h1>
&lt;h2 id="touch-event">Touch Event&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://www.javascriptkit.com/javatutors/touchevents.shtml" target="_blank" rel="noopener">Introduction to Touch events in JavaScript&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="dnd--拖拽事件">DnD | 拖拽事件&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/bevacqua/dragula" target="_blank" rel="noopener">2015-dragula&lt;/a>: Drag and drop so simple it hurts&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@alexandereardon/rethinking-drag-and-drop-d9f5770b4e6b" target="_blank" rel="noopener">Rethinking drag and drop Taking something basic and making it beautiful&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.html5rocks.com/en/tutorials/dnd/basics/" target="_blank" rel="noopener">2010-Native HTML5 Drag and Drop&lt;/a>: Drag and drop (DnD) is a first class citizen in HTML5! The spec defines an event-based mechanism, JavaScript API, and additional markup for declaring that just about any type of element be draggable on a page.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/iamzhanglei/p/6053235.html" target="_blank" rel="noopener">超小 Web 手势库 AlloyFinger 原理&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="scroll--visibility-滚动事件与可见性">Scroll &amp;amp; Visibility: 滚动事件与可见性&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2016/07/infinite-scroller" target="_blank" rel="noopener">Complexities of an Infinite Scroller&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/drcmda/react-springy-parallax" target="_blank" rel="noopener">react-springy-parallax&lt;/a>: A springy, composable parallax-scroller for React.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/brigade/react-waypoint" target="_blank" rel="noopener">react-waypoint&lt;/a>: A React component to execute a function whenever you scroll to an element. Works in all containers that can scroll, including the window.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Lucifier129/pull-element" target="_blank" rel="noopener">Lucifier129: pull-element&lt;/a>: Lightweight, high-performance and smooth pull element effect that support all directions&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24555031" target="_blank" rel="noopener">移动 Web 滚动性能优化: Passive event listeners&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://iscrolljs.com/#whos" target="_blank" rel="noopener">iScroll
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>:高性能的多平台 JS 滚动条&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/schovi/react-iscroll" target="_blank" rel="noopener">React-iScroll
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/inuyaksa/jquery.nicescroll" target="_blank" rel="noopener">jquery.nicescroll&lt;/a>:基于 jQuery 的滚动插件&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="parallaxing">Parallaxing&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/web/updates/2016/12/performant-parallaxing" target="_blank" rel="noopener">2016-Performant Parallaxing&lt;/a>: In this article we’ll discuss a solution that is both performant and, just as importantly, works cross-browser&lt;/li>
&lt;/ul>
&lt;h2 id="scrollspy--滚动监听">ScrollSpy | 滚动监听&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/joshwnj/react-visibility-sensor" target="_blank" rel="noopener">React Visibility Sensor
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Sensor component for React that notifies you when it goes in or out of the window viewport.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://scotch.io/tutorials/build-a-custom-javascript-scrollspy-navigation" target="_blank" rel="noopener">Build a Custom JavaScript Scrollspy Navigation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/camwiegert/in-view" target="_blank" rel="noopener">InView&lt;/a>: 自动判断某个元素是否在 ViewPort 内&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="observer">Observer&lt;/h1>
&lt;h2 id="intersectionobserver">IntersectionObserver&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2016/04/intersectionobserver" target="_blank" rel="noopener">2017-IntersectionObserver’s Coming into View&lt;/a>: Making this visibility test more efficient is what IntersectionObserver was designed for.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uiu" target="_blank" rel="noopener">2018-Now You See Me: How To Defer, Lazy-Load And Act With IntersectionObserver&lt;/a>: In this article, we are going to go out of the scroll darkness and talk about the modern way of lazy-loading resources.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="mutationobserver">MutationObserver&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UzY" target="_blank" rel="noopener">How JavaScript works: tracking changes in the DOM using MutationObserver&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Web-Network-List</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-network-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-network-list/</guid><description>&lt;h1 id="dom-network-list--web-网络通信资料索引">DOM Network List | Web 网络通信资料索引&lt;/h1>
&lt;h1 id="http-client">HTTP Client&lt;/h1>
&lt;h2 id="xmlhttprequest">XMLHTTPRequest&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.jianshu.com/p/7dc28f991f99" target="_blank" rel="noopener">2016-前端必备 HTTP 技能之 XMLHttpRequest 对象详解&lt;/a>: XMLHttpRequest(XHR)是一个 API 对象，其中的方法可以用来在浏览器和服务器端传输数据。这个对象是浏览器的 js 环境提供的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000004322487" target="_blank" rel="noopener">你真的会使用 XMLHttpRequest 吗？&lt;/a>: 这篇文章就是参考 W3C 的 XMLHttpRequest 标准和结合一些实践验证总结而来的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="fetch">fetch&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://louiszhai.github.io/2016/11/02/fetch/" target="_blank" rel="noopener">Fetch 进阶指南&lt;/a>: Fetch 是 web 异步通信的未来. 从 chrome42, Firefox39, Opera29, EdgeHTML14(并非 Edge 版本)起, fetch 就已经被支持了. 其中 chrome42~45 版本, fetch 对中文支持有问题, 建议从 chrome46 起使用 fetch.&lt;/li>
&lt;/ul>
&lt;h1 id="cross-origin">Cross Origin&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://segmentfault.com/a/1190000003642057" target="_blank" rel="noopener">JavaScript 四种跨域方法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/shimiso/article/details/21830313" target="_blank" rel="noopener">同源策略和跨域访问&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://qiutc.me/post/cross-domain-collections.html" target="_blank" rel="noopener">前端跨域的整理&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="same-origin-policy">Same Origin Policy&lt;/h2>
&lt;h2 id="cors">CORS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bOF" target="_blank" rel="noopener">2017-CORS — a guided tour&lt;/a>: Cross-origin resource sharing&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UGw" target="_blank" rel="noopener">MDN-HTTP 访问控制(CORS)&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="file-transfer--文件传输">File Transfer | 文件传输&lt;/h1></description></item><item><title>Web-Storage-List</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-storage-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-storage-list/</guid><description>&lt;h1 id="dom-storage-list">DOM Storage List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://kamranahmed.info/blog/2017/03/14/quick-guide-to-http-caching/?rd=1" target="_blank" rel="noopener">2017-Web Cache - Everything you need to know&lt;/a>: This is one is going to be specifically about the caching.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/dev-channel/offline-storage-for-progressive-web-apps-70d52695513c#.19w8r1c4o" target="_blank" rel="noopener">Offline Storage for Progressive Web Apps&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="cookie">Cookie&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/renaesop/blog/issues/4" target="_blank" rel="noopener">cookie 规范(RFC 6265)翻译&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/orestbida/cookieconsent" target="_blank" rel="noopener">2021-CookieConsent
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/orestbida/cookieconsent" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 🍪 Simple cross-browser cookie-consent plugin written in vanilla js&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="filesystem">FileSystem&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.html5rocks.com/en/tutorials/file/filesystem/" target="_blank" rel="noopener">2013-Exploring the FileSystem APIs&lt;/a>: With the FileSystem API, a web app can create, read, navigate, and write to a sandboxed section of the user&amp;rsquo;s local file system.&lt;/li>
&lt;/ul>
&lt;h1 id="clipboard">Clipboard&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/web/updates/2018/03/clipboardapi" target="_blank" rel="noopener">Unblocking Clipboard Access&lt;/a>: That&amp;rsquo;s the new Async Clipboard API, the text-focused portion of which we&amp;rsquo;re shipping in Chrome 66.&lt;/li>
&lt;/ul></description></item><item><title>Web-Worker-List</title><link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-worker-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/web-apis/web-worker-list/</guid><description>&lt;h1 id="serviceworker-list">ServiceWorker List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uue" target="_blank" rel="noopener">Service Workers Break the Browser’s Refresh Button by Default; Here’s Why&lt;/a>: Service Workers are like apps. You can’t safely upgrade an app while it’s still running. &lt;a href="https://parg.co/Uu1" target="_blank" rel="noopener">How to Fix the Refresh Button When Using Service Workers&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://50linesofco.de/post/2017-02-06-javascript-in-parallel-web-workers-transferables-and-sharedarraybuffer" target="_blank" rel="noopener">2017-JavaScript in parallel&lt;/a>: Workers, transferable objects and SharedArrayBuffer&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="service-worker">Service Worker&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>Service Worker Support in Browser: &lt;a href="http://caniuse.com/#feat=serviceworkers" target="_blank" rel="noopener">Can I Use - Service Workers&lt;/a>, &lt;a href="https://jakearchibald.github.io/isserviceworkerready/" target="_blank" rel="noopener">Is Service Worker ready?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/IrTKkz" target="_blank" rel="noopener">2017 - Send messages when you’re back online with Service Workers and Background Sync&lt;/a>: When you send an SMS message but your phone doesn’t have great signal it will continue to try to send the message in the background, even if you close the app. Pretty useful right? In this post we’re going to see how to replicate this behaviour in a web application using the Background Sync API from the Service Worker.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/dev-channel/testing-service-workers-318d7b016b19#.k65nmof59" target="_blank" rel="noopener">2017-Testing Service Workers&lt;/a>:In this post we’ll be looking at some of the approaches being taken to test service workers in the latest service worker libraries the Chrome DevRel team have been working on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCD" target="_blank" rel="noopener">2017-Service Worker Mock&lt;/a>: A mock service worker environment generator.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/TalAter/awesome-service-workers" target="_blank" rel="noopener">Awesome Service Workers 🗃️&lt;/a> : A collection of awesome resources for learning service workers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.udacity.com/course/offline-web-applications--ud899" target="_blank" rel="noopener">Offline Web Applications Using IndexedDB &amp;amp; Service Worker&lt;/a> : This free Udacity course is a must if you&amp;rsquo;re planning on building a progressive web app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.w3.org/TR/service-workers/" target="_blank" rel="noopener">Service Workers W3C Specification&lt;/a> : The official service workers spec.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2015/12/background-sync" target="_blank" rel="noopener">Introducing Background Sync&lt;/a> : A gentle introduction to background sync, along with some great videos and code samples.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/WICG/BackgroundSync/blob/master/explainer.md" target="_blank" rel="noopener">Background Sync Explained&lt;/a> : The official &amp;ldquo;explainer&amp;rdquo; document for background sync, including one-off synchronization and periodic synchronization.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://wicg.github.io/BackgroundSync/spec/" target="_blank" rel="noopener">Background Sync Spec&lt;/a> : The WIP spec for Background Sync.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@kosamari/service-worker-what-are-you-ca0f8df92b65#.vf0c3n2jk" target="_blank" rel="noopener">Service Worker, what are you ?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/w3c/ServiceWorker" target="_blank" rel="noopener">ServiceWorker Specification&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEk" target="_blank" rel="noopener">Experimenting With The Background Fetch API&lt;/a>: The service worker API is expanding as more ways to use the background dwelling worker emerge.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UXo" target="_blank" rel="noopener">2018-Service workers: the little heroes behind Progressive Web Apps&lt;/a>: Service workers are at the core of Progressive Web Apps. They allow caching of resources and push notifications, which are two of the main distinguishing features that have set native apps apart up to this point.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="offline-storage">Offline Storage&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@addyosmani/offline-storage-for-progressive-web-apps-70d52695513c" target="_blank" rel="noopener">2016-Offline Storage for Progressive Web Apps&lt;/a> : The current state of offline storage in the browser&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/en/docs/Web/API/IndexedDB_API" target="_blank" rel="noopener">IndexedDB API&lt;/a> : API docs, key concepts, and sample code from Mozilla.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Cache" target="_blank" rel="noopener">CacheStorage API&lt;/a> : API docs, and sample code from Mozilla.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/introducing-redux-offline-offline-first-architecture-for-progressive-web-applications-and-react-68c5167ecfe0" target="_blank" rel="noopener">2017-Redux Offline&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UZh" target="_blank" rel="noopener">2017-The Offline Cookbook&lt;/a>: With ServiceWorker we gave up trying to solve offline, and gave developers the moving parts to go solve it themselves.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="web-worker">Web Worker&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.org/how-web-workers-can-help-with-consistent-asynchronous-tasks-in-javascript-cd6d728fa4ee" target="_blank" rel="noopener">2017-How Web Workers can help with consistent, asynchronous tasks in JavaScript&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uig" target="_blank" rel="noopener">2018-How JavaScript works: The building blocks of Web Workers + 5 cases when you should use them&lt;/a>: We’ll offer an overview, discuss the different types of workers, how their building components come to play together, and what advantages and limitations they offer in different scenarios.&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>