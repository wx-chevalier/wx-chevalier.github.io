<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/index.xml" rel="self" type="application/rss+xml" />
    <description>Architecture</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>Architecture</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/</link>
    </image>
    
    <item>
      <title>MicroFrontend-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/microfrontend-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/microfrontend-list/</guid>
      <description>&lt;h1 id=&#34;micro-frontend--微前端&#34;&gt;Micro Frontend | 微前端&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bI7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Micro frontends—a microservice approach to front-end web development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Phodal 系列文章：&lt;a href=&#34;https://www.phodal.com/blog/implement-microfrontend-apply-route-change/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;实施微前端的六种方式（上）：三种借助路由微服务化前端应用&lt;/a&gt;, &lt;a href=&#34;https://parg.co/o3W&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;实施微前端的六种方式（下）：更好的三种实现方式&lt;/a&gt;, &lt;a href=&#34;https://parg.co/o3g&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端微服务化方案对比：路由懒加载 vs 子应用模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/DVkrV_KKE9KaGSeUSenc6w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-大前端时代下的微前端架构：实现增量升级、代码解耦、独立部署&lt;/a&gt;: 本文将介绍前端领域最近的一项变革：单体前端架构正在过渡到许多较小、较易管理的前端架构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/articles/micro-frontends.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Micro Frontends&lt;/a&gt;: In this article we&amp;rsquo;ll describe a recent trend of breaking up frontend monoliths into many smaller, more manageable pieces, and how this architecture can increase the effectiveness and efficiency of teams working on frontend code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/phodal/microfrontends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Thinking in Microfrontend (微前端的那些事儿) 📚&lt;/a&gt;: 微前端是一种类似于微服务的架构，它将微服务的理念应用于浏览器端，即将 Web 应用由单一的单体应用转变为多个小型前端应用聚合为一的应用。各个前端应用还可以独立运行、独立开发、独立部署。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;基于-iframe-的微前端方案&#34;&gt;基于 iframe 的微前端方案&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/6ioo7xXngaOaWBaqcNFalg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 iframe 的全新微前端方案&lt;/a&gt;: iframe 是一个天然的微前端方案，但受限于跨域的严格限制而无法很好的应用，本文介绍一种基于 iframe 的全新微前端方案，继承 iframe 的优点，补足 iframe 的缺点，让 iframe 焕发新生。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web-Architecture-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-architecture-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-architecture-list/</guid>
      <description>&lt;h1 id=&#34;web-architecture-list&#34;&gt;Web Architecture List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@cramforce/designing-very-large-javascript-applications-6e013a3291a3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Designing very large (JavaScript) applications&lt;/a&gt;: Besides not being open source, I think there is a lot to learn from it and it is worth sharing the things we learned along the way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/mvc-design-pattern-javascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The MVC Design Pattern in Vanilla JavaScript&lt;/a&gt;: The MVC pattern is a design pattern that can stand on its own. The question is, how far can this take us?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.epicweb.dev/the-webs-next-transition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-The Web’s Next Transition&lt;/a&gt;: As the web has evolved, so too has the architecture for the development of these applications. There are many core architectures for building applications for the web these days. The most popular architecture employed by web developers today is the Single Page App (SPA), but we are transitioning to a new and improved architecture for building web applications.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bkA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-重构 Airbnb 前端架构&lt;/a&gt;：本文是近日 Airbnb 开发团队在思索重构代码库中 JavaScript 部分的经验总结；本文主要着眼于产品驱动开发以及技术沉淀、从传统的 Rails 架构中积攒的经验以及新的技术栈的某些特性。本文首先介绍了从 Rails 迁移过程中的一些经验，譬如将原本完全的服务端渲染界面所需要的数据切分为了 API 与 Non-API 两大类，并且使用 Hypernova 来进行 React 服务端渲染。然后介绍了如何在应用前端通过引入懒加载与异步加载等方式提升前端性能与用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;large-scale-applications&#34;&gt;Large-scale Applications&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.figma.com/blog/how-we-built-the-figma-plugin-system/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-How to build a plugin system on the web and also sleep well at night&lt;/a&gt;: Since we published this blog post, we decided to change our sandbox implementation to an alternative approach: compiling a JavaScript VM written in C to WebAssembly. As you&amp;rsquo;ll see in the blog post below, it was one of several ideas we originally weighed.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web-Componentization-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-componentization-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-componentization-list/</guid>
      <description>&lt;h1 id=&#34;web-componentization-list&#34;&gt;Web Componentization List&lt;/h1&gt;
&lt;h1 id=&#34;componentization&#34;&gt;Componentization&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bXt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Beyond Bootstrap –moving from UI toolkit to component library&lt;/a&gt;: This paradigm shift allows teams of any size to create “component libraries” tailored to their exact needs and brand. Today, I’ll walk through how we got here and the process of creating your own component library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Removing-User-Interface-Complexity,-or-Why-React-is-Awesome&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzI5MDEzMzg5Nw==&amp;amp;mid=2660394384&amp;amp;idx=1&amp;amp;sn=08485e817a96f3b3d309abae2ec9f1f5&amp;amp;chksm=f7424776c035ce602bde2487d9e483ff82be159b16ba241be1147c3533594c2fd24cc568daba&amp;amp;scene=0#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;组件化——前端编程的选择&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/front-end-component-develop-and-application-in-react-native&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端组件化开发方案及其在 React Native 中的运用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UcE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This Is How To Get The Best Out Of Front-End Components&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;web-components&#34;&gt;Web Components&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.sitepoint.com/bringing-componentization-web-overview-web-components/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-Bringing Componentization to the Web: An Overview of Web Components&lt;/a&gt;: we’ll address questions about our roadmap and plans for implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/react/issues/5052&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React and WebComponents&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/dev-channel/custom-elements-that-work-anywhere-898e1dd2bc48#.swvaa2mrh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Custom Elements That Work Anywhere&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/dev-channel/the-case-for-custom-elements-part-1-65d807b4b439#.lwf2nk59c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Case for Custom Elements: Part 1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://aotu.io/notes/2016/06/24/Shadow-DOM/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;神奇的 Shadow DOM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/warpech/9431953&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web Components as successor to jQuery&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;shadow-dom&#34;&gt;Shadow DOM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://meowni.ca/posts/shadow-dom/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-基于 Shadow DOM 的样式封装&lt;/a&gt;：Shadow DOM 是 Web Components 标准的重要组成部分，它能够将 DOM 树进行隔离封装，而本文则是介绍如何利用 Shadow DOM 实现对于样式类的隔离封装。由于 CSS 并没有提供内置的模块化或者作用域机制，而在大型项目中不同组件间的样式又极易引发冲突，因此我们需要选择合适的 CSS 样式隔离方案。目前常用的隔离方案有 BEM 命名策略、IFrame、CSS Modules、CSS-in-JS 等，本文首先盘点了这些方案的优势与不足；然后介绍了 Shadow DOM 的基本原理以及如何应用到样式封装上。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web-SPA-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-spa-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-spa-list/</guid>
      <description>&lt;h1 id=&#34;web-spa-list&#34;&gt;Web SPA List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UKS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;搜狗地图面向 SPA 和 Hybrid 的前端工程体系实践&lt;/a&gt;: 本文为搜狗地图前端主管周俊鹏老师在 QCon 上海 2017 上的演讲总结而成，搜狗地图前身是图行天下，成立于 1999 年，是国内第一家互联网地图服务网站，2005 年被搜狐收购后改名为“搜狗地图”。所以这个刚“开始”做的地图产品比大多数人预料的还要老。搜狗地图前端团队对前端工程体系的理解是：工程体系本质上是一种服务，其服务的对象是技术团队所采用的技术以及组织架构。而架构本身也定位为一种服务，其服务的对象是具体的业务。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPA, or not SPA, that is the question!&lt;/a&gt;: In this article I will try to share my experience by listing my 10 reasons why you shouldn’t do a SPA website.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;route&#34;&gt;Route&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/nh4HlXmN2auwkFZSflwZtw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端路由一探&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ShowJoy-com/showjoy-blog/issues/2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端 History API 与浏览器历史堆栈管理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://orangexc.xyz/2016/10/21/The-realization-principle-of-front-end-routin/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端路由的两种实现原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://staticapps.org/articles/routing-urls-in-static-apps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;routing-urls-in-static-apps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://krasimirtsonev.com/blog/article/A-modern-JavaScript-router-in-100-lines-history-api-pushState-hash-url&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A-modern-JavaScript-router-in-100-lines-history-api-pushState-hash-url&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.codingplayboy.com/2016/12/10/browser_history/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入学习 History 对象管理浏览器会话历史&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UM9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解 Web 路由&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/visionmedia/page.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;page.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://readystate4.com/2012/05/17/nginx-and-apache-rewrite-to-support-html5-pushstate/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nginx and Apache rewrites to support HTML5 Pushstate in pure Backbone.js (or other JS &lt;code&gt;MV*&lt;/code&gt;) Application.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://staticapps.org/articles/routing-urls-in-static-apps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Routing URLs in Static Web Apps&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/turbolinks/turbolinks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turbolinks 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Turbolinks makes navigating your web application faster. Get the performance benefits of a single-page application without the added complexity of a client-side JavaScript framework.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/gt3/ultra-router&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-ultra-router 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; &lt;/a&gt;: Router for component-based web apps. Pair with React or &lt;BYOF /&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web-StateManagement-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-statemanagement-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-statemanagement-list/</guid>
      <description>&lt;h1 id=&#34;web-state-management-list&#34;&gt;Web State Management List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/a52e896f8c8f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Redux or Mobx &amp;ndash;前端应用状态管理方案的探索与思考&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b4J&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;State Architecture Patterns in React&lt;/a&gt;: This is the first in a series of articles intended to provide an in-depth review of a few common architectural patterns that are employed when building complex web applications using React (or sufficiently React-like libraries), as well as some advice for avoiding common issues associated with those patterns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bfN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-单页应用的数据流方案探索&lt;/a&gt;：所谓组件化，很容易理解，把视图按照功能，切分为若干基本单元，所得的东西就可以称为组件，而组件又可以一级一级组合而成复合组件，从而在整个应用的规模上，形成一棵倒置的组件树。这种方法论历史久远，其实现方式或有瑜亮，理念则大同小异。而 MDV，则是对很多低级 DOM 操作的简化，把对 DOM 的手动修改屏蔽了，通过从数据到视图的一个映射关系，达到了只要操作数据，就能改变视图的效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dimafeng.com/2017/04/23/modern-frontend/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Pragmatic view of the modern front-end application development&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25800767&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-浅谈前端状态管理&lt;/a&gt;: 我们知道，任何状态都需要进行管理，那么今天我们来聊聊前端状态管理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/G8z&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Avoiding Accidental Complexity When Structuring Your App State&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/front-end-developers/domain-state-vs-ui-state-768c1271a41d#.39j4vok6z&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;domain-state-vs-ui-state&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24677176&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;复杂单页应用的数据层设计&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://link.medium.com/MU9cV0nNzZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-How to visually design state in JavaScript&lt;/a&gt;: A roadmap for developing applications with state machines &amp;amp; statecharts&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Web-StyleGuide-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-styleguide-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/architecture/web-styleguide-list/</guid>
      <description>&lt;h1 id=&#34;web-开发样式指南资料索引&#34;&gt;Web 开发样式指南资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cssguidelin.es/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Guildelines&lt;/a&gt; - High-level advice and guidelines for writing sane, manageable, scalable CSS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bendc/frontend-guidelines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frontend Guidelines&lt;/a&gt; - Some HTML, CSS and JS best practices.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sass-guidelin.es/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sass Guidelines&lt;/a&gt; - An opinionated styleguide for writing sane, maintainable and scalable Sass.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/airbnb/css&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airbnb CSS / Sass Styleguide&lt;/a&gt; - A mostly reasonable approach to CSS and Sass.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codeguide.co/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML + CSS Code Guide&lt;/a&gt; - Standards for flexible, durable, and sustainable HTML and CSS.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://standards.usa.gov/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;U.S. Web Design Standards&lt;/a&gt; - Open source UI components and visual style guide for U.S. government websites.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/polarmobile/coffeescript-style-guide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoffeeScript Style Guide&lt;/a&gt; - A collection of best-practices and coding conventions for the CoffeeScript programming language.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/fat/a47b882eb5f84293c4ed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LESS Coding Guidelines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google.github.io/styleguide/htmlcssguide.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google HTML/CSS Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.smashingmagazine.com/2011/01/guidelines-for-responsive-web-design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Guidelines for Responsive Web Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bXM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 前端代码规范&lt;/a&gt;：此项目用于记录规范的、高可维护性的前端代码，这是通过分析 Github 众多前端代码库，总结出来的前端代码书写规范。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;javascript-与-dom&#34;&gt;JavaScript 与 DOM&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/airbnb/javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;airbnb-JavaScript Style Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://javascript.ruanyifeng.com/grammar/style.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阮一峰-JavaScript 编程风格&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/feross/standard&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript Standard Style&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jscs-dev/node-jscs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-jscs:JavaScript Code Style checker&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;css&#34;&gt;CSS&lt;/h1&gt;
&lt;h1 id=&#34;html&#34;&gt;HTML&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
