<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/index.xml" rel="self" type="application/rss+xml" />
    <description>Node</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>Node</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/</link>
    </image>
    
    <item>
      <title>Nest-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/nest-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/nest-list/</guid>
      <description>&lt;h1 id=&#34;nest-list&#34;&gt;Nest List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.logrocket.com/microservices-nestjs-kafka-typescript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Microservices with NestJS, Kafka, and TypeScript&lt;/a&gt;: The microservices architecture is an increasingly popular architecture pattern that follows the SOA (Service Oriented Architecture) concept. It has several advantages and disadvantages, but one of its most significant benefits is that it allows for easier scalability compared to other architectures.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node-Dev-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-dev-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-dev-list/</guid>
      <description>&lt;h1 id=&#34;nodejs-工程实践资料索引&#34;&gt;Node.js 工程实践资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/i0natan/nodebestpractices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Node.js Best Practices&lt;/a&gt;: The largest Node.JS best practices list. Curated from the top ranked articles and always updated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-project-structure-tutorial-node-js-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Advanced Node.js Project Structure Tutorial - Node.js at Scale&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;debug&#34;&gt;Debug&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/how-to-debug-nodej-js-with-the-best-tools-available/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How to Debug Node.js with the Best Tools Available&lt;/a&gt;: We will dive into two different aspects of debugging Node.js applications - the first one will be logging, so you can keep an eye on production systems, and have events from there. After logging, we will take a look at how you can debug your applications in development environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Debugging remote Node.js application running in a Docker container&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UEi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Debugging Memory Leaks and Memory Bloat in Node.js&lt;/a&gt;: The goal of this article is to make them no more of a problem than your average bug.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;test&#34;&gt;Test&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cnodejs.org/topic/516526766d38277306c7d277&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;初识 mocha in NodeJS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/node-hero-node-js-unit-testing-tutorial/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node Hero - Node.js Unit Testing Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/a-crash-course-on-testing-with-node-js-6c7428d3da02&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-A crash course on testing with Node.js&lt;/a&gt;: These masters of their craft, always cover code with tests, to ensure their work is valid.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;logging&#34;&gt;Logging&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Node-Framework-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-framework-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-framework-list/</guid>
      <description>&lt;h1 id=&#34;nodejs-framework-list&#34;&gt;Node.js Framework List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/using-es6-classes-for-sequelize-4-models-b9fd54a5f8c9?source=linkShare-fe48c4221a4c-1526129263&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using ES6 classes for Sequelize 4 models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sysproc&#34;&gt;SysProc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/dailyjs/threads-in-node-10-5-0-a-practical-intro-3b85a0a3c953&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Threads in Node 10.5.0: a practical intro&lt;/a&gt;: So I’m going to try and simplify the technical documentation provided by the initial PR and the official docs into a more practical and simple set of examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/the-guild/getting-to-know-nodes-child-process-module-8ed63038f3fa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Getting to know Node’s child_process module&lt;/a&gt;: How to call git, cpp, sh, etc, from a Node.JS script.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;storage&#34;&gt;Storage&lt;/h1&gt;
&lt;h2 id=&#34;mysql&#34;&gt;MySQL&lt;/h2&gt;
&lt;h2 id=&#34;orm&#34;&gt;ORM&lt;/h2&gt;
&lt;h2 id=&#34;redis&#34;&gt;Redis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/NodeRedis/node_redis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node_redis 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This is a complete and feature rich Redis client for node.js. It supports all Redis commands and focuses on high performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/luin/ioredis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ioredis 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A robust, performance-focused and full-featured Redis client for Node and io.js.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bustle/radredis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Radredis 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Radredis is a node data adapter for redis. It is not a full ORM but a simple opinionated interface for storing application data in redis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;typescript&#34;&gt;TypeScript&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.sourcerer.io/a-crash-course-on-typescript-with-node-js-2c376285afe1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-A crash course on TypeScript with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;express&#34;&gt;Express&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UKZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Going out to eat and understanding the basics of Express.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://scotch.io/tutorials/easy-node-authentication-setup-and-local&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Easy Node Authentication Getting Started and Local, based on Express and Passport&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cnodejs.org/topic/5757e80a8316c7cb1ad35bab&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-对 express 中 next 函数的一些理解&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;koa&#34;&gt;Koa&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/async-testing-koa-with-jest-1b6e84521b71?source=linkShare-fe48c4221a4c-1508838328&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Async testing Koa with Jest&lt;/a&gt;: Simplify API and middleware tests with lesser-known featuresSimplify API and middleware tests with lesser-known features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/35040744&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从头实现一个 koa 框架&lt;/a&gt;: 相信大家在看完本文之后，会对 koa 有一个更深入的理解，同时在阅读本文之后再去阅读 koa 源码，思路也将非常的顺畅。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mrsunny123.github.io/2017/06/21/Koa2-Code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Koa2 源码阅读笔记&lt;/a&gt;: 最近空闲时间读了一下 Koa2 的源码；在阅读 Koa2(version 2.2.0)的源码的过程中，我的感受是代码简洁、思路清晰。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;eggjs&#34;&gt;Eggjs&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/freebyron/egg-graphql-boilerplate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;egg-graphql-boilerplate&lt;/a&gt;: 本项目是使用 egg-graphql 插件构建的 graphql 服务器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;nestjs&#34;&gt;Nest.js&lt;/h1&gt;
&lt;h1 id=&#34;auth&#34;&gt;Auth&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.org/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Securing Node.js RESTful APIs with JSON Web Tokens&lt;/a&gt;: It’s a way of encrypting a value, in turn creating a unique token that users use as an identifier.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UqY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node Hero - Node.js Authentication using Passport.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;other&#34;&gt;Other&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fastify/fastify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fastify 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Fast and low overhead web framework, for Node.js.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/franciscop/server&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Server.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Simple and powerful server for Node.js.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lukeed/polka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polka 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Polka is an extremely minimal, highly performant Express.js alternative.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node-FullStack-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-fullstack-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-fullstack-list/</guid>
      <description>&lt;h1 id=&#34;全栈开发&#34;&gt;全栈开发&lt;/h1&gt;
&lt;h1 id=&#34;前后端分离&#34;&gt;前后端分离&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bwq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-前后端分离，是为了彼此更好&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;isomorphic--同构开发&#34;&gt;Isomorphic | 同构开发&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spikebrehm/isomorphic-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;isomorphic-tutorial&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@oleg008/isomorphic-rendering-d3e39c3ed073#.6ghei4r1l&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;isomorphic-rendering&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Rezonans/redux-async-connect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;redux-async-connect&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mean-stack&#34;&gt;MEAN Stack&lt;/h1&gt;
&lt;h1 id=&#34;jamstack&#34;&gt;JAMStack&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jamstack.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JAMStack&lt;/a&gt;: Create fast and secure sites and dynamic apps with JavaScript, APIs, and prerendered Markup, served without web servers.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node-Internals-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-internals-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-internals-list/</guid>
      <description>&lt;h1 id=&#34;nodejs-运行机制与核心原理资料索引&#34;&gt;Node.js 运行机制与核心原理资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.twobucks.co/building-a-crude-node-js-from-scratch/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Building a crude Node.js from scratch&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U5r&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Writing fast and safe native Node.js modules with Rust&lt;/a&gt;: In this Rust tutorial, I’m going to walk you through the steps of writing a modern, fast and safe native module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-at-scale-understanding-node-js-event-loop/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-js-at-scale-understanding-node-js-event-loop&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b4I&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Before you bury yourself in packages, learn the Node.js runtime itself&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;architecture&#34;&gt;Architecture&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.com/understanding-node-js-event-driven-architecture-223292fcbc2d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding Node.js Event-Driven Architecture&lt;/a&gt;: In this analogy, the event will be fired once (when Node is ready to call the callback) and the callback acts as the event handler.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/31966196&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Node.js 中遇到含空格 URL 的神奇“Bug”——小范围深入 HTTP 协议&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;native-modules--原生模块&#34;&gt;Native Modules | 原生模块&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/writing-native-node-js-modules/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Writing Native Node.js Modules - Node.js at Scale&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.safia.rocks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Deep Dive Node #Series#&lt;/a&gt;: How does the Node main process start, How does Node load built-in modules, Node module deep-dive: os&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;内存泄露&#34;&gt;内存泄露&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.alexkras.com/simple-guide-to-finding-a-javascript-memory-leak-in-node-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simple-guide-to-finding-a-javascript-memory-leak-in-node-js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Your Node.js authentication tutorial is (probably) wrong&lt;/a&gt;: This post explores some common authentication pitfalls, how to avoid them, and what to do to help yourself when your tutorials don’t help you anymore.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U3y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Progressive Image Loading using Intersection Observer and SQIP&lt;/a&gt;: If you visit sites such as Facebook, Pinterest or Medium regularly, you may have noticed that the first time you load the page, you’ll see a page with low quality or even blurry images.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-list/</guid>
      <description>&lt;h1 id=&#34;nodejs-learning--practices-list--nodejs-资料索引&#34;&gt;Node.js Learning &amp;amp; Practices List | Node.js 资料索引&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/the-node-js-collection/why-the-hell-would-you-use-node-js-4b053b94ab8e#.71g206imf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why the Hell Would You Use Node.js&lt;/a&gt;: This article comes from &lt;a href=&#34;https://twitter.com/tomislavcapan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tomislav Capan&lt;/a&gt;, technical consultant and Node.js enthusiast. Tomislav originally published this in August 2013 in the &lt;a href=&#34;https://www.toptal.com/developers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Toptal&lt;/a&gt;blog — you can find the original post &lt;a href=&#34;https://www.toptal.com/nodejs/why-the-hell-would-i-use-node-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;; the blog has been slightly updated. The following subject matter is based on the opinion and experiences of this author.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://lethalbrains.com/what-is-node-js-an-explanation-too-late-477c10778dea#.5daatualo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Node.js? An explanation too late&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/maxogden/art-of-node#modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Art of Node: An introduction to Node.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Having your Node.js Cake and Eating It Too&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/maxogden/art-of-node#modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Art of Node An introduction to Node.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study--practices&#34;&gt;Case Study &amp;amp; Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ndPlZJWM9pxusGMY8C0eyA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Node.js 在携程的落地和最佳实践&lt;/a&gt;: 本文主要介绍在携程，Node.js 技术栈是如何从 0 到 1 进行技术落地的，以及在不断磨合的过程中，总结出来的最佳实践。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/goldbergyoni/nodebestpractices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Node.js Best Practices&lt;/a&gt;: ✅ The Node.js best practices list (February 2021)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;book--course&#34;&gt;Book &amp;amp; Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/epg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017- 深入理解 Node.js：核心思想与源码分析 📚&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/restful-api-design-with-node-js-26ccf66eab09&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-RESTful API design with Node.js 📚&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/azat-co/practicalnode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Practical Node.js 📚&lt;/a&gt;: Practical Node is a work of 30+ in-person courses, workshops and classes delivered by me in-person at various companies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ElemeFE/node-practice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Node.js 实践教程 📚&lt;/a&gt;：本教程的初衷是做一个 Node.js 进阶的视频教程, 在撰写 node-interview 之后, 觉得按照概念依次讲下来不好组织, 于是决定按照以一些有名的模块 / 功能为基础, 在实现的过程中讲解各项知识点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.org/the-definitive-node-js-handbook-6912378afc6e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-The definitive Node.js handbook #Series#&lt;/a&gt;: This article is a getting started guide to Node.js, the server-side JavaScript runtime environment.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutoria--教程&#34;&gt;Tutoria | 教程&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://2ality.com/2017/05/util-promisify.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Node.js 8: util.promisify()&lt;/a&gt;: Node.js 8 has a new utility function: util.promisify(). It converts a callback-based function to a Promise-based one.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Learn Node.js in 8 hours [For Beginners]&lt;/a&gt;: Node.js is also open source, completely free, and used by thousands of developers around the world.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bfV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The Definitive Guide to Object Streams in Node.js&lt;/a&gt;: Node.js Streams come with a great power: You have an asynchronous way of dealing with input and output, and you can transform data in independent steps. In this tutorial, I&amp;rsquo;ll walk you through the theory, and teach you how to use object stream transformables, just like Gulp does.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/zFEia8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Basics of Package.json in Node.js and npm&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/SG9-dr7Y4Hj52oJN8I1tVw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Node.js 结合 ProtoBuffer,从零实现一个 redis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;npm&#34;&gt;NPM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://aerotiger.info/archives/beginners-guide-node-package-manager.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NodeJS 包管理工具 ——npm 入门&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/18875674/whats-the-difference-between-dependencies-devdependencies-and-peerdependencies/22004559#22004559&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What&amp;rsquo;s the difference between dependencies, devDependencies and peerDependencies in npm package.json file?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/monitoring-nodejs-applications-nodejs-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Definitive Guide for Monitoring Node.js Applications&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/5tmND0G_ZkYVR7Dmug0ugQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npm install 原理分析&lt;/a&gt;: 开门见山，npm install 大概会经过上面的几个流程，本篇文章来讲一讲各个流程的实现细节、发展以及为何要这样实现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;commandline-tool--命令行工具&#34;&gt;Commandline Tool | 命令行工具&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.atlassian.com/blog/2015/11/scripting-with-node/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Building command line tools with Node.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mattallty/Caporal.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Caporal.js&lt;/a&gt;: A full-featured framework for building command line applications (cli) with node.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@kentcdodds/tips-for-making-a-cli-based-tool-with-node-9903255c2a3b#.ugk1a07dg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tips-for-making-a-cli-based-tool-with-node&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://aotu.io/notes/2015/12/23/building-command-line-tools-with-node-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【译】使用 Node.js 创建命令行脚本工具&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/DylanPiercey/auto-sni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;auto-sni&lt;/a&gt;:Free, automated HTTPS for NodeJS made easy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-opensource-list/</guid>
      <description>&lt;h1 id=&#34;nodejs-opensource-list&#34;&gt;Node.js OpenSource List&lt;/h1&gt;
&lt;h1 id=&#34;showcase&#34;&gt;Showcase&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nwtgck/piping-server&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;piping-server 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Infinitely transfer between every device over pure HTTP: designed for everyone including people using Unix pipe and even for browser users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/klauscfhq/taskbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Taskbook 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Tasks, boards &amp;amp; notes for the command-line habitat.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/smallcase/smalllinks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;smalllinks 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Simple URL shortener built with Fastify. Uses PostgreSQL, Redis, and Kafka.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;dev-tools&#34;&gt;Dev Tools&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tj/node-prune&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-prune 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 能够帮助移除 node_modules 中的不必要内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/volta-cli/volta&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;volta 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Fast: Install and run any JS tool quickly and seamlessly! Volta is built in Rust and ships as a snappy static binary.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;logging&#34;&gt;Logging&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/trentm/node-bunyan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-bunyan 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: a simple and fast JSON logging module for node.js services.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;debug&#34;&gt;Debug&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChromeLabs/ndb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ndb 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: ndb is an improved debugging experience for Node.js, enabled by Chrome DevTools.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zeeshanu/dumper.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dumper.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A better and pretty variable inspector for your Node.js applications.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;library&#34;&gt;Library&lt;/h1&gt;
&lt;h2 id=&#34;framework&#34;&gt;Framework&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/typestack/routing-controllers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;routing-controllers 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Create structured, declarative and beautifully organized class-based controllers with heavy decorators usage in Express / Koa using TypeScript and Routing Controllers Framework.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Odi-ts/Odi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Odi 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Opinionated, Declarative, Idiomatic framework for building scalable, supportable, enterprise applications and servers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/trpc/trpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;trpc 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 🧙‍♀️ Move Fast and Break Nothing. End-to-end typesafe APIs made easy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nestjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nest 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A progressive Node.js framework for building efficient, reliable and scalable server-side applications.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;http-server&#34;&gt;HTTP Server&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/felixge/node-formidable&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-formidable 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A node.js module for parsing form data, especially file uploads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ethanent/coroute&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;coroute 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The awesome Node.js HTTP reverse-proxy server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lukeed/polka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Polka 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Polka is an extremely minimal, highly performant Express.js alternative. Yes, you&amp;rsquo;re right, Express is already super fast &amp;amp; not that big 🤔 — but Polka shows that there was (somehow) room for improvement!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;command-line&#34;&gt;Command Line&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yargs/yargs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;yargs 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: yargs the modern, pirate-themed successor to optimist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/motdotla/dotenv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dotenv 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Loads environment variables from .env for nodejs projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/terkelg/prompts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prompts 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Lightweight, beautiful and user-friendly interactive prompts&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/klauscfhq/signale&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Signale 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Hackable and configurable to the core, signale can be used for logging purposes, status reporting, as well as for handling the output rendering process of other node modules and applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/ora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ora 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Elegant terminal spinner.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zeit/pkg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pkg 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Package your Node.js project into an executable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://oclif.io/docs/introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;oclif 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: oclif is a framework for building CLIs in Node. It can be used like a simple flag parser but is capable of much more. It&amp;rsquo;s designed to be extensible so that you can easily add plugins such as the update warning plugin or build your own for users to install at runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;storage&#34;&gt;Storage&lt;/h1&gt;
&lt;h2 id=&#34;database&#34;&gt;Database&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pubkey/rxdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-RxDB 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The reactive, serverless, client-side, offline-first database for your next javascript-application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/agershun/alasql&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-AlaSQL 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: AlaSQL - ( à la SQL ) [ælæ ɛskju:ɛl] - is an open source SQL database for JavaScript with a strong focus on query speed and data source flexibility for both relational data and schemaless data. It works in the web browser, Node.js, and mobile apps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/typicode/lowdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-lowdb 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: ⚡️ lowdb is a small local JSON database powered by Lodash (supports Node, Electron and the browser).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/louischatriot/nedb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-nedb 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The JavaScript Database, for Node.js, nw.js, electron and the browser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/koskimas/kysely&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Kysely 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/koskimas/kysely&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Kysely (pronounce “Key-Seh-Lee”) is a type-safe and autocompletion-friendly typescript SQL query builder. Inspired by knex. Mainly developed for node.js but also runs on deno and in the browser.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;orm&#34;&gt;ORM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lusakasa/sqorn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sqorn 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Sqorn is a Javascript library for building SQL queries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://docs.sequelizejs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sequelize 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Sequelize is a promise-based ORM for Node.js v4 and up. It supports the dialects PostgreSQL, MySQL, SQLite and MSSQL and features solid transaction support, relations, read replication and more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tgriesser/knex&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Knex 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A query builder for PostgreSQL, MySQL and SQLite3, designed to be flexible, portable, and fun to use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bookshelf/bookshelf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bookshelf 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A simple Node.js ORM for PostgreSQL, MySQL and SQLite3 built on top of Knex.js&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/typeorm/typeorm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeORM 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: ORM for TypeScript and JavaScript (ES7, ES6, ES5). Supports MySQL, PostgreSQL, MariaDB, SQLite, MS SQL Server, Oracle, WebSQL databases. Works in NodeJS, Browser, Ionic, Cordova and Electron platforms.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.prisma.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prisma 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Next-generation ORM for Node.js &amp;amp; TypeScript | PostgreSQL, MySQL, MariaDB, SQL Server, SQLite, MongoDB and CockroachDB&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/romeerez/orchid-orm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Orchid ORM 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/romeerez/orchid-orm&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Postgres ORM, query builder, migration tool. First-class TypeScript support.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sysproc&#34;&gt;SysProc&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sindresorhus/execa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;execa 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A better &lt;code&gt;child_process&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/OptimalBits/bull&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bull 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The fastest, most reliable, Redis-based queue for Node.
Carefully written for rock solid stability and atomicity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/AliOS-nodejs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AliOS-nodejs 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: speed up nodejs booting using snapshot&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/napajs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Napa.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Napa.js is a multi-threaded JavaScript runtime built on V8, which was originally designed to develop highly iterative services with non-compromised performance in Bing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ajinabraham/nodejsscan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nodejsscan 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: nodejsscan is a static security code scanner for Node.js applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/bnoordhuis/node-heapdump&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-heapdump 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Make a dump of the V8 heap for later inspection.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tj/node-prune&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-prune 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: node-prune is a small tool to prune unnecessary files from ./node_modules, such as markdown, typescript source files, and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/midwayjs/pandora&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandora.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A Manageable, Measurable and Traceable Node.js Application Manager represented by Alibaba powered by TypeScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mapbox/flamebearer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;flamebearer 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A blazing fast flame graph tool for Node and V8. Used to visualize and explore performance profiling results. Designed to produce fast, lightweight flame graphs that remain responsive even on really big input.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;concurrent-programming&#34;&gt;Concurrent Programming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wilk/microjob&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;microjob 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A tiny wrapper for turning Node.js worker threads into easy-to-use routines for heavy CPU loads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/piscinajs/piscina&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;piscina 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A fast, efficient Node.js Worker Thread Pool implementation&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node-Syntax-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-syntax-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-syntax-list/</guid>
      <description>&lt;h1 id=&#34;nodejs-syntax-list&#34;&gt;Node.js Syntax List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/pJ6yVvcuFWROmuFU1ULXeQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 如何解析 Form 上传？&lt;/a&gt;: 作者前段时间遇到了一个需要手动解析 Form 表单上传的机会，也借此为各位解析一下 Node.js 解析 Form 上传的实现细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;core-modules-核心模块&#34;&gt;Core Modules: 核心模块&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.risingstack.com/mastering-the-nodejs-core-modules-file-system-fs-module/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Mastering the Node.js Core Modules - The File System &amp;amp; fs Module&lt;/a&gt;: In this article, we&amp;rsquo;ll take a look at the File System core module, File Streams and some fs module alternatives.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;modularity--模块机制&#34;&gt;Modularity | 模块机制&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/nodejs-module-mechanism&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2011- 深入 Node.js 的模块机制&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bQl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Requiring modules in Node.js: Everything you need to know&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;stream--流&#34;&gt;Stream | 流&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/substack/stream-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-Stream Handbook #Series#&lt;/a&gt;: This document covers the basics of how to write node.js programs with streams.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Node.js Streams: Everything you need to know&lt;/a&gt;: Node.js streams have a reputation for being hard to work with, and even harder to understand. Well I’ve got good news for you — that’s no longer the case. Over the years, developers created lots of packages out there with the sole purpose of making working with streams easier. But in this article, I’m going to focus on the native Node.js stream API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.barretlee.com/blog/2017/06/06/dive-to-nodejs-at-stream-module/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-深入理解 Node Stream 内部机制&lt;/a&gt;：相信很多人对 Node 的 Stream 已经不陌生了，不论是请求流、响应流、文件流还是 socket 流，这些流的底层都是使用 stream 模块封装的，甚至我们平时用的最多的 console.log 打印日志也使用了它，不信你打开 Node runtime 的源码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/cC9Jcm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-A Brief History of Node Streams #Series#&lt;/a&gt;: This post takes a look at what streams are and do, while providing some examples along the way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.org/do-you-want-a-better-understanding-of-buffer-in-node-js-check-this-out-2e29de2968e8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Do you want a better understanding of Buffer in Node.js? Check this out.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@daspinola/video-stream-with-node-js-and-html5-320b3191a6b6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Video stream with Node.js and HTML5&lt;/a&gt;: The “challenge” was to make a route sending a .mp4 file to a page and make the video available to be seen.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/nodejs-javasript-react-buffer-understand-tutorial-example-easy-step-create-read-utf8-ce37866ddd8c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Something about Buffer&lt;/a&gt;: In node.js a buffer is a container for raw bytes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/docs/guides/backpressuring-in-streams/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backpressuring in Streams&lt;/a&gt;: The purpose of this guide is to further detail what backpressure is, and how exactly streams address this in Node.js&amp;rsquo; source code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;http2&#34;&gt;HTTP/2&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UKq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How to create a zero dependency HTTP/2 static file server with Node.js (with examples)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Node-Tuning-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-tuning-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/2.frontend/1.web/node/node-tuning-list/</guid>
      <description>&lt;h1 id=&#34;nodejs-productionlistfor-microservices&#34;&gt;Node.js ProductionListfor MicroServices&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U55&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Putting the helmet on – Securing your Express app&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bVL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Writing Secure Node.js Code - Danny Grander&lt;/a&gt;：In his presentation, Danny Grander walked us through hacking a vulnerable Node.js application, as well as looking in-depth into three different vulnerabilities in popular npm packages.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Node.js Performance Monitoring with Prometheus&lt;/a&gt;: This article helps you to understand what to monitor if you have a Node.js application in production, and how to use Prometheus - an open-source solution, which provides powerful data compressions and fast data querying for time series data - for Node.js monitoring.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b1y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Scaling Node.js Applications&lt;/a&gt;: Everything you need to know about Node.js built-in tools for scalability.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://goldbergyoni.com/checklist-best-practice-of-node-js-in-production/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Checklist: Node.JS production best practices&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How N26 built a modern banking software with JavaScript &amp;amp; Microservices.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.plaid.com/how-we-parallelized-our-node-service-by-30x/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-How we 30x&amp;rsquo;d our Node parallelism&lt;/a&gt;: This post will outline how we increased the performance and efficiency of our Node workers and describe the lessons that we learned in the process.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;deploy&#34;&gt;Deploy&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wohugb.gitbooks.io/pm2/content/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PM2 入门与部署 GitBook&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Aw7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10-things-you-shouldnt-do-while-running-nodejs-in-production&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Awx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Switching from cluster module to PM2 &amp;amp; RabbitMQ in Node.js&lt;/a&gt;: This blog will cover the reasons why I made this change and provide background on how and why I moved to PM2 &amp;amp; RabbitMQ.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.codeship.com/running-node-js-linux-systemd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Running Node.js on Linux with systemd&lt;/a&gt;: In this blog post, I’ll show you how to recreate process management, logging and clustering functionality using the Linux init system, systemd, and I’ll make the case for this being a superior approach.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;performance&#34;&gt;Performance&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/measuring-http-timings-node-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding &amp;amp; Measuring HTTP Timings with Node.js&lt;/a&gt;: This article explains timings in an HTTP request and shows how to measure them in Node.js.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.com/articles/node-micro-optimizations-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;node-micro-optimizations-javascript&lt;/a&gt;：中文译本为&lt;a href=&#34;https://zhuanlan.zhihu.com/p/25276558&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;多个提高 Node.js 应用吞吐量的小优化技巧介绍&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nearform/node-clinic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-node-clinic 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Clinic diagnoses your Node.js performance issues.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cluster&#34;&gt;Cluster&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeburst.io/cpu-intensive-node-js-part-1-1218b102e5ec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-CPU Intensive Node.js&lt;/a&gt;: We explore the issues and solutions around running CPU intensive code in Node.js; in particular in a web server.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://taobaofed.org/blog/2015/11/24/nodejs-php-process-manager/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;浅谈 Node.js 和 PHP 进程管理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://taobaofed.org/blog/2015/11/03/nodejs-cluster/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015- 当我们谈论 cluster 时我们在谈论什么&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/AKz9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Hello World: Concurrency In Node.js Using The Cluster Module&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Node.js Child Processes: Everything you need to know&lt;/a&gt;: Using multiple processes is the best way to scale a Node application. Node.js is designed for building distributed applications with many nodes. This is why it’s named Node. Scalability is baked into the platform and it’s not something you start thinking about later in the lifetime of an application.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;microservice&#34;&gt;MicroService&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://arm.ag/microservices-made-easy-with-node-js-f41bb2be2d3c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Microservices made easy with Node.js&lt;/a&gt;: You might think microservices are too hard to get started with. This post will prove otherwise.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ShowJoy-com/showjoy-blog/issues/4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务端 node 服务的监控预警系统架构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
