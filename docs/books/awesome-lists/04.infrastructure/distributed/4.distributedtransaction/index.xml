<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>4.DistributedTransaction | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/index.xml" rel="self" type="application/rss+xml"/><description>4.DistributedTransaction</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>4.DistributedTransaction</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/</link></image><item><title>DistributedLock-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/distributedlock-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/distributedlock-list/</guid><description>&lt;h1 id="distributed-lock--分布式锁">Distributed Lock | 分布式锁&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/RD4" target="_blank" rel="noopener">聊聊分布式锁&lt;/a>: 两种锁的实现方式都很简单，应用情景也很显然，悲观锁更适合写密集的情景；而乐观锁，通常需要借助 CAS 实现，形成一定程度上比较简单的无锁结构，更适合读密集的情景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://adamswanglin.github.io/wllock/" target="_blank" rel="noopener">高并发下本地锁+分布式锁&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="redis-lock">Redis Lock&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://redis.io/topics/distlock" target="_blank" rel="noopener">2017-Distributed locks with Redis&lt;/a>: Distributed locks are a very useful primitive in many environments where different processes must operate with shared resources in a mutually exclusive way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.jobbole.com/95211/" target="_blank" rel="noopener">使用 Redis 实现分布式锁&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://sanyuesha.com/2016/08/20/distributed-lock-with-redis/" target="_blank" rel="noopener">如何用 Redis 造一把分布式锁&lt;/a>:&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="consul-lock">Consul Lock&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://blog.didispace.com/spring-cloud-consul-lock-and-semphore/" target="_blank" rel="noopener">基于 Consul 的分布式锁实现&lt;/a>：我们在构建分布式系统的时候，经常需要控制对共享资源的互斥访问。这个时候我们就涉及到分布式锁(也称为全局锁)的实现，基于目前的各种工具，我们已经有了大量的实现方式，比如：基于 Redis 的实现、基于 Zookeeper 的实现。本文将介绍一种基于 Consul 的 Key/Value 存储来实现分布式锁以及信号量的方法。&lt;/li>
&lt;/ul></description></item><item><title>DistributedTransaction-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/distributedtransaction-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/distributedtransaction-list/</guid><description>&lt;h1 id="distributed-transaction-list">Distributed Transaction List&lt;/h1>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/articles/solution-of-distributed-system-transaction-consistency" target="_blank" rel="noopener">2016-分布式系统事务一致性解决方案&lt;/a>: 大型互联网平台往往是由一系列分布式系统构成的，开发语言平台和技术栈也相对比较杂，尤其是在 SOA 和微服务架构盛行的今天，一个看起来简单的功能，内部可能需要调用多个“服务”并操作多个数据库或分片来实现，情况往往会复杂很多。单一的技术手段和解决方案，已经无法应对和满足这些复杂的场景了。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.infoq.cn/article/qrsqlqqpboboud3z5mfy" target="_blank" rel="noopener">2021-微服务下分布式事务模式的详细对比&lt;/a>: 本文不会深入介绍事务的细节，而是总结了向多个数据源协调写入操作的主要方式和模式。我知道，你可能对这些方法有过美好或糟糕的经验。但是实践中，在正确的环境和正确的限制条件下，这些方法都能很好地工作。技术领导者要为自己的环境选择最好的方式。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="多阶段提交">多阶段提交&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.mamicode.com/info-detail-890945.html" target="_blank" rel="noopener">分布式协议之两阶段提交协议(2PC)和改进三阶段提交协议(3PC)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/bluishglc/article/details/7612811" target="_blank" rel="noopener">关于分布式事务、两阶段提交、一阶段提交、Best Efforts 1PC 模式和事务补偿机制的研究&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://int64.me/2016/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A12PC%20&amp;amp;&amp;amp;%203PC.html" target="_blank" rel="noopener">分布式事务 2PC &amp;amp;&amp;amp; 3PC&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.hollischuang.com/archives/1580" target="_blank" rel="noopener">深入理解分布式系统的 2PC 和 3PC&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.hollischuang.com/archives/681" target="_blank" rel="noopener">关于分布式事务、两阶段提交协议、三阶提交协议&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="事务消息">事务消息&lt;/h1>
&lt;h1 id="分布式锁的实现">分布式锁的实现&lt;/h1>
&lt;h2 id="redis">Redis&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://blog.jobbole.com/95211/" target="_blank" rel="noopener">使用 Redis 实现分布式锁&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>DistributedTransaction-OpenSource-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/distributedtransaction-opensource-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/4.distributedtransaction/distributedtransaction-opensource-list/</guid><description>&lt;h1 id="distributed-transaction-opensource-list">Distributed Transaction OpenSource List&lt;/h1>
&lt;h1 id="showcase">Showcase&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/dtm-labs/dtm" target="_blank" rel="noopener">2021-dtm
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/dtm-labs/dtm" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 🔥go 语言分布式事务管理器 a lightweight distributed transaction management service, support xa tcc saga&lt;/li>
&lt;/ul>
&lt;h1 id="framework">Framework&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/dromara/myth" target="_blank" rel="noopener">myth
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Reliable messages resolve distributed transactions&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/changmingxie/tcc-transaction" target="_blank" rel="noopener">2015-TCC Transaction
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: tcc-transaction 是 TCC 型事务 java 实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/prontera/spring-cloud-rest-tcc" target="_blank" rel="noopener">2016-Solar
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 基于 Spring Cloud Netflix 的 TCC 柔性事务和 EDA 事件驱动示例，结合 Spring Cloud Sleuth 进行会话追踪和 Spring Boot Admin 的健康监控，并辅以 Hystrix Dashboard 提供近实时的熔断监控。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/liuyangming/ByteTCC" target="_blank" rel="noopener">2017-ByteTCC
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: ByteTCC 是一个兼容 JTA 规范的基于 TCC 机制的分布式事务管理器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/dromara/raincat" target="_blank" rel="noopener">2017-Raincat
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 强一致分布式事务框架。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/seata/Seata" target="_blank" rel="noopener">2018-Seata
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Seata is an easy-to-use, high-performance, java based, open source distributed transaction solution.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/dromara/hmily" target="_blank" rel="noopener">2018-mily
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/dromara/hmily" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 金融级柔性分布式事务解决方案。&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>