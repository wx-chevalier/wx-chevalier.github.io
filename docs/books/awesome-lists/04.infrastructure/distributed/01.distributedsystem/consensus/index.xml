<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Consensus | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/index.xml" rel="self" type="application/rss+xml"/><description>Consensus</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Consensus</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/</link></image><item><title>Consensus-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/consensus-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/consensus-list/</guid><description>&lt;h1 id="distributed-consistency">Distributed Consistency&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="www.primeton.com/read.php?id=2258&amp;amp;his=1">分布式事务：不过是在一致性、吞吐量和复杂度之间，做一个选择&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.fnil.net/blog/ac1fa10ff9b2404ed0b91bdfaf76a87d/" target="_blank" rel="noopener">分布式一致性论文阅读阶段性小结&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://lamport.azurewebsites.net/video/consensus-on-transaction-commit.pdf" target="_blank" rel="noopener">2004-Consensus on Transaction Commit&lt;/a>: The distributed transaction commit problem requires reaching agreement on whether a transaction is committed or aborted.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://writings.stephenwolfram.com/2021/05/the-problem-of-distributed-consensus/" target="_blank" rel="noopener">2021-The Problem of Distributed Consensus&lt;/a>: In the past, it’s been difficult to analyze the more general setup where there is no rigid notion of either space or time. But this is exactly the setup in our new Physics Project, and so there’s now the potential to use its formalism and results (as well as intuition imported from physics) to make further progress.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4NDc2MDQ1Nw==&amp;amp;mid=2650238031&amp;amp;idx=1&amp;amp;sn=d7ba7844f15d587c83906aedd073748a&amp;amp;scene=0#wechat_redirect" target="_blank" rel="noopener">分布式系统的事务处理&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="consistency--cap">Consistency &amp;amp; CAP&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://apps.cs.utexas.edu/tech_reports/reports/tr/TR-2036.pdf" target="_blank" rel="noopener">2011-Consistency, Availability, and Convergence #Paper#&lt;/a>: We examine the limits of consistency in fault-tolerant distributed storage systems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/p4PEZPjxJyYXKpkCCdShbw" target="_blank" rel="noopener">大话分布式系统理论基础&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ULa" target="_blank" rel="noopener">不懂点 CAP 理论，你好意思说你是做分布式的吗？&lt;/a>: CAP 理论，被戏称为[帽子理论]。CAP 理论由 Eric Brewer 在 ACM 研讨会上提出，而后 CAP 被奉为分布式领域的重要理论。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1g" target="_blank" rel="noopener">2016-2016 年，分布式数据库的那些事儿都在这里！&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/test_soy/article/details/53259136" target="_blank" rel="noopener">2016-腾讯金融级分布式数据库 TDSQL 的前世今生&lt;/a>: TDSQL(Tencent Distributed MySQL，腾讯分布式 MySQL)是由腾讯技术工程事业群计费平台部针对金融联机交易场景开发的高一致性数据库集群产品。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="eventually-consistency">Eventually Consistency&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://article.yeeyan.org/view/167444/125572" target="_blank" rel="noopener">Base: 一种 Acid 的替代方案-中文翻译&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.cs.tau.ac.il/~mad/publications/podc2015-replds.pdf" target="_blank" rel="noopener">2020-Limitations of Highly-Available Eventually-Consistent Data Stores #Paper#&lt;/a>: Modern replicated data stores aim to provide high availability, by immediately responding to client requests, often by implementing objects that expose concurrency.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="consensus-algorithms">Consensus Algorithms&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://rystsov.info/2017/02/15/simple-consensus.html" target="_blank" rel="noopener">In search of a simple consensus algorithm&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/stateright/stateright" target="_blank" rel="noopener">2021-Stateright
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Correctly implementing distributed algorithms such as the Paxos and Raft consensus protocols is notoriously difficult due to inherent nondetermism such as message reordering by network devices. Stateright is a Rust actor library that aims to solve this problem by providing an embedded model checker, a UI for exploring system behavior (demo), and a lightweight actor runtime. It also features a linearizability tester that can be run within the model checker for more exhaustive test coverage than similar solutions such as Jepsen.&lt;/li>
&lt;/ul></description></item><item><title>Consul-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/consul-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/consul-list/</guid><description>&lt;h1 id="consul-list">Consul List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/hashicorp/consul-template" target="_blank" rel="noopener">consul-template&lt;/a>: Generic template rendering and notifications with Consul.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kelseyhightower/confd" target="_blank" rel="noopener">confd&lt;/a>: Manage local application configuration files using templates and data from etcd or consul.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/hashicorp/envconsul" target="_blank" rel="noopener">envconsul&lt;/a>: Read and set environmental variables for processes from Consul.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Etcd-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/etcd-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/etcd-list/</guid><description>&lt;h1 id="etcd-list">Etcd List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://bbs.huaweicloud.com/blogs/104633" target="_blank" rel="noopener">2018-深入浅出 etcd 系列 #Series#&lt;/a>: etcd 作为 FushionStage 的核心组件，负责 FushionStage 绝大多数组件的数据持久化、集群选举、状态同步等功能。作为如此重要的一个组件，我们需要深入地理解其架构设计和内部流程，唯有此，我们才能更好地使用 etcd。本文试图从整体框架到内部细化流程，对 etcd 的代码和设计进行解读，希望能对 etcd 的高可用方案、性能优化、安全加固等指导作用。etcd 简介 etcd 是一个分布式 ke&amp;hellip;&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.mrcroxx.com/posts/code-reading/etcdraft-made-simple/0-introduction/" target="_blank" rel="noopener">2020-叉鸽-深入浅出 etcd/raft #Series#&lt;/a>: 然而，即使读过 Raft 的论文、做过 MIT6.824 的 Lab2，也很难理解成熟的工业级产品中 Raft 实现的一些细节。本系列文章旨在由浅入深地分析 Etcd 中 Raft 算法的实现，从 Raft 论文中的实现过渡到成熟的工业级产品中的经典 Raft 实现。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Paxos-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/paxos-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/paxos-list/</guid><description>&lt;h1 id="paxos-list">Paxos List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zh.wikipedia.org/wiki/Paxos%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">维基百科上关于 Paxos 算法的讲解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://my.oschina.net/linlifeng/blog/78918" target="_blank" rel="noopener">Paxos 算法简述&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.solinx.co/archives/403" target="_blank" rel="noopener">一致性算法 Paxos 详解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.sdk.cn/news/5826" target="_blank" rel="noopener">微信 PaxosStore：深入浅出 Paxos 算法协议&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzI4NDMyNTU2Mw==&amp;amp;mid=2247483804&amp;amp;idx=1&amp;amp;sn=a6629ebdaefbc2470c2ecbf12577daff" target="_blank" rel="noopener">微信 PaxosStore 内存云揭秘：十亿 Paxos/分钟的挑战&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.xiaohansong.com/2016/09/30/Paxos/" target="_blank" rel="noopener">图解 Paxos 一致性协议&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://martinfowler.com/articles/patterns-of-distributed-systems/paxos.html" target="_blank" rel="noopener">Paxos by Martinfowler&lt;/a>: Use two consensus building phases to reach safe consensus even when nodes disconnect&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="implementations">Implementations&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/cocagne/paxos" target="_blank" rel="noopener">Plain Paxos Implementations in Python &amp;amp; Java&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Raft-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/raft-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/raft-list/</guid><description>&lt;h1 id="raft-list">Raft List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/23872141" target="_blank" rel="noopener">基于 Raft 构建的大规模分布式存储&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.consul.io/docs/internals/consensus.html" target="_blank" rel="noopener">Consul 官网上关于 Raft 的讲解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://bingotree.cn/?p=611" target="_blank" rel="noopener">Raft 算法的学习与理解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/mindwind/p/5231986.html" target="_blank" rel="noopener">Raft 为什么是更易理解的分布式一致性算法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.carlosgaldino.com/a-brief-overview-of-the-raft-algorithm.html" target="_blank" rel="noopener">A brief overview of the Raft algorithm&lt;/a>: In the following sections you will learn more about consensus algorithms and how the Raft algorithm works.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/twCsA0CupyyDK_KtKmdQvQ" target="_blank" rel="noopener">如何基于 Raft 绕过分布式算法一致性的那些痛？(有彩蛋)&lt;/a>)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="tutorials">Tutorials&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">Raft, The Secret Lives of Data&lt;/a>: Understandable Distributed Consensus.&lt;/li>
&lt;/ul>
&lt;h1 id="implementation">Implementation&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://eli.thegreenplace.net/2020/implementing-raft-part-0-introduction/" target="_blank" rel="noopener">2020-Implementing Raft #Series#&lt;/a>: This is the first post in a multi-part series describing the Raft distributed consensus algorithm and its complete implementation in Go.&lt;/li>
&lt;/ul></description></item><item><title>ZooKeeper-List</title><link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/zookeeper-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/distributed/01.distributedsystem/consensus/zookeeper-list/</guid><description>&lt;h1 id="zookeeper-list">ZooKeeper List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://ifeve.com/zookeeperprogrammers/" target="_blank" rel="noopener">ZooKeeper 编程指导&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zookeeper.apache.org/doc/current/" target="_blank" rel="noopener">ZooKeeper&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/llohellohe/zookeeper" target="_blank" rel="noopener">分布式系统服务 ZooKeeper 的学习历程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://gliderlabs.com/registrator/latest/user/quickstart/" target="_blank" rel="noopener">Registrator&lt;/a>: Service registry bridge for Docker.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://coreos.com/blog/performance-of-etcd.html" target="_blank" rel="noopener">Exploring Performance of etcd, Zookeeper and Consul Consistent Key-value Datastores&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bC3" target="_blank" rel="noopener">基于 Docker、Registrator、Zookeeper 实现的服务自动注册&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/llohellohe/zookeeper" target="_blank" rel="noopener">分布式系统服务 ZooKeeper 的学习历程&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/qiurunze123/zookeeperDesign" target="_blank" rel="noopener">2019-Zookeeper 分析&lt;/a>: ⭐⭐⭐zk 的设计与使用（集群，dubbo，分布式锁，master 选举，负载均衡，watch，权限等）&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>