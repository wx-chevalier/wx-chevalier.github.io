<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/messagequeue/kafka/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/04.infrastructure/messagequeue/kafka/index.xml" rel="self" type="application/rss+xml" />
    <description>Kafka</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>Kafka</title>
      <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/messagequeue/kafka/</link>
    </image>
    
    <item>
      <title>Kafka-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/messagequeue/kafka/kafka-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/messagequeue/kafka/kafka-list/</guid>
      <description>&lt;h1 id=&#34;kafka-list&#34;&gt;Kafka List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/YFMFCijamQvz_O-MPv5yfA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微信开源 PhxQueue 高可用、高可靠、高性能的分布式队列&lt;/a&gt;: 本文对比了 Kafka 与 PhxQueue，讨论了 Kafka 的不足。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jasongj.com/kafka/high_throughput/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 设计解析(六)-Kafka 高性能架构之道&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.confluent.io/blog/apache-kafka-goes-1-0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Apache Kafka Goes 1.0&lt;/a&gt;: The feature set and the broad deployments all speak of a stable and Enterprise-ready product, which leads to an important step we are taking with this release: as of today, Apache Kafka is going 1.0!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resouces&#34;&gt;Resouces&lt;/h1&gt;
&lt;h2 id=&#34;collection&#34;&gt;Collection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/infoslack/awesome-kafka#books&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Kafka&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;series&#34;&gt;Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/benchmarking-kafka-performance-part-1-write-throughput-7c7a76ab7db1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Benchmarking Kafka Performance #Series#&lt;/a&gt;：a series that explores Kafka performance on multiple public cloud providers. &lt;a href=&#34;https://hackernoon.com/benchmarking-kafka-performance-part-1-write-throughput-7c7a76ab7db1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part 1: Write Throughput&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cnblogs.com/smartloli/p/4543211.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 实战：简单实例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;message-queue&#34;&gt;Message Queue&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://softwaremill.com/using-kafka-as-a-message-queue/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Using Kafka as a message queue&lt;/a&gt;: In this post I’d like to outline a possible implementation of a Kafka-based Message Queue.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bJE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-View Counting at Reddit&lt;/a&gt;: Reddit’s data pipeline is primarily oriented around Apache Kafka. When a user views a post, an event gets fired and sent to an event collector server, which batches the events and persists them into Kafka.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;internals&#34;&gt;Internals&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zqhxuyuan1.gitbooks.io/kafka/content/chapter1-intro.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 源码分析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jasongj.com/2015/01/02/Kafka%e6%b7%b1%e5%ba%a6%e8%a7%a3%e6%9e%90/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kafka 深度解析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Kafka-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/messagequeue/kafka/kafka-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/messagequeue/kafka/kafka-opensource-list/</guid>
      <description>&lt;h1 id=&#34;kafka-opensource-list&#34;&gt;Kafka OpenSource List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/edenhill/kafkacat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-kafkacat 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Generic command line non-JVM Apache Kafka producer and consumer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/provectus/kafka-ui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Kafka UI 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: UI for Apache Kafka is a free, open-source web UI to monitor and manage Apache Kafka clusters.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/didi/KnowStreaming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-KnowStreaming 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/didi/KnowStreaming&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Know Streaming 是一套云原生的 Kafka 管控平台，脱胎于众多互联网内部多年的 Kafka 运营实践经验，专注于 Kafka 运维管控、监控告警、资源治理、多活容灾等核心场景。在用户体验、监控、运维管控上进行了平台化、可视化、智能化的建设，提供一系列特色的功能，极大地方便了用户和运维人员的日常使用，让普通运维人员都能成为 Kafka 专家。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
