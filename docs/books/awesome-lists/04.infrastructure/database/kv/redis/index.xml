<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Redis | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/index.xml" rel="self" type="application/rss+xml" />
    <description>Redis</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>Redis</title>
      <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/</link>
    </image>
    
    <item>
      <title>Redis-Cluster-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/redis-cluster-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/redis-cluster-list/</guid>
      <description>&lt;h1 id=&#34;cluster--集群架构&#34;&gt;Cluster | 集群架构&lt;/h1&gt;
&lt;h2 id=&#34;sharding&#34;&gt;Sharding&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Kne&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-这可能是最全的 Redis 集群方案介绍了&lt;/a&gt;: 各大企业在 3.0 版本还没发布前为了解决 Redis 的存储瓶颈，纷纷推出了各自的 Redis 集群方案。这些方案的核心思想是把数据分片（sharding）存储在多个 Redis 实例中，每一片就是一个 Redis 实例。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/by5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Redis 集群实现原理探讨&lt;/a&gt;：Redis 集群是一个 distribute、fault-tolerant 的 Redis 实现，主要设计目标是达到线性可扩展性、可用性、数据一致性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;redis-cluster&#34;&gt;Redis Cluster&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/mindfloating/article/details/50458768&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 集群的合纵与连横&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/dc_726/article/details/48552531&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;全面剖析 Redis Cluster 原理和应用&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/andylucc/blog/704440&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis Cluster 分区实现原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzA3MzYwNjQ3NA==&amp;amp;mid=2651296996&amp;amp;idx=2&amp;amp;sn=5f4811d73e74e2a63b1cb0d3d532862a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Redis Cluster 原理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;ha--高可用架构&#34;&gt;HA | 高可用架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuoroger.github.io/2016/08/03/redis-cluster-imbalance/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Redis 集群“倾斜”问题 &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/dc_726/article/details/48733265&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis Cluster 架构优化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://rdc.hundsun.com/portal/article/669.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何部署高可用的 Redis 集群架构&lt;/a&gt;：本文主要介绍 redis 在不同模式下的部署方式，并且对几种模式进行了一些简单的对比。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redis-Internals-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/redis-internals-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/redis-internals-list/</guid>
      <description>&lt;h1 id=&#34;redis-internals-list&#34;&gt;Redis Internals List&lt;/h1&gt;
&lt;h1 id=&#34;event-loop&#34;&gt;Event Loop&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/andylucc/blog/679222&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 网络架构及单线程模型 &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/andylucc/blog/693981&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 异步组件化模型&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://draveness.me/redis-eventloop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Redis 中的事件循环&lt;/a&gt;: 在目前的很多服务中，由于需要持续接受客户端或者用户的输入，所以需要一个事件循环来等待并处理外部事件，这篇文章主要会介绍 Redis 中的事件循环是如何处理事件的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/idwtwt/article/details/79460217&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Redis 源码阅读——基于 epoll 的事件模型&lt;/a&gt;: Redis 的事件模型实现基于 linux 的 epoll，sun 的 export,FreeBSD 和 Mac osx 的 queue，还有 select。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;commands&#34;&gt;Commands&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/hanhuili/article/details/17339005&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入理解 Redis：命令处理流程 &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;communication&#34;&gt;Communication&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/communication-redis-clientserver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Redis client/server 交互流程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuoroger.github.io/2016/07/30/redis-client-two-buffers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 客户端查询缓冲区和输出缓冲区&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;datatypes&#34;&gt;DataTypes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/andylucc/blog/715325&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 压缩列表原理与应用分析&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/acceptedxukai/article/details/17333673&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 内部数据结构详解之跳跃表(skiplist) &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;optimization&#34;&gt;Optimization&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.jobbole.com/106466/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 内存使用优化与存储&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.jobbole.com/99099/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 时延问题分析及应对&lt;/a&gt;: 在笔者自己的 Redis 的实践中，发现 Redis 本身的并发能力还是非常强悍的，但是往往瓶颈会发生在网络延迟中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuoroger.github.io/2016/08/14/redis-data-loss/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 数据丢失问题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuoroger.github.io/2016/08/12/redis-delete-large-keys/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何优雅地删除 Redis 大键&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&amp;amp;mid=401738746&amp;amp;idx=1&amp;amp;sn=281af530d5abec981f3607d6e729914a&amp;amp;scene=21#wechat_redirect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 的性能幻想与残酷现实&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://redisplanet.com/redis/under-the-hood-of-redis-hash-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Under the Hood of Redis&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Redis-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/redis-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/04.infrastructure/database/kv/redis/redis-list/</guid>
      <description>&lt;h1 id=&#34;redis-list&#34;&gt;Redis List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://zzyongx.github.io/blogs/redis-memory-optimization-when-store-small-data.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 存储海量小数据，如何优化内存使用&lt;/a&gt; s&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cachecloud.github.io/2017/02/16/Redis%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 的内存优化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/TBCEwLVAXdsTszRVpXhVug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 架构之防雪崩设计：网站不宕机背后的兵法&lt;/a&gt;：互联网系统中不可避免要大量用到缓存，在缓存的使用过程中，架构师需要注意哪些问题？本文以 Redis 为例，详细探讨了最关键的 3 个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.epubit.com.cn/article/504&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;你不可不知的 Redis 常用命令&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/antirez/redis-doc/blob/master/topics/data-types-intro.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;data-types-intro&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ifeve.com/redis-data-types-intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 的数据类型和抽象概念介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/andylucc/blog/679222&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis 缓存失效机制&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/uqMrYp7FTI11zBIm8kiTLg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-携程 Redis 容器化实践&lt;/a&gt;: 携程的 Redis 使用规模有 200T+，并且每天有百万亿次的访问频率，如此大规模的 Redis 容器化对于我们来说是个不小的挑战，本文分享携程 Redis 容器化落地的一些实践经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JasonLai256/the-little-redis-book/blob/master/cn/redis.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Little Redis Book 中文教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;opensource&#34;&gt;OpenSource&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://redisgraph.io/design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RedisGraph 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A High Performance In-Memory Graph Database as a Redis Module.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/xueqiu/rdr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-RDR 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: RDR(redis data reveal) is a tool to parse redis rdbfile. Comparing to redis-rdb-tools, RDR is implemented by golang, much faster (5GB rdbfile takes about 2mins on my PC).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;extended-edition&#34;&gt;Extended Edition&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JohnSully/KeyDB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-KeyDB 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A Multithreaded Fork of Redis&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/fJi5JEATVcuQVtysqqJp_w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Kvrocks 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Kvrocks 是基于 RocksDB 之上兼容 Redis 协议的 NoSQL 存储服务，设计目标是提供一个低成本以及大容量的 Redis 服务，作为 Redis 在大数据量场景的互补服务，选择兼容 Redis 协议是因为简单易用且业务迁移成本低。目前线上使用的公司包含: 美图、携程、百度以及白山云等，在线上经过两年多大规模实例的验证。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;management&#34;&gt;Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/RedisShake&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redis-shake 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Redis-shake 是一个用于在两个 redis 之间同步数据的工具，满足用户非常灵活的同步、迁移需求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ngbdf/redis-manager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Redis Manager 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Redis 一站式管理平台，支持集群的监控、安装、管理、告警以及基本的数据操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/luin/medis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Medis 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 💻 Medis is a beautiful, easy-to-use Mac database management application for Redis.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
