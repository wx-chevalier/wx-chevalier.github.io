<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>RPC | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/index.xml" rel="self" type="application/rss+xml"/><description>RPC</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>RPC</title><link>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/</link></image><item><title>gRPC-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/grpc-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/grpc-list/</guid><description>&lt;h1 id="grpc">gRPC&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ban" target="_blank" rel="noopener">2017-gRPC in Production&lt;/a>: Today, he&amp;rsquo;s giving us a whirlwind tour of gRPC and how to use it in your production web service.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://kubernetes.io/blog/2018/11/07/grpc-load-balancing-on-kubernetes-without-tears/" target="_blank" rel="noopener">2018-gRPC Load Balancing on Kubernetes without Tears&lt;/a>: Many new gRPC users are surprised to find that Kubernetes’s default load balancing often doesn’t work out of the box with gRPC.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/getezy/ezy" target="_blank" rel="noopener">ezy
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Fully-featured desktop gRPC/gRPC-Web client.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/qaware/protocurl" target="_blank" rel="noopener">2021-protoCURL
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/qaware/protocurl" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: protoCURL is cURL for Protobuf: The command-line tool for interacting with Protobuf over HTTP REST endpoints using human-readable text formats&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>RPC-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/rpc-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/rpc-list/</guid><description>&lt;h1 id="rpc-list">RPC List&lt;/h1>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://6me.us/rfJ" target="_blank" rel="noopener">2017-RPC 服务追踪的原理与实践&lt;/a>：在分布式服务化架构下，由于分布式服务间存在相互依赖，彼此协同来完成各类业务场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/news/2016/04/Distributed-compute-program-RPC" target="_blank" rel="noopener">分布式计算编程模型之 RPC&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;amp;mid=405781868&amp;amp;idx=1&amp;amp;sn=cbb10d37e25c76a1845f593a222da3c9&amp;amp;scene=4#wechat_redirect" target="_blank" rel="noopener">唯品会 RPC 服务框架与容器化演进&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&amp;amp;mid=2650610547&amp;amp;idx=1&amp;amp;sn=2cae08dbf62d9a6c2f964ffd440c0077#rd" target="_blank" rel="noopener">RPC 的概念模型与实现解析&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA3MDExNzcyNA==&amp;amp;mid=2650392260&amp;amp;idx=1&amp;amp;sn=5a4978d02326cdd38e2ea1cd9586b4df&amp;amp;scene=0#wechat_redirect" target="_blank" rel="noopener">牛逼哄哄的 RPC&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzAxMTEyOTQ5OQ==&amp;amp;mid=2650610778&amp;amp;idx=1&amp;amp;sn=630db2a23f4f465de2417cba3f1371cb&amp;amp;chksm=834c7baeb43bf2b82550baf37d4b8595e0c59f82ebbda5bf8eeb6d7bf37b6857035877fb4f89#rd" target="_blank" rel="noopener">RPC 使用中的一些注意点&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIwMzg1ODcwMw==&amp;amp;mid=2247486833&amp;amp;idx=1&amp;amp;sn=2e44bf6c3bc1f6aadeba9bfb96e34620" target="_blank" rel="noopener">2017-体系化认识 RPC&lt;/a>: 本文并不会深入到每一个主题剖析，只做提纲挈领的介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/6AX2-zjvcpesSe93HihVoA" target="_blank" rel="noopener">2017-从核心概念和技术层面着眼，系统化认识 RPC&lt;/a>: RPC 最核心要解决的问题就是在分布式系统间，如何执行另外一个地址空间上的函数、方法，就仿佛在本地调用一样，个人总结的 RPC 最核心的概念和技术包括如下。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="case-study">Case Study&lt;/h2>
&lt;p>&lt;a href="http://rap2.taobao.org/" target="_blank" rel="noopener">http://rap2.taobao.org/&lt;/a>&lt;/p>
&lt;p>&lt;a href="http://apizza.cc/" target="_blank" rel="noopener">http://apizza.cc/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://nei.netease.com/" target="_blank" rel="noopener">https://nei.netease.com/&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.eolinker.com/" target="_blank" rel="noopener">https://www.eolinker.com/&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://blog.didispace.com/microservice-framework/" target="_blank" rel="noopener">微服务架构的基础框架选择：Spring Cloud 还是 Dubbo？&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="rpcx">rpcx&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://blog.rpcx.site/posts/why-did-i-develop-rpcx/" target="_blank" rel="noopener">2019-rpcx 简史&lt;/a>: 现在回过头来看 2016 年的一些探索，真是走对了方向。所以说，2016 年是 rpcx 的元年，5.18 是它的诞生日。&lt;/li>
&lt;/ul></description></item><item><title>RPC-OpenSource-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/rpc-opensource-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/rpc-opensource-list/</guid><description>&lt;h1 id="rpc">RPC&lt;/h1>
&lt;h1 id="showcase">Showcase&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/Snailclimb/guide-rpc-framework" target="_blank" rel="noopener">2020-guide-rpc-framework
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/Snailclimb/guide-rpc-framework" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A custom RPC framework implemented by Netty+Kyro+Zookeeper.（一款基于 Netty+Kyro+Zookeeper 实现的自定义 RPC 框架-附详细实现过程和相关教程。）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/CN-GuoZiyang/My-RPC-Framework" target="_blank" rel="noopener">2020-My-RPC-Framework
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/CN-GuoZiyang/My-RPC-Framework" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: My-RPC-Framework 是一款基于 Nacos 实现的 RPC 框架。网络传输实现了基于 Java 原生 Socket 与 Netty 版本，并且实现了多种序列化与负载均衡算法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="rpc-protocol">RPC Protocol&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="">Hessian&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="">Protobuf&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/EsotericSoftware/kryo" target="_blank" rel="noopener">2021-Kryo
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/EsotericSoftware/kryo" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Kryo is a fast and efficient binary object graph serialization framework for Java. The goals of the project are high speed, low size, and an easy to use API. The project is useful any time objects need to be persisted, whether to a file, database, or over the network.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="rpc-frameworks">RPC Frameworks&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/brpc/brpc" target="_blank" rel="noopener">brpc
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Most common RPC framework used throughout Baidu, with 600,000+ instances and 500+ kinds of services, called &amp;ldquo;baidu-rpc&amp;rdquo; inside Baidu.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://grpc.io/docs/guides/" target="_blank" rel="noopener">gRPC
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: gRPC is a modern, open source, high-performance remote procedure call (RPC) framework that can run anywhere. It enables client and server applications to communicate transparently, and makes it easier to build connected systems.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/smallnest/rpcx" target="_blank" rel="noopener">rpcx
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Faster multil-language bidirectional RPC framework in Go, like alibaba Dubbo and weibo Motan in Java, but with more features, Scale easily.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/apache/incubator-dubbo" target="_blank" rel="noopener">Dubbo
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Apache Dubbo (incubating) is a high-performance, java based, open source RPC framework.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Meituan-Dianping/octo-rpc" target="_blank" rel="noopener">OCTO
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 微服务通信框架及治理平台 OCTO 作为美团基础架构设施的重要组成部分，目前已广泛应用于公司技术线，稳定承载上万应用、日均支撑千亿级的调用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/TarsCloud/Tars" target="_blank" rel="noopener">2018-Tars
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Tars is a high-performance RPC framework based on name service and Tars protocol, also integrated administration platform, and implemented hosting-service via flexible schedule.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://servicecomb.apache.org/cn/" target="_blank" rel="noopener">2018-ServiceComb
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 开箱即用、高性能、兼容流行生态、支持多语言的一站式开源微服务解决方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gitee.com/gszebra/zebra" target="_blank" rel="noopener">Zebra
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Zebra 是国信证券的微服务框架，是国信证券在微服务架构和 CNCF 上的实践，让有相同目标方向的尽量少走弯路。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/trpc/trpc" target="_blank" rel="noopener">2022-trpc
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/trpc/trpc" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: tRPC allows you to easily build &amp;amp; consume fully typesafe APIs without schemas or code generation.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="dubbo">Dubbo&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/AlexStocks/dubbogo" target="_blank" rel="noopener">dubbogo
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: a golang micro-service framework compatible with alibaba dubbo.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/dubbo/dubbo2.js" target="_blank" rel="noopener">dubbo2.js
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>：Node.js native dubbo client on hessian.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="data-formatter">Data Formatter&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/tomnomnom/gron" target="_blank" rel="noopener">gron
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: gron transforms JSON into discrete assignments to make it easier to grep for what you want and see the absolute &amp;lsquo;path&amp;rsquo; to it.&lt;/li>
&lt;/ul>
&lt;h2 id="distributed-tracing--分布式追踪">Distributed Tracing | 分布式追踪&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/openzipkin/zipkin" target="_blank" rel="noopener">Zipkin
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Zipkin is a distributed tracing system. It helps gather timing data needed to troubleshoot latency problems in microservice architectures. It manages both the collection and lookup of this data. Zipkin’s design is based on the Google Dapper paper.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://naver.github.io/pinpoint/" target="_blank" rel="noopener">Pinpoint
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Pinpoint is an APM (Application Performance Management) tool for large-scale distributed systems written in Java / PHP.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="service-coordination">Service Coordination&lt;/h1>
&lt;h2 id="configuration">Configuration&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener">Apollo
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Apollo(阿波罗)是携程框架部门研发的分布式配置中心，能够集中化管理应用不同环境、不同集群的配置，配置修改后能够实时推送到应用端，并且具备规范的权限、流程治理等特性，适用于微服务配置管理场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uv4" target="_blank" rel="noopener">Hawk
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Hawk 基于 ETCD 打造，主要解决把开发人员从复杂的业务流程和烦琐的配置中解脱出来，让开发人员只关注自己的业务代码，把运维、配置这些剥离出去。同时降低服务部署、发布过程中的风险。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/alibaba/nacos" target="_blank" rel="noopener">2018-Nacos
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: an easy-to-use dynamic service discovery, configuration and service management platform for building cloud native applications(更易于构建云原生应用的动态服务发现、配置管理和服务管理平台)&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Serialization-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/serialization-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/02.microcn/rpc/serialization-list/</guid><description>&lt;h1 id="serialization-list">Serialization List&lt;/h1>
&lt;h1 id="json">JSON&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.weheartswift.com/need-know-json/" target="_blank" rel="noopener">All you need to know about JSON&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://taobaofed.org/blog/2016/01/25/jsonschema/" target="_blank" rel="noopener">JSON Schema 那些事儿：基本概念 &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://bsonspec.org/" target="_blank" rel="noopener">BSON&lt;/a>是 Binary JSON 的缩写，即是利用二进制编码的 JSON-Like 的序列化格式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://amznlabs.github.io/ion-docs/cookbook.html" target="_blank" rel="noopener">Ion&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="protocol-buffers">Protocol Buffers&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener">Protocol Buffers Developer Guide #Series#&lt;/a>: Welcome to the developer documentation for protocol buffers – a language-neutral, platform-neutral, extensible way of serializing structured data for use in communications protocols, data storage, and more.&lt;/li>
&lt;/ul>
&lt;h1 id="compression">Compression&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://facebook.github.io/zstd/" target="_blank" rel="noopener">Zstandard
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Zstandard is a real-time compression algorithm, providing high compression ratios.&lt;/li>
&lt;/ul></description></item></channel></rss>