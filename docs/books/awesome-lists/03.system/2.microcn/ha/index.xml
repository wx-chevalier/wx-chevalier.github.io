<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HA | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/index.xml" rel="self" type="application/rss+xml"/><description>HA</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>HA</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/</link></image><item><title>Cache-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/cache-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/cache-list/</guid><description>&lt;h1 id="cache-list">Cache List&lt;/h1>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;h2 id="case-study--案例分析">Case Study | 案例分析&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://zhuanlan.zhihu.com/p/68383301" target="_blank" rel="noopener">2019-知乎已读服务的前生今世与未来&lt;/a>: 为了避免给用户推荐重复的内容，已读服务会将所有知乎站上用户深入阅读或快速掠过的内容长期保存，并将这些数据应用于首页推荐信息流和个性化推送的已读过滤。&lt;/li>
&lt;/ul>
&lt;h1 id="concept--缓存概念">Concept | 缓存概念&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFt" target="_blank" rel="noopener">2018-The hidden components of Web Caching&lt;/a>: Let’s take a bottom-up approach to understanding the various layers of caching.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://tech.youzan.com/cache-background/" target="_blank" rel="noopener">深入浅出 Cache&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cachingexplained.com/#caching-explained" target="_blank" rel="noopener">Caching Explained&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="strategy--缓存策略">Strategy | 缓存策略&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFN" target="_blank" rel="noopener">2016-缓存架构设计细节二三事&lt;/a>: 本文主要讨论这么几个问题：“缓存与数据库”需求缘起，“淘汰缓存”还是“更新缓存”，缓存和数据库的操作时序，缓存和数据库架构简析。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://fdx321.github.io/2016/09/09/%E7%BC%93%E5%AD%98%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">缓存使用总结&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://geek.csdn.net/news/detail/172308" target="_blank" rel="noopener">2017-美团缓存那些事&lt;/a>：在网络分层应用服务中，缓存的使用已比较普及，本文将结合作者实际工作经验总结，讲述在不同的场景下如何选择和使用适用的缓存框架，以达到提升服务质量，优化系统架构的目的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dbaplus.cn/news-21-504-1.html" target="_blank" rel="noopener">腾讯互娱技术总监：不止于思路，谈高性能服务器架构之道中的缓存策略&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFM" target="_blank" rel="noopener">缓存系统在游戏业务中的特异性&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bs3" target="_blank" rel="noopener">缓存级别与缓存更新问题&lt;/a>：缓存失效问题被认为是计算机科学中最难的两件事之一，这篇文章来自翻译，内容主要包括缓存级别与缓存更新常见的几种模式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html" target="_blank" rel="noopener">2016-Design of a Modern Cache&lt;/a>: In this article we will explore the modern methods used by Caffeine, an open-source Java caching library, that yield high hit rates and excellent concurrency.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="architecture--缓存架构">Architecture | 缓存架构&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/zJnqmZqlwYGkC8BXHwjzjw" target="_blank" rel="noopener">2019-这些年，我们一起追过的缓存数据库&lt;/a>: 畅途网为了解决节假日或高峰期的车次查询、抢票等大数据量的访问请求，很早以前就引进了 Redis，来作为数据库的上游缓存层，缓解底层数据库的读写压力。&lt;/li>
&lt;/ul></description></item><item><title>CDN-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/cdn-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/cdn-list/</guid><description>&lt;h1 id="cdn-list">CDN List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/leandromoreira/cdn-up-and-running" target="_blank" rel="noopener">2022-CDN Up and Running&lt;/a>: The objective of this repo is to build a body of knowledge on how CDNs work by coding one from &amp;ldquo;scratch&amp;rdquo;. The CDN we&amp;rsquo;re going to design uses: nginx, lua, docker, docker-compose, Prometheus, grafana, and wrk.&lt;/li>
&lt;/ul></description></item><item><title>HA-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/ha-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/ha-list/</guid><description>&lt;h1 id="ha-list">HA List&lt;/h1></description></item><item><title>HA-OpenSource-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/ha-opensource-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/ha-opensource-list/</guid><description>&lt;h1 id="ha-opensource-list">HA OpenSource List&lt;/h1>
&lt;h1 id="showcase">Showcase&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/2019-techa03/goodsKill" target="_blank" rel="noopener">2019-goodsKill
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/2019-techa03/goodsKill" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 🐯 基于 SpringCloud 2021.x +Dubbo 3.x 构建的模拟秒杀微服务项目，集成了 Elasticsearch🔍、Gateway、Mybatis-Plus、Sharding-JDBC 等常用开源组件&lt;/li>
&lt;/ul>
&lt;h1 id="cache">Cache&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/bilibili/overlord" target="_blank" rel="noopener">Overlord
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Overlord 是哔哩哔哩基于 Go 语言编写的 memcache 和 redis&amp;amp;cluster 的代理及集群管理功能，致力于提供自动化高可用的缓存服务解决方案。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/sohutv/cachecloud" target="_blank" rel="noopener">CacheCloud
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: CacheCloud 提供一个 Redis 云管理平台：实现多种类型(Redis Standalone、Redis Sentinel、Redis Cluster)自动部署、解决 Redis 实例碎片化现象、提供完善统计、监控、运维功能、减少运维成本和误操作，提高机器的利用率，提供灵活的伸缩性，提供方便的接入客户端。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="resilient-service">Resilient Service&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/Netflix/Hystrix" target="_blank" rel="noopener">2015-Hystrix
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems where failure is inevitable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/alibaba/Sentinel" target="_blank" rel="noopener">Sentinel
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A lightweight flow-control library providing high-available protection and monitoring (高可用防护的流量管理框架)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/resilience4j/resilience4j" target="_blank" rel="noopener">2018-Resilience4j
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Resilience4j is a fault tolerance library designed for Java8 and functional programming&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Harden-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/harden-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/harden-list/</guid><description>&lt;h1 id="服务端安全加固资料索引">服务端安全加固资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/jrothrock/server_notes" target="_blank" rel="noopener">Personal notes on building/configuring a server&lt;/a>: Here are various notes I&amp;rsquo;ve made for creating a server. These rules are for Ubuntu running nginx. I have some notes for Apache that I may add at another time.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ibm.com/developerworks/cn/linux/l-seclnx1.html" target="_blank" rel="noopener">让 Linux 更安全&lt;/a>: 在这三篇系列文章中，您将看到如何以一种安全的方法来计划、设计、安装、配置和维护运行 Linux 的系统。除了安全概念的理论概述、安装问题、潜在的危险及其作用以外，您还将得到关于如何保护和加固基于 Linux 的系统 的实用建议。我们将讨论最小化安装、加固 Linux 安装、授权 / 认证、本地和网络安全、攻击和如何防御攻击，以及 数据安全、病毒和恶意程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/linuxsquad/Linux_Workstation_Harden_Security" target="_blank" rel="noopener">Linux_Workstation_Harden_Security&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/drduh/macOS-Security-and-Privacy-Guide" target="_blank" rel="noopener">macOS-Security-and-Privacy-Guide&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/1gPM" target="_blank" rel="noopener">Google’s Infrastructure Security Design Overview&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UWp" target="_blank" rel="noopener">技术分享 | 自制攻击欺骗防御系统 &lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/toniblyx/prowler" target="_blank" rel="noopener">2021-Prowler
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Prowler is a security tool to perform AWS security best practices assessments, audits, incident response, continuous monitoring, hardening and forensics readiness.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lunasec-io/lunasec" target="_blank" rel="noopener">2021-LunaSec
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Security &amp;amp; Compliance SDKs to stop data leaks in your software. With just a few lines, LunaSec adds a Zero Trust Architecture across your stack, Unique Per-Record Encryption, and protection from common security issues like XSS, SQL Injection, and RCE. Try it out live here: &lt;a href="https://app.lunasec.dev" target="_blank" rel="noopener">https://app.lunasec.dev&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>ResilienceService-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/resilienceservice-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/resilienceservice-list/</guid><description>&lt;h1 id="resilience-service">Resilience Service&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/lorin/resilience-engineering#john-allspaw" target="_blank" rel="noopener">Resilience engineering notes&lt;/a>: This file contains notes about people active in resilience engineering, as well as some influential researchers who are no longer with us, organized alphabetically.&lt;/li>
&lt;/ul>
&lt;h1 id="fault-tolerance--系统容错">Fault Tolerance | 系统容错&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://tech.meituan.com/service-fault-tolerant-pattern.html" target="_blank" rel="noopener">服务容错模式&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://stgod.com/2120" target="_blank" rel="noopener">亿级 Web 系统的容错性建设实践&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/cfWwjhKgDXMSQ3BzJ_S2Ag" target="_blank" rel="noopener">服务降级背后的技术架构设计&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://stripe.com/blog/rate-limiters" target="_blank" rel="noopener">2017-Scaling your API with rate limiters&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNA" target="_blank" rel="noopener">2015-Practical Scalability Analysis With The Universal Scalability Law 📚&lt;/a>: I wrote this book to help you understand the simple, but profoundly powerful, truths about scalability.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/wIQIv4TAHRIqR_X9iSz3Hw" target="_blank" rel="noopener">2017- 去哪儿 - 超时，重试，熔断，限流&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="sentinel">Sentinel&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/all4you/sentinel-tutorial" target="_blank" rel="noopener">2019-Sentinel 教程 #Series#&lt;/a>: 本项目内容为一个 Sentinel 的教程。主要包括 Sentinel 原理和 Sentinel 实践两部分内容。&lt;/li>
&lt;/ul></description></item><item><title>RiskManagement-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/riskmanagement-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/riskmanagement-list/</guid><description>&lt;h1 id="risk-management-list">Risk Management List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/88I1v0gZ6wWRye_GV929kg" target="_blank" rel="noopener">斗鱼风控算法体系建设&lt;/a>: 直播行业在业务上面临运营安全、活动安全、流量安全、账号安全、交易安全、内容安全等风险问题，智能风控在技术方面主要有高频对抗、场景繁多、解释性弱等挑战。本文将分享斗鱼算法团队针对以上问题，如何构建风控算法体系，以及如何应对风控技术方面的挑战。&lt;/li>
&lt;/ul></description></item><item><title>Spike-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/spike-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/spike-list/</guid><description>&lt;h1 id="峰值系统">峰值系统&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/GuoZhaoran/spikeSystem" target="_blank" rel="noopener">2019-spikeSystem
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 笔者专门研究了一下“12306”的服务端架构,学习到了其系统设计上很多亮点，在这里和大家分享一下并模拟一个例子：如何在 100 万人同时抢 1 万张火车票时，系统提供正常、稳定的服务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/qiurunze123/miaosha" target="_blank" rel="noopener">2020-miaosha
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: ⭐⭐⭐⭐ 秒杀系统设计与实现.互联网工程师进阶与分析 🙋🐓&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="秒杀峰值">秒杀峰值&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://6me.us/ChFx0" target="_blank" rel="noopener">2016-携程，一个经验证可落地的秒杀系统实践思路 &lt;/a>：为什么要做秒杀？这个不难解释，最起码对于互联网电商业务来说很常见，那怎么样才能设计出相对比较完善的秒杀策略呢？我觉得这其中有两个关键。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/YJG" target="_blank" rel="noopener">2016-淘宝，大秒系统设计详解 | 许令波 | 文末有福利&lt;/a>：最初的秒杀系统的原型是淘宝详情上的定时上架功能，由于有些卖家为了吸引眼球，把价格压得很低。但这给的详情系统带来了很大压力，为了将这种突发流量隔离，才设计了秒杀系统，文章主要介绍大秒系统以及这种典型读数据的热点问题的解决思路和实践经验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://developer.51cto.com/art/201601/503511.htm" target="_blank" rel="noopener">秒杀系统架构分析与实战&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dbaplus.cn/news-21-420-1.html" target="_blank" rel="noopener">乐视秒杀：每秒十万笔交易的数据架构解读&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dbaplus.cn/news-21-457-1.html" target="_blank" rel="noopener">阿里价值“千万”的秒杀场景参数优化&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.jobbole.com/103995/" target="_blank" rel="noopener">四种框架分别实现百万 websocket 常连接的服务器&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.jobbole.com/103994/" target="_blank" rel="noopener">七种 WebSocket 框架的性能比较&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s?__biz=MzA4NDc2MDQ1Nw==&amp;amp;mid=2650238120&amp;amp;idx=1&amp;amp;sn=b769692f21dd70ab64b118fc7fecf3c4&amp;amp;chksm=87e18e4eb09607581db3769df7a50526658d8b9ffea0d19523b875e8c682eb790ee4291904dc&amp;amp;scene=0&amp;amp;key=&amp;amp;ascene=7&amp;amp;uin=&amp;amp;devicetype=android-22&amp;amp;version=26031c38&amp;amp;nettype=WIFI" target="_blank" rel="noopener">秒杀系统架构优化思路&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/by3" target="_blank" rel="noopener">2017-如何设计一个小而美的秒杀系统？&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>SRE-List</title><link>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/sre-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/03.system/2.microcn/ha/sre-list/</guid><description>&lt;h1 id="sre-list">SRE List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://hackernoon.com/so-you-want-to-be-an-sre-34e832357a8c#.x8tn42pb7" target="_blank" rel="noopener">So you want to be an SRE?&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://lvwenhan.com/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/492.html" target="_blank" rel="noopener">2018-性能之殇 #Series#&lt;/a>: 本文的目标是在我有限的认知范围内，讨论一下人们为了提高性能做出的种种努力，这里面包含硬件层面的 CPU、RAM、磁盘，操作系统层面的并发、并行、事件驱动，软件层面的多进程、多线程，网络层面的分布式，等等等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/Fz25N7" target="_blank" rel="noopener">2016-究竟啥才是互联网架构“高可用”&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.thankbabe.com/2016/04/01/high-concurrency/" target="_blank" rel="noopener">2017-大话程序猿眼里的高并发&lt;/a>：高并发是指在同一个时间点，有很多用户同时的访问 URL 地址，比如：淘宝的双 11，双 12，就会产生高并发, 如贴吧的爆吧，就是恶意的高并发请求，也就是 DDOS 攻击，再屌丝点的说法就像玩撸啊撸被 ADC 暴击了一样, 那伤害你懂得 ( 如果你看懂了，这个说法说明是正在奔向人生巅峰的屌丝。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/KsXS5f-1-217CY5R88qOHQ" target="_blank" rel="noopener">2017-如何提升 Web 后端性能？我的 4 个实践和总结&lt;/a>：随着互联网的不断发展，日常生活中越来越多的需求通过网络来实现，从衣食住行到金融教育，从口袋到身份，人们无时无刻不依赖着网络，而且越来越多的人通过网络来完成自己的需求。作为直接面对来自客户请求的 Web 服务端，无疑是要同时承受更多的请求，并为用户提供更好的体验。这个时候 Web 端的性能常常会成为业务发展的瓶颈，提升性能刻不容缓。本文作者在开发过程中总结了一些提升 Web 服务端性能的经验，与大家分享。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/5ovOHoI4gZqokez672wriQ" target="_blank" rel="noopener">2019-大规模微服务单元化与高可用设计&lt;/a>: 为了满足以上的要求，这个系统绝不是运维组努力一把，或者开发组努力一把，就能解决的，是一个端到端的，各个部门共同完成的一个目标，所以我们常称为战略设计。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/linkedin/school-of-sre" target="_blank" rel="noopener">2020-School of SRE 🎥&lt;/a>: At LinkedIn, we are using this curriculum for onboarding our entry level talents into the SRE role.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="case-study">Case Study&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://geek.csdn.net/news/detail/53231" target="_blank" rel="noopener">荔枝 FM 架构师刘耀华：异地多活 IDC 机房架构&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="resource">Resource&lt;/h1>
&lt;h2 id="book">Book&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://landing.google.com/sre/sre-book/chapters/foreword/" target="_blank" rel="noopener">2018-Google Site Reliability Engineering 📚&lt;/a>: This book shows a willingness to let SRE thinking come out of the shadows.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://static.googleusercontent.com/media/landing.google.com/zh-CN//sre/static/pdf/Building_Secure_and_Reliable_Systems.pdf" target="_blank" rel="noopener">2020-Building Secure &amp;amp; Reliable Systems 📚&lt;/a>: Best Practices for Designing, Implementing and Maintaining Systems.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="collection">Collection&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/upgundecha/howtheysre" target="_blank" rel="noopener">howtheysre
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A curated collection of publicly available resources on how technology and tech-savvy organizations around the world practice Site Reliability Engineering (SRE).&lt;/li>
&lt;/ul>
&lt;h1 id="tutorial">Tutorial&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://biriukov.dev/docs/fd-pipe-session-terminal/0-sre-should-know-about-gnu-linux-shell-related-internals-file-descriptors-pipes-terminals-user-sessions-process-groups-and-daemons/" target="_blank" rel="noopener">2022-What every SRE should know about GNU/Linux shell related internals: file descriptors, pipes, terminals, user sessions, process groups and daemons #Series#&lt;/a>: Despite the era of containers, virtualization, and the rising number of UI of all kinds, SREs often spend a significant part of their time in GNU/Linux shells. It could be debugging, testing, developing, or preparing the new infrastructure. It may be the good old bash, the more recent and fancy zsh, or even fish or tcsh with their interesting and unique features.&lt;/li>
&lt;/ul>
&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;h2 id="incidents-management">Incidents Management&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Netflix/dispatch" target="_blank" rel="noopener">Dispatch
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: All of the ad-hoc things you&amp;rsquo;re doing to manage incidents today, done for you, and much more!&lt;/li>
&lt;/ul></description></item></channel></rss>