<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01.Architecture | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/03.system/01.architecture/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/03.system/01.architecture/index.xml" rel="self" type="application/rss+xml" />
    <description>01.Architecture</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>01.Architecture</title>
      <link>https://ng-tech.icu/books/awesome-lists/03.system/01.architecture/</link>
    </image>
    
    <item>
      <title>Architecture-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/03.system/01.architecture/architecture-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/03.system/01.architecture/architecture-list/</guid>
      <description>&lt;h1 id=&#34;software-architecture-list--软件架构与设计资料索引&#34;&gt;Software Architecture List | 软件架构与设计资料索引&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bD3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-10 Common Software Architectural Patterns in a nutshell&lt;/a&gt;: In this article, I will be briefly explaining the following 10 common architectural patterns with their usage, pros and cons.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://herbertograca.com/2017/07/03/the-software-architecture-chronicles/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The Software Architecture Chronicles #Series#&lt;/a&gt;: In them, I write about what I’ve learned about Software Architecture, how I think of it, and how I use that knowledge.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/architecture/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Software Architecture Guide&lt;/a&gt;: A guide to material on martinfowler.com about software architecture.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://q.infoqstatic.com/ppt/service-origin-exploration.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;探索 Service 本源&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/significantfrank/article/details/85785565&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-复杂度应对之道，COLA 应用架构&lt;/a&gt;: 这种人为的复杂性导致系统越来越臃肿，越来越难维护，酱缸的老代码发出一阵阵恶臭，新来的同学，往往要捂着鼻子抠几天甚至几个月，才能理清系统和业务脉络，然后又一头扎进各种 bug fix，业务修补的恶性循环中，暗无天日！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://autonomy.design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-业务逻辑拆分模式 #Series#&lt;/a&gt;: 为何随机选择了这三种问题并归纳为业务逻辑拆分问题呢? 因为我认为以上三种问题都是由同一个不易变化的本质约束所造成。这个本质约束就是人类的感知与沟通速度是很慢的。所谓业务架构，其实质就是想尽一切办法减少沟通。只有沟通少，效率才会高，质量才会好。就是这么简单的一件事情。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://martinfowler.com/books/eaa.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2003-Martin Fowler-Patterns of Enterprise Application Architecture》📚&lt;/a&gt;: This book started after Dave Rice and I gave some talks on J2EE architecture and mulled over how the concepts we had learned in C++, Forte, CORBA, and Smalltalk had been crucial to us developing good designs in Java.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://aosabook.org/en/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;500 Lines or Less: The Architecture of Open Source Applications》📚&lt;/a&gt;: 神书一套，介绍了很多开源软件的架构设计，In these two books, the authors of four dozen open source applications explain how their software is structured, and why. What are each program&amp;rsquo;s major components? How do they interact? And what did their builders learn during their development? In answering these questions, the contributors to these books provide unique insights into how they think.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-CS-Books&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-Alexander-简约之美：软件设计之道》📚&lt;/a&gt;：本书将软件设计作为一门严谨的科学，阐述了开发出优雅简洁的代码所应该遵循的基本原则。作者从为什么以前软件设计没有像数学等学科一样成为一门科学开始入手，道出了软件以及优秀的软件设计的终极目标，并给出了具体的指导规则。这是一本软件思想著作，适合任何背景、使用任何语言的程序员。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.com/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-Vaughn-Implementing Domain Driven Design》📚&lt;/a&gt;: Implementing Domain-Driven Design will impart a treasure trove of knowledge hard won within the DDD and enterprise application architecture communities over the last couple decades.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.amazon.cn/dp/B01B60Z9WG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-架构漫谈》📚&lt;/a&gt;: 专栏以 Kevin 的架构经验为基础，逐步讨论什么是架构、怎样做好架构、软件架构如何落地、如何写好代码等问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://sourcemaking.com/refactoring&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Source Making-Refactoring Series》📚&lt;/a&gt;: The book covers 89 code smells and the appropriate methods for refactoring. It consists of simple text slides, cute illustrations and interactive code examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://putregai.com/sbooks/clean_arch.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Martin-Clean Architecture》📚&lt;/a&gt;: A Craftsman&amp;rsquo;s Guide to Software Structure and Design.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bookstack.cn/read/A-Philosophy-of-Software-Design-zh/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-A Philosophy of Software Design | 软件设计的哲学》📚&lt;/a&gt;: 冠名为“艺术”，内容可能是记录一件优秀作品的设计过程和经验；而冠名为“哲学”，则是一些通用的原则和方法论，这些原则方法论串起来，能够形成一个体系。正如”知行合一”、“世界是由原子构成的”、“我思故我在”，这些耳熟能详的句子能够一定程度上代表背后的人物和思想。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;refactor--clean-code&#34;&gt;Refactor &amp;amp; Clean Code&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Mg5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2012-Clean Code》📚&lt;/a&gt;: Even bad code can function. But if code isn’t clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesn’t have to be that way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://refactoringguru.cn/refactoring&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Guru Refactoring》📚&lt;/a&gt;: Refactoring is a systematic process of improving code without creating new functionality that can transform a mess into clean code and simple design.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ddd&#34;&gt;DDD&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/domain-driven-design-distilled/9780134434964/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Vaughn-Domain Driven Design Distilled》📚&lt;/a&gt;: Vernon guides you through each core DDD technique for building better software. You’ll learn how to segregate domain models using the powerful Bounded Contexts pattern, to develop a Ubiquitous Language within an explicitly bounded context, and to help domain experts and developers work together to create that language.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;architect--架构师&#34;&gt;Architect | 架构师&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/M8y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-架构师画像&lt;/a&gt;: 这篇文章就来讲讲我觉得的架构师的画像，到底具备什么素质的同学是贴合架构师形象的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.scalerstalk.com/838-architect&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;支付宝架构师：从工程师到架构师的成长之路&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.coderhood.com/5-problem-solving-skills-great-software-developers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The 5 Problem-Solving Skills of Great Software Developers&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uv2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-The Path to Becoming a Software Architect&lt;/a&gt;: There are several career paths a developer might take, and this series talks over how to become a software architect.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;middle-platform--中台&#34;&gt;Middle Platform | 中台&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/SPMJvk_Jv1vCnSGA86RX_Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-我的一年中台实战录&lt;/a&gt;: 他所在的团队用一年时间搭建中台，虽然因为公司战略和组织架构调整，中台项目被停止了，但是其间有太多的收获、感悟和反思，借本篇文章分享给对中台感兴趣的朋友们。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/qTvj6MmrRRaLOjtyqc25XA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-网易杭研中台实践：建中台有可行方法论吗？&lt;/a&gt;: 本文中，InfoQ 对网易副总裁，网易杭州研究院执行院长汪源进行了独家采访，试图了解网易杭研的中台搭建背景及中台实践方法论。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/ZHnJNYDoD3qCpsmszXIuHA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-百分点 To B 转型之路：技术中台及 DevOps 的建设实践&lt;/a&gt;: 我今天分享的内容主要包括：百分点在发展 ToB 业务过程中遇到的挑战；针对这些挑战，我们在技术建设和组织建设方面的思考；最后，我会针对整个转型过程做个总结。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tbwork.org/2020/08/02/what-is-mid-platform/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-大中台的黄粱一梦和复用性设计的繁荣盛世&lt;/a&gt;: 本文会严格考虑系统实现的可操作性，时刻带着这种落地感来诠释中台。也希望通过此文指引更多的企业走向正确的中台之路，而不要被那些花里胡哨的概念误导，最后落到舍本逐末、烂尾收场的尴尬境地。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/AIkW7r5UyU8O3FwXEXFiPw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-京东服务技术中台：全流程建设方法及思考总结&lt;/a&gt;: 聚焦在京东服务技术中台的全流程建设方法，分享了在中台建设领域的经验总结，本文是根据他去年 GTLC 演讲内容整理而来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;principles&#34;&gt;Principles&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dwmkerr/hacker-laws&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker Laws&lt;/a&gt;: Laws, Theories, Principles and Patterns that developers will find useful.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://12factor.net/zh_cn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12-factors&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/articles/several-pain-points-architecture-design&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;针对架构设计的几个痛点，我总结出的架构原则和模式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;over-engineering--过度设计&#34;&gt;Over-Engineering | 过度设计&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MjM5ODczNTkwMA==&amp;amp;mid=2650107080&amp;amp;idx=1&amp;amp;sn=527e1f3f9b048127d1114f9272ddd927#rd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;坑系列&amp;mdash;重构过程中的过度设计&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bih&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Modern Software Over-Engineering Mistakes&lt;/a&gt;: Few things are guaranteed to increase all the time: Distance between stars, Entropy in the visible universe, and Fucking business requirements . Many articles say Dont over-engineer but don’t say why or how. Here are 10 clear examples.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;opensource&#34;&gt;OpenSource&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/plantuml-stdlib/C4-PlantUML&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C4-PlantUML 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: C4-PlantUML combines the benefits of PlantUML and the C4 model for providing a simple way of describing and communicate software architectures.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
