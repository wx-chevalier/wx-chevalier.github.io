<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Compiler | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/1.cs/theory/compiler/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/1.cs/theory/compiler/index.xml" rel="self" type="application/rss+xml" />
    <description>Compiler</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>Compiler</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/theory/compiler/</link>
    </image>
    
    <item>
      <title>Compiler-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/theory/compiler/compiler-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/theory/compiler/compiler-list/</guid>
      <description>&lt;h1 id=&#34;compiler-list--编译原理资料索引&#34;&gt;Compiler List | 编译原理资料索引&lt;/h1&gt;
&lt;p&gt;There are massive curated links to help you study anything about Compiler head first, with tutorials, practices, opensource, courses, books, etc. You can search more links/books in &lt;a href=&#34;https://https:wx-chevalier.github.io/home/#/search?query=React&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xCompass&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/36301857&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-前端要以正确的姿势学习编译原理&lt;/a&gt;: 却发现并没有人给大家介绍前端要如何以系统并且正确地学习编译原理，所以我就结合自己的经验以及走过的弯路来给大家分享点心得和经验，希望能让大家少走点弯路。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/7BlocZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;From math to machine: translating a function to machine code&lt;/a&gt;: In this post I&amp;rsquo;m going to explore how a mathematical concept can be redefined in progressively more computer-oriented terms, all the way from high level languages down to machine code, ready for direct execution by a computer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://citw.dev/tutorial/create-your-own-compiler?p=1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Create Your Own Compiler #Series#&lt;/a&gt;: In this tutorial, we&amp;rsquo;ll be doing an instructed walkthrough of Jamie Kyle&amp;rsquo;s &amp;ldquo;The Super Tiny Compiler&amp;rdquo;. The Super Tiny Compiler is a simple compiler written in Javascript and we&amp;rsquo;ll write it step by step from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;practices--实践&#34;&gt;Practices | 实践&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jamiebuilds/the-super-tiny-compiler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-the-super-tiny-compiler 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This is an ultra-simplified example of all the major pieces of a modern compiler written in easy to read JavaScript.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@kosamari/how-to-be-a-compiler-make-a-compiler-with-javascript-4a8a13d473b4#.dday0a975&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;how-to-be-a-compiler-make-a-compiler-with-javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ibara/pl0c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-pl0c&lt;/a&gt;: PL/0 to C compiler to teach basic compiler construction from a practical, hands-on perspective.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;course&#34;&gt;Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Advanced Compilers: The Self-Guided Online Course 🎥&lt;/a&gt;: CS 6120 is a PhD-level Cornell CS course by Adrian Sampson on programming language implementation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;parser&#34;&gt;Parser&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/antineutrino/article/details/6763722&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前缀、中缀、后缀表达式&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/sunshine1314/article/details/2309655&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Big Endian 和 Little Endian&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;interpreter&#34;&gt;Interpreter&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/509505d3bd50&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;怎样写一个解释器&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;jit&#34;&gt;JIT&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.stephendiehl.com/posts/monads_machine_code.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Monads to Machine Code&lt;/a&gt;: Let’s build a small LLVM-like intermediate language and JIT execution engine in Haskell.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bs2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Adventures in JIT compilation #Series#&lt;/a&gt;: he plan is to take a simple input language and develop some interpreters and JITs for it, in roughtly increasing degree of complexity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pypy.org/posts/2022/07/toy-optimizer.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Implementing a Toy Optimizer&lt;/a&gt;: In this blog post I want to show the complete code (in Python3) of how a very simple optimizer for sequences of operations can work.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Compiler-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/theory/compiler/compiler-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/theory/compiler/compiler-opensource-list/</guid>
      <description>&lt;h1 id=&#34;compiler-opensource-list&#34;&gt;Compiler OpenSource List&lt;/h1&gt;
&lt;h1 id=&#34;showcase&#34;&gt;Showcase&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rui314/chibicc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;chibicc 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: chibicc is yet another small C compiler that implements most C11 features.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
