<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DesignPattern | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/index.xml" rel="self" type="application/rss+xml"/><description>DesignPattern</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>DesignPattern</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/</link></image><item><title>DesignPattern-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/designpattern-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/designpattern-list/</guid><description>&lt;h1 id="design-pattern-list">Design Pattern List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/kamranahmedse/design-patterns-for-humans" target="_blank" rel="noopener">2017-Design Patterns for Humans&lt;/a>: A topic that can easily make anyone&amp;rsquo;s mind wobble. Here I try to make them stick in to your mind (and maybe mine) by explaining them in the simplest way possible.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/40520339/answer/250338569" target="_blank" rel="noopener">云栖社区-架构师的路到底怎么走&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bD3" target="_blank" rel="noopener">2017-10 Common Software Architectural Patterns in a nutshell&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="overview">Overview&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U82" target="_blank" rel="noopener">The Command Pattern Using Higher Order Functions&lt;/a>: If your team is used to functional programming, then know that design patterns like the Command pattern can be used in a functional way as well.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://netbasal.com/javascript-observables-under-the-hood-2423f760584#.ihd02lckm" target="_blank" rel="noopener">JavaScript — Observables Under The Hood&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" target="_blank" rel="noopener">Learning JavaScript Design Patterns&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="resource--资料索引">Resource | 资料索引&lt;/h1>
&lt;h2 id="book">Book&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://refactoringguru.cn/design-patterns/what-is-pattern" target="_blank" rel="noopener">Refactoring Guru 📚&lt;/a>：Design patterns are typical solutions to common problems in software design. Each pattern is like a blueprint that you can customize to solve a particular design problem in your code.&lt;/li>
&lt;/ul>
&lt;h2 id="resource">Resource&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/gztchan/design-patterns-in-typescript" target="_blank" rel="noopener">2016-Design Patterns in Typescript
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/fbeline/Design-Patterns-JS/" target="_blank" rel="noopener">2017-Design Patterns JS
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: All the 23 (GoF) design patterns implemented in Javascript&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ui8" target="_blank" rel="noopener">2017-Design Patterns in TypeScript
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Here are the implementations of the following design patterns in TypeScript.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="solid">SOLID&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6m" target="_blank" rel="noopener">Understanding SOLID Principles #Series#&lt;/a>: &lt;a href="https://parg.co/U6m" target="_blank" rel="noopener">Understanding SOLID Principles: Open Closed Principle&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://aspiringcraftsman.com/2012/01/22/solid-javascript-the-dependency-inversion-principle/" target="_blank" rel="noopener">2012-solid-javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="creational-pattern">Creational Pattern&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.freecodecamp.org/elegant-patterns-in-modern-javascript-ice-factory-4161859a0eee" target="_blank" rel="noopener">2018-Elegant patterns in modern JavaScript: Ice Factory&lt;/a>: An Ice Factory is just a function that creates and returns a frozen object.&lt;/li>
&lt;/ul>
&lt;h2 id="behavioral-pattern">Behavioral Pattern&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@benlesh/learning-observable-by-building-observable-d5da57405d87" target="_blank" rel="noopener">Learning Observable By Building Observable&lt;/a>: Observable is just a function that takes an observer and returns a function.&lt;/li>
&lt;/ul>
&lt;h1 id="language-implementation">Language Implementation&lt;/h1>
&lt;h2 id="java">Java&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/oo-tricks-the-art-of-command-query-separation-9343e50a3de0" target="_blank" rel="noopener">2017-Object Oriented Tricks&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uk6" target="_blank" rel="noopener">SOLID Principles: The Definitive Guide&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cubox.pro/c/HMaeaL" target="_blank" rel="noopener">Design patterns implemented in Java
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: This site showcases Java Design Patterns. The solutions have been developed by experienced programmers and architects from the open source community.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="go">Go&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/tmrts/go-patterns" target="_blank" rel="noopener">go-patterns
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Curated list of Go design patterns, recipes and idioms.&lt;/li>
&lt;/ul>
&lt;h2 id="swift">Swift&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ochococo/OOD-Principles-In-Swift" target="_blank" rel="noopener">OOD-Principles-In-Swift 📚&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="javascript">JavaScript&lt;/h2></description></item><item><title>FunctionalProgramming-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/functionalprogramming-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/functionalprogramming-list/</guid><description>&lt;h1 id="函数式编程资料索引">函数式编程资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/javascript-scene/the-rise-and-fall-and-rise-of-functional-programming-composable-software-c2d91b424c8c#.1c7sks72i" target="_blank" rel="noopener">2017-The Rise and Fall and Rise of Functional Programming (Composable Software)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://thesocietea.org/2016/12/core-functional-programming-concepts/" target="_blank" rel="noopener">2012-Core Functional Programming Concepts&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24648375" target="_blank" rel="noopener">函数式编程的早期历史&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://functionaljavascript.blogspot.jp/2013/03/introduction-to-functional-javascript.html" target="_blank" rel="noopener">introduction-to-functional-javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.x8c0kqlc5" target="_blank" rel="noopener">master-the-javascript-interview-what-is-a-pure-function&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@tuyenbq/functional-reactive-programing-first-concepts-must-be-looked-into-further-c17db2cc51ac#.84iwlj6g0" target="_blank" rel="noopener">Functional Reactive Programming, first concepts must be looked into further.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/hemanth/functional-programming-jargon" target="_blank" rel="noopener">Jargon from the functional programming world in simple terms!&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000005898817" target="_blank" rel="noopener">在下函数式编程有何贵干&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.lihaoyi.com/post/WhatsFunctionalProgrammingAllAbout.html" target="_blank" rel="noopener">2017-What&amp;rsquo;s Functional Programming All About?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEI" target="_blank" rel="noopener">2017-Practical Functional Programming&lt;/a>: The presentation attempted to explain functional programming without using concepts like “monads” or “immutability” or “side effects”.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/nh5qifdneF_Y3xOJBy_ipg" target="_blank" rel="noopener">左耳朵耗子：什么是函数式编程？&lt;/a>: 本文结合递归、map 和 reduce，以及 pipeline 等技术，对比了非函数式编程和函数式编程在解决相同问题时的不同处理思路，让你对函数式编程范式有了清晰明确的认知。并在文末引入了 decorator(修饰器)，使得将普通函数管道化成为一件轻而易举的事情。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="resource">Resource&lt;/h1>
&lt;h2 id="book">Book&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/MostlyAdequate/mostly-adequate-guide" target="_blank" rel="noopener">2018-Mostly adequate guide to FP 📚&lt;/a>: This is a book on the functional paradigm in general. We&amp;rsquo;ll use the world&amp;rsquo;s most popular functional programming language: JavaScript. Some may feel this is a poor choice as it&amp;rsquo;s against the grain of the current culture which, at the moment, feels predominately imperative.&lt;/li>
&lt;/ul>
&lt;h1 id="monad">Monad&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/44965/what-is-a-monad" target="_blank" rel="noopener">What is a monad?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/2488646/why-are-side-effects-modeled-as-monads-in-haskell" target="_blank" rel="noopener">Why are side-effects modeled as monads in Haskell?&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>MetaProgramming-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/metaprogramming-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/metaprogramming-list/</guid><description>&lt;h1 id="meta-programming-list--元编程资料索引">Meta Programming List | 元编程资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.ibm.com/developerworks/library/l-metaprog1/index.html" target="_blank" rel="noopener">2005-Introduction to metaprogramming&lt;/a>: Write programs to generate other programs&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://draveness.me/metaprogramming" target="_blank" rel="noopener">谈元编程与表达能力&lt;/a>: 在这篇文章中，作者会介绍不同的编程语言如何增强自身的表达能力，在写这篇文章的时候其实就已经想到这可能不是一篇有着较多受众和读者的文章。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>ObjectOrientedProgramming-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/objectorientedprogramming-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/objectorientedprogramming-list/</guid><description>&lt;h1 id="面向对象编程资料索引">面向对象编程资料索引&lt;/h1>
&lt;p>&lt;a href="https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53#.i54vkh92m" target="_blank" rel="noopener">goodbye-object-oriented-programming&lt;/a>&lt;/p></description></item><item><title>Programming-Paradigm-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/programming-paradigm-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/programming-paradigm-list/</guid><description>&lt;h1 id="编程范式资料索引">编程范式资料索引&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://prezi.com/fftgbgltl-6u/with-some-simple-custom-stylin/?utm_campaign=share&amp;amp;utm_medium=copy" target="_blank" rel="noopener">Exploring Programming Models&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="flow-based-programming">Flow-based Programming&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://jpaulm.github.io/fbp/index.html" target="_blank" rel="noopener">FBP Tenets #Series#&lt;/a>: We are in the process of &amp;ldquo;growing&amp;rdquo; a tutorial which will introduce the reader to the basic concepts of FBP by means of a series of &amp;ldquo;steps&amp;rdquo;, which use the diagramming tool DrawFBP to progressively expand an application diagram and generate and run code at many of those steps.&lt;/li>
&lt;/ul></description></item><item><title>ReactiveProgramming-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/reactiveprogramming-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/reactiveprogramming-list/</guid><description>&lt;h1 id="reactive-programming-list--响应式编程资料索引">Reactive Programming List | 响应式编程资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://emacoo.cn/backend/reactive-overview/" target="_blank" rel="noopener">2017-响应式编程总览&lt;/a>：其中以 RxJava 和 Reactor 为代表的响应式(Reactive)编程技术针对的就是经典的大数据 4V 定义(Volume，Variety，Velocity，Value)中的 Velocity，即高并发问题，而在即将发布的 Spring 5 中，也引入了响应式编程的支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" target="_blank" rel="noopener">The introduction to Reactive Programming you&amp;rsquo;ve been missing&lt;/a>:中文版本&lt;a href="https://github.com/benjycui/introrx-chinese-edition" target="_blank" rel="noopener">The introduction to Reactive Programming you&amp;rsquo;ve been missing &amp;ndash; 中文版&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc#.si249gquf" target="_blank" rel="noopener">What is Reactive Programming?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@ryancollinsio/lessons-learned-from-functional-reactive-programming-b3b6eb2410a4#.7hepkwwqr" target="_blank" rel="noopener">lessons-learned-from-functional-reactive-programming&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="functional-reactive-programming">Functional Reactive Programming&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming" target="_blank" rel="noopener">Stack Overflow:What is Functional Reactive Programming?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://realm.io/news/droidcon-gomez-functional-reactive-programming/" target="_blank" rel="noopener">Functional Reactive Programming in Java&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://conal.net/papers/icfp97/" target="_blank" rel="noopener">Functional Reactive Animation&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://bobkonf.de/2016/apfelmus.html" target="_blank" rel="noopener">Heinrich Apfelmus: Functional Reactive Programming&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="event-stream-based-frp">Event Stream Based FRP&lt;/h1>
&lt;h1 id="transparent-frp">Transparent FRP&lt;/h1></description></item></channel></rss>