<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DesignPattern | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/index.xml" rel="self" type="application/rss+xml" />
    <description>DesignPattern</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>DesignPattern</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/</link>
    </image>
    
    <item>
      <title>DesignPattern-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/designpattern-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/designpattern-list/</guid>
      <description>&lt;h1 id=&#34;design-pattern-list&#34;&gt;Design Pattern List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kamranahmedse/design-patterns-for-humans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Design Patterns for Humans&lt;/a&gt;: A topic that can easily make anyone&amp;rsquo;s mind wobble. Here I try to make them stick in to your mind (and maybe mine) by explaining them in the simplest way possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/40520339/answer/250338569&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;云栖社区-架构师的路到底怎么走&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bD3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-10 Common Software Architectural Patterns in a nutshell&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U82&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Command Pattern Using Higher Order Functions&lt;/a&gt;: If your team is used to functional programming, then know that design patterns like the Command pattern can be used in a functional way as well.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://netbasal.com/javascript-observables-under-the-hood-2423f760584#.ihd02lckm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript — Observables Under The Hood&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learning JavaScript Design Patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource--资料索引&#34;&gt;Resource | 资料索引&lt;/h1&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://refactoringguru.cn/design-patterns/what-is-pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Refactoring Guru 📚&lt;/a&gt;：Design patterns are typical solutions to common problems in software design. Each pattern is like a blueprint that you can customize to solve a particular design problem in your code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;resource&#34;&gt;Resource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gztchan/design-patterns-in-typescript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Design Patterns in Typescript 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fbeline/Design-Patterns-JS/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Design Patterns JS 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: All the 23 (GoF) design patterns implemented in Javascript&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Design Patterns in TypeScript 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Here are the implementations of the following design patterns in TypeScript.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;solid&#34;&gt;SOLID&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U6m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Understanding SOLID Principles #Series#&lt;/a&gt;: &lt;a href=&#34;https://parg.co/U6m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Understanding SOLID Principles: Open Closed Principle&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://aspiringcraftsman.com/2012/01/22/solid-javascript-the-dependency-inversion-principle/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2012-solid-javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;creational-pattern&#34;&gt;Creational Pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.org/elegant-patterns-in-modern-javascript-ice-factory-4161859a0eee&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Elegant patterns in modern JavaScript: Ice Factory&lt;/a&gt;: An Ice Factory is just a function that creates and returns a frozen object.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;behavioral-pattern&#34;&gt;Behavioral Pattern&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@benlesh/learning-observable-by-building-observable-d5da57405d87&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learning Observable By Building Observable&lt;/a&gt;: Observable is just a function that takes an observer and returns a function.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;language-implementation&#34;&gt;Language Implementation&lt;/h1&gt;
&lt;h2 id=&#34;java&#34;&gt;Java&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/oo-tricks-the-art-of-command-query-separation-9343e50a3de0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Object Oriented Tricks&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uk6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SOLID Principles: The Definitive Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cubox.pro/c/HMaeaL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Design patterns implemented in Java 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This site showcases Java Design Patterns. The solutions have been developed by experienced programmers and architects from the open source community.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;go&#34;&gt;Go&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tmrts/go-patterns&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;go-patterns 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Curated list of Go design patterns, recipes and idioms.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;swift&#34;&gt;Swift&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ochococo/OOD-Principles-In-Swift&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OOD-Principles-In-Swift 📚&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javascript&#34;&gt;JavaScript&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>FunctionalProgramming-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/functionalprogramming-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/functionalprogramming-list/</guid>
      <description>&lt;h1 id=&#34;函数式编程资料索引&#34;&gt;函数式编程资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/javascript-scene/the-rise-and-fall-and-rise-of-functional-programming-composable-software-c2d91b424c8c#.1c7sks72i&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The Rise and Fall and Rise of Functional Programming (Composable Software)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://thesocietea.org/2016/12/core-functional-programming-concepts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2012-Core Functional Programming Concepts&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24648375&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;函数式编程的早期历史&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://functionaljavascript.blogspot.jp/2013/03/introduction-to-functional-javascript.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introduction-to-functional-javascript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976#.x8c0kqlc5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;master-the-javascript-interview-what-is-a-pure-function&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@tuyenbq/functional-reactive-programing-first-concepts-must-be-looked-into-further-c17db2cc51ac#.84iwlj6g0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Functional Reactive Programming, first concepts must be looked into further.&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hemanth/functional-programming-jargon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Jargon from the functional programming world in simple terms!&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://segmentfault.com/a/1190000005898817&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在下函数式编程有何贵干&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.lihaoyi.com/post/WhatsFunctionalProgrammingAllAbout.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-What&amp;rsquo;s Functional Programming All About?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UEI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Practical Functional Programming&lt;/a&gt;: The presentation attempted to explain functional programming without using concepts like “monads” or “immutability” or “side effects”.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/nh5qifdneF_Y3xOJBy_ipg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;左耳朵耗子：什么是函数式编程？&lt;/a&gt;: 本文结合递归、map 和 reduce，以及 pipeline 等技术，对比了非函数式编程和函数式编程在解决相同问题时的不同处理思路，让你对函数式编程范式有了清晰明确的认知。并在文末引入了 decorator(修饰器)，使得将普通函数管道化成为一件轻而易举的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/MostlyAdequate/mostly-adequate-guide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Mostly adequate guide to FP 📚&lt;/a&gt;: This is a book on the functional paradigm in general. We&amp;rsquo;ll use the world&amp;rsquo;s most popular functional programming language: JavaScript. Some may feel this is a poor choice as it&amp;rsquo;s against the grain of the current culture which, at the moment, feels predominately imperative.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;monad&#34;&gt;Monad&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/44965/what-is-a-monad&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is a monad?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/2488646/why-are-side-effects-modeled-as-monads-in-haskell&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why are side-effects modeled as monads in Haskell?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MetaProgramming-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/metaprogramming-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/metaprogramming-list/</guid>
      <description>&lt;h1 id=&#34;meta-programming-list--元编程资料索引&#34;&gt;Meta Programming List | 元编程资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/library/l-metaprog1/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2005-Introduction to metaprogramming&lt;/a&gt;: Write programs to generate other programs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://draveness.me/metaprogramming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;谈元编程与表达能力&lt;/a&gt;: 在这篇文章中，作者会介绍不同的编程语言如何增强自身的表达能力，在写这篇文章的时候其实就已经想到这可能不是一篇有着较多受众和读者的文章。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ObjectOrientedProgramming-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/objectorientedprogramming-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/objectorientedprogramming-list/</guid>
      <description>&lt;h1 id=&#34;面向对象编程资料索引&#34;&gt;面向对象编程资料索引&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53#.i54vkh92m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;goodbye-object-oriented-programming&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programming-Paradigm-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/programming-paradigm-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/programming-paradigm-list/</guid>
      <description>&lt;h1 id=&#34;编程范式资料索引&#34;&gt;编程范式资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://prezi.com/fftgbgltl-6u/with-some-simple-custom-stylin/?utm_campaign=share&amp;amp;utm_medium=copy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Exploring Programming Models&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;flow-based-programming&#34;&gt;Flow-based Programming&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://jpaulm.github.io/fbp/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FBP Tenets #Series#&lt;/a&gt;: We are in the process of &amp;ldquo;growing&amp;rdquo; a tutorial which will introduce the reader to the basic concepts of FBP by means of a series of &amp;ldquo;steps&amp;rdquo;, which use the diagramming tool DrawFBP to progressively expand an application diagram and generate and run code at many of those steps.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>ReactiveProgramming-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/reactiveprogramming-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/designpattern/reactiveprogramming-list/</guid>
      <description>&lt;h1 id=&#34;reactive-programming-list--响应式编程资料索引&#34;&gt;Reactive Programming List | 响应式编程资料索引&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://emacoo.cn/backend/reactive-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-响应式编程总览&lt;/a&gt;：其中以 RxJava 和 Reactor 为代表的响应式(Reactive)编程技术针对的就是经典的大数据 4V 定义(Volume，Variety，Velocity，Value)中的 Velocity，即高并发问题，而在即将发布的 Spring 5 中，也引入了响应式编程的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/staltz/868e7e9bc2a7b8c1f754&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The introduction to Reactive Programming you&amp;rsquo;ve been missing&lt;/a&gt;:中文版本&lt;a href=&#34;https://github.com/benjycui/introrx-chinese-edition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The introduction to Reactive Programming you&amp;rsquo;ve been missing &amp;ndash; 中文版&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc#.si249gquf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is Reactive Programming?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ryancollinsio/lessons-learned-from-functional-reactive-programming-b3b6eb2410a4#.7hepkwwqr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lessons-learned-from-functional-reactive-programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;functional-reactive-programming&#34;&gt;Functional Reactive Programming&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1028250/what-is-functional-reactive-programming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stack Overflow:What is Functional Reactive Programming?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://realm.io/news/droidcon-gomez-functional-reactive-programming/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Functional Reactive Programming in Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://conal.net/papers/icfp97/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Functional Reactive Animation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://bobkonf.de/2016/apfelmus.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Heinrich Apfelmus: Functional Reactive Programming&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;event-stream-based-frp&#34;&gt;Event Stream Based FRP&lt;/h1&gt;
&lt;h1 id=&#34;transparent-frp&#34;&gt;Transparent FRP&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
