<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/index.xml" rel="self" type="application/rss+xml" />
    <description>JVM</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>JVM</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/</link>
    </image>
    
    <item>
      <title>JVM-Class-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-class-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-class-list/</guid>
      <description>&lt;h1 id=&#34;jvm-class-list--jvm-类机制资料索引&#34;&gt;JVM Class List | JVM 类机制资料索引&lt;/h1&gt;
&lt;h1 id=&#34;class-structure--类结构&#34;&gt;Class Structure | 类结构&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/17086.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;实例探索 Class 文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;classloader--累类加载器&#34;&gt;Classloader | 累类加载器&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://wingjay.com/2017/05/08/java_classloader/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Java 技术之类加载机制&lt;/a&gt;：类加载机制是 Java 语言的一大亮点，使得 Java 类可以被动态加载到 Java 虚拟机中。这次我们抛开术语和概念，从例子入手，由浅入深地讲解 Java 的类加载机制。本文涉及知识点：双亲委托机制、BootstrapClassLoader、ExtClassLoader、AppClassLoader、自定义网络类加载器等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/a6ba4f152968?utm_source=tuicool&amp;amp;utm_medium=referral&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-一篇文章读懂 Java 类加载器&lt;/a&gt;: Java 类加载器算是一个老生常谈的问题，大多 Java 工程师也都对其中的知识点倒背如流，最近在看源码的时候发现有一些细节的地方理解还是比较模糊，正好写一篇文章梳理一下。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/jj8e8KkqNyJc8iWHjLYogg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-如何实现一个 Java Class 解析器&lt;/a&gt;: 实际上 JDK 已经提供了命令行工具 javap 来反编译 Class 文件，但本篇文章将阐明我实现解析器的思路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;类初始化&#34;&gt;类初始化&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.importnew.com/17105.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 类的连接与初始化 (及 2013 阿里初始化笔试题解析)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JVM-Compiler-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-compiler-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-compiler-list/</guid>
      <description>&lt;h1 id=&#34;jvm-compiler-list--jvm-编译相关资料索引&#34;&gt;JVM Compiler List | JVM 编译相关资料索引&lt;/h1&gt;
&lt;h1 id=&#34;jit--即时编译&#34;&gt;JIT | 即时编译&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.javacodegeeks.com/2013/07/java-just-in-time-compilation-more-than-just-a-buzzword.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-Java Just-In-Time compilation: more than just a buzzword&lt;/a&gt;: This article will share with you a troubleshooting exercise I was involved with following the addition of a new virtual server (capacity improvement and horizontal scaling project).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://t.co/KYKrcM1ycW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Profile-based optimization techniques in the JVM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.takipi.com/java-on-steroids-5-super-useful-jit-optimization-techniques/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java On Steroids 5 Super Useful JIT Optimization Techniques&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://chrisseaton.com/rubytruffle/jokerconf17/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Understanding How Graal Works - a Java JIT Compiler Written in Java&lt;/a&gt;: I’ll talk about just a little bit of the theory but then I’ll show you how this is applied to compile a method all the way from the bytecode to the machine code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JVM-Debug-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-debug-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-debug-list/</guid>
      <description>&lt;h1 id=&#34;debug-tools&#34;&gt;Debug Tools&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/jiushuai/article/details/8455788&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 调试工具说明&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/91jason/blog/493870?p=%7b%7bpage%7d%7d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 监控与调优&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/the-state-of-debugging-in-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-The State of Debugging in Java&lt;/a&gt;: Debugging has come a long way from the jdb days. Here, we cover the variety of Java debuggers out there and some common practices devs use.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.javacodegeeks.com/2017/05/jvm-statistics-jstat.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JVM Statistics with jstat&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/69520&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-我的 Java 问题排查工具单&lt;/a&gt;：平时的工作中经常碰到很多疑难问题的处理，在解决问题的同时，有一些工具起到了相当大的作用，在此书写下来，一是作为笔记，可以让自己后续忘记了可快速翻阅，二是分享，希望看到此文的同学们可以拿出自己日常觉得帮助很大的工具，大家一起进步。闲话不多说，开搞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ajermakovics/jvm-mon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Console based JVM monitoring&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.infoq.cn/article/JYWWVhcGCWL7vGK1RIap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2023-Java 自动化探针技术的核心原理和实践&lt;/a&gt;: 用 C、C++ 实现 JVMTI 功能对大部分 Java 工程师的确强人所难。于是，Sun 公司出了 Java Agent，一个用 Java 实现 JVMTI 的方案，方案相当优雅和容易上手。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;arthas&#34;&gt;Arthas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/5imH2dogvduzHDaVTikqVA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-6 到飞起的 Java 诊断工具 Arthas&lt;/a&gt;: 这时 Arthas 走进了我的眼帘，并成功帮我定位到了问题，就是这样引起了我对 Arthas 的兴趣，于是花了点时间对 Arthas 作了一个了解。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/350292149&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Spring Boot 微服务性能降九成！使用 Arthas 定位根因&lt;/a&gt;: 接收到公司业务部门的开发反馈，应用在升级公司内部框架后，UAT（预生产）环境接口性能压测不达标。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jprofiler&#34;&gt;JProfiler&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.csdn.net/chendc201/article/details/22897999&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2014-JProfiler 入门笔记&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;jstack&#34;&gt;jstack&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.jianshu.com/p/6690f7e92f27&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何使用 jstack 分析线程状态&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mat&#34;&gt;MAT&lt;/h2&gt;
&lt;h2 id=&#34;visualvm&#34;&gt;VisualVM&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ihuangweiwei.iteye.com/blog/1219302&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java VisualVM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UuX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Profiling Java Programs With VisualVM&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackify.com/what-is-visualvm/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-What is VisualVM? How to Use VisualVM, Benefits, Tutorial and More&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;aop-dynamic-tracing&#34;&gt;AOP Dynamic Tracing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ibm.com/developerworks/cn/java/j-lo-jpda1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2008-深入 Java 调试体系&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Nn7Yl6UzRpWnSleKUss8Sw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-阿里巴巴正式开源自研动态非侵入 AOP 解决方案：JVM-Sandbox&lt;/a&gt;: 如何屏蔽字节码增强技术的高门槛，降低研发运维成本，同时又能支持上层多个工具平台功能的快速实现和动态管理，成为阿里集团的目标。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JVM-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-list/</guid>
      <description>&lt;h1 id=&#34;jvm-list&#34;&gt;JVM List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://jakubdziworski.github.io/categories.html#Enkel-ref&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Creating JVM Language Serials #Series#&lt;/a&gt;: I came up with an idea of creating my own simple JVM language and compiler (because why the hell not)? The language is called Enkel, which means “simple” in swedish.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ginobefunny.com/post/jvm_interview_questions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-面试小结之 JVM 篇&lt;/a&gt;：最近面试一些公司，被问到的关于 Java 虚拟机的问题，以及自己总结的回答。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jianshu.com/p/00ffffc9103c?from=timeline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 虚拟机规范(Java SE 8 版)读后总结&lt;/a&gt;: Java 虚拟机的实现必须体现书中内容，但仅在确有必要时才应该受制于这些规范。用书中的原话来说即&amp;quot;公有设计，私有实现&amp;quot;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dbaplus.cn/news-21-173-1.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;听阿里巴巴 JVM 工程师为你分析常见 Java 故障案例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;series&#34;&gt;Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://6me.us/oa8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-JVM Anatomy Park #Series#&lt;/a&gt;: &amp;ldquo;JVM Anatomy Park&amp;rdquo; is the mini-post series, where every post is slated to take 5-10 minutes to read (and no more than 2 hours for me to write).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/qiurunze123/memoryoptimization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-JVM 内存调优与生产实战 #Series#&lt;/a&gt;: 在项目上线之初，我们应该如何设置 JVM 的参数配置,我们如何分配内存空间会使效率最大化，当项目上线后我们如何监控项目的内存情况呢？ 我们又如何来查看内存的溢出情况，分析 GC 日志呢？&amp;hellip;&amp;hellip; 这个项目就是为了这些研究这些可能大家平时不会考虑的东西来应运而生? 此项目仍为进阶课程,一些简单的请提前预习!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/qiurunze123/memoryoptimization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-JVM 内存调优与生产实战 #Series#&lt;/a&gt;: 在项目上线之初，我们应该如何设置 JVM 的参数配置,我们如何分配内存空间会使效率最大化，当项目上线后我们如何监控项目的内存情况呢？ 我们又如何来查看内存的溢出情况，分析 GC 日志呢？&amp;hellip;&amp;hellip; 这个项目就是为了这些研究这些可能大家平时不会考虑的东西来应运而生? 此项目仍为进阶课程,一些简单的请提前预习!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/doocs/jvm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Java 虚拟机底层原理知识总结 #Series#&lt;/a&gt;: 这里仅仅记录了一些笔者认为需要重点掌握的 JVM 知识点，如果你想更加全面地了解 JVM 底层原理，可以阅读周志明老师《深入理解 Java 虚拟机——JVM 高级特性与最佳实践(第 2/3 版)》全书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;memory-architecture&#34;&gt;Memory Architecture&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.importnew.com/17770.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 内幕：Java 虚拟机详解&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.devh.net/yidongnan/blog/4v312p6ben9jnbg403tsnkvgan&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 各区域的用途以及潜在出现异常的示例&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://coding-geek.com/jvm-memory-model/#Stack_based_architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM memory model&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JVM-MemoryManagement-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-memorymanagement-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-memorymanagement-list/</guid>
      <description>&lt;h1 id=&#34;jvm-memory-management-list&#34;&gt;JVM Memory Management List&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hollischuang.com/archives/1003&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《成神之路-基础篇》JVM——Java 内存相关(已完结)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;memory-allocation&#34;&gt;Memory Allocation&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.importnew.com/18242.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;认识 JVM(上)——对象分配&amp;amp;回收算法&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://book.51cto.com/art/201107/278857.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;垃圾收集器与内存分配策略——在线文字版&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://halfstackdeveloper.github.io/2016/12/30/java%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%88%9D%E6%8E%A2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Java 内存管理初探&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;garbage-collection&#34;&gt;Garbage Collection&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://plumbr.eu/java-garbage-collection-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Java Garbage Collection handbook #Series#&lt;/a&gt;: The Java Virtual Machine is a wonderful construct in many ways. Perhaps the most amazing part of it is the Garbage Collection process that automatically takes care of memory management. However – as with all automated solutions, it’s good to understand how they work, even if you don’t plan to manually tune them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.importnew.com/1993.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;成为 JavaGC 专家(1)—深入浅出 Java 垃圾回收机制&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;www.ibm.com/developerworks/cn/java/j-lo-JVMGarbageCollection/index.html&#34;&gt;JVM 垃圾回收器工作原理及使用实例介绍&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zhihu.com/question/51244545/answer/126055789&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java 中, 为什么一个对象的实例方法在执行完成之前其对象可以被 GC 回收?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://darkness463.github.io/2017/03/30/Java-VM-GC/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【笔记】Java 虚拟机(一)-GC&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;garbage-collector&#34;&gt;Garbage Collector&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://shipilev.net/jvm/diy-gc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Do It Yourself (OpenJDK) Garbage Collector&lt;/a&gt;: Adding garbage collection to our non-garbage collector: wait, what?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;cms&#34;&gt;CMS&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://hllvm.group.iteye.com/group/topic/38223#post-248757&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-并发垃圾收集器（CMS）为什么没有采用标记整理-算法来实现，而是采用的标记-清除算法？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;g1&#34;&gt;G1&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/articles/Make-G1-Default-Garbage-Collector-in-Java-9#anch128313&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Case for Defaulting to G1 Garbage Collector in Java 9&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;zgc&#34;&gt;ZGC&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/KUCs_BJUNfMMCO1T3_WAjw?from=groupmessage&amp;amp;isappinstalled=0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Java 程序员的荣光，听 R 大论 JDK11 的 ZGC&lt;/a&gt;: ZGC 的成绩是，无论你开了多大的堆内存(1288G？2T？)，硬是能保证低于 10 毫秒的 JVM 停顿。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;memory-leak--内存泄漏&#34;&gt;Memory Leak | 内存泄漏&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackify.com/memory-leaks-java/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How Memory Leaks Happen in a Java Application&lt;/a&gt;: In this article, we’re going to describe the most common memory leaks, understand their causes, and look at a few techniques to detect/avoid them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackify.com/memory-leaks-java?utm_source=mybridge&amp;amp;utm_medium=ios&amp;amp;utm_campaign=read_more&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-How Memory Leaks Happen in a Java Application&lt;/a&gt;: In this article, we’re going to describe the most common memory leaks, understand their causes, and look at a few techniques to detect/avoid them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.programcreek.com/2013/10/the-introduction-of-memory-leak-what-why-and-how/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Introduction of Java Memory Leaks&lt;/a&gt;: One of the most significant advantages of Java is its memory management. You simply create objects and Java Garbage Collector takes care of allocating and freeing memory. However, the situation is not as simple as that, because memory leaks frequently occur in Java applications.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/6470651/creating-a-memory-leak-with-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creating a memory leak with Java&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bsr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Troubleshooting Memory Issues in Java Applications&lt;/a&gt;: Troubleshooting memory problems can be tricky but the right approach and proper set of tools can simplify the process substantially.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>JVM-Tuning-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-tuning-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.cs/zoo/java/jvm/jvm-tuning-list/</guid>
      <description>&lt;h1 id=&#34;jvm-tuning-list--jvm-问题定位与性能调优资料索引&#34;&gt;JVM Tuning List | JVM 问题定位与性能调优资料索引&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://pengjiaheng.iteye.com/blog/518623&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JVM 调优总结&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/wodeyuer125/article/details/50557168&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Java 问题定位&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
</description>
    </item>
    
  </channel>
</rss>
