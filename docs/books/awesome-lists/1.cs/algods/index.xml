<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AlgoDS | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/1.cs/algods/index.xml" rel="self" type="application/rss+xml"/><description>AlgoDS</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>AlgoDS</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/</link></image><item><title>AlgoDS-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/algods-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/algods-list/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://cdn-images-1.medium.com/max/2000/0*I5vtdhUqmRJ1zI1e.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="algorithm--datastructure-list">Algorithm &amp;amp; DataStructure List&lt;/h1>
&lt;p>This series collect curated, worthy and up-to-date links/reading list for Algorithm &amp;amp; DataStructure.&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.geeksforgeeks.org/top-10-algorithms-in-interview-questions" target="_blank" rel="noopener">Top 10 algorithms in Interview Questions&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Nr6" target="_blank" rel="noopener">2017-Top Algorithms/Data Structures/Concepts every computer science student should know&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://justinmeiners.github.io/think-in-math/" target="_blank" rel="noopener">2019-Think in Math. Write in Code.&lt;/a>: Programming languages are implementation tools, not thinking tools. They are strict formal languages invented to instruct machines in a human-friendly way. In contrast, thoughts are best expressed through a medium which is free and flexible.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="visually">Visually&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ddd" target="_blank" rel="noopener">VisuAlgo&lt;/a>: visualising data structures and algorithms through animation&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/skidding/illustrated-algorithms" target="_blank" rel="noopener">Algorithm → AST → CSS&lt;/a>: Inspired by Grokking Algorithms and python-execution-trace, this project aims to reveal the mechanics behind algorithms via interactive visualizations of their execution.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="resource">Resource&lt;/h1>
&lt;h2 id="blog">Blog&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/developer/article/1365773" target="_blank" rel="noopener">程序员进阶之算法练习 #Series#&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Dairongpeng/algorithm-note" target="_blank" rel="noopener">2021-《algorithm-note》中文版&lt;/a>: 该系列包括数组，链表，树，图，递归，DP，有序表等相关数据结构与算法的讲解及代码实现。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="book">Book&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/julycoding/The-Art-Of-Programming-By-July" target="_blank" rel="noopener">2011-编程之法：面试和算法心得 📚&lt;/a>: 原编程艺术系列从 2011 年 4 月至今，写了 42 个编程问题，在创作的过程当中，得到了很多朋友的支持，特别是博客上随时都会有朋友不断留言，或提出改进建议，或 show 出自己的思路、代码，或指正 bug。为更好的改进、优化、增补编程艺术系列，特把博客上的这个程序员编程艺术系列和博客内其它部分经典文章同步到此，成立本项目。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kevin-wayne/algs4" target="_blank" rel="noopener">2015-algs4
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/kevin-wayne/algs4" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Algorithms, 4th edition textbook code and libraries.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.parallel-algorithms-book.com/" target="_blank" rel="noopener">2017-Algorithm Design: Parallel and Sequential 📚&lt;/a>: 15-210 aims to teach methods for designing, analyzing, and programming sequential and parallel algorithms and data structures.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cses.fi/book.html" target="_blank" rel="noopener">2017-Competitive Programmer&amp;rsquo;s Handbook 📚&lt;/a>: The purpose of this book is to give the reader a thorough introduction to competitive programming. The book is especially intended for students who want to learn algorithms and possibly participate in the International Olympiad in Informatics (IOI) or in the International Collegiate Programming Contest (ICPC).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/TheAlgorithms" target="_blank" rel="noopener">2018-The Algorithms 📚&lt;/a>: Open Source Book for Newbies to Learn Algorithms and Implement them in any Programming Language.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://soulmachine.gitbooks.io/algorithm-essentials/" target="_blank" rel="noopener">2018-算法珠玑 📚&lt;/a>: 本书的目标读者是准备去硅谷找工作的码农，也适用于在国内找工作的码农，以及刚接触 ACM 算法竞赛的新手。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://jeffe.cs.illinois.edu/teaching/algorithms/?#book" target="_blank" rel="noopener">2018-Algorithms 📚&lt;/a>: This textbook grew out of a collection of lecture notes that I wrote for various algorithms classes at the University of Illinois at Urbana-Champaign, which I have been teaching about once a year since January 1999.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://labuladong.gitbook.io/algo/" target="_blank" rel="noopener">2021-labuladong 的算法小抄 📚&lt;/a>: 本网站目前可以手把手带你解决 150 道 LeetCode 算法问题，而且在不断更新，全部基于 LeetCode 的题目，涵盖了所有题型和技巧。我已经把在每篇文章的开头加上了该文章可以解决的 LeetCode 题目链接，可以看完文章立即去拿下对应题目。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/chefyuan/algorithm-base" target="_blank" rel="noopener">2021-algorithm-base 📚&lt;/a>: 专门为刚开始刷题的同学准备的算法基地，没有最细只有更细，立志用动画将晦涩难懂的算法说的通俗易懂！&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://algo.itcharge.cn/" target="_blank" rel="noopener">2022-算法通关手册（LeetCode）&lt;/a>: 本书不仅仅只是一本算法题解书，更是一本算法与数据结构基础知识的讲解书。本书易于理解，没有大跨度的思维跳跃，书中使用部分图示、例子来帮助理解。本书先从基础的数据结构和算法开始讲解，再针对不同分类的数据结构和算法，进行具体题目的讲解分析。让读者可以通过「算法基础理论学习」和「编程实战学习」相结合的方式，彻底的掌握算法知识。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="collection">Collection&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/marcosfede/algorithms" target="_blank" rel="noopener">2018-algorithms
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Solved algorithms and data structures problems in many languages.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.algorithmist.com/index.php/Main_Page" target="_blank" rel="noopener">algorithmist
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: The Algorithmist is a resource dedicated to anything algorithms - from the practical realm, to the theoretical realm. There are also links and explanation to problemsets.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/espadrine/Solve-Data-In-Code" target="_blank" rel="noopener">Solve Data In Code
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: All decidable problems can be solved with algorithms.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wangzheng0822/algo" target="_blank" rel="noopener">2019-algo
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 数据结构和算法必知必会的 50 个代码实现。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/algorithm-visualizer/algorithm-visualizer" target="_blank" rel="noopener">Algorithm Visualizer
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Interactive Online Platform that Visualizes Algorithms from Code.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="leetcode">Leetcode&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.goodtecher.com/zh/leetcode%E8%AE%B2%E8%A7%A3%E6%B1%87%E6%80%BB/" target="_blank" rel="noopener">2018-LeetCode All in One 讲解汇总&lt;/a>: 大家好，这里是 GoodTecher LeetCode 题目讲解汇总表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/MisterBooo/LeetCodeAnimation" target="_blank" rel="noopener">LeetCodeAnimation
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Demonstrate all the questions on LeetCode in the form of animation.（用动画的形式呈现解 LeetCode 题目的思路）&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/qiyuangong/leetcode" target="_blank" rel="noopener">Python &amp;amp; Java Solutions for Leetcode (inspired by haoel&amp;rsquo;s leetcode)&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/haoel/leetcode" target="_blank" rel="noopener">LeetCode Algorithm in C++&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener">fucking-algorithm
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 手把手撕 LeetCode 题目，扒各种算法套路的裤子，not only how，but also why. English version supported!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/doocs/leetcode" target="_blank" rel="noopener">2021-doocs/leetcode
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 😏 LeetCode solutions in any programming language | 多种编程语言实现 LeetCode、《剑指 Offer（第 2 版）》、《程序员面试金典（第 6 版）》题解&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/youngyangyang04/leetcode-master" target="_blank" rel="noopener">2021-LeetCode 刷题攻略
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: LeetCode 刷题攻略：200 道题目详细刷题顺序，共 60w 字的详细图解，视频难点剖析，50 余张思维导图，从此算法学习不再迷茫！🔥🔥 来看看，你会发现相见恨晚！🚀&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="course--课程">Course | 课程&lt;/h2>
&lt;h1 id="c">C++&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.techiedelight.com/list-of-problems/" target="_blank" rel="noopener">2017-Data Structures and Algorithms Problems 🗃️&lt;/a>: 一系列基于 C 实现的数据结构与算法问题的总结。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UVm" target="_blank" rel="noopener">Data Structure and Algorithms Problems&lt;/a>: 160+ Algorithm &amp;amp; Data Structure Problems using C++.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="java">Java&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/sherxon/AlgoDS" target="_blank" rel="noopener">2017-AlgoDS
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Implementation of Algorithms and Data Structures, Interview Questions and Answers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.javaworld.com/article/2073390/core-java/datastructures-and-algorithms-part-1.html?nsdr=true" target="_blank" rel="noopener">2017-Java 101: Datastructures and algorithms in Java&lt;/a>: Datastructures and algorithms are essential to computer science, which is the study of data, its representation in memory, and its transformation from one form to another&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.idevelopment.info/data/Programming/data_structures/overview/Data_Structures_Algorithms_Introduction.shtml" target="_blank" rel="noopener">Introduction to Data Structures and Algorithms&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.gitbook.com/book/yuanbin/algorithm/details" target="_blank" rel="noopener">数据结构与算法学习笔记 ,gitbook 上对于 Leetcode 题解&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="javascript">JavaScript&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/jamiebuilds/itsy-bitsy-data-structures" target="_blank" rel="noopener">2015-itsy-bitsy-data-structures
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: All the things you didn&amp;rsquo;t know you wanted to know about data structures.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIC" target="_blank" rel="noopener">2017-10 Common Data Structures Explained with Videos + Exercises&lt;/a>: Data structures are a critical part of software development, and one of the most common topics for developer job interview questions. The good news is that they’re basically just specialized formats for organizing and storing data. I’m going to teach you 10 of the most common data structures — right here in this short article.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b75" target="_blank" rel="noopener">2017-Basic javascript algorithms toolbox: starter kit&lt;/a>: Here’s a list of javascript quick-to-write algos that are often useful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UZd" target="_blank" rel="noopener">2017-CS Playground React: Algos &amp;amp; Data Structures
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: In-Browser Algorithm and Data Structure Interview Prep.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener">2017-javascript-algorithms
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/loiane/javascript-datastructures-algorithms" target="_blank" rel="noopener">2018-javascript-datastructures-algorithms
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: collection of JavaScript and TypeScript data structures and algorithms for education purposes. Source code bundle of JavaScript algorithms and data structures book.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/amejiarosario/dsa.js" target="_blank" rel="noopener">2019-dsa.js
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Data Structures and Algorithms explained and implemented in JavaScript&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="python">Python&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/qiwsir/algorithm" target="_blank" rel="noopener">2014-algorithm
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 如果要成为一个有一定水平的程序员，算法是必须要会的。算法，让你的程序变得更有灵气。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/jgWZ" target="_blank" rel="noopener">2017-Problem Solving with Algorithms and Data Structures using Python 📚&lt;/a>：中文版参考&lt;a href="https://github.com/facert/python-data-structure-cn" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/OmkarPathak/pygorithm" target="_blank" rel="noopener">2017-pygorithm
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A Python module for learning all major algorithms&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="go">Go&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/0xAX/go-algorithms" target="_blank" rel="noopener">2017-go-algorithms
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Algorithms and data structures for golang.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Arafatk/DataViz?files=1" target="_blank" rel="noopener">2018-DataViz
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Build and visualize data structures in Golang.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/openacid/slim" target="_blank" rel="noopener">Slim
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Slim is collection of surprisingly space efficient data types, with corresponding serialization APIs to persisting them on-disk or for transport.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/emirpasic/gods" target="_blank" rel="noopener">gods
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: GoDS (Go Data Structures). Containers (Sets, Lists, Stacks, Maps, Trees), Sets (HashSet, TreeSet, LinkedHashSet), Lists (ArrayList, SinglyLinkedList, DoublyLinkedList), Stacks (LinkedListStack, ArrayStack), Maps (HashMap, TreeMap, HashBidiMap, TreeBidiMap, LinkedHashMap), Trees (RedBlackTree, AVLTree, BTree, BinaryHeap), Comparators, Iterators, …&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Workiva/go-datastructures" target="_blank" rel="noopener">go-datastructures
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Go-datastructures is a collection of useful, performant, and threadsafe Go datastructures.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="rust">Rust&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/EbTech/rust-algorithms" target="_blank" rel="noopener">2017-Common data structures and algorithms in Rust
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A collection of classic data structures and algorithms, emphasizing beauty and clarity over full generality.&lt;/li>
&lt;/ul></description></item><item><title>Compression-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/compression-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/compression-list/</guid><description>&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/facebook/zstd" target="_blank" rel="noopener">2018-zstd
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/facebook/zstd" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Zstandard, or zstd as short version, is a fast lossless compression algorithm, targeting real-time compression scenarios at zlib-level and better compression ratios. It&amp;rsquo;s backed by a very fast entropy stage, provided by Huff0 and FSE library.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/101arrowz/fzstd" target="_blank" rel="noopener">2021-fzstd
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/101arrowz/fzstd" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: High performance Zstandard decompression in a pure JavaScript, 8kB package&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>GameTheory-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/gametheory-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/gametheory-list/</guid><description>&lt;h1 id="game-theory-list">Game Theory List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ncase/trust" target="_blank" rel="noopener">2018-Trust
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: The Evolution of Trust is dedicated to the public domain, and is made thanks to the many Creative Commons &amp;amp; open source resources out there! Here is a full list of music, sounds, and code used:&lt;/li>
&lt;/ul></description></item><item><title>Graph-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/graph-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/graph-list/</guid><description>&lt;h1 id="graph-list">Graph List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.techiedelight.com/graphs-interview-questions/" target="_blank" rel="noopener">Graphs Interview Questions&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/a-quick-introduction-hashing-c32d1dc91871" target="_blank" rel="noopener">2017-A Quick Introduction: Hashing&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UI8" target="_blank" rel="noopener">2018-I don’t understand Graph Theory.&lt;/a>: How to think in graphs. An illustrative introduction to Graph Theory and its applications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mrpandey.github.io/d3graphTheory/index.html" target="_blank" rel="noopener">D3 Graph Theory&lt;/a>: D3 Graph Theory is project aimed at anyone who wants to learn graph theory. It provides quick and interactive introduction to the subject. The visuals used in the project makes it an effective learning tool.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.rainy.im/2016/04/25/graph-algos/" target="_blank" rel="noopener">可视化图的基本算法&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Hash-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/hash-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/hash-list/</guid><description>&lt;h1 id="hash-list">Hash List&lt;/h1>
&lt;h1 id="bloom-filter">Bloom Filter&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://codeburst.io/lets-implement-a-bloom-filter-in-go-b2da8a4b849f" target="_blank" rel="noopener">2017-Let’s Implement a Bloom Filter in Go&lt;/a>: I remember some time ago while I was reading some articles about Cassandra internals that it used bloom filters to check if the particular SSTables are likely to have the request partition data.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://llimllib.github.io/bloomfilter-tutorial/" target="_blank" rel="noopener">2017-Bloom Filters by Example&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="surf">SuRF&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/efficient/SuRF" target="_blank" rel="noopener">SuRF
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: First Practical and General-purpose Range Filter&lt;/li>
&lt;/ul>
&lt;h1 id="algorithms">Algorithms&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://hashids.org/" target="_blank" rel="noopener">Hashids&lt;/a>: Hashids is a small open-source library that generates short, unique, non-sequential ids from numbers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/sGhX" target="_blank" rel="noopener">I Wrote The Fastest Hashtable&lt;/a>: Now I finally wrote the fastest hashtable. And by that I mean that I have the fastest lookups of any hashtable I could find, while my inserts and erases are also really fast. (but not the fastest)&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="hashtable">HashTable&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://dev.to/vaidehijoshi/hashing-out-hash-functions" target="_blank" rel="noopener">2017-Hashing Out Hash Functions&lt;/a>: let’s find out more about hash functions, how they work, and their strengths and weakness. Hopefully, this will help us understand when exactly they can help us out!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/senderista/hashtable-benchmarks" target="_blank" rel="noopener">hashtable-benchmarks
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: An Evaluation of Linear Probing Hashtable Algorithms.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Index-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/index-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/index-list/</guid><description>&lt;h1 id="index-list--索引">Index List | 索引&lt;/h1>
&lt;h1 id="文件索引">文件索引&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/QSnKJCtbZCbW0ymsvY8IFQ" target="_blank" rel="noopener">SlimTrie：战胜 Btree 单机百亿文件的极致索引&lt;/a>: SlimTrie 设计篇 [1] 中，我们介绍了单机百亿文件的索引设计思路，今天我们来具体介绍下它代码级别的实现。文中我们要解决的问题是: 在一台通用的 100TB 的存储服务器的内存中, 索引 100 亿个小文件。&lt;/li>
&lt;/ul></description></item><item><title>LinearList-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/linearlist-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/linearlist-list/</guid><description>&lt;h1 id="indexed-collection-list">Indexed Collection List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://www.jianshu.com/p/c3ba7e56fb53" target="_blank" rel="noopener">数据结构浅析(四)：栈与队列&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="list">List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/front-end-hacking/data-structures-linked-list-implementation-in-js-3beb48ff49cd" target="_blank" rel="noopener">2018-Data Structures, Linked List Implementation in JS&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="queue">Queue&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://medium.freecodecamp.com/a-gentle-introduction-to-data-structures-how-queues-work-f8b871938e64#.yrvrzksc8" target="_blank" rel="noopener">A gentle introduction to data structures how queues work&lt;/a>: 基于 JavaScript 的对于 Queue 类型的简介&lt;/li>
&lt;/ul>
&lt;h1 id="stack">Stack&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://medium.freecodecamp.com/data-structures-stacks-on-stacks-c25f2633c529#.b81mr23xr" target="_blank" rel="noopener">Data Structures Stacks on Stacks&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>NumberTheory-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/numbertheory-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/numbertheory-list/</guid><description>&lt;h1 id="number-theory-list">Number Theory List&lt;/h1>
&lt;h1 id="scientific-calculation">Scientific Calculation&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://6me.us/RJNQ" target="_blank" rel="noopener">A Brief History of Random Numbers&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.jianshu.com/p/f8e7070c1c6b" target="_blank" rel="noopener">随机算法总结&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="number-theory--随机数">Number Theory | 随机数&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://torvaney.github.io/projects/human-rng" target="_blank" rel="noopener">2019-How to pick a random number from 1-10&lt;/a>: Imagine you have to generate a uniform random number from 1 to 10.&lt;/li>
&lt;/ul>
&lt;h1 id="matrix--矩阵">Matrix | 矩阵&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://gist.github.com/nadavrot/5b35d44e8ba3dd718e595e40184d03f0" target="_blank" rel="noopener">2018-High-Performance Matrix Multiplication&lt;/a>: This is a short post that explains how to write a high-performance matrix multiplication program on modern processors. In this tutorial I will use a single core of the Skylake-client CPU with AVX2, but the principles in this post also apply to other processors with different instruction sets (such as AVX512).&lt;/li>
&lt;/ul>
&lt;h1 id="bit-manipulation">Bit Manipulation&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/b2c" target="_blank" rel="noopener">A summary: how to use bit manipulation to solve problems easily and efficiently&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Sort-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/sort-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/sort-list/</guid><description>&lt;h1 id="sorting-algorithm-list">Sorting Algorithm List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/wxisme/p/5243631.html?f=tt" target="_blank" rel="noopener">面试中的排序算法总结&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.jianshu.com/p/f5baf7f27a7e" target="_blank" rel="noopener">各种排序算法总结&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.jobbole.com/103456/" target="_blank" rel="noopener">八大排序算法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/absfree/p/5469212.html" target="_blank" rel="noopener">深入理解排序算法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.jianshu.com/p/8dc11152f178" target="_blank" rel="noopener">如何给 100 亿个数字排序 ?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://wwwlgis.informatik.uni-kl.de/archiv/wwwdvs.informatik.uni-kl.de/courses/DBSREAL/SS2005/Vorlesungsunterlagen/Implementing_Sorting.pdf" target="_blank" rel="noopener">2005-Implementing Sorting in Database Systems #Paper#&lt;/a>: This survey collects many of these techniques for easy reference by students, researchers, and product de- velopers. It covers in-memory sorting, disk-based external sorting, and considerations that apply specifically to sorting in database systems.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="timsort">TimSort&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.freebuf.com/vuls/62129.html" target="_blank" rel="noopener">2015-如何找出 Timsort 算法和玉兔月球车中的 Bug？&lt;/a>: 说起排序，我们比较熟悉的有冒泡、选择、插入排序，当然还有神奇的快排（Quick Sort），Timsort 是个什么鬼？&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/timsort-the-fastest-sorting-algorithm-youve-never-heard-of-36b28417f399" target="_blank" rel="noopener">2018-Timsort — the fastest sorting algorithm you’ve never heard of&lt;/a>: Timsort: A very fast, O(n log n), stable sorting algorithm built for the real world — not constructed in academia.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>String-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/string-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/string-list/</guid><description>&lt;h1 id="string-algorithms-list">String Algorithms List&lt;/h1>
&lt;h1 id="pattern-match">Pattern Match&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24649304" target="_blank" rel="noopener">算法之字符串模式匹配&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.rainy.im/2016/04/24/string-find/" target="_blank" rel="noopener">字符串匹配算法&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dsqiu.iteye.com/blog/1700312" target="_blank" rel="noopener">字符串模式匹配算法——BM、Horspool、Sunday、KMP、KR、AC 算法一网打尽&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/VerbalExpressions" target="_blank" rel="noopener">VerbalExpressions
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: VerbalExpressions 是非常不错的正则表达式辅助生成工具。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="multiple-pattern-match">Multiple Pattern Match&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.cs.uku.fi/~kilpelai/BSA05/lectures/slides04.pdf" target="_blank" rel="noopener">Biosequence Algorithms, Spring 2005 Lecture 4: Set Matching and Aho-Corasick Algorithm&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://maples.me/algorithm/2016/04/09/Aho-Corasick-automaton/" target="_blank" rel="noopener">Aho-Corasick-automaton&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/lnzv" target="_blank" rel="noopener">Javascript implementation of Aho-Corasick Algorithm for Pattern Searching&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/oaFP6" target="_blank" rel="noopener">Aho-Corasick 算法的 Java 实现与分析&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="regex-expression-list--正则表达式资料索引">Regex Expression List | 正则表达式资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UWP" target="_blank" rel="noopener">2018-Exploring the Linguistics Behind Regular Expressions&lt;/a>: what does he have to do with regular expressions? Hell, what does he even have to do with computer science?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/zeeshanu/learn-regex" target="_blank" rel="noopener">learn-regex&lt;/a>: Learn regex the easy way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/27526085" target="_blank" rel="noopener">正则表达式的拆分&lt;/a>: 对于一门语言的掌握程度怎么样，可以有两个角度来衡量：读和写。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/CBexZfG1DHYji_Pk6Zo38w" target="_blank" rel="noopener">2018-正则表达式真的很 6&lt;/a>: 本文旨在用最通俗的语言讲述最枯燥的基本知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/38278481" target="_blank" rel="noopener">2018-藏在正则表达式里的陷阱&lt;/a>: Java 正则表达式使用的引擎实现是 NFA 自动机，这种正则表达式引擎在进行字符匹配时会发生回溯（backtracking）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://my.oschina.net/u/2448717/blog/688037?fromerr=xJU48HPy" target="_blank" rel="noopener">正则表达式详解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://projects.lukehaas.me/regexhub/?" target="_blank" rel="noopener">Useful Regex Patterns&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://aotu.io/notes/2016/12/07/regexp-practice/" target="_blank" rel="noopener">正则表达式实践篇&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="opensource">OpenSource&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/VerbalExpressions" target="_blank" rel="noopener">Verbal Expressions
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Verbal Expressions 是非常不错的正则表达式辅助生成工具。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://regexper.com/" target="_blank" rel="noopener">Regexper
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: These diagram are a straight-forward way to illustrate what can sometimes become very complicated processing in a regular expression, with nested looping and optional elements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/substack/safe-regex" target="_blank" rel="noopener">safe-regex
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: detect possibly catastrophic, exponential-time regular expressions&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Tree-List</title><link>https://ng-tech.icu/books/awesome-lists/1.cs/algods/tree-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.cs/algods/tree-list/</guid><description>&lt;h1 id="树结构与算法资料索引">树结构与算法资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/shuangde800/article/details/7341289" target="_blank" rel="noopener">哈夫曼树&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/mcgrady/p/3329825.html" target="_blank" rel="noopener">数据结构和算法系列 16 哈夫曼树&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6d" target="_blank" rel="noopener">2017-Everything you need to know about tree data structures&lt;/a>: This post is to help you better understand the Tree Data Structure and to clarify any confusion you may have about it.&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>