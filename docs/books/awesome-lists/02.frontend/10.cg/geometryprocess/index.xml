<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GeometryProcess | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/index.xml" rel="self" type="application/rss+xml" />
    <description>GeometryProcess</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>GeometryProcess</title>
      <link>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/</link>
    </image>
    
    <item>
      <title>3D-Design-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/3d-design-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/3d-design-list/</guid>
      <description>&lt;h1 id=&#34;3d-design-list&#34;&gt;3D Design List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/351090362&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-爽，终于把 3D 设计讲清楚了 🎥&lt;/a&gt;: Adobe 花了很多心思和调研工作，让你可以站在一个更高的全局角度去整体认识 3D 设计，并且把一个很难的点不断拆分成一个个细分的点，最终把每个点都讲得非常清楚，让你了解 3D 设计到底是做什么。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3D-Format-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/3d-format-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/3d-format-list/</guid>
      <description>&lt;h1 id=&#34;3d-format-list&#34;&gt;3D Format List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/KhronosGroup/glTF-Tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;glTF-Tutorials #Series#&lt;/a&gt;: This tutorial gives an introduction to glTF, the GL transmission format. It summarizes the most important features and application cases of glTF, and describes the structure of the files that are related to glTF. It explains how glTF assets may be read, processed, and used to display 3D graphics efficiently.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>3D-Models-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/3d-models-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/3d-models-list/</guid>
      <description>&lt;h1 id=&#34;3d-models-list&#34;&gt;3D Models List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecjacobson/common-3d-test-models&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-alecjacobson/common-3d-test-models 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/alecjacobson/common-3d-test-models&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Repository containing common 3D test models in original format with original source if known and obj mesh.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GeometryProcess-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/geometryprocess-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/geometryprocess-list/</guid>
      <description>&lt;h1 id=&#34;geometry-process-list&#34;&gt;Geometry Process List&lt;/h1&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;blog&#34;&gt;Blog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://geometryhub.net/overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GeometryHub #Blog#&lt;/a&gt;: BGL 是一个关于三维数据(点云，网格)处理的基础几何库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.geometrictools.com/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Geometric Tools #Blog#&lt;/a&gt;: Welcome to the official site for Geometric Tools, a collection of source code for computing in the fields of mathematics, geometry, graphics, image analysis and physics. The engine is written in C++ 14 and, as such, has portable access to standard constructs for multithreading programming on cores. The engine also supports high-performance computing using general purpose GPU programming (GPGPU). Portions of the code are described in various books as well as in documents available at this site. The source code is freely downloadable, covered by the Boost License. The schedule for releases and related information is listed below.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;collection&#34;&gt;Collection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zishun/awesome-geometry-processing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;awesome-geometry-processing 🗃️&lt;/a&gt;: Libraries for Geometry Processing (GP).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/QiujieDong/Mesh_Segmentation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-QiujieDong/Mesh_Segmentation 🗃️&lt;/a&gt;: some materials about mesh processing, including papers, videos, codes, and so on. Updating every day!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;course&#34;&gt;Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alecjacobson/geometry-processing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Geometry Processing Course 🎥&lt;/a&gt;: Course designed by Prof. Alec Jacobson, University of Toronto, with assistance from Klint Qinami and Prof. Eitan Grinspun, Columbia University.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;polygon-mesh-process&#34;&gt;Polygon Mesh Process&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cs.princeton.edu/courses/archive/fall03/cs597D/lectures/segmentation.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cs.princeton.edu/courses/archive/fall03/cs597D/lectures/segmentation.pdf&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/meshpro/meshgen-comparison&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-meshgen-comparison&lt;/a&gt;: This repository creates meshes of the same domains with multiple mesh generators and compares the results. The used mesh generators are.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ozkanyumsak/mesh-subdivision&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mesh-subdivision&lt;/a&gt;: A collection of common mesh subdivision algorithms&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3dp-cam&#34;&gt;3DP CAM&lt;/h1&gt;
&lt;h2 id=&#34;repair&#34;&gt;Repair&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/natowi/3D-Reconstruction-with-Deep-Learning-Methods&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-3D Reconstruction with Deep Learning Methods 🗃️&lt;/a&gt;: List of projects for 3d reconstruction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://meshrepair.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Mesh Repairing Software on the Web 🗃️&lt;/a&gt;:This page is dedicated to users who need to repair polygon meshes with various sorts of defects and flaws. Below you can find a list of software tools that perform such tasks and are freely available on the Internet.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>GeometryProcess-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/geometryprocess-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/02.frontend/10.cg/geometryprocess/geometryprocess-opensource-list/</guid>
      <description>&lt;h1 id=&#34;awesome-geometrypolygon--mesh-process-list&#34;&gt;Awesome Geometry（Polygon &amp;amp; Mesh） Process List&lt;/h1&gt;
&lt;h1 id=&#34;projects&#34;&gt;Projects&lt;/h1&gt;
&lt;h2 id=&#34;多边形处理软件--gui-software&#34;&gt;多边形处理软件 | GUI Software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.meshlab.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MeshLab&lt;/a&gt;: MeshLab is the open source system for processing and editing 3D triangular meshes. It provides a set of tools for editing, cleaning, healing, inspecting, rendering, texturing and converting meshes. It offers features for processing raw data produced by 3D digitization tools/devices and for preparing models for 3D printing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cnr-isti-vclab/meshlabjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-MeshLabJS 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/cnr-isti-vclab/meshlabjs&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A javascript client based mesh processing tool. Built using vcg library, emscripten and webgl&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.graphics.rwth-aachen.de/software/openflipper/intro/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenFlipper 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: OpenFlipper is an OpenSource multi-platform application and programming framework designed for processing, modeling and rendering of geometric data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Unionfab/UVtools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;UVtools 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: MSLA/DLP, file analysis, calibration, repair, conversion and manipulation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3d-viewer&#34;&gt;3D Viewer&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fougue/mayo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-mayo 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/fougue/mayo&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 3D CAD viewer and converter based on Qt + OpenCascade.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nmwsharp/polyscope&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-polyscope 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/nmwsharp/polyscope&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A C++ &amp;amp; Python viewer for 3D data like meshes and point clouds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Formlabs/foxtrot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-foxtrot&lt;/a&gt;: A fast, experimental STEP file viewer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/f3d-app/f3d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-f3d 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/f3d-app/f3d&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: F3D (pronounced &lt;code&gt;/fɛd/&lt;/code&gt;) is a fast and minimalist 3D viewer. It supports many file formats, from digital content to scientific datasets (including glTF, STL, STEP, PLY, OBJ, FBX, Alembic), can show animations and support lot of rendering and texturing options including real time physically based rendering and raytracing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/john-chapman/im3d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-im3d 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/john-chapman/im3d&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Im3d is a small, self-contained library for immediate mode rendering of basic primitives (points, lines, triangles), plus an immediate mode UI which provides 3d manipulation &amp;lsquo;gizmos&amp;rsquo; and other tools. It is platform and graphics API agnostic and designed to be compatible with VR.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;web-3d-viewer&#34;&gt;Web 3D Viewer&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ghemingway/cad.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-cad.js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/ghemingway/cad.js&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Web-based CAD file viewer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naver/egjs-view3d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-egjs-view3d 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Fast &amp;amp; customizable 3D model viewer for everyone&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3d-editor&#34;&gt;3D Editor&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JannisX11/blockbench&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blockbench 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Blockbench is a free, modern model editor for low-poly and boxy models with pixel art textures. Models can be exported into standardized formats, to be shared, rendered, 3D-printed, or used in game engines. There are also multiple dedicated formats for Minecraft Java and Bedrock Edition with format-specific features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pmndrs/react-three-editor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;react-three-editor 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 🔌 A one of a kind scene editor that writes changes back into your code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/theatre-js/theatre&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Theatre 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/theatre-js/theatre&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Theatre.js is an animation library for high-fidelity motion graphics. It is designed to help you express detailed animation, enabling you to create intricate movement, and convey nuance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;algorithm--算法库&#34;&gt;Algorithm | 算法库&lt;/h1&gt;
&lt;h2 id=&#34;多边形处理库&#34;&gt;多边形处理库&lt;/h2&gt;
&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/VTREEM/Carve&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2008-Carve 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Carve is a fast, robust constructive solid geometry library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cnr-isti-vclab/vcglib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2008-VCGlib 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/cnr-isti-vclab/vcglib&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The Visualization and Computer Graphics Library (VCGlib for short) is an open source, portable, and templated library written in C++, with no external dependencies, for manipulation, processing, cleaning, and simplifying triangle meshes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Kitware/VTK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2011-VTK 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/Kitware/VTK&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: VTK is an open-source software system for image processing, 3D graphics, volume rendering and visualization. VTK includes many advanced algorithms (e.g., surface reconstruction, implicit modeling, decimation) and rendering techniques (e.g., hardware-accelerated volume rendering, LOD control).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gilbo/cork&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2012-Cork 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/gilbo/cork&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Cork is designed to support Boolean operations between triangle meshes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/libigl/libigl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-Libigl 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/libigl/libigl&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A simple C++ geometry processing library&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/CGAL/cgal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-CGAL 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/CGAL/cgal&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The Computational Geometry Algorithms Library (CGAL) is a C++ library that aims to provide easy access to efficient and reliable algorithms in computational geometry.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mlivesu/cinolib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-mlivesu/cinolib 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/mlivesu/cinolib&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A generic programming header only C++ library for processing polygonal and polyhedral meshes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nmwsharp/geometry-central&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Geometry-central 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/nmwsharp/geometry-central&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Geometry-central is a modern C++ library of data structures and algorithms for geometry processing, with a particular focus on surface meshes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/BrunoLevy/geogram&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Geogram 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/BrunoLevy/geogram&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Geogram is a programming library of geometric algorithms. It includes a simple yet efficient Mesh data structure (for surfacic and volumetric meshes), exact computer arithmetics (a-la Shewchuck, implemented in GEO::expansion), a predicate code generator (PCK: Predicate Construction Kit), standard geometric predicates (orient/insphere), Delaunay triangulation, Voronoi diagram, spatial search data structures, spatial sorting) and less standard ones (more general geometric predicates, intersection between a Voronoi diagram and a triangular or tetrahedral mesh embedded in n dimensions). The latter is used by FWD/WarpDrive, the first algorithm that computes semi-discrete Optimal Transport in 3d that scales up to 1 million Dirac masses (see compute_OTM in example programs ).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/isl-org/Open3D&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Open3D 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/isl-org/Open3D&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Open3D is an open-source library that supports rapid development of software that deals with 3D data. The Open3D frontend exposes a set of carefully selected data structures and algorithms in both C++ and Python. The backend is highly optimized and is set up for parallelization. We welcome contributions from the open-source community.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hhoppe/Mesh-processing-library&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Mesh-processing-library 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/hhoppe/Mesh-processing-library&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: C++ libraries and programs demonstrating mesh processing research published in ACM SIGGRAPH (1992-1998)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pmp-library/pmp-library&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-pmp-library 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/pmp-library/pmp-library&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The Polygon Mesh Processing Library is a modern C++ open-source library for processing and visualizing polygon surface meshes. Its main features are:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/DirectXMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-DirectXMesh 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/microsoft/DirectXMesh&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This package contains DirectXMesh, a shared source library for performing various geometry content processing operations including generating normals and tangent frames, triangle adjacency computations, vertex cache optimization, and meshlet generation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nmwsharp/geometry-central&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Geometry-central 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/nmwsharp/geometry-central&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Geometry-central is a modern C++ library of data structures and algorithms for geometry processing, with a particular focus on surface meshes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MeshInspector/MeshLib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-MeshLib 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/MeshInspector/MeshLib&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The goal which we set when designing MeshLib was to value simplicity and performance while providing a wide gamut of useful computational algorithms. The library also supports the most important data structures today’s sensors can produce - pointcloud, mesh, volume and more. For example, mesh is represented by half-edge data structure and cannot be made non-manifold. Some applications may require non-manifoldness, but most practical scans can be represented as manifoldness meshes without an issue.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python-library&#34;&gt;Python Library&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/inducer/meshpy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2010-MeshPy 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/inducer/meshpy&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: MeshPy offers quality triangular and tetrahedral mesh generation for Python. Meshes of this type are chiefly used in finite-element simulation codes, but also have many other applications ranging from computer graphics to robotics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pyvista/pyvista&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Pyvista 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/pyvista/pyvista&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 3D plotting and mesh analysis through a streamlined interface for the Visualization Toolkit (VTK)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/PyMesh/PyMesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-PyMesh 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/PyMesh/PyMesh&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: PyMesh is a code base developed by Qingnan Zhou for his PhD research at New York University. It is a rapid prototyping platform focused on geometry processing. PyMesh is written with both C++ and Python, where computational intensive functionalities are realized in C++, and Python is used for creating minimalistic and easy to use interfaces.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mikedh/trimesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-mikedh/trimesh 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/mikedh/trimesh&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Trimesh is a pure Python (2.7-3.5+) library for loading and using triangular meshes with an emphasis on watertight surfaces. The goal of the library is to provide a full featured and well tested Trimesh object which allows for easy manipulation and analysis, in the style of the Polygon object in the Shapely library.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;javascript&#34;&gt;JavaScript&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/GeometryCollective/geometry-processing-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-geometry-processing-js 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/GeometryCollective/geometry-processing-js&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: geometry-processing-js is a fast and flexible framework for 3D geometry processing on the web! Easy integration with HTML/WebGL makes it particularly suitable for things like mobile apps, online demos, and course content.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;boolean-library&#34;&gt;Boolean Library&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cutdigital/mcut&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-cutdigital/mcut 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/cutdigital/mcut&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This is a software project designed for a broad range of real-world problems relating to 3D modelling and design tasks. Application areas include computer animation, aerospace and automotive engineering, mining, civil and mechanical engineering amongst others.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AngusJohnson/Clipper2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-AngusJohnson/Clipper2 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/AngusJohnson/Clipper2&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The Clipper2 library performs intersection, union, difference and XOR boolean operations on both simple and complex polygons. It also performs polygon offsetting. This is a major update of my original Clipper library that written over 10 years ago. That library I&amp;rsquo;m now calling Clipper1 and while it still works very well, Clipper2 is better in just about every way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gcherchi/InteractiveAndRobustMeshBooleans&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-InteractiveAndRobustMeshBooleans 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/gcherchi/InteractiveAndRobustMeshBooleans&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This is the reference implementation of the mesh booleans pipeline presented in the paper.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;convex-hull&#34;&gt;Convex hull&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/qhull/qhull&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2011-qhull 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/qhull/qhull&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Qhull is a general dimension convex hull program that reads a set of points from stdin, and outputs the smallest convex set that contains the points to stdout. It also generates Delaunay triangulations, Voronoi diagrams, furthest-site Voronoi diagrams, and halfspace intersections about a point.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;webassembly-集成&#34;&gt;WebAssembly 集成&lt;/h2&gt;
&lt;h3 id=&#34;showcase&#34;&gt;Showcase&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Nitta-K-git/three.js_and_WebAssembly_samples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;three.js_and_WebAssembly_samples 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: sample codes of three.js and WebAssembly&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;mesh-utils&#34;&gt;Mesh Utils&lt;/h1&gt;
&lt;h2 id=&#34;io--格式转换&#34;&gt;I/O | 格式转换&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://openctm.sourceforge.net/?page=about&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2010-OpenCTM ![code](https://ng-tech.icu/assets/code.svg&lt;/a&gt;: OpenCTM is primarily a file format for storing 3D triangle meshes in a compact yet versatile format. In order to make it easy for software developers and 3D designers to support the format, an easy to use software library is provided that can read and write OpenCTM format files.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nschloe/meshio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-meshio 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/nschloe/meshio&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: There are various mesh formats available for representing unstructured meshes. meshio can read and write all of the following and smoothly converts between them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zeux/meshoptimizer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-zeux/meshoptimizer 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/zeux/meshoptimizer&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Mesh optimization library that makes meshes smaller and faster to render.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;compress&#34;&gt;Compress&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/draco&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Draco 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/google/draco&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Draco is a library for compressing and decompressing 3D geometric meshes and point clouds. It is intended to improve the storage and transmission of 3D graphics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cnr-isti-vclab/corto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-corto 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/cnr-isti-vclab/corto&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Mesh compression library, designed for rendering and speed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mesh-generation&#34;&gt;Mesh Generation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://gitlab.onelab.info/gmsh/gmsh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1997-Gmsh 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This is Gmsh, an automatic three-dimensional finite element mesh generator with built-in pre- and post-processing facilities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dengwirda/jigsaw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-dengwirda/jigsaw 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/dengwirda/jigsaw&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: JIGSAW is a Delaunay-based unstructured mesh generator for two- and three-dimensional geometries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fogleman/sdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-fogleman/sdf 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/fogleman/sdf&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Generate 3D meshes based on SDFs (signed distance functions) with a dirt simple Python API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/OpenDroneMap/ODM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-ODM 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/OpenDroneMap/ODM&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A command line toolkit to generate maps, point clouds, 3D models and DEMs from drone, balloon or kite images. 📷&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;lattice-generation&#34;&gt;Lattice Generation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Bleemsys/Artisan-Core&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Artisan 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/Bleemsys/Artisan-Core&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Artisan is a tool for lattice generation. It is based on implicit modelling technique. The code is based on Python and C++ in order to combining the development speed and computational efficiency. Artisan computes the most of heavy math through C++ code, and conducts the routine calculations via Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;transform--模型操作&#34;&gt;Transform | 模型操作&lt;/h2&gt;
&lt;h3 id=&#34;cut--split--chop--切分&#34;&gt;Cut &amp;amp; Split &amp;amp; Chop | 切分&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fogleman/choppy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-fogleman/choppy 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/fogleman/choppy&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Chop 3D models in half with a user-defined slice plane.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Three.js 代码片段：&lt;a href=&#34;https://codesandbox.io/s/optimistic-cohen-k4qfiz?file=/src/App.js:2544-2552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;optimistic-cohen&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/IkarosKappler/threejs-slice-geometry-typescript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/IkarosKappler/threejs-slice-geometry-typescript&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.promaton.com/three-steps-to-slice-a-mesh-with-threejs-a7879ed54664&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.promaton.com/three-steps-to-slice-a-mesh-with-threejs-a7879ed54664&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;simplification--简化&#34;&gt;Simplification | 简化&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/valette/ACVD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-ACVD 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/valette/ACVD&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Fast simplification of 3D surface meshes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/PixarAnimationStudios/OpenSubdiv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-OpenSubdiv 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/PixarAnimationStudios/OpenSubdiv&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: OpenSubdiv is a set of open source libraries that implement high performance subdivision surface (subdiv) evaluation on massively parallel CPU and GPU architectures. This codepath is optimized for drawing deforming subdivs with static topology at interactive framerates. The resulting limit surface matches Pixar&amp;rsquo;s Renderman to numerical precision.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fogleman/simplify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2015-simplify 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/fogleman/simplify&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Implementation of Surface Simplification Using Quadric Error Metrics, SIGGRAPH 97, written in Go.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/AntonotnaWang/Mesh_simplification_python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Mesh_simplification_python 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/AntonotnaWang/Mesh_simplification_python&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: An implementation of mesh simplification algorithm ([1]) using python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Meirshomron/MeshSimplification&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-MeshSimplification 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/Meirshomron/MeshSimplification&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Implementation of Surface Simplification Using QEM in C++.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Zielon/ParallelQSlim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-ParallelQSlim 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/Zielon/ParallelQSlim&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Shape aware parallel mesh simplification algorithm.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/timknip/mesh-decimate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/timknip/mesh-decimate&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/MyMiniFactory/Fast-Quadric-Mesh-Simplification&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/MyMiniFactory/Fast-Quadric-Mesh-Simplification&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
