<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/index.xml" rel="self" type="application/rss+xml"/><description>React</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>React</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/</link></image><item><title>Next.js-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/next.js-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/next.js-list/</guid><description>&lt;h1 id="next-list">Next List&lt;/h1>
&lt;h1 id="opensource">OpenSource&lt;/h1>
&lt;h2 id="showcase">Showcase&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/ixartz/Next-js-Boilerplate" target="_blank" rel="noopener">Boilerplate and Starter for Next JS 12+, Tailwind CSS 2.0 and TypeScript Twitter&lt;/a>: 🚀 Boilerplate and Starter for Next.js 12+, Tailwind CSS 2.0 and TypeScript ⚡️ Made with developer experience first: Next.js + TypeScript + ESLint + Prettier + Husky + Lint-Staged + VSCode + Netlify + PostCSS + Tailwind CSS&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/shadcn/taxonomy" target="_blank" rel="noopener">taxonomy
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: An open source application built using the new router, server components and everything new in Next.js 13.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/steven-tey/precedent" target="_blank" rel="noopener">2022-Precedent
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/steven-tey/precedent" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Precedent is an opinionated collection of components, hooks, and utilities for your Next.js project.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/AntonioErdeljac/next13-messenger" target="_blank" rel="noopener">2023-next13-messenger
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/AntonioErdeljac/next13-messenger" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: This is a repository for a Real-Time Messenger Clone: Next.js 13, React, Tailwind, Prisma, MongoDB, NextAuth, Pusher.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React-DesignPattern-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-designpattern-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-designpattern-list/</guid><description>&lt;h1 id="react-pattern-list">React Pattern List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://www.alloyteam.com/2016/01/reactjs-best-practices-for-2016/" target="_blank" rel="noopener">2016-来自 AlloyTeam 的 React.js 2016 最佳实践&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="architecture-pattern--架构模式">Architecture Pattern | 架构模式&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://reactpatterns.com/" target="_blank" rel="noopener">2016-React Patterns&lt;/a>: Patterns for React Developers&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/10-react-mini-patterns-c1da92f068c5#.5v2hpgurn" target="_blank" rel="noopener">2017-10 React mini-patterns&lt;/a>: Over the last few years, I’ve worked on a handful of decent-sized React projects, and many, many pint-sized ones. Throughout this magical journey, a number of patterns have come up that I find myself repeating again and again.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UXm" target="_blank" rel="noopener">2018-Evolving Patterns in React&lt;/a>: Let’s take a closer look at some of the patterns that are emerging in the React ecosystem. These patterns improve readability, code clarity, and push your code towards composition and reusability.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="functional-react--函数式-react">Functional React | 函数式 React&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMW" target="_blank" rel="noopener">2017-Functional setState is the future of React&lt;/a>: Declare state changes separately from the component classes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@arqex/non-functional-react-js-6e020ce27ee2#.cj3dcxl4j" target="_blank" rel="noopener">non-functional-react-js&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@adamterlson/functional-react-series-part-1-get-your-app-outta-my-component-92656ae13e25#.q47pt8fga" target="_blank" rel="noopener">Functional React Series — Part 1: Get your App outta my Component&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEv" target="_blank" rel="noopener">Rendering a function with React&lt;/a>: How I tricked React into rendering a function (not call it… render it)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@learnreact/container-components-c0e67432e005#.h775w7ifn" target="_blank" rel="noopener">2017-Container Components&lt;/a>: One React pattern that’s had the impact on my code is the container component pattern.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.uz8irdipq" target="_blank" rel="noopener">Presentational and Container Components&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="hocs--高阶组件">HOCs | 高阶组件&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://natpryce.com/articles/000814.html" target="_blank" rel="noopener">Higher Order React Components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/MUHBdp" target="_blank" rel="noopener">Higher-Order Components in React&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/why-you-should-keep-your-react-components-pure-by-using-hocs-67e5c7f80c81" target="_blank" rel="noopener">2017-Why you should keep your react components pure by using HOCs&lt;/a>: In this article I show how decomposing state from the presentational layer can both reduce complexity and promote code re-use with some React examples— a win-win situation helping to tame the challenges of developing SPAs. Although I’m using React, the lessons are universal and can apply to any framework.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biZ" target="_blank" rel="noopener">2017-Understanding Higher Order Components&lt;/a>: Making sense of the rapidly changing React best practice.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.52i6nt3at" target="_blank" rel="noopener">React Higher Order Components in depth&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/code-reuse-using-higher-order-hoc-and-stateless-functional-components-in-react-and-react-native-6eeb503c665#.4z4q9o6k2" target="_blank" rel="noopener">Share Code between React and React Apps using Higher Order Components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://kyleshevlin.com/renderless-components/" target="_blank" rel="noopener">Renderless Components or How Logic Doesn&amp;rsquo;t Always Need a UI&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/deepsweet/hocs" target="_blank" rel="noopener">2018-hocs
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A collection of Higher-Order Components for React and React Native.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="recompose">Recompose&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/front-end-developers/building-hocs-with-recompose-7debb951d101" target="_blank" rel="noopener">2016-Building HOCs with Recompose&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/javascript-inside/why-the-hipsters-recompose-everything-23ac08748198" target="_blank" rel="noopener">2016-Why The Hipsters Recompose Everything&lt;/a>: Building a Utility Library for React&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://egghead.io/courses/higher-order-components-with-functional-patterns-using-recompose" target="_blank" rel="noopener">2017-Higher Order Components with Functional Patterns Using Recompose&lt;/a>: In this course, you will learn to use many of the most powerful and convenient higher-order components within Recompose by coding several real-world examples. Using recompose looks very different from “vanilla” React; so you will also get comfortable with the look and feel of a “recomposed” component. The best part is no more need for class components! You’ll learn how to use Recompose to both modify components and also create your own higher-order components.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJV" target="_blank" rel="noopener">2017-Top 5 Recompose HOCs&lt;/a>: Today we’ll be going through my 5 (in no particular order) favorite Recompose Higher Order Components.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="render-props">Render Props&lt;/h2>
&lt;h1 id="style-guide--样式风格">Style Guide | 样式风格&lt;/h1>
&lt;h2 id="code-style--代码风格">Code Style | 代码风格&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/code-life/our-best-practices-for-writing-react-components-dec3eb5c3fc8#.mh12fzmoi" target="_blank" rel="noopener">Our Best Practices for Writing React Components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beQ" target="_blank" rel="noopener">2017-Avoiding deeply nested component trees&lt;/a>: By passing child components down instead of data you can avoid passing data down through many levels of components.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Um6" target="_blank" rel="noopener">2017-8 Key React Component Decisions&lt;/a>: Standardize your React development with these key decisions.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/USj" target="_blank" rel="noopener">2017-How to structure components in React?&lt;/a>: Structuring system is the hardest thing and it has a big impact on the overall project.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bD4" target="_blank" rel="noopener">2017-Characteristics of an Ideal React Architecture&lt;/a>: React is only the View; in essence: a thin view library with unidirectional data bindings and its own internal component life-cycle.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://overreacted.io/writing-resilient-components/" target="_blank" rel="noopener">2019-Writing Resilient Components&lt;/a>: There are important design principles that every component should strive to follow. But I don’t think style guides capture those principles well. We’ll talk about style guides first, and then look at the principles that really are useful.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="code-organization--代码组织">Code Organization | 代码组织&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UII" target="_blank" rel="noopener">2016-How to better organize your React applications?&lt;/a>: I decided to spend some time to figure out what could be the best way to organize my future React projects.&lt;/li>
&lt;/ul>
&lt;h1 id="test--测试">Test | 测试&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://blog.logrocket.com/testing-react-applications-part-1-of-3-ebd8397917f3" target="_blank" rel="noopener">2017-Testing React Applications #Series#&lt;/a>：With React and the ecosystem of testing tools that have emerged around it, it’s finally possible to build robust, scalable tests that provide strong guarantees on code correctness.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://semaphoreci.com/community/tutorials/snapshot-testing-react-components-with-jest" target="_blank" rel="noopener">Snapshot Testing React Components with Jest&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bsP" target="_blank" rel="noopener">Testing in React: best practices, tips and tricks&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/testing-react-components-with-jest-and-enzyme-41d592c174f#.yfpuy4eip" target="_blank" rel="noopener">2017-Testing React components with Jest and Enzyme&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://silvenon.com/testing-react-and-redux/" target="_blank" rel="noopener">Testing a React &amp;amp; Redux Codebase&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/javascript-inside/testing-in-react-getting-off-the-ground-5f569f3088a#.6ip96uul5" target="_blank" rel="noopener">Testing in React: Getting Off The Ground&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://thereignn.ghost.io/a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme/" target="_blank" rel="noopener">a-step-by-step-tdd-approach-on-testing-react-components-using-enzyme&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/airbnb-engineering/enzyme-javascript-testing-utilities-for-react-a417e5e5090f#.huj3rtv24" target="_blank" rel="noopener">enzyme-javascript-testing-utilities-for-react&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://facebook.github.io/jest/docs/tutorial-react.html" target="_blank" rel="noopener">Testing React Apps With Jest&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRQ" target="_blank" rel="noopener">2017-Front-end (React) Snapshot Testing with Jest: What is it for?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U1G" target="_blank" rel="noopener">2017-Jest Testing patterns in React-Redux applications&lt;/a>: Jest provides a complete ecosystem for testing. There is no need of extra libraries - Mocha, Sinon, Istanbul, Chai, proxyquire etc. as all are present in Jest itself.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="component-test--组件测试">Component Test | 组件测试&lt;/h2>
&lt;h2 id="e2e-test--端到端测试">E2E Test | 端到端测试&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.logrocket.com/end-to-end-testing-react-apps-with-puppeteer-and-jest-ce2f414b4fd7" target="_blank" rel="noopener">2018-End-to-end testing React apps with Puppeteer and Jest&lt;/a>: In this tutorial, we’ll see how to write tests for a React app using Jest and Puppeteer.&lt;/li>
&lt;/ul>
&lt;h1 id="static-type--静态类型">Static Type | 静态类型&lt;/h1>
&lt;h2 id="flow">Flow&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/bDu" target="_blank" rel="noopener">2017-Typing Higher Order Components in Recompose With Flow&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="typescript">TypeScript&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/mWg" target="_blank" rel="noopener">2017-React Higher Order Components in TypeScript made simple&lt;/a>: When refactoring a Higher-Order Component (HOC) in a TypeScript project at work, there was some confusion regarding how to write them properly.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Lemoncode/react-typescript-samples" target="_blank" rel="noopener">2017-React Typescript by sample&lt;/a>: The goal of this project is to provide a set of simple samples, providing and step by step guide to start working with React and Typescript.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U15" target="_blank" rel="noopener">2018-TypeScript and React using create-react-app&lt;/a>: A step-by-step guide to setting up your first app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UDE" target="_blank" rel="noopener">2018-Ultimate React Component Patterns with Typescript 2.8&lt;/a>: Stateful, Stateless, Default Props, Render Callbacks, Component Injection, Generic Components, High Order Components, Controlled Components.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/piotrwitek/react-redux-typescript-guide" target="_blank" rel="noopener">2018-React &amp;amp; Redux in TypeScript - Static Typing Guide&lt;/a>: The complete guide to static typing in &amp;ldquo;React &amp;amp; Redux&amp;rdquo; apps using TypeScript&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://fettblog.eu/typescript-react/" target="_blank" rel="noopener">2018-TypeScript and React #Series#&lt;/a>: With that, TypeScript and React are a perfect fit. You will enjoy combining both technologies together to get huge productivity boost when writing your applications!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="state-management--状态管理">State Management | 状态管理&lt;/h1>
&lt;h2 id="redux--与-redux-集成使用">Redux | 与 Redux 集成使用&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/dailyjs/quick-redux-tips-for-connecting-your-react-components-e08da72f5b3" target="_blank" rel="noopener">2017-Quick Redux tips for connecting your React components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@christiannaths/from-zero-to-redux-8db779b6ed01#.1j80ztr5q" target="_blank" rel="noopener">2017-From Zero to Redux in 3 Minutes A simplified guide to using Redux in a React application.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/uanders/react-redux-cheatsheet" target="_blank" rel="noopener">2017-React Redux Cheat Sheet on Workflow &amp;amp; Concept&lt;/a>: This article contains a graphical cheat sheet for the workflow and concept of Redux.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://start.jcolemorrison.com/react-and-redux-sagas-authentication-app-tutorial/" target="_blank" rel="noopener">React and Redux Sagas Authentication App Tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lewis617/react-redux-tutorial" target="_blank" rel="noopener">中文的 React+Redux 系列教程&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React-Internals-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-internals-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-internals-list/</guid><description>&lt;h1 id="react-internals-list--react-内部原理解析">React Internals List | React 内部原理解析&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.mattgreer.org/articles/react-internals-part-one-basic-rendering/" target="_blank" rel="noopener">2017-React Internals&lt;/a>: In this five part series, we will “recreate” React from the ground up, learning how it works along the way. Once we’ve finished, you should have a good grasp of how React works, and when and why it calls the various lifecycle methods of a component.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://overreacted.io/react-as-a-ui-runtime/" target="_blank" rel="noopener">2019-React as a UI Runtime&lt;/a>: This is a deep dive — THIS IS NOT a beginner-friendly post. In this post, I’m describing most of the React programming model from first principles. I don’t explain how to use it — just how it works.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/20328570?refer=purerender" target="_blank" rel="noopener">React 源码剖析系列 － 解密 setState&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.jianshu.com/p/2d50a413e74a" target="_blank" rel="noopener">为什么 setState 没有立即执行&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.jianshu.com/p/47f24add2b5e" target="_blank" rel="noopener">拆解 setState[一][一源看世界][之 React]&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="virtual-dom">Virtual DOM&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://calendar.perfplanet.com/2013/diff/" target="_blank" rel="noopener">2013-Performance Calendar: React’s diff algorithm&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cloud.tencent.com/community/article/654179001489391651?fromSource=gwzcw.114428.114428.114428" target="_blank" rel="noopener">2017-react diff 原理&lt;/a>：React diff 作为 Virtual DOM 的加速器，其算法上的改进优化是 React 整个界面渲染的基础，以及性能提高的保障，同时也是 React 源码中最神秘、最不可思议的部分，本文将剖析 React diff 的不可思议之处。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/20346379?refer=purerender" target="_blank" rel="noopener">React 源码剖析系列，不可思议的 react diff&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/20328570?refer=purerender" target="_blank" rel="noopener">React 源码剖析系列 － 解密 setState&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/articles/react-dom-diff" target="_blank" rel="noopener">深入浅出 React(四)：虚拟 DOM Diff 算法解析&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.oyecode.com/2015/09/reactjs-learning-virtual-dom-and-react.html" target="_blank" rel="noopener">ReactJS | Learning Virtual DOM and React Diff Algorithm&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://62f7d6c2.fromwiz.com/share/s/1yZZr21Yv4w42GorJm0oBXEi3AKTQa3rcARz2nKoQ71RpX_Z" target="_blank" rel="noopener">So-You-Want-To-Be-A-Functional-Programmer&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://calendar.perfplanet.com/2013/diff/" target="_blank" rel="noopener">React’s diff algorithm&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="noopener">virtual-dom&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://fluentconf.com/fluent2014/public/schedule/detail/32395" target="_blank" rel="noopener">The Secrets of React’s virtual DOM&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/21109361/why-is-reacts-concept-of-virtual-dom-said-to-be-more-performant-than-dirty-mode" target="_blank" rel="noopener">Why is React’s concept of virtual DOM said to be moreperformant than dirty model checking?&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="component-system--组件系统">Component System | 组件系统&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UDq" target="_blank" rel="noopener">The React and React Native Event System Explained: A Harmonious Coexistence&lt;/a>: You’re using it. You’re liking it. But did you know what React’s event handler is doing under the hood?&lt;/li>
&lt;/ul>
&lt;h1 id="stack-reconciler">Stack Reconciler&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uid" target="_blank" rel="noopener">2017-RFClarification: why is &lt;code>setState&lt;/code> asynchronous?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gist.github.com/ajhsu/e259392f06aa8e3bf5c9" target="_blank" rel="noopener">Dive into setState() method in React&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://reactkungfu.com/2016/03/dive-into-react-codebase-handling-state-changes/" target="_blank" rel="noopener">Dive into React codebase: Handling state changes&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lukebelliveau/react-reconciler-demo" target="_blank" rel="noopener">2017-react-reconciler-demo
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: A simple implementation of React&amp;rsquo;s stack reconciler. This is much different from the real implementation, but demonstrates the concepts.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://thereignn.ghost.io/on-the-async-nature-of-setstate-in-react/" target="_blank" rel="noopener">ON THE ASYNC NATURE OF &lt;code>SETSTATE&lt;/code> IN REACT&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="fiber">Fiber&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/koba04/react-fiber-resources" target="_blank" rel="noopener">2017-React Fiber resources 🗃️&lt;/a>: This is for resources for React Fiber.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://makersden.io/blog/look-inside-fiber/" target="_blank" rel="noopener">2017-A look inside React Fiber - how work will get done.&lt;/a>: This post will go outside-in - starting from calling the render function in client JS and changing state of a component, down to describing the steps taken by Fiber to do all the work.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener">2017-React Fiber Architecture&lt;/a>: A description of React&amp;rsquo;s new core algorithm, React Fiber.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgb" target="_blank" rel="noopener">2017-React 的新引擎 — React Fiber 是什么？&lt;/a>：稍有经验的前端工程师会知道，页面的 DOM 改变，就会导致页面重新计算 DOM，进行重绘或者重排，DOM 结构复杂或者频繁操作 DOM 通常是性能瓶颈产生的原因。而网站从最开始比较简单，开始变的越来越复杂，用户交互也会越来越多，怎么去减轻 DOM 操作带来的性能损耗就变得重要起来。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/26027085" target="_blank" rel="noopener">2017-React Fiber 是什么&lt;/a>：React Fiber 这个大改变 Facebook 已经折腾两年多了，刚刚结束不久的 React Conf 2017 会议上，Facebook 终于确认，React Fiber 会搭上 React 下一个大版本 v16 的顺风车发布。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btw" target="_blank" rel="noopener">2017-React 新引擎 React Fiber 究竟要解决什么问题？&lt;/a>: Facebook 正在以流行的 JavaScript 框架 React 为基础开发一个全新的架构。这个名为 React Fiber 的全新设计改变了检测变更的方法和时机，借此可改进浏览器端和其他渲染设备的响应速度。这一 全新架构 最初已于 2016 年 7 月公开发布，其中蕴含着过去多年来 Facebook 不断改进的工作成果。该架构可向后兼容，彻底重写了 React 的协调(Reconciliation )算法。该过程可用于确定出现变更的具体时间，并将变更传递给渲染器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=ZCuYPiUIONs" target="_blank" rel="noopener">2017-React Conf: A Cartoon Intro to Fiber&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/acdlite/react-fiber-architecture" target="_blank" rel="noopener">react-fiber-architecture&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UW5" target="_blank" rel="noopener">Didact Fiber: Incremental reconciliation&lt;/a>: In this post we are going to rewrite most of the code from the didact series to follow React 16 new architecture.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="async-rendering">Async Rendering&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://auth0.com/blog/time-slice-suspense-react16/" target="_blank" rel="noopener">2018-Beyond React 16: Time Slicing and Suspense API&lt;/a>: Learn what&amp;rsquo;s coming to ReactJS. Get a sneak peek of the powerful features that will grace ReactJS soon.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blogg.svt.se/svti/react-suspense-server-rendering/" target="_blank" rel="noopener">2018-React suspense and server rendering&lt;/a>: The recently revealed React suspense functionality has the potential to solve a lot of the current pain points in server rendering.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@baphemot/understanding-react-suspense-1c73b4b0b1e6" target="_blank" rel="noopener">2018-Understanding React “Suspense”&lt;/a>: In short: the new feature allows you to defer rendering part of your application tree until some condition is met (for example data from an endpoint or a resource is loaded).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://dev.to/swyx/a-walkthrough-of-that-react-suspense-demo--4j6a" target="_blank" rel="noopener">2018-A Walkthrough of &lt;em>that&lt;/em> React Suspense Demo&lt;/a>:I&amp;rsquo;m a recent bootcamp grad. You&amp;rsquo;re not reading the divinings of some thought leader here. I&amp;rsquo;m just some guy learning in public.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-list/</guid><description>&lt;h1 id="awesome-react-lists">Awesome React Lists&lt;/h1>
&lt;p>This file aggregates curated popular links for learning &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/Web/Framework/React" target="_blank" rel="noopener">React, Syntax, DevOps, Production Tips, Internals, OpenSource&lt;/a>, etc. More reference about ITCS can turn to &lt;a href="https://github.com/wx-chevalier/Awesome-Lists" target="_blank" rel="noopener">Awesome Links: Guide to Galaxy&lt;/a>, which collects valuable, popular and up-to-date links for CS, including Programming Language, Software Engineering, Server Side Application, Infrastructure, InfoSecurity, Industrial Application, DataScienceAI, Frontend Technology(iOS, Android, RN, Electron), etc.&lt;/p>
&lt;p>Source files are hosted in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/Web/Framework/React" target="_blank" rel="noopener">Github&lt;/a>, PRs Welcome.&lt;/p>
&lt;p>如果想了解更多关于 Redux、MobX 等相关生态系统的资料，同样可以查看 &lt;a href="">Awesome Lists&lt;/a> 中的 &lt;a href="https://parg.co/Yds" target="_blank" rel="noopener">Redux Links&lt;/a> 与 &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/Web/Framework/MobX/MobX-List.md" target="_blank" rel="noopener">MobX Links&lt;/a> 等内容。&lt;/p>
&lt;h1 id="overview--概述">Overview | 概述&lt;/h1>
&lt;h2 id="book">Book&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.gitbook.com/book/developmentarc/react-indepth/details" target="_blank" rel="noopener">2016-React In-depth: An exploration of UI development》📚&lt;/a>:Our goal with this GitBook is to document our process, share our research and try to organize our experiences into a single living document. Too be honest, this is a pretty lofty goal. We may not achieve this goal, but hopefully we can get some helpful thoughts down.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/survivejs/react-book" target="_blank" rel="noopener">2016-SurviveJS - React》📚&lt;/a>: This book shows you how to build a little Kanban application using React. During the process you will learn the basics and will be able to take the skills to your own projects.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/vasanthk/react-bits" target="_blank" rel="noopener">2017-React Bits》📚&lt;/a>: A compilation of React Patterns, techniques, tips and tricks.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.safaribooksonline.com/library/view/learning-react-1st/9781491954614/" target="_blank" rel="noopener">2017-Learning React, 1st Edition》📚&lt;/a>: If you want to learn how to build efficient user interfaces with React, this is your book. Authors Alex Banks and Eve Porcello show you how to create UIs with this small JavaScript library that can deftly display data changes on large-scale, data-driven websites without page reloads. Along the way, you’ll learn how to work with functional programming and the latest ECMAScript features.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.safaribooksonline.com/library/view/mastering-full-stack-react/9781786461766/" target="_blank" rel="noopener">2017-Mastering Full-Stack React Web Development》📚&lt;/a>: Learn how to create dynamic full-stack applications with ReactJS and other leading JavaScript tools – smarter web development starts here.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.safaribooksonline.com/library/view/react-design-patterns/9781786464538/" target="_blank" rel="noopener">2017-React Design Patterns and Best Practices》📚&lt;/a>: Build modular applications that are easy to scale using the most powerful components and design patterns that React can offer you right now About This Book.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/dabbott/react-express" target="_blank" rel="noopener">2017-React Express #Series#&lt;/a>: The all-in-one beginner&amp;rsquo;s guide to modern React application development!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beh" target="_blank" rel="noopener">2017-React and React Native》📚&lt;/a>: Use React and React Native to build applications for desktop browsers, mobile browsers, and even as native mobile apps.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://legacy.gitbook.com/book/krasimir/react-in-patterns/details" target="_blank" rel="noopener">2018-React in patterns》📚&lt;/a>: A book about common design patterns used while developing with React. It includes techniques for composition, data flow, dependency management and more.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kay-is/react-from-zero" target="_blank" rel="noopener">2018-React From Zero》📚&lt;/a>: Everything runs in the browser without a manual pre-compilation.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/softchris/react-book" target="_blank" rel="noopener">2020-react-book》📚&lt;/a>: Book covering fundamentals on React.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="concept--概念阐述">Concept | 概念阐述&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome" target="_blank" rel="noopener">2014-Removing User Interface Complexity,or Why React is Awesome&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://facebook.github.io/react/docs/thinking-in-react.html" target="_blank" rel="noopener">2016-Thinking in React&lt;/a>: One of the many great parts of React is how it makes you think about apps as you build them. In this document, we&amp;rsquo;ll walk you through the thought process of building a searchable product data table using React.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tylermcginnis.com/react-aha-moments/" target="_blank" rel="noopener">2016-React &amp;ldquo;Aha&amp;rdquo; Moments&lt;/a>: So what I want to do in this post is share my collection of these moments while also adding my thoughts on some of the moments shared in that Reddit thread.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNg" target="_blank" rel="noopener">2017-Things nobody will tell you about React.js&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000013365426" target="_blank" rel="noopener">2018-React 是怎样炼成的&lt;/a>: 本文主要讲述 React 的诞生过程和优化思路。内容整理自 2014 年的 OSCON - React Architecture by vjeux，虽然从今天(2018)来看可能会有点历史感，但仍然值得学习了解。以史为鉴，从中也可以管窥 Facebook 优秀的工程管理文化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cubox.pro/c/Sdae7d" target="_blank" rel="noopener">2019-展望 React 17，回顾 React 往事&lt;/a>: 回到 React 16 的话题。要讨论未来（React 17），必须要了解过去。以 React 16 为分水岭，我们可以分为两方面来看这个问题。一是为什么、 二是怎么办。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="ecosystem--生态圈">Ecosystem | 生态圈&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://patternhatch.com/2016/07/06/a-primer-on-the-react-ecosystem-part-1-of-3/" target="_blank" rel="noopener">2016-A Primer on the React Ecosystem Serials&lt;/a>: I thought I’d share what I’ve learned so far through a primer. Over three parts, I’m going to show you how to set up an environment for React app development, create React components and have them respond to data changes, manage app state with Redux.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/26270621" target="_blank" rel="noopener">2018-揭秘 React 生态体系&lt;/a>: React 可以说是目前为止最热门，生态最完善，应用范围最广的前端框架。React 结合它的整个生态，它可以横跨 web 端，移动端，服务器端，乃至 VR 领域。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="case-study--案例分析">Case Study | 案例分析&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://6me.us/2mS" target="_blank" rel="noopener">2016-Moving Airbnb Search to React&lt;/a>: Using experiments to tackle a large refactor with confidence&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.infoq.com/news/2018/05/medium-reactjs-graphql-migration" target="_blank" rel="noopener">2018-Migrating Medium to React.js and GraphQL&lt;/a>: making the new system incrementally available to users while not hindering development of new features.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="resource--资源">Resource | 资源&lt;/h1>
&lt;h2 id="blog--博客">Blog | 博客&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://overreacted.io/" target="_blank" rel="noopener">Overreacted #Blog#&lt;/a>: Blog by Dan Abramov.&lt;/li>
&lt;/ul>
&lt;h2 id="course--conf--课程与会议">Course &amp;amp; Conf | 课程与会议&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://conf.reactjs.org/livestream" target="_blank" rel="noopener">2017 React 大会&lt;/a>：2017 年 React Conf 于 3 月 13 日、14 日成功举办，会上来自世界各地的开发者就 React Fiber、Flow、Performance、React Native 等多个主题发表了演说与讨论，推荐选择自己喜欢的演讲视频观看。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/learncodeacademy/react-js-tutorials" target="_blank" rel="noopener">2017-learncodeacademy/react-js-tutorials&lt;/a>: Code that goes along with my YouTube React JS Series.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/supnate/react-geek-time" target="_blank" rel="noopener">2018-React 从入门到精通 🎥&lt;/a>: 极客时间：React 从入门到精通。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Asabeneh/30-Days-Of-React" target="_blank" rel="noopener">2020-30 Days of React 🎥&lt;/a>: 30 Days of React challenge is a step by step guide to learn React in 30 days. This challenge needs an intermediate level of HTML, CSS, and JavaScript knowledge. It is recommended to feel good at JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of Java…&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wesbos/Advanced-React" target="_blank" rel="noopener">2020-Advanced-React 🎥&lt;/a>: Starter Files and Solutions for Full Stack Advanced React and GraphQL&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kentcdodds/react-fundamentals" target="_blank" rel="noopener">2021-react-fundamentals
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/kentcdodds/react-fundamentals" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Learn everything you need to be effective with the fundamental building block of React applications. When you&amp;rsquo;re finished, you&amp;rsquo;ll be prepared to create React components to build excellent experiences for your app&amp;rsquo;s users.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="collection--集合">Collection | 集合&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/enaqx/awesome-react" target="_blank" rel="noopener">Awesome-React 🗃️&lt;/a>: A collection of awesome things regarding React ecosystem.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/markerikson/react-redux-links" target="_blank" rel="noopener">React/ReduxList 🗃️&lt;/a>: Curated tutorial and resource links I&amp;rsquo;ve collected on React, Redux, ES6, and more&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@royisch/using-forms-in-react-redux-tips-and-tricks-48ad9c7522f6#.krt2lrdhw" target="_blank" rel="noopener">Using forms in React-Redux: Tips And Tricks 🗃️&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="series">Series&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/Bogdan-Lyashenko/Under-the-hood-ReactJS" target="_blank" rel="noopener">2017-Under the hood ReactJS #Series#&lt;/a>: Entire ReactJS code base explanation by visual block schemes (Stack+Fiber versions)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/BetaSu/big-react" target="_blank" rel="noopener">Big-React #Series#&lt;/a>: 跟着我，从 0 实现 React18。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="tutorial--教程">Tutorial | 教程&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhf" target="_blank" rel="noopener">2016-Learning React with Create-React-App #Series#&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/petehunt/react-howto" target="_blank" rel="noopener">2016-React Howto&lt;/a>: Throughout this document, I’ll assume you’ve built a web page with HTML, CSS and JavaScript.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@samerbuna/why-react-developers-love-node-83f6053d68" target="_blank" rel="noopener">2017-Why React Developers LOVE Node&lt;/a>: Some people mistakenly assume that Node is required in order to use React.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCx" target="_blank" rel="noopener">2017-Simple React Development in 2017&lt;/a>: The goal of this guide is to showcase how easy it can be to start modern React development.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bzp" target="_blank" rel="noopener">2017-All the fundamental React.js concepts, jammed into this single Medium article&lt;/a>: This article is not going to cover what React is or why you should learn it. Instead, this is a practical introduction to the fundamentals of React.js for those who are already familiar with JavaScript and know the basics of the DOM API.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uv3" target="_blank" rel="noopener">2018-Rock Solid React.js Foundations: A Beginner’s Guide&lt;/a>: this post is aimed towards the audience who is looking for a perfect mix of theory and hands-on.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.org/a-comprehensive-guide-to-react-js-in-2018-ba8bb6975597" target="_blank" rel="noopener">2018-A Comprehensive Guide to React.js in 2018&lt;/a>: This article was originally published in January of 2015, but was recently updated to React 16.3 and all the goodness it contains.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/adam-golab/react-developer-roadmap" target="_blank" rel="noopener">2018-React Developer Roadmap&lt;/a>: Below you can find a chart demonstrating the paths that you can take and the libraries that you would want to learn in order to become a React developer.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="example">Example&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/a-react-todos-example-explained-6df53cdebed1" target="_blank" rel="noopener">2017-A React TODOs example, explained&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhD" target="_blank" rel="noopener">2017-Create a realtime football voting app using React, Redux, React-Router-v4 and Firebase&lt;/a>: In this series of tutorials, we’ll be creating a football voting app using React, Redux, Redux-Saga, React-Router v4, and Firebase. In this first part, we will setup the project. We’re going to use create-react-app to scaffold the initial project structure, tweak it a bit, and then add the necessary libraries that we’ll be using.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMT" target="_blank" rel="noopener">2017-How to Build a ToDo App Using React, Redux, and Webpack&lt;/a>: In this tutorial I’m going to show you how to create a simple “ToDo” app using React, Redux, a little bit of Node, and Cosmic JS.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr></description></item><item><title>React-OpenSource-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-opensource-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-opensource-list/</guid><description>&lt;h1 id="react-opensource-list">React OpenSource List&lt;/h1>
&lt;p>More Web Widgets can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/Web/Widgets/Web-Widgets-List.md" target="_blank" rel="noopener">Web Widgets Links&lt;/a>.&lt;/p>
&lt;h1 id="showcase">Showcase&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/yogaboll/react-kanban" target="_blank" rel="noopener">2018-react kanban
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A Trello-like application built with React and Redux.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/devhubapp/devhub" target="_blank" rel="noopener">2018-devhub
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: DevHub: TweetDeck for GitHub - Android, iOS, Web &amp;amp; Desktop&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/DustinBrett/x" target="_blank" rel="noopener">x
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Desktop environment in the browser.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/josepholiveira/podcastr" target="_blank" rel="noopener">2021-Podcastr
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A platform built for podcast broadcasting. Developed during @Rocketseat NLW#05 free training.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Th3Wall/Fakeflix" target="_blank" rel="noopener">2021-Fakeflix
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Not the usual clone that you can find on the web.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="scratch">Scratch&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/hexacta/didact" target="_blank" rel="noopener">2017-Didact
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: This repository goes together with a series of posts that explains how to build React from scratch step by step.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Y5s" target="_blank" rel="noopener">2018-Gooact: React in 160 lines of JavaScript
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: How to build own React clone in a matter of minutes.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="boilerplate">Boilerplate&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/alan2207/bulletproof-react" target="_blank" rel="noopener">2020-bulletproof-react
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 🛡️ ⚛️ A simple, scalable, and powerful architecture for building production ready React applications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/blueedgetechno/windows11" target="_blank" rel="noopener">2021-Windows 11 in React
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: This open source project is made in the hope to replicate the Windows 11 desktop experience on web, using standard web technologies like React, CSS (SCSS), and Js.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="development-tools--开发工具">Development Tools | 开发工具&lt;/h1>
&lt;h2 id="scaffold">Scaffold&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/styleguidist/react-styleguidist" target="_blank" rel="noopener">react-styleguidist
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Isolated React component development environment with a living style guide.&lt;/li>
&lt;/ul>
&lt;h2 id="tools">Tools&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/supnate/rekit" target="_blank" rel="noopener">Rekit
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Toolkit for building scalable web applications with React, Redux and React-router&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/elierotenberg/react-armor" target="_blank" rel="noopener">react-armor
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Protect your DOM from third-party tampering.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b11" target="_blank" rel="noopener">eslint-plugin-react
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: React specific linting rules for ESLint.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/danielstjules/jsinspect" target="_blank" rel="noopener">jsinspect
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Detect copy-pasted and structurally similar code.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="performance-optimization--性能优化">Performance Optimization | 性能优化&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/garbles/why-did-you-update" target="_blank" rel="noopener">why-did-you-update
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Puts your console on blast when React is making unnecessary updates.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/dai-shi/react-tracked" target="_blank" rel="noopener">2021-React Tracked
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: State usage tracking with Proxies. Optimize re-renders for useState/useReducer, React Redux, Zustand and others.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="development-libraries">Development Libraries&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/Flipboard/react-canvas" target="_blank" rel="noopener">React Canvas
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: High performance &lt;code>&amp;lt;canvas&amp;gt;&lt;/code> rendering for React components.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/adobe/react-spectrum" target="_blank" rel="noopener">react-spectrum
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A collection of libraries and tools that help you build adaptive, accessible, and robust user experiences.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blitzjs.com/" target="_blank" rel="noopener">Blitz
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Blitz is a batteries-included framework that&amp;rsquo;s inspired by Ruby on Rails, is built on Next.js, and features a &amp;ldquo;Zero-API&amp;rdquo; data layer abstraction that eliminates the need for REST/GraphQL.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="component-libraries">Component Libraries&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/radix-ui/primitives" target="_blank" rel="noopener">2020-Radix
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>
&lt;img src="https://img.shields.io/github/stars/radix-ui/primitives" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Radix Primitives is an open-source UI component library for building high-quality, accessible design systems and web apps. Maintained by @workos.&lt;/li>
&lt;/ul>
&lt;h2 id="data-fetch">Data Fetch&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/zeit/swr" target="_blank" rel="noopener">2019-SWR
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: SWR is a React Hooks library for remote data fetching. The name “SWR” is derived from stale-while-revalidate, a HTTP cache invalidation strategy popularized by RFC 5861. SWR first returns the data from cache (stale), then sends the fetch request (revalidate), and finally comes with the up-to-date data again.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/tannerlinsley/react-query" target="_blank" rel="noopener">2019-React Query
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: ⚛️ Hooks for fetching, caching and updating asynchronous data in React.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="component-utilities">Component Utilities&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/acdlite/recompose/blob/master/docs/API.md#withstate" target="_blank" rel="noopener">recompose
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A React utility belt for function components and higher-order components.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/smooth-code/svgr" target="_blank" rel="noopener">svgr
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Transform SVG into React components&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/thejameskyle/react-loadable" target="_blank" rel="noopener">2017-React Loadable
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A higher order component for loading components with promises.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/deepsweet/hocs" target="_blank" rel="noopener">hocs
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A collection of Higher-Order Components for React and React Native.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="hooks">Hooks&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/umijs/hooks" target="_blank" rel="noopener">umijs/hooks
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: React Hooks Library.&lt;/li>
&lt;/ul>
&lt;h2 id="animation">Animation&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/drcmda/react-spring" target="_blank" rel="noopener">react-spring
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Helping react-motion and animated to become best friends&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/tannerlinsley/react-move" target="_blank" rel="noopener">2017-react-move
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: Beautifully and deterministically animate anything in React.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jondot/react-flight" target="_blank" rel="noopener">react-flight
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: The best way to build animation compositions for React. Design and compose a component to start with, a component to end with, and Flight will take it from there.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/rnosov/react-reveal" target="_blank" rel="noopener">React Reveal
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Easily add reveal on scroll animations to your React app.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="css-in-js">CSS-in-JS&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">styled-components
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>:Visual primitives for the component age&lt;/li>
&lt;/ul>
&lt;h2 id="test">Test&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://cubox.pro/c/SwAGqu" target="_blank" rel="noopener">2017-react-cosmos
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Sandbox for developing and testing UI components in isolation&lt;/li>
&lt;/ul>
&lt;h1 id="internals">Internals&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/tranbathanhtung/react-fiber-implement" target="_blank" rel="noopener">re-implement react fiber
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: react-fiber is my self-study project help me understand how react work.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/pomber/didact" target="_blank" rel="noopener">Didact
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A DIY guide to build your own React.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React-Syntax-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-syntax-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-syntax-list/</guid><description>&lt;h1 id="react-syntax-list--react-基础语法资料索引">React Syntax List | React 基础语法资料索引&lt;/h1>
&lt;p>This post aggregates curated popular links for learning React Syntax. More reference about ITCS can turn to &lt;a href="https://github.com/wx-chevalier/Awesome-Lists" target="_blank" rel="noopener">Awesome Links: Guide to Galaxy&lt;/a>, which collects valuable, popular and up-to-date links for CS, including Programming Language, Software Engineering, Server Side Application, Infrastructure, InfoSecurity, Industrial Application, DataScienceAI, Frontend Technology(iOS, Android, RN, Electron), etc.&lt;/p>
&lt;h1 id="component--组件">Component | 组件&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bL6" target="_blank" rel="noopener">2017-How Pure CSS Images Helped Me Understand React Components&lt;/a>: How did I overcome impostor syndrome and finally learn React? There are a few reasons but one of the most significant ones was learning how to make pure CSS images.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://daveceddia.com/convert-createclass-to-es6-class/" target="_blank" rel="noopener">2017-Convert React.createClass to ES6 Class&lt;/a>: As of React 15.5, createClass is deprecated. You’ll get warnings in the console if you’re using it in your code – and, when React 16 comes out, createClass will be removed entirely.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="syntax--组件语法">Syntax | 组件语法&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://facebook.github.io/react/blog/2015/12/18/react-components-elements-and-instances.html" target="_blank" rel="noopener">2015-React Components, Elements, and Instances&lt;/a>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>JSX: &lt;a href="https://facebook.github.io/jsx/" target="_blank" rel="noopener">JSX Specification&lt;/a>, &lt;a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="noopener">JSX In Depth&lt;/a>, &lt;a href="http://reactpatterns.com/#conditional-rendering" target="_blank" rel="noopener">Conditional Rendering&lt;/a>, &lt;a href="https://jasonformat.com/wtf-is-jsx/" target="_blank" rel="noopener">2015-WTF is JSX&lt;/a>&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;a href="https://medium.freecodecamp.com/react-elements-vs-react-components-fdc776705880#.nlfh4ingc" target="_blank" rel="noopener">2016-React Elements and React Components&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="lifecycle">LifeCycle&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/mofed/reacts-component-lifecycles-adf0ebc89d23#.79hd0xcxd" target="_blank" rel="noopener">2017-React’s Component Lifecycles&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCT" target="_blank" rel="noopener">2017-React Lifecycle Methods- how and when to use them&lt;/a>: The above is the life of a React component, from birth (pre-mounting) and death (unmounting).&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="error-boundary">Error Boundary&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://dev.to/sarah_chima/error-boundaries-in-react-3eib" target="_blank" rel="noopener">2018-Handling Errors in React Components with Error Boundaries&lt;/a>: Error Boundaries are React Components and they catch error anywhere in their child component tree.&lt;/li>
&lt;/ul>
&lt;h1 id="component-dataflow--组件数据流">Component Dataflow | 组件数据流&lt;/h1>
&lt;h2 id="props">Props&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@iammerrick/function-as-child-components-5f3920a9ace9#.4dpp6haq9" target="_blank" rel="noopener">function-as-child-components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://reactpatterns.com/#stateless-function" target="_blank" rel="noopener">React Patterns：Children 相关&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mxstbr.blog/2017/02/react-children-deepdive/" target="_blank" rel="noopener">A deep dive into children in React&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://merrickchristensen.com/articles/function-as-child-components.html" target="_blank" rel="noopener">Function as Child Components&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="state">State&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://alligator.io/react/getting-atomic-updates-with-setstate" target="_blank" rel="noopener">2017-Atomic SetState Updates in React&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/GantMan/ReactStateMuseum" target="_blank" rel="noopener">2018-ReactStateMuseum&lt;/a>: A whirlwind tour of React state management systems by example.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="context">Context&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UXl" target="_blank" rel="noopener">React’s ⚛️ new Context API&lt;/a>: It’s way more ergonomic, it’s no longer “experimental,” and it’s now a first-class api! OH, AND IT USES A RENDER PROP!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://upmostly.com/tutorials/how-to-use-the-usecontext-hook-in-react" target="_blank" rel="noopener">2019-How to Use the useContext Hook in React&lt;/a>: Let’s explore the React useContext Hook by building a music player! I’ll also show you how a custom React Hook can make the useContext Hook easier to use.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="hooks">Hooks&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/" target="_blank" rel="noopener">2019-Deep dive: How do React hooks really work?&lt;/a>: In this article, we reintroduce closures by building a tiny clone of React Hooks. This will serve two purposes – to demonstrate the effective use of closures, and to show how you can build a Hooks clone in just 29 lines of readable JS. Finally, we arrive at how Custom Hooks naturally arise.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/LRvVZUDywdsVjKbLP_4zbw" target="_blank" rel="noopener">2018-详细 preact hook 源码逐行解析&lt;/a>: 本文通过对 preact 的 hook 源码分析，理解和掌握 react/preact 的 hook 用法以及一些常见的问题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="style--样式处理">Style | 样式处理&lt;/h1>
&lt;h2 id="css">CSS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://survivejs.com/react/advanced-techniques/styling-react/" target="_blank" rel="noopener">SurviveJS: Styling React&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/chibicode/react-functional-css-protips" target="_blank" rel="noopener">react-functional-css-protips&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="css-in-js">CSS-in-JS&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/maintainable-react-apps/journey-to-enjoyable-maintainable-styling-with-react-itcss-and-css-in-js-632cfa9c70d6#.msehhtt3j" target="_blank" rel="noopener">journey-to-enjoyable-maintainable-styling-with-react-itcss-and-css-in-js&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="styled-components">Styled Components&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.com/a-5-minute-intro-to-styled-components-41f40eb7cd55" target="_blank" rel="noopener">A 5 Minute Intro To Styled Components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bID" target="_blank" rel="noopener">2017-Embracing the power of styled-components&lt;/a>: What we learned in the first week moving away from CSS Modules.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/morajabi/styled-media-query" target="_blank" rel="noopener">2017-styled-media-query
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: Beautiful media queries better than CSS @media for styled-components with ability to specify custom breakpoints.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1D" target="_blank" rel="noopener">2017-Jest Styled Components
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: A set of utilities for testing Styled Components with Jest. This package improves the snapshot testing experience and provides a brand new matcher to make expectations on the style rules.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.sitepoint.com/style-react-components-styled-components/" target="_blank" rel="noopener">2017-Quick Tip: How to Style React Components with styled-components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ucr" target="_blank" rel="noopener">2017-Styled-components — Mastering the fundamentals through practice&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://jsramblings.com/2017/10/29/migrating-to-styled-components-cheatsheet.html" target="_blank" rel="noopener">2017-Migrating to styled-components cheatsheet&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="animation--动画">Animation | 动画&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMF" target="_blank" rel="noopener">2017-React Animations 101 #Series#&lt;/a>: In this post on react animations 101, we will explore a few examples and why CSS transition are a good fit for the navigation bar.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@cheapsteak/animations-with-reacttransitiongroup-4972ad7da286#.no6xhxooq" target="_blank" rel="noopener">Animations with ReactTransitionGroup&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@cheapsteak/animations-with-reacttransitiongroup-4972ad7da286#.d1082uczx" target="_blank" rel="noopener">Animations with ReactTransitionGroup&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000004150178" target="_blank" rel="noopener">React 源码剖析系列 － 玩转 React Transition&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.com/how-to-build-animated-microinteractions-in-react-aab1cb9fe7c8#.4jnphlp3r" target="_blank" rel="noopener">How to build animated microinteractions in React&lt;/a>: Every function in JavaScript has a closure. And this is one of the coolest features of the JavaScript language. Because without closures, it would be hard to implement common structures like callbacks or event handlers.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="react-router--路由">React Router | 路由&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@pshrmn/a-simple-react-router-v4-tutorial-7f23ff27adf" target="_blank" rel="noopener">2017-A Simple React Router v4 Tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/redux-and-react-router-v4-a-tale-of-two-datastores-8dd91f47d14e" target="_blank" rel="noopener">2017-Redux and React-Router v4: a Tale of Two Datastores&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/jfUwEw" target="_blank" rel="noopener">2017-Build your own React Router v4&lt;/a>: this has helped you create a better mental model of what’s happening in React Router while also helping you to gain an appreciation for React Router’s elegance and “Just Components” API.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ebaytech.berlin/universal-web-apps-with-react-router-4-15002bb30ccb" target="_blank" rel="noopener">2017-Universal JavaScript Apps with React Router 4&lt;/a>: How to use the latest version of React Router both on the server side and the client side.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bVv" target="_blank" rel="noopener">2017-Changing Old Habits in React Router 4&lt;/a>: At React Conf 2017, Michael Jackson &amp;amp; Ryan Florence talked about React Router in their talk called “Learn Once, Route Anywhere”. They unveiled the new React Router website, and with it, the new focus that React router has taken — declarative components.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIf" target="_blank" rel="noopener">2017-The One Thing you need to know about React Router 4&lt;/a>:&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/technology-ebay-de/universal-react-router4" target="_blank" rel="noopener">Demo app showing how to use react-router v4 for server- and client-side rendering&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gist.github.com/ryanflorence/efbe562332d4f1cc9331202669763741" target="_blank" rel="noopener">Universal React Router 4&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/zackify/react-router-async-routing" target="_blank" rel="noopener">Async Routing&lt;/a>: react router v4 async routing&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="react-router-animation--路由动画">React Router Animation | 路由动画&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1I" target="_blank" rel="noopener">2017-A shallow dive into React Router v4 Animated Transitions&lt;/a>: It can be a bit confusing getting animated transitions setup with React Router v4. This article won’t cover every scenario, but we’ll go over the basics so that you can add animated transitions to your application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/berzniz/react-overdrive" target="_blank" rel="noopener">Super easy magic-move transitions for React apps&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/tkh44/data-driven-motion/blob/master/demo/src/App.js#L187-L191" target="_blank" rel="noopener">React Router V4 页面动画&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bel" target="_blank" rel="noopener">2017-Animated page transitions with React Router 4, ReactTransitionGroup and Animated&lt;/a>: In this article I’ll show you how to animate your page transitions using lifecycle methods from ReactTransitionGroup and the Animated library.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="widgets--控件">Widgets | 控件&lt;/h1>
&lt;h2 id="form--表单">Form | 表单&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIR" target="_blank" rel="noopener">2017-Some Thoughts On Forms in React&lt;/a>: There are a number of viable approaches to solve aforementioned situations when it comes forms in React land. Without getting too specific, let’s just think about those approaches from a high level perspective.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@foxhound87/automagically-manage-react-forms-state-with-mobx-and-automatic-validation-2b00a32b9769" target="_blank" rel="noopener">2017-Automagically manage React forms state and automatic validation with MobX&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.logrocket.com/an-imperative-guide-to-forms-in-react-927d9670170a?source=linkShare-fe48c4221a4c-1519391172" target="_blank" rel="noopener">2018-An imperative guide to forms in React&lt;/a>: in this tutorial, I will explain how React deals with forms and events.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="list--列表">List | 列表&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beq" target="_blank" rel="noopener">2015-Index as a key is an anti-pattern&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/29534224/react-jsx-iterating-through-a-hash-and-returning-jsx-elements-for-each-key" target="_blank" rel="noopener">React JSX: Iterating through a hash and returning JSX elements for each key&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/28329382/understanding-unique-keys-for-array-children-in-react-js" target="_blank" rel="noopener">Understanding unique keys for array children in React.js&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://jasonjl.me/blog/2015/04/18/rendering-list-of-elements-in-react-with-jsx/" target="_blank" rel="noopener">Rendering List of Elements in React With JSX&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr></description></item><item><title>React-Tuning-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-tuning-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/framework/react/react-tuning-list/</guid><description>&lt;h1 id="react-production-list">React Production List&lt;/h1>
&lt;h1 id="performance-optimization--性能优化">Performance Optimization | 性能优化&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/k-icCIEOHkGmV-cBJ0HUGQ" target="_blank" rel="noopener">2018-React Profiler&lt;/a>: React 16.5 新增了对开发工具（DevTools）性能分析插件（profiler plugin）的支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UpT" target="_blank" rel="noopener">2017-React Performance Fixes on Airbnb Listing Pages&lt;/a>: We have been hard at work migrating the airbnb.com core booking flow into a single-page server-rendered app using React Router and Hypernova.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://facebook.github.io/react/docs/optimizing-performance.html" target="_blank" rel="noopener">React Office Site：Optimizing Performance&lt;/a>: For many applications, using React will lead to a fast user interface without doing much work to specifically optimize for performance. Nevertheless, there are several ways you can speed up your React application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCn" target="_blank" rel="noopener">2017-Keep Your React Redux Healthy, Performance Optimization Story&lt;/a>: I am here to be honest about React optimization.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.vixlet.com/react-at-light-speed-78cd172a6411" target="_blank" rel="noopener">2017-React at Light Speed&lt;/a>: Lessons in optimizing performance at Vixlet&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMa" target="_blank" rel="noopener">2017-45% Faster React Functional Components, Now&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://engineering.musefind.com/our-best-practices-for-writing-react-components-dec3eb5c3fc8#.3kin14vrf" target="_blank" rel="noopener">2017-Our Best Practices for Writing React Components&lt;/a>: When I first started writing React, I remember seeing many different approaches to writing components, varying greatly from tutorial to tutorial. Though the framework has matured considerably since then, there doesn’t seem to yet be a firm ‘right’ way of doing things.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/planttheidea/moize" target="_blank" rel="noopener">2017-Memoize React components&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/dx5" target="_blank" rel="noopener">2017-React at Light Speed&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://jamesknelson.com/should-i-use-shouldcomponentupdate/" target="_blank" rel="noopener">Should I use shouldComponentUpdate?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lcxfs1991/blog/issues/8?f=tt" target="_blank" rel="noopener">React 移动 web 极致优化&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/modus-create-front-end-development/component-rendering-performance-in-react-df859b474adc#.rjjvtwgs8" target="_blank" rel="noopener">component-rendering-performance-in-react&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.broadview.com.cn/article/77" target="_blank" rel="noopener">React 应用优化：避免不必要的 render&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.vjeux.com/2015/javascript/react-rally-animated-react-performance-toolbox.html" target="_blank" rel="noopener">React Rally: Animated — React Performance Toolbox&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/code-life/how-to-benchmark-react-components-the-quick-and-dirty-guide-f595baf1014c#.w1t22c86k" target="_blank" rel="noopener">How to Benchmark React Components: The Quick and Dirty Guide&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@esamatti/react-js-pure-render-performance-anti-pattern-fb88c101332f#.b9vwbt1jy" target="_blank" rel="noopener">React.js pure render performance anti-pattern&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://benchling.engineering/deep-dive-react-perf-debugging/" target="_blank" rel="noopener">A DEEP DIVE INTO REACT PERF DEBUGGING&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@okonetchnikov/react-at-60fps-4e36b8189a4c#.enqkaabwg" target="_blank" rel="noopener">React at 60fps&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@nesbtesh/react-performance-optimization-28ec5b61fff3#.lx9g6ewdg" target="_blank" rel="noopener">React Performance Optimization&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/t73W9" target="_blank" rel="noopener">React Performance Optimization&lt;/a>: Performance optimization can be a big pain with any language. Especially when you are optimizing your app and you have no idea what to optimize. React has some really nice tools to do this, I will be talking about one specifically that will make your life a lot better.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.vixlet.com/react-at-light-speed-78cd172a6411" target="_blank" rel="noopener">2017-React at Light Speed, Lessons in optimizing performance at Vixlet&lt;/a>: Here we will share some of the lessons we have learned along the way.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://flexport.engineering/optimizing-react-rendering-part-1-9634469dca02" target="_blank" rel="noopener">2017-Optimizing React Rendering&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578" target="_blank" rel="noopener">2017-React, Inline Functions, and Performance&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/reactopt/reactopt" target="_blank" rel="noopener">2017-reactopt
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A CLI React performance optimization tool that identifies potential unnecessary re-rendering.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UZq" target="_blank" rel="noopener">2017-React is Slow, React is Fast: Optimizing React Apps in Practice&lt;/a>: If you care about performance, it&amp;rsquo;s fairly easy to make any React application super fast. Here is how.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UpT" target="_blank" rel="noopener">2017-React Performance Fixes on Airbnb Listing Pages&lt;/a>: There may be a lot of low-hanging fruit affecting performance in areas you might not track very closely but are still very important.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UiL" target="_blank" rel="noopener">Creating more efficient React views with windowing&lt;/a>: In this presentation, the &lt;a href="https://github.com/bvaughn/" target="_blank" rel="noopener">bvaughn&lt;/a> talks something abot performance, search, and app architecture in React development.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="metrics">Metrics&lt;/h2>
&lt;h2 id="avoid-unnecessary-re-renders">Avoid Unnecessary Re-renders&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1v" target="_blank" rel="noopener">High Performance React: 3 New Tools to Speed Up Your Apps&lt;/a>: In this post I’ll highlight tools and techniques for making React apps fast. Each section also has an interactive, and (hopefully) fun demo!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UXA" target="_blank" rel="noopener">React PureComponent Pitfalls&lt;/a>: Unnecessary re-renders can slow down your app, especially when rendering large collections where updates to the collection occur frequently.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="code-splitting--components-decomposition--代码分割与组件解耦">Code Splitting &amp;amp; Components Decomposition | 代码分割与组件解耦&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://serverless-stack.com/chapters/code-splitting-in-create-react-app.html" target="_blank" rel="noopener">2017-Code Splitting in Create React App&lt;/a>: This chapter is an extra step that can help speed up the initial load time of your React app.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bXz" target="_blank" rel="noopener">2017-https://parg.co/bXz&lt;/a>: Techniques for decomposing React components. React components have a lot of power and flexibility. With so many tools at your disposal, it is incredibly easy for components to grow over time, become bloated and do too much.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1B" target="_blank" rel="noopener">2017-Writing Clean and Concise React Components by Making Full Use of ES6/7 Features and the Container-Component Pattern&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UVJ" target="_blank" rel="noopener">2018-Server Rendering, Code Splitting, and Lazy Loading with React Router v4&lt;/a>: In this article, software engineers from Airbnb share practices in combing server rendering and code splitting.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ukg" target="_blank" rel="noopener">Upgrading a create-react-app project to a SSR + code splitting setup&lt;/a>: This is what we’ll cover: Server-side rendering, Code splitting with react-loadable, Code splitting on the server, Taking benefit of webpack’s chunkNames.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="server-side-rendering--服务端渲染">Server Side Rendering | 服务端渲染&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://formidable.com/blog/2017/introducing-rapscallion/" target="_blank" rel="noopener">2017-Introducing Rapscallion
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: a new approach for server-side rendering React applications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/server-side-react-rendering/" target="_blank" rel="noopener">2017-Server-Side React Rendering&lt;/a>: In this tutorial, we&amp;rsquo;ll take you through a server side rendering example step-by-step. including working around a common roadblock for React apps that talk to APIs.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/21492780" target="_blank" rel="noopener">React 同构技术&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app" target="_blank" rel="noopener">React on the Server for Beginners: Build a Universal React and Node App&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://redux.js.org/docs/recipes/ServerRendering.html" target="_blank" rel="noopener">Redux 官方文档 ServerSideRendering&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.coding.net/blog/React-server-rendering" target="_blank" rel="noopener">玩转 React 服务端渲染&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/caljrimmer/isomorphic-redux-app" target="_blank" rel="noopener">isomorphic-redux-app&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.com/what-exactly-is-client-side-rendering-and-hows-it-different-from-server-side-rendering-bd5c786b340d#.n4zils8st" target="_blank" rel="noopener">Client-side vs. server-side rendering: why it’s not all black and white.&lt;/a>: Since the dawn of time, the conventional method for getting your HTML up onto a screen was by using server-side rendering. It was the only way. You loaded up your .html pages on your server, then your server went and turned them into useful documents on your users’ browsers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://formidable.com/blog/2017/introducing-rapscallion/" target="_blank" rel="noopener">Introducing Rapscallion&lt;/a>: a new approach for server-side rendering React applications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://arkwright.github.io/scaling-react-server-side-rendering.html" target="_blank" rel="noopener">2017-Scaling React Server-Side Rendering&lt;/a>: Some of the insights here are React-specific, but many are simply generic scalability challenges, or simple mistakes that were made.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zeit.co/blog/streaming-server-rendering-at-spectrum" target="_blank" rel="noopener">Streaming Server-Side Rendering and Caching at Spectrum&lt;/a>: In this guest post he describes the journey to high performance server-rendering of their React application with streaming responses and distributed caching.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="monitor--report--监控与回报">Monitor &amp;amp; Report | 监控与回报&lt;/h1>
&lt;h1 id="preact">Preact&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf#.or5425hja" target="_blank" rel="noopener">The Inner Workings Of Virtual DOM&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lukeed/preact-starter" target="_blank" rel="noopener">Webpack2 boilerplate for building SPA / PWA / offline front-end apps with Preact&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000010336457" target="_blank" rel="noopener">司徒正美 preact 源码学习系列文章&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>