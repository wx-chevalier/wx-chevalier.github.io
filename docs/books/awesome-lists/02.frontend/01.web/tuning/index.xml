<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tuning | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/index.xml" rel="self" type="application/rss+xml"/><description>Tuning</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Tuning</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/</link></image><item><title>VirtualDOM-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/virtualdom-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/virtualdom-list/</guid><description>&lt;h1 id="virtualdom-list">VirtualDOM List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://reactkungfu.com/2015/10/the-difference-between-virtual-dom-and-dom/" target="_blank" rel="noopener">2015-The difference between Virtual DOM and DOM&lt;/a>: React attacks us with the virtual DOM right away, on the main page. This feature seems to be very important!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.oyecode.com/2015/09/reactjs-learning-virtual-dom-and-react.html" target="_blank" rel="noopener">2015-ReactJS | Learning Virtual DOM and React Diff Algorithm&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/livoras/blog/issues/13" target="_blank" rel="noopener">2015-深度剖析：如何实现一个 Virtual DOM 算法&lt;/a>：本文会在教你怎么用 300~400 行代码实现一个基本的 Virtual DOM 算法，并且尝试尽量把 Virtual DOM 的算法思路阐述清楚。希望在阅读本文后，能让你深入理解 Virtual DOM 算法，给你现有前端的编程提供一些新的思考。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/31809713/answer/53544875" target="_blank" rel="noopener">2016-知乎问答-网上都说操作真实 DOM 慢，但测试结果却比 React 更快，为什么？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/25630842" target="_blank" rel="noopener">2017-饿了么-对 Virtual-DOM 的一些理解&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@rajaraodv/the-inner-workings-of-virtual-dom-666ee7ad47cf#.or5425hja" target="_blank" rel="noopener">2017-The Inner Workings Of Virtual DOM&lt;/a>: In this blog, I’ll take a simple example and go over various scenarios to give you an idea as to how they actually work.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>实现：&lt;a href="https://github.com/Matt-Esch/virtual-dom" target="_blank" rel="noopener">virtual-dom&lt;/a>，&lt;a href="https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060#.59fqwanqa" target="_blank" rel="noopener">how-to-write-your-own-virtual-dom&lt;/a>，&lt;a href="https://github.com/livoras/simple-virtual-dom" target="_blank" rel="noopener">simple-virtual-dom&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Benchmark: &lt;a href="http://vdom-benchmark.github.io/vdom-benchmark/" target="_blank" rel="noopener">Virtual DOM Benchmark&lt;/a>, &lt;a href="https://medium.com/@localvoid/how-to-win-in-web-framework-benchmarks-8bc31af76ce7#.h3nedvhr5" target="_blank" rel="noopener">how-to-win-in-web-framework-benchmarks&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/mbasso/asm-dom/blob/master/README.md" target="_blank" rel="noopener">2017-asm-dom
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: A minimal WebAssembly virtual DOM to build C++ SPA (Single page applications)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.functorial.com/posts/2018-03-12-You-Might-Not-Need-The-Virtual-DOM.html" target="_blank" rel="noopener">2018-You Might Not Need The Virtual DOM&lt;/a>: I&amp;rsquo;ll give an overview of the motivation behind the library, and the way in which it was implemented.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="jsx">JSX&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/vadimdemedes/dom-chef" target="_blank" rel="noopener">2017-dom-chef
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Build DOM elements using JSX automatically.&lt;/li>
&lt;/ul>
&lt;h1 id="data-binding">Data Binding&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/xufei/blog/issues/10" target="_blank" rel="noopener">Angular 沉思录(一)数据绑定&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bOW" target="_blank" rel="noopener">双向绑定的简单实现——基于“脏检测”&lt;/a>：本文基于“脏检测”机制实现一个简单的双向绑定。若您对如何使用 ES5 的 getter/setter 实现动态数据绑定较为感兴趣，可移步至双向绑定的简单实现——基于 ES5 对象的 getter/setter 机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/53176471/answer/134004234" target="_blank" rel="noopener">开发 vue(或类似的 MVVM 框架)的过程中，需要面对的主要问题有哪些？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24475845" target="_blank" rel="noopener">250 行实现一个简单的 MVVM&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/44724640" target="_blank" rel="noopener">如何监听 js 中变量的变化?&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hijiangtao.github.io/2017/08/03/How-to-Manipulate-DOM-Effectively/" target="_blank" rel="noopener">2017-如何监听页面 DOM 变动并高效响应&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Web-APM-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-apm-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-apm-list/</guid><description>&lt;h1 id="web-apm-list">Web APM LIst&lt;/h1>
&lt;h1 id="monitor--监控">Monitor | 监控&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/cathsfz/p/how-to-capture-and-analyze-javascript-error.html" target="_blank" rel="noopener">如何捕获和分析 JavaScript Error&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://taobaofed.org/blog/2015/10/28/jstracker-how-to-collect-data/" target="_blank" rel="noopener">JSTracker：前端异常数据采集&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://tech.meituan.com/mt-mobile-analytics-practice.html" target="_blank" rel="noopener">美团点评前端无痕埋点实践&lt;/a>：构建一个数据平台大体上包括数据采集、数据上报、数据存储、数据计算，以及数据的可视化展示等几个重要的环节。前端数据采集与上报是整个流程中最重要的一环，只有确保前端数据生产的全面、准确、及时，最终产生的数据结果才是可靠的、有价值的。为了解决前端埋点的准确性、及时性、开发效率等问题，业内各家公司从不同角度，提出了多种技术方案，本文则是美团点评前端无痕埋点实践。( &lt;a href="http://suo.im/fVPpT" target="_blank" rel="noopener">http://suo.im/fVPpT&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/22271290" target="_blank" rel="noopener">PhantomJS &amp;amp; NodeJS 在京东网站前端监控平台的最佳实践&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jbtronics/CrookedStyleSheets" target="_blank" rel="noopener">Webpage tracking only using CSS (and no JS)&lt;/a>: Proof of concept for website tracking/analytics using only CSS and without Javascript.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="前端监控系统">前端监控系统&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/LwR2KjRPSH49QLuxj5AoSA" target="_blank" rel="noopener">如何设计前端实时分析及报警系统&lt;/a>: 从日志发生、采集，然后再到存储的一个闭环，非常简单。其实见微知著，看到这么一个简单的实现，再把日志类型进行丰富，采集和存储做的强大一点，基本上就可以去搭建一个比较简单的前端监控系统了。&lt;/li>
&lt;/ul></description></item><item><title>Web-ExperienceTuning-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-experiencetuning-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-experiencetuning-list/</guid><description>&lt;h1 id="web-experience-tuning-list--web-体验优化">Web Experience Tuning List | Web 体验优化&lt;/h1>
&lt;h1 id="robust-健壮性">Robust: 健壮性&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://molily.de/robust-javascript/" target="_blank" rel="noopener">Robust Client-Side JavaScript&lt;/a>: Why do we need to talk about robust JavaScript and how do we achieve it?&lt;/li>
&lt;/ul>
&lt;h1 id="易用性accessibility">易用性（Accessibility）&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/open-indy/Koa11y" target="_blank" rel="noopener">Koa11y
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Easily check for website accessibility issues.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://24ways.org/2017/wcag-for-people-who-havent-read-them/" target="_blank" rel="noopener">2017-Web Content Accessibility Guidelines—for People Who Haven&amp;rsquo;t Read Them&lt;/a>: In a single article—what gifts the Web Content Accessibility Guidelines 2.0 editors have bestowed upon us.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="polyfill">Polyfill&lt;/h1>
&lt;h1 id="ui">UI&lt;/h1>
&lt;h2 id="typeset">TypeSet&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.ui.cn/detail/72212.html" target="_blank" rel="noopener">移动端文字与排版设计的六个原则&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.w3.org/TR/clreq/#positioning_of_bilingual_annotations" target="_blank" rel="noopener">W3C 中文排版需求&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kitze/sizzy" target="_blank" rel="noopener">Sizzy
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>：A tool for developing responsive websites crazy-fast. Sizzy 是辅助开发者预览网页在不同屏幕分辨率下显示效果的工具，它能够在同一页上列举出目标网页在多个设备上的显示效果，从而加速响应式开发的速度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ctrlplusb/react-sizeme" target="_blank" rel="noopener">React SizeME&lt;/a>: Make your React Components aware of their width, height and position.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://dollarshaveclub.github.io/reframe.js/" target="_blank" rel="noopener">Reframe
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/xcatliu/mobi.css/blob/master/dist/mobi.css" target="_blank" rel="noopener">专注于移动端样式库 Mobi.css&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/matthewhudson/device.js" target="_blank" rel="noopener">Device.js
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 面向不同的设备选用不同的布局代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.smashingmagazine.com/2013/06/media-queries-are-not-the-answer-element-query-polyfill/" target="_blank" rel="noopener">2013-Media Queries Are Not The Answer: Element Query Polyfill&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://webdesign.tutsplus.com/tutorials/element-queries-the-future-of-responsive-web-design--cms-26945" target="_blank" rel="noopener">2016-Element Queries: the Future of Responsive Web Design&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/25216275" target="_blank" rel="noopener">网易和淘宝移动 WEB 适配方案再分析&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/scaling-responsive-animations/" target="_blank" rel="noopener">Scaling Responsive Animations&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA4ODIxMzg5MQ==&amp;amp;mid=2653995792&amp;amp;idx=1&amp;amp;sn=730974c4cff6d3738c52902a2f99ed7e&amp;amp;scene=23&amp;amp;srcid=0516rsLrl38nVY19S5QIKHGC#rd" target="_blank" rel="noopener">这可能是史上最全的 CSS 自适应布局总结&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.toptal.com/android/developing-mobile-web-apps-when-why-and-how" target="_blank" rel="noopener">developing-mobile-web-apps-when-why-and-how&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.elegantthemes.com/blog/tips-tricks/10-tips-for-mobile-web-design-optimization" target="_blank" rel="noopener">10-tips-for-mobile-web-design-optimization&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.creativebloq.com/rwd/pros-guide-responsive-web-design-71515692" target="_blank" rel="noopener">The pro&amp;rsquo;s guide to responsive web design&lt;/a>: Advanced techniques from top web designers to build better sites for any device.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="media-query-媒介查询">Media Query: 媒介查询&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/snippets/css/media-queries-for-standard-devices/" target="_blank" rel="noopener">media-queries-for-standard-devices&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://stephen.io/mediaqueries/" target="_blank" rel="noopener">CSS Media Queries for iPads &amp;amp; iPhones&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/scottjehl/Respond" target="_blank" rel="noopener">Respond.js
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: 针对 IE6-8 的媒介查询&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/paranoida/sass-mediaqueries" target="_blank" rel="noopener">sass-mediaqueries
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://davidwalsh.name/write-media-queries-sass" target="_blank" rel="noopener">write-media-queries-sass&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/approaches-media-queries-sass/" target="_blank" rel="noopener">approaches-media-queries-sass&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UuJ" target="_blank" rel="noopener">2017-Media Queries Based on Element Width with MutationObserver&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="响应式布局与缩放">响应式布局与缩放&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.sitepoint.com/understanding-css-grid-systems/" target="_blank" rel="noopener">understanding-css-grid-systems&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@patrickbrosset/css-grid-layout-6c9cba6e8a5a#.abrk05o7z" target="_blank" rel="noopener">The future of layout with CSS: Grid Layouts&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5S" target="_blank" rel="noopener">2017-Common Responsive Layouts with CSS Grid (and some without!)&lt;/a>: Example code for you to try out, change and make your own.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="响应式尺寸">响应式尺寸&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/hbxeagle/rem/blob/master/HD_ADAPTER.md" target="_blank" rel="noopener">前端：REM 手机屏幕高清适配方案&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="响应式组件">响应式组件&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://xudafeng.github.io/autoresponsive-react/" target="_blank" rel="noopener">Autoresponsive React&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>Web-LoadTuning-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-loadtuning-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-loadtuning-list/</guid><description>&lt;h1 id="web-performance-optimization-for-page-loading">Web Performance Optimization for Page Loading&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.zachleat.com/web/comprehensive-webfonts/#abstain" target="_blank" rel="noopener">A Comprehensive Guide to Font Loading Strategies&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://tech.dianwoda.com/2016/10/26/big-pipe-web-page-rendering-acceleration/" target="_blank" rel="noopener">前端渲染加速之 - Big Pipe&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhM" target="_blank" rel="noopener">Preload, Prefetch And Priorities in Chrome&lt;/a>: Today we’ll dive into insights from Chrome’s networking stack to provide clarity on how web loading primitives (like &lt;link rel=“preload”> &amp;amp; &lt;link rel=“prefetch”>) work behind the scenes so you can be more effective with them.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIv" target="_blank" rel="noopener">2017- 多 “ 维 ” 优化：前端高并发策略的更深层思考&lt;/a>：一项指标的变好，总少不了相应优化策略的实施。优化并不是简单的一蹴而就，而是个不断迭代与推翻的过程。更深层的优化方案，往往是在某种思维策略之下，对问题场景和基本策略优缺的深刻理解后做出的当下最优的权衡结果。本文笔者从前端高并发优化这一具体点出发，逐步向大家阐述笔者在优化的 “ 术 ” 之上思维层面的一些思考。希望能给各位带来共鸣和感悟。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://alistapart.com/article/the-best-request-is-no-request-revisited" target="_blank" rel="noopener">The Best Request Is No Request, Revisited&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UtY" target="_blank" rel="noopener">How Modern Web Browsers Accelerate Performance: The Networking Layer&lt;/a>: In this post, we’ll try to analyze what techniques modern browsers employ to automatically boost performance.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="http">HTTP&lt;/h1>
&lt;h2 id="compression-压缩">Compression: 压缩&lt;/h2>
&lt;h2 id="http2-push--http2-推送">HTTP/2 Push | HTTP/2 推送&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://instantdomainsearch.com/articles/streaming-json-jsons/" target="_blank" rel="noopener">2018-Use streaming JSON to speed up your website&lt;/a>: JSON streaming—or JSONS—is a simple technique we use to decrease search latency for users, particularly anyone on a slow connection.&lt;/li>
&lt;/ul>
&lt;h1 id="cdn">CDN&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UtK" target="_blank" rel="noopener">2016-从直播 CDN 的原理说起，谈如何解决延时和连麦的老难题？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/a9rxbe8Zj8TZGhTVQPBzyQ" target="_blank" rel="noopener">完结篇：史上最全的 CDN 内容分发网络实战技巧&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.jare.io/" target="_blank" rel="noopener">JARE&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.yegor256.com/2016/03/30/jare-instant-free-cdn.html" target="_blank" rel="noopener">jare-instant-free-cdn&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="edge-compiting">Edge Compiting&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/8Nig2vYMUmtcEw0A7jt1yA" target="_blank" rel="noopener">2020-边缘加载&lt;/a>: 淘宝是如何缩短首屏时间、降低服务器压力的？边缘计算告诉你答案！&lt;/li>
&lt;/ul>
&lt;h1 id="cache--缓存优化">Cache | 缓存优化&lt;/h1>
&lt;h1 id="prefetch--预抓取">Prefetch | 预抓取&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://3perf.com/blog/link-rels/" target="_blank" rel="noopener">2018-Preload, prefetch and other &lt;link> tags&lt;/a>: Prefetch a CSS file, prerender a full page, or resolve a domain ahead of time – and you won’t have to wait for it when it’s actually needed! Sounds cool.&lt;/li>
&lt;/ul>
&lt;h1 id="critical-path--关键渲染路径">Critical Path | 关键渲染路径&lt;/h1>
&lt;h2 id="critical-css--关键-css">Critical CSS | 关键 CSS&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/addyosmani/critical" target="_blank" rel="noopener">critical&lt;/a>:Extract &amp;amp; Inline Critical-path CSS in HTML pages&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/addyosmani/critical-path-css-tools" target="_blank" rel="noopener">critical-path-css-tools&lt;/a>:Tools to help prioritize above-the-fold CSS&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bDk" target="_blank" rel="noopener">2017-Remove Unused CSS Rules&lt;/a>: Removing unused styles can help make the situation more manageable.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/giakki/uncss" target="_blank" rel="noopener">UnCSS
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: UnCSS is a tool that removes unused CSS from your stylesheets. It works across multiple files and supports Javascript-injected CSS.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bwo" target="_blank" rel="noopener">2017-Critical CSS and Webpack: Automatically Minimize Render-Blocking CSS&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://vuejsdevelopers.com/2017/07/24/critical-css-webpack/" target="_blank" rel="noopener">2017-Critical CSS and Webpack: Automatically Minimize Render-Blocking CSS&lt;/a>: Isolating critical CSS is something that can be done programmatically, and in this article I’ll show you how to delegate it to your Webpack pipeline.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/FullHuman/purgecss" target="_blank" rel="noopener">2018-purgecss
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Purgecss analyzes your content and your css files. Then it matches the selectors used in your files with the one in your content files. It removes unused selectors from your css, resulting in smaller css files.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="lazy-loading--懒加载">Lazy Loading | 懒加载&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/ApoorvSaxena/lozad.js" target="_blank" rel="noopener">2017-Lozad.js
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: Highly performant, light ~0.5kb and configurable lazy loader in pure JS with no dependencies for images, iframes and more, using IntersectionObserver API&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEY" target="_blank" rel="noopener">2017-How to use SVG as a Placeholder, and Other Image Loading Techniques&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="code-spliting--代码分割">Code Spliting | 代码分割&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/samccone/bundle-buddy" target="_blank" rel="noopener">Bundle Buddy
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Bundle Buddy is a tool to help you find source code duplication across your javascript chunks/splits. This enables you to fine tune code splitting parameters to reduce bundle invalidation rates as well as improve repeat page load performance \o/.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UXN" target="_blank" rel="noopener">2018-Web Performance Optimization with Webpack by Addy Osmani&lt;/a>: Taking advantage of its features for optimizing modern code, code-splitting scripts into critical and non-critical pieces and stripping out unused code.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ua4" target="_blank" rel="noopener">腾讯社交网络图片带宽优化技术演进之路&lt;/a>: 为进一步降低运营带宽成本，减小用户访问流量及提升页面加载速度，社交网络 CDN 运维紧跟行业图片优化趋势，创新引入 WebP、SharpP、自适应分辨率、Guetzli 等图像压缩技术到现网，经过三年多的多部门联合攻关，已逐渐形成一套覆盖全图片类型(JPEG、JPG、PNG、WebP、GIF)多场景的图片压缩运营体系，适用于各类型终端，每年节约外网带宽几百 G。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="image-optimization-图片优化">Image Optimization: 图片优化&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://images.guide/" target="_blank" rel="noopener">2017-Essential Image Optimization&lt;/a>: In 2017, image optimization should be automated. It&amp;rsquo;s easy to forget, best practices change, and content that doesn&amp;rsquo;t go through a build pipeline can easily slip.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLp" target="_blank" rel="noopener">2017-An Introduction to Progressive Image Rendering&lt;/a>: In this article, we’ll look at how you can save your users bandwidth and time by loading and rendering well-optimized images lazily and progressively.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bvn" target="_blank" rel="noopener">2017-Reducing Image File Size at Etsy&lt;/a>: Serving images is a critical part of Etsy’s infrastructure.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/WYOP1" target="_blank" rel="noopener">Save time by transforming images in the command line&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5N" target="_blank" rel="noopener">2017-Network based image loading using the Network Information API in Service Worker&lt;/a>: Recently, Chromium improved their implementation of navigator.connection by adding three new attributes: effectiveType, downlink and rtt.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/edent/SuperTinyIcons" target="_blank" rel="noopener">SuperTinyIcons
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>:Under 1KB each! Super Tiny Icons are miniscule SVG versions of your favourite website and app logos&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="jpeg">JPEG&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@duhroach/reducing-jpg-file-size-e5b27df3257c#.jdegycys9" target="_blank" rel="noopener">reducing-jpg-file-size&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@duhroach/reducing-png-file-size-8473480d0476#.pxfmpayr1" target="_blank" rel="noopener">reducing-png-file-size&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="webp">WebP&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://aotu.io/notes/2016/06/23/explore-something-of-webp/" target="_blank" rel="noopener">探究 WebP 一些事儿&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.keycdn.com/blog/front-end-optimization/" target="_blank" rel="noopener">Front End Optimization – 9 Tips to Improve Web Performance&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/optimising-the-front-end-for-the-browser-f2f51a29c572?source=reading_list---------1-1---------" target="_blank" rel="noopener">Optimising the front end for the browser&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/sundway/blog/issues/2" target="_blank" rel="noopener">渲染性能&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://insights.thoughtworkers.org/web-apps-performance-optimization/" target="_blank" rel="noopener">Web App 性能优化之亮剑&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/net-magazine/web-performance-secrets-from-the-bbc-d4b01f869752#.hwhq6jcbn" target="_blank" rel="noopener">web-performance-secrets-from-the-bbc&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6q" target="_blank" rel="noopener">2017-Developer&amp;rsquo;s Guide to E-Commerce Sites Speed Optimization&lt;/a>: You need to optimize your e-commerce website for speed at a time when search engines themselves rank faster websites above slower ones. At that same time, audience&amp;rsquo;s attention span is getting shorter by the day.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="font">Font&lt;/h1>
&lt;h1 id="响应式图片">响应式图片&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.html5rocks.com/en/tutorials/speed/img-compression/" target="_blank" rel="noopener">Image Compression for Web Developers&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://davidwalsh.name/responsive-images-client-hints" target="_blank" rel="noopener">responsive-images-client-hints&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://slicejack.com/quick-guide-responsive-images/" target="_blank" rel="noopener">quick-guide-responsive-images&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.smashingmagazine.com/2014/05/responsive-images-done-right-guide-picture-srcset/" target="_blank" rel="noopener">responsive-images-done-right-guide-picture-srcset&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/scottjehl/picturefill" target="_blank" rel="noopener">Picturefill
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.lullabot.com/articles/fundamentals-of-responsive-images" target="_blank" rel="noopener">2017-Fundamentals of Responsive Images&lt;/a>: In this article, I’ll be explaining some of the key concepts for responsive images, as well as providing an overview of a few different responsive image tactics.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Web-PWA-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-pwa-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-pwa-list/</guid><description>&lt;h1 id="pwa-links-curated-links-for-mastering-pwa">PWA Links: Curated links for mastering PWA&lt;/h1>
&lt;p>This file aggregates popular links for learning how to implement Progressive Web Apps. More reference about ITCS can turn to &lt;a href="https://parg.co/UMJ" target="_blank" rel="noopener">AwesomeList: Guide to Galaxy&lt;/a>, which collects valuable, popular and up-to-date links for CS, including Programming Language, Software Engineering, Server Side Application, Infrastructure, InfoSecurity, Industrial Application, DataScienceAI, Frontend Technology(iOS, Android, RN, Electron), etc.&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://arc.applause.com/2016/05/24/progressive-web-apps/" target="_blank" rel="noopener">2016-Why Google Thinks You Should Start Building Progressive Web Apps&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/lRc" target="_blank" rel="noopener">2018-Progressive Web Apps: Bridging the gap between web and mobile apps&lt;/a>: So this article is a summary of the concepts and approaches that Progressive Web Apps follow.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="case-study">Case Study&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/showcase/2016/aliexpress" target="_blank" rel="noopener">AliExpress Case Study&lt;/a> : AliExpress increases conversion rate for new users by 104% with new progressive web apps.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/showcase/2016/extra" target="_blank" rel="noopener">eXtra Electronics Case Study&lt;/a> : United eXtra Electronics grows eCommerce sales by 100% with Web Push Notifications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/showcase/2016/jumia" target="_blank" rel="noopener">Jumia Case Study&lt;/a> : Push Notifications help Jumia reverse cart abandonment and increase conversions by 9X.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/showcase/2016/konga" target="_blank" rel="noopener">Konga Case Study&lt;/a> : Konga cuts data usage 92% with new Progressive Web App.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/showcase/2016/suumo" target="_blank" rel="noopener">Suumo Case Study&lt;/a> : Japan&amp;rsquo;s top real estate site supercharges new listings with web Push Notifications and sees a 31% open rate for notifications.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/JS85s" target="_blank" rel="noopener">2017- 百度搜索对 PWA 的探索和初步实践&lt;/a>: 本文是百度搜索资深 Web 前端工程师沈洲在前端之巅微信群中的分享整理总结而成，介绍了百度天气 PWA 应用的开发实践，本周还分享了&lt;a href="http://6me.us/Ik5k1L" target="_blank" rel="noopener">《PWA 实践：从一个简单的页面开始》&lt;/a>与&lt;a href="http://6me.us/P5cB" target="_blank" rel="noopener">《PWA 实践：理解和创建 Service Worker 脚本》&lt;/a>等 PWA 相关内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bO7" target="_blank" rel="noopener">2017-PWA 在饿了么的实践经验&lt;/a>：本篇旨在和大家分享饿了么 M 站(&lt;a href="https://h5.ele.me/msite/" target="_blank" rel="noopener">https://h5.ele.me/msite/&lt;/a>)在 PWA 改造中的实践经验。涉及到的方面有：PWA 线上部署的准备工作、多页应用的 prerender 优化、实践过程中踩到的(和推进解决的)坑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3" target="_blank" rel="noopener">2017-Twitter Lite and High Performance React Progressive Web Apps at Scale&lt;/a>: A look into removing common and uncommon performance bottlenecks in one of the worlds largest React.js PWAs, Twitter Lite.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMz" target="_blank" rel="noopener">2017-Upgrading Ele.me to Progressive Web App&lt;/a>: we at Ele.me (the biggest food ordering and delivering company in China) have been working on upgrading our mobile website to a Progressive Web App.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UuI" target="_blank" rel="noopener">2017-A Pinterest Progressive Web App Performance Case Study&lt;/a>: In this post we’ll cover some of their work to load fast on mobile hardware by keeping JavaScript bundles lean and adopting Service Workers for network resilience.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">2017-HNPWA
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Hacker News readers as Progressive Web Apps&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bBH" target="_blank" rel="noopener">2017-A React And Preact Progressive Web App Performance Case Study: Treebo&lt;/a>: They recently shipped a new Progressive Web App as their default mobile experience, initially using React and eventually switching to Preact in production.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UMw" target="_blank" rel="noopener">2017-A Tinder Progressive Web App Performance Case Study&lt;/a>: Techniques for JavaScript performance optimization, Service Workers for network resilience and Push Notifications for chat engagement.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="tutorial">Tutorial&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-i-introduction-50679aef2b12#.178womihv" target="_blank" rel="noopener">2016-Progressive Web Apps with React.js #Series#&lt;/a>: Progressive Web Apps take advantage of new technologies to bring the best of mobile sites &amp;amp; native apps to users. They’re reliable, fast, and engaging. They originate from a secure origin and load regardless of network state.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/fundamentals/getting-started/your-first-progressive-web-app/?hl=en" target="_blank" rel="noopener">2016-Google Developers - Your First Progressive Web App&lt;/a> : A step-by-step guide to building a progressive web apps using the app shell pattern.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1n" target="_blank" rel="noopener">2017-A beginner’s guide to making Progressive Web Apps&lt;/a>: Hopefully, this post will be all you need to get started in making your own PWA.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btH" target="_blank" rel="noopener">2017-A progressive Web application with Vue JS, Webpack &amp;amp; Material Design #Series#&lt;/a>: The tutorial will be split in several parts, that will be published successively&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/SangKa/PWA-Book-CN" target="_blank" rel="noopener">2017-Progressive Web Apps (PWA) 中文版》📚&lt;/a>: This book is written with stand-alone chapters, letting you learn about particular features of interest without having read previous chapters. By the end, you&amp;rsquo;ll be ready to build better web applications and improve the user experience.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://pwabook.com/oreillyapwa" target="_blank" rel="noopener">2016-Building Progressive Web Apps - O&amp;rsquo;Reilly Media&lt;/a> : A deep dive into progressive web apps, service workers, push notifications, background sync, IndexedDB, offline first and much more (disclaimer: written by the maintainer of this page).&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.smashingmagazine.com/2016/08/a-beginners-guide-to-progressive-web-apps/" target="_blank" rel="noopener">2015-A Beginner’s Guide To Progressive Web Apps&lt;/a>: Progressive web apps could be the next big thing for the mobile web. Originally proposed by Google in 2015, they have already attracted a lot of attention because of the relative ease of development and the almost instant wins for the application’s user experience.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bOz" target="_blank" rel="noopener">2017-PWA 入门 : 写个非常简单的 PWA 页面&lt;/a>：Progressive Web Apps 是 Google 提出的用前沿的 Web 技术为网页提供 App 般使用体验的一系列方案。这篇文章里我们来完成一个非常简单的 PWA 页面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://julian.is/article/progressive-web-apps/" target="_blank" rel="noopener">2017-Progressive Web Apps — The Next Step in Responsive Web Design — Julian Gaviria &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/m21" target="_blank" rel="noopener">2018-Installable Web Apps&lt;/a>: A Practical Introduction To PWAs with JavaScript and Node.js&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="installable-web-app">Installable Web App&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en" target="_blank" rel="noopener">Increasing Engagement with Web App Install Banners&lt;/a> : An intro to App Install Banners and making sure Chrome offers your web app to your users.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2014/11/Support-for-installable-web-apps-with-webapp-manifest-in-chrome-38-for-Android" target="_blank" rel="noopener">Installable Web Apps with the Web App Manifest in Chrome for Android&lt;/a>: An introduction to installable Web Apps in Chrome for Android.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="service-worker">Service Worker&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/dev-channel/progressive-web-app-libraries-in-production-b52cad37d34#.z5egf9m7v" target="_blank" rel="noopener">2017-Progressive Web App Libraries in Production&lt;/a>: This article is written by Addy Osmani. Two years ago, our team at Google started work on JavaScript libraries to reduce the friction for building Progressive Web Apps.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://taobaofed.org/blog/2018/08/08/workbox3/" target="_blank" rel="noopener">2018-Workbox 3：Service Worker 可以如此简单&lt;/a>: 不过到了现在有了 Workbox 3，一切关于 Service Worker 的担心都不再是问题。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="web-push">Web Push&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.chromestatus.com/feature/5480344312610816" target="_blank" rel="noopener">Chrome Platform Status - Web Notifications&lt;/a> : Implementation status for Chrome and other browsers.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/fundamentals/getting-started/push-notifications/?hl=en" target="_blank" rel="noopener">PWA Dev Summit 2016 codelab - Push Notifications&lt;/a> : Up-to-date getting started tutorial for Progressive Web App, Push Notifications and service worker basics.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Using_the_Push_API" target="_blank" rel="noopener">Using the Push API&lt;/a> : An article introducing Push API.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/web-push-libs" target="_blank" rel="noopener">web-push-libs&lt;/a> : A collection of useful libraries for web push in different technologies (Node.js, PHP, Python, etc.)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/yued-fe/y-translation/blob/master/en/web-push-notifications/introduction.md" target="_blank" rel="noopener">2018-Web 推送通知&lt;/a>: 本系列文章是翻译自谷歌开发者网站，我们的主要目的，是让对 Web 推送服务有兴趣的开发者，能够通过阅读本系列的文章而初步掌握 Web 推送的一些基本原理和实现方式，从而在实际工作中可以应用起来。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Web-RenderTuning-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-rendertuning-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-rendertuning-list/</guid><description>&lt;h1 id="web-render-tuning-list">Web Render Tuning List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://developers.google.com/web/updates/2019/02/rendering-on-the-web" target="_blank" rel="noopener">2019-Rendering on the Web&lt;/a>: The differences between these approaches help illustrate the trade-offs of rendering on the web through the lens of performance.&lt;/li>
&lt;/ul>
&lt;h1 id="rendering-mechanism--渲染机制">Rendering Mechanism | 渲染机制&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.org/its-not-dark-magic-pulling-back-the-curtains-from-your-stylesheets-c8d677fa21b2" target="_blank" rel="noopener">2017-Pulling Back The Curtains on Your Stylesheets&lt;/a>: My talk (and this post) will focus on the why by taking a deep dive into browser internals to see how our styles are parsed and rendered.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener">浏览器的工作原理：新式网络浏览器幕后揭秘&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://jdc.jd.com/archives/2806" target="_blank" rel="noopener">浅析渲染引擎与前端优化&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000004934730" target="_blank" rel="noopener">浏览器工作原理&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://fex.baidu.com/blog/2014/05/what-happen/" target="_blank" rel="noopener">从输入 URL 到页面加载完成的过程中都发生了什么事情？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.csdn.net/article/2015-06-12/2824946" target="_blank" rel="noopener">CSDN-开发者应该知道的有关于网页渲染的事&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://delai.me/code/js-and-performance/" target="_blank" rel="noopener">JS 一定要放在 Body 的最底部么？聊聊浏览器的渲染机制&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="noopener">how-browsers-work&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@gneutzling/the-rendering-process-of-a-web-page-78e05a6749dc#.zdp2moezo" target="_blank" rel="noopener">the-rendering-process-of-a-web-page&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/d3A" target="_blank" rel="noopener">2018-How browser rendering works — behind the scenes&lt;/a>: The purpose of this article is to explain, in very simple terms, the steps your browser takes to convert HTML, CSS and JavaScript into a working website you can interact with.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="scripting--脚本解析与执行">Scripting | 脚本解析与执行&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://v8.dev/blog/cost-of-javascript-2019#json" target="_blank" rel="noopener">2019-The cost of JavaScript in 2019&lt;/a>: In 2019, the dominant costs of processing scripts are now download and CPU execution time. User interaction can be delayed if the browser’s main thread is busy executing JavaScript, so optimizing bottlenecks with script execution time and network can be impactful.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=RWLzUnESylc" target="_blank" rel="noopener">Planning for Performance&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://twitter.com/MSEdgeDev/status/819985530775404544" target="_blank" rel="noopener">Solving the Web Performance Crisis by Nolan Lawson&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://timkadlec.com/2014/09/js-parse-and-execution-time/" target="_blank" rel="noopener">JS Parse and Execution Time&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://carlos.bueno.org/2010/02/measuring-javascript-parse-and-load.html" target="_blank" rel="noopener">Measuring Javascript Parse and Load&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.safaribooksonline.com/library/view/velocity-conference-new/9781491900406/part78.html" target="_blank" rel="noopener">Unpacking the Black Box: Benchmarking JS Parsing and Execution on Mobile Devices&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://speakerdeck.com/desp/unpacking-the-black-box-benchmarking-js-parsing-and-execution-on-mobile-devices" target="_blank" rel="noopener">slides&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://aerotwist.com/blog/when-everything-is-important-nothing-is/" target="_blank" rel="noopener">When everything’s important, nothing is!&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://benediktmeurer.de/2016/12/16/the-truth-about-traditional-javascript-benchmarks/" target="_blank" rel="noopener">The truth about traditional JavaScript benchmarks&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://stackoverflow.com/questions/1096907/do-browsers-parse-javascript-on-every-page-load/" target="_blank" rel="noopener">Do Browsers Parse JavaScript On Every Page Load&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/nolanlawson/optimize-js" target="_blank" rel="noopener">optimize-js&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ariya.io/2012/07/lazy-parsing-in-javascript-engines" target="_blank" rel="noopener">lazy-parsing-in-javascript-engines&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/mishoo/UglifyJS2/issues/886" target="_blank" rel="noopener">Turn off negate_iife by default as it hurts V8 performance.&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/petkaantonov/bluebird/wiki/Optimization-killers" target="_blank" rel="noopener">Optimization killers&lt;/a>: This document will contain advice to avoid writing code that will perform significantly worse than expected. Specifically those patterns that cause V8 (relevant to Node.JS, Opera, Chromium&amp;hellip;) to refuse to optimize the affected function.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4a" target="_blank" rel="noopener">2017-Optimizing dynamic JavaScript with inline caches&lt;/a>: This is an overview of an optimization technique I&amp;rsquo;ve been using in JSIL for a while, where you create and update polymorphic inline caches in your JavaScript code at runtime so that it can stay fast while adapting to unexpected changes.。( &lt;a href="https://parg.co/b4a" target="_blank" rel="noopener">https://parg.co/b4a&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bfk" target="_blank" rel="noopener">2017-Improved JavaScript performance, WebAssembly, and Shared Memory in Microsoft Edge&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/" target="_blank" rel="noopener">2012:writing-fast-memory-efficient-javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@xilefmai/efficient-javascript-14a11651d563#.i6494k3bl" target="_blank" rel="noopener">2016:efficient-javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.graspjs.com/blog/2014/01/07/refactoring-javascript-with-grasp" target="_blank" rel="noopener">2014-Refactoring your JavaScript code with Grasp&lt;/a>: Grasp 这个小小的 JavaScript 的命令行重构工具让我们所有人印象深刻。它为抽象语法树提供了丰富的选择器和操作，比摆弄 sed 和 grep 要先进多了。这给我们正在进行的将 JavaScript 做为一等编程语言的运动添加了一个有用的新工具。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Rich-Harris/butternut" target="_blank" rel="noopener">2016-Butternut
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: The fast, future-friendly minifier.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://prepack.io/" target="_blank" rel="noopener">2017-Prepack
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/> &lt;/a>: Prepack is a tool that optimizes JavaScript source code: Computations that can be done at compile-time instead of run-time get eliminated. Prepack replaces the global code of a JavaScript bundle with equivalent code that is a simple sequence of assignments. This gets rid of most intermediate computations and object allocations.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="layout--rendering-界面布局与渲染策略">Layout &amp;amp; Rendering: 界面布局与渲染策略&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.cnblogs.com/zichi/p/4720000.html" target="_blank" rel="noopener">高性能 JavaScript 重排与重绘&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://csswizardry.com/2016/06/improving-your-css-with-parker/" target="_blank" rel="noopener">improving-your-css-with-parker&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/fundamentals/performance/rendering/?hl=zh-cn" target="_blank" rel="noopener">避免大规模、复杂的布局&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000008015671" target="_blank" rel="noopener">一篇文章说清浏览器解析和 CSS(GPU )动画优化&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gist.github.com/paulirish/5d52fb081b3570c81e3a" target="_blank" rel="noopener">What forces layout / reflow&lt;/a>: All of the below properties or methods, when requested/called in JavaScript, will trigger the browser to synchronously calculate the style and layout*.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="interaction--animation--交互与动画">Interaction &amp;amp; Animation | 交互与动画&lt;/h1>
&lt;h1 id="css">CSS&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btW" target="_blank" rel="noopener">2017-高性能动态 CSS 样式&lt;/a>：本文是对 &lt;a href="http://cssinjs.org/" target="_blank" rel="noopener">JSS&lt;/a> 新近提供的&lt;a href="http://cssinjs.org/json-api?v=v7.1.1#function-values" target="_blank" rel="noopener">函数式值的介绍&lt;/a>，其与 React 内联样式以及其他 CSS 解决方案相比有数倍的性能提升。在 Web 开发中动态设置样式往往会触发页面的重渲染，而本文则是介绍了如何使用 CSSOM 的 API 来在元素渲染之前即完成样式的设置。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://kyusuf.com/post/fake-it-til-you-make-it-css" target="_blank" rel="noopener">fake-it-til-you-make-it-css&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/NamPNQ/You-Dont-Need-Javascript" target="_blank" rel="noopener">You-Dont-Need-Javascript&lt;/a>:一些纯粹的基于 CSS 的有趣的小实验&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/AllThingsSmitty/css-protips" target="_blank" rel="noopener">CSS Protips:一些关于 CSS 的小建议&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Web-SSR-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-ssr-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-ssr-list/</guid><description>&lt;h1 id="web-server-side-rendering-list--服务端渲染资料索引">Web Server Side Rendering List | 服务端渲染资料索引&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/walmartlabs/the-benefits-of-server-side-rendering-over-client-side-rendering-5d07ff2cefe8" target="_blank" rel="noopener">2017-The Benefits of Server Side Rendering Over Client Side Rendering&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beg" target="_blank" rel="noopener">2017-Client-side rendering vs. server-side rendering&lt;/a>: Initially, web frameworks had views rendered at the server. Now it’s happening on the client. Let’s explore the advantage and disadvantages of each.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/RubyLouvre/mobileHack" target="_blank" rel="noopener">mobileHack&lt;/a>：这里收集了许多移动端上遇到的各种坑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/23218754" target="_blank" rel="noopener">实现前端资源增量式更新的一种思路&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Web-Tuning-List</title><link>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-tuning-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/02.frontend/01.web/tuning/web-tuning-list/</guid><description>&lt;h1 id="web-performance-list">Web Performance List&lt;/h1>
&lt;p>前端优化的根本目的是为了有一个更好地用户体验的同时尽可能减少后端负载压力。即保证更少的加载时间、更快的首屏渲染、更流畅的用户交互。&lt;/p>
&lt;h1 id="overview--概述">Overview | 概述&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/GoogleChrome/discovery/issues/1" target="_blank" rel="noopener">2017-Production Web Apps Performance Study Q4/16 - Q1/17&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLP" target="_blank" rel="noopener">2017-Frontend Performance Check-list For Production&lt;/a>: In this article I will share with you my chick-list that I use to optimize my web pages after development. So feel free to leave a comment if you think I miss something.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@fox/talk-the-state-of-the-web-3e12f8e413b3" target="_blank" rel="noopener">2017-The State of the Web&lt;/a>: A guide to impactful performance improvements.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Utq" target="_blank" rel="noopener">400% 飞跃：Web 页面加载速度优化实战&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://zerosoul.github.io/2016/11/15/h5-memo/" target="_blank" rel="noopener">移动端 HTML5 页面开发备忘录&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s/r-D4S94XOo22PQM_wZlrig" target="_blank" rel="noopener">钉钉的 H5 性能优化方案&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;amp;mid=2653577297&amp;amp;idx=3&amp;amp;sn=96c9ec407e937132595c29b0584cdd5c&amp;amp;scene=4#wechat_redirect" target="_blank" rel="noopener">解耦 &amp;mdash;Hybrid H5 跨平台性思考 &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://thefullstack.xyz/category/the-mobile-web/" target="_blank" rel="noopener">Mobile JavaScript Apps: The Problem with the Mobile Web&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bDR" target="_blank" rel="noopener">Speed Matters: Designing for Mobile Performance&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://calendar.perfplanet.com/2017/tracking-cpu-with-long-tasks-api/" target="_blank" rel="noopener">2017-Tracking CPU with Long Tasks API&lt;/a>: the old bottleneck for web performance used to be the network. But the new bottleneck for web performance is the CPU, and particularly the main thread.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/thedaviddias/Front-End-Performance-Checklist" target="_blank" rel="noopener">2018-Front-End Performance Checklist&lt;/a>: The only Front-End Performance Checklist that runs faster than the others&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/thedaviddias/Front-End-Checklist#performance-1" target="_blank" rel="noopener">Front-End Checklist&lt;/a>: The Front-End Checklist is an exhaustive list of all elements you need to have / to test before launching your site / HTML page to production.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="case-study--案例分析">Case Study | 案例分析&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/33179166" target="_blank" rel="noopener">美团境外业务性能优化实践&lt;/a>: 本文根据第 16 期美团点评技术线上沙龙 OnLine 演讲内容整理而成。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/pqFhhb5u6w7gmUutilH5xQ" target="_blank" rel="noopener">2018-蚂蚁金服如何把前端性能监控做到极致?&lt;/a>: 将分享如何通过 Performance 相关的 API 准确的采集用户性能数据，并如何通过大数据计算加工最终产出用户性能分析产品，以及如何通过性能数据纵向衡量产品性能、发现性能瓶颈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ba2" target="_blank" rel="noopener">2017- 美团点评收银台前端可用性保障实践&lt;/a>：本文主要讨论的是前端可用性相关话题，以在美团点评移动端网页收银台的实践为例，讲解收银台前端是如何保障可用性的。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="resource">Resource&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://github.com/barretlee%e2%88%9a/performance-column/issues" target="_blank" rel="noopener">小胡子哥的性能专栏&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="benchmark--性能评测与监控">Benchmark | 性能评测与监控&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.sitespeed.io/" target="_blank" rel="noopener">SiteSpeed&lt;/a>: itespeed.io is a set of Open Source tools that helps make your web pages faster.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/WeiChiaChang/stacks-cli" target="_blank" rel="noopener">stacks-cli
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Check website stack from the terminal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/WPO-Foundation/webpagetest" target="_blank" rel="noopener">WebPagetest
&lt;img src="https://ng-tech.icu/assets/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="page-metric--页面评测">Page Metric | 页面评测&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b96" target="_blank" rel="noopener">Leveraging the Performance Metrics that Most Affect User Experience&lt;/a>: But as you try to answer the question: how fast is my app?, you&amp;rsquo;ll realize that fast is a vague term. What exactly do we mean when we say fast? In what context? And fast for whom?&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/3EO4ch" target="_blank" rel="noopener">2014-FEX-7 天打造前端性能监控系统&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/articles/html5-performance-api-monitoring" target="_blank" rel="noopener">2015- 使用 HMTL5 API 监控前端性能&lt;/a>: 用户计时 API 可以在网页应用中测量两个预定义标记之间的性能。开发者仅仅需要分别定义测量的开始和结束标记。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.07net01.com/2016/09/1653517.html" target="_blank" rel="noopener">前端性能：监控起步&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/fundamentals/performance/rail?hl=zh-cn" target="_blank" rel="noopener">2018-使用 RAIL 模型评估性能&lt;/a>: RAIL 是一种以用户为中心的性能模型。每个网络应用均具有与其生命周期有关的四个不同方面，且这些方面以不同的方式影响着性能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="api-metric--接口性能评测">API Metric | 接口性能评测&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://locust.io/" target="_blank" rel="noopener">Locust&lt;/a>: Define user behaviour with Python code, and swarm your system with millions of simultaneous users.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wg/wrk" target="_blank" rel="noopener">wrk&lt;/a>: wrk is a modern HTTP benchmarking tool capable of generating significant load when run on a single multi-core CPU.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://jmeter.apache.org/" target="_blank" rel="noopener">Apache JMeter&lt;/a>: The Apache JMeter™ application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="code-coverage--代码覆盖率">Code Coverage | 代码覆盖率&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://blog.logrocket.com/using-the-chrome-devtools-new-code-coverage-feature-ca96c3dddcaf" target="_blank" rel="noopener">Using the Chrome devtools new code coverage feature&lt;/a>: This is an exciting feature that is useful both when working with JavaScript and CSS, so I thought I’d do a quick demo and explore how it can be helpful.&lt;/li>
&lt;/ul></description></item></channel></rss>