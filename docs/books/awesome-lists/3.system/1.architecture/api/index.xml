<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>API | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/api/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/api/index.xml" rel="self" type="application/rss+xml" />
    <description>API</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>API</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/api/</link>
    </image>
    
    <item>
      <title>API-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/api/api-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/api/api-list/</guid>
      <description>&lt;h1 id=&#34;api-list&#34;&gt;Api List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://words.werd.io/what-is-an-api-bd913f45ff23#.21o2m1qc0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What is an API?&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.com/https-medium-com-anupcowkur-how-to-design-apis-that-dont-suck-922d864365c9#.muabkix06&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to design APIs that don’t suck&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/abhishekbanthia/Awesome-APIs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome-APIs&lt;/a&gt;: A curated list of APIs from round the web.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/mobile-api-security-techniques-fc1f577840ab#.z45vrlbqg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mobile API Security Techniques Part 2 — API Tokens, Oauth2, and Disappearing Secrets&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://taobaofed.org/blog/2017/02/16/a-guide-to-api-design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从达标到卓越：淘宝 API 设计之道&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shieldfy/API-Security-Checklist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-API-Security-Checklist&lt;/a&gt;: Checklist of the most important security countermeasures when designing, testing, and releasing your API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U6o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-OpenAPI and gRPC Side-by-Side&lt;/a&gt;: Both are open source efforts, both describe APIs, and both promise better experiences for API producers and consumers. So why do we need both? If we do, what value does each provide? What can each project learn from the other?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/what-are-web-apis-c74053fa4072&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-What are Web APIs&lt;/a&gt;: What exactly are Web APIs? Why are Web APIs so popular and widely used? Let’s first explore what APIs are so you can understand how they evolved into Web APIs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;openapi&#34;&gt;OpenAPI&lt;/h1&gt;
&lt;h1 id=&#34;opensource&#34;&gt;OpenSource&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/EXXETA/openapi-cop&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;openapi-cop 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A proxy that validates responses and requests against an OpenAPI document.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;mock-server&#34;&gt;Mock Server&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mockjs.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mock.js&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/typicode/json-server&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSON Server 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/YMFE/yapi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YApi 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: YApi 是一个可本地部署的、打通前后端及 QA 的、可视化的接口管理平台。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-automation--generation&#34;&gt;API Automation &amp;amp; Generation&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dbohdan/automatic-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;automatic-api 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The following is a list of tools that automatically expose a REST, GraphQL, or another kind of API for your database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prest/prest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pREST 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Serve a RESTful API from any PostgreSQL database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wantedly/apig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;apig 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Golang RESTful API Server Generator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/xgenecloud/xgenecloud&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;xgenecloud 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 🔥 🔥 Instantly generate REST &amp;amp; GraphQL APIs on any Database (Supports : MySQL, PostgreSQL, MsSQL, SQLite, MariaDB).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dejavuzhou/ginbro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-ginbro 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Converting a MySQL database&amp;rsquo;schema to a RESTful golang APIs app in the fastest way.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-management&#34;&gt;API Management&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://wso2.com/api-management/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WSO2 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: WSO2 API Manager is a 100% open source enterprise-class solution that supports API publishing, lifecycle management, application development, access control, rate limiting and analytics in one cleanly integrated system.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sx1989827/DOClever&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DOClever 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: DOClever 是一个商业化开源产品，完全免费。无论你是前端工程师，还是后端工程师，接口永远都是两者交互的桥梁，所以 DOClever 专为中小型团队量身打造，旨在解决接口的管理，测试与数据生成，实现真正的一体化解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;api-request-builder&#34;&gt;API Request Builder&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/liyasthomas/postwoman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-PostWoman 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 👽 API request builder - A free, fast, and beautiful alternative to Postman.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fullstorydev/grpcui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-grpcui 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: An interactive web UI for gRPC, along the lines of postman.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>RESTful-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/api/restful-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/api/restful-list/</guid>
      <description>&lt;h1 id=&#34;restful-api-list&#34;&gt;RESTful API List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://o6v08w541.bkt.clouddn.com/REST-article.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2000-Architectural Styles and the Design of Network-based Software Architectures&lt;/a&gt;：&lt;a href=&#34;http://o6v08w541.bkt.clouddn.com/REST-article.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;论文中文译版 : 架构风格与基于网络的软件架构设计&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rest-api-design-resource-modeling&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/rest-api-documentation-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rest-api-documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s?__biz=MzA3NDM0ODQwMw==&amp;amp;mid=208060670&amp;amp;idx=1&amp;amp;sn=ce67b8896985e8448137052b338093e0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;编写符合规范的 REST 接口&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://martinfowler.com/articles/consumerDrivenContracts.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Consumer-Driven Contracts: A Service Evolution Pattern&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://marcelo-cure.blogspot.jp/2016/09/rest-anti-patterns.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rest-anti-patterns&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://colobu.com/2015/08/10/some-REST-best-practices/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一些 Rest 最佳实践&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;best-practices-for-a-pragmatic-restful-api&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.jimmylv.info/2015-11-11-what-is-really-rest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;什么才是真正的 RESTful 架构&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.cnblogs.com/weidagang2046/archive/2011/06/04/2063696.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解 HTTP 协议的幂等性&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://insights.thoughtworkers.org/security-issues-in-restful/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RESTful 架构风格下的 4 大常见安全问题&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/24592119&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;【spring 指南系列】如何更好的设计 RESTful API&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/apis/design/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google API Design Guide&lt;/a&gt;: This is a general design guide for networked APIs. It has been used inside Google since 2014 and is the guide we follow when designing Cloud APIs and other Google APIs. It is shared here to inform outside developers and to make it easier for us all to work together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9#.k60nd5hje&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RESTful API Designing guidelines — The best practices&lt;/a&gt; : The API is like an artist performing on stage, and its users are the audience&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://restful.io/rest-api-back-to-basics-c64f282d972&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-REST API — Back to Basics&lt;/a&gt;: In this post, I will try to address these issues by going back to the thesis of Roy Fielding’s dissertation Architectural Styles and the Designs of Network Based Architectures&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://scarletsky.github.io/2016/11/30/error-handling-in-restful-api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Restful API 中的错误处理&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.thoughtworks.com/insights/blog/rest-api-design-resource-modeling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rest-api-design-resource-modeling&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dzone.com/articles/rest-api-documentation-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rest-api-documentation&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;drawback&#34;&gt;Drawback&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UsU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;REST is the new SOAP&lt;/a&gt;: REST promised simplicity and delivered complexity. REST promised robustness and delivered fragility. REST promised interoperability and delivered heterogeneity. REST is the new SOAP. &lt;a href=&#34;https://parg.co/Us9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Response to REST is the new SOAP&lt;/a&gt; think the entire article is full of common misunderstandings about REST and HTTP.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
