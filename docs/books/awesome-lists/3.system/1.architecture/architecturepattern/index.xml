<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ArchitecturePattern | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/index.xml" rel="self" type="application/rss+xml" />
    <description>ArchitecturePattern</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>ArchitecturePattern</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/</link>
    </image>
    
    <item>
      <title>CleanArchitecture-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/cleanarchitecture-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/cleanarchitecture-list/</guid>
      <description>&lt;h1 id=&#34;clean-architecture&#34;&gt;Clean Architecture&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jasontaylordev/CleanArchitecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-Clean Architecture Solution Template 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Clean Architecture Solution Template for Angular 10 and .NET 5&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cola&#34;&gt;COLA&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/COLA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;COLA 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: COLA 是 Clean Object-Oriented and Layered Architecture 的缩写，代表“整洁面向对象分层架构”，也叫“可乐”架构。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/285590&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-企业应用架构实践（复杂性应对之道）&lt;/a&gt;: 形成了我们自己现在的基于扩展点+元数据+CQRS+DDD 的应用架构。该架构的特点是可扩展性好，很好的贯彻了 OO 思想，有一套完整的规范标准，并采用了 CQRS 和领域建模技术，在很大程度上可以降低应用的复杂度。本文主要阐述了我们的思考过程和架构实现，希望能对在路上的你有所帮助。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CQRS-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/cqrs-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/cqrs-list/</guid>
      <description>&lt;h1 id=&#34;architectural-pattern-list&#34;&gt;Architectural Pattern List&lt;/h1&gt;
&lt;h1 id=&#34;cqrs&#34;&gt;CQRS&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/netfocus/p/4055346.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2014-CQRS 架构简介&lt;/a&gt;: 要想高性能，需要尽量：避开网络开销（IO），避开海量数据，避开资源争夺。对于这 3 点，我觉得很有道理。所以也想谈一下，CQRS 架构下是如何实现高性能的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ikem/event-sourcing-and-cqrs-a-look-at-kafka-e0c1b90d17d8#.bqrq7j3fa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Building Scalable Applications Using Event Sourcing and CQRS&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/kxinyu/article/details/78140970&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-分享一个 CQRS/ES 架构中基于写文件的 EventStore 的设计思路&lt;/a&gt;: EventStore 是在 Event Sourcing（下面简称 ES）模式中，用于存储事件用的。从 DDD 的角度来说，每个聚合根在自己的状态发生变化时都会产生一个或多个领域事件，我们需要把这些事件持久化起来。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/luontola/cqrs-hotel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-cqrs-hotel 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Example application about CQRS and Event Sourcing #NoFrameworks&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/andreschaffer/event-sourcing-cqrs-examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-event-sourcing-cqrs-examples 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Event Sourcing and CQRS in practice.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DDD-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/ddd-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/ddd-list/</guid>
      <description>&lt;h1 id=&#34;domain-driven-development--领域驱动开发&#34;&gt;Domain Driven Development | 领域驱动开发&lt;/h1&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/NMtbP8X2AB0dbW3RzWrdhg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;阿里盒马领域驱动设计实践&lt;/a&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://yq.aliyun.com/articles/582084&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-复杂性应对之道，领域建模&lt;/a&gt;: 软件的世界里没有银弹，是用事务脚本还是领域模型没有对错之分，关键看是否合适。就像自营和平台哪个模式更好？答案是都很好，所以亚马逊可以有三方入住，阿里也可以有自建仓嘛。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/orOF1EKYoc4Z_0pmGOYNVg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-基于 DDD 的微服务设计和开发实战&lt;/a&gt;: 本文是基于 DDD 的微服务设计和开发实战篇，通过借鉴领域驱动设计思想，指导微服务项目团队进行设计和开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ddd-crew/ddd-starter-modelling-process&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Domain Driven Design Starter Modelling Process&lt;/a&gt;: If you&amp;rsquo;re new to DDD and not sure where to start, this process will guide you step-by-step.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://betterprogramming.pub/why-domain-driven-design-203099adf32a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Why Domain-Driven Design?&lt;/a&gt;: The goal of this blog is to highlight the type of problems that DDD addresses and give a high-level introduction to the solution.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;collection&#34;&gt;Collection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/ddd-by-examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ddd-by-examples 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A comprehensive Domain-Driven Design example with problem space strategic analysis and various tactical patterns.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;series&#34;&gt;Series&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.yuque.com/zhangxinyu/werifa/ghrs6k&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-欧创新-领域模型编程系列笔记 #Series#&lt;/a&gt;: 业务对象模型（也叫领域模型 domain model）是描述业务用例实现的对象模型。它是对业务角色和业务实体之间应该如何联系和协作以执行业务的一种抽象。它专注在业务领域的逻辑抽象，而不是技术实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;h2 id=&#34;showcase&#34;&gt;Showcase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hgraca/explicit-architecture-php&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-explicit-architecture-php 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This repository is a demo of Explicit Architecture, using the Symfony Demo Application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.vlingo.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Vlingo 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The vlingo/PLATFORM was designed for building fluent domain models inside applications and services using a DDD mindset.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://contextmapper.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-ContextMapper 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: ContextMapper is an open source project providing a Domain-specific Language and Tools for Strategic Domain-driven Design (DDD), Context Mapping, Bounded Context Modeling, and Service Decomposition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/funkygao/cp-ddd-framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cp-ddd-framework 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A lightweight development framework for complex business architecture！轻量级业务中台开发框架！&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Sairyss/domain-driven-hexagon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Domain Driven Hexagon 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Guide on Domain-Driven Design, Hexagonal architecture, best practices etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>EDA-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/eda-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/3.system/1.architecture/architecturepattern/eda-list/</guid>
      <description>&lt;h1 id=&#34;eda-list&#34;&gt;EDA List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UMx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Events As First-Class Citizens&lt;/a&gt;: In this post, I’ll discuss the lifecycle of a “fix” at Stitch Fix and how we use events to model it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cloudevents/spec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-CloudEvents 
















  &lt;img src=&#34;https://ng-tech.icu/assets/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: CloudEvents is a specification for describing event data in common formats to provide interoperability across services, platforms and systems.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
