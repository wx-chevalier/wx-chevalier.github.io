<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CodeStyle | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/index.xml" rel="self" type="application/rss+xml"/><description>CodeStyle</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>CodeStyle</title><link>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/</link></image><item><title>CleanCode-List</title><link>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/cleancode-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/cleancode-list/</guid><description>&lt;h1 id="clean-code-list">Clean Code List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://smalldata.tech/blog/2018/09/16/clean-code-notes" target="_blank" rel="noopener">CLEAN CODE - NOTES&lt;/a>: The following is a list of notes taken on writing clean code, i.e. code that is maintainable and extensible.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://tech.meituan.com/clean-code.html" target="_blank" rel="noopener">美团点评技术团队 - 聊聊 clean code&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/software-complexity-naming-6e02e7e6c8cb" target="_blank" rel="noopener">Software Complexity: The Art of Naming&lt;/a>: There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.techug.com/anti-if-the-missing-patterns" target="_blank" rel="noopener">编程时避免使用 if 语句的五种模式&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/you-might-not-need-if-statements-a-better-approach-to-branching-logic-59b4f877697f#.pnmxdconp" target="_blank" rel="noopener">You might not need if statements: a better approach to branching logic&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24543157" target="_blank" rel="noopener">如何跟老代码友好相处&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.planetgeek.ch/wp-content/uploads/2014/11/Clean-Code-V2.4.pdf" target="_blank" rel="noopener">Clean Code CheatSheet&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>CodeReview-List</title><link>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/codereview-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/codereview-list/</guid><description>&lt;h1 id="code-review-list">Code Review List&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.zhihu.com/question/41089988/answer/135943884" target="_blank" rel="noopener">大家的公司的 code review 都是怎么做的？遇到过什么问题么？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.lucidchart.com/techblog/2017/02/08/cracking-the-code-review-part-1-preparing-your-code-review/" target="_blank" rel="noopener">CRACKING THE CODE REVIEW, PART 1: PREPARING YOUR CODE REVIEW&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://sback.it/publications/icse2018seip.pdf" target="_blank" rel="noopener">2018-Modern Code Review: A Case Study at Google&lt;/a>: In this paper, we make an exploratory investigation of modern code review at Google.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/softwaremill/codebrag" target="_blank" rel="noopener">Codebrag
&lt;img src="https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Your daily code review tool. Codebrag is a simple code review tool that makes the process work for your team. NOW OPEN-SOURCE AND FREE!&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Mgr" target="_blank" rel="noopener">2016-整天说 Code Review 重要，你知道应该关注哪些关键点吗？&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/24562689" target="_blank" rel="noopener">7 个 code review 的技巧&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/google/eng-practices/blob/master/review/index.md" target="_blank" rel="noopener">Google Code Review Developer Guide&lt;/a>: At Google we use code review to maintain the quality of our code and products. This documentation is the canonical description of Google&amp;rsquo;s code review processes and policies.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>CodeStyle-OpenSource-List</title><link>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/codestyle-opensource-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/codestyle-opensource-list/</guid><description>&lt;h1 id="refactor-opensource-list">Refactor OpenSource List&lt;/h1>
&lt;p>用于重构的一系列工具的集合。&lt;/p>
&lt;h1 id="code-analysis">Code Analysis&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/phodal/coca" target="_blank" rel="noopener">Coca
&lt;img src="https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: Coca is a toolbox which is design for legacy system refactoring and analysis, includes call graph, concept analysis, api tree, design patterns suggest. Coca 是一个用于系统重构、系统迁移和系统分析的瑞士军刀。它可以分析代码中的 badsmell，行数统计，分析调用与依赖，进行 Git 分析，以及自动化重构等。&lt;/li>
&lt;/ul>
&lt;h1 id="codemod">Codemod&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/facebook/jscodeshift" target="_blank" rel="noopener">jscodeshift
&lt;img src="https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: jscodeshift is a toolkit for running codemods over multiple JavaScript or TypeScript files.&lt;/li>
&lt;/ul></description></item><item><title>Refactor-List</title><link>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/refactor-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/refactor-list/</guid><description>&lt;h1 id="code-style--refactor">Code Style &amp;amp; Refactor&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Kristories/awesome-guidelines" target="_blank" rel="noopener">2017-Awesome Guidelines&lt;/a>: A curated list of high quality coding style conventions and standards.&lt;/li>
&lt;/ul>
&lt;h1 id="tech-debt--技术负债">Tech Debt | 技术负债&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://6me.us/vrhF9" target="_blank" rel="noopener">2015-务实的技术债务管理&lt;/a>: 技术债务是由 Ward Cunningham 在 1992 年的报告中创造的一个比喻，被定义为当我们有意或无意地做了错误的或不理想的技术决策所累积的债务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.zcfy.cc/article/we-need-to-talk-about-technical-debt-9670-24-ways-2097.html" target="_blank" rel="noopener">浅议技术债&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.com/code-dependencies-are-the-devil-35ed28b556d?source=reading_list---------1-2" target="_blank" rel="noopener">code-dependencies-are-the-devil&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>SecurityGuide-List</title><link>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/securityguide-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/3.system/architecture/codestyle/securityguide-list/</guid><description>&lt;h1 id="code-security-guide-list">Code Security Guide List&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/Tencent/secguide" target="_blank" rel="noopener">2021-代码安全指南 #Series#&lt;/a>: 面向开发人员梳理的代码安全指南，旨在梳理 API 层面的风险点并提供详实可行的安全编码方案。&lt;/li>
&lt;/ul></description></item></channel></rss>