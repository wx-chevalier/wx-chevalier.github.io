<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Compiler | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/1.language/theory/compiler/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/1.language/theory/compiler/index.xml" rel="self" type="application/rss+xml"/><description>Compiler</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Compiler</title><link>https://ng-tech.icu/books/awesome-lists/1.language/theory/compiler/</link></image><item><title>Compiler-List</title><link>https://ng-tech.icu/books/awesome-lists/1.language/theory/compiler/compiler-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.language/theory/compiler/compiler-list/</guid><description>&lt;h1 id="compiler-list--编译原理资料索引">Compiler List | 编译原理资料索引&lt;/h1>
&lt;p>There are massive curated links to help you study anything about Compiler head first, with tutorials, practices, opensource, courses, books, etc. You can search more links/books in &lt;a href="https://https:wx-chevalier.github.io/home/#/search?query=React" target="_blank" rel="noopener">xCompass&lt;/a>.&lt;/p>
&lt;h1 id="overview">Overview&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/36301857" target="_blank" rel="noopener">2018-前端要以正确的姿势学习编译原理&lt;/a>: 却发现并没有人给大家介绍前端要如何以系统并且正确地学习编译原理，所以我就结合自己的经验以及走过的弯路来给大家分享点心得和经验，希望能让大家少走点弯路。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/7BlocZ" target="_blank" rel="noopener">From math to machine: translating a function to machine code&lt;/a>: In this post I&amp;rsquo;m going to explore how a mathematical concept can be redefined in progressively more computer-oriented terms, all the way from high level languages down to machine code, ready for direct execution by a computer.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://citw.dev/tutorial/create-your-own-compiler?p=1" target="_blank" rel="noopener">2022-Create Your Own Compiler #Series#&lt;/a>: In this tutorial, we&amp;rsquo;ll be doing an instructed walkthrough of Jamie Kyle&amp;rsquo;s &amp;ldquo;The Super Tiny Compiler&amp;rdquo;. The Super Tiny Compiler is a simple compiler written in Javascript and we&amp;rsquo;ll write it step by step from scratch.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="practices--实践">Practices | 实践&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/jamiebuilds/the-super-tiny-compiler" target="_blank" rel="noopener">2015-the-super-tiny-compiler
&lt;img src="https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: This is an ultra-simplified example of all the major pieces of a modern compiler written in easy to read JavaScript.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@kosamari/how-to-be-a-compiler-make-a-compiler-with-javascript-4a8a13d473b4#.dday0a975" target="_blank" rel="noopener">how-to-be-a-compiler-make-a-compiler-with-javascript&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ibara/pl0c" target="_blank" rel="noopener">2020-pl0c&lt;/a>: PL/0 to C compiler to teach basic compiler construction from a practical, hands-on perspective.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="resource">Resource&lt;/h1>
&lt;h2 id="course">Course&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://www.cs.cornell.edu/courses/cs6120/2020fa/self-guided/" target="_blank" rel="noopener">2020-Advanced Compilers: The Self-Guided Online Course 🎥&lt;/a>: CS 6120 is a PhD-level Cornell CS course by Adrian Sampson on programming language implementation.&lt;/li>
&lt;/ul>
&lt;h1 id="parser">Parser&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/antineutrino/article/details/6763722" target="_blank" rel="noopener">前缀、中缀、后缀表达式&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.csdn.net/sunshine1314/article/details/2309655" target="_blank" rel="noopener">Big Endian 和 Little Endian&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="interpreter">Interpreter&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://www.jianshu.com/p/509505d3bd50" target="_blank" rel="noopener">怎样写一个解释器&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="jit">JIT&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.stephendiehl.com/posts/monads_machine_code.html" target="_blank" rel="noopener">2017-Monads to Machine Code&lt;/a>: Let’s build a small LLVM-like intermediate language and JIT execution engine in Haskell.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bs2" target="_blank" rel="noopener">Adventures in JIT compilation #Series#&lt;/a>: he plan is to take a simple input language and develop some interpreters and JITs for it, in roughtly increasing degree of complexity.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.pypy.org/posts/2022/07/toy-optimizer.html" target="_blank" rel="noopener">2020-Implementing a Toy Optimizer&lt;/a>: In this blog post I want to show the complete code (in Python3) of how a very simple optimizer for sequences of operations can work.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Compiler-OpenSource-List</title><link>https://ng-tech.icu/books/awesome-lists/1.language/theory/compiler/compiler-opensource-list/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/1.language/theory/compiler/compiler-opensource-list/</guid><description>&lt;h1 id="compiler-opensource-list">Compiler OpenSource List&lt;/h1>
&lt;h1 id="showcase">Showcase&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rui314/chibicc" target="_blank" rel="noopener">chibicc
&lt;img src="https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg" style="max-width: 100px;display: inline-flex;"/>&lt;/a>: chibicc is yet another small C compiler that implements most C11 features.&lt;/li>
&lt;/ul></description></item></channel></rss>