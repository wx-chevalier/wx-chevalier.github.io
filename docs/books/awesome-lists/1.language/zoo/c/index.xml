<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/index.xml" rel="self" type="application/rss+xml" />
    <description>C</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>C</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/</link>
    </image>
    
    <item>
      <title>C-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/c-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/c-list/</guid>
      <description>&lt;h1 id=&#34;c-list&#34;&gt;C List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wangdoc/clang-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-clang-tutorial #Series#&lt;/a&gt;: C 语言入门教程。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/rJVEKjxIrfiV-nSluvXZVg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-C 语言发展史的点点滴滴&lt;/a&gt;: 一直想写一篇关于 C 语言的文章，里面包含 C 语言的发展史、创始人等相关事迹。但是却迟迟未写，主要原因是因为：在我看来，这个语言太过于伟大、耀眼。作为一个仅仅使用过 C 语言的普通开发来说，完全没资格去写。但是，最近在看过一篇丹尼斯.里奇写的《C 语言发展史》之后，坚定了我写这篇文章的决心。不是歌功颂德，仅仅是以一种客观的视角去欣赏。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://brennan.io/2015/01/16/write-a-shell-in-c/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Write a Shell in C #Series#&lt;/a&gt;: University students beware! Many classes have assignments that ask you to write a shell, and some faculty are aware of this tutorial and code. If you’re a student in such a class, you shouldn’t copy (or copy then modify) this code without permission. And even then, I would advise against heavily relying on this tutorial.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.ehoneahobed.com/building-a-simple-shell-in-c-part-1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Building a simple shell in C #Series#&lt;/a&gt;: A basic shell that prints a prompt, waits for user to enter command and prints what they entered on the next line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tmewett.com/c-tips/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Everything I wish I knew when learning C&lt;/a&gt;: This page is a living collection of summaries, signposts, and advice for these broader points that made my journey with C and other compiled languages easier. I hope it’s useful to you!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CPP-Compiler-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-compiler-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-compiler-list/</guid>
      <description>&lt;h1 id=&#34;cpp-compiler-list&#34;&gt;CPP Compiler List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/Upi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Writing a C Compiler&lt;/a&gt;: This is the first post in a series on writing your own C compiler, You’ll learn about abstract syntax trees (ASTs) and how programs can represent and manipulate other programs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;make&#34;&gt;Make&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/make/manual/make.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-make&lt;/a&gt;: This file documents the GNU make utility, which determines automatically which pieces of a large program need to be recompiled, and issues the commands to recompile them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;cmake&#34;&gt;CMake&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.feabhas.com/2021/07/cmake-part-1-the-dark-arts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CMake Series 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: In our previous post Why We Need Build Systems we examined the need for Build Systems in modern software development. In this post we will examine how to use CMake to mange the build process for a cross compilation project.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CPP-ConcurrentProgramming-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-concurrentprogramming-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-concurrentprogramming-list/</guid>
      <description>&lt;h1 id=&#34;cpp-concurrent-programming-list&#34;&gt;CPP Concurrent Programming List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hanbingyan.github.io/2016/03/07/pthread_on_linux/#section&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-Pthreads 入门教程&lt;/a&gt;: Pthreads 是 IEEE（电子和电气工程师协会）委员会开发的一组线程接口，负责指定便携式操作系统接口（POSIX）. Pthreads 中的 P 表示 POSIX，实际上，Pthreads 有时候也代表 POSIX 线程.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/downdemo/Cpp-Concurrency-in-Action-2ed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Cpp-Concurrency-in-Action-2ed&lt;/a&gt;: C++11 引入了 Boost 线程库作为标准线程库，作者 Anthony Williams 为介绍其特性，于 2012 年出版了 C++ Concurrency in Action 一书，并顺应 C++17 于 2019 年 2 月出版了第二版。C++ Concurrency in Action 2ed 前五章介绍了线程支持库的基本用法，后六章从实践角度介绍了并发编程的设计思想，相比第一版多介绍了一些 C++17 特性，如 std::scoped_lock、std::shared_mutex，并多出一章（第十章）介绍 C++17 标准库并行算法，此外个人会在相应处补充 C++20 相关特性，如 std::jthread、std::counting_semaphore、std::barrier、std::latch 等。阅读本书前可参考 Andrew S. Tanenbaum 的 Modern Operating Systems，预备操作系统的基础知识（进程与线程、死锁、内存管理、文件系统、I/O 等）。此为个人笔记，仅供参考，更详细内容见原书。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CPP-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-list/</guid>
      <description>&lt;h1 id=&#34;cpp-list&#34;&gt;CPP List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b1f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-C++17/14/11&lt;/a&gt;: A cheatsheet of modern C++ language and library features.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/isocpp/CppCoreGuidelines&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CppCoreGuidelines&lt;/a&gt;: a set of tried-and-true guidelines, rules, and best practices about coding in C++.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/30996101&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ 总结笔记，供新手观看&lt;/a&gt;: 还是要有扎实的基础。以下是自己的一份总结，比较适合自己。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;h2 id=&#34;case-study&#34;&gt;Case Study&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/23185359/answer/137034841&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;以 C++ 为核心语言的高频交易系统是如何做到低延迟的？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;resource&#34;&gt;Resource&lt;/h1&gt;
&lt;h2 id=&#34;collection&#34;&gt;Collection&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ossblog.org/master-c-programming-with-open-source-books/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Master C++ Programming With Open-Source Books 🗃️&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nothings/single_file_libs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-single_file_libs&lt;/a&gt;: Single-file public-domain/open source libraries with minimal dependencies&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/0voice/cpp_new_features&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-cpp_new_features 🗃️&lt;/a&gt;: 2021 年最新整理， C++ 学习资料，含 C++ 11 / 14 / 17 / 20 / 23 新特性、入门教程、推荐书籍、优质文章、学习笔记、教学视频等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jobbole/awesome-c-cn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-awesome-c-cn 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/jobbole/awesome-c-cn&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: C 资源大全中文版，包括了：构建系统、编译器、数据库、加密、初中高的教程/指南、书籍、库等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;course&#34;&gt;Course&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/AnkerLeng/Cpp-0-1-Resource&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Cpp-0-1-Resource 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/AnkerLeng/Cpp-0-1-Resource&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: C++ 匠心之作 从 0 到 1 入门资料&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;book&#34;&gt;Book&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.oreilly.com/library/view/c-primer-fifth/9780133053043/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2012-C++ Primer, Fifth Edition 📚&lt;/a&gt;: C++ Primer, Fifth Edition, introduces the C++ standard library from the outset, drawing on its common functions and facilities to help you write useful programs without first having to master every language detail. The book’s many examples have been revised to use the new language features and demonstrate how to make the best use of them. This book is a proven tutorial for those new to C++, an authoritative discussion of core C++ concepts and techniques, and a valuable resource for experienced programmers, especially those eager to see C++11 enhancements illuminated.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/applenob/Cpp_Primer_Practice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cpp Primer 学习&lt;/a&gt;: 《C++ Primer 中文版（第 5 版）》学习仓库，包括笔记和课后练习答案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/forhappy/Cplusplus-Concurrency-In-Practice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2013-C++ 并发编程指南 📚&lt;/a&gt;: 本书《C++ 并发编程指南》是个人在空余时间写的，由于时间仓促，加上自身水平有限，不可能写的很完善，也难免出现错误，如果你发现本书中的错误，或者有更好的想法，欢迎给我反馈，我会第一时间给予答复。后续我会坚持完善这一系列的文章。也希望感兴趣的同学和我一起完成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/changkun/modern-cpp-tutorial&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2019-Modern C++ Tutorial: C++11/14/17/20 On the Fly 📚&lt;/a&gt;: The book claims &amp;ldquo;On the Fly&amp;rdquo;. Its intent is to provide a comprehensive introduction to the relevant features regarding modern C++ (before 2020s).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Light-City/CPlusPlusThings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-CPlusPlusThings 📚&lt;/a&gt;: 这是一个适合初学者从入门到进阶的仓库，解决了面试者与学习者想要深入 C++ 及如何入坑 C++ 的问题。除此之外，本仓库拓展了更加深入的源码分析，多线程并发等的知识，是一个比较全面的 C++ 学习从入门到进阶提升的仓库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dendibakh/perf-book&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-perf book 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This is a repository with source files of the book &amp;ldquo;Performance Analysis and Tuning on Modern CPU&amp;rdquo; by Denis Bakhvalov, et al.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.stroustrup.com/tour3.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-A Tour of C++ (Third edition) 📚&lt;/a&gt;: The ``tour&amp;rsquo;&amp;rsquo; is a quick (254 pages + index, historical information, etc.) tutorial overview of all of standard C++ (language and standard library) at a moderately high level for people who already know C++ or at least are experienced programmers. It covers C++20 plus a few likely features of C++23.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yuesong-feng/30dayMakeCppServer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2021-30dayMakeCppServer 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/yuesong-feng/30dayMakeCppServer&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: 30 天自制 C++服务器，包含教程和源代码.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CPP-OpenSource-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-opensource-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-opensource-list/</guid>
      <description>&lt;h1 id=&#34;c-opensource-list&#34;&gt;C++ OpenSource List&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nothings/stb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2016-stb&lt;/a&gt;: single-file public domain (or MIT licensed) libraries for C/C++&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lc-soft/LCUI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-LCUI 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A small C library for building user interfaces with C, XML and CSS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/andlabs/libui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-libui 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Simple and portable (but not inflexible) GUI library in C that uses the native GUI technologies of each platform it supports.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/parro-it/libui-node&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-libui-node 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Node bindings for libui, an awesome native UI library for Unix, OSX and Windows.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;dev&#34;&gt;Dev&lt;/h1&gt;
&lt;h2 id=&#34;test&#34;&gt;Test&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/googletest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-Google Test 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: This repository is a merger of the formerly separate GoogleTest and GoogleMock projects. These were so closely related that it makes sense to maintain and release them together.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/catchorg/Catch2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Catch2 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: A modern, C++-native, header-only, test framework for unit-tests, TDD and BDD - using C++11, C++14, C++17 and later (or C++03 on the Catch1.x branch)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;debug&#34;&gt;Debug&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dfeneyrou/palanteer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;palanteer 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: High performance visual profiler, debugger, tests enabler for C++ and Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haampie/libtree&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;libtree 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: ldd as a tree with an option to bundle dependencies into a single folder&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;library&#34;&gt;Library&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://libcello.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cello 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Cello is a library that brings higher level programming to C. By acting as a modern, powerful runtime system Cello makes many things easy that were previously impractical or awkward in C.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mkirchner/gc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gc 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Simple, zero-dependency garbage collection for C.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;common-library&#34;&gt;Common Library&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.boost.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2004-Boost 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Boost provides free peer-reviewed portable C++ source libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/abseil/abseil-cpp#quickstart&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Abseil 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/abseil/abseil-cpp&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: The repository contains the Abseil C++ library code. Abseil is an open-source collection of C++ code (compliant to C++14) designed to augment the C++ standard library.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/folly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017-Folly 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/facebook/folly&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Folly (acronymed loosely after Facebook Open Source Library) is a library of C++14 components designed with practicality and efficiency in mind. Folly contains a variety of core library components used extensively at Facebook. In particular, it&amp;rsquo;s often a dependency of Facebook&amp;rsquo;s other open source C++ efforts and place where those projects can share code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;concurrent&#34;&gt;Concurrent&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/concurrencykit/ck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ck 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Concurrency primitives, safe memory reclamation mechanisms and non-blocking (including lock-free) data structures designed to aid in the research, design and implementation of high performance concurrent systems developed in C99+.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/oneapi-src/oneTBB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-oneTBB 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt; 
















  &lt;img src=&#34;https://img.shields.io/github/stars/oneapi-src/oneTBB&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: oneTBB is a flexible C++ library that simplifies the work of adding parallelism to complex applications, even if you are not a threading expert.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;gui-framework&#34;&gt;GUI Framework&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/xelatihy/yocto-gl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2022-Yocto/GL ![code](https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg 
















  &lt;img src=&#34;https://img.shields.io/github/stars/xelatihy/yocto-gl&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Yocto/GL is a collection of small C++17 libraries for building physically-based graphics algorithms released under the MIT license. Yocto/GL is written in a deliberately data-oriented style for ease of development and use. Yocto/GL is split into small libraries to make code navigation easier. See each header file for documentation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;system&#34;&gt;System&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/e-dant/watcher&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;watcher 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: Filesystem watcher. Works anywhere. Simple, efficient and friendly.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/fmtlib/fmt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fmt 
















  &lt;img src=&#34;https://martrix-usa.oss-accelerate.aliyuncs.com/logo/code.svg&#34; style=&#34;max-width: 100px;display: inline-flex;&#34;/&gt;&lt;/a&gt;: {fmt} is an open-source formatting library providing a fast and safe alternative to C stdio and C++ iostreams.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>CPP-Syntax-List</title>
      <link>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-syntax-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/1.language/zoo/c/cpp-syntax-list/</guid>
      <description>&lt;h1 id=&#34;cpp-syntax-list&#34;&gt;CPP Syntax List&lt;/h1&gt;
&lt;h1 id=&#34;template&#34;&gt;Template&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/downdemo/Cpp-Templates-2ed&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2020-Cpp-Templates-2ed&lt;/a&gt;: C++ 模板技术是泛型编程的核心，但囿于编译器技术限制，不得不带着缺陷诞生，语法晦涩，报错冗长，难以调试，应用层开发较少使用，相关技术书籍匮乏，因此掌握难度较大。模板相关的经典技术书籍主要有三本，分别是 2001 年出版的 Modern C++ Design、2002 年出版的 C++ Templates、2004 年出版的 C++ Template Metaprogramming。三者基于的 C++ 标准都是 C++98，Modern C++ Design 涉及 Andrei Alexandrescu 写书时配套的 Loki，C++ Template Metaprogramming 涉及 Boost，二者以介绍元编程（模板技术的一种应用）为主，只有 C++ Templates 主要介绍 C++98 标准的模板技术。时过境迁，C++ 标准的更新逐步修复了一些语法缺陷，减少了使用者的心智负担，并引入了语法糖和工具，让编写模板越来越简单。2017 年 9 月 25 日，基于 C++17 标准，C++ Templates 2ed 出版，填补了十多年间模板技术进化时相关书籍的空白，堪称最全面的模板教程，也是对 C++11/14/17 特性介绍最为全面的书籍之一。个人完整学习原书后，梳理精简章节脉络，补充 C++20 相关特性，如 concepts、支持模板参数的 lambda 等，运行验证所有代码结果，最终记录至此。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
