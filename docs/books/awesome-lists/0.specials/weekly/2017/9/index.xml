<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>9 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/index.xml" rel="self" type="application/rss+xml" />
    <description>9</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>9</title>
      <link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/</link>
    </image>
    
    <item>
      <title>9.1</title>
      <link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.1/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-49951034f8b1a36b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-29-期web-现状分析与优化策略vue-单元测试headless-chrome-爬虫&#34;&gt;前端每周清单第 29 期：Web 现状分析与优化策略、Vue 单元测试、Headless Chrome 爬虫&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prettier/prettier/releases/tag/1.6.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prettier 1.6.0 发布&lt;/a&gt;：本周发布的 Prettier 1.6.0 版本引入了数个期待已久的特性，包括 .prettierrc，.prettierignore 项目配置文件、JSX 显示格式优化、允许 JSON 文件添加自定义注释等；除此之外，该版本还进一步优化了对于 JavaScript、TypeScript、CSS、GraphQL 等格式文件的支持，还提供了更多的命令行特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/Firefox/Headless_mode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firefox 引入 Headless 模式&lt;/a&gt;：类似于 Chrome 的 Headless 模式，现在 Firefox 也引入了 Headless 模式，其允许开发者利用 Firefox 进行更加方便地自动化测试、动态网页抓取等操作；本文也介绍了如何利用 Selenium 控制 Firefox 进行自动化浏览器操作等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bxC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack 4 开发计划&lt;/a&gt;：本文讨论了 Webpack 4 相关的规划与目标，在先前发布的 Webpack 3 版本中并未引入什么断层变化，但是 Webpack 4 中会引入些重大的变革。Webpack 4 的主要目标包括 WASM 支持、新的 CSS 工作流、支持 async script 标签、性能提升、继续优化 ESM、更加完善地支持类型系统等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b7b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeScript 2.5 版本发布&lt;/a&gt;：近日发布的 TypeScript 2.5 版本中引入了许多新的特性，并且能够更好地与 VSCode 协同开发。该版本中提供了函数与方法抽取重构、快速类型修复、JavaScript 文件中的 JSDoc 类型断言支持、可选的 catch 语句等特性，同时还进一步优化了性能与使用体验。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.risingstack.com/node-js-http-2-push/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Node.js 的 HTTP2 服务端推送&lt;/a&gt;：Node.js 8.4.0 版本中引入了实验性的 HTTP/2 支持，开发者可以通过 &lt;code&gt;--expose-http2&lt;/code&gt; 标识位启用 HTTP/2 支持。本文首先介绍了 HTTP/2 服务端推送中重要的知识点，然后从零开始创建简单的 Node.js 应用，来形象阐述如何使用 HTTP/2 以及其特性；更多 HTTP/2 相关资料参考&lt;a href=&#34;https://parg.co/b7r&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b7U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用官方 Vue.js 测试工具与 Jest 编写组件的单元测试&lt;/a&gt;：Vue.js 以其灵活、高性能、易上手的特性正逐步被应用到更多的 Web 项目中，本系列文章则着眼于介绍 Vue.js 应用开发中的单元测试相关内容。本系列文章依次介绍了编写首个简单的组件单元测试用例、测试递归渲染的 Vue.js 组件、测试组件的样式与结构、测试组件的状态，计算属性与方法、测试属性与自定义事件、测试生命周期回调、测试 Vue.js Slots、利用模块别名配置 Jest 等内容；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://malcoded.com/posts/angular-service-worker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 Service Worker 离线运行 Angular 应用&lt;/a&gt;：本文主要讨论如何通过 Service Worker 为 Angular 应用添加离线运行特性。本文首先介绍了 Service Worker 的概念与原理，然后介绍了 Google 提供的工具集 Workbox，以及如何使用 Workbox 创建简单的 Service Worker，最后以简单的应用说明了如何创建自定义的 Service Worker、选定缓存内容与缓存策略。更多 Angular 相关资料参考&lt;a href=&#34;https://parg.co/bT2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b7S&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;60 分钟内构建 Github 搜索栏&lt;/a&gt;：本文是来自 Appbase.io 的工程师分享的，如何快速构建漂亮大方的 Github 应用搜索界面。本文中使用 React 开发前端界面，依次阐述了如何按照组件来切割界面、如何从底向上依次构建各级所需要的组件、如何添加组件事件响应、如何通过 Github API 获取数据并且渲染到界面上等内容；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/emadehsan/thal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Puppeteer 与 Chrome Headless 的网页抓取&lt;/a&gt;：Puppeteer 是 Google Chrome 团队发布的 Chrome Headless 官方工具。而随着 Chrome Headless 的发布，包括 PhantomJS、Selenium Firefox 等在内很多的项目都宣布停止开发；Chrome Headless 正逐步成为 Web 应用自动化测试的行业领袖。而本文则是一步一步地介绍了如何利用 Chrome Headless、Puppeteer、Node 以及 Mongodb 来抓取 Github 上的相关内容；更多 Chrome Headless 相关资料参考&lt;a href=&#34;https://parg.co/btv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b70&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 中对象属性的快速访问&lt;/a&gt;：本文将会介绍 V8 引擎是如何处理 JavaScript 对象中属性的机制；虽然在使用层面上字符型键与数值型键并无差异，但是 V8 处于性能与内存的考虑会使用不同的方式来处理这两种属性。本文则会介绍 V8 提供的快速属性访问机制与动态属性的处理，理解 inline caches 的运行机制等内容；更多 V8 相关资料参考&lt;a href=&#34;https://parg.co/bzt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b7c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Webpack 的 Vue.js 应用代码分割&lt;/a&gt;：早期利用 Webpack 打包前端应用的一大缺陷在于其会产生较大的包体，而后来引入的代码分割特性则能有效地提升首屏加载速度。本文介绍了 Vue.js 应用开发中，如何利用 Webpack 与 Async components 来进行代码的动态加载；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b7E&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SparkUI：FreeWheel 的 React 开发实践&lt;/a&gt;：SparkUI 是由 FreeWheel 根据自身业务特点开发的一套完整且灵活的前端开发解决方案。该方案基于 React，由 Modula 应用状态管理框架、一系列可重用的前端组件、以及构建 SPA 所需的各类支持库组成。该方案重视可重用性、灵活性、可测试性以及开发效率，解决了前端社区常见的一些针对商业前端应用开发的痛点，如复杂状态、Side Effect，组件拆分等，更在工程实践、文档化、本身代码质量等方面达到较高标准，为前后端分离架构下的商业前端应用开发提供了坚实的基础。目前 SparkUI 已成功应用在 FreeWheel 的前端项目中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bxB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么我们从 Angular 2 迁移到了 Vue.js(以及为什么不用 React)&lt;/a&gt;：本文是来自 Rever 的工程师分享的他们在构建新版本 Web 应用时技术选型的考量。作者主要从易用性、代码运行速度、文档、社区活跃度、移动端的支持、开源协议等多个角度对比分析了 Angular.js、Vue.js 与 React 这三个主流框架。其中 Angular.js 的缺陷在于版本更迭过快、代码执行速度略慢、响应式不足等方面；React 的代码运行速度一般，其最近的证书风波也是令人迟疑，而 Vue.js 目前的主要缺陷在于其社区还不如 React 与 Angular 庞大。更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b7d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 的现状：网页性能提升指南&lt;/a&gt;：随着因特网的快速发展，至今已有约 46% 的人们可以通过设备接入到网络中；而其中的大多数又是通过移动设备来浏览网页或其他操作。本文即是对目前 Web 发展现状进行概要性描述，并且讨论了当前状态下网页应该关注的性能提升点。本文依次分析了如何优化 JavaScript、CSS 等资源文件、选择合适的图片、优化网页字体、优化 JavaScript 执行、如何正确地追踪性能指标等内容；更多 Web 性能优化相关资料参考&lt;a href=&#34;https://parg.co/b7P&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b7K&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webkit 中 JavaScript 并发编程提案&lt;/a&gt;：随着 SharedArrayBuffer 被引入，JavaScript 也正逐步转向提供并发支持；本文即是 Webkit 开发团队分享的它们对于并发 JavaScript 编程的考虑与设计。本文依次讨论了 Thread 相关的 API、JavaScript 内存模型、如何与 DOM 进行交互、如何进行并发控制以及 WebKit 的实现方案等内容；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b76&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;澄清对 AMP 的十个误解&lt;/a&gt;：AMP 是由 Google 出品的，采用了白名单强约定策略的开源 Web 组件格式和类库；因为 AMP 本身处于性能的考虑限制了网页本身的开发自由，也导致了开发者对 AMP 颇有微词。本文则是对于 AMP 的常见误解进行阐述，包括 AMP 的定位与运行环境、AMP 的适用目标、AMP 与现有网站的集成方式、AMP 与 PWA 之间的关系等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mbasso/asm-dom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asm-dom&lt;/a&gt;: asm-dom 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用。开发者可以仅使用 C++ 来编写 Web 应用，然后通过 Emscripten 来将其转化为 WebAssembly；其能允许开发者直接使用现有的 C++ 标准库代码，从而保证代码复用与性能提升。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Martz90/vivify&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vivify&lt;/a&gt;：Vivify 是轻量级的 CSS 动画库，提供了数十种常见的 CSS 动画实现，包括 ball、blink、driveInBottom、fadeIn、flip、popIn 等；开发者只需要将样式文件引入页面中即可使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://uber.github.io/react-map-gl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Map GL&lt;/a&gt;：React Map GL 是 Uber 出品的基于 React 与 Mapbox GL 的地图库，其提供了 Browserify、Webpack 2、create-react-app 多种集成尝方式；官方也给出了与 Redux 的便捷集成方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Nickersoft/push.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Push&lt;/a&gt;: Push 是 BrowserStack 出品的，快速实现基于 JavaScript 的桌面消息推送工具；Push 能够自动利用 Chrome、Safari、Firefox、IE9+ 这些现代浏览器提供的底层接口，为开发者提供跨平台的统一调用方式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mikeal/r2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;r2&lt;/a&gt;：r2 是 request 的作者基于多年的现代开发实践总结出的轻量级、高可用 HTTP 客户端；r2 基于浏览器端的 fetch 实现，使用了 node-fetch 提供了 Node.js 环境下的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/b7u&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;与 Node.js 创立者 Ryan Dahl 的对话&lt;/a&gt;：Ryan Dahl 是 Google Brain 团队的软件工程师，也是 Node.js 项目的创立者；而他目前则就职于深度学习项目，着手图片转化等相关的方向。本文则是与 Ryan Dahl 的一次访谈记录，谈论了 Ryan Dahl 的技术生涯发展、工作选择、创立 Node.js 的考量等内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>9.2</title>
      <link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.2/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-09759a0733454cb4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-30-期webvr-指南vue-代码分割范式理想的-react-架构特性&#34;&gt;前端每周清单第 30 期：WebVR 指南，Vue 代码分割范式，理想的 React 架构特性&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome 61 新特性介绍&lt;/a&gt;：Chrome 61 中即将原生地支持 JavaScript 模块，意味着开发者可以不用 Babel 等转换器即直接在浏览器中运行模块化代码。除此之外，Chrome 61 还允许开发者使用 &lt;code&gt;navigator.share&lt;/code&gt; 来触发 Android 原生的分享对话框，并且引入了 WebUSB 接口来访问受信的 USB 设备；更多特性介绍请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/274518539716230&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Yarn 1.0 发布&lt;/a&gt;：著名的 JavaScript 包管理器 Yarn 终于发布了其 1.0 版本，目前已经有超过 175000 个 Github 上的项目包含了 yarn.lock 文件，每个月有超过三十亿的下载量。在新版本中，Yarn 引入了工作空间、自动合并 lockfiles、可选择的版本解决等特性，并且进行了其他一系列的性能提升与错误修复等工作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.meteor.com/announcing-meteor-1-5-2-105b53e0debc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Meteor 15.2 发布&lt;/a&gt;：经过超 40 个 Pull Request 的请求合并之后，Meteor 发布了 1.5.2 版本；新版本中放弃了对于 MongoDB 2.4 版本的支持，修复了 Node.js 垃圾回收的 Bug，引入了一系列的新特性，详情请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://developers.baidu.com/announcement/613&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;百度与 W3C 中国联合组织移动网页加速技术研讨会&lt;/a&gt;：2017 年 8 月 30 日，百度联合 W3C 中国在北京中关村软件园国际会议中心主办了“移动网页加速技术研讨会”，W3C 中国以及腾讯、阿里巴巴及 UC、搜狗、小米、傲游、中国移动、中国电信、DCloud、听云等 W3C 中国区会员及厂商代表积极参与了本次研讨会。本次研讨会探讨了百度 MIP(Mobile Instant Pages)技术以及类似技术(如：Google AMP、Facebook Instant Article、腾讯云加速)涉及到的标准化问题，即如何让一个页面被内容分发平台即时展现渲染，从而以更快的加载速度和更友好的展现交互方式来提升用户在内容分发平台上的浏览体验。研讨会探讨了使用 Pre-fetch/Pre-render page、Async open page、CDN 服务来实现这类服务的可能性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;面向 Web 开发者的 VR 指南&lt;/a&gt;：近日来，越来越多的浏览器添加了对于 VR 特性的支持，本文即是盘点下目前浏览器中 VR 技术发展的现状，并且对可用的 WebVR 相关 API 进行简要介绍。本文首先介绍了 VR 以及 WebVR 的基础概念，列举了 WebVR 目前的浏览器以及设备的支持情况，然后分析了 WebVR 的发展趋势与潜在机会；更多 WebVR 相关资料参考&lt;a href=&#34;https://parg.co/bDi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Vue.js 与 Webpack 的三种代码分割范式&lt;/a&gt;：代码分割是提升单页应用初始加载速度的重要方式之一，其能有效提升用户体验；本文则着眼于介绍 Vue.js 应用开发中常见的三种代码分割方式，分别是按照页面切分、按照页面的可见区域折叠切分以及按条件加载。更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 Flow 与 Recompose 编写高阶组件&lt;/a&gt;：高阶组件是 React 应用开发中典型的设计模式之一，我们常常会利用 Recompose 库来实践高阶组件；另一方面，Flow 静态类型检测工具能够有效提升应用的鲁棒性，本文即是介绍如何在开发中协同使用 Flow 与 Recompose，编写具有静态类型的高阶组件。本文依次介绍了如何从 Recompose 中引入类型声明、如何为类组件添加类型声明、如何编写高阶函数等内容；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 中 async_hooks 图解&lt;/a&gt;：async_hooks 是 Node.js 8 中引入的实验性接口，其允许开发者依赖 init、before、after、destroy 四个回调函数监控异步资源的执行情况。本文则是以手绘图形象地介绍 async_hooks 的工作原理与运行机制；更多 Node.js 相关资料参考&lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何在 Chrome DevTools 中调试 JavaScript&lt;/a&gt;：Chrome DevTools 是非常强大的调试工具，本文着眼于介绍如何使用 Chrome DevTools 来添加断点并且单步执行 JavaScript 代码，从而帮助开发者更有效地定位到错误点。本文首先介绍了测试用例以及如何重现错误，然后依次阐述了添加断点、单步调试、检查当前值、修复错误并重新保存等内容；更多 Web 调试相关资料参考&lt;a href=&#34;https://parg.co/bzN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeScript 与 Webpack 的激情碰撞&lt;/a&gt;：本文是 ts-loader 的核心维护者之一，分享的多个能提升 Webpack 中 TypeScript 使用体验的插件。fork-ts-checker-webpack-plugin 能够利用子进程来进行类型校验，HappyPack 则允许并发处理多个文件从而提升 Webpack 的编译速度，thread-loader 与 cache-loader 还能进一步提升编译速度；更多 Webpack 相关资料参考&lt;a href=&#34;https://parg.co/bVs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/bVs &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bD4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理想的 React 架构应该具备的特征&lt;/a&gt;：React 本身并不是某种应用架构，它只是 MVC 架构中的视图层；本质上只是拥有内部组件生命周期的单向数据绑定的视图库。本文则是作者分享的自己实践中总结出的 React 应用架构特征：控制器与模型层不应该直接被 React 组件表示、Props 尽可能少地在深层组件间传递、尽可能地使用不可变数据以减少计算压力；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 HousingEngg 的 React Native 实践分享&lt;/a&gt;：HousingEngg 去年开始 PWA 化应用以来，极大地提升了用户体验；而在进行移动端应用开发的技术选型时，为了尽可能地完成代码复用，决定用 React Native 进行开发。本文首先介绍了开发目标与 React Native 相关技术栈选型，包括 react-navigation、redux-observable、ramda、redux-persist 等；然后介绍了 storybook、fastlane、detox、sentry 等常用的工具，最后分享了些开发过程中遇到的坑以及构建流程的搭建。更多 React Native 相关资料参考&lt;a href=&#34;https://parg.co/bV4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 requestAnimationFrame 优化动作性能&lt;/a&gt;：requestAnimationFrame 为我们提供了相对底层的接口，本文则是对于 requestAnimationFrame 的深度解析。本文首先介绍了 requestAnimationFrame 的基础用法与运行机制，然后介绍了其在 Easing 动画、SVG 绘制、定时器方面的应用；更多 Web 动画相关资料参考&lt;a href=&#34;https://parg.co/bDL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;car2go 的前端框架选择&lt;/a&gt;：本文是 car2go 的工程师分享的他们在前端框架选择时候的考量；今年组建新的前端开发团队时，需要根据团队内成员不同的经验、背景、编程倾向与技能来进行选择。技术选型主要从文档、项目的维护者的投入、StackOverflow 等常见平台的问题丰富度、工具链的完善程度、插件或者扩展的数量、Web 技术标准、上手难易程度、代码风格、API 设计、可扩展性等方面进行考虑，最终的候选者是 React 与 Vue.js；不过因为 Vue.js 更加完善的文档，最终胜出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;面向创业者与 CTO 的 React 开源协议解析&lt;/a&gt;：本文是 Facebook 前工程师，后来的创业者对于近日沸沸扬扬的 React BSD + 专利协议的个人解释，希望能够帮助更多的人理解 Facebook 设置该协议的初衷，以及对于使用者的潜在影响。本文首先介绍了 2012 年雅虎对于 Facebook 的专利诉讼及其应对方式，然后分析了该事件对于 Facebook 专利战略的启示；笔者认为 Facebook 设置该协议更多的是处于防卫考虑，避免受到恶意的专利诉讼。不过对于那些潜在的可能和 Facebook 进行直接竞争的创业公司，还是需要慎重地使用 React 等系列框架。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bD3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10 个常见的软件架构概述&lt;/a&gt;：很多人都会好奇大型商业系统的设计是如何进行的，实际上在大型软件开发启动之前，我们都会选择合适的能够提供想要的功能与高性能的特性的架构；本文则是介绍软件设计中常见的十种架构，对比了其使用场景、优势与劣势。本文依次介绍了分层模式、客户端-服务器模式、主从模式、管道过滤模式、代理模式、点到点模式、消息总线模式、黑板模式、解释器模式等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mobile Web 性能优化手册&lt;/a&gt;：无论是开发者、设计师或者市场专员，都会关心最终用户对于产品的使用体验；而在移动端愈发成为主要入口的今天，移动 Web 的性能优化也愈发重要。本手册则是图文并茂地介绍了移动 Web 优化应该考虑的点。本手册依次分析了性能优化的实际意义、性能优化的感知指标会有哪些、常见的移动 Web 优化策略以及 AMP 与 PWA 等常见的优化建议等内容；更多 Web 性能优化相关资料参考&lt;a href=&#34;https://parg.co/b7P&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nitin42/react-imgpro&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;react-imgpro&lt;/a&gt;：react-imgpro 是基于 React 的图片处理组件，该组件能够提供常见的缩放、调色等图片处理功能，并且将处理之后的图片以 base64 编码形式返回。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ApoorvSaxena/lozad.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lozad.js&lt;/a&gt;：Lozad.js 是基于 IntersectionObserver API 的轻量级、高性能、可配置的纯 JavaScript 懒加载器，其能够被用于进行图片、iframe 等多种形式的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Okazari/Rythm.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rythm.js&lt;/a&gt;：Rythm.js 是非常有趣的 JavaScript 库，它能够为你的页面添加动感地音乐效果，仿佛在摇滚中起舞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/paypal/downshift&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Downshift&lt;/a&gt;：Downshift 是 PayPal 开源的简单、灵活的 React 输入组件，提供了自动完成、下拉选择等多种丰富的功能；Downshift 提供了 Render Function as Children 的接口，从而给予了开发者极大的灵活性与自由发挥的空间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://thenewstack.io/introducing-fastify-speedy-node-js-web-framework/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fastify&lt;/a&gt;：Fastify 是新近发布轻量级的 Node.js 服务端框架，其受到了 Hapi、Restify 以及 Express 的启发，不过在性能评测上却远远优于 Hapi 或者 Express，仅次于原生的 http.Server()。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bDh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;5 年，从新手程序媛到研发总监，如何获得跨越式的成长路径？&lt;/a&gt;：本文是百度外卖技术总监张灿在二叉树 Live 上的分享，介绍了自己对于技术领域的转型中的转型动机分析、转型问题的应对，如何应对技术发展的瓶颈期，从实习生到研发总监的升级之路在历经的初级菜鸟、资深技术、技术管理等相关方面的感悟与经验总结。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>9.3</title>
      <link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.3/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-ebbc4b8e0bd93316.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-31-期-ios-11-viewport-解析preact-pwa-性能优化案例js-内存泄露分析&#34;&gt;前端每周清单第 31 期: iOS 11 Viewport 解析，Preact PWA 性能优化案例，JS 内存泄露分析&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bDz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mastodon 1.6 发布&lt;/a&gt;：Mastodon 是免费、开源的去中心化的社会网络联盟，其已经覆盖了超过 2000 个节点，拥有超过 800000 名用户。Mastodon 1.6 版本是首个完全实践 ActivityPub 协议的版本；ActivityPub 是由 W3C 提出的新的联邦式通信协议，允许多个节点之间平等通信，交换数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v8.5.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 8.5.0 发布&lt;/a&gt;：今日发布的 Node.js 8.5.0 版本中引入了一系列的新特性与错误修复，其中值得注意的是 V8 重新支持 Snapshots、引入了 console.group()、新增了 fs.copyFile 与 fs.copyFileSync 以更高效地复制文件等特性；详细的特性变更列表请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bnd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue 登陆 OpenCollective 接受捐赠&lt;/a&gt;：随着 Vue.js 社区的不断增长，越来越多的贡献者也参与到了项目的开发与维护工作中；Evan 也决定正式在 OpenCollective 上开始面向 Vue.js 的社区募捐，以更好地维护社区的日常工作。不同于面向个人的 Patreon，OpenCollective 会更加透明，欢迎积极支持 Vue.js。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apollo Client 2.0 新特性介绍&lt;/a&gt;：Apollo Client 2.0 版本在保障 API 的兼容性的同时带来了更加高效、灵活地使用体验；该版本添加了可修改的请求链、允许自定义生产环境下默认数据的存储等特性，详细地特性与接口变更可以查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Vue.js 构建电影主页&lt;/a&gt;：很多人都习惯使用 Netflix 这样的在线流服务来观看视频或者电影，而本文即循序渐进地介绍如何利用 Vue.js 2.0 来实现简单的美观大方的电影主页。本文依次介绍了相关的数据结构定义与模拟数据创建、构建基于指令的组件、路由划分、数据绑定与状态管理等内容；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.freecodecamp.org/the-ultimate-guide-to-flexbox-learning-through-examples-8c90248d4676&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;实战中学习 Flexbox&lt;/a&gt;：本文是针对 Flexbox 的实战提高，不过对于那些即使对 Flexbox 一无所知的开发者，本文也提供了一系列的学习教程。本文依次介绍了如何使用 Flexbox 构建画廊、卡片、网格、常见的网页布局、富媒体呈现、表单、移动应用布局等内容；更多 CSS/SCSS 相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.heartinternet.uk/blog/discover-the-power-of-css-transforms/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 CSS Transforms&lt;/a&gt;：通过 transform 属性，我们能够移动、渲染、缩放或者提升任何页面元素；本文即是从最基础的 transform 语法开始讲起，介绍生动的案例来让读者体验 CSS Transforms 各种不凡的用法。本文首先介绍了 translate、scale、rotate、skew 等常见的变换函数的用法，然后介绍了如何综合利用这些属性来实现复杂的动画，最后还介绍了 CSS 中 animation 的用法；更多 CSS/SCSS 相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 4 中使用 Redux 进行状态管理&lt;/a&gt;：SPA 非常适合于构建复杂的现代 Web 应用，而状态管理往往是开发中常见的痛点之一。像 Angular 这样基于组件的应用划分与开发方式能够更好地架构项目，提升代码的可复用性；而本文即是介绍如何综合使用 Angular 4 与 Redux 来开发现代应用。本文首先介绍了 Redux 中 Store、Actions、Reducers 这些基本的概念组成，然后用 Angular CLI 创建简单的 Angular 项目，并且引入 Redux；接下来本文详细地介绍了如何使用 TypeScript 编写 Redux 中的各个组件，从 Store 到 Action Types 等，最后将这些与组件结合为完整的 TodoList 应用。更多 Angular 相关资料参考&lt;a href=&#34;https://parg.co/bT2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;快速构建基于 React 的 CMS 系统&lt;/a&gt;：CMS 内容管理系统是现代常见的 Web 应用形式之一，本文则是介绍利用 Firebase 与 React 快速开发简单的 CMS 系统；Firebase 是云端的实时 NoSQL 数据库，其提供了方便的数据操作接口，免去了开发者自行搭建服务器的烦恼。本文首先介绍了 CMS 中界面组件的划分与纯组件的实现，然后介绍了 CMS 中需要的接口逻辑以及如何用 Firebase 实现这些接口；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 Treebo 的 React 与 Preact PWA 性能分析&lt;/a&gt;：本文是 Addy Osmani 大神参与编写的，印度 Treebo 公司使用的 Preact PWA 性能优化案例；相较于旧版本的网站，新版本在首屏渲染上提高了 70%，初始交互等待时间减少了 31%，大部分的访客在 3G 环境下只需要 4s 即可以浏览完整内容。本文以 React 单页应用为例，讨论了服务端渲染带来的首屏渲染的性能提升；然后讨论了基于路由的代码分割与懒加载，接下来还讨论了 PRPL 模式、HTML Streaming、关键路径 CSS、离线静态资源缓存、从 React 切换到 Preact 等内容。更多 PWA 相关资料参考&lt;a href=&#34;https://parg.co/bVh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/electron-the-bad-parts-2b710c491547&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Electron：那些令人烦恼的部分&lt;/a&gt;：绝大部分的跨平台编程语言或者框架都有其优势与缺陷，可能更多的开发者了解到的是 Electron 优秀的方面，本文则换个思路来聊聊 Electron 中那些令人烦恼的部分。本文依次讨论了应用安装、持续集成与多平台构建、应用体积、局部更新、安全性、代码混淆与保护等内容；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bB6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;小米直达服务探秘：如何保证移动 Web 体验？&lt;/a&gt;：小米直达服务是小米推出的 App 混合开发框架，它可以实现秒开，同时可以在浏览器、短信、微信等地方打开。本文即是小米直达服务 Web 体验保障方面的实践分享，讨论了目前移动 Web 体验的瓶颈、小米直达服务的机制与核心关键等内容。更多 Web 性能优化相关资料参考&lt;a href=&#34;https://parg.co/b7P&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ayogo.com/blog/ios11-viewport/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解 iOS 11 中 WebView 的 Viewport&lt;/a&gt;：iOS 11 为我们带来了新的状态栏，其刘海造型可能对于像 Apache Cordova 或者 Ionic 这样的混合式开发者造成一定的影响；特别是对于那些使用了 fixed 来布局顶部栏的 Web 应用，本文即是对于 iOS 11 自带的 WebView 的 Viewport 属性进行详细解析。本文首先讨论了 iOS 11，包括 iPhone X 带来的改变，然后介绍了如何利用 constant 或者 calc 函数来优化顶部栏的显示效果。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/shovanch/fullstack-webdev-path&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;全栈 Web 学习路径&lt;/a&gt;：本文是针对全栈 JavaScript 开发学习与进阶的指南，涵盖了从基础语法到 React、Node.js 等多方面的学习路径与资料推荐。本文涵盖了课程、项目、书籍等多种资源形式，介绍了语法基础、React 应用开发、Node.js 服务端应用程序开发等多个领域的内容；更多 Web 开发相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://javascript.info/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 指南&lt;/a&gt;：本书覆盖了从语法基础到 OOP 等复杂概念的各方面的 JavaScript 相关的知识教程，包括了简介、语法基础、代码质量保障、Object、数据类型、函数与函数式编程、类与集成、异常处理、浏览器对象等多方面的内容；更多 JavaScript 相关参考&lt;a href=&#34;https://parg.co/b2O&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bnw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 工作原理：内存管理与常见内存泄露分析&lt;/a&gt;：本系列文章皆着眼于深度解析 JavaScript 内部运行原理，而本文则重点讨论编程语言中常见的内存管理问题；并且还提出了对于处理常见的内存泄露的建议。本文首先介绍了变量内存的生命周期、内存的定义、如何分配内存、垃圾回收的机制、内存泄露的定义以及常见的四种内存泄露的形式与应对手段；更多 V8 相关资料参考&lt;a href=&#34;https://parg.co/bzt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;对于 CSS-in-JS 的缺陷分析&lt;/a&gt;：本文作者从自己的角度阐述了对于 CSS-in-JS 的看法，将其形容为：就像用坏掉的螺丝刀替换你最爱的工具；阅读的时候也可以看下评论区的回复，辨证地来看待作者的观点。随着 React 等现代 Web 框架的兴起，CSS-in-JS 也受到了很多的关注，人们期望用它来解决传统 CSS 中全局作用域、代码难以管理的问题。不过本文作者确认为 CSS-in-JS 本身就是反模式，他从代码的组织结构、耦合方式，CSS-in-JS 带来的界面一致性地破坏、代码可复用性地降低等角度来阐述自己的观点，最后提出了还是应该使用 OOCSS 这样标准的 CSS 工程实践来解决 CSS 自身的问题。更多 CSS/SCSS 相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mplewis/src2png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;src2png&lt;/a&gt;：src2png 能够将源代码转化为语法高亮、 阅读性高的图片；其会首先启动包含热加载、Webpack、Babel 等多重特性的 POI 开发服务器，然后加载 Puppeteer 并在 Headless Chrome 中将代码渲染截图。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/salomonelli/best-resume-ever&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;best-resume-ever&lt;/a&gt;：best-resume-ever 是基于 Vue.js 开发的，简单、易用、美观的个人简历制作模板，其使用 LESS 来定义样式，并且允许导出为 pdf 等格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/raymestalez/nulis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nulis&lt;/a&gt;：Nuils 是受到 Gingko 启发，非常有意思的开源树状结构编辑器，其允许开发者将任何的想法表示为树状结构：从最抽象的想法开始，逐步添加包含更多细节的嵌套描述卡片。这种格式会非常有助于编写故事、文章、大纲、GTD 等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hiproxy/hiproxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;hiproxy&lt;/a&gt;: hiproxy 是一个基于 Node.js 开发的轻量级网络代理工具，主要目的是为了解决多个开发者在开发过程中遇到的 hosts 管理和反向代理的问题。使得在开发时，不再需要修改系统 hosts 和启动一个 Nginx 服务。hiproxy 扩展了 hosts 的语法，支持端口号。此外，hiproxy 还支持通过类似于 nginx 配置文件的语法来配置代理。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/HEi84WKsjHziybuRJymc-Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从新手村到史诗英雄，程序员的打怪升级之路&lt;/a&gt;：本文是 EGO 会员，饿了么北京研发中心总经理史海峰对于程序员成长之路的分享总结。文字依次讨论了大厂职级职等背后的神秘规律、新手村后的快速成长、如何看待跳槽，面试、专职怎么选等内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 e &lt;a href=&#34;mailto:ditors@cn.infoq.com&#34;&gt;ditors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”；或者可以阅读&lt;a href=&#34;https://parg.co/bh1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;往期文章&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>9.4</title>
      <link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.4/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-39f17e139d688f8c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-32-期react-开源协议更新js-完整编年史vue-组件通信&#34;&gt;前端每周清单第 32 期：React 开源协议更新、JS 完整编年史、Vue 组件通信&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/300798627056246&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facebook 宣布重置 React，Jest，Flow 与 Immutable.js 的开源证书&lt;/a&gt;：自宣布保留 React 等开源项目附带专利要求的开源协议之后，社区反馈了极大的不满与怀疑，包括 WordPress 在内的许多开源项目也宣布即将切换技术栈；鉴于此，Facebook 宣布将在下周统一地重置 React，Jest，Flow，Immutable.js 为 MIT 开源协议。亡羊补牢，为时未晚，希望 React 整个社区能够继续蓬勃发展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://coffeescript.org/announcing-coffeescript-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoffeeScript 2 发布&lt;/a&gt;：新版本的 CoffeeScript 能够直接编译为现代 JavaScript 语法，从而弥合了与 JavaScript 之间的隔阂；新版本中会将 &lt;code&gt;=&amp;gt;&lt;/code&gt; 输出为 &lt;code&gt;=&amp;gt;&lt;/code&gt;，将 &lt;code&gt;class&lt;/code&gt; 关键字也是直接输出为 &lt;code&gt;class&lt;/code&gt;。此外，CoffeeScript 2 还添加了对于 async 函数的支持，未来同样会加入对象解耦与 JSX 等特性；而在带来许多新特性的同时，CoffeeScript 2 同样尽可能地保证了后向兼容性，以保证现有项目地平滑升级。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ma.ttias.be/chrome-force-dev-domains-https-via-preloaded-hsts/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome 将会默认为 .dev 域名预置 HSTS 以强制 HTTPS 连接&lt;/a&gt;：在 Chromium 的&lt;a href=&#34;https://chromium-review.googlesource.com/c/chromium/src/&amp;#43;/669923&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这次提交&lt;/a&gt;之后，Chrome 将会通过 HSTS 强制所有的域名启用 HTTPS。对于普通开发者而言，如果我们在本地的域名映射中设置了 .dev 结尾的域名，那么需要将其修改为 .test 等其他域名，避免在 Chrome 中无法打开。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.expo.io/expo-sdk-21-0-0-is-now-available-be33b79921b7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expo SDK 21.0.0 发布&lt;/a&gt;：近日 Expo SDK 发布了 21.0.0 版本，其基于 React Native 0.48，提供了更加丰富的功能与更优秀的性能表现；新版本中优化了 AppLoading 的使用与容错机制，引入了新的 Splash 使用方式，提升了地理位置编码、Camera、SecureStore 等接口的性能与使用。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bw0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从零构建 Angular 项目&lt;/a&gt;：本文旨在不使用 Angular CLI 等辅助工具，从零开始构建全特性的 Angular 项目；初学者经过这样的过程能够了解到完整的 Angular 应用组成，包括如何引入需要的 Angular 发布包，搭建 TypeScript，配置自定义的模块加载器，启动应用的主入口模块等。更多 Angular 相关资料参考&lt;a href=&#34;https://parg.co/UH4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mbeaudru/modern-js-cheatsheet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 语法清单&lt;/a&gt;：本文涉及到了现代项目开发中常用的 JavaScript 语法使用以及示例代码的清单 ；本指南并不打算从零介绍 JavaScript，而是对于那些有一定基础知识的开发者提供便捷的工具手册。本文依次介绍了变量声明与使用、箭头函数、默认参数、对象解耦、数组使用、扩展操作符、对象属性、Promise、字符串、模块、类、异步编程等内容；更多 JavaScript 相关资料参考&lt;a href=&#34;https://parg.co/UHR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bwd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;编写无障碍网页的 CSS&lt;/a&gt;：本文是作者在多年提高网页的无障碍性方面的实践分享，侧重于如何编写合适的 CSS 以提高网页的无障碍性与可用性。本文依次介绍了从清晰的文本到高可读性文本、慎用伪元素内容、屏幕并非唯一的媒介、属性值兼容、多种内容隐藏方式等内容；更多 JavaScript 相关资料参考&lt;a href=&#34;https://parg.co/UHf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bBV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 组件通信&lt;/a&gt;：Vue.js 开发学习中常见的问题之一就是如何进行组件间通信，本系列文章则依次介绍了单组件、父子组件、跨级组件之间的通信技巧。第一篇文章着眼于单组件中的通信技巧，包括了事件中的参数传递、指令中的数据传递等内容；第二篇则介绍了父子组件间的通信，首先讨论了常见的反模式，然后介绍了 Props、Refs、Events、v-model 等数据传递的方式。更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/UH4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/PUpZTnCf3qilVWhU-bTC0A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何优雅的编写 JavaScript 代码&lt;/a&gt;：对于工程师而言，提高自身的编码能力和编写易于阅读和维护的代码，是提高开发效率和职业生涯中必做的事情；另一方面，制定良好的编码规范并落到实地，是保障产品质量的基石，每个人都应该有自己的或者团队的编码规范。本文即是作者根据自身的经验总结分享的 JavaScript 编程规范。更多 JavaScript 相关资料参考&lt;a href=&#34;https://parg.co/UHf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bwo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Webpack 的自动化关键 CSS 提取&lt;/a&gt;：Google 性能指南中重要的一条建议就是，尽可能减少会阻塞渲染的 JavaScript 与 CSS 代码；我们网页优化中重要的手段也是进行首屏加载需要的关键 CSS 代码提取。本文则着眼于介绍如何利用 Webpack 进行自动化的关键 CSS 提取，依次探讨了阻塞渲染的含义以及 Critical CSS 的定义，然后讨论了如何通过代码编程来识别 Critical CSS，最后介绍了如何将抽取这一步集成到 Webpack 的工作流中。更多 Webpack 相关资料参考&lt;a href=&#34;https://parg.co/UHN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Kwq6Eej8EMYzTcQgIKG2WQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一次前后端分离的实践&lt;/a&gt;: 前后端分离的问题，不仅仅是技术上的选型问题，还涉及到整个团队在认知、职责、流程上面重新定义的问题，这也是为什么前后端分离概念看起来简单易懂，但真正团队在落地的时候，一不小心，往往鸡飞狗跳，甚至最终放弃&amp;quot;治疗&amp;quot;。本文是作者基于自己之前的对一个团队前后端分离改造的实践经历，介绍一下如何打造一个前后端分离的技术团队。更多 Web 项目架构相关资料参考&lt;a href=&#34;https://parg.co/UHM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://closebrace.com/articles/2017-09-11/a-brief-incomplete-history-of-javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 完整编年史&lt;/a&gt;：JavaScript 在近几年取得了长足的发展，其语法特性与实践技巧都在不断地迭代更新；本文则是对于自面世以来的 JavaScript 发展历史进行了盘点 ，对于每个时代面临的问题、创新与发展以及主流的浏览器技术进行了介绍。本文将 JavaScript 的发展历史分为了解决基础 DOM 操作与用户交互的原始时代、解决跨浏览器支持度的 jQuery 时代、SPA 时代与现代这几个区间；更多 JavaScript 相关资料参考&lt;a href=&#34;https://parg.co/UHR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bwX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;类型与否：量化 JavaScript 中可检测的错误&lt;/a&gt;：在团队的技术选型时我们常常会考虑是否需要引入静态类型检测，是否应该使用 Flow 或者 TypeScript 这样的工具，是否能够有效地辅助发现问题。本文则是以问答的形式给出了作者的答案，本文首先讨论了静态类型与动态类型各自的优劣，给出了常见的 JavaScript 动态类型导致的问题示例，然后通过自身所在团队的实践分享了引入静态类型之后捕获的错误数量。 更多 JavaScript 类型系统相关资料参考&lt;a href=&#34;https://parg.co/UHR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hackernoon.com/build-your-own-react-48edb8ed350d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建简单的类 React 框架&lt;/a&gt;：本文中作者会循序渐进地介绍如何自己构建简单的类 React 框架。作者首先讨论了 React 与 Angular 各自设计思想理念的对比，然后介绍了 DOM 树的表示以及 JSX 解析函数的实现，接下来讨论了组件类的实现与 Props、State 属性的支持，最后还简述了 React Stack 与 Fiber 调和算法。更多 React 相关资料参考&lt;a href=&#34;https://parg.co/UH4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bwy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;freeCodeCamp 编程指南&lt;/a&gt;：著名的免费在线编程教学与练习网站 freeCodeCamp 近日发布了 freeCodeCamp Guide，涵盖了从编程语言基础、Web 编程、数据结构与算法、机器学习等多领域的经验知识分享。freeCodeCamp Guide 提供了便捷的搜索功能，希望能够为那些繁忙的开发者提供最快速的知识检索与问题解决服务。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hvf/franchise&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Franchise&lt;/a&gt;：提供了类似于 Notebook 操作界面的 SQL 工具，其内置集成了 js-xlsx、sql.js，支持连接 PostgreSQL、MySQL、BigQuery 等多种类型的数据库。使用者克隆项目后直接使用 yarn start 即可以启动开发服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/flutter/flutter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flutter&lt;/a&gt;: Flutter 是新一代的移动应用开发 SDK，其能够帮助开发者快速构建 iOS 与 Android 应用。Flutter 提供了热加载等开发特性，加速开发调试的效率、内置了众多 Material Design 与 Cupertino 风格的控件、允许开发者使用函数响应式框架来进行状态管理、允许调用原生接口或者集成第三方 SDK。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://uber.github.io/luma.gl/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;luma.gl&lt;/a&gt;: luma.gl 是 Uber 开源的高性能 WebGL2 组件，其能够利用 GPU 进行数据可视化呈现与计算操作。luma.gl 能够充分利用 GPU 的即时渲染、变换反馈等特性，同时能够模块化地渲染着色，相较于传统的框架性能有着极大提升。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/anvaka/ngraph.path&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ngraph.path&lt;/a&gt;：ngraph.path 是面向任意图结构的任意两点之间最快路径搜索算法与实现，与传统的贪婪算法、Dijkstra 等算法相比，ngraph.path 能够在准确率与性能之间达成较好的平衡。作者使用了面向于路径查找的专用堆优先队列，并且重构了双向搜搜算法，以提高算法的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>9.5</title>
      <link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/9/9.5/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-80f46853128c03cf.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-33-期react-16-发布与特性介绍expo-ar-教程extjs-从崛起到沉寂&#34;&gt;前端每周清单第 33 期：React 16 发布与特性介绍，Expo AR 教程，ExtJS 从崛起到沉寂&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react/blog/2017/09/26/react-v16.0.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 16 正式发布&lt;/a&gt;：本周，期待已久的 React 16 正式发布，带来了一系列新特性与性能提升的同时，也正式将开源协议修改为了 MIT。React 16 中最大变动在于核心调和算法的完全重写，引入了所谓的 Fiber 算法。除此之外，React 16.0 中还允许 render 函数直接返回数组与字符串、提供了全新的异常处理机制、引入了 Portal 从而允许组件以优雅的方式将子元素渲染到组件外 DOM 结点中、优化了服务端渲染的性能表现、支持自定义的 DOM 属性，而整个 React 包的体积也有了一定幅度的下降。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UbS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL 相关开源协议更新&lt;/a&gt;：随着 React 16.0 的正式发布，GraphQL 标准也宣布将开源协议修正为 Open Web Foundation Agreement(OWFa)v1.0，从而确保来自其他公司的开发者更好地协作完善协议。 同时 GraphQL.js 与 Relay 也更新为了 MIT 开源协议，本周还发布了 Relay 1.4.1 版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://airbnb.io/enzyme/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enzyme 3.0 发布，支持 React 16&lt;/a&gt;：Enzyme 是由 Airbnb 开源的 React 组件测试库，随着 React 16.0 版本正式发布，Enzyme 也发布了其 3.0 版本。在 3.x 版本中，Enzyme 同样彻底重写了内部实现，从而解决其自发布以来存在的久为诟病的一些问题，移除了对于 React 内部库的依赖，使得 Enzyme 更加的灵活可用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.graph.cool/introducing-graphql-playground-f1e0a018f05d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL Playground 发布&lt;/a&gt;：GraphQL 正在逐步改变 API 的设计与实现方法， 而为了更好地调试与开发 GraphQL，GraphCool 开源了 GraphQL Playground。GraphQL Playground 基于 GraphiQL 构建，其在保留 GraphIQL 的文档易读性的同时，提供了更加顺滑的文档阅读体验；除此之外，为了更好地适应团队开发，GraphQL Playground 还引入了原子化 Schema 重载与基于 GraphQL Bin 的共享功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UlM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expo AR 简明教程&lt;/a&gt;：新版本的 Expo 添加了 iOS 平台上的 Augmented Reality API 支持，从而使得开发者能够利用熟悉的 Three.js 这样的库来开发 AR 场景应用，同时还能利用 Expo 提供的地理位置信息等原生接口来获取信息。本文循序渐进地介绍了如何利用 Expo 与 Three.js 开发简单的 AR 应用，首先介绍了 WebGLRender 的用法与调试，然后讨论了如何添加基础的 AR 场景，最后还给出了完整应用的示例代码。更多 React Native 相关资料参考&lt;a href=&#34;https://parg.co/Uly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ubc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 16 中服务端渲染的新特性介绍&lt;/a&gt;：本文是对于近日发布的 React 16 版本中提供的新服务端渲染 SSR 的特性进行了阐述，包括了数组、性能、流等内容。本文首先介绍了 React 15.x 以及之前版本中的服务端渲染写法，然后介绍了 React 16 中引入的新 API 以及后向的兼容性，接下来讨论了 React 16 服务端渲染策略的变化、能够生成更为简洁的 HTML、对于流传递的支持等待；更多 React 相关教程参考&lt;a href=&#34;https://parg.co/bWg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UbD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 NPM 上发布自定义的 Vue.js 组件&lt;/a&gt;：当我们利用 Vue.js 编写了不错的组件的时候，会希望将它分享给其他开发者共同使用， 本文即是介绍如何将 Vue.js 组件打包并且发布到 NPM 中。本文主要涉及以下内容：如何在打包中避免引入其他依赖、如何使用 Webpack 构建针对浏览器与 Node 各自独立的包、如何创建浏览器插件、package.json 中的重要配置、如何发布到 NPM 等；更多 Vue.js 相关教程参考&lt;a href=&#34;https://parg.co/UIX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mozilladevelopers.github.io/playground/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mozilla CSS Grid 教程&lt;/a&gt;：本系列是由 Mozilla 出品的通俗易懂的 CSS Grid 教程，还介绍了如何使用 Firefox 最新版本的调试工具来便捷调试基于 CSS Grid 的布局。 本文首先分享了 CSS Grid 的基础术语概念，然后介绍了简单的 Grid 的构建与 Firefox DevTools 的使用，接下来详细介绍了 fr 尺寸、混合尺寸等不同的尺寸设置，最后还给出了标准的网页布局的例子。更多 CSS 相关教程参考&lt;a href=&#34;https://parg.co/Ule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UHT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;编写可读的 Selenium 与 Node.js 自动化测试用例&lt;/a&gt;：现在很多的介绍如何利用 Node.js 与 Selenium 进行自动化测试的文章都专注于如何搭建测试环境与编写基础的测试用例， 而本文则专注于分享优雅的代码片与一些最佳实践的技巧，从而提升整体测试用例的可读性与可维护性。本文主要讨论了粗暴的使用 sleep 函数的不足，并且给出了利用 Promise 以等待元素出现、等待元素可见、等待元素可交互等实践技巧；更多 Web 自动化测试相关教程参考&lt;a href=&#34;https://parg.co/Ul1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UHx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Quri 的 GraphQL 实践&lt;/a&gt;：GraphQL 秉持着 Schema First 的理念，本文则是 Quri 两年以来 GraphQL 实践的分享以及对于这个原则的理解与执行。 本文主要讨论了利用 graphql-faker 来根据 Schema 构建测试数据、如何在日常的业务开发中贯彻 Schema First 的理念等内容；更多 GraphQL 相关教程参考&lt;a href=&#34;https://parg.co/Ula&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ulf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;奇妙的 Mobx State Tree&lt;/a&gt;：本文是 MobX 的作者 Michel Weststrate 对于 Mobx State Tree 的介绍；现在已经有很多文章在讨论 MobX 与 Redux 各自的优劣以及使用场景，本文也是从对比 Redux 与 MobX 入手，首先介绍了 MobX 的不足。MobX 只是中立、抽象的函数响应式数据流工具，并非完整的应用状态管理工具；而 MST 则在保留了响应式对象的易操作性的同时，将全局状态存放在不可变的、结构化的、共享的状态树中。开发者可以使用传统的面向对象的方式，直接修改某个实例的属性，MST 会自动地在后台创建状态快照与不可变的状态树；标准的 MST 模型由 model、views、actions 等几个部分，同时支持自定义中间件。更多 MobX 相关教程参考&lt;a href=&#34;https://parg.co/UIX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://eng.lyft.com/typescript-at-lyft-64f0702346ea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeScript 在 Lyft 的应用实践&lt;/a&gt;：可能很多人在初次接触类型系统的时候，都会疑问于为什么需要引入额外的类型；但是相信不过多久，他们已经无法离开类型系统了，本文则是 Lyft 使用 TypeScript 进行静态类型检测的实践。本文依次讨论了没有静态类型系统时常见的错误与引入类型系统之后带来的生产力的提升，然后本文认真讨论了 TypeScript 与 FlowType 各自的优劣，最后介绍了 TypeScript 的学习路径与 Lyft 基于 TypeScript 开源的一些项目； 更多 TypeScript 相关教程参考&lt;a href=&#34;https://parg.co/UIX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@ModusJesus/the-rise-and-fall-of-ext-js-c9d727131991&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ExtJS：从崛起到沉寂&lt;/a&gt;：对于许多的开发者而言，ExtJS 仍是非常好的开发企业级应用的平台；而本文作者从 2006 年起到 2015 年一直活跃在 Sencha 社区中，为社区的发展贡献着自己的力量。而随着 Sencha 被 IDERA 收购，作者有感而发编写此文以盘点下 ExtJS 走过的风雨十年。本文从 2005 年开始谈起，彼时 SPA 的潮流逐渐兴起，Yahoo 发布的 YUI 框架也成为了一时之选；最初的时候 ExtJS 还是 YUI-ext，算是对于 YUI 的实验性扩充，后来随着组件库复杂度的增加，也正式独立成为了 ExtJS(Extensible JavaScript)。2010 年左右，Sencha 正式成立，吸纳了 jQTouch、Raphel JS 以及许多的开源技术，形成了 Sencha Touch 等更加完善的社区；此时 ExtJS 4.0 也带来了极大的革新，不过其性能问题也令社区出现了分化。最后的 ExtJS 6.0 则将 ExtJS 与 Sencha Touch 中优秀的部分整合起来，但是随着 React.js 的蓬勃发展，ExtJS 的社区活跃度也在不断下降，其未来也是犹未可知。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UH7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 应用的重用策略&lt;/a&gt;：随着产品线的扩充与产品复杂度的增加，我们不可避免地需要在应用中集成来自其他团队或者开发组的模块，乃至于完整的应用；本文则是介绍了三种不同的重用集成策略：利用 iframe 直接引入界面、重用整个 APP 组件、重用 UI 组件。iframe 方式最为简单直接，能够较好地进行应用隔离，在整个技术栈不同、不需要重复认证、没有数据交互的情况下是不错的选择。而 APP 组件方式则在技术栈融合、动态尺寸、少量交互的情况下使用；最后的 UI 组件方式则是最为优雅的方式，但是也需要团队统一的技术栈与编程规范。更多 Web 应用架构相关内容参考&lt;a href=&#34;https://parg.co/Ul1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yangshun/tech-interview-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;面试中所需要的技术与非技术指南&lt;/a&gt;：本文是对于程序员面试中常见的算法与前端领域的知识进行盘点，希望能帮助程序员更好地进行面试。本文依次讨论了如何准备技术面试、按照主题分类的算法技巧与最佳实践的问题、常见的前端面试问题与答案、顶级技术公司常见的面试形式、不同公司的行为性问题、面试结束时候你可以反问的优秀的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UUb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS font-display: Web 中字体渲染的未来&lt;/a&gt;：字体是 Web 开发中不可分割的重要部分，当某个 Web Font 不存在于用户设备时，浏览器 需要开始下载对应的字体包；而在下载结束之前，浏览器需要决定如何处理相关文本的显示方式，我们即需要选择合适的方式以尽可能少地影响用户阅读体验并且提高性能。本文则是详细介绍了 font-display 属性的使用方法，其在浏览器中处理的时间线划分以及不同设置与不同加载结果下浏览器的处理策略。更多 CSS 相关教程参考&lt;a href=&#34;https://parg.co/Ule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naver/billboard.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;billboard.js&lt;/a&gt;: billboard.js 是基于 D3.js V4 版本的轻量级、可复用的数据可视化组件库；billboard.js 提供了常见的线型图、饼图、点图等等图表类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dfahlander/Dexie.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dexie.js&lt;/a&gt;：Dexie.js 是对于浏览器中标准数据库 IndexedDB 的封装，其提供了类似于服务端数据库风格的接口；同时进行了健壮的异常处理，保证了可扩展性与可用性，提供了变化追踪与区间查询等功能，从而简化了关键字搜索、逻辑运算等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/cherow/cherow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cherow&lt;/a&gt;：Cherow 是基于标准 ECMAScript 语法编写的快速 ECMAScript 语法解析器；它遵照了标准的 ECMAScript 2018 语言规范，能够安全地用于生产环节中。Cherow 支持 Stage 3 提案，支持 JSX，默认跳过工作注释结点并且能够可选地追踪语法结点位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elbywan/wretch&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wretch&lt;/a&gt;: wretch 是对于 fetch 的轻量级封装，提供了直观透明的语法。wretch 主要是为了弥补 fetch 底层接口使用繁复的不足，提供了 notFound、unauthorized、error、catch 这些常用的返回值响应函数的封装。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/Ul9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;那个疯狂岁月里，苹果公司的工程师文化&lt;/a&gt;：一款划时代产品的诞生需要经历多少磨难与煎熬，需要多少人在背后默默地付出？这中间发生的一切都是最终用户难以想象的。《硅谷革命》的作者 Andy Hertzfeld 将开发初代 Mac 的故事搬到了 folklore.org 网站上，后又将它们集结成书出版，希望发生在 80 年代早期的这场影响深远的技术革命能够成为旷世传奇。作者在序言里写道：“我认为我们当年的理想并未完全实现，要实现 Macintosh 的梦想仍然有待努力，或许真正的传奇尚未降临”。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
