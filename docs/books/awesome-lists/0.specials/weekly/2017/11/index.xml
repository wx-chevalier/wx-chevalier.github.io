<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>11 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/index.xml" rel="self" type="application/rss+xml"/><description>11</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>11</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/</link></image><item><title>11.1</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.1/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-2ce7598e6987d9af.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-38-期-node-9-发布kotlin-与-reactnetflix-架构解密">前端每周清单第 38 期: Node 9 发布，Kotlin 与 React，Netflix 架构解密&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UcV" target="_blank" rel="noopener">Node.js 8 宣布进入 LTS，Node.js 9 发布&lt;/a>: 近日 Node.js 维护团队渲染 Node.js 8 正式进入 Long-Term Support 状态，这也意味着 Node.js 8 已做好了进入生产环境的准备，同时 Node.js 9 即将成为当前的发布线版本。Node.js 8 引入了 Async/Await、V8 6.1 等一系列的特性，相较于 Node.js 6 带来了将近 20% 的性能提升；而 Node.js 9.0.0 则引入了 Async Hooks，并且对于 Errors、Child Processes、fs 等多个模块进行了优化。更多关于 Node.js 8 的特性概述与 Node.js 9 的展望可以查看原文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uc1" target="_blank" rel="noopener">Angular 5 发布&lt;/a>: 本周 Angular 5.0.0 正式发布，包含了一系列的特性提升与问题修复，同时也在不断致力于将 Angular 打造地更为轻巧与高性能。新版本中 Angular CLI 会默认启用构建优化器，Angular Universal 项目引入了新的状态转化接口与 DOM 支持；而在编译器方面，Angular 5 也对于 TypeScript Transform、空格、注解等进行了提升，并且对于国际化、时区、HTTPClient、表单、路由等都进行了优化。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKE" target="_blank" rel="noopener">TypeScript 2.6 发布&lt;/a>: 本周 TypeScript 2.6 版本正式发布，该版本中允许使用 &amp;ndash;strictFunctionTypes 参数指定逆变的函数参数适配；并且为 tsc 添加了 &amp;ndash;locale 标志位以指定使用的本地语言，可以自行设定错误的提示语言。同时该版本还优化了 &amp;ndash;watch 模式的编译效率，并且允许使用 // @ts-ignore 来指定单行的错误忽略；更多特性介绍可以查看原文。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKd" target="_blank" rel="noopener">与时俱进：React 16 新特性尝鲜&lt;/a>: React 16 的发布除开源许可证和 Fiber 机制全面开启之外，还为我们提供了部分非常强大的新特性，本视频教程将通过实例带你探索这些新特性，从 Error Boundary 到 Text Only Component，再到 Portal，共 6 小节，19 分钟，每个小节实例讲解一个新特性，让你在学会新特性用法的同时熟悉新特性的最佳实践。学完本视频教程，你将能熟练把诸如 Error Boundary，Portal 等特性运用到你的实际项目中来提高开发效率和代码质量。更多 React 相关资料查看&lt;a href="https://parg.co/UHK" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKq" target="_blank" rel="noopener">基于 Node.js 搭建零依赖的 HTTP/2 静态文件服务器&lt;/a>: 目前 HTTP/2 已经在大部分的现代浏览器中得到了支持，从而使得开发者能够利用多路复用、头部压缩、服务端推送等特性；Node.js 自 8.8.1 版本后也开始支持 HTTP/2，本文即是介绍如何使用 Node.js 创建简单的 HTTP/2 静态文件服务器。鉴于浏览器端仅支持 HTTPS 信道的 HTTP/2 请求，本文首先介绍了如何使用 LetsEncrypt 来获取 HTTPS 证书或者生成自签发证书；然后展示了如何用 http2 及其回调来创建静态文件服务器。接下来讨论了如何使用 http2 库中的服务端推送的接口，以及如何在现有应用中集成使用 HTTP/2 服务器；更多 Node.js 实战教程查看&lt;a href="https://parg.co/UKQ" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/JetBrains/create-react-kotlin-app" target="_blank" rel="noopener">Kotlin 与 React&lt;/a>: 随着 Kotlin 宣布支持 Web 应用与 iOS 应用开发，其也成为了新的跨平台解决方案的选择之一；而 Create React Kotlin App 即是类似于 Create React APP 的，使用 Kotlin 来开发 React 应用的脚手架。Create React Kotlin App 目前依赖于 JDK 8(暂不支持 Java9)，提供了类似于 Create React APP 的控制命令，同时也支持在 Intellij IDEA Ultimate 直接使用内置的 JavaScript 调试器进行调试。更多 React 教程查看&lt;a href="https://parg.co/UKC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/i0natan/nodebestpractices" target="_blank" rel="noopener">Node.js 最佳实践清单&lt;/a>: 本仓库是对于 Node.js 最佳实践的清单汇总，包括了项目结构、异常处理、代码样式、测试与质量保障、部署到生产环境、安全、性能优化等方面；更多 Node.js 学习资料查看&lt;a href="https://parg.co/be0" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKS" target="_blank" rel="noopener">搜狗地图面向 SPA 和 Hybrid 的前端工程体系实践&lt;/a>: 本文为搜狗地图前端主管周俊鹏老师在 QCon 上海 2017 上的演讲总结而成，搜狗地图前身是图行天下，成立于 1999 年，是国内第一家互联网地图服务网站，2005 年被搜狐收购后改名为“搜狗地图”。所以这个刚“开始”做的地图产品比大多数人预料的还要老。搜狗地图前端团队对前端工程体系的理解是：工程体系本质上是一种服务，其服务的对象是技术团队所采用的技术以及组织架构。而架构本身也定位为一种服务，其服务的对象是具体的业务。更多 Web 工程化的讨论查看&lt;a href="https://parg.co/UKh" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKp" target="_blank" rel="noopener">Slack 桌面应用的优化：从 WebView 到 BrowserView&lt;/a>: Slack 团队使用了基于 Electron 的混合开发技术来打造他们的桌面端应用，不过很多时候因为其糟糕的性能表现而广为诟病。本文中 Slack 技术团队介绍了它们在即将发布的 3.0 版本里面针对性能问题与用户体验所做的一些优化，主要就是从标准的 WebView 迁移到 BrowserView，以类似于 Chrome 中多 Tab 的方式来优化单窗口的表现。除此之外，本文还讨论了如何跨窗口管理 Redux Store、如何处理副作用与异步 Action、如何快速地重构代码等内容；更多 Electron 学习资料查看&lt;a href="https://parg.co/UK4" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKc" target="_blank" rel="noopener">Netflix 工作机制简析：每次你点击之后发生的事&lt;/a>: Netflix 支撑着数百个国家数亿用户的数十亿播放，正是其强大的基础架构支撑着业务的正常运行，本文即是对于 Netflix 的工作机制与架构进行简要介绍。当用户点击播放按钮之后，Netflix 的数百个微服务或者独立的程序构成的 Netflix 服务就开始协同工作，检验请求内容的合规性，并且将其转化为合适的尺寸，同时还要避免其被恶意复制。接下来服务器会将其复制存放在最靠近用户的存储点，而客户端则会自动选择最合适的节点来加载数据；更多大厂架构分享查看&lt;a href="https://parg.co/UHH" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKK" target="_blank" rel="noopener">前端框架新选择——基于 MVVM 的 San&lt;/a>: 在 MVVM 早已被引入 Web 前端应用开发的今天，其实我们已经有了一些选择，有了一些应用开发的利器。它们的代表就是 Vuejs，React, angular。它们都致力于提升开发效率，希望帮开发者做更多的事，通过诸如声明式的绑定，便可通过框架完成视图层的自动化, 使得业务开发者可以有更多的精力，重新聚焦业务实现的关注点，回归应用开发的本质。百度 EFE TEAM 历时接近两年时间设计、开发 San 框架，一个实现了 MVVM 的 Web 组件化框架。在接近两年的时间里，它不断迭代，支撑了越来越多的业务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uc8" target="_blank" rel="noopener">HTTP 103&lt;/a>: 近日 HTTP Working Group 宣布新的 HTTP 状态码 103 Early Hints 进入 Version 5，本文即是关于该状态码的详细起草文件。新的状态码允许服务端提前发送某些响应头，并且可以在响应头中通过 Link 属性指明需要提前加载的文件，其能够有助于实践 Preloading 等预加载优化。浏览器端在接收到 Early Hints 之后，实际的响应头之前即可开始进行资源文件的加载；不过这样分片地发送响应头同样会存在风险，因此服务端应当在确定了客户端的身份之后再发送 Early Hints 响应头。更多 HTTP 相关资料查看&lt;a href="https://parg.co/UUN" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UKu" target="_blank" rel="noopener">JavaScript 工作原理之深入 WebSockets 与 HTTP/2&lt;/a>: 本文是该系列的第五篇文章，着眼于介绍常用的通信协议，讨论他们的属性特点并且选择最合适的构建方式与应用场景；同时本文也快速地比较了 WebSockets 与 HTTP/2 各自的优劣。本文首先介绍了 WebSocket 的请求格式与帧协议，以及 JavaScript 中常见的 WebSockets 控制回调；然后从请求头、二进制支持、多路复用、压缩等多个角度比较了 HTTP/2 与 WebSockets，并且讨论了 HTTP/2 + Server-Sent Events 的作用。更多 HTTP/2 相关资料查看&lt;a href="https://parg.co/UUN" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uck" target="_blank" rel="noopener">Bottery&lt;/a>: Bottery 是由 Kate Compton 开源的一款非常有意思的对话式原型设计平台，其提供了聊天、控制、编辑器、白板、审视器、状态监控器等界面；将聊天机器人与原型设计流有机结合起来，并且使用有限状态机状态迁移的思路来模拟我们产品设计中的原型设计思路流程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://frappe.github.io/charts/" target="_blank" rel="noopener">Frappé Charts&lt;/a>: Frappé Charts 是受 GitHub 启发创建的零配置的，简单而大方的现代图表库。Frappé Charts 提供了常见的柱状图、折线图、流线图、热点图等多种图表形式，以及灵活的数据变化监听接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/laoqiren/mlhelper" target="_blank" rel="noopener">mlhelper&lt;/a>: mlhelper 是 JavaScript 中机器学习相关的算法与工具库，其提供了常见的 kNN、决策树(ID3)、矩阵运算、向量运算、文件解析以及常见的数据模型可视化功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/franciscop/server" target="_blank" rel="noopener">Server.js&lt;/a>: Server.js 是另一个简单而强大的 Node.js 框架，它致力于帮助开发者尽可能地简化项目开发的复杂度。Server.js 默认地包含了很多 Express.js 中需要额外装载的中间件，譬如请求体与文件解析、Cookie、Session、Gzip、Redis 等；此外，Server.js 还提供了弹性易扩展的 API 设计方案与基于 WebSocket 的实时数据服务。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UK0" target="_blank" rel="noopener">大咖告诉你：这才是支持你双十一“剁手”的幕后功臣&lt;/a>: 本文是 AWS 解决方案架构师姜振勇分享的，中小型电商应该如何应对双十一这样的高并发访问场景。对于注册用户量超过 3000 万的小红书来说，要想在双十一搞定剁手党，先要在平时了解客户的喜好和需求，这就势必要对数据进行清洗、归整，适于数据分析师使用。姜振勇老师告诉你小红书这样的电商，是如何借助 AWS 快速搭建高效的大数据统计、分析系统的。除此之外，你还能够听到小米网、SK 电信等客户真实案例。当然，姜振勇老师还会介绍 AWS 的多种服务，包括大数据、网络和安全，展现 AWS 弹性、安全和高可扩展性的全方位能力。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明“前端之巅投稿”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>11.2</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.2/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-109da9de23572288.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-39-期-openai-与-grpc-gitlab-的-vue-年度总结graphql-技术栈漫游">前端每周清单第 39 期: OpenAI 与 gRPC, Gitlab 的 Vue 年度总结，GraphQL 技术栈漫游&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/facebook/react/releases/tag/v16.1.0" target="_blank" rel="noopener">React 16.1.0 发布&lt;/a>: 本周 React 16.1.0 版本发布，自该版本开始 React 不再发布到 Bower，而是采用 unpkg 来镜像存放 UMD 构建版本；那些依赖于 Bower 进行依赖管理的开发者只能选择使用老的版本。此外该版本中还修复了 UMD 构建中，异常全局变量的错误；并且为实验性的 React Call Return 模块添加了父子通信的接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://nodejs.org/en/blog/release/v9.1.0/" target="_blank" rel="noopener">Node.js 9.1.0 发布&lt;/a>: 本周 Node.js 9.1.0 版本发布，整合了一系列的提交；值得注意的变化包括 NODE_OPTIONS 环境变量开始支持 &amp;ndash;stack-trace-limit 选项，OpenSSL 更新到了 1.0.2m，对于 http 模块开始支持 103 Early Hints 状态码，并且修复了 connect 事件处理器溢出的漏洞。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6o" target="_blank" rel="noopener">OpenAPI 与 gRPC 横向比较&lt;/a>: OpenAPI(原 Swagger) 是构建网络 API 的两种不同方式，不过如果你了解过这两种技术方案，你会发现二者 也有很多的共通之处，本文即是对 OpenAPI 与 gRPC 进行了详细的阐述与对比。OpenAPI 是用于描述 REST API 的语言，其提供了规范的 API 描述格式，默认基于 HTTP 进行数据交互并且使用 JSON 格式来表示数据；这种规范性也就使得基于 Schema 的代码生成更容易实现。而 gRPC 则源自 Google，同样提供了接口描述格式，其默认使用 HTTP/2 进行数据交互，并且使用 Protocol Buffer 作为数据格式，其相较于 OpenAPI 会更为严格。更多 API 相关资料参考&lt;a href="https://parg.co/UUC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://codetheweb.blog/learn/html/" target="_blank" rel="noopener">HTML 实战系列教程&lt;/a>: 本系列作者曾写过多篇 HTML 教程，为了更好地帮助初学者掌握 HTML 相关知识，作者在将之前的知识总结为了本系列中的数篇文章。本系列教程包含了 HTML 的基础语法、HTML 文档结构、HTML 标签基础类型、链接，图片与文档路径、HTML 元素的封装、HTML 中的列表与导航等内容，如果希望有更深入的了解还可以查看文档中推荐阅读的内容；更多 Web 基础教程查看&lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6U" target="_blank" rel="noopener">Angular 5 特性概述&lt;/a>:Angular 5(代号为 Pentagonal-Donut) 近日正式发布，其不仅带来了新的功能特性，还包含了很多致力于提升 Angular 应用 体积与运行性能的内部改变；本文即是对其特性进行详细介绍。性能方面的提升包括了 Angular CLI v1.5 中默认启用优化器、Angular 编译器优化、不再需要 intl 与 Reflect Polyfill 等，功能特性方面的 提升包括了 updateOn 表单域、Router Events、Service Worker 等；更多 Angular 相关资料参考&lt;a href="https://parg.co/UdC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6Y" target="_blank" rel="noopener">渗透测试之子域名枚举详解&lt;/a>: 掌握常见的网络安全与渗透测试相关知识，也是前端开发者的 进阶要求之一；本文即是介绍渗透测试中的子域名枚举的实战技巧。所谓的子域名枚举，顾名思义，即是在给定某个域名的情况下获取到其所有的关联子域名，从而为下一步的渗透测试提供信息支撑；本文主要介绍了通过 Google 等搜索引擎、通过第三方 DNS 数据库、通过证书服务器、通过字典爆破、通过排列置换等等方式来枚举子域名。更多渗透测试相关资料参考&lt;a href="https://parg.co/U6E" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://blog.realm.io/native-performance-electron-realm/" target="_blank" rel="noopener">基于 Realm 的 Electron 高性能跨进程数据交互&lt;/a>: Realm 在 iOS、Android、React Native 等原生应用或者混合应用开发中提供了，便捷强大的数据存储解决方案，而现在 Realm 也针对 Electron 中的跨进程(主进程与渲染进程)数据交互给出了自己的方案。与 Slack 选择的 electron-redux 这种 Redux 模式的跨进程数据交互不同的是，Realm 使用了 Multi-Version Concurrency Control 架构，来保证多线程的并发控制。这种架构相较于 electron-redux 能够带来接近原生的性能表现，此外 Realm 还提供了响应式的能力，允许开发者监听某个对象并且在对象发生变化时进行响应式操作；更多 Electron 相关资料参考&lt;a href="https://parg.co/UK4" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6b" target="_blank" rel="noopener">Gitlab 使用 Vue.js 的年度总结&lt;/a>: 时光易逝，岁月如梭，不觉之间 Gitlab 已经使用了一年多的 Vue.js，其对于 Vue.js 应用开发也有了更深刻的认识，本文即是 Gitlab 对于这一年的使用感悟的分享。就像 Scala，Vue.js 并非一锤子买卖，当我们正确使用它时，它能够给予优秀地体验反馈；这一年来 Gitlab 也遇到了，并且尝试去解决了很多的问题。作者在接下来的章节中讨论了使用 VueX 进行状态管理、编写高质量的代码、如何提升应用性能等内容；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/UdC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6c" target="_blank" rel="noopener">BBC 是如何进行网页发布的&lt;/a>: 本文是 BBC 在线技术委员会的首席 架构师 Neil Craig 分享的，BBC 是如何将它们大部分的网页发布到因特网上。BBC 服务于全世界超过 230 个国家和地区，为了保证全世界用户的使用体验，BBC 在其发布流程上采用了一系列的优化策略。其对于资源的请求总量与并发请求数进行了分析，并且将下属的栏目划分到了不同的目录下以进行不同的峰值应对；对 于不同国家和地区的用户，负载均衡会将其转发到不同的 CDN 或者应用服务器中，并且对于不同类型的资源也进行了区分对待。更多 Web 工程实践相关资料参考&lt;a href="https://parg.co/UdC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6K" target="_blank" rel="noopener">阿里云 11·11：DataV 的数据可视化之道&lt;/a>: 从 2012 年起，阿里每年的双 11 大促都会推出一个大屏，以多种生动的展示方式实时地显示交易情况。实时数据大屏，它的特点是各种大：屏幕大、数据量大、展示信息量大，可以说是数据可视化的圣杯。作为双 11 数据大屏的幕后功臣，DataV 在经历数个大型项目后几乎试遍技术沉淀的所有路径：开源代码、产品化、打包解决方案、平台化……应用场景也从双 11 电商作战，扩展到智慧城市、智慧交通等诸多领域。他们一路走来的历程和思索，值得后来者借鉴参考。更多数据可视化资料参考&lt;a href="https://parg.co/U6r" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6A" target="_blank" rel="noopener">React Native 与原生应用的量化比较&lt;/a>: 现在，从事移动应用开发的程序员可能都会听过 React Native，这个由 Facebook 开源的优秀的跨平台开发解决方案；不过很多公司在进行技术选型时可能还较难在 Swift 原生开发与 React Native 做恰当的抉择。本文即是从理论到实践，多方位、立体地、量化地对 React Native 与 Swift 原生应用进行比较。作者分别使用 Swift 与 React Native 实现了一个简单的应用，包含了常见的登录、列表、地图等功能，而后又分别针对各个页面，从 CPU、GPU、内存使用等多个角度进行了量化比较。最后作者又从各方面比较了 React Native 的优势与不足；更多 React Native 相关资料参考&lt;a href="https://parg.co/U65" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6S" target="_blank" rel="noopener">GraphQL 技术栈漫游&lt;/a>: GraphQL 开源已两年有余，其相关的生态圈也呈现指数级的增长，成百上千的公司在生产环境中使用了 GraphQL；本文即是对于 GraphQL Summit 2017 中的演讲的总结。本文首先概述了 GraphQL 的特别之处，然后分析了 GraphQL 开发中缓存、追踪、模式拼接等方面地实践技巧与相关开源项目；更多 GraphQL 相关资料参考&lt;a href="https://parg.co/UdC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6H" target="_blank" rel="noopener">揭秘 V8 Web 工具性能评测&lt;/a>: JavaScript 的性能表现，一直是 V8 团队关注的核心问题之一；本文中 V8 团队讨论了它们工作中用于定位与修复性能瓶颈的，JavaScript Web 工具性能评测方法。所谓的 Web 工具性能评测套装，源自对于日常开发中常用的基于 Node.js 的工具使用场景的归纳，其着重关注 JavaScript 核心性能，忽略 Node.js 相关的 IO 或者其他额外的交互。其典型的测试用例包括了使用 es2015 的 Babel 转化器性能、对于 Lodash 等常见输入源的 Babylon 的性能、Webpack 使用的 acorn 解释器性能、基于 TypeScript-Angular 项目的 TypeScript 编辑器性能等。更多 V8 相关资料参考&lt;a href="https://parg.co/UdC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U6l" target="_blank" rel="noopener">为什么我还在使用 jQuery&lt;/a>: 现代 Web 开发中，jQuery 一直是传统开发的代名词，开发者喜欢谈论 TypeScript、ECMAScript 2015+、React、Vue.js 等等时髦的名词；作者则是在本文中讨论了为何他现在还是会继续使用着 jQuery。很多对于 jQuery 的诟病在于其增加了网站的体积，不过目前 jQuery 仅有 27KB，并且在通过 CDN 方式分发并不会增加站点压力；而 jQuery 的辅助方法还是能够帮我们提升代码的编写效率与性能。接下来作者还讨论了如何避免错误的代码、编写可扩展的 jQuery 代码、如何将 jQuery 集成到其他框架、在什么情况下要避免使用 jQuery 等内容。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/didi/cube-ui" target="_blank" rel="noopener">cube-ui&lt;/a>: cube-ui 是由滴滴开源的，基于 Vue.js 实现的精致移动端组件库，由滴滴内部组件库精简提炼而来，历经考验，并且每个组件都有充分单元测试，为后续集成提供保障。它以迅速响应、动画流畅、接近原生为目标，在交互体验方面追求极致；遵循统一的设计交互标准，高度还原设计效果；接口标准化，统一规范使用方式，开发更加简单高效，并且支持按需引入和后编译，轻量灵活；扩展性强，可以方便地基于现有组件实现二次开发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Bogdan-Lyashenko/js-code-to-svg-flowchart" target="_blank" rel="noopener">js2flowchart&lt;/a>: js2flowchart 能够将 JavaScript 代码表示为 SVG 格式的流程图，能够同时在浏览器于 Node.js 环境中执行；js2flowchart 允许我们随时根据代码的变化生成关联的逻辑流程图，从而方便展现与陈述代码逻辑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://chimee.org/" target="_blank" rel="noopener">Chimee&lt;/a>: Chimee 是组件化的 H5 播放器框架，支持 mp4、m3u8、flv 等多种格式，由奇舞团视频云前端组研发。它帮我们解决大部分的兼容性问题，能够解决包括全屏、自动播放、内联播放、直播解码等常见视频需求；通过组件化开发，能满足业务方快速迭代、灰度发布等要求，让开发者能够轻松快捷地完成视频场景的开发。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/xxhomey19/nba-go" target="_blank" rel="noopener">NBA Go&lt;/a>: NBA Go 是面向 NBA 粉丝的命令行工具，能够在命令行中查看比赛安排、比赛结果、选手信息等内容，方便程序员们随时掌握比赛信息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/U66" target="_blank" rel="noopener">谷歌大脑负责人 Jeff Dean：让机器学会学习，专用硬件很有前景&lt;/a>: 提到谷歌大脑，一定要提到它背后的“大脑”：Jeff Dean，他于 1999 年加入 Google，带领团队完成了一系列令人瞩目的工作，如支持谷歌运行的超大规模计算框架 MapReduce，以及你正在使用的 TensorFlow 等等。作为谷歌大脑的负责人，他仍在进行一系列开创性的研究工作。近日，Jeff Dean 接受了 Gigaom 的访问，谈及了这些工作和未来的主攻方向，也分享了他个人对于通用人工智能、机器学习以及人工智能应用的一些见解。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明“前端之巅投稿”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>11.3</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.3/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-eb0e0a591c165eb9.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-40-期--js-的-core-与-costnode-内存溢出调试software-20">前端每周清单第 40 期 : JS 的 Core 与 Cost，Node 内存溢出调试，Software 2.0&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID : frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEc" target="_blank" rel="noopener">Atom 发布代码协同工具 Teletype&lt;/a>: 本周，Atom 发布了远程协同工具 Teletype，其允许开发者以 P2P 的方式进行结对编程；尽管 Beta 版本尚存在很多的 Bug，还是拭目以待未来更方便的团队协同工具。同时，VS Code 也发布了所谓的 &lt;a href="https://parg.co/UEK" target="_blank" rel="noopener">Live Share&lt;/a> 规划，其同样允许开发者使用 Visual Studio 2017 或者 VS Code 来实时协同编辑代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.mozilla.org/en-US/firefox/57.0/releasenotes/" target="_blank" rel="noopener">Firefox 57.0 发布&lt;/a>: Firefox Fast Again! 本周 Firefox 57.0 版本正式发布，给用户带来了一个全新的 Firefox，畅快地使用体验。该版本中最大的变化，即是引入面向现代设备的浏览器引擎：Quantum；同时该版本还重新设计了用户界面，为用户提供清新爽朗，且触摸屏友好的界面。更多详细内容可以查看原文或者下文介绍的 Quantum 揭秘一文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEJ" target="_blank" rel="noopener">Github 发布安全告警功能&lt;/a>: 上个月 Github 引入了 Dependency Graph，允许以可视化地方式呈现 JavaScript 与 Ruby 仓库的依赖图谱。在此基础上，Github 发布了仓库的安全告警功能，在用户打开 Dependency Graph 的情况下，其能够自动地检测依赖项目是否存在安全漏洞；一旦发现了存在漏洞的依赖，其会及时地给予开发者反馈。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UE1" target="_blank" rel="noopener">Expo SDK 23.0.0 发布&lt;/a>: 本周 Expo SDK 23.0.0 正式发布，其基于 React Native 0.50；在该版本中也正式引入了 React 16.0.0，从而可使用新版本的 React 中的各项特性。该版本还尝试引入了 Release Channels 功能，允许开发者更方便地发布与更新自己的应用；并且开始支持 iOS OTA 更新的后台抓取功能。除此之外，该版本还更新了 Android 中的 JavaScriptCore、更新了 Snack 以及多个 API 的表现。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://malcoded.com/posts/angular-beginners-guide" target="_blank" rel="noopener">Angular 初学者完备指南&lt;/a>: 本文是一篇非常完备的 Angular 初学者指南，不仅循序渐进地引导开发者搭建简单的 Angular 项目，还囊括了 Angular 中诸多基础概念。本文首先介绍了 Angular 的概念与定位，包括了 SPA、Angular 框架与整个平台的构成、Angular 各个版本之间的关系等内容；接下来本文介绍了 Angular CLI 以及如何使用它搭建简单的项目，并且讨论了 Angular CLI 中常见参数的作用。然后本文在简单项目的基础上，分析了 Angular 项目的目录结构与文件含义；最后从 Angular 组件的语法开始，依次介绍了服务、模块等关键部分的语法与接口。更多 Angular 相关资料参考&lt;a href="https://parg.co/UdC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEL" target="_blank" rel="noopener">你需要了解的有关 React 的一切&lt;/a>: 很多人已熟悉或使用着 React，不过其也在不断地变化，本文便是一篇不错的入门介绍文章，也能够梳理下 React 的关键知识点。本文以构建简单的 React 音乐播放器为例，循序渐进地介绍什么是 React 组件、ReactDOM 渲染、类组件与函数式组件、JSX、State、事件处理、异步 setState、Props、Refs 等内容；更多 React 教程参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">React 与前端工程化实践&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEI" target="_blank" rel="noopener">函数式编程实践教程&lt;/a>: 本文是作者在 LinkedIn 演讲的总结，旨在解释函数式编程及其组合的思想如何能帮助开发者编写更好的代码；而不是着眼于某个语言或者执着于讨论 Monads 这些名词。作者从四十年前 Fortran 的作者 John Backus 对于函数式编程的引入谈起，讨论了组合(Composition )在计算机科学中的意义；然后分别以 Java 与 JavaScript 等常用语言为例，讨论了如何通过组合将复杂的问题分解，并且将函数式的、细节的方案有机组合为整体的解决方案。更多函数式编程相关资料参考&lt;a href="https://parg.co/UEz" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/dev-channel/the-cost-of-javascript-84009f51e99e" target="_blank" rel="noopener">JavaScript 的代价与优化&lt;/a>: 本文是 Addy Osmani 大神的又一力作，着眼于讨论如何在移动设备上快速地提升站点加载速度与用户交互地响应性能。本文依次从如何减少包体尺寸与传输数据量、优化 JavaScript 代码的解析、编译、执行，如何实践 PRPL 模式等方面进行阐述；更多性能优化相关资料参考&lt;a href="https://parg.co/Umu" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://arkwright.github.io/scaling-react-server-side-rendering.html" target="_blank" rel="noopener">扩展 React 服务端渲染的实践&lt;/a>: 作者在本文中分享了，其在近期扩展 React 服务端渲染过程中的实践经验；虽然文中很多的讨论点都是 React 相关，但是面临的通用扩展挑战，或者解决的问题都是值得重复借鉴的。本文并没有直接讨论 React 服务端优化，而是从常见的负载均衡谈起，介绍了常见负载均衡的算法与策略；然后讨论了客户端渲染的兜底方案，即当流量过大导致服务端无法及时响应的情况下，如何给用户合适的反馈。接下来本文还讨论了分级卸载、组件缓存、依赖处理、同构渲染等内容；更多 React 教程参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">React 与前端工程化实践&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEi" target="_blank" rel="noopener">Node.js 中内存溢出与内存膨胀调试&lt;/a>: 内存问题是服务端应用程序的常见痛点之一，本文作者近日就受困于内存泄露(Memory Leak )与内存膨胀(Memory Bloat )，本文即是他的调试经验分享。所谓的内存泄露是指无用的内存却未被回收释放，而内存膨胀指程序使用了过量的内存；作者介绍了使用堆快照以及 Chrome DevTools 来辅助回溯、搜集、分析与解决这些内存问题。如果想要了解 Web 应用中 JavaScript 的内存调试可以参考&lt;a href="https://parg.co/Ucw" target="_blank" rel="noopener">内存分析与内存泄漏定位&lt;/a>一文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEW" target="_blank" rel="noopener">前端测试金字塔：重新思考你的测试&lt;/a>: 本文着眼于前端测试方面，从所谓的测试金字塔结构谈起，梳理前端测试的关键内容与设计理念。作者认为所谓的前端测试金字塔自底向上为单元测试、快照测试、端到端测试，然后以简单的模态弹窗为例，介绍各个测试模块的设计要点。一般来说，单元测试用于测试代码库中的函数、类等原子对象，而快照测试则能够记录组件渲染之后的状态并且随时进行比较；端到端测试则是用于黑盒保证产品的最终体验。更多 Web 测试相关资料参考&lt;a href="https://parg.co/UET" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://dmitrysoshnikov.com/ecmascript/javascript-the-core-2nd-edition/" target="_blank" rel="noopener">JavaScript. The Core 第二版&lt;/a>: 本文是 JavaScript 核心概述的第二版，主要对于 ECMAScript 语言标准与其运行时的核心组件进行讲解。本文依次介绍了 Object、Prototype、Class、Execution Context、Environment、Closure、This、Realm、Job 以及 Agent 的概念。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEH" target="_blank" rel="noopener">WebAssembly 已被所有主流浏览器支持&lt;/a>: 在过去几周苹果的 Safari 浏览器与微软的 Edge 浏览器分别发布新版本，支持了 WebAssembly，再加上早已支持的 Firefox 和 Chrome，WebAssembly 已得到所有主流浏览器支持。在广泛的浏览器支持下，开发者试验使用 wasm 模块开发的新特性将触达绝大多数用户。如此广泛的支持得益于 asm.js 项目早期的成功，因为它是 JavaScript 的子集，因此可以运行在所有浏览器上，如 Facebook 的社交游戏 Candy Crush Saga 等就使用了它。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UEa" target="_blank" rel="noopener">Software 2.0&lt;/a>: 本文是特斯拉 AI 主管 Andrej Karpathy 发表的其对于软件未来发展的看法，见仁见智，大家也可以带着批判的态度去阅读。所谓的软件 1.0 即是程序员使用 Python、C++、Java 等编写代码，然后再编译为机器码指令或者由解释器执行，每一行代码赋予程序特定的功能。作者认为深度学习即是软件 2.0，神经网络不仅是一个分类器，更意味着编程基础开始发生变化，而开发者也可以通过神经网络权值进行编程。软件 2.0 拥有着同态计算、更易烧录、持续运行、常量存储、运算高效、十分敏捷等特性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/simonw/datasette" target="_blank" rel="noopener">Datasette&lt;/a>: Datasette 为我们提供了面向 SQLite 数据库的开箱即用的、只读的 JSON API；同时 Datasette 还提供了用于将数据库打包为 Docker 容器，并且将其部署到 Zeit Now 等云端容器的工具。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Microsoft/sqlopsstudio" target="_blank" rel="noopener">SQL Operations Studio&lt;/a>: SQL Operations Studio 是由 Microsoft 开源的数据管理工具，其支持 SQL Server，Azure SQL DB 以及 SQL DW 等多种微软旗下的数据库；SQL Operation Studio 能够和 VS Code 深度集成，运行在 Windows、macOS、Linux 等主流操作系统平台中。SQL Operations Studio 提供了 SQL Server 连接管理、对象查询、完备的 T-SQL 编辑器、多种格式数据源导出、数据备份与回滚、自定义脚本、历史任务查询等等丰富的功能特性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/moment/luxon" target="_blank" rel="noopener">Luxon&lt;/a>: Luxon 是由 Moment 出品的，用于操作 JavaScript 中时间与日期对象的工具库；Luxon 可以看做对于 Moment.js 的现代化接口包裹。Luxon 提供了 DateTime、Duration、Interval 等扩展类型，支持链式函数式风格的接口调用，能够对常见格式的时间字符串进行解析与转换，并且不需要 locale 或者 tz 文件就可以进行国际化转换。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://stackshare.io/posts/the-react-story" target="_blank" rel="noopener">React 诞生记：Facebook 并购 Instagram 与开源 React.js&lt;/a>: 毫无疑问，React 已成为最著名的且最流行的 JavaScript 界面库之一，它在 Github 上有超过 70K 的 Star，超过 1100 名贡献者与每月超过六百万的下载量，并且它已经在数千家公司的技术栈中得到了应用。不过在 React 面世之初，并未有太多的人关心它；本文是对 Stack Stories 访谈节目的记录总结，是由 React 的最初创造者之一的 Pete Hunt，来分享 React 诞生前后的故事：为什么会有 React，它是如何获得 Facebook 的关注，它又经过了怎样的流程才进入到公众的视线，等等。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明 “ 前端之巅投稿 ”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>11.4</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2017/11/11.4/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-739c0e4bf94a5d75.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-41-期--node-与-rustopencv-的火花网络安全二三事">前端每周清单第 41 期 : Node 与 Rust、OpenCV 的火花，网络安全二三事&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID : frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5t" target="_blank" rel="noopener">PWA 是否能带来新一轮大前端技术洗牌？&lt;/a>: 本文是 Brilliant Open Web 团队成员，百度资深前端工程师彭星分享的对于 PWA 与大前端技术的看法。本文回顾了 Web 在移动时代遭遇的两大枷锁：用户体验枷锁与用户留存枷锁，讨论了 PWA 成为解开枷锁钥匙的可行性，分析了其是否能真正弥补 Web 的劣势。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://snyk.io/blog/77-percent-of-sites-still-vulnerable/" target="_blank" rel="noopener">77% 的网站仍然使用有漏洞 JavaScript 库&lt;/a>: 上周 Snyk 发布了&lt;a href="https://snyk.io/stateofossecurity/" target="_blank" rel="noopener">开源社区安全现状报告&lt;/a>，发现随着开源社区的日渐活跃，开源代码中包含的安全漏洞以及影响的范围也在不断扩大。本文则是从 Web 安全的角度对于数据进行了深度分析，发现统计的超过 433000 站点中，77% 使用了至少一个包含已知漏洞的前端 JavaScript 库；更多详细的数据描述请查看原文。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5S" target="_blank" rel="noopener">基于 CSS Grid 的常见响应式布局&lt;/a>: CSS Grid 允许我们在二维坐标系上编排元素，在主流桌面浏览器逐步完善对其的支持之后，CSS Grid 也开始登陆到移动端浏览器；本文即是介绍如何利用 CSS Grid 实现常见的响应式布局。本文依次介绍了图文混排布局、整页图片画廊、卡片布局、Holy Grail 布局等等；更多 CSS Grid 相关资料查看&lt;a href="https://parg.co/Udh" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5q" target="_blank" rel="noopener">2018 年值得使用的 React 组件库&lt;/a>: 工欲善其事，必先利其器；作者根据自身的实践经验与 GitHub、Stack Overflow 等社区的活跃程度，在本文中为我们推荐了十余个值得一试的 React 组件库，以提高应用开发的效率。作者在文中讨论的组件库包括了 React Material UI、React-Bootstrap、React toolbox、React Belle、React Grommet、React Components by Khan Academy、Material Components Web、Ant Design React、Semantic UI React、Onsen UI、React Virtualized 等；更多 React 相关资料参考&lt;a href="https://parg.co/UHK" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5r" target="_blank" rel="noopener">基于 Rust 编写高效安全的 Node.js 原生模块&lt;/a>: RisingStack 一直致力于提升 Node.js 的运行效率；不过去年面临了一个窘境：已然达到 Node.js 本身的瓶颈。为了突破天花板，RisingStack 决定将关键计算模块以原生方式实现；而经过技术选型比较之后，他们决定使用 Rust，而不是 C++ 来编写原生模块。本文首先分析了 Node.js 服务端速度的瓶颈，然后展示了如何用 Rust FFI 与 Rust Neon 实现简单的 URL 分析模块，最后对比了这二者以及 Node.js 实现方案之间的性能；更多 Node.js 学习参考&lt;a href="https://parg.co/b2s" target="_blank" rel="noopener">深入浅出 Node.js 全栈架构&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://johnpapa.net/a-look-at-angular-alongside-vue-3/" target="_blank" rel="noopener">使用 Angular 与 Vue.js 实现相同的功能并比较&lt;/a>: Angular 与 Vue.js 都是优秀的 Web 组件框架，二者在某些语法风格上也有异曲同工之妙，本系列即是通过利用这两个框架编写相同的，简单而易扩展的应用，来仔细地对比二者。本系列包括了四篇博文，首先从项目文件结构的角度对比了二者；然后细致地对于学习资料、组件语法中相似的代码等内容进行了分析，最后还讨论了如何使用 TypeScript 开发 Vue.js 应用。更多 AngularJS 与 Vue.js 学习资料可以参考&lt;a href="https://parg.co/UdC" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U59" target="_blank" rel="noopener">如何显著提升 React 应用的性能&lt;/a>: 应用性能优化是老生常谈的问题，随着我们应用业务需求不断地变化，性能问题也是绵延不绝；本文是又一篇优秀的讨论 React 应用性能优化的文章。本文依次讨论了不恰当的 shouldComponentUpdate 以及对于 PureComponent 的误用反而会造成逆优化、如何快速修改 DOM 元素、如何避免过于频繁地事件触发与回调执行。更多 React 资料可以阅读 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">React 与前端工程化实践&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U55" target="_blank" rel="noopener">Helmet 与 Express 应用安全&lt;/a>: Express 是流行的 Node.js 服务端框架，本文即是介绍如何使用 Helmet 以及其他的框架来增强 Express 应用的安全性。本文详细介绍了 HTTP 响应头中的 X-DNS-Prefetch-Control、X-Frame-Options、Strict-Transport-Security、X-Download-Options、X-Content-Type-Options、X-XSS-Protection 等域的含义与作用；更多 Node.js 学习参考&lt;a href="https://parg.co/b2s" target="_blank" rel="noopener">深入浅出 Node.js 全栈架构&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5R" target="_blank" rel="noopener">或许类属性中的箭头函数并不如你所料&lt;/a>: Arrow Function 箭头函数是 ES6 的重要语法特性之一，其能优化我们代码的可读性，还能自动绑定当前的 this 对象。不过本文作者表示，当我们在类属性中使用箭头函数时，却往往会不符合直觉的判断；类属性式的箭头函数会被转换为构造函数中创建，因此并不能被子类继承，并且这种模式的性能表现也差于绑定函数模式。更多 JS 学习可以参阅《&lt;a href="https://github.com/wx-chevalier/JavaScript-Series?q=" target="_blank" rel="noopener">JavaScript-Series&lt;/a>》。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5b" target="_blank" rel="noopener">我是如何 7 分钟之内黑进 40 个网站的&lt;/a>: 本文作者详细介绍了对于某个包含漏洞的网站渗透提权的过程，是一篇不错的安全实践教程。作者依次使用了 Nmap 进行嗅探踩点，使用 gobuster 进行路径枚举，构造虚拟邮箱地址并且上传 WebShell；然后从 cgi-admin/pages 获取明文数据库密码并且成功地获取全部数据库权限。更多 Web 安全相关知识可以阅读&lt;a href="https://parg.co/UHO" target="_blank" rel="noopener">现代 Web 开发工程化实践&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U56" target="_blank" rel="noopener">Atom 中的远程代码执行&lt;/a>: 本文作者针对 Atom 1.21.1 版本中，因为 Markdown 解析漏洞导致的远程代码执行(RCE )，进行了深度分析，也是不错的了解常见的 Web 安全问题对桌面应用的影响的文章。本文首先介绍了 Atom 如何通过 CSP 来限制 XSS，然后分析了 Atom 是如何解析 Markdown 文件，如何针对这种解析机制构造 local DOM XSS Payload，以及如何执行本地任意代码并且加载执行远程代码；更多 Web 安全相关知识可以阅读&lt;a href="https://parg.co/UHO" target="_blank" rel="noopener">现代 Web 开发工程化实践&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5P" target="_blank" rel="noopener">使用 Node.js 与 OpenCV 实现人脸识别&lt;/a>: 近年来人工智能与深度学习的概念火热，相关的理论技术也在工程项目中得到了广泛的应用，每周清单之前也推荐过如何用 JavaScript 来实现机器学习算法；本文则是循序渐进地介绍如何使用 Node.js 来构建简单的人脸识别应用。本文从数据集准备开始入手，然后讨论了如何训练识别器、如何进行模型检验等内容；更多 Node.js 学习参考&lt;a href="https://parg.co/b2s" target="_blank" rel="noopener">深入浅出 Node.js 全栈架构&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/tj/node-prune" target="_blank" rel="noopener">node-prune&lt;/a>: node-prune 是简单的用来移除 ./node_modules 中不必要文件的工具，譬如 MarkDown、TypeScript 源代码文件等；从而尽可能地减少 node_modules 中文件的体积，以加快应用部署的速度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/i18next/react-i18next" target="_blank" rel="noopener">react-i18next&lt;/a>: react-i18next 是便捷易用的 React 国际化辅助库，其能帮助我们快速实现应用地国际化改造。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U5k" target="_blank" rel="noopener">bundle-buddy-webpack-plugin&lt;/a>: Bundle Buddy 是著名的能够发现多个 JavaScript Chunks/Splits 中重复冗余源代码的工具，从而方便我们选取合适的代码分割参数，来最终提升页面加载的性能。bundle-buddy-webpack-plugin 则是基于 Bundle Buddy 封装的 Webpack Plugin，方便我们集成到现有的开发流程中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/aws/aws-amplify" target="_blank" rel="noopener">aws-amplify&lt;/a>: AWS Amplify 是面向 Web 前端与移动端开发者的，用于构建云端应用的工具库；其由 AWS 开源，目前仅支持 Amazon Web Services，但是其设计的初衷是提供插件化的、能够适用于多种云端或者自定义服务端的工具。Amplify 提供了声明式的接口，能够帮助开发者迅速添加使用情况收集、权限校验等功能。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/U5M" target="_blank" rel="noopener">那个逃离北京的程序员说：我想工作到 70 岁&lt;/a>: 本文是二叉树出品的《众生相》十集人物纪录片的第三集，讲述了绰号老神仙的 Linux 内核开发者, 吴峰光博士 “ 逃离北京 ” 之旅；这个带有梦幻色彩的词是如此代价高昂，以至于对不少人而言成为一种奢侈的选择。而踏上这条 “ 逃离 ” 之路的实践者们，是否真的收获了他们想要的东西？本文并未谈及具体的技术，而是从生存、生活等等角度谈谈技术人员的道路选择。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明 “ 前端之巅投稿 ”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item></channel></rss>