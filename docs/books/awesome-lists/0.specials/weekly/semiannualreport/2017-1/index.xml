<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2017-1 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/index.xml" rel="self" type="application/rss+xml"/><description>2017-1</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>2017-1</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/</link></image><item><title>Angular</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/angular/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/angular/</guid><description>&lt;h1 id="前端每周清单半年盘点之-angular-篇">前端每周清单半年盘点之 Angular 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 Angular 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.com/how-google-builds-a-web-framework-5eeddd691dea#.i0793vc7c" target="_blank" rel="noopener">《Google 是如何构建 Web 框架的？》&lt;/a>：众所周知 Google 使用单一仓库来存放与共享代码，其中存放了超过 20 亿行的代码，并且其使用了基于 Trunk 的开发范式。对于很多其他公司的开发者而言，这一点可能非常不可思议，而本文即是以构建著名的 AngularDart 项目为例，介绍 Google 是如何构建大型开源的 Web 框架的。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=QzXdiH3wJp0" target="_blank" rel="noopener">《Learn Angular 2 with Me》&lt;/a>：本系列视频介绍 Angular 2 的环境搭建与部分工程实例。本教程介绍了 Angular CLI 的使用、Angular 模块基础、构建注册表单、动态表单，等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/PxWiA" target="_blank" rel="noopener">《结合 Firebase 构建完整 Angular 认证系统》&lt;/a>：该作者在视频中详细介绍了如何利用 Angular 2 构建前端界面，并且使用 Firebase 作为后端存储支撑来构建完整的认证系统。( &lt;a href="http://6me.us/PxWiA" target="_blank" rel="noopener">http://6me.us/PxWiA&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/jMVVqk" target="_blank" rel="noopener">《Angular 应用中的状态管理》&lt;/a>：本系列文章介绍了如何利用 ngrx/store 与 ngrx/effects 对典型的 Angular Todo 应用进行状态管理。( &lt;a href="http://6me.us/jMVVqk" target="_blank" rel="noopener">http://6me.us/jMVVqk&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bOD" target="_blank" rel="noopener">《Angular 的模块间通信》&lt;/a>：模块是 Angular 的构建单元，Angular 应用程序的所有可视化元素也是由模块构建的。当我们把模块拆散成更小的模块时，我们就要确保它们可以把数据传来传去。到那时候，恰当地模块间通信机制就成了我们应用程序的基础，可以让所有的数据都保持同步状态。( &lt;a href="https://parg.co/bOD" target="_blank" rel="noopener">https://parg.co/bOD&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bQ0" target="_blank" rel="noopener">《Angular 4 学习资源》&lt;/a>：随着 Angular 4 的正式发布，本文也收集了部分学习 Angular 4 的资源，包括特性总结、服务端渲染、响应式编程、样式指南等等多个部分。( &lt;a href="https://parg.co/bQ0" target="_blank" rel="noopener">https://parg.co/bQ0&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bQm" target="_blank" rel="noopener">《构建可维护的大型 Angular 2 应用》&lt;/a>：本文是来自 Versett 的工程师介绍其团队在基于 Angular 2 构建大型应用时的实践与总结。( &lt;a href="https://parg.co/bQm" target="_blank" rel="noopener">https://parg.co/bQm&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bN1" target="_blank" rel="noopener">《你应该掌握的关于调试 Angular 应用的知识》&lt;/a>：调试是 Web 开发中不可或缺的部分，特别是对于那些接管已存在代码库的开发者，他们往往需要经过大量的调试才能了解代码的架构与逻辑。不过貌似 Angular 官方文档中尚缺专门对于 Angular 中调试的讲解，本文则是深度浅出地讲解 Angular 应用开发过程中的调试技巧。本文首先介绍了作者调试源代码的技巧，然后介绍了如何使用框架内置的调试 API 来进行应用调试。( &lt;a href="https://parg.co/bN1" target="_blank" rel="noopener">https://parg.co/bN1&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dimafeng.com/2017/04/23/modern-frontend/" target="_blank" rel="noopener">《从实用主义视角来看现代前端应用开发》&lt;/a>：现代 Web 开发技术变革迅速，而我也经历了从纯 JS、jQuery、Vaadin、Angular JS、React 等等一系列的变迁。本文则首先思考何谓现代 Web 应用，然后考虑现代 Web 应用常用的项目架构与构建方式，譬如 TypeScript、Webpack、Linting 等内容，然后讨论现代常用的技术架构，譬如 React.j、MobX、依赖注入等相关知识。( &lt;a href="http://dimafeng.com/2017/04/23/modern-frontend/" target="_blank" rel="noopener">http://dimafeng.com/2017/04/23/modern-frontend/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bVy" target="_blank" rel="noopener">《Angular v5 中可期待的新特性》&lt;/a>：在 Angular V4 发布之后，Angular 团队就开始致力于 Angular v5 的开发，本文则是介绍 Angular V5 中部分可期待的新特性。在 Angular V5 中团队致力于简化应用的编译流程，将 AOT 编译模式设置为默认模式；同时会添加编译时的自动监控辅助命令，并且为模板添加类型检测的功能；同时 V5 版本会进一步优化错误提示，并且使得未来的升级更加地平滑。( &lt;a href="https://parg.co/bVy" target="_blank" rel="noopener">https://parg.co/bVy&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beA" target="_blank" rel="noopener">Angular 2+ 项目实战系列&lt;/a>：本系列文章包含了八个不同的章节，从零开始介绍如何利用 MongoDB、Express、Angular 2+ 以及 Node.js(MEAN Stack)来构建某个真实的应用项目。第一部分着眼于进行基础环境的搭建，包括搭建 Angular 应用开发环境、本地搭建 MongoDB、在 Auth0 申请账户与开发者密钥、搭建 Node.js 服务器并且为 Angular 应用添加基础的组件等等。第二部分着眼于添加基础的权限验证功能，并且构建数据模型等。( &lt;a href="https://parg.co/beA" target="_blank" rel="noopener">https://parg.co/beA&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIV" target="_blank" rel="noopener">试用新的 Angular HTTP Client&lt;/a>：在 Angular 4.3.0-rc.0 版本在，HTTP Client API 得到了极大的改造与提升，本文即是介绍新版本的 Angular HTTP Client 的用法。在新版本的 HTTP Client 中，其默认假设以 JSON 格式进行返回值解析，并且引入了灵活的 Interceptor 以动态操作请求头或者响应体；同时新版本的 HTTP Client API 为上传与下载这些耗时操作提供了实时进度反馈回调，以方便开发者进行调试或者反馈给用户。( &lt;a href="https://parg.co/bIV" target="_blank" rel="noopener">https://parg.co/bIV&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.nrwl.io/ngrx-patterns-and-techniques-f46126e2b1e5" target="_blank" rel="noopener">NgRx 的设计模式与技巧分享&lt;/a>：状态管理一直是构建前端应用过程中的难点之一，Angular 也为我们提供了多种不同的设计模式来进行状态管理；而本文即是介绍如何使用 NgRx 这个库进行状态管理。NgRx 是非常简单易用，没有太多限制条件的状态管理库；本文首先概述了 NgRx 的核心概念与设计原则，然后以实际的项目为例介绍了如何使用 NgRx 处理 Action 以及副作用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://toddmotto.com/lazy-loading-angular-code-splitting-webpack" target="_blank" rel="noopener">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载&lt;/a>：本文主要讨论如何在 Angular 应用开发中利用 Webpack 与 NGModules 实现对于代码库的模块分割，并且利用懒加载来加载非首屏内容，从而提升整体的应用响应性能。本文首先介绍了代码分割与懒加载相关的概念知识，然后介绍了如何搭建 Webpack 基础环境，然后介绍了使用 NgModules 以及性能对比；更多 Webpack 相关资料参考&lt;a href="https://parg.co/bVs" target="_blank" rel="noopener"> https://parg.co/bVs &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://codeburst.io/angular-best-practices-4bed7ae1d0b7" target="_blank" rel="noopener">Angular 最佳实践分享&lt;/a>：作者在本文中分享自己在工作中总结出的 Angular 应用实践，本文尽可能地避免官方的 Angular 样式指南中提及的约定，而是着眼于呈现个人的经验总结。本文依次介绍了类型定义、组件实践、服务定义、模板使用等方面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bg6" target="_blank" rel="noopener">Angular 中利用新的动画特效(v4.3+)优化路由变换&lt;/a>：本文着眼于介绍 Angular 应用开发中，如何利用新的动画特效，来为路由切换添加动画效果。本文首先介绍了如何从独立的依赖中引入动画模块，与为应用添加路由配置以及简单的路由动画；然后介绍了 Angular 动画接口，如何定义动画、如何添加参差效果等内容，最后介绍了如何将这些整合为独立的应用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bg5" target="_blank" rel="noopener">Angular 开发者常犯的错误枚举&lt;/a>：本文作者从自己团队的 Angular 开发经验与 Code Review 中总结出了开发者常犯的错误，并且提出了解决方案。这些错误包括对于 Angular、Angular 2、Angular 4 等各个版本的误解、ngOnChanges 与 ngDoCheck 对比、僵尸订阅、冗余订阅、不同模块的 providers 误用、直接操作 DOM 结点、重复声明组件等方面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bFs" target="_blank" rel="noopener">Angular 性能优化&lt;/a>：本文介绍了些常见的 Angular 开发中可用的性能优化建议，包括了利用 ChangeDetectionStrategy.OnPush 来显式声明组件间依赖、利用 trackBy 来追踪唯一标识符和避免冗余的增删、避免模板中的计算推导、禁用变化监测、使用懒加载等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bjD" target="_blank" rel="noopener">使用 Angular 组件的四个技巧&lt;/a>：从.5 版本的 AngularJS 开始，组件就成为 Angular 的一部分，它为代码的组织和回收提供了一种便捷的方式。Angular(Angular2 的简称)与其说是 Angular 1.x 的升级，不如说是“续集”，它在移动支持和其他功能的基础上进行了完全地重写。这里，1.x 中使用的控制器完全被组件取代。无论是否曾经使用或想继续坚持 1.x，无论是从零学起还是在跨越阶段，为了确保代码尽可能地优雅且不会过时，你都需要开始使用组件。无论属于以上哪一类，都可以在这里找到很多帮助简化流程的方法。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>#开源项目&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">《hacker-news-pwas》&lt;/a>：基于不同的前端框架实现的符合 PWA 应用特性的 Hacker News APP 的合集，包括了常见的 React、Angular、Vue、Preact 等多个版本，并且均在 Lighthouse 评测中达到 90 以上的评分。( &lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">https://parg.co/biQ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/brillout/awesome-angular-components" target="_blank" rel="noopener">《一系列优秀的 Angular 2 组件集锦》&lt;/a>：&lt;a href="https://angular.io/" target="_blank" rel="noopener">Angular 2&lt;/a> 是非常不错的前端开发框架，而本仓库则是一系列开源的 Angular 2 组件的集锦。这些组件包括浮层、通知、气泡、菜单、加载指示、表格、树、时间、图表、地图、无限滚动、音视频、SVG、PDF 以及各种各样会在表单中用到的组件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/angular-starter-kit/generator-ngx-app" target="_blank" rel="noopener">《generator-ngx-app》&lt;/a>：Angular 4 商业级应用项目生成器，其包括了 angular-cli 提供的现代工具与工作流，以及来自于社区的最佳实践、可扩展的基础模板以及较好地学习曲线。( &lt;a href="https://github.com/angular-starter-kit/generator-ngx-app" target="_blank" rel="noopener">https://github.com/angular-starter-kit/generator-ngx-app&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>CSS</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/css/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/css/</guid><description>&lt;h1 id="前端每周清单半年盘点之-css-篇">前端每周清单半年盘点之 CSS 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 CSS 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://frontendmasters.gitbooks.io/front-end-handbook-2017/content/" target="_blank" rel="noopener">《2017 前端开发手册》&lt;/a>：&lt;a href="https://frontendmasters.gitbooks.io/front-end-handbook-2017/content/" target="_blank" rel="noopener">Front-End Developer Handbook 2017&lt;/a> 由 &lt;a href="http://codylindley.com/" target="_blank" rel="noopener">Cody Lindley&lt;/a> 编写，面向每一个希望学习前端的开发者。该手册概括地讨论了前端工程化的相关实践：在 2017 年中我们应该使用哪些前端工具以及如何学习去使用这些数据。该手册的内容包含了 Web 技术的基础：HTML、CSS、DOM 以及 JavaScript，以及基于这些技术构建的优秀开源项目。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;amp;mid=2247484994&amp;amp;idx=1&amp;amp;sn=879c49723b9cf48972d35618229bbf3a" target="_blank" rel="noopener">《Web APP 实现水平滑页翻页交互效果的要点解析》&lt;/a>：本文是张鑫旭老师分享的起点中文网支持水平滑页阅读效果的实践，其核心是利用 CSS3 column 分栏布局。CSS3 column 多栏布局是支持比较早的 CSS3 布局方式，目前 IE10+以及其他所有现代浏览器都支持，IE 浏览器不需要私有前缀，FireFox 和 Chrome 虽然现在也不需要，但是，考虑到移动端以及可能一些用户浏览器升级不及时的现状，因此，-webkit-以及-moz-前缀目前还不能省略。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://stories.jotform.com/how-to-use-css-animations-like-a-pro-dfacc1e97338#.2myk0rrar" target="_blank" rel="noopener">《掌握 CSS Animation》&lt;/a>: 利用 Keyframes 以及各种各样的动画属性：timing、delay、play state、animation-count、iteration count、direction、fill mode、will change 来构建交互动画。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://tympanus.net/codrops/css_reference/grid/" target="_blank" rel="noopener">《CSS Grid 指南》&lt;/a>: 网格系统是布局设计的核心之一，在 Web 开发中我们经常需要借助第三方库来创建合适的网格系统。而 CSS Grid 则是一个二维布局系统，能够辅助开发者创建基于网格的用户界面，此文则是详细地介绍 CSS Grid 的语法细节以及调试实例。( &lt;a href="https://tympanus.net/codrops/css_reference/grid/" target="_blank" rel="noopener">https://tympanus.net/codrops/css_reference/grid/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://yoksel.github.io/flex-cheatsheet/" target="_blank" rel="noopener">《Flexbox 语法清单》&lt;/a>：该网页提供了交互式的 CSS Flexbox 教程，详细介绍了 Flexbox 的使用语法与经典案例。( &lt;a href="http://yoksel.github.io/flex-cheatsheet/" target="_blank" rel="noopener">http://yoksel.github.io/flex-cheatsheet/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://luisant.ca/remynifier" target="_blank" rel="noopener">《另一种 CSS 压缩思路》&lt;/a>：本文作者提出了一种新的 CSS 压缩思路，有可能会损坏原有的 CSS 文件，不过其压缩比率相较于现有的通用 CSS 压缩策略会更为优秀。( &lt;a href="https://luisant.ca/remynifier" target="_blank" rel="noopener">https://luisant.ca/remynifier&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://animista.net/" target="_blank" rel="noopener">《Animista》&lt;/a>：Animista 是开箱即用的 CSS 动画库，其作者还发布了非常易用的在线预览与选择站点，适合于设计人员选择合适的动画效果。( &lt;a href="http://animista.net/" target="_blank" rel="noopener">http://animista.net/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://sii.im/playground/css-grid/" target="_blank" rel="noopener">《CSS Grid 典型案例》&lt;/a>：该网站提供了一系列基于 React 编写的 CSS Grid 布局的测试样例，是个不错的从实例中学习 CSS Grid 语法与使用的教程。( &lt;a href="https://sii.im/playground/css-grid/#/" target="_blank" rel="noopener">https://sii.im/playground/css-grid/#/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhl" target="_blank" rel="noopener">《8 个可能你没考虑过关于 CSS 的知识》&lt;/a>：不同的技术学习曲线可能相差甚远，而 CSS 的初学者则会觉得相当容易入手，但是深入之后可能发现连居中都不甚容易。本文作者是个深度 CSS 热爱者，他从自己多年的经验介绍了 CSS 中的垂直居中、100% 属性、float、z-index 等等多个细节知识点。( &lt;a href="https://parg.co/bhl" target="_blank" rel="noopener">https://parg.co/bhl&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhN" target="_blank" rel="noopener">《实例讲解 CSS 盒模型》&lt;/a>：有经验的前端开发者都知道 HTML 中的布局就是盒套盒，而本文则是以某个街区的例子深入浅出地讲解 CSS 中的盒模型。( &lt;a href="https://parg.co/bhN" target="_blank" rel="noopener">https://parg.co/bhN&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCz" target="_blank" rel="noopener">《构建高性能扩展与折叠动画》&lt;/a>：本文以菜单伸缩动画为例，介绍如何构建高性能扩展与折叠动画。较简单但是性能有缺陷的方式譬如修改元素宽高或者使用 clip 变换属性；而本文主要是由 CSS3 的 scale 变换来实现菜单的扩展与折叠，其为了保证菜单按钮的视觉效果与整体的平滑缩放还使用了所谓的对冲缩放技巧。( &lt;a href="https://parg.co/bCz" target="_blank" rel="noopener">https://parg.co/bCz&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://cssgridgarden.com/" target="_blank" rel="noopener">《使用 CSS Grid 打造私家花园》&lt;/a>：本网站是个非常不错的互动式学习 CSS Grid 的站点，其以 28 个互动的花园小游戏来带你一步一步学习 CSS Grid 的语法与实践。( &lt;a href="http://cssgridgarden.com/" target="_blank" rel="noopener">http://cssgridgarden.com/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://madebymike.com.au/writing/the-invisible-parts-of-CSS/" target="_blank" rel="noopener">《隐藏幕后的 CSS 知识点》&lt;/a>：在我们日常的开发中，往往关注于让界面看上去符合预期，而往往不会去关注那些隐藏的属性知识点以及 CSS 的幕后原理。本文则是对于 CSS 的渲染过程、级联规则、Visual Formatting Model、展示类型、位置布局等等。( &lt;a href="https://madebymike.com.au/writing/the-invisible-parts-of-CSS/" target="_blank" rel="noopener">https://madebymike.com.au/writing/the-invisible-parts-of-CSS/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNe" target="_blank" rel="noopener">《CSS-in-JavaScript：基于组件的样式组织》&lt;/a>：通过使用内联样式，我们能够利用 JavaScript 带来的可编程性的便利来组织样式代码。它能够为我们提供类似于 CSS 预处理器、命名空间等多方面的辅助。本文则是介绍了几个常见的适用于 CSS-in-JS 技术的场景，譬如排版、空格等。( &lt;a href="https://parg.co/bNe" target="_blank" rel="noopener">https://parg.co/bNe&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNW" target="_blank" rel="noopener">《CSS Grid 布局初体验》&lt;/a>：最近 CSS Grid 布局大红大紫，吸引了很多开发者的目光。而最新版的 Firefox、Chrome、Opera、Safari 都添加了对于 CSS Grid 的支持。本文则是聚焦于何谓 CSS Grid 布局、它可以做些什么以及如何投放到生产环境等内容。( &lt;a href="https://parg.co/bNW" target="_blank" rel="noopener">https://parg.co/bNW&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNR" target="_blank" rel="noopener">《在 Web 开发中谨慎使用 CSS in JavaScript》&lt;/a>：CSS 是有缺陷的，不过很多项目在选择使用 CSS-in-JavaScript 来组织样式的时候，却是对于 CSS 与 CSS-in-JS 很多的误解。本文以 Styled-Component 为例，列举出了常见的 9 个误解，譬如使用 CSS-in-JS 才能解决命名空间冲突、保证样式的可扩展性、带来了性能提升与样式文件的可组织性等等。( &lt;a href="https://parg.co/bNR" target="_blank" rel="noopener">https://parg.co/bNR&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/oxalorg/sakura" target="_blank" rel="noopener">《sakura》&lt;/a>：Sakura 是轻量级的 CSS 预置样式库，我们只需要简单地引入 Sakura 样式文件到网页中就能将朴素的网页转化为较为美观的、可读性较好的页面。( &lt;a href="https://github.com/oxalorg/sakura" target="_blank" rel="noopener">https://github.com/oxalorg/sakura&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btn" target="_blank" rel="noopener">《在案例分析中学习 CSS Animation 与 Web Animation API》&lt;/a>：本文由作者实现的某个&lt;a href="https://bitsofco.de/how-i-animated-the-bitsofcode-logo/" target="_blank" rel="noopener"> Logo 动画入手&lt;/a>，首先介绍了如何利用 Web Animations API 创建简单的 KeyFrame 动画，包括创建动画对象以及将其应用到具体的元素中；接下来作者介绍了该动画的 CSS 实现版本，还对比分析了二者在性能上的差异。( &lt;a href="https://parg.co/btn" target="_blank" rel="noopener">https://parg.co/btn&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btW" target="_blank" rel="noopener">《高性能动态 CSS 样式》&lt;/a>：本文是对 &lt;a href="http://cssinjs.org/" target="_blank" rel="noopener">JSS&lt;/a> 新近提供的&lt;a href="http://cssinjs.org/json-api?v=v7.1.1#function-values" target="_blank" rel="noopener">函数式值的介绍&lt;/a>，其与 React 内联样式以及其他 CSS 解决方案相比有数倍的性能提升。在 Web 开发中动态设置样式往往会触发页面的重渲染，而本文则是介绍了如何使用 CSSOM 的 API 来在元素渲染之前即完成样式的设置。( &lt;a href="https://parg.co/btW" target="_blank" rel="noopener">https://parg.co/btW&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJr" target="_blank" rel="noopener">《Web 前端开发的未来》&lt;/a>：本文作者从自己的实践出发畅想了未来 Web 前端开发的可能方向；主要包括 JavaScript 新特性的增强以及对于状态管理的深入、从简单界面逐渐过渡到完整系统、原生与 Web 之间的边界逐步消失、CSS 会逐步模块化并且预处理器会逐步退出历史舞台、性能仍然是关键瓶颈以及 URL 会变得愈发重要等多个方面。( &lt;a href="https://parg.co/bJr" target="_blank" rel="noopener">https://parg.co/bJr&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJi" target="_blank" rel="noopener">《统一样式语言》&lt;/a>：近几年 CSS-in-JS 迅猛发展，各种实现库也是层出不穷。而本文作者，也是 CSS Modules 的作者之一，则是高屋建瓴地介绍了 CSS-in-JS 的特点与解决的问题，梳理了人们之前对于 CSS-in-JS 存在的误解。并且横向比较了多个 CSS-in-JS 的优缺点与适用场景，最后还畅想了下 CSS-in-JS 的未来。( &lt;a href="https://parg.co/bJi" target="_blank" rel="noopener">https://parg.co/bJi&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bis" target="_blank" rel="noopener">《面向 Web 设计师与开发者的免费电子书合集》&lt;/a>：本文介绍了十数本优秀的面向 Web 设计师与开发者的免费的电子书，涵盖了 CSS&amp;amp;HTML 基础、现代 JavaScript 开发、Git、PHP 等多个领域。( &lt;a href="https://parg.co/bis" target="_blank" rel="noopener">https://parg.co/bis&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biC" target="_blank" rel="noopener">《写给 CSS 的情书》&lt;/a>：世人诟病 CSS 久矣，而本文作者则对于 CSS 一见钟情且矢志不渝。本文是一篇不错的了解不同端开发中样式设置方式的文章，作者介绍了从 Java Applets 开始到 Android、iOS 应用开发中界面样式与主题设置的方式与技术，论证了 CSS 相较于这些方式具有更好的灵活性与便捷性。( &lt;a href="https://parg.co/biC" target="_blank" rel="noopener">https://parg.co/biC&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLS" target="_blank" rel="noopener">《CSS 局部作用域变量详解》&lt;/a>：CSS 自定义属性或者所谓的 CSS 变量，为我们带来了真正的、不同于 SASS 等预处理框架中使用的类占位符的动态变量。本文介绍了 CSS 变量的基本定义语法与使用，以及如何使用 JavaScript 来动态修改 CSS 变量值从而动态地进行界面重渲染，最后阐述了目前浏览器对于 CSS 变量的支持情况以及可以使用的兼容方式。( &lt;a href="https://parg.co/bLS" target="_blank" rel="noopener">https://parg.co/bLS&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLP" target="_blank" rel="noopener">《面向生产环境的前端性能优化清单》&lt;/a>：在 Web 前端开发中，产品经理更多的会关注于寻找优秀的设计与内容，而开发者同样需要关注于如何进行前端性能优化。作者在本文中则分享了多年经验累积的性能优化清单，包括常见的资源优化、CSS 优化中常用的工具、常用的性能检测工具等等。( &lt;a href="https://parg.co/bLP" target="_blank" rel="noopener">https://parg.co/bLP&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bL0" target="_blank" rel="noopener">《不会做动画的前端不是好开发》&lt;/a>：自从有了前端开发这个概念以来，这个岗位所做的事情都是围绕着人机交互来开展的，主要包括展示信息给用户看，然后获取用户的意图并做出响应。随着终端设备以及业务的快速发展，前端工程也越来越复杂，所以分工也进一步精细化，有侧重做工具化与模块化架构的，有侧重无线体验或者 Web 与 Native 融合方面的，也有侧重复杂的商家后台或者数据可视化的，甚至有部分公司把 HTML+CSS 与 JS 的工作也分开的，所以出现了不同前端工程师会有不一样的侧重点。而目前越来越多的业务线有越来越高的动画类需求，而在动画方面能紧跟技术趋势的优秀前端实在是比较难找，本文则希望让那些想在动画方面有些提升的朋友有所帮助。( &lt;a href="https://parg.co/bL0" target="_blank" rel="noopener">https://parg.co/bL0&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLZ" target="_blank" rel="noopener">《CSS 的现状》&lt;/a>：毫无疑问我们正在见证着 JavaScript 社区与生态的极速变化，而与此同时可能很多人没有关注到 CSS 社区的进展，本文作者则是对于 CSS 的现状进行了综述并且提出了个人的观点。本文作者主要提出了五个论点：我们可以使用 CSS Module 来替代原有的 BEM 等命名方案、使用 Flexbox 来替代 float、使用 CSS Grid 来替代第三方网格库、使用 CSS 内置的变量、计算函数等特性来替代 SASS 等预处理库，乃至于最终我们完全可以使用 CSS-in-JS 来替代 CSS。本文具有极强的主观色彩，请批判性阅读。( &lt;a href="https://parg.co/bLZ" target="_blank" rel="noopener">https://parg.co/bLZ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bv9" target="_blank" rel="noopener">《现代 Web 开发魔法书》&lt;/a>：本书是对现代 JavaScript Web 开发中涉及知识的分类与介绍，来源于作者日常工作中发送给全栈 Web 团队新人的资源；目前已经纳入了超过两千的涵盖了项目、工具、插件、服务、文章、数据、站点等多方面的链接。本书包含了 Web 平台概述、HTML5，CSS，JS 特性介绍、常用的 GUI 框架与架构介绍、应用开发流程中使用的工具介绍等等栏目。( &lt;a href="https://parg.co/bv9" target="_blank" rel="noopener">https://parg.co/bv9&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byc" target="_blank" rel="noopener">构建生产环境下的 CSS Grid 布局&lt;/a>：CSS Grid 为我们带来了真正的网格布局解决方案，会为现有的 Web 布局方式注入新的活力。本文则介绍了 CSS Grid 的基础概念和它带来的机会与挑战，应该如何在实践中利用 CSS Grid 进行应用布局；作者还以 WordPress 主题为例，介绍了真实应用开发中存在的问题、对比了老的解决方法与基于 CSS Grid 的布局方式。本文首先介绍了 CSS Grid 的基础语法与设计模式，然后讨论了在生产环境中应该如何一步步地引入 CSS Grid，包括如何从草稿设计开始进行语义化布局以及对于浏览器兼容性的保证等。( &lt;a href="https://parg.co/byc" target="_blank" rel="noopener">https://parg.co/byc&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gist.github.com/jareware/4738651" target="_blank" rel="noopener">你可能并不知道的 16 个 SCSS 特性&lt;/a>：作者自 2009 年以来一直使用 SCSS/SASS 来进行大部分的样式工作，而本文即是对于某些有用但是并不一定为人所知的 SCSS 特性进行介绍。本文介绍的特性包括了父选择器的灵活用法、控制流指令、默认函数参数、扩展操作符等等；更多 CSS/SCSS 相关资料参考&lt;a href="https://parg.co/baH" target="_blank" rel="noopener"> https://parg.co/baH&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b19" target="_blank" rel="noopener">大幅度减少 CSS 包体大小&lt;/a>：本文作者介绍了自己在构建某个在线售票的网站过程中，如何利用样式类名分割与作用域隔离来大幅度减少 CSS 打包文件体积的实践技巧。作者主要使用 CSS Modules，然后自定义了其样式类名生成规则来保证生成较短的样式类名并且使用作用域隔离来保证样式隔离。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgZ" target="_blank" rel="noopener">渐进式 CSS 布局：从 Floats 到 Flexbox 到 Grid&lt;/a>：随着各大现代浏览器逐步支持 CSS Grid 布局，越来越多的开发者在尝试使用这种新型的布局方式。不过鉴于目前还存在着大量的老版本浏览器，作者在本文中重点讨论了如何利用渐进式 CSS 布局增强的方式来应对不同浏览器环境下的布局解决方案，并且根据运行环境来渐进增强；更多 CSS/SCSS 相关资料参考&lt;a href="https://parg.co/baH" target="_blank" rel="noopener"> https://parg.co/baH &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bFO" target="_blank" rel="noopener">突破 CSS 前端面试&lt;/a>：不同于传统的软件工程师面试比较注重算法，前端面试可能更多的注重综合能力以及领域语言的掌握；本文即着眼于对于面试中常见的 CSS 问题的总结与介绍。本文列举的问题譬如 Resetting 与 Normalizing 区别、floats 工作机制阐述、z-index 与 stacking context 比较、BFC 描述等等；更多 CSS/SCSS 相关资料参考&lt;a href="https://parg.co/baH" target="_blank" rel="noopener"> https://parg.co/baH &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://meowni.ca/posts/shadow-dom/" target="_blank" rel="noopener">基于 Shadow DOM 的样式封装&lt;/a>：Shadow DOM 是 Web Components 标准的重要组成部分，它能够将 DOM 树进行隔离封装，而本文则是介绍如何利用 Shadow DOM 实现对于样式类的隔离封装。由于 CSS 并没有提供内置的模块化或者作用域机制，而在大型项目中不同组件间的样式又极易引发冲突，因此我们需要选择合适的 CSS 样式隔离方案。目前常用的隔离方案有 BEM 命名策略、IFrame、CSS Modules、CSS-in-JS 等，本文首先盘点了这些方案的优势与不足；然后介绍了 Shadow DOM 的基本原理以及如何应用到样式封装上。更多 CSS/SCSS 相关资料参考&lt;a href="https://parg.co/baH" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bzC" target="_blank" rel="noopener">Chrome DevTools 进阶指南&lt;/a>：Chrome DevTools 是非常强大的开发工具，而本文则是以数十张动图的方式细致生动地介绍了如何使用 Chrome DevTools 进行常见的开发调试。本文涉及的内容包括了如何进行 CSS 覆盖率分析、如何进行 CPU 使用率分析、如何不使用扩展而进行浏览器截屏、如何进行 Profiling、如何进行时间轴回溯等内容；更多 Web 调试相关资料参考&lt;a href="https://parg.co/bzN" target="_blank" rel="noopener">这里&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bzq" target="_blank" rel="noopener">探索 ReactJS 中的 CSS 架构&lt;/a>：本文着眼于讨论 React 开发中常用的 CSS 架构，从 BEM 命名开始谈起，介绍其对于 CSS 模块分割的意义以及实际场景下增强型的 BEM 用法；然后介绍了 React 中 BEM 的实践。接下来本文讨论了 CSS Modules，如何配置与使用 CSS Modules，以及如何进行组件分层的解决方案。该结构背后的理念是通过以一种可伸缩的方式保持 CSS 架构创建更好的 ReactJS 项目，可以支持成千上万的组件和开发人员协同工作；然而本文的真正关键点在于打开你的思维，去适应新事物。更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>#开源项目&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://www.raphaelfabeni.com.br/css-loader/" target="_blank" rel="noopener">《基于 div 与 纯 CSS 实现的加载动画》&lt;/a>：Web 开发中，当我们需要用户等待某个异步操作完成，譬如网路请求或者表单提交时，我们应当给予用户友好的提示。而 CSS Loader 就是仅基于 div 与 CSS3 动画的加载提示库，其并不像 GIF 这样需要额外的图片请求，并且具有相当好的可维护性与自定义性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/BafS/Gutenberg" target="_blank" rel="noopener">《Gutenberg》&lt;/a>：网页打印时的格式错乱一直是个头痛的问题，而 Gutenberg,css 提供了一系列基本的仅在打印时才会加载的样式，优化专用于打印的格式显示。( &lt;a href="https://github.com/BafS/Gutenberg" target="_blank" rel="noopener">https://github.com/BafS/Gutenberg&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/giakki/uncss" target="_blank" rel="noopener">《UnCSS》&lt;/a>：UnCSS 能够帮助你从样式表中移除 HTML 中未被用到的样式，它支持多文件以及 JavaScript 样式定义，并且提供了接口、命令行、构建插件、POSTCSS 插件等多种使用方式。( &lt;a href="https://github.com/giakki/uncss" target="_blank" rel="noopener">https://github.com/giakki/uncss&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4Q" target="_blank" rel="noopener">《glamorous》&lt;/a>：来自 PayPal 的 React 组件的 CSS-in-JS 解决方案，其支持 JSX 语法、自定义样式组件等多种灵活的功能。( &lt;a href="https://parg.co/b4Q" target="_blank" rel="noopener">https://parg.co/b4Q&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.iotacss.com/" target="_blank" rel="noopener">《iotaCSS》&lt;/a>：iotaCSS 是基于 SASS 的 OOCSS 框架，其具备了完全轻量可扩展的特性，并且提供了高性能的、可读性较好的以及完全响应式的接口配置。( &lt;a href="https://www.iotacss.com/" target="_blank" rel="noopener">https://www.iotacss.com/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jaredreich/pell" target="_blank" rel="noopener">Pell&lt;/a>：Pell 是仅有 1KB 的所谓所见即所得的富文本编辑器，其不需要依赖于 jQuery、BootStrap 等第三方库。Pell 主要以 ES6 语法开发，并且支持自定义的 SCSS 文件或者复写 CSS 样式来自定义风格，也是非常不错的值得借鉴的编辑器开发示例。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>JavaScript</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/javascript/</guid><description>&lt;h1 id="前端每周清单半年盘点之-javascript-篇">前端每周清单半年盘点之 JavaScript 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 JavaScript 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://frontendmasters.gitbooks.io/front-end-handbook-2017/content/" target="_blank" rel="noopener">《2017 前端开发手册》&lt;/a>：&lt;a href="https://frontendmasters.gitbooks.io/front-end-handbook-2017/content/" target="_blank" rel="noopener">Front-End Developer Handbook 2017&lt;/a> 由 &lt;a href="http://codylindley.com/" target="_blank" rel="noopener">Cody Lindley&lt;/a> 编写，面向每一个希望学习前端的开发者。该手册概括地讨论了前端工程化的相关实践：在 2017 年中我们应该使用哪些前端工具以及如何学习去使用这些数据。该手册的内容包含了 Web 技术的基础：HTML、CSS、DOM 以及 JavaScript，以及基于这些技术构建的优秀开源项目。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://auth0.com/blog/glossary-of-modern-javascript-concepts/" target="_blank" rel="noopener">《现代 JavaScript 概念纵览》&lt;/a>：现代 JavaScript 开发在过去几年中经历了迅猛的变迁，并且这种变化的势头毫无停滞的预兆。对于很多前端开发者而言可能还不是很熟悉那些 JS 博客或者文档中提及的时兴的概念。此文讨论了很多起到媒介作用以及高级的概念，和这些概念是如何被适用于现代 JavaScript 开发中的。本文我们会讨论 Statefulness 与 Statelessness、Immutability 与 Mutability、Imperative 与 Declarative Programming、Higher-order Functions、Observables、以及 FP、RP、FPR 编程范式。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;amp;mid=2247484987&amp;amp;idx=1&amp;amp;sn=7f20da20bc6baed62ca8ff115209942b" target="_blank" rel="noopener">《JavaScript 启动性能瓶颈分析与解决方案》&lt;/a>：随着现代 Web 技术的发展与用户交互复杂度的增加，我们的网站变得日益臃肿，也要求着我们不断地优化网站性能以保证友好的用户体验。本文作者则着眼于 JavaScript 启动阶段优化，首先以大量的数据分析阐述了语法分析、编译等步骤耗时占比过多是很多网站的性能瓶颈之一。然后作者提供了一系列用于在现代浏览器中进行性能评测的工具，还分别从开发者工程实践与 JavaScript 引擎内部实现的角度阐述了应当如何提高解析与编译速度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.sitepoint.com/introducing-graphicsjs-a-powerful-lightweight-graphics-library/" target="_blank" rel="noopener">《GraphicsJS:轻量级绘图库》&lt;/a>：目前 Web 开发中最常用的创建交互式图片的技术选型当属 SVG 与 Canvas，传统的 Flash 与 Silverlight 已经慢慢淡出历史的舞台。而对于 &lt;a href="https://www.sitepoint.com/canvas-vs-svg-choosing-the-right-tool-for-the-job/" target="_blank" rel="noopener">SVG 与 Canvas&lt;/a> 的对比也显示，如果是想创建与操作简单的交互性图片，那么 SVG 当属首选。SVG 本身是基于 XML 的向量图，任何通过&lt;code>svg&lt;/code>标签载入的图片都会成为 SVG DOM 中可操作的对象。而 GraphicsJS 正是基于 SVG 的简单易用的 JavaScript 绘图库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://scotch.io/tutorials/understanding-scope-in-javascript" target="_blank" rel="noopener">《理解 JavaScript 中的作用域》&lt;/a>：JavaScript 中的作用域、闭包以及上下文绑定一直是令人凌乱的知识，此文作者详细地从函数作用域、块作用域、词法作用域、闭包等进行详细阐述，值得一读做个梳理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://auth0.com/blog/the-real-story-behind-es4/" target="_blank" rel="noopener">《ECMAScript 4 背后的故事》&lt;/a>: 本文是对于 1999 ~ 2008 年之间 JavaScript 世界发生的大事件的详细介绍，阐述了 ECMAScript 4 从提出到角力到流产的前世今生。( &lt;a href="http://suo.im/phBiE" target="_blank" rel="noopener">http://suo.im/phBiE&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://lucasfcosta.com/2017/02/17/JavaScript-Errors-and-Stack-Traces.html" target="_blank" rel="noopener">《深入了解 JavaScript 中错误对象与堆栈跟踪》&lt;/a>：JavaScript 中 Error 对象的堆栈跟踪信息包含了从异常抛出点到构造函数的所有栈帧信息，而手动地去捕获与操作堆栈跟踪信息有助于我们在开发测试或者异常处理相关的框架时有更好地实践。( &lt;a href="http://suo.im/MiMWd" target="_blank" rel="noopener">http://suo.im/MiMWd&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hacks.mozilla.org/2017/02/what-makes-webassembly-fast/" target="_blank" rel="noopener">《对比探秘 WebAssembly 性能优越之谜》&lt;/a>: 本系列文章通过有趣的漫画介绍了 WebAssembly 的前世今生，并且与 JavaScript 就加载、解析、编译、执行等浏览进行了详细对比，从而介绍 WebAssembly 的性能缘何相较于 JavaScript 会好上很多。同时作者也强调，WebAssembly 与 JavaScript 各有所长，未来并不会存在太多的竞争，更多的是相辅相成，各司其职。( &lt;a href="http://suo.im/3jsTUH" target="_blank" rel="noopener">http://suo.im/3jsTUH&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@mattburgess/all-javascript-frameworks-are-terrible-e68d8865183e#.bl9akwprg" target="_blank" rel="noopener">《槽糕的 JavaScript 框架们》&lt;/a>：此文作者 Matt Burgess 严肃地吐槽批评了几乎所有的现今流行的 JavaScript 框架，与他上一篇文章&lt;a href="https://medium.com/@mattburgess/javascript-frameworks-are-great-2df4a3f0b24d#.qw54bvng0" target="_blank" rel="noopener">伟大的 JavaScript 框架&lt;/a>一起阅读效果更佳。当然，作者并不是想让大家回到茹毛饮血的岁月，而是希望能以辩证地态度去认识与使用框架。( &lt;a href="http://6me.us/e9R" target="_blank" rel="noopener">http://6me.us/e9R&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/ylUyM" target="_blank" rel="noopener">《JavaScript 图片处理库盘点》&lt;/a>：图片处理一直是客户端开发中的常见问题，本文则是对基于 JavaScript 的常见的进行图片滤镜、裁剪等操作的库进行了盘点；本文横向比较了 CamanJS、glfx.js、grafi.js、Jimp 以及 Filtr2 这几个常用的图片处理库，并且给出了不同业务场景下的选用建议。( &lt;a href="http://6me.us/ylUyM" target="_blank" rel="noopener">http://6me.us/ylUyM&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/z0XSh3" target="_blank" rel="noopener">《Slack 是如何减少其客户端内存占用的》&lt;/a>：本文是 Slack 在其桌面应用的开发过程中探索出的如何减少应用内存开销的经验介绍。Slack 最初为用户的每个登录团队都启动了相同的处理进程，而后根据调研发现仅有部分用户会同时使用多个团队；因此 Slack 从卸载后台团队的 DOM 树、分拆 JavaScript 代码进行优雅降级、重构 JavaScript 代码库等多个方式来优化桌面应用的内存占用。( &lt;a href="http://6me.us/z0XSh3" target="_blank" rel="noopener">http://6me.us/z0XSh3&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/csu2da" target="_blank" rel="noopener">《流行网站上陈旧的 JavaScript 库留存调研》&lt;/a>：本文是 Tobias Laudinger 及其合作者对于客户端 JavaScript 库的使用现状的调研报告；基于对于超过 133K 个网站的调查结果，它们发现大约 37% 的站点仍然使用了某些存在已知漏洞的 JavaScript 客户端脚本，它们建议我们一定要慎重思量网站中引入的外部依赖，特别是对于那些已经运行了很久的站点。( &lt;a href="http://6me.us/csu2da" target="_blank" rel="noopener">http://6me.us/csu2da&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bOL" target="_blank" rel="noopener">《编写 JavaScript 框架：客户端路由》&lt;/a>：本文是编写 JavaScript 框架系列的最后一篇，主要着眼于讨论如何实现 JavaScript 客户端路由及其与服务端路由的区别。( &lt;a href="https://parg.co/bOL" target="_blank" rel="noopener">https://parg.co/bOL&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bsF" target="_blank" rel="noopener">《面向“远古” Web 开发者的现代 JavaScript 教程》&lt;/a>：本文主要是面向那些从 PHP、JSP、Rails 占据统治地位时开始进行 Web 技术的开发者进行常见的现代 JavaScript 基础概念的介绍。( &lt;a href="https://parg.co/bsF" target="_blank" rel="noopener">https://parg.co/bsF&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bsz" target="_blank" rel="noopener">《解密 JavaScript 异步编程》&lt;/a>：JavaScript 中异步编程历经了多个大的迭代，从回调到 Promise 到生成器以及现在的 Async/Await；本文作者则是高屋建瓴地介绍了 JavaScript 异步编程的变迁历史以及简要的内部实现原理。( &lt;a href="https://parg.co/bsz" target="_blank" rel="noopener">https://parg.co/bsz&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bsW" target="_blank" rel="noopener">《ES7 Async/Await 常见误区》&lt;/a>：ECMAScript 6 引入的 Promise 大大简化了 JavaScript 中异步编程语法，而 ES7 引入的 Async 则使其更为优雅；本文作者对于实践中常见的对于 Async/Await 的语法误用案例进行了解析。( &lt;a href="https://parg.co/bsW" target="_blank" rel="noopener">https://parg.co/bsW&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bQY" target="_blank" rel="noopener">《Composing Software》&lt;/a>：本系列文章由 Eric Elliott 大神发布，着眼于介绍 JavaScript 函数式编程与大型软件项目中的可组织性技术的介绍，包括了函数式编程导论、高阶函数、Reduce、Functors &amp;amp; Categories 等几个部分，还在持续更新中。( &lt;a href="https://parg.co/bQY" target="_blank" rel="noopener">https://parg.co/bQY&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhH" target="_blank" rel="noopener">《12 个精妙的 JavaScript 代码片》&lt;/a>：本文作者分享了十二个非常不错的 JavaScript 代码片，这些代码片能够帮你优化现有代码，让代码更加地赏心悦目。( &lt;a href="https://parg.co/bhH" target="_blank" rel="noopener">https://parg.co/bhH&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhR" target="_blank" rel="noopener">《JavaScript 中构建响应式引擎》&lt;/a>：本系列文章介绍了如何在 JavaScript 中构建高性能的响应式引擎，对于有兴趣了解 MobX 底层原理的同学来说也是个不错的教程，目前包含了对于可观测对象的构造解释、属性推导与依赖追踪等内容( &lt;a href="https://parg.co/bhR" target="_blank" rel="noopener">https://parg.co/bhR&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCw" target="_blank" rel="noopener">《深入浅出构建简单的 Chess AI》&lt;/a>：本文作者介绍了如何基于 JavaScript 构建一个国际象棋的 AI，虽然不属于前端开发范畴，不过还是蛮有意思的一篇文章。本文主要包括移动生成、棋盘可视化、位置评估、基于 Minimax 算法的搜索树、Alpha-beta 修剪等等。( &lt;a href="https://parg.co/bCw" target="_blank" rel="noopener">https://parg.co/bCw&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhT" target="_blank" rel="noopener">《使用 JavaScript 打造智能咖啡机》&lt;/a>：这几年智能家居与 IOT 的概念非常火热，作者也发挥极客精神改造了一下办公室的咖啡机。文中作者借助了 Tessel 与 Johnny-Five 智能硬件平台，自定义了超文本咖啡机控制协议 HTCPCP，将咖啡机改造为了能够提供类 REST 服务的终端，能够远程控制与实时监控。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4p" target="_blank" rel="noopener">《使用 Chrome devtools 检视代码覆盖》&lt;/a>：近日 Chrome Canary 版本中新增了执行代码覆盖率检查的特性，其能够反映你的 Web 应用中的每个 JavaScript/CSS 文件中的代码覆盖率以及所有的未被执行的行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhn" target="_blank" rel="noopener">《JavaScript 模块演化史》&lt;/a>：当初 Brendan Eich 草创 JavaScript 之际估计想不到它会在之后的二十年内起到如此重要的作用，本文则是深度回顾了缺乏模块化带来的困难以及这二十年间从命名空间、依赖注入、CommonJS、AMD、UMD 到 ES2015 Modules 等等十余种不同的模块解决方案。( &lt;a href="https://parg.co/bhn" target="_blank" rel="noopener">https://parg.co/bhn&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4a" target="_blank" rel="noopener">《使用 Inline Cache 优化动态 JavaScript 代码》&lt;/a>：本文是作者在开发 JSIL 开源库时使用的一系列优化手段的总结，主要关于如何使用多态在线缓存(Polymorphic Inline Cache)来优化代码执行速度，不过这种方式也有可能造成意外的变化。作者介绍了何谓 Inline Cache 及其优化原理和带来的性能提升评测等内容。( &lt;a href="https://parg.co/b4a" target="_blank" rel="noopener">https://parg.co/b4a&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRO" target="_blank" rel="noopener">《基于 JavaScript 构建数据表达式分词器》&lt;/a>：本文是一篇挺有意思的文章，介绍如何利用 JavaScript 解构常见数学表达式并且从中提取出相关实体。本文涉及到的内容包括对于分词器的简单介绍、对于抽象语法树 AST 的介绍以及最终如何使用代码来实现分词算法。( &lt;a href="https://parg.co/bRO" target="_blank" rel="noopener">https://parg.co/bRO&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRR" target="_blank" rel="noopener">《TypeScript 在 Slack 的实践分享》&lt;/a>：维护大型的跨平台的 JavaScript 代码库是一件非常具有挑战性的工作，无论是从 Chrome 的 JavaScript 中传递对象给 Objective-C 或者单纯的接受来自 Node.js 中的回调结果，你都需要保证不同的代码对于通讯对象的期望之间的一致性。而本文即是在开发跨平台多终端的应用中，Slack 使用 TypeScript 来约束类型，从而避免意外的类型不一致导致的崩溃的实践经验分享。( &lt;a href="https://parg.co/bRR" target="_blank" rel="noopener">https://parg.co/bRR&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRh" target="_blank" rel="noopener">《2017 里 JavaScript 带给我的感动》&lt;/a>：本文作者纵览了在 2017 年中 JavaScript 生态圈可能迎来的一系列巨大变革。他首先对比了 JavaScript 与 Reason，浅述了二者的优劣对比。然后介绍了 WebAssembly 以及另一个新兴语言 Rust 未来可能在 JavaScript 生态圈中占据的一席之地。最后，作者还介绍了 Docker、Now.sh 以及 Github Pages 等一系列优秀的辅助开发工具，并且畅想了去中心化浪潮下 Web 的未来发展。( &lt;a href="https://parg.co/bRh" target="_blank" rel="noopener">https://parg.co/bRh&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/" target="_blank" rel="noopener">《JavaScript 中处理 undefined 的 7 个技巧》&lt;/a>：不同于 Python 或者 Java 中仅有 null 或 nil 来表示空值，JavaScript 为我们提供了 undefined 与 null。本文则是深度分析了 undefined 与 null 的区别，讨论了实际工程开发中 undefined 的使用场景，譬如未初始化对象、不存在的对象属性或者方法、越界访问、无返回值的函数等；作者最后还给出了一些对于 undefined 的注意点，譬如提高内聚性降低耦合性等。( &lt;a href="https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/" target="_blank" rel="noopener">https://rainsoft.io/7-tips-to-handle-undefined-in-javascript/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bf3" target="_blank" rel="noopener">《2017 年 JavaScript 测试技术概述》&lt;/a>：本文涵盖了 2017 年中 JavaScript 领域流行的测试理念、名词与概念、工具以及测试的方法论。本文介绍了基本的测试类型的划分、常用测试工具的划分、以及 Jest、Mocha、Nightwatch 这样的常用测试工具的选项与实践技巧。( &lt;a href="https://parg.co/bf3" target="_blank" rel="noopener">https://parg.co/bf3&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bfk" target="_blank" rel="noopener">《Microsoft Edge 中的 JavaScript 性能、WebAssembly 以及 Shared Memory》&lt;/a>：JavaScript 的性能表现是 Web 开发中永恒的话题，而 Microsoft Edge 团队也在实时接收用户反馈以提升 Chakra JavaScript 引擎的性能表现。本文首先介绍了 Chakra 中的新特性，包括了一系列提升 JavaScript 性能表现的技巧；然后还讨论了 WebAssembly、Shared Memory 与 Atomics 等新特性在 Edge 中的具体实现。( &lt;a href="https://parg.co/bfk" target="_blank" rel="noopener">https://parg.co/bfk&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNy" target="_blank" rel="noopener">《8 小时内学习 Node.js》&lt;/a>：Node.js 是基于 Google Chrome V8 引擎的 JavaScript 框架，其能够用于开发类似于视频直播、单页应用等 IO 密集型的 Web 项目。而本文则是提供了完整的从零到一的 Node.js 学习路线图，包含了基础的环境构建、Console 使用、核心模块使用、基本的 Web 服务器搭建等等内容。( &lt;a href="https://parg.co/bNy" target="_blank" rel="noopener">https://parg.co/bNy&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNe" target="_blank" rel="noopener">《CSS-in-JavaScript：基于组件的样式组织》&lt;/a>：通过使用内联样式，我们能够利用 JavaScript 带来的可编程性的便利来组织样式代码。它能够为我们提供类似于 CSS 预处理器、命名空间等多方面的辅助。本文则是介绍了几个常见的适用于 CSS-in-JS 技术的场景，譬如排版、空格等。( &lt;a href="https://parg.co/bNe" target="_blank" rel="noopener">https://parg.co/bNe&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNa" target="_blank" rel="noopener">《从零开始基于 JavaScript 构建简单神经网络》&lt;/a>：本文不是纯粹的前端开发文章，对于听说过人工智能与神经网络并且有兴趣的开发者不妨一读。而本文则是渐进地介绍神经网络与深度学习理论基础、如何使用 JavaScript 实现简单的数学公式、如何实现简单的神经网络等内容。( &lt;a href="https://parg.co/bNa" target="_blank" rel="noopener">https://parg.co/bNa&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNR" target="_blank" rel="noopener">《在 Web 开发中谨慎使用 CSS in JavaScript》&lt;/a>：CSS 是有缺陷的，不过很多项目在选择使用 CSS-in-JavaScript 来组织样式的时候，却是对于 CSS 与 CSS-in-JS 很多的误解。本文以 Styled-Component 为例，列举出了常见的 9 个误解，譬如使用 CSS-in-JS 才能解决命名空间冲突、保证样式的可扩展性、带来了性能提升与样式文件的可组织性等等。( &lt;a href="https://parg.co/bNR" target="_blank" rel="noopener">https://parg.co/bNR&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNi" target="_blank" rel="noopener">《d3.express：集成交互式编码环境》&lt;/a>：本文介绍了尚在开发中的 d3.express，一个类似于 Python Juypter Notebook 的交互式编码环境。d3.express 允许开发者使用大量 d3 内置的功能函数，譬如加载远程的 CSV 文件；并且允许开发者交互地实时预览 SVG、Canvas 等绘制结果，有人认为 d3.express 会是一种基于 JavaScript 的更好的数据可视化解决方案。( &lt;a href="https://parg.co/bNi" target="_blank" rel="noopener">https://parg.co/bNi&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bN9" target="_blank" rel="noopener">《V8 不再使用基准测试引擎 Octane》&lt;/a>：JavaScript 基准测试引擎是一段不断进化的历史。随着网页从原始静态页面到现在富客户端应用，都需要基准测试引擎能够与时俱进。SunSpider 是其中比较早的基准测试引擎，它为快速优化 JavaScript 提供了基础。但是，随着虚拟机开发者意识到微基准测试的局限性，基准测试引擎随之更新，针对 SunSpider 的短板进行优化，同时浏览器社区也将 SunSpider 从推荐基准测试引擎中剔除。Octane 基准测试套件最早发布于 2012 年，旨在减轻早期微基准测试引擎的一些缺陷。它源于 V8 的早期简单测试用例，最终成为通用网页性能的基准测试。Octane 包含 17 个不同的测试集，以覆盖各种不同的工作场景。Octane 的内容代表它创建时度量 JavaScript 性能的主流方式。( &lt;a href="https://parg.co/bN9" target="_blank" rel="noopener">https://parg.co/bN9&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMn" target="_blank" rel="noopener">《JavaScript 代码风格要素》&lt;/a>：本文是 Eric Elliott 编写的 JavaScript 代码风格要素指南与建议，其借鉴了 1920 年的面向英文语言的 “The Elements of Style” 一文。本文介绍的关键要素包括：使用函数最为组合的原子单元并且保证函数的单一职责性、移除不需要的代码、使用更直观具有自解释性的变量命名、根据特性进行代码划分等等。( &lt;a href="https://parg.co/bMn" target="_blank" rel="noopener">https://parg.co/bMn&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bVa" target="_blank" rel="noopener">《简短的 WebAssembly 卡通指南》&lt;/a>：现在有很多关于 WebAssembly 与 JavaScript 生态圈的讨论，人们往往关注于 WebAssembly 带来的巨大的性能提升以及它会如何颠覆现代 Web 开发。不过很多的介绍中并没有详细阐述隐藏在速度提升之后的具体细节，本文则是从整个 JavaScript 的演化史来介绍 WebAssembly 巨大性能提升的原因。( &lt;a href="https://parg.co/bVa" target="_blank" rel="noopener">https://parg.co/bVa&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bkG" target="_blank" rel="noopener">《基于 JavaScript 的异步依赖加载》&lt;/a>：在 Web 应用开发中我们经常会将一些首屏不需要的脚本或者样式文件以异步方式加载；而本文则是介绍了多种异步加载网页中依赖资源的方式，作者还将常用的方法整合为了 fetchInject 这个开源库，方便使用者快速进行脚本地异步加载。( &lt;a href="https://parg.co/bkG" target="_blank" rel="noopener">https://parg.co/bkG&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bkK" target="_blank" rel="noopener">《基于 Electron 构建 Github Desktop Beta》&lt;/a>：Electron 是著名的利用 HTML、CSS、JavaScript 等 Web 技术构建桌面应用的辅助工具；本文则是介绍了四个仅有原生应用开发背景的工程师如何利用 Electron 逐步构建 Github Desktop Beta 的经验。( &lt;a href="https://parg.co/bkK" target="_blank" rel="noopener">https://parg.co/bkK&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://dev.to/scastiel/writing-modern-javascript-code" target="_blank" rel="noopener">《编写现代 JavaScript 代码》&lt;/a>：JavaScript 被仅用来更新页面元素状态的日子一去不返，我们也需要编写更加现代的 JavaScript 代码。本文则是介绍了如何利用 Linter 来格式化代码、如何使用 ES2015+ 特性、如何使用函数式编程等建议来提升 JavaScript 的代码质量。( &lt;a href="https://dev.to/scastiel/writing-modern-javascript-code" target="_blank" rel="noopener">https://dev.to/scastiel/writing-modern-javascript-code&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bkA" target="_blank" rel="noopener">《重构 Airbnb 前端架构》&lt;/a>：本文是近日 Airbnb 开发团队在思索重构代码库中 JavaScript 部分的经验总结，主要着眼于产品驱动开发以及技术沉淀、从传统的 Rails 架构中积攒的经验以及新的技术栈的某些特性等方面。本文首先介绍了从 Rails 迁移过程中的一些经验，譬如将原本完全的服务端渲染界面所需要的数据切分为了 API 与 Non-API 两大类，并且使用 Hypernova 来进行 React 服务端渲染。然后介绍了如何在应用前端通过引入懒加载与异步加载等方式提升前端性能与用户体验。( &lt;a href="https://parg.co/bkA" target="_blank" rel="noopener">https://parg.co/bkA&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/news/2017/05/JavaScript-become-language" target="_blank" rel="noopener">《最终，JavaScript 成为了一流语言》&lt;/a>：2003 年，保罗·格雷厄姆(Paul Graham)在文中提到，他的公司决定使用 Lisp(一门编程语言)，并且指出自己公司相比竞争对手的优势在于 Lisp。如果 Lisp 像法语，那么现如今的 JavaScript 就像英语一般。尽管二者的语法不一致，但英语是世界上最广泛使用的语言，JavaScript 是最广泛应用的计算语言。然而，JavaScript 仍未得到与其他语言同等的尊重。尽管它的使用率在创业公司和大型公司中持续增长，但若非必要，人们不会认为它是一门有用的语言。大公司的高级工程师声称它不是一门“真正的”编程语言，许多人并不知道除了操作像素外它还能被用于何处。。( &lt;a href="https://parg.co/bkb" target="_blank" rel="noopener">https://parg.co/bkb&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bk6" target="_blank" rel="noopener">《理解 WebAssembly 的文件格式》&lt;/a>：为了保证 WebAssembly 能够被人们阅读与理解，需要提供对于 wasm 二进制格式的文本表示。该特性着眼于能够在文本编辑器、浏览器开发者工具等开发工具中浏览 WebAssembly 文件，而本文则介绍了这种文件格式的规范与工作原理，以及底层的字节码与上层的 JavaScript 对象之间的关联关系。( &lt;a href="https://parg.co/bk6" target="_blank" rel="noopener">https://parg.co/bk6&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJ5" target="_blank" rel="noopener">《JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest》&lt;/a>：在开始新的前端项目时，我们常常会考虑应该使用哪一个单元测试框架，或者考虑应该为哪些代码添加单元测试。而本文则对于常用的 Web 开发中的单元测试框架 Jasmie、Mocha、AVA、Tape 以及 Jest 进行了横向对比，并且基于自己的经验给出了不同应用场景与需求下不同的单元测试框架选项建议。( &lt;a href="https://parg.co/bJ5" target="_blank" rel="noopener">https://parg.co/bJ5&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJr" target="_blank" rel="noopener">《Web 前端开发的未来》&lt;/a>：本文作者从自己的实践出发畅想了未来 Web 前端开发的可能方向；主要包括 JavaScript 新特性的增强以及对于状态管理的深入、从简单界面逐渐过渡到完整系统、原生与 Web 之间的边界逐步消失、CSS 会逐步模块化并且预处理器会逐步退出历史舞台、性能仍然是关键瓶颈以及 URL 会变得愈发重要等多个方面。( &lt;a href="https://parg.co/bJr" target="_blank" rel="noopener">https://parg.co/bJr&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bis" target="_blank" rel="noopener">《面向 Web 设计师与开发者的免费电子书合集》&lt;/a>：本文介绍了十数本优秀的面向 Web 设计师与开发者的免费的电子书，涵盖了 CSS&amp;amp;HTML 基础、现代 JavaScript 开发、Git、PHP 等多个领域。( &lt;a href="https://parg.co/bis" target="_blank" rel="noopener">https://parg.co/bis&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/hyperapp/hyperapp" target="_blank" rel="noopener">《hyperapp》&lt;/a>：hyperapp 是仅 1KB 大小的用于构建前端应用的 JavaScript 库，它基于 Elm 架构，支持声明式界面编程与函数式编程，允许使用 JSX 声明界面并且灵活地分割与合并自定义的标签。hyperapp 实现的简洁明了，是不错的可以阅读源码的轻量级框架。( &lt;a href="https://github.com/hyperapp/hyperapp" target="_blank" rel="noopener">https://github.com/hyperapp/hyperapp&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html" target="_blank" rel="noopener">《这 WebAssembly，是 Mozilla 赢了》&lt;/a>：Mozilla 提出 1 asm.js 与 Google Chrome 提出的 PNaCI 是都是致力于在浏览器中运行原生代码的技术方案。不过 PNaCI 却存在着自绝于 JavaScript 以及 HTML 等问题，并且其他的浏览器厂商很难去支持 PNaCI 标准。而 asm.js 则以轻量级的对于标准 Web 平台扩展的方式实现了这一目标，也就导致了最终 WebAssembly 决定靠近 asm.js 而不是 PNaCI。( &lt;a href="http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html" target="_blank" rel="noopener">http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bi0" target="_blank" rel="noopener">《JavaScript 模块现状》&lt;/a>：近日随着各大浏览器纷纷开始支持 ESM(ECMAScript Moduls)，Node.js 中也计划引入 &lt;code>*.mjs&lt;/code> 作为 ESM 的文件扩展名，关于 JavaScript 模块化的未来发展也在社区引发了热切讨论。本文则是首先介绍了 ESM 在浏览器、Webpack 等构件工具以及 Node.js 中未来的实现，然后讨论了个人对于 ESM 未来发展以及对于程序开发本身的潜在影响。( &lt;a href="https://parg.co/bi0" target="_blank" rel="noopener">https://parg.co/bi0&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.openbloc.fr/webassembly-first-steps/" target="_blank" rel="noopener">《WebAssembly 初体验：重构简单游戏引擎》&lt;/a>：WebAssembly 为我们提供了构建高性能的前端应用的途径，而本文则从零开始介绍如何使用 C 来覆写简单的 JavaScript 游戏引擎并且将其编译为 WebAssembly。本文依次介绍了如何搭建基础的 Emscription 工具链、使用 JavaScript 引入 wasm 模块、覆写并且优化某个小型游戏引擎、两个引擎的性能评测等等部分。( &lt;a href="http://blog.openbloc.fr/webassembly-first-steps/" target="_blank" rel="noopener">http://blog.openbloc.fr/webassembly-first-steps/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLS" target="_blank" rel="noopener">《CSS 局部作用域变量详解》&lt;/a>：CSS 自定义属性或者所谓的 CSS 变量，为我们带来了真正的、不同于 SASS 等预处理框架中使用的类占位符的动态变量。本文介绍了 CSS 变量的基本定义语法与使用，以及如何使用 JavaScript 来动态修改 CSS 变量值从而动态地进行界面重渲染，最后阐述了目前浏览器对于 CSS 变量的支持情况以及可以使用的兼容方式。( &lt;a href="https://parg.co/bLS" target="_blank" rel="noopener">https://parg.co/bLS&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://thejameskyle.com/adopting-flow-and-typescript.html" target="_blank" rel="noopener">《Flow 与 TypeScript》&lt;/a>：本文主要对比了 Flow 与 TypeScript 这两个常用的 JavaScript 静态类型检测工具，首先介绍了在简单项目中如何使用 TypeScript 与 Flow。然后对比了二者在类型覆盖率上的渐进对比，会发现使用 Flow 之后因为其较为严格的类型要求会相对较快地实现高覆盖，而 TypeScript 则相对较为松弛。( &lt;a href="http://thejameskyle.com/adopting-flow-and-typescript.html" target="_blank" rel="noopener">http://thejameskyle.com/adopting-flow-and-typescript.html&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://thejameskyle.com/javascripts-new-private-class-fields.html" target="_blank" rel="noopener">《JavaScript 中类的私有域定义》&lt;/a>：目前对于类中的私有域定义已经达到了 Stage 2，本文即是详细介绍 #private 语法的使用以及设计理念。顾名思义，我们可以使用 #privateFieldName 方式来定义类中的私有域，该私有域仅允许该类的方法访问(包括静态方法)。本文还介绍了使用这种 HashTag 方式而不是其他语言中常见的 private 关键字来定义的考量。( &lt;a href="http://thejameskyle.com/javascripts-new-private-class-fields.html" target="_blank" rel="noopener">http://thejameskyle.com/javascripts-new-private-class-fields.html&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLZ" target="_blank" rel="noopener">《CSS 的现状》&lt;/a>：毫无疑问我们正在见证着 JavaScript 社区与生态的极速变化，而与此同时可能很多人没有关注到 CSS 社区的进展，本文作者则是对于 CSS 的现状进行了综述并且提出了个人的观点。本文作者主要提出了五个论点：我们可以使用 CSS Module 来替代原有的 BEM 等命名方案、使用 Flexbox 来替代 float、使用 CSS Grid 来替代第三方网格库、使用 CSS 内置的变量、计算函数等特性来替代 SASS 等预处理库，乃至于最终我们完全可以使用 CSS-in-JS 来替代 CSS。本文具有极强的主观色彩，请批判性阅读。( &lt;a href="https://parg.co/bLZ" target="_blank" rel="noopener">https://parg.co/bLZ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/naver/billboard.js" target="_blank" rel="noopener">《billboard.js》&lt;/a>：基于 D3 v4+ 的轻量级可重用的 JavaScript 图表库，支持 IE 9 以上浏览器。billboard.js 为我们提供了常见的柱状图、时序图、饼图等等多种图表类型。( &lt;a href="https://github.com/naver/billboard.js" target="_blank" rel="noopener">https://github.com/naver/billboard.js&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9o" target="_blank" rel="noopener">《如何用好 JavaScript console》&lt;/a>：JavaScript 中最主要的的调试工具之一即是 &lt;code>console.log&lt;/code>，而 console 对象还包含着其他几个常用的调试方法。本文则是介绍了 console 对象，以及如何使用它进行简单的时间消耗评测、优化数组或者对象输出格式、通过 CSS 优化输入等等。( &lt;a href="https://parg.co/b9o" target="_blank" rel="noopener">https://parg.co/b9o&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bv9" target="_blank" rel="noopener">《现代 Web 开发魔法书》&lt;/a>：本书是对现代 JavaScript Web 开发中涉及知识的分类与介绍，来源于作者日常工作中发送给全栈 Web 团队新人的资源；目前已经纳入了超过两千的涵盖了项目、工具、插件、服务、文章、数据、站点等多方面的链接。本书包含了 Web 平台概述、HTML5，CSS，JS 特性介绍、常用的 GUI 框架与架构介绍、应用开发流程中使用的工具介绍等等栏目。( &lt;a href="https://parg.co/bv9" target="_blank" rel="noopener">https://parg.co/bv9&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9K" target="_blank" rel="noopener">《基于 JavaScript 的机器学习》&lt;/a>：人工智能与机器学习的浪潮汹涌而来，JavaScript 也并非旁观者；可能有很多人认为 JavaScript 过于缓慢、缺乏大量的科学计算库、仅适用于 Web 开发，而本文以及系列文章则深入浅出地介绍了如何利用 JavaScript 进行常见的深度学习操作。本文即以简单的回归拟合为例，从最基础的库安装、数据导入、数据预处理到模型训练、模型预测 介绍了如何使用 JavaScript 进行简单的机器学习任务。( &lt;a href="https://parg.co/b9K" target="_blank" rel="noopener">https://parg.co/b9K&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9p" target="_blank" rel="noopener">《JavaScript 内存管理速成》&lt;/a>：本系列文章以漫画的方式生动有趣地介绍了 JavaScript 中内存管理的相关知识，首先介绍了 JavaScript 与 C 这两个风格迥异的语言是如何进行内存管理的，然后讨论了 ArrayBuffers 与 ShardArrayBuffurs 存在的意义以及可能引起的临界情况，最后讨论了在未来 WebAssembly 开发中应该如何使用 Atomics 来处理并发情况下的临界情况。( &lt;a href="https://parg.co/b9p" target="_blank" rel="noopener">https://parg.co/b9p&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byh" target="_blank" rel="noopener">Rust、WebAssembly 与 Webpack&lt;/a>：WebAssembly 是新的运行于 Web 平台的二进制格式，我们能够将 C、C++、Rust 这些语言编译到 .wasm 文件格式中然后在浏览器环境下运行他们；通常这些编译后的代码在包体体积与运行速度上都会比 JavaScript 有明显提升。而本文则着眼于介绍如何在浏览器中执行底层的 Rust 代码，也可以参考&lt;a href="https://parg.co/by4" target="_blank" rel="noopener">这篇文章&lt;/a>( &lt;a href="https://parg.co/by4" target="_blank" rel="noopener">https://parg.co/by4&lt;/a> )来了解更多的关于 WebAssembly 快速实践的知识。( &lt;a href="https://parg.co/byh" target="_blank" rel="noopener">https://parg.co/byh&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byr" target="_blank" rel="noopener">JavaScript 在嵌入式设备与物联网中的应用现状&lt;/a>：随着近年来 Web 的发展与 JavaScript 的崛起，JavaScript 被应用到了许多原本不曾想象到的场景中，从服务端、工作站、数据库、桌面环境到物联网设备中，都可以见到 JavaScript 的身影。而本文则概括了 JavaScript 在不同的嵌入式微型设备中的应用现状，并且选择了具有代表性的设备介绍了具体的使用场景与实践方法。( &lt;a href="https://parg.co/byr" target="_blank" rel="noopener">https://parg.co/byr&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byR" target="_blank" rel="noopener">基于 JavaScript 的机器学习：深入监督学习算法&lt;/a>：本文是基于 JavaScript 的机器学习系列的第二部分，主要介绍监督学习算法 kNN。kNN 算法通常被用于分类或者回归问题，本文首先介绍了 kNN 算法的基础原理，然后介绍了如何利用 ml-knn、csvyojson、prompt 等库对 Iris 数据集中的数据进行训练与预测。( &lt;a href="https://parg.co/byR" target="_blank" rel="noopener">https://parg.co/byR&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/by6" target="_blank" rel="noopener">JavaScript 中存在纯函数吗？&lt;/a>：随着函数式编程在前端界面开发中的流行，纯函数的概念相信很多人都很熟悉，不过文本作者认为 JavaScript 中是否存在真正意义上的纯函数还值得商榷。本文首先介绍了纯函数的基本定义，然后给出了我们熟知的 JavaScript 中常见的纯函数定义范式。不过作者认为函数是 JavaScript 中的一等公民，函数变量或者某个 Object 的属性方法都有可能被重新赋值，因此 JavaScript 中无法构建真正严格的纯函数。( &lt;a href="https://parg.co/by6" target="_blank" rel="noopener">https://parg.co/by6&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beo" target="_blank" rel="noopener">基于 Headless Chrome 的自动化测试&lt;/a>：本文介绍了如何在 Headless Chrome 环境中使用 Karma 作为测试驱动运行基于 Mocha 与 Chai 的自动化测试用例。Headless Chrome 允许我们在无界面环境下，使用特性完备的 Chrome 来执行 JavaScript 脚本并且渲染网页。本文首先介绍了使用 karma-chrome-launcher 来搭建本地启动 Chrome 环境，然后介绍了使用 Mocha 与 Chai 来编写基础测试用例，最后还讨论了如何自定义 Headless Chrome 启动器并且集成到 Travis CI 环境下。( &lt;a href="https://parg.co/beo" target="_blank" rel="noopener">https://parg.co/beo&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beE" target="_blank" rel="noopener">Webpack 中的作用域提升简介&lt;/a>：近日发布的 Webpack 3 中引入了所谓的 Scope Hoisting 新特性，从社区的反馈来看该特性已经在很多项目中成功地帮助开发者减少包体大小，提高首屏加载效率；本文则是简要地介绍了 Webpack 3 中作用域提升的基础原理。本文假设你对于 JavaScript 中闭包与模块语法有所了解，首先介绍了在老版本 Webpack 中采用的作用域分割机制及其存在的额外的性能损耗，然后对比呈现了在引入作用域提升机制之后，打包而成的文件的形式，与其带来的性能提升原理。( &lt;a href="https://parg.co/beE" target="_blank" rel="noopener">https://parg.co/beE&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beb" target="_blank" rel="noopener">为什么我们选择 TypeScript&lt;/a>：本文是 Reddit 工程师 Niranjan Ramadas 记述在前端技术选型时选用 TypeScript 的考虑过程。作者认为任何语言都有其优缺点，不过合适的语言应该具备如下特点：强类型、完备的工具链支持、能够用于生产环境等。作者还特地比较了 TypeScript 与 Flow，TypeScript 是能够编译到 JavaScript 的超集语言，而 Flow 则是提供了一系列额外的注解来实现类型系统。Flow 能够保证较好的类型覆盖，但是其对于多态性的支持并不是很好，并且 TypeScript 的社区也相对活跃。( &lt;a href="https://parg.co/beb" target="_blank" rel="noopener">https://parg.co/beb&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bXD" target="_blank" rel="noopener">TC39，ECMAScript 与 JavaScript 的未来&lt;/a>：本文是 Nicolás Bevacqua 在腾讯前端大会上发表的同名演讲的总结，介绍了 TC39 与 ECMAScript 的含义，概述了 ECMAScript 中提案的步骤以及部分代表性提案，同时还畅谈了 JavaScript 的未来发展方向。作者介绍了 Stage 0、Stage 1、Stage 2、Stage 3 这四个提案处理进度的具体含义与要求，并且列举了 Array#includes、Named Captures 等具体的例子来阐述 JavaScript 不断衍化的语法特性；作者还介绍了未来社区会持续关注的代码转译与适配、代码质量保证、代码打包与发布等多个领域。( &lt;a href="https://parg.co/bXD" target="_blank" rel="noopener">https://parg.co/bXD&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beH" target="_blank" rel="noopener">JavaScript 中的函数式编程就是反模式(*本文仅代表原作者个人意见)&lt;/a>：作者在本文中对比讨论了 JavaScript 与 Clojure，并且介绍了 ClojureScript 的基础用法与优势所在。作者首先讨论了他认为的函数式脚本语言应该包含的特性，包括充分的 API、内建的不可变数据结构等；然后阐述了 lodash、fp、Rambda 这样的单个库存在的不足，譬如 ImmutableJS 虽然能较好地解决部分问题，但是却会割裂使用者的开发体验。最后笔者介绍了 ClojureScripe 的特性与优点，包括能够在编辑器中单行运行、内建的大量转化函数、较好地性能与代码可读性保证等等。( &lt;a href="https://parg.co/beH" target="_blank" rel="noopener">https://parg.co/beH&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wearehive/project-guidelines" target="_blank" rel="noopener">JavaScript 项目开发样式指南&lt;/a>：开启新的项目就好像在绿地上肆意撒欢，此时的开发者拥有极大的自由；不过如果缺乏良好的基石，未来的项目维护可能会成为你的梦魇。本文即搜集了来自 &lt;a href="http://wearehive.co.uk/" target="_blank" rel="noopener">Hive&lt;/a> 研发团队的 JavaScript 项目开发指南，涵盖了 Git、文档规范、环境变量控制、依赖管理、测试、文件结构与命名、代码样式、日志、API 设计等多个方面；更多 JavaScript 工程实践资料参考&lt;a href="https://parg.co/bIO" target="_blank" rel="noopener"> https://parg.co/bIO &lt;/a>。( &lt;a href="https://github.com/wearehive/project-guidelines" target="_blank" rel="noopener">https://github.com/wearehive/project-guidelines&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIL" target="_blank" rel="noopener">前端 JavaScript 面试问题总结&lt;/a>：本文作者发现目前并没有太多令人满意的前端 JavaScript 面试问题列表，因此他基于自己的面试经历与实践总结出了本文。本文主要包含以下部分，首先是基础概念的认知，譬如对于闭包、EventLoop、REST 等概念的介绍；然后是对于编码能力的考量，譬如对于常见的数据结构与算法的实现、代码调试能力与错误定位的评测等等；最后是对于整体系统设计能力的考量，譬如如何设计全栈的 Twitter 实现架构等等。( &lt;a href="https://parg.co/bIL" target="_blank" rel="noopener">https://parg.co/bIL&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIC" target="_blank" rel="noopener">JavaScript 开发中常用的十大数据结构详解&lt;/a>：数据结构是软件开发的重要组成部分之一，也是求职面试中常见的主题之一；本文将回顾介绍 JavaScript 中常用的十大数据结构，并且给出详细的教程与在线实践链接。本文涉及到的数据结构包括链表、栈、队列、集合、映射、哈希表、二叉搜索树、Trie 树、二叉堆、图等；更多数据结构与算法相关资料参考 &lt;a href="https://parg.co/bIt" target="_blank" rel="noopener"> https://parg.co/bIt &lt;/a>。( &lt;a href="https://parg.co/bIC" target="_blank" rel="noopener">https://parg.co/bIC&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Kristories/awesome-guidelines" target="_blank" rel="noopener">代码风格约定与标准&lt;/a>：本仓库提供了一系列的各个语言的常用代码风格约定与标准，与 JavaScript 相关的包含了来自 Google、Airbnb 等多个公司或者社区的样式规范，还有包括 HTML、CSS、SCSS 等一系列 Web 相关的规范。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bay" target="_blank" rel="noopener">ES6 中的 JavaScript 工厂函数实现&lt;/a>：本文归属于 Eric Elliott 发布的 Composing Software 系列，介绍在 JavaScript ES6 语法背景下如何实现工厂函数。所谓工厂函数即是非类或者构造函数的，能干会某个新创建对象的函数；工厂函数能够简化我们创建新对象的过程，本文即是详细地介绍了如何实现工厂函数，也是一篇不错的 ES6 函数语法讲解；更多 JavaScript 相关资料参考&lt;a href="https://parg.co/bMI" target="_blank" rel="noopener"> https://parg.co/bMI &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mo.github.io/2017/07/20/javascript-e2e-integration-testing.html" target="_blank" rel="noopener">基于 JavaScript 的 Web 应用的端到端测试工具对比&lt;/a>：本文回顾了常见的基于 JavaScript 的，用于对 Web 应用进行端到端测试的工具，并且对它们进行了简单对比。本文首先探讨了项目中应用端到端测试的意义，然后列举了当前可用的基于 JavaScript 的界面自动化测试框架，然后比较了不同的端到端测试框架的流行程度与基本的代码片风格；更多 Web 测试相关资料参考&lt;a href="https://parg.co/bWd" target="_blank" rel="noopener"> https://parg.co/bWd &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/syg/ecmascript-binary-ast/" target="_blank" rel="noopener">JavaScript Binary AST 提案&lt;/a>：随着 Web 应用体积的不断增加，页面启动时间逐渐成为了应用性能的主要瓶颈之一；我们可以通过多种方式来缓存代码，但是对于大型代码库的解析却难以直观解决。譬如在现代的笔记本上，Chrome 在加载 Facebook.com 的时候需要花费 10% 到 15% 的时间来解析 JavaScript 代码。本文介绍了由多位工程师提出的旨在提升 JavaScript 解析速度的 Binary AST 方案，本文介绍了当前解析中的瓶颈所在，并且给出了相应的解决建议。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/" target="_blank" rel="noopener">自定义基于 JavaScript 的 16 位虚拟机&lt;/a>：本文介绍了如何利用 JavaScript 自定义 16 位虚拟机，主要包括如何设计某个简单的汇编语言、如何构建某个编译器能够将 &lt;code>*.asm&lt;/code> 文件编译为可执行格式、如何构建某个能够模拟内存、CPU 以及部分 IO 操作的虚拟机。文章内容依次介绍了虚拟硬件的基础、限制、汇编语言、编译器、调试器、编码与解码等内容；更多 JavaScript 相关资料参考&lt;a href="https://parg.co/bMI" target="_blank" rel="noopener"> https://parg.co/bMI &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgG" target="_blank" rel="noopener">JavaScript 设计模式学习&lt;/a>：本书是 Addy Osmani 著作的开源书籍，主要介绍面向 JavaScript 语言的经典与现代的常用设计模式。所谓设计模式即是软件设计中常见问题的可复用解决方案，对于任何一门编程语言都是非常值得探索的话题。本文首先概述了设计模式的基础理论，然后介绍了 JavaScript 中常见的十余种类与对象的设计模式，接下来介绍了 JavaScript 界面设计相关的 &lt;code>MV*&lt;/code> 设计模式，然后还介绍了 JavaScript 模块化设计以及 jQuery 中的设计模式等内容；更多 JavaScript 设计模式相关参考&lt;a href="https://parg.co/bIO" target="_blank" rel="noopener"> https://parg.co/bIO &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan/" target="_blank" rel="noopener">V8 新的 Turbofan JIT 编译器带来的性能特性概述&lt;/a>：V8 JavaScript 引擎最早是 Google 为 Chrome 浏览器开发的 JavaScript 虚拟机，其设计的初衷就是为了让 JavaScript 能够高速运行；而这种性能优化的保障就是所谓 JIT 编译器。本文着眼于介绍 V8 新的 Turbofan JIT 编译器提供的新的性能特性能够为应用带来的优化；本文依次介绍了使用 delete 操作符与设置为 undefined 这两种不同的去除对象属性的方式在新的编译器下的表现差异、对于 Arguments 参数不同操作的对比、柯里函数与 bind 操作符的优化，以及对象遍历、对象创建和对于新旧引擎中对于常见的 Winston 等日志框架的性能对比等内容。更多 JavaScript 引擎相关知识参考&lt;a href="https://parg.co/bgp" target="_blank" rel="noopener"> https://parg.co/bgp &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/bpesquet/thejsway" target="_blank" rel="noopener">JavaScript 之路&lt;/a>：本书希望为任何对 JavaScript 有兴趣的开发者提供 JavaScript 的多领域知识，其兼具了入门简单、对初学者友好、使用 ES2015 语法以及规范的样式指南等特点。本书主要包含以下章节：JavaScript 语法基础、利用 DOM 接口创建交互性的网页、构建完整的 Web 应用等内容；更多 JavaScript 相关资料参考&lt;a href="https://parg.co/bMI" target="_blank" rel="noopener"> https://parg.co/bMI &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/web-development-trends-2017-387421cf9c23" target="_blank" rel="noopener">2017 Web 开发趋势&lt;/a>：Web 开发在 2016 年里得到了长足的发展与进步，而本文则高屋建瓴地分析了 2017 年中 Web 开发可能面临的机遇与挑战。作者首先讨论了人工智能的前景以及 Web 与之相结合的案例，然后讨论了物联网行业中 Web 相关的开发案例；接下来作者分析了崛起的 JavaScript 以及目前流行的项目，然后又从静态网站生成器、虚拟现实、GIFs、Bots 等角度讨论其他的发展方向。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/denysdovhan/wtfjs" target="_blank" rel="noopener">JavaScript 中有趣而又无语的例子&lt;/a>：JavaScript 是一门有趣的语言，它有着简单的语法、庞大的生态系统与社区，不过 JavaScript 中也有着很多令人无语的地方。本文即是对 JavaScript 中一些有趣的、出乎意料的用法收集，对于初学者是个不错的深入教程，而对于资深开发者也可以拿来作为面试题目。本文中包含的例子譬如 &lt;code>[] == ![]&lt;/code>、NaN 的用法注意、try-finally 等等；更多 JavaScript 相关资料参考&lt;a href="https://parg.co/bMI" target="_blank" rel="noopener"> https://parg.co/bMI &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=8UqHCrGdxOM" target="_blank" rel="noopener">基于 Proxy 的 PopUnder 库反混淆&lt;/a>：本视频通过对某个商用的 Chrome 59 中 PopUnder 库，的执行过程解析，来介绍如何利用 ES6 的 Proxy 进行，简单的 JavaScript 混淆代码逆向破解。视频还是挺有意思的，作者首先分析了经过混淆的源代码，发现无法下手；然后利用 Proxy 监听常见的 Windows 中 createElement 等函数的调用来了解该库的执行流程，最后再根据 API 的调用顺序复现出该库。更多 JavaScript 设计模式相关参考&lt;a href="https://parg.co/bIO" target="_blank" rel="noopener"> https://parg.co/bIO &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bjw" target="_blank" rel="noopener">三周时间打造全栈 JavaScript Web 应用&lt;/a>：本文记录了某个编程初学者如何用三周时间，循序渐进地从零构建出，基于 JavaScript 的全栈电子商务应用。本文从最初的产品设计与原型图构建开始，然后介绍了如何选择合适的数据结构与数据库。接下来介绍了如何创建 Github 仓库并且使用敏捷开发流程，最后介绍了如何利用 Express 与 Firebase 搭建服务端、使用 React 以及 Victory.js 构建前端应用等内容；更多 JavaScript 相关学习参考&lt;a href="https://parg.co/bWW" target="_blank" rel="noopener">现代 JavaScript 开发：语法基础与实践技巧&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b29" target="_blank" rel="noopener">基于 CSS 与 JavaScript 的帧动画教程&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>#开源项目&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.dwitter.net/" target="_blank" rel="noopener">《开源在线代码演示网站 Dwitter 发布 》&lt;/a>：Dwitter 是类似于 CodePen 这样的，不过专注于 JavaScript 代码片演示的网站，已经有很多开发者在上面贡献了奇妙的基于 JavaScript 的动画或者小程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.dwitter.net/" target="_blank" rel="noopener">《开源在线代码演示网站 Dwitter 发布 》&lt;/a>：Dwitter 是类似于 CodePen 这样的，不过专注于 JavaScript 代码片演示的网站，已经有很多开发者在上面贡献了奇妙的基于 JavaScript 的动画或者小程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jaredreich/notie" target="_blank" rel="noopener">《notie》&lt;/a>：这是一个轻量级的、零依赖的面向 JavaScript 的通知、输入以及选择套件库。它允许弹出警示信息、确认输入框、允许用户输入信息、允许用户进行选择以及进行日期选择等。( &lt;a href="https://github.com/jaredreich/notie" target="_blank" rel="noopener">https://github.com/jaredreich/notie&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://janhuenermann.com/projects/learning-to-drive" target="_blank" rel="noopener">《在浏览器中实现自动驾驶汽车》&lt;/a>：人工智能与深度学习的浪潮滚滚而来，也给我们带来了很多有趣的应用。该项目利用 JavaScript 创建了一个完整的自我学习的代理，能够在一个 2D 环境下控制某个车辆自动规避各种障碍 。用户还可以通过鼠标绘制出新的障碍，而小车可以通过强化学习不断进行自我更新，值得一试。( &lt;a href="http://suo.im/4egERz" target="_blank" rel="noopener">http://suo.im/4egERz&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/giakki/uncss" target="_blank" rel="noopener">《UnCSS》&lt;/a>：UnCSS 能够帮助你从样式表中移除 HTML 中未被用到的样式，它支持多文件以及 JavaScript 样式定义，并且提供了接口、命令行、构建插件、POSTCSS 插件等多种使用方式。( &lt;a href="https://github.com/giakki/uncss" target="_blank" rel="noopener">https://github.com/giakki/uncss&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ballercat/wasm-loader" target="_blank" rel="noopener">《wasm-loader》&lt;/a>：wasm-loader 是能够用于 Webpack 的 WASM 二进制模块导入工具，其能够允许你在 JavaScript 代码中导入 wasm 格式文件并且将二进制文件打包成为 JS Bundle 的一部分 。( &lt;a href="https://github.com/ballercat/wasm" target="_blank" rel="noopener">https://github.com/ballercat/wasm&lt;/a> -loader )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/nolanlawson/marky" target="_blank" rel="noopener">《marky》&lt;/a>：marky 是基于 performance.mark/measure 封装的高性能 JavaScript 计时器，其相较于&lt;code>console.time()&lt;/code>以及&lt;code>console.timeEnd()&lt;/code>具有更好地性能表现，相较于简单的&lt;code>Date.now()&lt;/code>具有更好地准确度。( &lt;a href="https://github.com/nolanlawson/marky" target="_blank" rel="noopener">https://github.com/nolanlawson/marky&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://piqnt.com/planck.js/" target="_blank" rel="noopener">《Planck.js》&lt;/a>：Planck.js 是基于 JavaScript 的 2D 物理引擎，能够用于创建跨平台的 HTML 游戏。( &lt;a href="http://piqnt.com/planck.js/" target="_blank" rel="noopener">http://piqnt.com/planck.js/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://atomiks.github.io/tippyjs/" target="_blank" rel="noopener">《Tippy.js》&lt;/a>：Tippy.js 是基于纯粹的 JavaScript 的轻量级无添加的 ToolTip 库。( &lt;a href="https://atomiks.github.io/tippyjs/" target="_blank" rel="noopener">https://atomiks.github.io/tippyjs/&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/mozilla/fathom" target="_blank" rel="noopener">《Fathom》&lt;/a>：Fathom 是 Firefox 开源的用于提取网页中有意义内容的 JavaScript 框架，其能够有效识别页面中的前进/后退按钮、地址表单以及主文本内容等等。( &lt;a href="https://github.com/mozilla/fathom" target="_blank" rel="noopener">https://github.com/mozilla/fathom&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/loadimpact/k6" target="_blank" rel="noopener">《k6》&lt;/a>：k6 是基于 Go 与 JavaScript 开发的现代压测工具，它提供了非常清晰简单的 JavaScript 接口；同时它基于 Go 提供了分布式的部署方案，支持云端部署与 REST 接口控制。( &lt;a href="https://github.com/loadimpact/k6" target="_blank" rel="noopener">https://github.com/loadimpact/k6&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b8n" target="_blank" rel="noopener">《Mavo》&lt;/a>：Mavo 是纯粹的基于 HTML 标记的用来创建富客户端 Web 应用的框架，它允许开发者在没有服务端或者 JavaScript 脚本的情况下快速创建动态应用。( &lt;a href="https://parg.co/b8n" target="_blank" rel="noopener">https://parg.co/b8n&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://workboxjs.org/" target="_blank" rel="noopener">《Workbox》&lt;/a>：Workbox 是来自 Google Chrome 团队的快速将现有应用转化为 Progressive Web Apps 的 JavaScript 库；Workbox 允许我们通过 Webpack 插件、Gulp 插件以及 npm 脚本的方式快速地为当前应用的资源创建对应加载 ServiceWorker。( &lt;a href="https://workboxjs.org/" target="_blank" rel="noopener">https://workboxjs.org/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://achrafkassioui.com/birdview/" target="_blank" rel="noopener">《Birdview.js》&lt;/a>：Birdview.js 是个非常有趣的 JavaScript 插件，它能将整个页面以鸟瞰图的方式呈现给用户，并且允许用户直接进入选中的点。( &lt;a href="http://achrafkassioui.com/birdview/" target="_blank" rel="noopener">http://achrafkassioui.com/birdview/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/decaffeinate/decaffeinate" target="_blank" rel="noopener">decaffeinate&lt;/a>：CoffeeScript 在很长一段时间内帮我们解决了传统 JavaScript 中存在的痛点，不过随着 ES6&amp;amp;ES7 的逐步流行，我们还是要从 CoffeeScript 中回归到 JavaScript；decaffeinate 正是能够方便地将 CoffeeScript 代码转化为现代的 JavaScript 代码。( &lt;a href="https://github.com/decaffeinate/decaffeinate" target="_blank" rel="noopener">https://github.com/decaffeinate/decaffeinate&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://golden-layout.com/" target="_blank" rel="noopener">golden-layout&lt;/a>：golden-layout 是非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗，同时 golden-layout 还提供了丰富的接口以方便动态增删元素、修改布局或者自定义主题。golden-layout 官网还提供了与 RequireJS、React、Angular 等多种其他流行框架协同使用的示例。( &lt;a href="http://golden-layout.com/" target="_blank" rel="noopener">http://golden-layout.com/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/GianlucaGuarini/icaro" target="_blank" rel="noopener">icaro&lt;/a>：icaro 是轻量、高效地 JavaScript 对象观察者实现，能够自动监测 JavaScript 中对象的变化并且进行相应地譬如 DOM 更新等操作。icaro 使用了大量的 ES6 的特性，譬如 Proxies、WeakMaps、Maps 以及 Symbols，是非常不错的可以用来学习利用最新的语言特性实现 JavaScript 响应式框架的开源库。( &lt;a href="https://github.com/GianlucaGuarini/icaro" target="_blank" rel="noopener">https://github.com/GianlucaGuarini/icaro&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/samccone/bundle-buddy" target="_blank" rel="noopener">Bundle Buddy&lt;/a>：Bundle Buddy 能够通过分析编译生成的 SourceMap 来寻找 JavaScript 代码块之间的源代码冗余情况。该工具能够帮助开发者寻找合适的代码分割点以降低最终发布应用的不稳定性，同时还能提升页面加载性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/gpujs/gpu.js" target="_blank" rel="noopener">gpu.js&lt;/a>：在&lt;a href="https://zhuanlan.zhihu.com/p/27815800" target="_blank" rel="noopener">上周的前端每周清单&lt;/a>中我们介绍过 GPGPU(General Purpose Computing on GPUs)的概念与基于 WebGL 的实现方式，而 gpu.js 就是提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库。gpu.js 能够自动地将某些特定的 JavaScript 函数编译为中间语言，然后利用 WebGLS API 使其运行在 GPU 中；而在某些无法使用 GPU 的环境下，仍然会将这些函数以正常的 JavaScript 执行流运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/KingPixil/wade" target="_blank" rel="noopener">Wade&lt;/a>：Wade 是轻量级、高性能的 JavaScript 搜索库，Wade 会在构建阶段自动地为输入数组中的每个字符串的字符构建反向索引，然后在搜索时候快速返回用户输入关键字对应地下标；Wade 优势在于对于相同的数据集进行多次搜索时能够避免冗余的遍历。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWb" target="_blank" rel="noopener">swagger-decorator&lt;/a>：swagger-decorator 是旨在一处注解多处使用的 JavaScript &amp;amp; Node.js 应用中实体类与方法注解库，其能够用于实体类生成与校验、Sequelize ORM 实体类生成、面向 Koa 的路由注解与 Swagger 文档自动生成的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ai/nanoid" target="_blank" rel="noopener">Nano ID&lt;/a>: Nano ID 是轻量级的、支持 URL 的 JavaScript 唯一 ID 生成器，它使用了强力密码加密的随机 API，能够保证生成符号分布的平均性。&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Node</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/node/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/node/</guid><description>&lt;h1 id="前端每周清单半年盘点之-nodejs-篇">前端每周清单半年盘点之 Node.js 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 Node.js 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMj" target="_blank" rel="noopener">掌握 Node.js 核心模块之文件系统&lt;/a>：本文介绍 Node.js 核心模块中与文件系统、文件流等相关的部分，同时还介绍了实际开发中常用的第三方文件库。本文首先介绍了基本的读取与写入操作，然后介绍了权限控制、监听等功能，最后讨论了使用 graceful-fs、mock-fs、lockFile 等优秀的第三方库来辅助开发。( &lt;a href="https://parg.co/bMj" target="_blank" rel="noopener">https://parg.co/bMj&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;amp;mid=2247484996&amp;amp;idx=1&amp;amp;sn=a1b037ececa56de2d878f4d6c91540f1" target="_blank" rel="noopener">《关于 Node.js 存在反序列化远程代码执行漏洞的安全公告》&lt;/a>：近日，国家信息安全漏洞共享平台(CNVD)收录了 Node.js 反序列化远程代码执行漏洞(CNVD-2017-01206，对应 CVE-2017-594)。攻利用漏洞执行远程执行操作系统指令，获得服务器权限。由于目前验证代码已经公开，极有可能诱发大规模网站攻击。Node.js 反序列化模块 node-serialize 库中的 unserialize()函数未做安全处理，该漏洞通过传递调用 JavaScript IIFE 函数表达式的方式实现远程任意代码执行的效果。攻击者可通过远程攻击获得当前服务器运行环境权限，由于实际部署中 node.js 运行环境较多为操作系统 root 权限，因此可完全控制服务器主机。CNVD 对该漏洞的综合评级为“高危”。目前，相关利用方式已经在互联网上公开，近期出现攻击尝试爆发的可能。不过根据&lt;a href="https://www.zhihu.com/question/55860542/answer/146613147" target="_blank" rel="noopener">原作者表述&lt;/a>，实际上这个库在 GitHub 上一共只有 20 个 star，还有几个是漏洞文章发布后引来的，而且下载量也是非常少。如果想要避免此类安全问题，需要解决的就是确保用户输入的安全。方法比如通过安全传输方式(内网 &amp;amp; 加密)传输序列化字符串、使用如 RSA 等签名算法对字符串进行完整化校验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://mp.weixin.qq.com/s?__biz=MzIwNjQwMzUwMQ==&amp;amp;mid=2247484989&amp;amp;idx=1&amp;amp;sn=b1b4d9686a42498001687b156f2db928" target="_blank" rel="noopener">《一次一个微优化，改进 Node.js 应用的吞吐量》&lt;/a>：本文是多个提高 Node.js 应用吞吐量的小优化技巧介绍，包括尽可能地使用聚合 IO 操作，以批量写的方式来最小化系统调用的次数、需要将发布的开销考虑进内，清除应用中不同的定时器、CPU 分析器能够给你提高一些有用信息，但是并不能完整地反馈整个流程、谨慎使用 ECMAScript 高级语法，特别是你还未使用最新的 JavaScript 引擎或者类似于 Babel 这样的转换器的时候、要洞察你的依赖树的组成并且对你使用的依赖进行适当的性能评测。当我们希望去优化某个包含了 IO 功能的应用性能时，我们需要对于应用耗费的 CPU 周期以及那些妨碍到应用并行化执行的因素了如指掌。本文则是分享作者在提升 Apache Cassandra 项目中的 DataStax Node.js 驱动时的一些思考与总结出的导致应用吞吐量降级的关键因素。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.risingstack.com/concurrency-and-parallelism-understanding-i-o/" target="_blank" rel="noopener">《并发与并行：理解 Node.js 中 IO 底层机制》&lt;/a>：本系列希望能帮助开发者深入了解开发并发应用的相关知识，而本文则是着眼于相对基础的操作系统级别的调度、应用的 IO 这些知识。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://nodejs.org/en/blog/community/quality-with-speed/" target="_blank" rel="noopener">《Node.js 社区的发展之道：质量与速度并重》&lt;/a>: Node.js 社区的核心目标之一就是在快速迭代的同时保证代码质量，新发布的版本务必与之前的版本保持相同的稳定性，避免造成生产环境下应用的崩溃。Node.js 社区并没有一味的寻求妥协，而是不断突破自己，从而在保证变更速度的同时达成较高的质量要求。文本则是 Node.js 社区对于他们发布版本、变更流程以及自动化测试、性能测试等多方面的介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/the-node-js-collection/why-the-hell-would-you-use-node-js-4b053b94ab8e#.71g206imf" target="_blank" rel="noopener">《为何使用 Node.js》&lt;/a>：本文来自于 Node.js 的技术专家 Tomislav Capan，此文最早发布于 2013 年，详细介绍了 Node.js 的内部原理，并且论述了 Node.js 适用的业务场景与典型的范模式。( &lt;a href="http://suo.im/3sFwvm" target="_blank" rel="noopener">http://suo.im/3sFwvm&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bQl" target="_blank" rel="noopener">《你应该知道的关于 Node.js 中模块导入的知识》&lt;/a>：在 Node.js 开发中我们时刻都在于其模块机制打交道，而本文作者则深入浅出地介绍了 Node.js 中负责处理模块依赖的两个核心模块：require 与 module；并且介绍了不同的导入对象在 Node.js 中实际的递归处理流程以及最终在 module 中形成的元数据描述。( &lt;a href="https://parg.co/bQl" target="_blank" rel="noopener">https://parg.co/bQl&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhb" target="_blank" rel="noopener">《Node.js 应用监控实践指南》&lt;/a>：本文介绍生产环境下 Node.js 应用监控实践指南，包括了监控的意义、监控的对象、目前开源的监控解决方案以及一些 SaaS 解决方案等。( &lt;a href="https://parg.co/bhb" target="_blank" rel="noopener">https://parg.co/bhb&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhU" target="_blank" rel="noopener">《使用 Faker.js 为 Node.js 应用创建模拟数据》&lt;/a>：在应用开发中我们往往会头疼于如何构建大量的随机数据，特别是那些符合某些固定模式的数据，我们可能会要用这些数据仿制 RESTful 接口、进行单元测试等等。而 Faker.js 则为我们提供了这样的随机数据生成器。( &lt;a href="https://parg.co/bhU" target="_blank" rel="noopener">https://parg.co/bhU&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4I" target="_blank" rel="noopener">《Node.js 运行时介绍》&lt;/a>：本文是一篇不错的 Node.js 入门介绍的文章，包括了 Node.js 中常见的概念知识、JavaScript 并发模型以及基于 Event Loop 的实现、Node.js 内置的对象，以及 Node.js 缘何取名为 Node.js 等等。( &lt;a href="https://parg.co/b4I" target="_blank" rel="noopener">https://parg.co/b4I&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRR" target="_blank" rel="noopener">《TypeScript 在 Slack 的实践分享》&lt;/a>：维护大型的跨平台的 JavaScript 代码库是一件非常具有挑战性的工作，无论是从 Chrome 的 JavaScript 中传递对象给 Objective-C 或者单纯的接受来自 Node.js 中的回调结果，你都需要保证不同的代码对于通讯对象的期望之间的一致性。而本文即是在开发跨平台多终端的应用中，Slack 使用 TypeScript 来约束类型，从而避免意外的类型不一致导致的崩溃的实践经验分享。( &lt;a href="https://parg.co/bRR" target="_blank" rel="noopener">https://parg.co/bRR&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bfV" target="_blank" rel="noopener">《Node.js 中 Object Streams 的终极指南》&lt;/a>：Node.js 中的流为我们提供了强大的功能，允许我们异步地处理输入与输出，或者在多个独立步骤中进行数据转换。而本文则是首先回顾了流相关的理论，然后介绍了如何像 Gulp 那样进行对象流的转换操作。( &lt;a href="https://parg.co/bfV" target="_blank" rel="noopener">https://parg.co/bfV&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bN4" target="_blank" rel="noopener">《在 Node.js 应用中如何使用 ESLint》&lt;/a>：ESLint 是开源的 JavaScript Linting 工具，它能够帮助开发者解决 JavaScript 无类型语言本身带来的一些错误。ESLint 遵循组件化的设计思想，它允许开发者动态地设置使用的规则，而本文即是介绍基础的 ESLint 环境搭建与使用方法的文章。( &lt;a href="https://parg.co/bN4" target="_blank" rel="noopener">https://parg.co/bN4&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNy" target="_blank" rel="noopener">《8 小时内学习 Node.js》&lt;/a>：Node.js 是基于 Google Chrome V8 引擎的 JavaScript 框架，其能够用于开发类似于视频直播、单页应用等 IO 密集型的 Web 项目。而本文则是提供了完整的从零到一的 Node.js 学习路线图，包含了基础的环境构建、Console 使用、核心模块使用、基本的 Web 服务器搭建等等内容。( &lt;a href="https://parg.co/bNy" target="_blank" rel="noopener">https://parg.co/bNy&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMj" target="_blank" rel="noopener">《掌握 Node.js 核心模块之文件系统》&lt;/a>：本文介绍 Node.js 核心模块中与文件系统、文件流等相关的部分，同时还介绍了实际开发中常用的第三方文件库。本文首先介绍了基本的读取与写入操作，然后介绍了权限控制、监听等功能，最后讨论了使用 graceful-fs、mock-fs、lockFile 等优秀的第三方库来辅助开发。( &lt;a href="https://parg.co/bMj" target="_blank" rel="noopener">https://parg.co/bMj&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bM2" target="_blank" rel="noopener">《使用 Electrino 减少近 99% 的应用大小》&lt;/a>：Electro 是非常不错的利用 Web 技术开发跨平台桌面应用的运行时，不过其缺陷在于打包的应用中往往需要携带 Node.js 与 Chromium 的完整框架，导致了即使是最简单的 HelloWorld 应用也有近 115MB。而 Electrino 提供了类似于 Electron 的接口，不过使用系统自带的 Web 运行时来替代 Chromium，从而保证最后打包出来的应用仅有原来的 0.1% 大小。Electrino 适用于那些不依赖于操作系统本身功能的应用，项目也处于开发状态。( &lt;a href="https://parg.co/bM2" target="_blank" rel="noopener">https://parg.co/bM2&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMB" target="_blank" rel="noopener">《调试 Node.js 应用的最佳工具》&lt;/a>：调试，也就是寻找与修复软件中存在问题的过程一直是 Node.js 项目构建过程中的挑战之一，而本文则是介绍了如何利用那些优秀的工具来辅助进行 Node.js 代码调试。本文首先介绍日志相关内容，恰当的日志能够帮助开发者在生产环境中迅速定位到错误所在；然后本文介绍了如何在开发环境中直接调试 Node.js 应用。( &lt;a href="https://parg.co/bMB" target="_blank" rel="noopener">https://parg.co/bMB&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMX" target="_blank" rel="noopener">《Node.js 根本没有 float：浮点反序列化错误背后的故事》&lt;/a>：在 Node.js 中，当我们把一个浮点数序列化，再反序列化，居然出错了，这是为什么呢？作者通过刨根问底的追查，发现 Node.js 根本没有 float！( &lt;a href="https://parg.co/bMX" target="_blank" rel="noopener">https://parg.co/bMX&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bVL" target="_blank" rel="noopener">《编写安全的 Node.js 代码》&lt;/a>：本文是对于 Danny Grander 演讲的总结，他首先回顾了如何黑掉有漏洞的 Node.js 应用，同时也深度阐述了数个流行的 npm 包中存在的安全威胁；最后作者给出了修复这些漏洞以及在未来应用开发中保证 Node.js 代码安全性的建议。( &lt;a href="https://parg.co/bVL" target="_blank" rel="noopener">https://parg.co/bVL&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJN" target="_blank" rel="noopener">《需要掌握的 Node.js Streams 相关知识》&lt;/a>：Node.js steams 一直以来都被诟病难以理解与使用，近年来也有不少的开发者创建了封装库以便于使用 Node.js streams；不过本文追本溯源，着重于介绍 Node.js Streams 的基本语法并且理清常见的误解。本文首先以简单的利用 Stream 读取文件的例子来介绍 Stream 的概念，然后介绍了 Node.js 中四个流以及其具体实现方式。( &lt;a href="https://parg.co/bJN" target="_blank" rel="noopener">https://parg.co/bJN&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bip" target="_blank" rel="noopener">《N-API：下一代编写 Node.js 原生模块的接口》&lt;/a>：Node.js 有着非常庞大而又生机勃勃的模块生态圈，这也是其一直保有活力与魅力的源泉。而现在的很多基于 C/C++ 编写的原生模块直接依赖于 V8 或者 NAN 接口，导致了它们缺乏稳定性的暴走，并且需要随着 Node.js 版本的更迭而不断变化或者重编译。而 N-API 则致力于解决这个问题，文本即是对于 N-API 的基本语法与当前状态的介绍。( &lt;a href="https://parg.co/bip" target="_blank" rel="noopener">https://parg.co/bip&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://yarnpkg.com/blog/2017/05/31/determinism/" target="_blank" rel="noopener">《Yarn 与 npm5 比较》&lt;/a>：随着 Node.js 8.0.0 一起发布的 npm 5.0.0 不仅在性能上得到了极大提升，还通过引入类似于 yarn.lock 的 package-lock.json 文件来实现所谓可确定的包管理。本文则是介绍了所谓可确定的包管理的具体含义，以及 yarn 与 npm5 各自不同的实现方式与优缺性的比较。( &lt;a href="https://parg.co/bir" target="_blank" rel="noopener">https://parg.co/bir&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bi0" target="_blank" rel="noopener">《JavaScript 模块现状》&lt;/a>：近日随着各大浏览器纷纷开始支持 ESM(ECMAScript Moduls)，Node.js 中也计划引入 &lt;code>*.mjs&lt;/code> 作为 ESM 的文件扩展名，关于 JavaScript 模块化的未来发展也在社区引发了热切讨论。本文则是首先介绍了 ESM 在浏览器、Webpack 等构件工具以及 Node.js 中未来的实现，然后讨论了个人对于 ESM 未来发展以及对于程序开发本身的潜在影响。( &lt;a href="https://parg.co/bi0" target="_blank" rel="noopener">https://parg.co/bi0&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://2ality.com/2017/05/util-promisify.html" target="_blank" rel="noopener">《Node.js 8 中 util.promisify 介绍》&lt;/a>：Node.js 8 为我们提供了新的工具函数 util.promisify()，它能够将某个基于回调的函数封装为基于 Promise 的函数。本文介绍了 util.promisify() 的基本使用，首先介绍了对于文件读取写入相关接口的封装使用，然后讨论了如何引入 async 语法，最后还介绍了自定义 promisify 函数的用法。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLq" target="_blank" rel="noopener">《你应该掌握的关于 Node.js 子进程的知识》&lt;/a>：Node.js 最初以单进程单线程非阻塞方式提供了强大的性能表现，不过在目前多核时代下仅使用单进程已远远不能承载日益增长的应用压力。本文即介绍在 Node.js 中如何使用 spawn()、exec()、execFile()、fork() 等多进程相关模块的用法与各自的特点，依次介绍了使用 spawn 来创建实现了 EventEmit 接口的子进程、使用 exec 执行子命令、使用 fork 创建自带通信信道的子进程等。( &lt;a href="https://parg.co/bLq" target="_blank" rel="noopener">https://parg.co/bLq&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byY" target="_blank" rel="noopener">16 行代码构建基于 Node.js 的天气应用&lt;/a>：本文是一篇浅显易懂的 Node.js 入门实践介绍，作者利用 Node.js 抓取来自 OpenWeatherMap 的开放数据并且打印在控制台中。本文依次介绍了如何注册并且获得 OpenWeatherMap 的 ApiKey、如何使用 npm 初始化项目、如何利用 request 抓取数据、如何优化命令行交互显示等等。( &lt;a href="https://parg.co/byY" target="_blank" rel="noopener">https://parg.co/byY&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bed" target="_blank" rel="noopener">基于 Prometheus 的 Node.js 应用性能监控&lt;/a>：本文致力于帮助已有生产环境下 Node.js 应用的开发者，了解如何利用开源应用 Prometheus 搭建监测平台；Prometheus 为我们提供了强大的数据压缩与针对时序数据的快速查询功能。本文首先讨论了 Node.js 应用监控的设计理念与指标，然后对比了当前存在的几种监控解决方案的优缺点。最后介绍了如何在项目中引入 Prometheus，并且集成 Kubernetes、Grafana 等第三方插件；更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。( &lt;a href="https://parg.co/bed" target="_blank" rel="noopener">https://parg.co/bed&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1y" target="_blank" rel="noopener">扩展 Node.js 应用&lt;/a>：Node.js 设计的初衷之一即是保证其可扩展性，本文则详细介绍了开发者应该了解的可用于扩展 Node.js 应用的内建工具。本文首先介绍了复制、分解、分割等常用的设计思想，然后讨论了如何利用 Node.js 内置的 Cluster 模块来保证应用的可扩展性与如何提供零停机重启的特性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/azat-co/practicalnode" target="_blank" rel="noopener">Node.js 实战第二版&lt;/a>：该仓库是 Azat Mardan 的著作 Practical Node.js 第二版参考的开源发布地址，包含了十二个章节与相关的示范代码，非常值得一读。该书依次介绍了 Node.js 环境搭建与 Express.js 初探、基于 Mocha 的单元测试、模板引擎、数据持久化与性能优化、项目调试、部署与发布等章节；更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWY" target="_blank" rel="noopener">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端&lt;/a>：Apollo Server 是由社区维护的开源 GraphQL 服务端，它支持目前主流的 Node.js HTTP 服务端框架：Express、Connect、Hapi、Koa、AWS Lambda、Restify 以及 Micro。本文首先介绍 Apollo Server 遵循着开放、简单、高性能的原则，然后介绍了基于 Express 的基础用法以及性能监控等内容；更多 GraphQL 相关资料参考 &lt;a href="https://parg.co/b1e" target="_blank" rel="noopener"> https://parg.co/b1e &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWb" target="_blank" rel="noopener">swagger-decorator&lt;/a>：swagger-decorator 是旨在一处注解多处使用的 JavaScript &amp;amp; Node.js 应用中实体类与方法注解库，其能够用于实体类生成与校验、Sequelize ORM 实体类生成、面向 Koa 的路由注解与 Swagger 文档自动生成的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgP" target="_blank" rel="noopener">基于 Node.js 与 HTML5 的视频流&lt;/a>：本文一步一步地介绍如何构建基础的 Node.js 接口，并且添加某个路由从而将视频文件发送给前端。本文首先介绍了 Node.js 中流的基础概念与如何获取文件体积、从文件创建流并且获取块的大小等基本 API，然后介绍了如何搭建服务器并且添加合适的路由以返回视频流，最后介绍了前端如何利用 HTML5 的 video 标签实现视频播放与控制；更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgu" target="_blank" rel="noopener">Node.js 微服务实践&lt;/a>：微服务架构目前正在大行其道，不过作者发现由于很多人有自己独到的见解，微服务架构的变种与复杂度在持续增加；作者则希望通过本文使初学者快速地利用 Node.js 开发出简单的微服务。本文首先介绍了微服务出现的背景以及微服务的五个原则：零配置、高冗余、可容错、自我修复、自动发现；然后介绍了使用 cote 这个微服务库一步一步地实现 Node.js 微服务集群，依次创建 Requester、Responder 等基础组件以最终实现系统中的几个相互依赖的模块。更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ElemeFE/node-practice" target="_blank" rel="noopener">Node.js 实践教程&lt;/a>：本教程是希望以一些有名的模块/功能为基础, 在实现的过程中讲解各项知识点，主要分为控制流、Web、存储等几个部分。目前完成的模块包括 async 介绍、Promise 实现、coroutine 实现、co 模块介绍、HTTP Client 实现、HTTP Server 实现等；更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bF3" target="_blank" rel="noopener">Node.js 如何解析 Form 上传？&lt;/a>：NPM 和 GitHub 里的开源组件帮我们解决了很多繁琐的工作，但是也让我们失去了很多深入技术细节的机会。在现有组件无法满足我们需求的时候，就需要我们来自己动手丰衣足食了。作者前段时间遇到了一个需要手动解析 Form 表单上传的机会，也借此为各位解析一下 Node.js 解析 Form 上传的实现细节。更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b2l" target="_blank" rel="noopener">利用 Node.js 构建 API Gateway&lt;/a>：随着现代业务复杂度的增加，微服务的理念正在得到更多的落地实践；作为微服务架构的重要组成部分，API Gateway 能够为所有的后端服务提供统一的权限校验与客户端协议兼容的抽象层。本文首先介绍了微服务的基础架构与 API Gateway 的概念，然后介绍了面向前端团队的 Node.js API Gateway 组成；接下来详细的分析了 API Gateway 的基础功能需求：路由与版本、迭代式设计、权限校验、数据聚合、数据序列化与反序列化、限流与缓存等等，最后讨论了基于 Express 的 API Gateway 的实现。更多 Node.js 相关资料参考&lt;a href="https://parg.co/be0" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bjg" target="_blank" rel="noopener">利用 std/esm 在 Node.js 开发中使用 ES Modules&lt;/a>：随着主流浏览器逐步开始支持 ES Modules 标准，越来越多的目光投注于 Node.js 对于 ESM 的支持实现上；Node.js 拟计划在 2020 年发布的 9.x 版本中引入内置的 ESM 支持。而近日正式发布的 @std/esm 为我们提供了高性能的 Node.js 中 CommonJS 与 ES Modules 模块间调用，其能够作用于 Node.js 4.x 以上版本；它能够顺滑地集成到现有的 Webpack、Babel 环境中，并且支持不同模块使用不同的依赖版本。不同于目前的解决方案需要是发布编译之后的 CommonJS 格式的文件，@std/esm 能够以最小的代价的、按需转化的、动态缓存的方式来进行源代码转化。更多 Node.js 相关资料参考&lt;a href="https://parg.co/be0" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b2o" target="_blank" rel="noopener">你看到的 Node.js 权限校验指南可能都存在着错误&lt;/a>：权限校验几乎是每个服务端应用程序的标配，本文作者在搜索学习 Node.js / Express.js 相关的权限校验教程时发现大部分都或多或少地存在着问题，因此编撰了这篇文章以提醒其他开发者。常见的误区可能包括凭证的存储方式、密码的重置策略、API Tokens 的生成与校验、限流等多个方面；更多 Node.js 相关资料参考&lt;a href="https://parg.co/be0" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="开源项目">开源项目&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/zeit/pkg" target="_blank" rel="noopener">《pkg》&lt;/a>：pkg 能够将 Node.js 项目打包为单个可执行文件，其允许开发者发布商业级应用而不用担心源代码泄露的风险。pkg 会自动扫描你的 node_modules，然后将需要用到的本地内容打包到可执行文件中。( &lt;a href="https://github.com/zeit/pkg" target="_blank" rel="noopener">https://github.com/zeit/pkg&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/plasma-umass/doppio" target="_blank" rel="noopener">doppio&lt;/a>: doppio 是基于 TypeScript 0.5.0 版本编写的 Java 虚拟机(JVM)，其支持 Node.js 6.0 以上版本，并且内置了 Java 8 JDK 环境；doppio 是个有趣的尝试打破浏览器语言栅栏的尝试，浏览其源代码也可以学习如何编写 Java 虚拟机。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/notifme/notifme-sdk" target="_blank" rel="noopener">notifme-sdk&lt;/a>：notifme-sdk 是用于简化通知发送流程的 Node.js 库，它允许我们灵活地集成邮件、短信、推送、WebPush 等不同的渠道来发送通知；notifme-sdk 还允许我们自由注册服务提供商，内建的 Fallback 与轮询机制也能进行简单的容错，同时 notifme-sdk 还提供了简单的 UI 控制台以方便我们仅界面化监控。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bfQ" target="_blank" rel="noopener">《使用 create-graphql-server 快速搭建 GraphQL 服务器》&lt;/a>：本文介绍了如何用几个简单的命令快速搭建 GraphQL 服务器，其使用 Node.js 作为应用后端、Mongodb 作为数据存储。( &lt;a href="https://parg.co/bfQ" target="_blank" rel="noopener">https://parg.co/bfQ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/mattallty/Caporal.js" target="_blank" rel="noopener">《Caporal.js》&lt;/a>：特性全面的可用于创建 Node.js 命令行工具的框架，包括了帮助信息生成、自动补全等。 ( &lt;a href="https://github.com/mattallty/Caporal.js" target="_blank" rel="noopener">https://github.com/mattallty/Caporal.js&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="延伸阅读">延伸阅读&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/be0" target="_blank" rel="noopener">Node.js Learning &amp;amp; Practices Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b2s" target="_blank" rel="noopener">深入浅出 Node.js 全栈架构&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/28560073" target="_blank" rel="noopener">前端每周清单半年盘点之 React 与 ReactNative 篇&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>PWA</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/pwa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/pwa/</guid><description>&lt;h1 id="前端每周清单半年盘点之-pwa-篇">前端每周清单半年盘点之 PWA 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 PWA 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/dev-channel/progressive-web-app-libraries-in-production-b52cad37d34#.3u42kd67r" target="_blank" rel="noopener">工程实践中的 PWA 利器清单&lt;/a>: 本文是 Google Chrome 团队的 Addy Osmani 所写，介绍了这两年来他们团队开发或者推荐的一系列能够用于生产环境的 PWA 开发工具或者辅助库。此文作者同时来列举了目前在很多主流站点应用 PWA 之后带来的一系列包括离线优先、首屏加载优化等提升用户体验的实践案例。( &lt;a href="http://suo.im/1IxGPJ" target="_blank" rel="noopener">http://suo.im/1IxGPJ&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/JS85s" target="_blank" rel="noopener">百度搜索对 PWA 的探索和初步实践&lt;/a>: 本文是百度搜索资深 Web 前端工程师沈洲在前端之巅微信群中的分享整理总结而成，介绍了百度天气 PWA 应用的开发实践，本周还分享了&lt;a href="http://6me.us/Ik5k1L" target="_blank" rel="noopener">PWA 实践：从一个简单的页面开始&lt;/a>与&lt;a href="http://6me.us/P5cB" target="_blank" rel="noopener">PWA 实践：理解和创建 Service Worker 脚本&lt;/a>等 PWA 相关内容 。(&lt;a href="http://6me.us/JS85s" target="_blank" rel="noopener">http://6me.us/JS85s&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bO7" target="_blank" rel="noopener">PWA 在饿了么的实践经验&lt;/a>：本篇旨在和大家分享饿了么 M 站(&lt;a href="https://h5.ele.me/msite/" target="_blank" rel="noopener">https://h5.ele.me/msite/&lt;/a>)在 PWA 改造中的实践经验。涉及到的方面有：PWA 线上部署的准备工作、多页应用的 prerender 优化、实践过程中踩到的(和推进解决的)坑。( &lt;a href="https://parg.co/bO7" target="_blank" rel="noopener">https://parg.co/bO7&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://julian.is/article/progressive-web-apps/" target="_blank" rel="noopener">Progressive Web Apps：响应式 Web 设计的延伸&lt;/a>：本文是对于 Progressive Web Apps 概念、设计理念与简单实践的介绍，作者介绍了 PWA 应用应该具备的基本特性、性能与体验上的要求以及如何将现有站点转化为 PWA 的简单实践。( &lt;a href="https://julian.is/article/progressive-web-apps/" target="_blank" rel="noopener">https://julian.is/article/progressive-web-apps/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btH" target="_blank" rel="noopener">基于 Vue.js、Webpack、Material Design 打造 PWA 应用&lt;/a>：PWA 应用已经受到了越来越多的关注与实践，而本系列文章则介绍了如何使用 Vue.js、Webpack 以及 Material Design 打造 PWA 应用。本系列文章包含七个部分，分别介绍了基于 Vue.js、Webpack 与 Material Design Lite 创建单页应用、使用 Vue-Resource 与 VueFire 进行数据交互、使用 Service Workers 实现离线模式、拍照、上传图片、实现推送、访问设备地址等内容。( &lt;a href="https://parg.co/btH" target="_blank" rel="noopener">https://parg.co/btH&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMz" target="_blank" rel="noopener">饿了么的 PWA 升级实践&lt;/a>：本文介绍了饿了么利用 Vue.js 与 PWA 开发其移动 Web 端过程中的实践经验，包括 PRPL 模式的实现、多页面性能优化、用户体验优化等等内容。( &lt;a href="https://parg.co/bMz" target="_blank" rel="noopener">https://parg.co/bMz&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byS" target="_blank" rel="noopener">大前端公共知识梳理：这些知识你都掌握了吗？&lt;/a>：近年来，随着移动化联网浪潮的汹涌而来与浏览器性能的提升，iOS、Android、Web 等前端开发技术各领风骚，大前端的概念也日渐成为某种共识。其中特别是 Web 开发的领域，以单页应用为代表的富客户端应用迅速流行，各种框架理念争妍斗艳，百花竞放。Web 技术的蓬勃发展也催生了一系列跨端混合开发技术，希望能够结合 Web 的开发便捷性与原生应用的高性能性；其中以 Cordova、PWA 为代表的方向致力于为 Web 应用尽可能添加原生体验，而以 NativeScript、ReactNative、Weex 为代表的利用 Web 技术或者理念开发原生应用。平心而论，无论哪一种开发领域或者技术，他们本质上都是进行图形用户界面(GUI)应用程序的开发，面对的问题、思考的方式、架构的设计很大程度上仍然可以回溯到当年以 MFC、Swing、WPF 为主导的桌面应用程序开发时代，其术不同而道相似。( &lt;a href="https://parg.co/byS" target="_blank" rel="noopener">https://parg.co/byS&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1n" target="_blank" rel="noopener">Progressive Web Apps 入门教程&lt;/a>：或许你已经对 PWA 有所耳闻，或者已经真实使用过某个 PWA 应用；本文并不着眼于详细介绍 PWA 的内部原理与工作机制，而是希望以简明扼要的语义引导读者构建 PWA 应用。本文依次介绍了如何测试自身应用的 PWA 评分、构建图标与说明、添加 Service Worker、发布到 Github Pages 等；更多 PWA 相关资料参考 &lt;a href="https://parg.co/bVh" target="_blank" rel="noopener"> https://parg.co/bVh&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bz3" target="_blank" rel="noopener">将现有的 Angular 应用转化为 PWA&lt;/a>：本教程将会介绍如何将现有的 Angular 应用逐步地转化为 Progressive Web App，该教程适用于任何基于 @angular/cli 命令行工具创建的项目。本文首先介绍了 Service Worker 的作用、如何在项目中集成 Service Worker、如何创建自定义的 App Manifest；然后讨论了如何管理离线特征，最后说明了如何利用 Google LightHouse 进行应用的性能、可用性与最佳实践的测试，以及如何提升应用的性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bzO" target="_blank" rel="noopener">构建混合渲染的 PWA&lt;/a>：&lt;a href="https://pwa-directory.appspot.com/" target="_blank" rel="noopener">PWA Directory&lt;/a> 最初是采用了纯粹服务端渲染的 PWA 应用，它对于搜索引擎地支持比较好。不过这种应用并无法很好地进行客户端路由跳转，反而会带来一些额外的性能损耗；本文则依次介绍了如何使用 JavaScript 来托管路由跳转、如何利用 Service Worker 来进行数据缓存或者后台操作等内容。更多 PWA 相关资料参考&lt;a href="https://parg.co/bVh" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>#开源项目&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://6me.us/VW9nG" target="_blank" rel="noopener">PWA Builder&lt;/a>：随着 PWA 的日渐发展，Manifoldjs 也转型成为 PWA 应用在线构建工具；该工具为用户提供了在线构建 Manifest、自动生成多格式 Icon、创建 Service Worker、发布 PWA 等多种服务。( &lt;a href="http://6me.us/VW9nG" target="_blank" rel="noopener">http://6me.us/VW9nG&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCD" target="_blank" rel="noopener">Service Worker Mock&lt;/a>：在 PWA 应用的开发中对于 Service Worker 的测试一直比较麻烦，每个文件都可能通过&lt;code>self.addEventListener&lt;/code>产生副作用，并且 Service Worker 的运行环境也迥异于正常的 Web 或者 Node 环境。而本包则是通过注入伪造的 Service Worker 环境来方便测试。( &lt;a href="https://parg.co/bCD" target="_blank" rel="noopener">https://parg.co/bCD&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/paulirish/pwmetrics" target="_blank" rel="noopener">pwmetrics&lt;/a>：基于 LightHouse 封装的能够在命令行中使用的 PWA 应用的性能评测工具。( &lt;a href="https://github.com/paulirish/pwmetrics" target="_blank" rel="noopener">https://github.com/paulirish/pwmetrics&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">hacker-news-pwas&lt;/a>：基于不同的前端框架实现的符合 PWA 应用特性的 Hacker News APP 的合集，包括了常见的 React、Angular、Vue、Preact 等多个版本，并且均在 Lighthouse 评测中达到 90 以上的评分。( &lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">https://parg.co/biQ&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>React</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/react/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/react/</guid><description>&lt;h1 id="前端每周清单半年盘点之-react-与-reactnative-篇">前端每周清单半年盘点之 React 与 ReactNative 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 React 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://twitter.com/necolas/status/829128165314306048" target="_blank" rel="noopener">Twitter 宣布移动 Web 技术栈迁移到 Node.js，Express，React PWA&lt;/a>：近日，Twitter 工程师 Nicolas 宣布 Twitter 几乎所有的移动流量迁移到了以 Node.js 为基础的服务中(Today we moved all of Twitter&amp;rsquo;s mobile web traffic (that&amp;rsquo;s like, a lot) to our new web stack – Node.js, Express, React PWA.)。在过去的两年中，Twitter 移动 Web 技术栈主要是基于 Scala，Google Closure Templates 以及少量的 JavaScript。后来 CharlieCroom 开始尝试将登出服务迁移到 JavaScript 技术栈中，并且进行了约 9 个月的线上测试，效果尚可，因此 Twitter 决定全部迁移到 JavaScript 技术栈中。同时，Twitter Web APP 还支持所谓的 PRPL 范式：主动推送首屏关键资源、仅渲染初始路由、预存其他路由、按需懒加载与创建剩余路由。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/code-life/our-best-practices-for-writing-react-components-dec3eb5c3fc8#.mh12fzmoi" target="_blank" rel="noopener">来自 MuseFinder 的 React 组件编写实践&lt;/a>：该指南来源于 MuseFind 在多年的产品开发中总结而来的 React 实践经验，其包含了对于组件声明方式、样式类的使用、初始状态声明、Props 声明、方法声明、Props 结构、装饰器的使用、函数式组件的声明等等多个方面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://start.jcolemorrison.com/react-and-redux-sagas-authentication-app-tutorial/" target="_blank" rel="noopener">基于 React 与 Redux Sagas 的权限验证应用开发教程&lt;/a>：此文中作者深入地介绍了如何利用 Redux、Redux Saga、Redux Form、React Router 这些工具开发常见的权限验证应用。单独地使用某个工具似乎没啥难度，但是在工程应用中将它们较好地组合在一起却不是件容易事。而本文则是作者从自身工程实践的角度进行了介绍。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://school.shoutem.com/lectures/build-simple-imgur-client-react-native/" target="_blank" rel="noopener">基于 ReactNative 与 MobX 的 Imgur 应用开发教程&lt;/a>：此文中作者结合 ReactNative 与 MobX 开发一个展示 Imgur 中图片的应用，涉及到了如何使用 MobX 进行状态管理、如何与 RESTful API 进行交互、如何在 ListView 中渲染全屏图片以及如何监听设备状态等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.com/how-to-build-animated-microinteractions-in-react-aab1cb9fe7c8#.4jnphlp3r" target="_blank" rel="noopener">在 React 中构建微交互动画&lt;/a>：微交互能够更好地引导用户，提升用户体验，而文本则是基于 CSS Transitions、react-motion、react-animations 构建可交互的搜索框。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.robinwieruch.de/tips-to-learn-react-redux/?from=timeline&amp;amp;isappinstalled=0#flatState" target="_blank" rel="noopener">2017 年 React 与 Redux 学习建议&lt;/a>: 此文是作者数年来学习与使用 React 以及 Redux 的感悟，不一定适合纯初学者，不过对于有一定基础概念的很推荐一看。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/statuscode/dissecting-twitters-redux-store-d7280b62c6b1#.wu5trgupx" target="_blank" rel="noopener">Twitter Redux Store 探秘&lt;/a>：复杂应用的 Store 设计一直是开发中的难点，而作为大型内容社交软件 Twitter 之前宣布 Web 移动端逐步迁移到 Node.js、Express、React PWA 架构，本文就是对于 Twitter 的 Redux Store 设计分析与探秘。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/the-react-native-log/comparing-the-performance-between-native-ios-swift-and-react-native-7b5490d363e2#.azcqq063o" target="_blank" rel="noopener">React Native 与 Swift 性能对比&lt;/a>：作为混合式开发框架，React Native 在运行时仍然会实际调用 Objective-C 或者 Java。此文作者同时用 Swift 与 React Native 构建了相同的应用，并且从 CPU、GPU、内存使用、电池耗费等多个角度对这二者进行性能分析。结果表明二者性能相差无几，Swift 在 CPU 占用略占优势，二者的 GPU 占用不相伯仲，而 React Native 在内存上则有一定长处。( &lt;a href="http://suo.im/2MWZnA" target="_blank" rel="noopener">http://suo.im/2MWZnA&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://engineering.pivotal.io/post/tdd-mobx/" target="_blank" rel="noopener">React 与 MobX 开发中的测试驱动开发&lt;/a>: 本文对于 React 与 MobX 的基本使用进行了介绍，阐述了为何作者认为 MobX 是个不错的 Redux 的替代以及如何对 MobX 进行单元测试。( &lt;a href="http://suo.im/2PE2A6" target="_blank" rel="noopener">http://suo.im/2PE2A6&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/O6p" target="_blank" rel="noopener">基于 React 与 GraphQL 的全栈开发指南&lt;/a>：GraphQL 最早由 Facebook 提出以解决复杂多变的查询问题，弥补 REST 中的不足。它允许界面组件以声明式获取数据而忽略后端实现细节。本系列文章是由 Apollo 团队提供，讲解如何基于 React 与 GraphQL 开发应用。( &lt;a href="http://6me.us/O6p" target="_blank" rel="noopener">http://6me.us/O6p&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/10-react-mini-patterns-c1da92f068c5#.5v2hpgurn" target="_blank" rel="noopener">React 开发中的 10 个微模式&lt;/a>：此文是 Gilbertson 在工作中总结而来的 React 开发中常见的设计模式总结，譬如输入域的唯一标识分配、CSS 控制等等 。( &lt;a href="http://suo.im/42S8Kb" target="_blank" rel="noopener">http://suo.im/42S8Kb&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/2mS" target="_blank" rel="noopener">Airbnb 使用 React 重构搜索功能的实践&lt;/a>：早在 2015 年，Airbnb 的工程团队就决定将 React 作为主要的前端开发栈，不过因为其搜索页面过于复杂因此直到 2016 年初才开始迁移工作。本文就是 Airbnb 进行代码重构的经验介绍。( &lt;a href="http://6me.us/2mS" target="_blank" rel="noopener">http://6me.us/2mS&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/dqiO1" target="_blank" rel="noopener">React Native 中的 FlatList 组件&lt;/a>：3 月 1 日开始 ReactNative 中的 FlatList 正式从测试包中移动至正式包中；我们在项目开发中可以使用 FlatList、SectionList、VirtualizedList 来替代传统的即将被移除的 ListView。( &lt;a href="http://6me.us/dqiO1" target="_blank" rel="noopener">http://6me.us/dqiO1&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/qX63f" target="_blank" rel="noopener">ReactNative 性能优化实践&lt;/a>：日前有人表示 React Native 在 Android 上表现不佳，本文则是作者对于潜在的性能问题提出的优化方案。作者首先分析了常见的 Overdraw 问题以及可能的问题源与解决方案，然后介绍了列表中常见的 GPU 渲染瓶颈以及解决方案。( &lt;a href="http://6me.us/qX63f" target="_blank" rel="noopener">http://6me.us/qX63f&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/wiLi5" target="_blank" rel="noopener">React 中 setState 的函数式用法&lt;/a>：React 生态圈中一直崇尚所谓函数式编程理念，而本文作者介绍了如何利用 setState 函数的回调来实现 setState 的函数式用法；就像 Redux 中的 reducer 一样，能够独立声明于组件外，然后声明式的使用，从而保证组件更新逻辑的清晰与可测试性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/Md2" target="_blank" rel="noopener">我理解的“大前端”或“大无线”&lt;/a>：本文主要是介绍作者所在团队最近的一些变化和思考，包括前言、NodeJS 职能变化、ReactNative 的大规模应用、专门的架构组职能、总结五部分。。( &lt;a href="http://6me.us/Md2" target="_blank" rel="noopener">http://6me.us/Md2&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/25696969" target="_blank" rel="noopener">ReactRouter-V4 构建之道与源码分析&lt;/a>：本文介绍了 React Router V4 的设计思想，一步一步由浅入深地介绍如何从零开始构建一个类似于 React Router V4 这样的秉持路由即组件的思想的路由框架。( &lt;a href="http://6me.us/jfUwEw" target="_blank" rel="noopener">http://6me.us/jfUwEw&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/yH2yE" target="_blank" rel="noopener">来自 Formidable 的 2017 React Naive 技术栈&lt;/a>：本文是来自 Formidable 的工程师 Jani Eväkallio 介绍的他们在 2017 选定的 React Native 开发技术栈，包括构建工具、组件库、状态管理等等方面。( &lt;a href="http://6me.us/yH2yE" target="_blank" rel="noopener">http://6me.us/yH2yE&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/aGFX" target="_blank" rel="noopener">Sketch：React Native 的 Playground &lt;/a>：随着 Create React Native App 的发布，Expo 发布了能够在线编辑 React Native 应用的工具 Sketch。开发者可以在 Web 上直接编辑 React Native 应用代码，或者拖拽方式加入组件，然后通过 Expo 客户端完成本地预览。( &lt;a href="http://6me.us/aGFX" target="_blank" rel="noopener">http://6me.us/aGFX&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/mNHi" target="_blank" rel="noopener">以组件为中心的 React 懒加载&lt;/a>：React Loadable 是以组件为中心的懒加载框架，其基于 Webpack 2 提供的 &lt;code>import&lt;/code> 提供的异步代码分割与加载功能进行了一系列的封装。( &lt;a href="http://6me.us/mNHi" target="_blank" rel="noopener">http://6me.us/mNHi&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/dx5" target="_blank" rel="noopener">来自 Vixlet 的 React 优化策略&lt;/a>：在过去的数年中，来自 Vixlet 的前端开发团队一直使用 React 与 Redux 的开发架构，本文即是该团队分享其在开发过程中发现的 React 优化策略的介绍。( &lt;a href="http://6me.us/dx5" target="_blank" rel="noopener">http://6me.us/dx5&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bOj" target="_blank" rel="noopener">Preact 内部原理探秘&lt;/a>：Preact 是提供了类似于 React API 不过速度更快、包体更小的 React 替代包，本系列文章是 Preact 的开发者介绍其内部工作原理 。( &lt;a href="https://parg.co/bOj" target="_blank" rel="noopener">https://parg.co/bOj&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://sii.im/playground/css-grid/" target="_blank" rel="noopener">CSS Grid 典型案例&lt;/a>：该网站提供了一系列基于 React 编写的 CSS Grid 布局的测试样例，是个不错的从实例中学习 CSS Grid 语法与使用的教程。( &lt;a href="https://sii.im/playground/css-grid/#/" target="_blank" rel="noopener">https://sii.im/playground/css-grid/#/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bQS" target="_blank" rel="noopener">开发 React Native 与 Redux 应用一年来的错误总结&lt;/a>：本文作者总结了他在过去一年中 React Native 与 Redux 开发中遇到的错误的复盘与总结，譬如布局文件分割、Redux Store 设计、项目目录结构、表单验证等多个方面。( &lt;a href="https://parg.co/bQS" target="_blank" rel="noopener">https://parg.co/bQS&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bsg" target="_blank" rel="noopener">React Conf 2017 盘点&lt;/a>：本文作者对于近日举办的 React Conf 2017 中的精彩演讲进行了盘点，包括 Redux 与 MobX 在状态管理领域的对比、ReactVR 等一系列优秀的基于 React 的扩展项目、代码格式化与样式组件、服务端渲染等等。( &lt;a href="https://parg.co/bsg" target="_blank" rel="noopener">https://parg.co/bsg&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/reactjs/redux/issues/2295" target="_blank" rel="noopener">Redux 实践大讨论&lt;/a>：此篇是 Markerikson 在 Redux Issue 中发起的讨论，主要涉及 Redux 模板冗余、过度抽象、学习曲线过于曲折、太多的 Opinioned 最佳实践等问题。( &lt;a href="https://github.com/reactjs/redux/issues/2295" target="_blank" rel="noopener">https://github.com/reactjs/redux/issues/2295&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bCx" target="_blank" rel="noopener">2017 简明 React 入门指南&lt;/a>：本文是针对那些熟悉 jQuery 与传统 JavaScript 开发的前端工程师准备的现代 React 开发入门指南，其包括了环境配置、create-react-app 使用、学习资料、应用编写与发布等等章节。( &lt;a href="https://parg.co/bCx" target="_blank" rel="noopener">https://parg.co/bCx&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/vasanthk/react-bits" target="_blank" rel="noopener">React Bits&lt;/a>：一本关于 React 设计模式、技术与技巧的书，涵盖了常见的 React 应用开发中的设计模式、需要规避的反模式、处理 UX 变种、性能调试与样式处理等等。( &lt;a href="https://github.com/vasanthk/react-bits" target="_blank" rel="noopener">https://github.com/vasanthk/react-bits&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://eng.uber.com/ubereats-react-native/" target="_blank" rel="noopener">基于 ReactNaive 与 Uber 工程基础构建 UberEATS&lt;/a>：本文是 UberEATS 的工程师团队介绍的他们基于 Uber 原工程架构与 ReactNative 实现应用的工程实践；包括了构建迁移路径、应用架构定义、自动更新、测试与静态类型检测等等。( &lt;a href="https://eng.uber.com/ubereats-react-native/" target="_blank" rel="noopener">https://eng.uber.com/ubereats-react-native/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://microsoft.github.io/reactxp/" target="_blank" rel="noopener">微软开源跨平台开发框架 ReactXP&lt;/a>：ReactXP 是来自于微软的用于开发跨平台(iOS，Android，Web，Windows)应用的开源框架，其基于 React.js 与 React Native 项目，提供了类似的接口与语法规则；能够帮助开发者快速创建优美、响应式的 Web 界面以及原生体验的移动应用。( &lt;a href="https://microsoft.github.io/reactxp/" target="_blank" rel="noopener">https://microsoft.github.io/reactxp/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhD" target="_blank" rel="noopener">基于 React，Redux，React-Router-V4 以及 Firebase 创建实时足球投票应用&lt;/a>：本系列教程基于 React，Redux，Redux-Saga，React-Router V4 以及 Firebase 创建足球投票应用，在第一篇教程中主要介绍如何使用 create-react-app 脚手架来初始化项目结构并且添加必须的库。( &lt;a href="https://parg.co/bhD" target="_blank" rel="noopener">https://parg.co/bhD&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4y" target="_blank" rel="noopener">Webpack 与 Rollup：求同存异&lt;/a>：近日，Facebook 宣布将 React 的构建工具由 Webpack 迁移到 Rollup，引发了很多开发者的讨论。本文则是深度介绍 Webpack 与 Rollup 的异同，最后总结而言，Webpack 适合于构建应用，而 Rollup 适用于构建库或框架。( &lt;a href="https://parg.co/b4y" target="_blank" rel="noopener">https://parg.co/b4y&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4J" target="_blank" rel="noopener">React 中的状态管理架构模式&lt;/a>：本系列文章着眼于对于现代复杂 Web 应用，譬如 React 或类似框架，的开发中常见的状态管理的架构模式。文章中会依次介绍 Naive Hierarchical Architectural Pattern、Top-Heavy Architecture、Flux 等等内容。( &lt;a href="https://parg.co/b4J" target="_blank" rel="noopener">https://parg.co/b4J&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRO" target="_blank" rel="noopener">基于 JavaScript 构建数据表达式分词器&lt;/a>：本文是一篇挺有意思的文章，介绍如何利用 JavaScript 解构常见数学表达式并且从中提取出相关实体。本文涉及到的内容包括对于分词器的简单介绍、对于抽象语法树 AST 的介绍以及最终如何使用代码来实现分词算法。( &lt;a href="https://parg.co/bRO" target="_blank" rel="noopener">https://parg.co/bRO&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRV" target="_blank" rel="noopener">Twitter Lite 与高性能可扩展 React PWA 实践&lt;/a>：本文是 Twitter 工程师团队介绍其在开发世界上最大的 PWA 应用之一，Twitter Lite 过程中克服各种各样的性能瓶颈的实践经验。其核心思想包括基于路由的代码切分、避免可能导致掉帧的函数、使用压缩比更好的图片资源、以及优化 React 更新过程、避免频繁修正 Redux Store、延迟注册 ServiceWorker 等部分。( &lt;a href="https://parg.co/bRV" target="_blank" rel="noopener">https://parg.co/bRV&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRk" target="_blank" rel="noopener">React Native 性能优化&lt;/a>：本文作者承接 &lt;a href="https://parg.co/bRJ" target="_blank" rel="noopener">React Native 性能瓶颈与解决方案&lt;/a>，以新的实际开发中的例子讨论如何优化 React Native 应用性能。作者以类似于 Android 中 Toolbar 的列表为例，介绍了如何对性能进行测试、使用原生的滚动监听、使用声明式接口等多个方面的内容。( &lt;a href="https://parg.co/bRk" target="_blank" rel="noopener">https://parg.co/bRk&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://realm.io/news/the-post-mvc-age/" target="_blank" rel="noopener">后 MVC 时代&lt;/a>：在很长一段时间里，MVC(Model-View-Controller)架构是构建应用的黄金法则，而近几年随着 React，Vue.js，Angular 等以组件为中心的库的流行，MVC 架构在前端却趋于平寂。开发者往往将模型、视图与控制器耦合在单个实体内，而打破了传统的 MVC 架构中的约束。类似于 Flux 或者响应式编程的设计思想也改变了应用状态的处理方式，不同于 MVC 中的双向绑定，而是数据在实体之间单向流动。本文即是讨论在所谓后 MVC 时代的 GUI 应用架构的思考。( &lt;a href="https://realm.io/news/the-post-mvc-age/" target="_blank" rel="noopener">https://realm.io/news/the-post-mvc-age/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bR8" target="_blank" rel="noopener">CodeSandbox&lt;/a>：CodeSandbox 是一个在线的 React 编辑器，其能够帮助开发者更快更方便地展示与分享基于 React 的项目。CodeSandbox 会自动化执行类似于编译、打包、依赖管理等多种项目构建中的常见任务，同时 CodeSandbox 还允许开发者添加自定义的 node_modules 中的依赖。( &lt;a href="https://parg.co/bR8" target="_blank" rel="noopener">https://parg.co/bR8&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://docs.slatejs.org/" target="_blank" rel="noopener">Slate&lt;/a>：Slate 是类似于 Draft.js 的灵活可自定义的富文本编辑器构建框架，Slate 允许你构建功能丰富的类似于 Medium、Dropbox Paper、Canvas 这样的编辑器。Slate 提供了各式各样的插件，你可以基于 React 与 Immutable 来构建自定义的插件，并且指定哪些插件属于核心插件。( &lt;a href="https://docs.slatejs.org/" target="_blank" rel="noopener">https://docs.slatejs.org/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bfR" target="_blank" rel="noopener">Facebook 发布 React VR 来简化 Web 中虚拟现实应用的开发&lt;/a>：近年来，虚拟现实技术迅猛发展，有望成为下一个主流处理平台。而 Facebook 近日正式发布 React VR，其能够帮助开发者快速构建 VR 应用。React VR 同样基于 React 与 React Native 提供了声明式的代码风格，能够允许有 React 开发经验的开发者快速上手。( &lt;a href="https://parg.co/bfR" target="_blank" rel="noopener">https://parg.co/bfR&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bfM" target="_blank" rel="noopener">大型高性能 React PWA 如何消除各类性能瓶颈？&lt;/a>：想要构建一款性能出色的 Web 应用程序，我们需要投入大量技术周期以检测时间浪费点、了解其发生原因并尝试各类解决方案。遗憾的是，这种做法往往无法快速解决问题。性能无疑是一项永恒的命题，技术人员永远徘徊在观察与测量当中，却几乎永远找不到最优解。不过利用 Twitter Lite，我们已经在众多层面内取得了细小但却极具价值的改进：从初始加载时间到 React 组件渲染(防止二次渲染)，再到图像加载以及更多层面。尽管大多数变更本身并不显著，但其相加所带来的最终结果是，我们得以构建起一款规模极大且速度极快的渐进式 Web 应用程序。( &lt;a href="https://parg.co/bfM" target="_blank" rel="noopener">https://parg.co/bfM&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://airbnb.design/painting-with-code/" target="_blank" rel="noopener">Airbnb 设计团队发布 React SketchAPP&lt;/a>：Airbnb 设计团队近日发布能够将 React 组件渲染到 Sketch 文档中的开源工具，它为开发工程师与设计师之间提供了便捷的沟通桥梁。( &lt;a href="http://airbnb.design/painting-with-code/" target="_blank" rel="noopener">http://airbnb.design/painting-with-code/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNh" target="_blank" rel="noopener">一系列优秀的 React 界面框架&lt;/a>：本文列举了多个优秀的 React 界面框架，分析了其特性、适用场景以及潜在的缺陷。本文涉及的框架包括 Material UI、React Desktop、Semantic-UI-React、Ant-Design、Blueprint、React Bootstrap、React Toolbox、Grommet、Fabric 等等。( &lt;a href="https://parg.co/bNh" target="_blank" rel="noopener">https://parg.co/bNh&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNF" target="_blank" rel="noopener">来自 Vixlet 的 React 优化建议&lt;/a>：近年来 Vixlet 的 Web 团队逐步将其 Web 框架迁移到了 React + Redux 技术架构，本文是来自于 Vixlet 的 React 优化实践总结与建议。( &lt;a href="https://parg.co/bNF" target="_blank" rel="noopener">https://parg.co/bNF&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://dimafeng.com/2017/04/23/modern-frontend/" target="_blank" rel="noopener">从实用主义视角来看现代前端应用开发&lt;/a>：现代 Web 开发技术变革迅速，而我也经历了从纯 JS、jQuery、Vaadin、Angular JS、React 等等一系列的变迁。本文则首先思考何谓现代 Web 应用，然后考虑现代 Web 应用常用的项目架构与构建方式，譬如 TypeScript、Webpack、Linting 等内容，然后讨论现代常用的技术架构，譬如 React.j、MobX、依赖注入等相关知识。( &lt;a href="http://dimafeng.com/2017/04/23/modern-frontend/" target="_blank" rel="noopener">http://dimafeng.com/2017/04/23/modern-frontend/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMF" target="_blank" rel="noopener">React 动画系列教程&lt;/a>：本系列教程着眼于介绍 React 动画开发相关知识，而本文则是从 CSS transitions 基础入手，介绍了 CSS transitions 的基础语法与进度条、导航栏等经典案例。( &lt;a href="https://parg.co/bMF" target="_blank" rel="noopener">https://parg.co/bMF&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMT" target="_blank" rel="noopener">使用 React、Redux 以及 Webpack 创建 TODO 应用&lt;/a>：本文是面向新手的教学文章，介绍了如何利用 React、Redux 以及 Webpack 创建简单的 TODO 应用，包括利用 Webpack 搭建构建环境、编写基本的 React 组件以及使用 Redux 管理应用状态等内容。( &lt;a href="https://parg.co/bMT" target="_blank" rel="noopener">https://parg.co/bMT&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMa" target="_blank" rel="noopener">函数式组件的函数式调用&lt;/a>：本文是来自 Missive 的工程师分享了他们在基于 React 进行应用开发时的技巧，即如果直接以函数调用而非组件的方式来使用函数式组件，可以避免对于 React.createElement 的调用，最终相同组件的渲染耗时可以节约近 45%。( &lt;a href="https://parg.co/bMa" target="_blank" rel="noopener">https://parg.co/bMa&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bVv" target="_blank" rel="noopener">拥抱 React Router 4，改变旧的思维习惯&lt;/a>：在今年的 React 大会上，Michael Jackson 以及 Ryan Florence 发布了所谓“Learn Once，Route Anywhere”的演讲。同时也代表了 React Router 4 中的核心思想：路由即声明式组件；本文则介绍了 React Router V3 到 React Router V4 的变化。( &lt;a href="https://parg.co/bVv" target="_blank" rel="noopener">https://parg.co/bVv&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btW" target="_blank" rel="noopener">高性能动态 CSS 样式&lt;/a>：本文是对 &lt;a href="http://cssinjs.org/" target="_blank" rel="noopener">JSS&lt;/a> 新近提供的&lt;a href="http://cssinjs.org/json-api?v=v7.1.1#function-values" target="_blank" rel="noopener">函数式值的介绍&lt;/a>，其与 React 内联样式以及其他 CSS 解决方案相比有数倍的性能提升。在 Web 开发中动态设置样式往往会触发页面的重渲染，而本文则是介绍了如何使用 CSSOM 的 API 来在元素渲染之前即完成样式的设置。( &lt;a href="https://parg.co/btW" target="_blank" rel="noopener">https://parg.co/btW&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btw" target="_blank" rel="noopener">React 新引擎 React Fiber 究竟要解决什么问题？&lt;/a>：Facebook 正在以流行的 JavaScript 框架 React 为基础开发一个全新的架构。这个名为 React Fiber 的全新设计改变了检测变更的方法和时机，借此可改进浏览器端和其他渲染设备的响应速度。这一 全新架构 最初已于 2016 年 7 月公开发布，其中蕴含着过去多年来 Facebook 不断改进的工作成果。该架构可向后兼容，彻底重写了 React 的协调(Reconciliation)算法。该过程可用于确定出现变更的具体时间，并将变更传递给渲染器。( &lt;a href="https://parg.co/btw" target="_blank" rel="noopener">https://parg.co/btw&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/26799645" target="_blank" rel="noopener">GUI 应用程序架构的十年变迁：MVC、MVP、MVVM、Unidirectional、Clean&lt;/a>：随着现代浏览器的日渐流行，Web 以及混合开发技术的发展，大前端的概念日渐成为某种共识；而无论 iOS、Android、Web 这样的端开发还是 React Native、Weex 这样的跨端开发，其术不同而道相似纵览这十年内的架构模式变迁，大概可以分为 MV* 与 Unidirectional 两大类，而 Clean Architecture 则是以严格的层次划分独辟蹊径。从笔者的认知来看，从 MVC 到 MVP 的变迁完成了对于 View 与 Model 的解耦合，改进了职责分配与可测试性。而从 MVP 到 MVVM，添加了 View 与 ViewModel 之间的数据绑定，使得 View 完全的无状态化。最后，整个从 MV* 到 Unidirectional 的变迁即是采用了消息队列式的数据流驱动的架构，并且以 Redux 为代表的方案将原本 MV* 中碎片化的状态管理变为了统一的状态管理，保证了状态的有序性与可回溯性。( &lt;a href="https://zhuanlan.zhihu.com/p/26799645" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26799645&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bkY" target="_blank" rel="noopener">新版本 Create React App 特性概述&lt;/a>：不到一年前，React 官方发布了 Create React App 这个零配置的快速创建 React 应用的脚手架工具；而本文则介绍了近几个月来 Create React App 中加入的新特性。新版的 Create React App 中切换到了 Webpack 2，并且优化了运行时错误提示，同时还默认启用了 Progressive Web Apps 支持，并且引入了 Jest 20、动态导入等等一系列的新特性。( &lt;a href="https://parg.co/bkY" target="_blank" rel="noopener">https://parg.co/bkY&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bko" target="_blank" rel="noopener">React Native 开发中的 80/20 定律&lt;/a>：在构建 React Native 应用时，我们常常发现某些 20% 的投入会带来 80% 的产出。本文则是作者在构建了自己首个 React Native 应用之后的感悟，作者发现引入静态类型、通用组件以及精益部署之后，整个想法的开发速度与项目质量得到了较大地提升。( &lt;a href="https://parg.co/bko" target="_blank" rel="noopener">https://parg.co/bko&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bk0" target="_blank" rel="noopener">从零开始构建 WhatsApp 应用&lt;/a>：本系列文章深入浅出地介绍了如何利用 GraphQL 与 React Native 构建类似于 WhatsApp 的应用 Chatty。前几部分主要介绍了如何搭建基础环境、设计 GraphQL Schemas、进行数据查询与交互等内容，而本文则着重于介绍如何为 Chatty 添加权限验证特性。( &lt;a href="https://parg.co/bk0" target="_blank" rel="noopener">https://parg.co/bk0&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bkE" target="_blank" rel="noopener">如何快速地为 React 站点设置 A/B 测试&lt;/a>：A/B 测试，或者称为分割测试，是用来随机地为用户展示网页以测试不同产品设计的反馈效果。A/B 测试对提升真实应用的用户接受度非常有帮助，而本文则是介绍了如何利用 react-ab-test 这个工具快速地针对 React 站点设置 A/B 测试收集用户反馈信息。( &lt;a href="https://parg.co/bkE" target="_blank" rel="noopener">https://parg.co/bkE&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bkA" target="_blank" rel="noopener">重构 Airbnb 前端架构&lt;/a>：本文是近日 Airbnb 开发团队在思索重构代码库中 JavaScript 部分的经验总结，主要着眼于产品驱动开发以及技术沉淀、从传统的 Rails 架构中积攒的经验以及新的技术栈的某些特性等方面。本文首先介绍了从 Rails 迁移过程中的一些经验，譬如将原本完全的服务端渲染界面所需要的数据切分为了 API 与 Non-API 两大类，并且使用 Hypernova 来进行 React 服务端渲染。然后介绍了如何在应用前端通过引入懒加载与异步加载等方式提升前端性能与用户体验。( &lt;a href="https://parg.co/bkA" target="_blank" rel="noopener">https://parg.co/bkA&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJt" target="_blank" rel="noopener">React Europe 2017 见闻实录&lt;/a>：本文记录了作者在第三届 React Europe 大会上的见闻，也是不错的窥见 React 生态圈现状与未来发展方向的方式。本文首先介绍了即将到来的 React 16 以及新的调和算法 Fiber，然后介绍了一些辅助构建高质量 JavaScript 代码的工具，最后还讨论了基于流的按帧渲染方式。( &lt;a href="https://parg.co/bJt" target="_blank" rel="noopener">https://parg.co/bJt&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biZ" target="_blank" rel="noopener">理解高阶组件&lt;/a>：即使 React 新手都应该听过所谓高阶组件或者容器组件的概念，而本文则是深入浅出地介绍了 React 中高阶组件的概念与意义，并且以实例介绍具体的使用方式与适用场景。作者首先介绍了无状态组件与全局状态的概念，然后对比了所谓容器与展示型组件的使用场景，最后介绍了常见的高阶组件。( &lt;a href="https://parg.co/biZ" target="_blank" rel="noopener">https://parg.co/biZ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biP" target="_blank" rel="noopener">我们为什么选择使用 React 生态&lt;/a>：本文是京东金融移动研发部工程师分享的它们对于前端框架、工具与方法的选择过程中的考虑。( &lt;a href="https://parg.co/biP" target="_blank" rel="noopener">https://parg.co/biP&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">hacker-news-pwas&lt;/a>：基于不同的前端框架实现的符合 PWA 应用特性的 Hacker News APP 的合集，包括了常见的 React、Angular、Vue、Preact 等多个版本，并且均在 Lighthouse 评测中达到 90 以上的评分。( &lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">https://parg.co/biQ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.nativescript.org/blog/a-new-vue-for-nativescript" target="_blank" rel="noopener">使用 Vue 与 NativeScript 开发跨端应用&lt;/a>：目前标准的开发 NativeScript 应用的方式是使用朴素的 JavaScript 或者 Angular，而本文介绍了如何结合使用 Vue 与 NativeScript 来开发跨终端应用。本文首先阐述了 Vue.js 相较于 React 或者 Angular 的优势，然后阐述了使用 Vue 语法来开发基础 NativeScript 应用的步骤。( &lt;a href="https://www.nativescript.org/blog/a-new-vue-for-nativescript" target="_blank" rel="noopener">https://www.nativescript.org/blog/a-new-vue-for-nativescript&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLA" target="_blank" rel="noopener">利用 React Apollo 减少 Redux 代码量&lt;/a>：Redux 为人诟病的一点就是需要大量的模板代码，而更多的代码往往也意味着更多的潜在错误与更高的维护代价。本文则介绍了如何利用 Apollo 来接管应用中的数据加载与呈现逻辑，从而减少 Redux 实现方案中加载数据生命周期中所需要的代码。( &lt;a href="https://parg.co/bLA" target="_blank" rel="noopener">https://parg.co/bLA&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9d" target="_blank" rel="noopener">九个 React Native 动画指南&lt;/a>：本文通过介绍九个 React Native 动画地实现从零到一的介绍了 React Native 中的动画机制。包含了通过 Animated.timing 来添加样式动画、创建可伸缩的按钮、创建可拖拽的卡片、动态地变换元素的颜色、角度、序列位置等等实例。( &lt;a href="https://parg.co/b9d" target="_blank" rel="noopener">https://parg.co/b9d&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9u" target="_blank" rel="noopener">构建 React 组件库&lt;/a>：本系列文章循序渐进地介绍如何设计编写自己的小型组件库并且将其发布到 NPM 仓库中；第一篇文章着眼于如何从零开始搭建开发环境，第二篇文章则介绍如何利用 styled-components 来为组件添加样式、添加调色板、构建高效开发流程以及如何实践 Atomic Design 原则。( &lt;a href="https://parg.co/b9u" target="_blank" rel="noopener">https://parg.co/b9u&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b93" target="_blank" rel="noopener">5 个提升 React Native 应用性能的方法&lt;/a>：本文作者分享了自己在过去一段时间内尝试提升公司 React Native 应用性能的实践经验，包括如何设置有效的性能测试、强制启动 no-bind 规则、使用函数式组件、重制 TabMap 的逻辑等等。( &lt;a href="https://parg.co/b93" target="_blank" rel="noopener">https://parg.co/b93&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9U" target="_blank" rel="noopener">京东 618：如何配合业务打造 JDReact 三端融合开发平台？&lt;/a>：良好解决多终端开发问题是提升团队开发效率的有效方法，本文全面解析了京东 JDReact 三端融合平台。本文首先回顾了传统无线开发的痛点，然后讨论了 React Native 的优势与局限，最后介绍了 JDReact 三端融合平台的整体架构、在功能、加载性能、内存方面的改进与优化以及发布到生产环境中的流程等内容。( &lt;a href="https://parg.co/b9U" target="_blank" rel="noopener">https://parg.co/b9U&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/server-side-react-rendering/" target="_blank" rel="noopener">React 服务端渲染&lt;/a>：本文循序渐进地介绍了 React 中服务端渲染的相关知识，首先讨论了服务端渲染相较于客户端渲染带来的优势、然后介绍了如何在 React 中添加服务端渲染的支持，最后还讨论了如何通过同构的高阶函数在服务端抓取数据然后显示在客户端。( &lt;a href="https://css-tricks.com/server-side-react-rendering/" target="_blank" rel="noopener">https://css-tricks.com/server-side-react-rendering/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byS" target="_blank" rel="noopener">大前端公共知识梳理：这些知识你都掌握了吗？&lt;/a>：近年来，随着移动化联网浪潮的汹涌而来与浏览器性能的提升，iOS、Android、Web 等前端开发技术各领风骚，大前端的概念也日渐成为某种共识。其中特别是 Web 开发的领域，以单页应用为代表的富客户端应用迅速流行，各种框架理念争妍斗艳，百花竞放。Web 技术的蓬勃发展也催生了一系列跨端混合开发技术，希望能够结合 Web 的开发便捷性与原生应用的高性能性；其中以 Cordova、PWA 为代表的方向致力于为 Web 应用尽可能添加原生体验，而以 NativeScript、ReactNative、Weex 为代表的利用 Web 技术或者理念开发原生应用。平心而论，无论哪一种开发领域或者技术，他们本质上都是进行图形用户界面(GUI)应用程序的开发，面对的问题、思考的方式、架构的设计很大程度上仍然可以回溯到当年以 MFC、Swing、WPF 为主导的桌面应用程序开发时代，其术不同而道相似。( &lt;a href="https://parg.co/byS" target="_blank" rel="noopener">https://parg.co/byS&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/dabbott/react-express" target="_blank" rel="noopener">React Express&lt;/a>：针对目前 React 及其生态圈学习曲线过于陡峭的囧境，作者希望创建一个多合一的面向初学者的 React 技术栈学习教程，从最简单的 create-react-app、npm、webpack、babel 等工具的使用，到 ES2015、ES2016、JSX 等基础语法，最后还包括 React、Redux、CSS-in-JS 等工程实践。( &lt;a href="https://github.com/dabbott/react-express" target="_blank" rel="noopener">https://github.com/dabbott/react-express&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bFC" target="_blank" rel="noopener">Airbnb React VR 实践&lt;/a>：Airbnb 自 2014 年以来一直使用 React 构建用户交互界面，并且为社区贡献了很多优秀的开源项目；而随着 React VR 的发布，Airbnb 也利用其来快速原型化与测试 VR 相关的创意。本文即是介绍 Airbnb 在 React VR 实践方面的一些经验总结，本文首先阐述了 React、React Native 与 React VR 三者之间的关系与差异，然后介绍了 React VR 在布局、基础组件方面的语法，最后还讨论了 React VR、WebVR 以及 VR 技术本身的发展可能性。更多 WebVR 相关资料参考 &lt;a href="https://parg.co/bFR" target="_blank" rel="noopener">https://parg.co/bFR&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bFh" target="_blank" rel="noopener">深入 React 动画实践&lt;/a>：本文介绍了在 React 开发中多种创建动画效果的途径，包括了基于 React 组件状态的 CSS 动画、基于 React 组件状态的 JavaScript 样式动画以及第三方依赖的 React Motion、Animated、Velocity-React 等库。本文最后还讨论了如何用 GreenSock 等经典强大的动画库来辅助 React 组件动画开发；更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>#开源项目&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/facebook/metro-bundler" target="_blank" rel="noopener">metro-bundler&lt;/a>：为了更好地社区支持，原 react-native-packager 被独立为 Metro Bundler；其致力于打造具有亚秒级别的重载以及较好可扩展性的模块系统，同时它仍然是 React Naive 内置的开箱即用的工具。( &lt;a href="https://github.com/facebook/metro-bundler" target="_blank" rel="noopener">https://github.com/facebook/metro-bundler&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jondot/react-flight" target="_blank" rel="noopener">React Flight&lt;/a>: React Flight 能够帮我们轻松地构建组件之间的过渡动画，它允许开发者定义初始状态的组件与结束状态的组件，React Flight 会自动地完成组件之间的切换并且添加动画效果。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/staltz/react-native-node" target="_blank" rel="noopener">React Native Node&lt;/a>: React Native Node 能够在基于 React Native 开发的 Android 应用中启动后台 Node.js 进程，从而可以利用 Node.js 中的流、文件系统接口等特性来进行功能操作；React Native Node 主要依靠 Node.js 7.1.0 版本能够被独立编译为 bin_node_v710 可执行文件。另一方面，尽管 iOS 并不支持直接运行 V8，但是&lt;a href="http://www.janeasystems.com/blog/node-js-meets-ios/" target="_blank" rel="noopener">该项目&lt;/a>正在致力于为 ChakraCore 打造类 V8 特性支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.react-simple-maps.io" target="_blank" rel="noopener">react-simple-maps&lt;/a>: react-simple-maps 是基于 d3-geo 与 topojson 的 React 地图组件库，允许开发者快捷方便地构建自定义的 SVG 地图；目前的特性包括了缩放、标记、自定义 SVG 标记、自定义着色、气泡图、动画支持等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://amplitude.engineering/introducing-redux-query-7734e7215b3b#.9v8pi8jok" target="_blank" rel="noopener">redux-query:React/Redux 中查询与管理网络状态的库&lt;/a>：对于很多开发者而言，同步本地状态与网络状态会是一件很麻烦的事情。其中需要太多的妥协与考量，甚至于面对不同的问题需要使用不同的技术栈。而 redux-query 即是 AmplitudeEng 的工程师在实践中的总结与应用，它可以被当做基于 React/Redux 以及 RESTful API 的应用的很好的辅助工具。它允许将网络状态链入到当前的 Redux Store 中，并且提供了删除、乐观更新、响应缓存、删除重复等等优秀的功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/rauliyohmc/react-native-offline-utils" target="_blank" rel="noopener">react-native-offline-utils&lt;/a>：react-native-offline-utils 允许我们在 React Native 应用中优雅地处理离线情况，能够根据连接情况动态判断需要使用的组件渲染或者数据抓取逻辑。同时 react-native-offline-utils 还能够平滑地集成 Redux，能够自动转发特殊的离线 Action。( &lt;a href="https://github.com/rauliyohmc/react-native-offline-utils" target="_blank" rel="noopener">https://github.com/rauliyohmc/react-native-offline-utils&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/diegomura/react-pdf" target="_blank" rel="noopener">react-pdf&lt;/a>：在浏览器、移动端与服务端皆可适用的基于 React 语法的 PDF 文件创建工具。( &lt;a href="https://github.com/diegomura/react-pdf" target="_blank" rel="noopener">https://github.com/diegomura/react-pdf&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://formidable.com/blog/2017/introducing-rapscallion/" target="_blank" rel="noopener">Rapscallion&lt;/a>：React 服务端渲染的性能一直是广为诟病，相较于其他前端框架会满上很多，笔者在&lt;a href="https://zhuanlan.zhihu.com/p/25098455" target="_blank" rel="noopener">此文&lt;/a>中也进行过简要探讨。而 Rapscallion 则是新的支持 React 服务端渲染的开源包体，它支持异步非阻塞渲染，相较于&lt;code>renderToString&lt;/code>其能达到将近 50% 的性能提升。同时 Rapscallion 官方还为我们准备了基于 Redis 的缓存实例。( &lt;a href="http://suo.im/3YS6pz" target="_blank" rel="noopener">http://suo.im/3YS6pz&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wix/react-native-interactable" target="_blank" rel="noopener">react-native-interactable&lt;/a>：react-native-interactable 是由 wix 发布的用于创建高性能用户交互效果的声明式接口。典型的用户场景包括滑动式卡片、抽屉菜单、伸缩式应用头、聊天头等。( &lt;a href="https://github.com/wix/react-native-interactable" target="_blank" rel="noopener">https://github.com/wix/react-native-interactable&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/berzniz/react-overdrive" target="_blank" rel="noopener">react-overdrive&lt;/a>：非常简单易用的 React 应用转场动画实现库，能够在不同的页面间指定相同 ID 的元素，Overdrive 会自动为这两个元素之间添加转场动画。( &lt;a href="https://github.com/berzniz/react-overdrive" target="_blank" rel="noopener">https://github.com/berzniz/react-overdrive&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/aweary/react-perimeter" target="_blank" rel="noopener">react-perimeter&lt;/a>：react-perimeter 能够为目标元素创建隐藏的栅栏，当用户的鼠标移动到目标元素的指定范围内时会触发预设时间，譬如可以执行组件预加载等操作。( &lt;a href="https://github.com/aweary/react-perimeter" target="_blank" rel="noopener">https://github.com/aweary/react-perimeter&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b4Q" target="_blank" rel="noopener">glamorous&lt;/a>：来自 PayPal 的 React 组件的 CSS-in-JS 解决方案，其支持 JSX 语法、自定义样式组件等多种灵活的功能。( &lt;a href="https://parg.co/b4Q" target="_blank" rel="noopener">https://parg.co/b4Q&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/adazzle/react-data-grid" target="_blank" rel="noopener">React Data Grid&lt;/a>：基于 React 构建的类似于 Excel 的网格组件，其提供了编辑、键盘导航、复制粘贴等多种功能。( &lt;a href="https://github.com/adazzle/react-data-grid" target="_blank" rel="noopener">https://github.com/adazzle/react-data-grid&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://open.segment.com/create-next-app" target="_blank" rel="noopener">create-next-app&lt;/a>：基于 Next.js 的类似于 create-react-app 的快速创建支持服务端渲染的 React 应用的命令行辅助工具。( &lt;a href="https://open.segment.com/create-next-app" target="_blank" rel="noopener">https://open.segment.com/create-next-app&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bMg" target="_blank" rel="noopener">Create XP App&lt;/a>: 近日，微软的 Skype 团队发布了基于 React Native 的跨平台开发框架 ReactXP，而 create-xp-app 则是快速创建 ReactXP 应用的脚手架。本文则是对于 create-xp-app 的安装与基本使用的介绍，包括了如何运行在 Web 与 iOS/Android 等原生环境中，以及如何进行打包等内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/callstack-io/haul" target="_blank" rel="noopener">haul&lt;/a>：Haul 是基于 Webpack 这样开源框架构建的 react-native 命令行工具的替代品，它支持从运行于开发时服务器到打包发布至生产环境等全生命周期的功能。Haul 的最大特性在于允许开发者使用 Webpack 生态系统中各种合影的加载器与插件，并且不需要 watchman 等外部工具的辅助，还优化了错误提示信息。( &lt;a href="https://github.com/callstack-io/haul" target="_blank" rel="noopener">https://github.com/callstack-io/haul&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/tannerlinsley/react-move" target="_blank" rel="noopener">react-move&lt;/a>：方便快捷地 React 组件动画库，支持 React、React Native 以及 React VR。React Move 允许开发者忽略具体的动画属性控制而完全托管于框架，同时它还提供了多个生命周期中的回调函数方便开发者进行控制。( &lt;a href="https://github.com/tannerlinsley/react-move" target="_blank" rel="noopener">https://github.com/tannerlinsley/react-move&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="延伸阅读">延伸阅读&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> React Learning &amp;amp; Practices Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWg" target="_blank" rel="noopener"> React 与前端工程化实践&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b2N" target="_blank" rel="noopener">前端每周清单半年盘点之 Vue.js 篇&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>Vue.js</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/vue.js/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/vue.js/</guid><description>&lt;h1 id="前端每周清单半年盘点之-vuejs-篇">前端每周清单半年盘点之 Vue.js 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 Vue.js 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://scotch.io/tutorials/build-a-realtime-crud-app-with-vue-deepstream" target="_blank" rel="noopener">基于 Vue 与 DeepStream 构建实时 CRUD 应用&lt;/a>：Vue 是专注于 JavaScript UI 的渐进式库，它提供了开发现代 Web 应用的各种先进的特性。而随着移动互联网的发展，实时技术也愈发重要；各种各样的提供抽象接口的实时服务器扮演着越发重要的作用，其中&lt;a href="https://deepstream.io/" target="_blank" rel="noopener">DeepStream&lt;/a> 就是开源的、免费的并且性能表现相当优秀的实时服务器。而本文就利用 Vue 与 DeepStream 这两个开源工具构建实时交互的应用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/pablohpsilva/vuejs-component-style-guide" target="_blank" rel="noopener">Vue.js 组件样式指南&lt;/a>：该样式指南提供了一种统一架构 Vue.js 代码的建议，其目标是达成易于开发者与团队成员理解以及寻找东西、易于 IDE 来审查代码并且提供帮助、易于重用开发构建工具、易于独立地缓存与使用代码块。该指南借鉴了 &lt;a href="https://github.com/voorhoede/riotjs-style-guide" target="_blank" rel="noopener">RiotJS&lt;/a>样式指南，主要还包含了以下几个部分：&lt;a href="https://github.com/pablohpsilva/vuejs-component-style-guide#module-based-development" target="_blank" rel="noopener">基于模块开发&lt;/a>、&lt;a href="https://github.com/pablohpsilva/vuejs-component-style-guide#vue-component-names" target="_blank" rel="noopener">Vue 组件命名&lt;/a>，等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/coding-artist/vue-js-pokemon-battle-tutorial-380cd72eb681#.x8wnb4s0f" target="_blank" rel="noopener">基于 Vue.js 开发一个 Pokemon Battle 指南&lt;/a>: 本文是非常详细的如何利用 Vue.js 开发一个宠物小精灵的战斗场景的教程，还是挺有意思的。( &lt;a href="http://suo.im/1jwicW" target="_blank" rel="noopener">http://suo.im/1jwicW&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/alZ" target="_blank" rel="noopener">Vue.js 实用技巧&lt;/a>：本文来自于饿了么大前端的 cinwell， Vue.js 2.0 已经发布了有一段时间，生态链也日渐完善。作者在使用 Vue.js 开发项目时收集的一些工具和使用技巧，分享给各位。( &lt;a href="http://6me.us/alZ" target="_blank" rel="noopener">http://6me.us/alZ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://6me.us/5E8wN" target="_blank" rel="noopener">Vue.js 前端框架比较&lt;/a>：本文是对常用的基于 Vue.js 的前端框架的比较。( &lt;a href="http://6me.us/5E8wN" target="_blank" rel="noopener">http://6me.us/5E8wN&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/DDFE/DDFE-blog/issues/13" target="_blank" rel="noopener">滴滴 webapp 5.0 Vue 2.0 重构经验分享&lt;/a>：滴滴的 webapp 是运行在微信、支付宝、手 Q 以及其它第三方渠道的打车软件。借着产品层面的功能和视觉升级，我们用 Vue 2.0 对它进行了一次技术重构；本文即是本次重构中的经验分享。( &lt;a href="https://github.com/DDFE/DDFE-blog/issues/13" target="_blank" rel="noopener">https://github.com/DDFE/DDFE-blog/issues/13&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bQ3" target="_blank" rel="noopener">使用 Vue.js 与 Electron 构建桌面问卷应用&lt;/a>：本文介绍了如何利用 Vue.js 与 Electron 来构建简单的桌面问卷应用，作者首先介绍了如何使用 vue-cli 创建简单的 Web 项目，然后讨论了如何将项目运行在 Electron 中，最后阐述了如何将应用整体打包发布。( &lt;a href="https://parg.co/bQ3" target="_blank" rel="noopener">https://parg.co/bQ3&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bhC" target="_blank" rel="noopener">Vue.js 2.2 完整 API 清单&lt;/a>：本文是 Vue.js 2.2 中完整的 API 介绍，可以作为手册随时查阅 。( &lt;a href="https://parg.co/bhC" target="_blank" rel="noopener">https://parg.co/bhC&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b49" target="_blank" rel="noopener">创建基于 Vue.js 的可复用组件&lt;/a>：本系列文章关注于如何利用 Vue.js 创建可复用的组件，每一篇都会讲解某个具体的界面组件，然后一步一步地介绍如何利用 Vue.js 来实现这些组件，顺便也介绍 Vue.js 的各种原理与设计准则。( &lt;a href="https://parg.co/b49" target="_blank" rel="noopener">https://parg.co/b49&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bRN" target="_blank" rel="noopener">面向重度 jQuery 开发者的 Vue.js 介绍&lt;/a>：本文是一位经验丰富的开发者，在将原有的基于 jQuery 工程重构为基于 Vue.js 工程的过程中总结出的经验与认识介绍。本文首先从零开始介绍如何搭建 Vue.js 基础项目并且一步一步地实现应用的各种特征，同时还对比了利用 Vue.js 与 利用 jQuery 实现的差异性以及二者在设计思想上的区别。( &lt;a href="https://parg.co/bRN" target="_blank" rel="noopener">https://parg.co/bRN&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://realm.io/news/the-post-mvc-age/" target="_blank" rel="noopener">后 MVC 时代&lt;/a>：在很长一段时间里，MVC(Model-View-Controller)架构是构建应用的黄金法则，而近几年随着 React，Vue.js，Angular 等以组件为中心的库的流行，MVC 架构在前端却趋于平寂。开发者往往将模型、视图与控制器耦合在单个实体内，而打破了传统的 MVC 架构中的约束。类似于 Flux 或者响应式编程的设计思想也改变了应用状态的处理方式，不同于 MVC 中的双向绑定，而是数据在实体之间单向流动。本文即是讨论在所谓后 MVC 时代的 GUI 应用架构的思考。( &lt;a href="https://realm.io/news/the-post-mvc-age/" target="_blank" rel="noopener">https://realm.io/news/the-post-mvc-age/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bf4" target="_blank" rel="noopener">在 Vue.js 项目中使用第三方库&lt;/a>：本文介绍了如何在基于单文件模块的 Vue.js 项目中使用 Lodash、Moment、Axios 这些优秀的第三方库或框架。本文递进地介绍了譬如全局变量引用、单文件导入、扩展 Vue 对象、插件实现等多种方式。( &lt;a href="https://parg.co/bf4" target="_blank" rel="noopener">https://parg.co/bf4&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://auth0.com/blog/vuejs2-authentication-tutorial/" target="_blank" rel="noopener">Vue.js 2 中的权限验证指南&lt;/a>：本文介绍了如何快速构建 Vue.js 2 应用程序并且添加合适的权限验证模块。本文首先介绍了 Vue.js、Angular 以及 React 之间设计思想的对比，然后介绍了 Vue.js 2.0 中的核心概念与基本用法，最后以某个真实的登录控制案例介绍了如何为 Vue.js 应用中添加权限验证功能。( &lt;a href="https://auth0.com/blog/vuejs2-authentication-tutorial/" target="_blank" rel="noopener">https://auth0.com/blog/vuejs2-authentication-tutorial/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bNv" target="_blank" rel="noopener">实测 Vue SSR 的渲染性能：避开 20 倍耗时&lt;/a>：Vue SSR 是 Vue.js 2.0 引入的直出渲染方案，本文将全面解析 virtual-dom-based 及 string-based 的原理并对其进行对比。Vue SSR 的模板是 virtual-dom-based，所以 QQ 空间 Hybrid 业务做 Vue 2.0 的改造的同时，模板类型也从之前的 a 类转换成 b 类。本文是在实际业务场景中对 Vue SSR 的渲染性能做测试，并解析渲染步骤，给出尝试优化的方案和最终结论。( &lt;a href="https://parg.co/bNv" target="_blank" rel="noopener">https://parg.co/bNv&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/btH" target="_blank" rel="noopener">基于 Vue.js、Webpack、Material Design 打造 PWA 应用&lt;/a>：PWA 应用已经受到了越来越多的关注与实践，而本系列文章则介绍了如何使用 Vue.js、Webpack 以及 Material Design 打造 PWA 应用。本系列文章包含七个部分，分别介绍了基于 Vue.js、Webpack 与 Material Design Lite 创建单页应用、使用 Vue-Resource 与 VueFire 进行数据交互、使用 Service Workers 实现离线模式、拍照、上传图片、实现推送、访问设备地址等内容。( &lt;a href="https://parg.co/btH" target="_blank" rel="noopener">https://parg.co/btH&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://vuejsdevelopers.com/2017/05/01/vue-js-cant-help-head-body/" target="_blank" rel="noopener">Vue.js 与外部交互&lt;/a>：Vue.js 是非常优秀的网页构建框架，不过我们往往会面临着比较割裂的开发情况，即网页中的一部分是交由 Vue.js 管理，而另一部分是交由其他脚本或者插件管理；这中情况在多团队协同开发或者对旧版本的改造时可能会碰到。而本文则介绍了应该如何使用 Vue.js 与外部其他脚本进行交互，譬如管理 head、body 标签、监听键盘事件等等内容。( &lt;a href="https://parg.co/bMw" target="_blank" rel="noopener">https://parg.co/bMw&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bV9" target="_blank" rel="noopener">使用现代方法端到端测试 Vue.js 应用&lt;/a>：端到端测试是 Web 测试中的重要组成部分，也是应用开发流程中不可或缺的部分；本文则介绍了如何使用 TestCafe 对 Vue.js 应用进行端到端测试。( &lt;a href="https://parg.co/bV9" target="_blank" rel="noopener">https://parg.co/bV9&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://vuejsdevelopers.com/2017/05/28/switch-from-react-to-vue-js/" target="_blank" rel="noopener">从 React 迁移到 Vue.js&lt;/a>：React 与 Vue.js 都是非常优秀的前端框架，不同的团队在不同的应用场景下可能有不同的偏好。而本文则记录了作者从 React 迁移到 Vue.js 中的思考过程；本文首先介绍了 React 与 Vue.js 之间的异同，对比了二者常用的语法特点以及生态圈，并且讨论了为何从 React 迁移到 Vue.js 的理由。( &lt;a href="https://parg.co/bJ8" target="_blank" rel="noopener">https://parg.co/bJ8&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://scotch.io/tutorials/state-management-in-vue-getting-started-with-vue" target="_blank" rel="noopener">基于 Vuex 的 Vue 应用状态管理&lt;/a>：就如同其他基于组件的框架，对于基于 Vue 开发的应用随着其体量与功能的增加，对于状态的追踪会变得日渐麻烦。而本文则分析了状态管理的痛点以及深入浅出地介绍了如何利用 Vuex 进行 Vue 应用状态管理。( &lt;a href="https://parg.co/bJk" target="_blank" rel="noopener">https://parg.co/bJk&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bJ6" target="_blank" rel="noopener">Vue 2017 现状与展望&lt;/a>：5 月 20 日，在全球首届 VueConf 上，Vue.js 作者尤雨溪介绍了 Vue.js 2017 的现状，并对 Vue 的未来做了展望。本文是对此次演讲的回顾。获取更多 Vue 相关内容，请关注前端之巅公众号并回复“Vue”。( &lt;a href="https://parg.co/bJ6" target="_blank" rel="noopener">https://parg.co/bJ6&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bic" target="_blank" rel="noopener">Nuxt.js SSR 与权限验证指南&lt;/a>：Nuxt.js 是基于 Vue.js 构建的服务端渲染框架，它允许开发者快速创建支持服务端渲染的应用；而本文则是介绍了利用 Nuxt.js 搭建应用并且为其添加权限验证模块的步骤。( &lt;a href="https://parg.co/bic" target="_blank" rel="noopener">https://parg.co/bic&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/using-filters-vue-js/" target="_blank" rel="noopener">在 Vue.js 中使用过滤器&lt;/a>：过滤器是 Vue 中常用的处理数据渲染结果的方式之一，我们首先需要明白过滤器并不是对于方法、推导值等的替代，毕竟它们并没有真实地转换数据，而只是对用户的可视结果进行了处理。自 Vue 2.0 之后框架本身并无内置的过滤器，而本文则是介绍了基本的过滤器的使用语法以及几个经典的使用场景。( &lt;a href="https://css-tricks.com/using-filters-vue-js/" target="_blank" rel="noopener">https://css-tricks.com/using-filters-vue-js/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.nativescript.org/blog/a-new-vue-for-nativescript" target="_blank" rel="noopener">使用 Vue 与 NativeScript 开发跨端应用&lt;/a>：目前标准的开发 NativeScript 应用的方式是使用朴素的 JavaScript 或者 Angular，而本文介绍了如何结合使用 Vue 与 NativeScript 来开发跨终端应用。本文首先阐述了 Vue.js 相较于 React 或者 Angular 的优势，然后阐述了使用 Vue 语法来开发基础 NativeScript 应用的步骤。( &lt;a href="https://www.nativescript.org/blog/a-new-vue-for-nativescript" target="_blank" rel="noopener">https://www.nativescript.org/blog/a-new-vue-for-nativescript&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bLH" target="_blank" rel="noopener">基于 Firebase 与 Vue.js 构建基于地理位置的聊天室&lt;/a>：本文介绍了基于 Firebase 与 Vue.js 构建某个基于地理位置搜索与配对的聊天室应用的过程，应用发布在&lt;a href="https://near.idgo.me./" target="_blank" rel="noopener">这里&lt;/a>，还是挺有意思的应用。本文除了介绍 Vue.js 项目的基础构建与语法之外，还介绍了所谓 Geohash 的知识与 Firebase 相关接口的使用。( &lt;a href="https://parg.co/bLH" target="_blank" rel="noopener">https://parg.co/bLH&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9S" target="_blank" rel="noopener">在 Vue.js 中使用 Mixins&lt;/a>：在项目开发中我们经常会碰到两个组件的业务逻辑有所相似，可能共享相同的底层业务逻辑；此时我们就需要考虑如何来合理地划分代码，即避免冗余代码，也不能过度抽象。而本文则介绍了如何在 Vue.js 中使用 Mixins 来编写可重复使用的功能代码片；Mixin 允许我们将部分代码片封装到函数中然后动态地在多个组件中使用。( &lt;a href="https://parg.co/b9S" target="_blank" rel="noopener">https://parg.co/b9S&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b9H" target="_blank" rel="noopener">为什么我选择了 React 而不是 Vue？&lt;/a>：本文作者阐述了自己在技术选型过程中更倾向于 React 的原因，本文带有较强的主观色彩，请读者批判性阅读。本文作者认为 React 与 Vue 虽然是相似的前端组件型库，但是 Vue、Angular、Knockout 等框架依旧是以 HTML 为中心，使用指令来描述部分逻辑；而 React 则是以 JavaScript 为中心，完全使用 JavaScript 代码来描述逻辑。本文从模板、工具、状态的可变性等角度来论证自己的观点。( &lt;a href="https://parg.co/b9H" target="_blank" rel="noopener">https://parg.co/b9H&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byU" target="_blank" rel="noopener">三分钟交互式介绍 Vue.js&lt;/a>：Vue.js 是近年来逐步流行的轻量级构建前端界面的组件库，其相对平滑的学习曲线确保了开发者能够快速入门使用。而本文作者则循序渐进地介绍了 Vue.js 基础使用知识，并且在每一段中都包含了&lt;a href="https://scrimba.com/casts/crNKWHd" target="_blank" rel="noopener">交互式代码演示&lt;/a>；作者依次介绍了 Vue.js 中模板语法与数据绑定、常见指令以及响应用户输入等内容；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener">这里&lt;/a>。( &lt;a href="https://parg.co/byU" target="_blank" rel="noopener">https://parg.co/byU&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byQ" target="_blank" rel="noopener">TDD 与 Vue.js&lt;/a>：在真实的项目中我们免不了需要进行代码测试，而本文即分享如何在 Vue.js 中遵循测试驱动开发的基础知识。本文首先利用 Vue CLI 的默认模板创建了一个简单的组件，然后为其添加部分基础功能，同时会为每个元素添加单元测试。( &lt;a href="https://parg.co/byQ" target="_blank" rel="noopener">https://parg.co/byQ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byl" target="_blank" rel="noopener">Vue.js 框架的优势与缺陷(*仅代表原作者个人看法，若有翻译不当之处请指正)&lt;/a>：Vue.js 已经在国内的很多公司得到了广泛应用，与 Google 的 Angular 以及 Facebook 的 React 鼎足而立，本文作者则是从自己的角度阐述了 Vue.js 目前的优势与潜在缺陷所在。首先 Vue.js 的优势在于其包体较小，良好的文档方便开发者理解与使用，并且能很快地集成到现有项目中，其灵活性与数据通信机制也保证了项目的可扩展性。而目前来看 Vue.js 的缺陷则在于其开发者社区可能不如 React 等成熟，并且主要使用者以国人为主，与英语社区的交流存在一定语言障碍，同时其灵活性本身也是一种双刃剑，对于某些开发者而言反而会造成困难；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener">这里&lt;/a>。( &lt;a href="https://parg.co/byl" target="_blank" rel="noopener">https://parg.co/byl&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byC" target="_blank" rel="noopener">利用 Webpack 加速 Vue.js 应用的四种姿势&lt;/a>：Webpack 是开发 Vue.js 单页应用的必须工具之一，它能够帮你处理复杂的编译步骤从而简化开发流程，并且能够帮助你优化应用体积与性能表现。而本文中作者即从单文件组件、优化 Vue 构建配置、浏览器缓存管理、代码分割这四个角度讨论了如何利用 Webpack 提供的特性来加速 Vue.js 应用。( &lt;a href="https://parg.co/byC" target="_blank" rel="noopener">https://parg.co/byC&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ber" target="_blank" rel="noopener">VueConf 观后感&lt;/a>：首届官方举办的 Vue.js 大会刚刚落幕，本文即是作者对于自己参会之后的感想进行的简要阐述。作者首先介绍了自己参与的数个 WorkShop 与演讲，从 Evan You 对于 Vue.js 发展历史与现状的介绍，到基于 Vuex 的状态管理、服务端渲染、代码分割等多个具体的技术实现。本文是非常不错的对于 VueConf 的回顾，如果没有参会或者尚未了解过议程的同学可以一看，并且选择自己感兴趣的议题查看对应的胶片与演讲视频。( &lt;a href="https://parg.co/ber" target="_blank" rel="noopener">https://parg.co/ber&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bX2" target="_blank" rel="noopener">选择与支持 Vue.js 的理由&lt;/a>：本文是来自 Monterail 的前端工程师、Vue.js 资深开发者 Damian Dulisz 分享他选择与支持 Vue.js 的理由。本文不仅仅从开发者的角度阐述了 Vue.js 对其的吸引力，还从产品经理的视角、Vue.js 社区发展的角度阐述了 Vue.js 的巨大潜力。本文是一篇不错的介绍 Vue.js 最新变化与进展，并且对常见的 Vue.js 的部分误解进行了阐述的文章；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。( &lt;a href="https://parg.co/bX2" target="_blank" rel="noopener">https://parg.co/bX2&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ber" target="_blank" rel="noopener">VueConf 观后感&lt;/a>：首届官方举办的 Vue.js 大会刚刚落幕，本文即是作者对于自己参会之后的感想进行的简要阐述。作者首先介绍了自己参与的数个 WorkShop 与演讲，从 Evan You 对于 Vue.js 发展历史与现状的介绍，到基于 Vuex 的状态管理、服务端渲染、代码分割等多个具体的技术实现。本文是非常不错的对于 VueConf 的回顾，如果没有参会或者尚未了解过议程的同学可以一看，并且选择自己感兴趣的议题查看对应的胶片与演讲视频。( &lt;a href="https://parg.co/ber" target="_blank" rel="noopener">https://parg.co/ber&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIZ" target="_blank" rel="noopener">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR &lt;/a>：在 Baidu Create 2017 Web 生态分论坛上，百度搜索正式对外发布基于 Vue 的 PWA 解决方案 LAVAS，同时宣布将全面支持 Web AR，此外，百度还对 MIP 的架构与原理、HTTPS 等技术进行了深度解析。( &lt;a href="https://parg.co/bIZ" target="_blank" rel="noopener">https://parg.co/bIZ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIs" target="_blank" rel="noopener">基于 Vue.js 2 的分角色权限验证&lt;/a>：本文作者因为 Vue.js 平滑的学习曲线与易于理解的官方文档而倾向于使用 Vue.js 进行前端开发工作，本文即是作者介绍如何利用 Vue.js 2 来为项目添加基于角色的权限控制功能。作者在本文中首先介绍了基于角色的权限控制的概念与设计，然后讨论了如何使用 vue-cli 来构建基础项目架构并且按特征划定目录层次，最后介绍了关键部分的代码实现以及如何使用 Vuex 来管理应用状态；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。( &lt;a href="https://parg.co/bIs" target="_blank" rel="noopener">https://parg.co/bIs&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIJ" target="_blank" rel="noopener">基于 Vue.js 与 Laravel 构建实时仪表盘&lt;/a>：本文是来自 Spatie 的工程师，介绍基于 Laravel 与 Vue.js 构建，实时的队伍与事件信息展示面板的实践总结。本文首先介绍了历史项目的不足以及目前项目的设计考量，然后讨论了前端网格布局的解决方案。接下来作者分别介绍了服务端基于 Laravel 与客户端基于 Vue.js 的关键代码的实现；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。( &lt;a href="https://parg.co/bIJ" target="_blank" rel="noopener">https://parg.co/bIJ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIN" target="_blank" rel="noopener">Vue 直出内存泄露问题的追查实践&lt;/a>：近期，作者遇到了 Vue 直出内存泄露问题，并进行了追查。其项目背景是，作者在一次规模较大的运营活动中正好碰到了内存泄漏的问题，技术背景和业务背景分别如下：技术背景：node 直出项目，直出用到了 Vue 的直出方案；业务背景：一次 PV 最高达到 1400W 的运营活动 qps 的压力下，后期使得服务出现一定错误率。本文将回顾整个追查的实践过程。( &lt;a href="https://parg.co/bIN" target="_blank" rel="noopener">https://parg.co/bIN&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/vuejs/vue/releases/tag/v2.4.0" target="_blank" rel="noopener">Vue.js 2.4.0 发布&lt;/a>：Vue.js 2.4.0 版本提供了内置的服务端渲染与异步组件支持，从而保证了在服务端渲染中也能使用异步组件，而不再是局限于路由中使用。此外该版本还简化了包装组件的写法、提供了 v-on 等一系列新的指令或者 API 特性，并且修复了老版本中存在的错误；更多详细内容可参考原文，或者阅读 &lt;a href="https://parg.co/b17" target="_blank" rel="noopener"> Vue.js 2.4.0 中的 4 个重大变化&lt;/a>一文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1j" target="_blank" rel="noopener">Vue.js 项目中使用 TypeScript&lt;/a>：Vue.js 是优秀的渐进式前端框架，而 TypeScript 则可以为项目添加静态类型检测的特性，本文即是介绍如何在 Vue.js 项目中使用 TypeScript。本文以 Vue.js 中的单文件组件为例，首先讨论了 tsconfig.json 的基本配置以及如何引入 Webpack 并配置合适的 loader；然后介绍了 TypeScript 的基础用法，更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bW6" target="_blank" rel="noopener">Vue.js 组件的实践分享&lt;/a>：本文是来自 Morningstar 的工程师，分享的他们利用 Vue.js 进行前端组件化开发时的实践经验；主要是它们对于 Vue.js 组件编写的心得。作者首先介绍了组件不同生命周期回调的含义，然后介绍了从简单到复杂组件的状态与数据管理，接下来介绍了 Slot 与 Minxin 在组件重用上的具体用法等内容；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.sitepoint.com/creating-beautiful-charts-vue-chart-js/" target="_blank" rel="noopener">使用 Vue.js 与 Chart.js 构建漂亮的图表&lt;/a>：图表是现代网站与应用的重要组成，它们能够帮助你更有张力地呈现数据；本文即是介绍如何利用 Chart.js 与 Vue.js 来有效地，针对不同格式的图表进行可视化数据呈现。本文首先介绍了使用 vue-cli 构建基本的项目骨架，然后引入了 vue-router 进行路由划分，接下来介绍了利用 vue-chartjs 库依次构建常见的线型图、饼图、气泡图、柱状图等常见的图表；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgU" target="_blank" rel="noopener"> Vue.js 中安全地使用 jQuery 插件&lt;/a>：实际上我们并不推荐在界面中同时使用 jQuery 与 Vue.js，不过在项目开发中有时候我们无法避免地需要同时使用，本文即是讨论如何安全地使用 jQuery 插件。本文以某个时间日期选择插件为例，首先讨论了引入 jQuery 存在的潜在风险，然后一步步地介绍了初始化插件、将插件包裹在 Vue.js 组件内、如何在插件与组件之间进行数据交互等内容；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.nativescript.org/blog/vue-and-nativescript-in-one-minute" target="_blank" rel="noopener">Vue.js 与 NativeScript 初窥&lt;/a>：NativeScript 框架最值得称道的即是其扩展性，它目前已经支持原生 JavaScript、Angular、Vue.js 等多种框架或者编码方式，同时未来还计划支持 Preact 等框架。本文即是介绍如何使用 NativeScript 与 Vue.js 协同开发，首先介绍了如何使用 NativeScript 命令行工具创建项目，然后引入 Vue.js 插件以及如何运行该项目；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://morningstar.engineering/vue-2-unit-testing-primer-48d1d616a981" target="_blank" rel="noopener">Vue.js 2 单元测试指南&lt;/a>：本文主要介绍如何利用 Jasmine 为 Vue.js 2 应用搭建完整的单元测试；这里选用 Jasmine 的原因是它本身的性能较好，并且 Vue.js 本身也是使用该测试框架。本文首先介绍了环境搭建与待测试的组件构成，然后依次介绍了配置测试环境、如何根据组件的业务功能逻辑选定测试点、如何编写不同目标的测试用例等内容；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bF4" target="_blank" rel="noopener">深入 Vue.js 响应式原理&lt;/a>：本文作者从 Java 与 C# 中经典的 Getters/Setters 引入，讨论了 Vue.js 中从组件渲染函数、数据的 Getter、Setter 劫持、监听器的控制以及重渲染触发整个生命流程。更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="开源项目">开源项目&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/bailicangdu/vue2-elm" target="_blank" rel="noopener">vue2-elm&lt;/a>：基于 vue2 + vuex 构建一个具有 45 个页面的大型单页面应用，涉及注册、登陆、商品展示、购物车、下单等等，是一个完整的流程。挺不错的学习参考资料。( &lt;a href="https://github.com/bailicangdu/vue2-elm" target="_blank" rel="noopener">https://github.com/bailicangdu/vue2-elm&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lin-xin/manage-system" target="_blank" rel="noopener">基于 Vue2 与 Element-UI 的管理系统模板&lt;/a>：基于 Vue.js 2.x 系列 + Element UI 的后台管理系统解决方案。( &lt;a href="https://github.com/lin-xin/manage-system" target="_blank" rel="noopener">https://github.com/lin-xin/manage-system&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/hujiulong/vue-3d-model" target="_blank" rel="noopener">vue-3d-model&lt;/a>：一个展示三维模型的 Vue 组件，支持模型操作和模型点击事件，能自动缩放模型到合适大小并校正偏移，目前支持 obj、stl、dae 和 json 格式的模型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/opendigg/awesome-github-vue" target="_blank" rel="noopener">awesome-github-vue&lt;/a>：awesome-github-vue 是由 OpenDigg 整理并维护的 Vue 相关开源项目库集合。( &lt;a href="https://github.com/opendigg/awesome-github-vue" target="_blank" rel="noopener">https://github.com/opendigg/awesome-github-vue&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/zulko/eagle.js/" target="_blank" rel="noopener">Eagle.js&lt;/a>：Eagle.js 是基于 Vue.js 构建的创建 Web 中幻灯片的库，支持动画、主题、交互插件等常用功能。( &lt;a href="https://github.com/zulko/eagle.js/" target="_blank" rel="noopener">https://github.com/zulko/eagle.js/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/hilongjw/vue-recyclerview" target="_blank" rel="noopener">vue-recyclerview&lt;/a>：vue-recyclerview 是基于 DOM 重用的能够处理大型列表项目的 Vue 组件，它能够用于构建高性能瀑布式列表或者无限列表。( &lt;a href="https://github.com/hilongjw/vue-recyclerview" target="_blank" rel="noopener">https://github.com/hilongjw/vue-recyclerview&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">hacker-news-pwas&lt;/a>：基于不同的前端框架实现的符合 PWA 应用特性的 Hacker News APP 的合集，包括了常见的 React、Angular、Vue、Preact 等多个版本，并且均在 Lighthouse 评测中达到 90 以上的评分。( &lt;a href="https://parg.co/biQ" target="_blank" rel="noopener">https://parg.co/biQ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://aurora.mljr.com/install.html" target="_blank" rel="noopener">Aurora&lt;/a>：Aurora 是基于 Vue 2.2.0 版的组件库, 提供了常见的网格布局、按钮、表单域、分页、模态窗口等组件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/spatie/vue-table-component" target="_blank" rel="noopener">vue-table-component&lt;/a>: vue-table-component 提供了轻量级、易于使用的 Vue.js 组件；该组件的一大特性在于其能够自动缓存用户的筛选与排序结果，即使用户刷新了页面该数据仍然可以保留使用。( &lt;a href="https://github.com/spatie/vue-table-component" target="_blank" rel="noopener">https://github.com/spatie/vue-table-component&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>WebAssembly</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/webassembly/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/semiannualreport/2017-1/webassembly/</guid><description>&lt;h1 id="前端每周清单半年盘点之-webassembly-篇">前端每周清单半年盘点之 WebAssembly 篇&lt;/h1>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单；本文则是对于半年来发布的前端每周清单中的 WebAssembly 相关的教程实践与开源项目的盘点，可以查看&lt;a href="https://parg.co/bh1" target="_blank" rel="noopener">这里&lt;/a>获得往期清单或者其他盘点篇。&lt;/p>
&lt;h1 id="教程实践">教程实践&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://hacks.mozilla.org/2017/02/what-makes-webassembly-fast/" target="_blank" rel="noopener">《对比探秘 WebAssembly 性能优越之谜》&lt;/a>: 本系列文章通过有趣的漫画介绍了 WebAssembly 的前世今生，并且与 JavaScript 就加载、解析、编译、执行等浏览进行了详细对比，从而介绍 WebAssembly 的性能缘何相较于 JavaScript 会好上很多。同时作者也强调，WebAssembly 与 JavaScript 各有所长，未来并不会存在太多的竞争，更多的是相辅相成，各司其职。( &lt;a href="http://suo.im/3jsTUH" target="_blank" rel="noopener">http://suo.im/3jsTUH&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bsv" target="_blank" rel="noopener">《浅析 WebAssembly 缘何优于 Asm.js》&lt;/a>：WebAssembly 是新的 Web 中可执行格式，逐现代浏览器纷纷地提供了对于 WebAssembly 的原生支持；本文则是对于 WebAssembly 相较于 asm.js 带来的性能提升背后的原理进行简要介绍。(&lt;a href="https://parg.co/bsv" target="_blank" rel="noopener">https://parg.co/bsv&lt;/a>)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bVa" target="_blank" rel="noopener">《简短的 WebAssembly 卡通指南》&lt;/a>：现在有很多关于 WebAssembly 与 JavaScript 生态圈的讨论，人们往往关注于 WebAssembly 带来的巨大的性能提升以及它会如何颠覆现代 Web 开发。不过很多的介绍中并没有详细阐述隐藏在速度提升之后的具体细节，本文则是从整个 JavaScript 的演化史来介绍 WebAssembly 巨大性能提升的原因。( &lt;a href="https://parg.co/bVa" target="_blank" rel="noopener">https://parg.co/bVa&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bk6" target="_blank" rel="noopener">《理解 WebAssembly 的文件格式》&lt;/a>：为了保证 WebAssembly 能够被人们阅读与理解，需要提供对于 wasm 二进制格式的文本表示。该特性着眼于能够在文本编辑器、浏览器开发者工具等开发工具中浏览 WebAssembly 文件，而本文则介绍了这种文件格式的规范与工作原理，以及底层的字节码与上层的 JavaScript 对象之间的关联关系。( &lt;a href="https://parg.co/bk6" target="_blank" rel="noopener">https://parg.co/bk6&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html" target="_blank" rel="noopener">《这 WebAssembly，是 Mozilla 赢了》&lt;/a>：Mozilla 提出 1 asm.js 与 Google Chrome 提出的 PNaCI 是都是致力于在浏览器中运行原生代码的技术方案。不过 PNaCI 却存在着自绝于 JavaScript 以及 HTML 等问题，并且其他的浏览器厂商很难去支持 PNaCI 标准。而 asm.js 则以轻量级的对于标准 Web 平台扩展的方式实现了这一目标，也就导致了最终 WebAssembly 决定靠近 asm.js 而不是 PNaCI。( &lt;a href="http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html" target="_blank" rel="noopener">http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.openbloc.fr/webassembly-first-steps/" target="_blank" rel="noopener">《WebAssembly 初体验：重构简单游戏引擎》&lt;/a>：WebAssembly 为我们提供了构建高性能的前端应用的途径，而本文则从零开始介绍如何使用 C 来覆写简单的 JavaScript 游戏引擎并且将其编译为 WebAssembly。本文依次介绍了如何搭建基础的 Emscription 工具链、使用 JavaScript 引入 wasm 模块、覆写并且优化某个小型游戏引擎、两个引擎的性能评测等等部分。( &lt;a href="http://blog.openbloc.fr/webassembly-first-steps/" target="_blank" rel="noopener">http://blog.openbloc.fr/webassembly-first-steps/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/biB" target="_blank" rel="noopener">《Figma 利用 WebAssembly 降低三倍加载速度》&lt;/a>：自 WebAssembly 推出之后，很多开发者都开始尝试在小型项目中实践 WebAssembly，不过尚缺大型真实案例比较。而 Figma 因为其产品主要基于 C++ 实现，可以方便地编译到 WebAssembly 中并且与原方案进行性能比较。本文中 Figma 介绍了它们在 Firefox 中使用 WebAssembly 之后带来的加载性能提升以及下载尺寸的优化，同时还提及了目前 WebAssembly 在实际项目使用中存在的一些问题与风险。( &lt;a href="https://parg.co/biB" target="_blank" rel="noopener">https://parg.co/biB&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/byh" target="_blank" rel="noopener">Rust、WebAssembly 与 Webpack&lt;/a>：WebAssembly 是新的运行于 Web 平台的二进制格式，我们能够将 C、C++、Rust 这些语言编译到 .wasm 文件格式中然后在浏览器环境下运行他们；通常这些编译后的代码在包体体积与运行速度上都会比 JavaScript 有明显提升。而本文则着眼于介绍如何在浏览器中执行底层的 Rust 代码，也可以参考&lt;a href="https://parg.co/by4" target="_blank" rel="noopener">这篇文章&lt;/a>( &lt;a href="https://parg.co/by4" target="_blank" rel="noopener">https://parg.co/by4&lt;/a> )来了解更多的关于 WebAssembly 快速实践的知识。( &lt;a href="https://parg.co/byh" target="_blank" rel="noopener">https://parg.co/byh&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://pspdfkit.com/blog/2017/webassembly-a-new-hope/" target="_blank" rel="noopener">WebAssembly 在 PSPDFKIT 的实践&lt;/a>：随着今年三月份 WebAssembly Community Group 就标准达成一致，越来越多的主流浏览器开始支持 WebAssembly，本文即是 PDF 工具开发者 PSPDFKIT 介绍它们利用 WebAssembly 开发浏览器端渲染的 PDS 预览工具的实践经验。本文首先介绍了 asm.js 的工作原理与编译机制，然后阐述了 WebAssembly 的概念与组成，最后介绍了 WebAssembly 在 PSPDFKit 的实践经验以及他们在将原本大型 C++ 代码库转化为 WebAssembly 格式时的体验；更多 WebAssembly 相关资料参考&lt;a href="https://parg.co/b2S" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>#开源项目&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/mbasso/asm-dom" target="_blank" rel="noopener">asm-dom&lt;/a>: asm-dom 是轻量级的基于 WebAssembly 的 Virtual DOM 框架，其允许开发者使用 C++ 来构建 Web 单页应用。开发者可以仅使用 C++ 来编写 Web 应用，然后通过 Emscripten 来将其转化为 WebAssembly；其能允许开发者直接使用现有的 C++ 标准库代码，从而保证代码复用与性能提升。&lt;/li>
&lt;/ul></description></item></channel></rss>