<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>3 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/index.xml" rel="self" type="application/rss+xml"/><description>3</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>3</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/</link></image><item><title>3.1</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.1/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-98fded5608f613d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面53.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-53-期go-与-webassembly-react-suspense-演练-css-技巧">前端每周清单第 53 期：Go 与 WebAssembly, React Suspense 演练, CSS 技巧&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UWu" target="_blank" rel="noopener">Go 语言的 WebAssembly 架构&lt;/a>: 本文档描述了 Go 编译器中即将加入的 WebAssembly 架构设计方案，该方案会被合入目前的 Go 1.11 版本。这也意味着我们可以使用 Go 来编写 WebAssembly 模块代码，从而也为 Go 提供了类似于 JavaScript 这样能够编写 Web 端应用的能力。可预见该架构会对软件工程生态体系有一定积极的影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ua1" target="_blank" rel="noopener">Flutter beta 1 发布&lt;/a>: 作为 Mobile Word Congress 2018 的一部分，近日 Flutter 正式发布了其首个 Beta 版本。Flutter 是 Google 新的移动端界面框架，用来帮助开发者快速构建高质量的跨平台原生界面。Flutter 致力于实现以下目标：原生的无缝集成与性能保障，高效率的开发以及大量跨平台的 UI 工具/组件库。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ariya/phantomjs/issues/15344" target="_blank" rel="noopener">再见，PhantomJS&lt;/a>: 随着 Chrome 与 Firefox 纷纷推出了 Headless 模式，原本许多的 PhantomJS 开发活动都逐渐停滞。近日，PhantomJS 宣布将会归档其项目，并且停止开发操作；PhantomJS 2.1.1 将会是最后一个稳定版本。感谢 PhantomJS 这些年来带给我们的功能特性，它已经很好地完成了最初的目标与历史使命，感谢 &amp;amp; 再见。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/machine-learning/crash-course/" target="_blank" rel="noopener">Google 发布机器学习速成课程&lt;/a>: 为了帮助更多的人了解与学习机器学习相关的知识技能，Google 发布了人工智能学习网站 Learn with Google AI。本次课程，一共是 15 小时，其中包括 25 节课程以及 40 多项练习，该课程并不要求任何前置的学习内容，非常适合于各个层次的初学者。非常值得一提的是，本次课程提供了非常完美的中文支持，包括中文配音，中文课程材料以及中文概念讲解。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/AIDL-Series" target="_blank" rel="noopener">数据科学与机器学习实战手册&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://exploringjs.com/es2018-es2019/toc.html" target="_blank" rel="noopener">深入探究 ES2018 与 ES2019&lt;/a>: 本小册是对于 ES2018 与 ES2019 的特性进行全面的介绍与讲解，目前涵盖了 ES2018 中的 Asynchronous iteration, Rest/Spread Properties, RegExp named capture groups, RegExp Unicode property escapes, RegExp lookbehind assertions, s (dotAll) flag for regular expressions, Promise.prototype.finally(), Template Literal Revision 等特性。更多相关内容参考 &lt;a href="https://parg.co/UIj" target="_blank" rel="noopener">现代 JavaScript 开发：语法基础与工程实践&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UWr" target="_blank" rel="noopener">React Suspense 演练&lt;/a>: Dan 在 JSConf Iceland 上演示的 Async React Demo 吸引了大量的关注，并为我们介绍了 Time Slicing 与 React Suspense 这两个特性。本文即是对于 Movie Search 案例的分析与实践，从而了解 React Suspense API 的相关特性，包括了 simple-cache-provider.SimpleCache, simple-cache-provider.createResource, ReactDOM.unstable_deferredUpdates 等。更多相关内容参考&lt;a href="https://parg.co/UaY" target="_blank" rel="noopener">现代 Web 全栈开发与工程架构&amp;ndash;React 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UW4" target="_blank" rel="noopener">你或许不知道的 CSS 技巧&lt;/a>: 本文是对于 CSS 中的一些特性用法进行介绍，有点类似于 &lt;a href="https://atomiks.github.io/30-seconds-of-css" target="_blank" rel="noopener">30 Seconds of CSS&lt;/a> 这样的 CSS 实用代码片。本文涉及到的技巧譬如基于宽度的垂直排版，多背景动画，字体简写等等。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Awesome-CheatSheets" target="_blank" rel="noopener">CSS CheatSheet&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/tJQ3M0zy53LnuPOYudL0Uw" target="_blank" rel="noopener">Electron 应用自动更新方案设计&lt;/a>: 在发布一个桌面应用之前，必须要考虑的一个问题是：怎么更新(迭代)？作者设计和实现了 Electron 应用的一整套自动更新方案，并且已应用于产品上，所以写下这篇文章和大家分享，可以怎么设计和实现一个 Electron 应用的自动更新，我们对于自动更新需求的考虑可能比你想得稍微复杂一些。本文将首先从需不需要更新开始谈起，接着谈怎么从人肉更新一步步进化到无痛的自动更新。然后，我会向你介绍，一个完善后的自动更新需求可以是怎样的。最后，也是最关键的一部分：我们该采取怎样的更新思路，又该如何设计我们的产品逻辑。更多相关内容参考&lt;a href="https://parg.co/UWD" target="_blank" rel="noopener">现代 Web 应用架构与性能调优&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/andrew--r/frontend-case-studies" target="_blank" rel="noopener">前端案例分析&lt;/a>: 在前端学习实践的过程中，我们可能会阅读很多类似于构建 Todo List 的文章，他们是不错的入门文章，却无法告诉你如何来解决真实的，大规模应用中的问题。本文则是列举了一系列企业级应用的实践案例，包括了来自 Facebook, Twitter, Google, Airbnb 等公司的演讲或者文章。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Awesome-Lists#web" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UW5" target="_blank" rel="noopener">Didact Fiber: Incremental reconciliation&lt;/a>: 这是一篇非常不错的深入讲解 Fiber 实现的文章。Didact 是作者实现的类 React 教学型框架，而本文则瞩目于如何将 didact 中的部分代码重写以使其适配于最新的 React 16 架构；作者直接使用了来自 React 代码库中的结构、变量以及函数名，从而方便理解。本文依次介绍了为何需要 Fiber，如何调度 MicroTasks，Fiber 的数据结构、流程与实现等内容。更多相关内容参考&lt;a href="https://parg.co/UaY" target="_blank" rel="noopener">现代 Web 全栈开发与工程架构&amp;ndash;React 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/redesigning-redux-b2baee8b8a38" target="_blank" rel="noopener">重构 Redux&lt;/a>: 随着 React 发布新的 Context API，又有了许多关于 Redux 的讨论：状态管理是否依然解决？众所周知，状态管理一直是应用开发中的难点之一，本文即是对于状态管理中常见的问题进行重新考量：我们是否需要额外的状态管理库，Redux 是否值得使用，是否有更好地状态管理方案等。更多相关内容参考&lt;a href="https://parg.co/UWD" target="_blank" rel="noopener">现代 Web 应用架构与性能调优&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://v8project.blogspot.sg/2018/03/tracing-js-dom.html" target="_blank" rel="noopener">从 JS 到 DOM 的双向追踪&lt;/a>: Chrome 66 中针对内存泄漏分析进行了优化，从而方便开发者调试内存泄漏相关的问题。现在 Chrome DevTools 能够追踪并且快照 C++ DOM 对象，然后从 JavaScript 对象开始列举出所有的可达对象。该特性是 V8 垃圾收集器中提供的新 C++ 追踪机制的应用之一，更多相关内容参考&lt;a href="https://parg.co/UIj" target="_blank" rel="noopener">Web 内存泄漏分析&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/midwayjs/pandora" target="_blank" rel="noopener">Pandora.js&lt;/a>: Pandora.js 是阿里开源的 Node.js 应用管理工具，其基于 TypeScript 开发，提供了管理、衡量、追踪等一系列的特性。Pandora.js 源于多年企业级 Node.js 应用管理实践，致力于提供从管理监控，到调试部署等全流程的支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/pqina/filepond" target="_blank" rel="noopener">filepond&lt;/a>: filepond 是灵活有趣的 JavaScript 文件上传控件，它提供了漂亮的过场交互动画以及良好的用户体验，并且利用客户端图片优化技术来保证高性能的上传。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kantord/just-dashboard" target="_blank" rel="noopener">just-dashboard&lt;/a>: just-dashboard 能够基于 YAML 或者 JSON 配置文件生成数据面板，从而避免了开发者或者数据工程师重复的劳动。just-dashboard 还允许使用 jq 查询，或者指定某个组件的数据抓取地址，just-dashboard 会在运行时动态抓取数据并且渲染为图表。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/terkelg/prompts" target="_blank" rel="noopener">prompts&lt;/a>: prompts 是可以在命令行中使用的，轻量级、美观大方、用户友好的交互式提示。与其他框架相比，prompts 没有过多的外部依赖，尽可能地简化内部复杂度。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UWB" target="_blank" rel="noopener">过完年跳槽，要考虑哪些要素？&lt;/a>: 发完奖金了，过完年了，又到了人心躁动的时节。不少 IT 圈的小伙伴可能在思考，要不要换工作。今天和大家聊聊 IT 人换工作这个话题，楼主也面试过的不少候选人，站在面试官的角度，谈谈什么样的 IT 人会在面试中加分。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明 “ 前端之巅投稿 ”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>3.1-en</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.1-en/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.1-en/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-98fded5608f613d5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面53.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="frontend-weekly-no7-webassembly-architecture-for-go-react-suspense-redesigning-redux">Frontend+ Weekly No.7: WebAssembly architecture for Go, React Suspense, Redesigning Redux&lt;/h1>
&lt;p>The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href="https://medium.com/@384924552" target="_blank" rel="noopener">Medium&lt;/a>, &lt;a href="https://news.ycombinator.com/news" target="_blank" rel="noopener">Hacker News&lt;/a>, &lt;a href="reddit.com">Reddit&lt;/a>,&lt;a href="twitter.com">Twitter&lt;/a>, &lt;a href="mybridge.co">MyBridge&lt;/a>, etc.&lt;/p>
&lt;p>More Issues can be found in &lt;a href="https://parg.co/U9x" target="_blank" rel="noopener">Frontend+ Weekly Repository&lt;/a>.&lt;/p>
&lt;h2 id="news">News&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UWu" target="_blank" rel="noopener">WebAssembly architecture for Go&lt;/a>: This documents describes the design decisions that went into the new WebAssembly architecture (short “wasm”) for the Go compiler. The goal is to upstream it to the official Go repository in the current development cycle, targeting Go 1.11. The WebAssembly architecture will allow Go to become an alternative to JavaScript for writing code that runs in a web browser. This new freedom of choice will hopefully have a positive impact on the software engineering ecosystem overall.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ua1" target="_blank" rel="noopener">Announcing Flutter beta 1: Build beautiful native apps&lt;/a>: as part of Mobile World Congress 2018, the first beta release of Flutter is announced. Flutter is Google&amp;rsquo;s new mobile UI framework that helps developers craft high-quality native interfaces for both iOS and Android. Flutter targets the sweet spot of mobile development: performance and platform integrations of native mobile, with high-velocity development and multi-platform reach of portable UI toolkits.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ariya/phantomjs/issues/15344" target="_blank" rel="noopener">PhantomJS: Archiving the project, suspending development&lt;/a>: Due to the lack of active contribution, PhantomJS will be archived soon and stop the development. PhantomJS version 2.1.1 will remain the last known stable release until further notice. Chrome and Firefox gaining headless modes is the ultimate goal Phantom could&amp;rsquo;ve achieved, but it served its purpose very well, while it was needed. Thanks &amp;amp; Goodbye.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="tutorial">Tutorial&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/machine-learning/crash-course/" target="_blank" rel="noopener">Google releases machine learning course&lt;/a>: As part of Google’s transition into an AI first world, the company wants to widely open up this technology. Its latest initiative involves a new website with a number of resources, as well as a previously internal online learning course. “Learn with Google AI” is a new educational addition to a site originally announced at the IO developer conference last year. In recent years, the company has repeatedly stated that its goal is to democratize AI and make its tool available for everyone. More changelogs can be found in &lt;a href="https://parg.co/Ugb" target="_blank" rel="noopener">this&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://exploringjs.com/es2018-es2019/toc.html" target="_blank" rel="noopener">Exploring ES2018 and ES2019&lt;/a>: This book is about two versions of JavaScript: ECMAScript 2018 and ECMAScript 2019.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UWr" target="_blank" rel="noopener">A Walkthrough of &lt;em>that&lt;/em> React Suspense Demo&lt;/a>: The Async React demo at JSConf Iceland lived up to the hype: Time Slicing and React Suspense are on the way! In this walkthrough of the 300ish line Movie Search demo, we learn the various aspects of the React Suspense API: simple-cache-provider.SimpleCache, simple-cache-provider.createResource, ReactDOM.unstable_deferredUpdates, etc. More changelogs can be found in &lt;a href="https://parg.co/Ugb" target="_blank" rel="noopener">this&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="engineering-practices">Engineering Practices&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UW4" target="_blank" rel="noopener">Lesser known CSS quirks &amp;amp; advanced tips&lt;/a>: Below you’ll find some of the weirdest CSS features, along with tips and tricks for advanced CSS users. Another practices for CSS is &lt;a href="https://atomiks.github.io/30-seconds-of-css" target="_blank" rel="noopener">30 Seconds of CSS&lt;/a>, a curated collection of useful CSS snippets you can understand in 30 seconds or less. More changelogs can be found in &lt;a href="https://parg.co/Ugb" target="_blank" rel="noopener">this&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/andrew--r/frontend-case-studies" target="_blank" rel="noopener">frontend case studies&lt;/a>: Articles like “Building a simple todo list with [framework or technology name]” won&amp;rsquo;t teach you how that framework or technology solves real-world problems and works at a large scale. This document is a curated list of technical talks and articles about real-world enterprise frontend development. More changelogs can be found in &lt;a href="https://parg.co/Ugb" target="_blank" rel="noopener">this&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="under-the-hood">Under the hood&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UW5" target="_blank" rel="noopener">Didact Fiber: Incremental reconciliation&lt;/a>: This is a really nice deep dive into a sketch of Fiber implementation. Didact is a DIY guide to build your own React, in this post we are going to rewrite most of the code from the didact series to follow React 16 new architecture. We’ll try to mirror the structure, variables and function names from the React codebase. More changelogs can be found in &lt;a href="https://parg.co/Ugb" target="_blank" rel="noopener">this&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/redesigning-redux-b2baee8b8a38" target="_blank" rel="noopener">Redesigning Redux&lt;/a>: Shouldn’t state management be a solved problem by now? Intuitively, developers seem to know a hidden truth: state management seems harder than it needs to be. In this article, we’ll try to answer some questions you’ve probably been asking yourself: Do you really need a library for state management? s the popularity of Redux deserved? Why or why not? ould we make a better state management solution? If so, how? More changelogs can be found in &lt;a href="https://parg.co/Ugb" target="_blank" rel="noopener">this&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://v8project.blogspot.sg/2018/03/tracing-js-dom.html" target="_blank" rel="noopener">Tracing from JS to the DOM and back again&lt;/a>: Debugging memory leaks in Chrome 66 just became much easier. Chrome’s DevTools can now trace and snapshot C++ DOM objects and display all reachable DOM objects from JavaScript with their references. This feature is one of the benefits of the new C++ tracing mechanism of the V8 garbage collector. More changelogs can be found in &lt;a href="https://parg.co/Ugb" target="_blank" rel="noopener">this&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="opensource">OpenSource&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/midwayjs/pandora" target="_blank" rel="noopener">Pandora.js&lt;/a>:Pandora.js is a Manageable, Measurable and Traceable Node.js Application Manager represented by Alibaba powered by TypeScript. As a consequence of years of experiences on enterprise Node.js applications management, Midway team from Alibaba open-sourced Pandora.js finally. It is an application manager integrates many capabilities like monitoring, debugging, resiliency.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/kantord/just-dashboard" target="_blank" rel="noopener">just-dashboard&lt;/a>: just-dashboard can generate dashboards using YAML or JSON files. As your dashboard is just data, you can generate it instead of repeating yourself. You can do that by generating the YAML or JSON file yourself, or you can use jq queries in your YAML file. And one with a dashboard that contains a component that can fetch the data from other other gist and turn it into 3 different charts.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/terkelg/prompts" target="_blank" rel="noopener">prompts&lt;/a>: Lightweight, beautiful and user-friendly interactive prompts. prompts has no big dependencies nor is it broken into a dozen tiny modules that only work well together, and uses layout and colors to create beautiful cli interfaces..&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/pqina/filepond" target="_blank" rel="noopener">filepond&lt;/a>: A Flexible and Fun JavaScript File Upload Plugin.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>3.2</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.2/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-9533a9cf0d76768e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面54.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-54-期-swiftnio-自定义-vue-router-web-缓存与-graphql-必知必会">前端每周清单第 54 期: SwiftNIO, 自定义 vue-router, Web 缓存与 GraphQL 必知必会&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注大前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFR" target="_blank" rel="noopener">苹果开源了 Swift 版 Netty：SwiftNIO&lt;/a>: 近日，苹果开源了一款基于事件驱动的跨平台网络应用程序开发框架 SwfitNIO，它有点类似 Netty，但开发语言使用的是 Swift。苹果称 SwfitNIO 的目标是帮助开发者快速开发出高性能且易于维护的服务器端和客户端应用协议。SwfitNIO 并不会提供类似 Web 框架那样的解决方案，而是致力于为上层框架提供底层的构建块。在开发 Web 应用程序时，大部分开发者不会直接使用 SwfitNIO，他们会从 Swift 生态系统众多的 Web 框架中选择一个。不过，这些框架中的大部分都使用了 SwfitNIO。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2018/03/nic65" target="_blank" rel="noopener">Chrome 65 新特性介绍&lt;/a>: 本文是对即将发布的 Chrome 65 版本的新特性进行介绍，主要包 含 CSS Paint API, Server Timing API 以及 CSS display: contents 属性。其中 CSS Paint API 允许以 Canvas 那样编程绘制的方式设置元素的 background-image 或者 border-image 属性，Server Timing API 允许服务端在返回的响应头中设置性能相关信息，以方便客户端完整的性能度量。而 display: contents 属性则能够忽略中间元素，适合于 Flexbox 等场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://nodejs.org/en/blog/release/v8.10.0/" target="_blank" rel="noopener">Node v8.10.0 (LTS) &amp;amp; v9.8.0 (Current)&lt;/a>: 本周 Node.js v8.10.0 (LTS) 与 v9.8.0 发布，继续带来了一系列的特性更新与优化，包括 V8, libuv, ICU 等方面。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@weblab_tech/graphql-everything-you-need-to-know-58756ff253d8" target="_blank" rel="noopener">2018 GraphQL 必知必会&lt;/a>: 大部分开发者都了解如何构建 REST API，也感受过它的红与黑；本文则是对 API 领域的新星，GraphQL 进行介绍与讨论。GraphQL 经常被称作是面向前端的 API 技术方案，因为它允许前端开发者以更简单灵活的方式进行数据请求。该特性也正是弥补了传统 REST API 的一个不足：无法为不同的客户端返回定制化数据；而 GraphQL 的另一个优势在于，能够将原本需要向多接口发起的请求仅向单接口请求。更多相关资料参考 &lt;a href="https://parg.co/UX2" target="_blank" rel="noopener">GraphQL Reference&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uah" target="_blank" rel="noopener">从零构建 Redux&lt;/a>: 很多 Redux 的初学者可能会受困于繁多的 Redux 库，不过 Redux 的核心思想却是非常直观与易于理解的。如果你首先理解了 Redux 的构建思想，再去将其应用在 React 等实际的界面开发场景中，或许更能洞若观火，得心应手。本教程即是在从零构建 Redux 核心库的过程中，循序渐进地讲解 Redux 的设计思想；更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;架构优化篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://thecodebarbarian.com/algorithm-interview-questions-in-js-glob-matching.html" target="_blank" rel="noopener">JavaScript 面试算法题之 Glob Matching&lt;/a>: 数据结构与算法相关的问题，往往是面试重要的组成；从作者自身的经验来看，也有越来越多的公司考虑让开发者以 JavaScript 实现某些算法题目。本系列文章都是关注于如何使用 JavaScript 来实现常见的算法，本文则关注于字符串匹配中常见的 Glob Matching；更多相关内容参考&lt;a href="https://parg.co/UFy" target="_blank" rel="noopener">数据结构与算法基础&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ugc" target="_blank" rel="noopener">React 开发中的项目组织与组件命名&lt;/a>: 作为界面库，React 并未过多的介入到我们前端项目的代码组织与编排中。这个特性保证了 React 的独立与灵活性，并且允许开发者能够根据自身项目的特性来个性化编排；不过这也会导致一些初学者无所适从。本文中，作者为我们展示了他的项目组织与命名偏好，这些方法并不是重新造轮子，而是希望能够更好地组合它们。更多相关内容参考 &lt;a href="https://parg.co/UFX" target="_blank" rel="noopener">React DevOps Reference&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/build-a-custom-vue-router/" target="_blank" rel="noopener">构建自定义的 Vue Router&lt;/a>: vue-router 是 Vue.js 官方的路由框架，其也为我们提供了完整的将组件映射到不同浏览器路由的功能。不过，本文作者觉得在一些简单的应用中我们并不一定需要 vue-router 这样功能完备的库，而可能只需要些许特性；因此作者从零构建了应用于 Vue.js 的简单自定义客户端路由库。本文首先介绍了客户端路由的基本特性与要求，然后以 Pokemon 为例，循序渐进地介绍该库的具体实现。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;Vue.js 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFt" target="_blank" rel="noopener">Web 缓存&lt;/a>: 缓存能够帮助我们优化应用的处理速度，譬如缓存前一次的抓取数据或者计算结果。本文即是对于缓存体系的完整介绍，从浏览器，到 Web 服务器，最后到磁盘与 CPU；本文以自底向上的顺序介绍了不同层次缓存的特性与机制，着眼于数据的存储点而非如何去缓存。更多相关内容参考&lt;a href="https://parg.co/UFe" target="_blank" rel="noopener">服务端应用程序开发基础&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://auth0.com/blog/time-slice-suspense-react16/" target="_blank" rel="noopener">React 16 之上：Time Slicing 与 Suspense API&lt;/a>: 本文是对于近日公布的 React 未来新特性，Time Slicing 以及 Suspense API 进行讲解。Time-Slicing 允许运行在 React Fiber 之上的 React，将对子组件的更新计算切割为不同的块操作，并且在不同的帧中异步执行；而 Suspense API 则允许 ReactJS 将界面的更新推迟到数据抓取完毕，从而提高更好的用户体验与编程模型。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;React 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://ben.akrin.com/?p=5997" target="_blank" rel="noopener">利用 Web 打造超级计算机&lt;/a>: 目前已经有了很多关于使用加密数字货币等基于区块链的技术方案，来挖掘访问网页的客户端的计算潜力，实现去中心化的计算。本文同样尝试去将无数的 Web 浏览器客户端调和打造为超级计算机，不过其未使用区块链等技术，而是利用 WebSocket，从零构建完整的技术方案。本文依次讨论了如何最大化利用节点的计算力，如何在多节点间分发任务并且获取任务结果等内容；更多相关内容参考 &lt;a href="https://parg.co/UFI" target="_blank" rel="noopener">DistributedSystem CheatSheet&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFV" target="_blank" rel="noopener">React 中条件渲染的不同实现&lt;/a>: JSX 是不错的用来定义 UI 组件的 JavaScript 扩展，不过其目前并不直接支持循环或者条件表达式；本文即是用不同的方法去实现该需求，也是一篇不错的对于 React 中设计模式的概览。本文根据不同的使用场景，介绍了不同的条件渲染的办法：If/Else, Prevent rendering with null, Element variables, Ternary operator, Short-circuit operator (&amp;amp;&amp;amp; ), Immediately-Invoked Function Expressions (IIFE), Subcomponents, High Order Components (HOCs)。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;React 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://propelml.org/" target="_blank" rel="noopener">Propel&lt;/a>: Propel 为我们提供了基于 GPU 的类似于 Numpy 这样的科学计算框架。JavaScript 是类似于 Python 这样的动态语言，我们认为其同样能够为科研向的开发者构建合适的工作流。Propel 能够运行在浏览器或者服务端的 Node.js 环境中，不同的环境中 Propel 皆能够使用 GPU 硬件来执行计算任务。浏览器环境下 Propel 利用了 Deeplearn.js 提供的 WebGL 接口，而在 Node.js 环境下则使用了 TensorFlow 的 C 接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Meituan-Dianping/mpvue" target="_blank" rel="noopener">mpvue&lt;/a>: mpvue 是一个使用 Vue.js 开发小程序的前端框架。框架基于 Vue.js 核心，mpvue 修改了 Vue.js 的 runtime 和 compiler 实现，使其可以运行在小程序环境中，从而为小程序开发引入了整套 Vue.js 开发体验。其主要特性包括：彻底的组件化开发能力：提高代码复用性, 完整的 Vue.js 开发体验, 方便的 Vuex 数据管理方案：方便构建复杂应用, 快捷的 webpack 构建机制：自定义构建策略、开发阶段 hotReload 等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/atom/xray" target="_blank" rel="noopener">Xray&lt;/a>: Xray 是 Atom 团队在四年多的经验总结之上，构建的实验性的基于 Electron 的文本编辑器。目前 Xray 正处于快速地迭代开发中，希望能够在未来提供高性能的、可协同编辑的、可扩展的，以及多端体验一致的编辑器。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener">scrcpy&lt;/a>: 该应用提供了利用 USB 在电脑屏幕上展示与控制 Android 设备的功能，它并不需要任何的 Root 权限，并且能够作用于 GNU/Linux, Windows 以及 Mac OS 等多平台。该工具需要先安装 adb 命令，开发者可以直接从 Android SDK Platform Tools 中获取。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UFf" target="_blank" rel="noopener">程序媛小姐姐，了解一下？&lt;/a>: 虽说第一个程序员是女性，但现在，这行业早已被男性所“主宰”。Bloomberg(彭博)曾给男程序员创造了一个很有男子气概的词语“ Brogrammer ”(“bro”意为“兄弟”“男人”)，一改程序员呆板的极客形象，将他们描述得又酷又时尚。但同时，这也凸显了 IT 行业以男性为主导的发展方式，女程序员们都被忽略了。1842 年，人称“数字女王”的阿达 - 洛芙莱斯(Ada Lovelace)编写了历史上首款电脑程序。时间闪回到 170 多年后，电脑编程行业却被男性一统天下。一方面，程序员们被外界贴上的各种负面标签所困扰，另一方面，女性程序员的稀缺又总是在程序员群体里被贴上另一些不太友好的标签。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明 “ 前端之巅投稿 ”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>3.2-en</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.2-en/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.2-en/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-9533a9cf0d76768e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面54.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="frontend-weekly-no8-swiftnio-custom-vue-router-react-time-slicing-and-suspense-api">Frontend+ Weekly No.8: SwiftNIO, Custom Vue Router, React Time Slicing and Suspense API&lt;/h1>
&lt;p>The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href="https://medium.com/@384924552" target="_blank" rel="noopener">Medium&lt;/a>, &lt;a href="https://news.ycombinator.com/news" target="_blank" rel="noopener">Hacker News&lt;/a>, &lt;a href="reddit.com">Reddit&lt;/a>,&lt;a href="twitter.com">Twitter&lt;/a>, &lt;a href="mybridge.co">MyBridge&lt;/a>, etc.&lt;/p>
&lt;p>More Issues can be found in &lt;a href="https://parg.co/U9x" target="_blank" rel="noopener">Frontend+ Weekly Repository&lt;/a>.&lt;/p>
&lt;h2 id="news">News&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/apple/swift-nio" target="_blank" rel="noopener">Apple Open Source SwiftNIO&lt;/a>: At the recent try! Swift Conference in Tokyo, Apple announced the SwiftNIO project, a Netty-like non-blocking cross-platform IO framework written in Swift. SwiftNIO aims to be an asynchronous event-driven network framework for the development of high-performance servers and clients. It is currently developed and tested on macOS (10.12+) and Linux (Ubuntu 14.04). According to Apple: SwiftNIO is a cross-platform asynchronous event-driven network application framework for rapid development of maintainable high performance protocol servers &amp;amp; clients.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://nodejs.org/en/blog/release/v8.10.0/" target="_blank" rel="noopener">Node v8.10.0 (LTS) &amp;amp; v9.8.0 (Current)&lt;/a>: This release comes with a lot of big changes. There are updates to V8, libuv, and ICU, a bugfix in npm, and support for building with OpenSSL 1.1.0.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2018/03/nic65" target="_blank" rel="noopener">New in Chrome 65&lt;/a>: The CSS Paint API allows you to programmatically generate an image. The Server Timing API allows web servers to provide performance timing information via HTTP headers. the new CSS display: contents property can make boxes disappear!&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="tutorial">Tutorial&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://medium.com/@weblab_tech/graphql-everything-you-need-to-know-58756ff253d8" target="_blank" rel="noopener">GraphQL: Everything You Need to Know&lt;/a>: So you’ve been constructing and using REST API’s for quite some time now and short while ago started hearing about GraphQL — a new hype in the field of API technologies. The purpose of this article is to highlight the major features associated with GraphQL along with discussing the significant pros and cons associated with this particular API specification. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uah" target="_blank" rel="noopener">Learn Redux by Building Redux from Scratch&lt;/a>: A tutorial to understand the core Redux library by building it step-by-step. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://thecodebarbarian.com/algorithm-interview-questions-in-js-glob-matching.html" target="_blank" rel="noopener">Algorithm Interview Questions in JavaScript: Glob Matching&lt;/a>: Much to many people&amp;rsquo;s chagrin, the practice of asking algorithms questions in tech interviews doesn&amp;rsquo;t seem like it is going anywhere. From what I&amp;rsquo;ve heard though, more and more companies are allowing people to answer algorithms questions in JavaScript. In this week&amp;rsquo;s article, I&amp;rsquo;ll walk through a common interview question, glob matching), and implement the solution in JavaScript. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="engineering-practices">Engineering Practices&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ugc" target="_blank" rel="noopener">Structuring projects and naming components in React&lt;/a>: As React is just a lib, it doesn’t dictate rules about how you should organize and structure your projects. This is nice, because it gives us freedom to try different approaches and adapt the ones that better fit for us. On the other hand, this could cause some confusion for devs that are starting in React world. In this post, I’m going to show some approaches that I have been using for a while and have been scaling very well. These approaches doesn’t re-create the wheel, they just put together and refine what we have on the market. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/build-a-custom-vue-router/" target="_blank" rel="noopener">Let’s Build a Custom Vue Router&lt;/a>: vue-router does a fantastic job by providing us with the items needed to map an application’s components to different browser URL routes. But, simple applications often don’t need a fully fledged routing library like vue-router. In this article, we&amp;rsquo;ll build a simple custom client-side router with Vue. By doing so, we’ll gather an understanding of what needs to be handled to construct client-side routing as well as where potential shortcomings can exist. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFt" target="_blank" rel="noopener">The hidden components of Web Caching&lt;/a>: Caching allows you to increase application processing speed. Storing a copy of the previously fetched data or computed results increases processing speed. This enables future requests to be served faster. It is an effective architectural pattern, because most programs access the same data or instructions over and over. It is applied to everything from web-browsers to web-servers and hard-disks to CPUs. Let’s take a bottom-up approach to understanding the various layers of caching. We will focus on where data can be cached instead of how to cache it. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="under-the-hood">Under the hood&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://ben.akrin.com/?p=5997" target="_blank" rel="noopener">Turning your web traffic into a Super Computer&lt;/a>: The subject matter of this post is controversial as it discusses extracting computing resources from the visitors of a website. There are a lot of discussions at the moment centered around web-browser based crypto currency mining. Most paint a deplorable picture of the practice; please keep in mind that there are very desirable paths alongside which these practices can develop. I am not elaborating on these arguments here, I am only describing a method to harness the resources. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://auth0.com/blog/time-slice-suspense-react16/" target="_blank" rel="noopener">Beyond React 16: Time Slicing and Suspense API&lt;/a>: ReactJS is a UI library that&amp;rsquo;s a very powerful tool amongst frontend developers in building JavaScript applications. In this article, I&amp;rsquo;ll introduce you to a few features coming to ReactJS. Time-slicing allows ReactJS, which now runs on React Fiber, to split computations of updates on children components into chunks during idle callbacks and rendering work is spread out over multiple frames. The simple definition of the suspense feature is that ReactJS can pause any state update until the data been fetched is ready to be rendered. More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UFV" target="_blank" rel="noopener">8 React conditional rendering methods&lt;/a>: JSX is a powerful extension to JavaScript that allows us to define UI components. But it doesn’t support loops or conditional expressions directly. There’s more than one way to use conditional expressions in React. And, as with most things in programming, some are better suited than others depending on the problem you’re trying to solve. This tutorial covers the most popular conditional renderings methods: If/Else, Prevent rendering with null, Element variables, Ternary operator, Short-circuit operator (&amp;amp;&amp;amp; ), Immediately-Invoked Function Expressions (IIFE), Subcomponents, High Order Components (HOCs). More links about this can be found in &lt;a href="https://parg.co/UXa" target="_blank" rel="noopener">Awesome Web Reference&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="opensource">OpenSource&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://propelml.org/" target="_blank" rel="noopener">Propel&lt;/a>: Propel provides a GPU-backed numpy-like infrastructure for scientific computing in JavaScript. JavaScript is a fast, dynamic language which, we think, could act as an ideal workflow for scientific programmers of all sorts. Propel runs both in the browser and natively from Node. In both environments Propel is able to use GPU hardware for computations. In the browser it utilizes WebGL through deeplearn.js and on Node it uses TensorFlow&amp;rsquo;s C API.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Genymobile/scrcpy" target="_blank" rel="noopener">scrcpy&lt;/a>: This application provides display and control of Android devices connected on USB. It does not require any root access. It works on GNU/Linux, Windows and Mac OS.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/atom/xray" target="_blank" rel="noopener">Xray&lt;/a>: Xray is an experimental Electron-based text editor informed by what we&amp;rsquo;ve learned in the four years since the launch of Atom. In the short term, this project is a testbed for rapidly iterating on several radical ideas without risking the stability of Atom. The longer term future of the code in this repository will become clearer after a few months of progress. For now, our primary goal is to iterate rapidly and learn as much as possible.&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>3.3</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.3/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-e1d5b6bb971ea4df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面55.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-55-期-mobx-4-特性概览ios-hacks-分享-分布式事务详解">前端每周清单第 55 期: MobX 4 特性概览，iOS Hacks 分享, 分布式事务详解&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注大前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.mozilla.org/en-US/firefox/59.0/releasenotes/" target="_blank" rel="noopener">Firefox 59.0 发布&lt;/a>: 近日，Firefox 发布了从桌面端到移动端的各平台更新版本；特别是对于桌面端的 Firefox，我们优化了页面加载时间，增加了能够编辑与裁剪 Firefox 截图的工具，并且提升了 Firefox 首页的站点排布体验。值得一提的是，对应的 MAC 版本中引入了 Off-Main-Thread Painting (OMTP) 技术，从而提高图形化渲染的效率；而在 Android 版本中则增加了对于 HLS 协议的支持。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579" target="_blank" rel="noopener">Let&amp;rsquo;s Encrypt 宣布支持 ACME v2 与通配符证书&lt;/a>: 近日 Let&amp;rsquo;s Encrypt 正式宣布支持 ACME v2 与通配符证书。ACME v2 是 ACME 协议的更新版本，接收了来自 IETF 标准以及行业组织的建议；而通配符协议则允许用户使用单一证书对于所有的子域名开启 HTTPS 功能，其大大简化了证书管理的复杂度，推进了 Web HTTPS 化的进程。同时，Let&amp;rsquo;s Encrypt 获得了 IdenTrust 交叉签名，这意味着只需要在服务器的证书链中配置好交叉签名，各浏览器客户端会自动处理其他任务。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://insights.stackoverflow.com/survey/2018" target="_blank" rel="noopener">2018 Stack Overflow 开发者调查报告&lt;/a>: 今年，超过十万名开发者参与到了调查之中，为我们提供了充足的数据源。今年的报告中，值得注意的点包括：DevOps 与机器学习已然成为了现今软件行业最重要的趋势，开发者们大都乐观于人工智能带来的变革与可能性，而不同意其潜在的威胁。去年 Python 的流行程度已经超过了 C#，成为了增长最快的语言，就像前些年它超越 PHP 那样；另外值得一提的是，Rust 成为了去年最受欢迎的语言，Kotlin 紧随其后。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UzS" target="_blank" rel="noopener">MobX 4: 更好，更小，更快&lt;/a>:近日 MobX 发布了 4.0 大版本更新，本文则是对于该版本的那些引人入胜的特性进行介绍。这些特性包括了：不使用装饰器语法的装饰器，Observable 对象的动态扩展，内置的用于简化异步流程的 await when 以及 flow 函数，用于自动化进行数据抓取的 onBecome(Un)Observed，生产环境构建优化等。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series/tree/master/%E6%9E%B6%E6%9E%84%E4%BC%98%E5%8C%96" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;架构优化篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2018/03/clipboardapi" target="_blank" rel="noopener">异步剪贴板操作&lt;/a>: 过去的数年中，各浏览器基本上都在使用 document.execCommand 来进行剪贴板交互。这种方式虽然提供了简单而且广泛接受的复制与粘贴操作，但是也带来了一定的缺陷：只能同步访问剪贴板，并且只能直接读写 DOM 元素。而 Chrome 66 提供了新的 Clipboard API，则为我们提供了另一种异步式的剪贴板操作方式，本文即是对该机制与接口规范的详细介绍。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series/tree/master/%E5%9F%BA%E7%A1%80" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;基础篇&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://android.jlelse.eu/comparing-apk-sizes-a0eb37bb36f" target="_blank" rel="noopener">不同方案的 APK 尺寸对比&lt;/a>: 现在已经有了很多种不同的开发应用的方式，从传统的原生开发到花式跨平台解决方案；或许很多人会好奇不同开发方案对于最终包体的大小影响几何，本文即是尝试用不同的方式实现相同功能的应用，并且比较他们的大小。文中给出的对比数据如下：Java 约 539KB，Kotlin 约 550KB，React Native 约 7MB，Flutter 约 7.5MB；更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/FrontendTechnology-Series" target="_blank" rel="noopener">大前端的工程实践&amp;ndash;Android 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/how-graphql-replaces-redux-3fff8289221d" target="_blank" rel="noopener">使用 GraphQL 替代 Redux&lt;/a>: GraphQL 是著名的服务端查询语言，Redux 则是客户端状态管理框架，二者貌似风马牛不相及，本文却讨论如何使用 GraphQL 替代 Redux 在项目中的角色。实际上，大部分状态管理相关代码都是用来合并与操作多个 REST 端口的代码，或者通过 sagas, middleware, thunks 等方式来顺序获取数据，这些也正是 GraphQL 闪耀的地方，本文即是讨论了这种可能性；更多相关内容参考&lt;a href="https://github.com/wx-chevalier/ServerSideApplication-Series/tree/master/Node" target="_blank" rel="noopener">微服务架构与实践&amp;ndash;Node.js 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2c" target="_blank" rel="noopener">整合自 Twitter 的 iOS Hacks&lt;/a>: 本系列文章着眼于定期整理分享来自 Twitter 的 iOS 开发调试技巧、Xcode 性能优化技巧以及 Swift 最佳实践等内容；本周提供了譬如如何提升 Xcode 编译性能，如何提高代码的可读性与可维护性等内容。更多相关内容参考&lt;a href="https://github.com/wx-chevalier/FrontendTechnology-Series/tree/master/iOS" target="_blank" rel="noopener">大前端的实践&amp;ndash;iOS 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UTU" target="_blank" rel="noopener">加载第三方 JavaScript 代码&lt;/a>: Addy Osmani 近日编写了一篇关于 JavaScript 中加载第三方库的文章，讨论了如何正确的使用第三方库。第三方库为我们提供了可被集成的灵活功能，促进了 Web 的动态性、交互性以及连接性。本文，则是讨论在加载第三方库过程中可能遇到的问题：如何保证关键路径加载的性能，隐私性，安全性，避免不可预测或者不可控的结果。更多相关内容参考 &lt;a href="https://parg.co/UTT" target="_blank" rel="noopener">Web Performance Optimization MindMap&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2E" target="_blank" rel="noopener">Clean 架构代码导读&lt;/a>: 作者近来开源了名为 MovieNight 的示例项目，本文则是其过去几周应用架构方面的相关思考的分享。本文首先介绍了 Clean Architecture 的基本元素，分析了各个组件间的层级关系，然后以具体的代码进行实践介绍。更多相关内容参考&lt;a href="https://github.com/wx-chevalier/SoftwareEngineering-Series" target="_blank" rel="noopener">软件工程基础-软件架构篇&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uz5" target="_blank" rel="noopener">How JavaScript works 系列：渲染引擎与优化技巧&lt;/a>: 当我们在构建大型的 Web 应用时，需要提醒自己我们并不仅仅写好代码就万事大吉了，还需要考虑到代码与运行环境之间的交互。理解 JavaScript 的运行环境，了解它的工作原理与组件构成，能够让我们编写出更好的，更稳健的应用。本文即是对于浏览器的内部原理进行分析介绍，并且分享了一些性能优化的技巧；更多相关内容查看&lt;a href="https://github.com/wx-chevalier/Web-Series/tree/master/%E5%AF%BC%E8%AE%BA" target="_blank" rel="noopener">现代 Web 开发导论&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2q" target="_blank" rel="noopener">分布式事务概述&lt;/a>: 本文是对于分布式系统以及分布式事务的概述，包含了以下内容：分布式数据模型，乐观模型与悲观模型；原子性，多版本并发控制与基于网络的锁同步；一致性，两阶段提交协议，Paxos，Raft；隔离性，镜像隔离，序列隔离；持久性等。更多相关内容参考 &lt;a href="https://parg.co/Uxo" target="_blank" rel="noopener">Distributed System CheatSheet&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://roughjs.com/" target="_blank" rel="noopener">Rough.js&lt;/a>: Rough.js 是轻量级的(约 8KB)，基于 Canvas 的手绘样式的绘图库。Rough.js 为我们提供了多种不同的图形单元，来绘制直线，曲线，弧线，多边形，圆形以及椭圆形等，同时其还支持根据路径绘制 SVG。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/nhnent/tui.chart" target="_blank" rel="noopener">TOAST UI Chart&lt;/a>: TOAST UI Chart 是新近开源的，能够运行在包括 IE8 在内的各种浏览器中。TOAST UI Chart 提供了直方图、折线图、散点图、饼图、热力图等多种类型格式的图表，可以直接查看原文了解安装与使用的细节。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/sindresorhus/fkill-cli" target="_blank" rel="noopener">fkill-cli&lt;/a>: fkill-cli 是非常好用的跨平台进程关闭工具，它能够运行在 macOS，Linux 以及 Windows 操作系统上。我们可以直接通过冒号来指定需要关闭的占用该端口的进程，也可以无参数方式进入到交互选择界面，通过进程名进行快速筛选。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UTz" target="_blank" rel="noopener">霍金：手握日月摘星辰，世间无我这般人&lt;/a>: 3 月 14 日消息，物理学家霍金去世，享年 76 岁。这位英国科学家因黑洞和相对性的开创性著作而闻名，并撰写过几本科普著作，包括《时间简史》。55 年来，病魔逐渐占据了他的躯体，但他的思想却蔓延到了整个宇宙。仰望星辰的人，现在成了星辰。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明 “ 前端之巅投稿 ”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>3.3-en</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.3-en/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.3-en/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-e1d5b6bb971ea4df.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面55.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="frontend-weekly-no9-mobx-4-features-ios-hacks-distributed-transaction">Frontend+ Weekly No.9: MobX 4 Features, iOS Hacks, Distributed Transaction&lt;/h1>
&lt;p>The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href="https://medium.com/@384924552" target="_blank" rel="noopener">Medium&lt;/a>, &lt;a href="https://news.ycombinator.com/news" target="_blank" rel="noopener">Hacker News&lt;/a>, &lt;a href="reddit.com">Reddit&lt;/a>,&lt;a href="twitter.com">Twitter&lt;/a>, &lt;a href="mybridge.co">MyBridge&lt;/a>, etc.&lt;/p>
&lt;p>More Issues can be found in &lt;a href="https://parg.co/U9x" target="_blank" rel="noopener">Frontend+ Weekly Repository&lt;/a>.&lt;/p>
&lt;h2 id="news">News&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.mozilla.org/en-US/firefox/59.0/releasenotes/" target="_blank" rel="noopener">Firefox 59.0 Release&lt;/a>: On Firefox for desktop, we’ve improved page load times, added tools to annotate and crop your Firefox Screenshots, and made it easier to arrange your Top Sites on the Firefox Home page. Improve graphics rendering using Off-Main-Thread Painting (OMTP) for Mac users (OMTP for Windows was released in Firefox 58) On Firefox for Android, we’ve added support for sites that stream video using the HLS protocol.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579" target="_blank" rel="noopener">Let&amp;rsquo;s Encrypt Announce ACME v2 and Wildcard Certificate Support&lt;/a>: We’re pleased to announce that ACMEv2 and wildcard certificate support is live! With today’s new features we’re continuing to break down barriers for HTTPS adoption across the Web by making it even easier for every website to get and manage certificates. ACMEv2 is an updated version of our ACME protocol which has gone through the IETF standards process, taking into account feedback from industry experts and other organizations that might want to use the ACME protocol for certificate issuance and management some day. Wildcard certificates allow you to secure all subdomains of a domain with a single certificate.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://insights.stackoverflow.com/survey/2018" target="_blank" rel="noopener">Stack Overflow Developer Survey Results 2018&lt;/a>: Over 100,000 developers took the 30-minute survey this past January. DevOps and machine learning are important trends in the software industry today, Developers are overall optimistic about the possibilities that artificial intelligence offers, but are not in agreement about what the dangers of AI are. Python has risen in the ranks of programming languages on our survey, surpassing C# in popularity this year, much like it surpassed PHP last year. For the third year in a row, Rust is the most loved programming language among our respondents, followed close behind by Kotlin.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="tutorial">Tutorial&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UzS" target="_blank" rel="noopener">MobX 4: Better, simpler, faster, smaller&lt;/a>: A new major version of MobX has been released, in this blog post I’m just going to highlight the most compelling new features. Decorators without decorator syntax, Dynamically extend observable objects, await when and flow to further simplify asynchronous processes, onBecome(Un)Observed to automatically fetch data sources, Dedicated production build. Smaller &amp;amp; faster. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developers.google.com/web/updates/2018/03/clipboardapi" target="_blank" rel="noopener">Unblocking Clipboard Access&lt;/a>: Over the past few years, browsers have converged on using document.execCommand for clipboard interactions. It&amp;rsquo;s great to have a single widely-supported way to integrate copy and paste into web apps, but this came at a cost: clipboard access is synchronous, and can only read &amp;amp; write to the DOM. That&amp;rsquo;s the new Async Clipboard API, the text-focused portion of which we&amp;rsquo;re shipping in Chrome 66. It&amp;rsquo;s a replacement for execCommand-based copy &amp;amp; paste that has a well-defined permissions model and doesn&amp;rsquo;t block the page. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://android.jlelse.eu/comparing-apk-sizes-a0eb37bb36f" target="_blank" rel="noopener">Comparing APK sizes, For apps in Flutter, React Native, Kotlin and Java&lt;/a>: There are so many ways to make mobile apps ranging from direct platform specific development. Ever wondered how these libraries and frameworks affect the size of your app? Let’s analyze some apk files for apps written in some of these ways. The apps are very basic, containing just a title at the top and a text at the center of the screen. This will show, for a bare minimum app what these frameworks need to package along with the apk for it to be able to run. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="engineering-practices">Engineering Practices&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/how-graphql-replaces-redux-3fff8289221d" target="_blank" rel="noopener">How GraphQL Replaces Redux&lt;/a>: GraphQL is a server side query language. Redux is a client-side state management library. How could one replace the other? Most of our state management code was concerned with merging and mutating data from discreet REST resources into the right shape for our UI (reducers, selectors, actions etc.). A lot of our most complex state management was trying to manage the asynchronous nature of getting all that data in the right order for a specific route (sagas, middleware, thunks etc.). More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2c" target="_blank" rel="noopener">Best iOS hacks from Twitter: January &amp;amp; February Edition&lt;/a>: Last two months community shared nice debugging tips, advices on improving Xcode performance and smart ways to use functions in Swift. How to improve Xcode performance, A great little tip on how to make your code more readable and understandable, etc. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UTU" target="_blank" rel="noopener">Loading Third-Party JavaScript&lt;/a>: Addy Osmani wrote up the fundamentals of loading third-party JavaScript in a proper guide, including privacy, security and performance problems. Third-party scripts provide a wide range of useful functionality, making the web more dynamic, interactive, and interconnected. In this guide, we’ll walk through how to find and fix issues related to loading third-party JavaScript: performance, privacy, security, unpredictable, unintended consequences, and critical rendering path. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="under-the-hood">Under the hood&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2q" target="_blank" rel="noopener">Distributed transactions and why you should care&lt;/a>: This article is a great introduction for distributed transactions, it includes the following: The Distributed Data Model, The optimist’s data model and The pessimist’s data model; Atomicity, Multi-Version Concurrency Control and Clock-synchronization across the network; Consistency, Two-Phase Commit Protocol, PAXOS, RAFT; Isolation, Snapshot Isolation, Serializable Isolation, Durability, etc. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2E" target="_blank" rel="noopener">A Guided Tour inside a clean architecture code base.&lt;/a>: Recently, I released an open-source sample project called MovieNight. In the past couple of weeks, I got lots of questions regarding the application architecture, so I’ve decided to write this blog post. I’ll describe the different components at play and the relationships between them as well as talk about some of the architecture decisions I’ve made along the way. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Uz5" target="_blank" rel="noopener">How JavaScript works: the rendering engine and tips to optimize its performance&lt;/a>: When you’re building web apps, however, you don’t just write isolated JavaScript code that runs on its own. The JavaScript you write is interacting with the environment. Understanding this environment, how it works and what it is composed of will allow you to build better apps and be well-prepared for potential issues that might arise once your apps are released into the wild. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="opensource">OpenSource&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://roughjs.com/" target="_blank" rel="noopener">Rough.js&lt;/a>: Rough.js is a light weight (~8k), Canvas based library that lets you draw in a sketchy, hand-drawn-like, style. The library defines primitives to draw lines, curves, arcs, polygons, circles, and ellipses. It also supports drawing SVG paths. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/nhnent/tui.chart" target="_blank" rel="noopener">TOAST UI Chart&lt;/a>: The TOAST UI Chart is an open source JavaScript library that can be used in legacy browsers including IE8. It is intuitive and easy to apply without any other learning. If you like, you can change the chart in detail using many options and custom themes. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/sindresorhus/fkill-cli" target="_blank" rel="noopener">fkill-cli&lt;/a>: fkill-cli is a cross-platform fabulous processes killer, it works on macOS, Linux, and Windows. To kill a port, prefix it with a colon. For example: :8080. Run without arguments to use the interactive interface. The process name is case insensitive. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>3.4</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.4/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-b6ba72596e038da7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面56.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="前端每周清单第-56-期-d3-50深入-react-事件系统sketchcode-界面生成">前端每周清单第 56 期: D3 5.0，深入 React 事件系统，SketchCode 界面生成&lt;/h1>
&lt;p>&lt;code>作者：王下邀月熊&lt;/code> &lt;code>编辑：徐川&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注大前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U7f" target="_blank" rel="noopener">D3 5.0&lt;/a>: D3 5.0 作为大版本更新，引入了部分不向后兼容的特性更新。该版本开始使用 Promise 来替代传统的异步回调以进行数据加载，Promise 能够大大简化异步代码的结构，特别是那些支持 await 与 async 的浏览器。此外，该版本还使用了 Fetch API 替代传统的 XMLHttpRequest 对象，即使用 d3-fetch 替代 d3-request。更多更新特性介绍请查看原文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.infoq.com/cn/news/2018/03/Java-10-new-features" target="_blank" rel="noopener">Java 10 正式发布，带来了这些新特性&lt;/a>: 北京时间 3 月 21 日，Oracle 官方宣布 Java 10 正式发布。这是 Java 大版本周期变化后的第一个正式发布版本。需要注意的是 Java 9 和 Java 10 都不是 LTS 版本。和过去的 Java 大版本升级不同，这两个只有半年左右的开发和维护期。而未来的 Java 11，也就是 18.9 LTS，才是 Java 8 之后第一个 LTS 版本。Java 10 提供了愈百项新特性，譬如 var 局部变量类型推断、统一的垃圾回收接口等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2K" target="_blank" rel="noopener">使用 Flutter SDK 开发简单的加密货币信息应用&lt;/a>: Flutter 是 Google 最新开源的用于开发 Android 与 iOS 跨平台应用的开源工具集；其使用 Dart 编程语言，并且能够直接编译为原生代码，因此其能够在代码复用性与性能之间达成平衡。本教程中，作者循序渐进地介绍如何使用 Flutter 来构建展示当前不同加密货币价格的应用，并且针对初学者介绍了 Flutter 架构与 Dart 语法基础。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.org/a-comprehensive-guide-to-react-js-in-2018-ba8bb6975597" target="_blank" rel="noopener">2018 React.js 全面指南&lt;/a>: 本文最早写于 2015 年，此篇则是基于最新的 React 16.3 版本进行的更新，包含了最新版本中的各个特性。作者希望在本文中谈及 React 的大部分核心方面，包括了：JSX, Virtual DOM, React.Component, state, Component LifeCycle, Events 等。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;React 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://dev-blog.apollodata.com/introducing-react-apollo-2-1-c837cc23d926" target="_blank" rel="noopener">React Apollo 2.1 介绍&lt;/a>: 近日，React Apollo 发布了 2.1 版本，大幅提升了使用 GraphQL 开发 React 应用的体验。该版本提供了新的 Render Prop API 以及更强力的 TypeScript 支持，并且优化了说明文档。本文中，我们将会对如下新特性进行介绍：基于 Query 的数据抓取，使用 Mutation 更新数据，利用 ApolloConsumer 简化本地状态等。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;React 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://levelup.gitconnected.com/ultimate-react-component-patterns-with-typescript-2-8-82990c516935" target="_blank" rel="noopener">Typescript 2.8 React 组件开发模式&lt;/a>: TypeScript 是非常优秀的 JavaScript 静态类型扩展，本文则在常见的 React 开发模式的基础上，使用 TypeScript 2.8 实现了常见的模式：Stateful, Stateless, Default Props, Render Callbacks, Component Injection, Generic Components, High Order Components, Controlled Components。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/Web/Framework/React/React-DevOps-List.md" target="_blank" rel="noopener">React DevOps Links&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ux9" target="_blank" rel="noopener">React 应用中使用的不同动画库比较&lt;/a>: 优雅的动画是 Web 站点体验性的重要保障，现在已经有了很多介绍使用方式、使用案例、适用场景的文章。本文则是对于常见的动画库进行了横向对比，从而帮助开发者更好地针对自身的需求选择不同的动画库，包括了以下维度的考量：项目的维护情况如何，入手的难易程度如何，语法如何，性能如何等等。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Awesome-Lists" target="_blank" rel="noopener">Awesome Links&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://julian.is/article/css-grid-at-scale/" target="_blank" rel="noopener">CSS Grid 渐进式实践&lt;/a>: 上个月我们重新设计了 Thomasnet.com，并且使用 CSS Grid 作为主要的布局方式。本文即是 CSS Grid 渐进式实践的分享: CSS Grid 语法速览以及技巧分享，CSS Grid 与 Flexbox 对比，CSS Grid 基础以及浏览器的兼容性保障。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;基础篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2" target="_blank" rel="noopener">React 与 React Native 事件系统详解&lt;/a>: 现在已经有了很多介绍 React 事件系统的文章，不过鲜有介绍它们内部工作原理的。本文作者一直从事着 React Native 开发，并在本文中分享了其阅读相关源代码后整理得到的理解。本文依次介绍了 React 事件系统概览、事件接收与管理机制、EventPluginHub 等内容；更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;React 篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://timkadlec.com/remembers/2018-03-22-compressive-images-revisited/" target="_blank" rel="noopener">关于图片压缩的考量&lt;/a>: 在之前的讨论中，我们关注过如何使用 Compressive Images 来压缩图片尺寸：即在降低图片清晰度的同时，将其设计稿的尺寸增大，这样经过浏览器自动压缩之后，其视觉效果相差无二。这种方式在测试用例中能够带来 50% 的体积减少，不过这种方式也会带来更大的内存消耗。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/Web-Series" target="_blank" rel="noopener">现代 Web 开发&amp;ndash;基础篇&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UDc" target="_blank" rel="noopener">SketchCode: 使用深度学习自动化前端开发&lt;/a>: 本文作者构建了某个深度学习模型，能够从用户手绘的设计草稿中，生成可用的 HTML 网站；作者希望能够尝试利用这种方式来简化现在的设计流程。本文依次介绍了 SketchCode 的创意来源与设计理念，如果获取到有效的数据集，如何将图片处理为手绘模式，如何设计神经网络架构以及如何进行模型训练等内容。更多相关内容参考 &lt;a href="https://github.com/wx-chevalier/AIDL-Series" target="_blank" rel="noopener">人工智能与深度学习实战&lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener">Driver.js&lt;/a>: Driver.js 是强大的，轻量级，使用原生 JavaScript 引擎开发的页面用户关注点。Driver.js 并不仅仅是另一个指南性质的库，其的用户场景还是非常广泛的，能够用于任何需要为页面构建浮层的情况，譬如当用户需要与某些元素交互而隐藏其他元素的场景。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/BrainJS/brain.js" target="_blank" rel="noopener">brain.js&lt;/a>: brain.js 是基于 JavaScript 实现的轻量级神经网络(Neural Networks)库，其提供了非常简明易用的接口，并且支持异步训练。目前官方提供了识别颜色常量、简单字母识别、利用 RNN 编写简单的句子等示范，可以自己尝试一下。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/appbaseio/dejavu" target="_blank" rel="noopener">dejavu&lt;/a>: dejavu 是新的 ElasticSearch Web 管理界面，不同于 Kibana 这样服务端渲染并且响应较差的库；dejavu 采样了完全的客户端渲染方式，这也赋予了其便捷部署的能力，从 Github Pages，Chrome 插件到 Docker 镜像。dejavu 并且提供了 JSON 与 CSV 文件的导入导出功能，并能够自定义表格头，以增强其灵活性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/UDb" target="_blank" rel="noopener">雅虎研究院——如何从辉煌到失败？&lt;/a>: 雅虎是最早成功的互联网公司之一，也是最早意识到需要把基础研究，特别是机器学习以及人工智能研究，应用到实际产品中的公司。雅虎从很早就开始招聘和培养研究型人才，雅虎研究院就是在这个过程中应运而生的。今天我就来说一说雅虎研究院的历史，以及过去十多年间取得的成就，聊一聊如何通过引进高级人才，迅速构建起一支世界级的研发团队。当然，也会聊一聊研究院的衰落。高级研发机构对于企业而言往往是锦上添花的事情，在整个公司产品和视野都欠缺的情况下，也往往避免不了最后衰败的结局。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明 “ 前端之巅投稿 ”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>3.4-en</title><link>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.4-en/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/0.specials/weekly/2018/3/3.4-en/</guid><description>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-b6ba72596e038da7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="周报封面56.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="frontend-weekly-no10-d3-50react-and-react-native-event-system-explained-sketchcode">Frontend+ Weekly No.10: D3 5.0，React and React Native Event System Explained, SketchCode&lt;/h1>
&lt;p>The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href="https://medium.com/@384924552" target="_blank" rel="noopener">Medium&lt;/a>, &lt;a href="https://news.ycombinator.com/news" target="_blank" rel="noopener">Hacker News&lt;/a>, &lt;a href="reddit.com">Reddit&lt;/a>,&lt;a href="twitter.com">Twitter&lt;/a>, &lt;a href="mybridge.co">MyBridge&lt;/a>, etc.&lt;/p>
&lt;p>More Issues can be found in &lt;a href="https://parg.co/U9x" target="_blank" rel="noopener">Frontend+ Weekly Repository&lt;/a>.&lt;/p>
&lt;p>By the way, sorry for my poor English.&lt;/p>
&lt;h2 id="news">News&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U7f" target="_blank" rel="noopener">D3 5.0&lt;/a>: D3 5.0 introduces only a few non-backwards-compatible changes. D3 now uses Promises instead of asynchronous callbacks to load data. Promises simplify the structure of asynchronous code, especially in modern browsers that support async and await. With the adoption of promises, D3 now uses the Fetch API instead of XMLHttpRequest, the d3-request module has been replaced by d3-fetch. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.infoworld.com/article/3230507/java/java-jdk-10-what-new-features-to-expect-in-the-next-java.html" target="_blank" rel="noopener">Java 10 Release&lt;/a>: JDK 10, an implementation of Java Standard Edition 10, was released on March 20, 2018. Key improvements include local variable types as well as enhancements for garbage collection and compilation. JDK 10 is scheduled to be just a short-term release, and public updates for JDK 10 are slated to end in six months. The upcoming JDK 11, due in September, will be a long-term support (LTS) version of Java. LTS releases are due every three years. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="tutorial">Tutorial&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/U2K" target="_blank" rel="noopener">How to build a Cryptocurrency price list app using Flutter SDK&lt;/a>: Flutter is Google’s new open-source toolkit for helping developers build iOS and Android apps with just one codebase. Flutter apps are written in the Dart programming language and compile to native code, so the performance is really, really great. In this tutorial, I will show you how to use Flutter to build an app that shows the current price of different cryptocurrencies. I will walk you through the fundamentals of Flutter and Dart. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.freecodecamp.org/a-comprehensive-guide-to-react-js-in-2018-ba8bb6975597" target="_blank" rel="noopener">A Comprehensive Guide to React.js in 2018&lt;/a>: This article was originally published in January of 2015, but was recently updated to React 16.3 and all the goodness it contains. The topics below are what I believe to be the fundamental aspects of React. If you understand all of them and their purposes, you’ll be at a very good spot after reading this tutorial: JSX, Virtual DOM, React.Component, state, Component LifeCycle, Events. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://dev-blog.apollodata.com/introducing-react-apollo-2-1-c837cc23d926" target="_blank" rel="noopener">Introducing React Apollo 2.1&lt;/a>: Recently, React Apollo 2.1 was announced, a huge step forward in improving how you develop React applications with GraphQL. It features a new render prop API and much stronger TypeScript support, along with upgraded docs. In this blog post, we will look through the following features: Data fetching with Query, Updating data with Mutation, Simplifying local state with ApolloConsumer, etc. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="engineering-practices">Engineering Practices&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/Ux9" target="_blank" rel="noopener">Comparing the top JS animation libraries for use in React apps&lt;/a>: You may have noticed that animation is pretty popular on the web. There’s no shortage of tutorials, case studies, and libraries targeting motion lovers. It’s a facet of development that can intrigue, enhance, delight, motivate, and impress users. In this article, I’ve chosen five JavaScript animation libraries and dissected their abilities to perform from both a business and a development perspective. Instead of asking “what do I use to build X?”, I explore concerns like: How well is this project maintained? Is it easy for a team to pick up? What’s the syntax like? More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://julian.is/article/css-grid-at-scale/" target="_blank" rel="noopener">How We Adopted CSS Grid at Scale&lt;/a>: Last month we launched the redesign of Thomasnet.com, From team buy-in to fallbacks, here’s the approach we took at Thomas with the implementation of CSS Grid. This blog post contains following contents: A quick primer on CSS Grid, Our Grid “aha” moment, Resolving the CSS Grid vs. Flexbox argument, Laying the Grid foundation, Fallbacks for browsers without support. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://levelup.gitconnected.com/ultimate-react-component-patterns-with-typescript-2-8-82990c516935" target="_blank" rel="noopener">Ultimate React Component Patterns with Typescript 2.8&lt;/a>: Stateful, Stateless, Default Props, Render Callbacks, Component Injection, Generic Components, High Order Components, Controlled Components. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/Web/Framework/React/React-DevOps-List.md" target="_blank" rel="noopener">React DevOps Links&lt;/a>.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="under-the-hood">Under the hood&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://timkadlec.com/remembers/2018-03-22-compressive-images-revisited/" target="_blank" rel="noopener">Compressive Images Revisited&lt;/a>: The compressive images technique relies on you sizing a JPG image to be larger than the size it ultimately is displayed at and then compressing it to an incredibly low-quality setting. This cuts the image weight dramatically, but also makes the image look absolutely terrible. The benefit in weight can be substantial. In the Filament Group’s article, the example image was a whopping 53% lighter (from 95kb to 44kb). The trade-off for compressive images is primarily the memory cost (there used to be scaling and decoding risks, but browsers have improved in that area). More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UDc" target="_blank" rel="noopener">Automated front-end development using deep learning&lt;/a>: At Insight, he developed a model that allows users to create working HTML websites from hand-drawn wireframes, significantly accelerating the design process. He is now a Deep Learning Scientist at Mythic. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/UDq" target="_blank" rel="noopener">The React and React Native Event System Explained: A Harmonious Coexistence&lt;/a>: There are an awful lot of posts explaining how to use React’s event handling system, but not many that explain how it works. I have been working on React Native lately, and my struggles with event handling acted as a reminder of how important it was to understand precisely what’s going on. I thus decided to gather as much info as possible regarding event handling in React: the following is a report of what I found looking around the source code. More links about this can be found in &lt;a href="https://github.com/wx-chevalier/Awesome-Lists/blob/master/README-en.md" target="_blank" rel="noopener">Awesome Links&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="opensource">OpenSource&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/kamranahmedse/driver.js" target="_blank" rel="noopener">Driver.js&lt;/a>: Driver.js is a powerful yet light-weight, vanilla JavaScript engine to drive the user&amp;rsquo;s focus across the page. Driver.js is not only another tour library, Tours are just one of the many use-cases. Driver.js can be used wherever you need some sort of overlay for the page; some common usecases could be: e.g. dimming the background when user is interacting with some component.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/BrainJS/brain.js" target="_blank" rel="noopener">brain.js&lt;/a>: brain.js is a library of Neural Networks written in JavaScript.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/appbaseio/dejavu" target="_blank" rel="noopener">dejavu&lt;/a>: dejavu is the missing web UI for Elasticsearch. Existing web UIs leave much to be desired or are built with server side page rendering techniques that make it less responsive and bulkier to run (I am looking at you, Kibana).Starting v1.0, dejavu is the only Elasticsearch web UI that supports importing data via JSON and CSV files, as well as defining field mappings from the GUI.&lt;/p>
&lt;/li>
&lt;/ul></description></item></channel></rss>