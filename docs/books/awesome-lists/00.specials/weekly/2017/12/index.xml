<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>12 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/index.xml" rel="self" type="application/rss+xml" />
    <description>12</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>12</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/</link>
    </image>
    
    <item>
      <title>12.1</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.1/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-b7b0b5003d84b57f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-42-期v8-的执行流与优化pinterest-的-pwa-实践rust-与-webassembly-应用&#34;&gt;前端每周清单第 42 期：V8 的执行流与优化，Pinterest 的 PWA 实践，Rust 与 WebAssembly 应用&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点，开发教程，工程实践，深度阅读，开源项目，巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID : frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hellorust.com/news/native-wasm-target.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust 默认可以编译为 WebAssembly&lt;/a&gt;: 随着 &lt;a href=&#34;https://github.com/rust-lang/rust/pull/46115&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pull Request 46115: &amp;ldquo;rustbuild: Enable WebAssembly backend by default&amp;rdquo;&lt;/a&gt; 被合入 master 分支，Rust 现在可以不依赖于其他工具而直接将代码编译为 WebAssembly 格式；而 Browserify 也支持在 JavaScript 代码&lt;a href=&#34;https://parg.co/U5X&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中直接插入 Rust 代码&lt;/a&gt;，我们在前一期的清单中也介绍过使用 Rust 开发 Node.js 原生模块，拭目以待未来 JavaScript 与 Rust 能够更好地协同构建强大的应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.jetbrains.com/kotlin/2017/11/kotlin-1-2-released/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kotlin 1.2 发布&lt;/a&gt;: 本周 Kotlin 1.2 正式发布，继续了 Kotlin 走向跨平台现代应用开发的步伐。Kotlin 1.1 加入了对 JavaScript 的支持，可以将 Kotlin 代码编译为 JavaScript 并且在浏览器中运行。而该版本中，Kotlin 提供了在 JVM 与 JavaScript 之间复用代码的能力，允许开发者编写一次业务代码，然后运行在从服务端，到浏览器，到 Android 等跨平台的应用服务中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UPh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 16.2.0 发布&lt;/a&gt;: React 16.2 提升了对于 Fragments 的支持，即允许在某个组件的 render 方法中返回多个子元素。在 React 16 中允许开发者以数组方式返回多个子元素，但是这种写法却与标准的 JSX 产生轻微混淆；而 Fragment 可以看做对于数组的透明封装，同时其也支持传入 key 属性，以在重渲染时进行判断。除此之外，该版本还为 React.Children 工具函数添加了实验性的 Call/Return 类型，修复了 React DOM,React Test Render 中的一系列问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UZr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IPV6 要来啦&lt;/a&gt;：新华社北京 11 月 26 日电：近日，中共中央办公厅，国务院办公厅印发了《推进互联网协议第六版(IPv6 )规模部署行动计划》，并发出通知，要求各地区各部门结合实际认真贯彻落实。下一代互联网国家工程中心也宣布由该中心牵头发起的 “ 雪人计划 ” 已在全球完成 25 台 IPV6 根服务器架设。其中，中国部署了４台，打破了过去没有根服务器的困境。与此同时，下一代互联网国家工程中心正式宣布推出 IPv6 公共 DNS：240c::6666。通过免费提供性能优异的公共 DNS 服务，为广大 IPv6 互联网用户打造安全, 稳定, 高速, 智能的上网体验，助力《推进互联网协议第六版( IPv6 )规模部署行动计划》全面落实。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uuk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Node.js 构建区块链&lt;/a&gt;: 本教程将会从零开始介绍如何构建 BrewChain，一个简单的 Node.js 区块链实现。本文首先会介绍 Block 与 Blockchain 的概念，然后讨论如何构建运行在成员机器上的单结点程序，其会监听创建新块的广播消息，并且将其继续广播给其他结点，从而更新整个区块链网络。BrewChain 还会包含用于管理与监控的 HTTP 服务器，用于与 Brew 事件交互，查看日志日期等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uui&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;重思：最佳的请求策略，就是没有请求&lt;/a&gt;: 鉴于浏览器的并发请求数与网络带宽的限制，Web 性能优化的一条策略就是尽量减少请求的数目；我们习惯将资源文件打包到少数的包体中。不过随着 HTTP/2 的普及，其多路复用的特性允许我们能够更高效地传递文件，本文就着重讨论了在 HTTP/2 的背景之下是否还应该一味地减少请求数目。本文首先讨论了 HTTP/2 的特性，然后讨论了 HTTP/1.1 中的打包压缩，缓存策略等在 HTTP/2 中的实践技巧变更；更多 Web 性能优化相关资料参考&lt;a href=&#34;https://parg.co/Umu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uu9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 应用中的常见安全问题&lt;/a&gt;: &lt;a href=&#34;https://parg.co/UZu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上期清单&lt;/a&gt;中笔者推荐了多篇网站应用渗透相关的文章，而本系列文章则是对于常见的 Web 应用安全问题进行介绍与分析。本文首先讨论了密码哈希存放的问题，作者认为应该使用 BCrypt 来替代 MD5 或者 SHA512 等传统哈希算法；然后介绍了 XSS 的基本概念与防御手段，最后讨论了 Session 存放于安全相关的问题。更多 Web 安全资料索引参考&lt;a href=&#34;https://parg.co/UZZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uuv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 引擎中的推测优化(Speculative Optimization )&lt;/a&gt;: 本文是对于 V8 的优化编译器 TurboFan 的底层原理的介绍，希望能够帮助开发者了解 V8 是如何通过信息搜集与 Speculative Optimization，来将 JavaScript 转化为高优化的机器码。本文首先介绍了 V8 引擎的整体架构，以及其执行管道流中的语法树解析, 机器码生成等步骤，然后讨论了何谓 Speculative Optimization，及其具体的优化过程；更多 V8 相关讲解可以阅读《&lt;a href=&#34;https://github.com/wx-chevalier%e3%80%82/JavaScript-Notes?q=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript-Notes&lt;/a&gt;》。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UuI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 Pinterest 的 PWA 性能案例&lt;/a&gt;: 本文是 Addy Osmani 大神分享的，Pinterest 将其移动 Web 客户端进行 PWA 改造的案例；本文主要涵盖了如何减少 JavaScript 包体尺寸以提高加载速度，与使用 Service Worker 进行网络弹性恢复等内容。本文 首先对比了改造前后 Pinterest 移动端网站关键指标，以及与原生应用的性能对比；然后介绍了 Pinterest 的代码构成, 使用的 Webpack 异步分割与优化插件等内容。接下来讨论了 React 应用的潜在性能痛点与动画优化，最后讨论了如何用 Service Workers 添加缓存功能与离线支持；更多 PWA 的使用案例参考&lt;a href=&#34;https://parg.co/UUY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service Worker 与页面刷新&lt;/a&gt;: PWA 的目标是为用户提供接近原生的体验，但是这也带来了某个使用场景的不一致性考量：当用户点击浏览器的刷新按钮时，网页自带的 Service Worker 可能未更新，以至于用户仍旧浏览旧版的网页。作者在首篇文章中以案例展示了 Service Workers 是如何 “ 破坏 ” 浏览器刷新按钮的功能，在&lt;a href=&#34;https://parg.co/Uu1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;第二篇&lt;/a&gt;文章中则讨论了如何避免这种不一致性。更多 PWA 实践可以阅读 &lt;a href=&#34;https://parg.co/UGZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 应用架构与性能调优&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://bholley.net/blog/2017/stylo.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust, Stylo, Servo 与 Firefox 的重生&lt;/a&gt;: 数周前 Firefox Quantum 正式发布，其搭载的 Servo 浏览器渲染引擎极大地提升了渲染速度与用户体验，本文即是对于 Firefox Quantum 开发过程中的技术选型进行分享。本文首先分析了现代大型项目开发中的技术考量，C/C++ 因其设计与历史原因不可避免地会造成潜在的内存问题；而 Rust 则是现代软件工业的集成者，它借鉴了 Apple C++ 编译器后端，参考了数以百计的研究资料，包含了 unsafe 等关键字，还提供了便捷的包管理器。笔者接下来还分享了 Stylo 与 Servo 的预研开发过程；更多 Rust 相关资料参考&lt;a href=&#34;https://parg.co/UZ6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uu6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 ThoughtWorks 技术雷达 VOL.17&lt;/a&gt;: 技术雷达是 ThoughtWorks 技术顾问委员会(TAB )，基于 Thoughtwork s 的全球技术战略以及对行业有重大影响的技术趋势总结而来。本期技术雷达的精彩集锦关注了崛起的中国开源软件市场, 容器编排首选 Kubernetes, 成为新常态的云技术以及各方对区块链的信任稳步增强；而在前端相关领域，本期技术雷达还讨论了 Headless Chrome, Cypress, Flow, Lighthouse, Rendertron, Yarn, CSS Grid Layout,CSS Modules, Jest,Kotlin, CSS-in-JS, Weex 等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uua&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 的应用场景&lt;/a&gt;: 本文是 How JavaScript Works 系列文章的第六篇，着眼于介绍 WebAssembly 相关的内容，分析了其相较于 JavaScript 在加载时间, 执行速度, 垃圾回收, 内存使用, 调试, 多线程, 可移植性等方面的优势。本文首先介绍了 V8 引擎的 JavaScript 解析与执行，以及 TurboFan 优化的流程，讨论了引入 WebAssembly 的结合点；然后分析了 WebAssembly 内存模型等内容，最后以 SessionStack 中具体的使用案例分析了 WebAssembly 合适替代现有 JavaScript 的情景。更多 WebAssembly 的学习资料参考&lt;a href=&#34;https://parg.co/b2S&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/WeiChiaChang/stacks-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stacks-cli&lt;/a&gt;: Wappalyzer 已经是非常不错的用于分析网站技术构成的 Chrome 插件，不过对于那些喜欢使用命令行程序的开发者，stacks-cli 是个不错的选择；stacks-cli 能够识别反馈 CDN,Web 服务器, 第三方插件, 界面框架等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UPq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sampling Heap Profiler&lt;/a&gt;: Sampling Heap Profiler 目前还是实验性的工具，其能够对于 V8 的堆存储进行随机抽样，来帮助开发者发现到底是什么对象占据了大量的内存。它同样会追踪栈上某个指定对象的内容，从而了解对象的存活性与对应的依赖路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/laurent22/joplin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Joplin&lt;/a&gt;: Joplin 是免费, 开源的笔记与待办事项类应用，其提供了 Windows,macOS, Linux,Android 以及 iOS 等不同平台的客户端，从界面应用程序到命令行程序皆有涉及。Joplin 使用了 React Native 开发移动端应用，使用了 Electron 开发桌面端应用，其源代码还是很值得借鉴阅读；其使用了 MIT 协议，也方便进行二次开发。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/reactopt/reactopt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reactopt&lt;/a&gt;: Reactopt 是用于检测 React 应用中，不必要的重渲染的命令行工具，其可以看做 react-addons-perf 的替代工具。在启动 Reactopt 之后，脚本会自动地在浏览器中打开应用；开发者可以通过输入 &lt;code&gt;done&lt;/code&gt; 来结束检测，Reactopt 会反馈那些触发不必要的重渲染的事件，并且提示哪些组件能够通过 shouldComponentUpdate 来优化性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>12.2</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.2/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-4ee9640fa3ffcf65.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面43.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-43-期2017-javascript-回顾rust-与-webassembly-开发游戏nodejs-架构模式&#34;&gt;前端每周清单第 43 期：2017 JavaScript 回顾、Rust 与 WebAssembly 开发游戏、Node.js 架构模式&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID : frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Upg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 5.1 发布&lt;/a&gt;: 本文介绍了 Angular 5.1.0, Angular CLI 1.6 以及 Angular Material 的首个稳定版本的特性变化。Angular 5.1.0 中包含了多个小的特性变化与错误修复，此次系列更新主要包括了 Angular Material &amp;amp; CDK 稳定版发布、CLI 工具支持 Service Worker、对于 Universal 以及 AppShell 支持的提升、装饰器错误信息优化、支持 TypeScript 2.5 等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UpF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ant Design 3.0 发布&lt;/a&gt;: Ant Design 是面向企业级桌面应用的设计方案与实现，在 2.0 版本发布的 14 个月之后，3.0 版本正式发布，包含了来自 200 多位贡献者的超过 4000 次提交。Ant Design 3.0 版本中引入了新的色彩系统，其受到天空的启发，包含了薄暮、日出、拂晓蓝等一系列优美的色彩搭配；该版本还引入了新的组件设计，包括了对于大量组件的复写，完全支持 React 16 与 ES Module，并且优化了对于 TypeScript 的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://fontawesome.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Font Awesome 5 发布&lt;/a&gt;: 本周，Font Awesome 5.0.0 正式发布，为我们带来了全新的主页，包含了九百多个免费图标与一千多的商业图标。5.0 中提供了多种整合方式，最为推荐的是利用 JavaScript 与 SVG 图标协同使用，以替代原有的字体图标，从而提升性能与易用性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UpG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TensorFlow Lite 支持 Core ML&lt;/a&gt;: TensorFlow Lite 是面向移动设备与嵌入式设备的轻量级 TensorFlow 版本，近日其宣布开始支持 Core ML，通过工具能够将 TensorFlow 模型转化为 .mlmode 这样的 Core ML 模型格式。Core ML 是 iOS 内置的机器学习框架，这意味着 iOS 开发者能够在 Core ML 上部署 TensorFlow 模块，也是 TensorFlow Lite 在跨平台支持上的重要一步；另一方面，Apple 也开源了自定义机器学习模型框架 &lt;a href=&#34;https://github.com/apple/turicreate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turi Create&lt;/a&gt;，来帮助开发者快速开发机器学习模块并且集成到 iOS 应用中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UZJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Rust 开发基于 WebAssembly 的游戏&lt;/a&gt;: 数周前，Alex Crichton 的 PR 使得 &lt;a href=&#34;https://parg.co/UOU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust&lt;/a&gt; 能够直接被编译为 WebAssembly 格式，本文作者也尝试将基于 Rust 与 Piston 编写的桌面游戏 &lt;a href=&#34;https://github.com/aochagavia/rocket&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rocket&lt;/a&gt;，转化为能够在浏览器中运行的 WebAssembly 格式的应用。作者使用 JavaScript 来处理用户的输入输出，并且进行界面渲染，使用 Rust 来处理游戏逻辑；作者依次介绍了自己在迁移过程中碰到的多个 Link 错误以及处理方案，然后讨论了 Rust 与 JavaScript 如何相互调用，以进行画面渲染与接收用户输入输出等内容。更多 WebAssembly 相关资料参考&lt;a href=&#34;https://parg.co/b2S&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Upq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 的变迁：非 GIF 的动图实现&lt;/a&gt;: 图片是现代网页应用中不可或缺的部分，GIFs 是动图实现的选择之一，但其质量与性能一直差强人意；如果直接使用 video 标签，又是无法发挥 preloaded 的作用，还必须分段请求。在 Safari Technology Preview 中，允许开发者使用 &lt;code&gt;&amp;lt;img src=&amp;quot;.mp4&amp;quot;&amp;gt;&lt;/code&gt; 的形式来实现简单的动图需求，相较于原本的 GIF 的解决方案能带来将近二十倍的性能提升，并且支持 CSS 方式背景播放，其体积也有大幅度的降低。更多的图片处理与性能优化资料参考&lt;a href=&#34;https://parg.co/UOY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U3e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Electron 与 React 创建 Markdown 应用&lt;/a&gt;: 本文循序渐进地介绍了如何使用 Electron 与 React 构建简单的 MarkDown 应用，作者将其命名为 &lt;a href=&#34;https://github.com/kazuar/mook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mook&lt;/a&gt;。本文依次介绍了技术栈的选择与考量，开发环境、构建流程与模板应用搭建，主功能开发等内容；更多 Electron 学习资料参考&lt;a href=&#34;https://parg.co/UOd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UpT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airbnb 列表页的 React 性能问题浅析&lt;/a&gt;: Airbnb 已经使用 React Router 与 Hypernova 将核心订购流程转化为了服务端渲染的单页应用，本文则是介绍其如何将列表详情页进行单页应用话改造，并且综合提高其性能。本文首先讨论了如何进行性能评测，&lt;a href=&#34;https://parg.co/Upj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文章&lt;/a&gt;也介绍了如何使用 Chrome DevTools 来调试 React 的性能问题；然后介绍了其在初始化渲染、滚动优化、点击反馈、输入输出方面的优化技巧。更多 React 相关教程参阅 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U3I&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 的可扩展应用模式：CQRS, ES, Onion&lt;/a&gt;: 本文介绍如何使用 CQRS 与 Event Sourcing 模式来开发 Node.js 应用，使用 Onion 架构来组织这些模式，并且使用 TypeScript 来进行静态类型校验。本文首先讨论了何谓灵活架构：业务逻辑与实现分离、独立于数据库，框架，服务等等；然后介绍了 Event Sourcing 与 CQRS 的含义，以及它们是如何组织在洋葱圈模型中的，最后以典型的认证逻辑为例讨论了如何实现 CQRS 模式。更多 Node.js 的知识可以阅读&lt;a href=&#34;https://parg.co/b2s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Node.js 全栈架构&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U3y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Intersection Observer 与 SQIP 的渐进式图片加载&lt;/a&gt;: 当我们浏览 Facebook、Pinterest、Medium 等内容类网站时，会发现图片是渐进式加载，即首先出现低质量的、模糊的图片，然后再出现真正的图片，本文即是介绍如何使用 Intersection Observer 与 SQIP 实现渐进式加载。&lt;a href=&#34;https://parg.co/UHG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;之前的清单&lt;/a&gt;中我们有介绍过 SQIP 这种图片替代(Image PlaceHolder )的生成方式，其能够生成不足 1KB 的 SVG 格式的低质量图片；而 Intersection Observer 则能够判断某个图片元素是否在视口内，从而实现按需加载。更多的图片处理与性能优化资料参考&lt;a href=&#34;https://parg.co/UOY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UpK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Orinoco: V8 中的年轻代垃圾回收&lt;/a&gt;: V8 引擎中的 JavaScript 对象被分配在了堆上，并且由 V8 的垃圾回收器进行生命周期的管理；本文即是介绍 Parallel Scavenger，Orinoco 的最新特性之一，是如何针对年轻代进行垃圾回收的。本文首先介绍了分代垃圾回收模型，然后讨论了单线程的 Cheney’s Semispace Copy 算法，最后讨论了 Parallel Mark-Evacuate 以及 Parallel Scavenge 回收器的设计；更多 V8 相关资料索引参考&lt;a href=&#34;https://parg.co/UOm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U39&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 JavaScript 发展回顾&lt;/a&gt;: 在 2017 年 JS 状态调查结果出炉之前，Sacha Greif 先和几位专家聊了聊他们对于 2017 年 JavaScript 发展的看法与回顾，并整理成了这篇文章。本文从测试工具、构建工具、状态管理、全栈架构等几个不同的方面进行了讨论，对 2017 年中令人印象深刻的技术进行了分享；除此之外，&lt;a href=&#34;https://parg.co/UOo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A recap of front-end development in 2017&lt;/a&gt; 也是一篇不错的总结，更多 JavaScript 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://24ways.org/2017/wcag-for-people-who-havent-read-them/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 内容可用性提升指南&lt;/a&gt;: World Wide Web Consortium (W3C) 发布的 &lt;a href=&#34;https://www.w3.org/TR/WCAG20/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web Content Accessibility Guidelines 2.0&lt;/a&gt; 是网页内容可用性的绝佳指南，能够帮助设计者与开发者来提升网页的整体可用性；本文则是对这份指南的简要总结，以帮助那些没有时间阅读原指南的开发者快速了解网页可用性方面的知识。本文依次讨论了如何判断用户能否有效地接受网页内信息、如何判断用户能否有效地使用网页中的控制按钮与跳转链接、用户是否能够理解网页内容、是否针对复杂的用户环境进行了适配等内容；更多 Web 开发相关内容阅读&lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 开发工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U3B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;卡通图解 JavaScript 引擎&lt;/a&gt;: 本系列文章着眼于从运行机制的角度来介绍 JavaScript，&lt;a href=&#34;https://parg.co/U3w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;首篇文章&lt;/a&gt;介绍了 Callback Queue、Event Loop 等异步执行相关的概念，本文则是从引擎的角度，以漫画的方式来介绍 JavaScript 的编译、解析与执行的过程。&lt;a href=&#34;https://parg.co/UOH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上周的清单&lt;/a&gt;中我们推荐了 V8 引擎的推测优化，本文则是提纲挈领地介绍 JIT 编译器的原理，给读者一个宏观的概念展示；更多 JavaScript 引擎相关资料参考&lt;a href=&#34;https://parg.co/UmO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/parcel-bundler/parcel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Parcel&lt;/a&gt;: Parcel 是高速、零配置的 Web 应用打包工具；其面向现代操作系统设计，能够进行多核并发编译，并且提供了文件系统的缓存以优化重构建或者增量构建的性能。Parcel 还提供了开箱即用的 JS, CSS, HTML, 资源文件等支持，能够自动地使用 Babel, PostCSS,PostHTML 来进行代码转换，同时内建支持 &lt;code&gt;import()&lt;/code&gt; 动态导入与热替换。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Up2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;electron-toolkit&lt;/a&gt;: electron-toolkit 是轻量级的、强大的 Electron 应用的启动辅助工具，它能够以 NPM 脚本的方式启动，为开发者提供一系列开发过程中需要的辅助工具。这些工具包括了图标生成、截图工具、安装器、二进制文件生成、网站生成、实时更新等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/haltu/muuri&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Muuri&lt;/a&gt;: Muuri 是强大的 JavaScript 布局引擎，吸纳了来自 Packery, Masonry, Isotope, 以及 Sortable 的优秀特性，辅助开发者快速构建响应式、可排序、可过滤、可拖拽、可动画控制的可扩展表格系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vuetwo/vuetron&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vuetron&lt;/a&gt;: Vuetron 是基于 Electron 开发的，帮助 Vue.js 项目测试以及错误检测的工具，同时支持 Vuex 以及 Vue-Router。类似于 Developer Tools，Vuetron 能够查看事件、应用状态以及进行时间回溯的调试；同时还能够实现监听指定状态变量的变化，查看 API 请求与响应，可视化查看组件结构树等等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UOG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;从黑客到创业，他说技术创业该这么做！&lt;/a&gt;: 本文是知道创宇 CTO &amp;amp; COO 杨冀龙在极客 Live 中分享的创业感悟和踩过的那些坑。杨冀龙是安全焦点民间白帽黑客组织核心成员，被《浪潮之巅》评为中国新一代黑客领军人物之一；他在本文中依次分享了对于黑客的定义、如何从黑客成为一名安全创业者、技术创业踩过的坑、给技术创业者建议等内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>12.3</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.3/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-d7ccf5bc025ce4ae.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-44-期-2017-js-调查报告rest-接口实时化esm-的过去与未来&#34;&gt;前端每周清单第 44 期: 2017 JS 调查报告、REST 接口实时化、ESM 的过去与未来&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID : frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UO2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FCC 废除网络中立法案&lt;/a&gt;: 所谓的网络中立性，要求网络服务供应商不能优待或者故意限制来自某些网站的流量。前总统奥巴马在 2015 年签署命令，规定以 1934 年通过的《联邦通讯法》“ 第二类 ” 业务来规管网络服务供应商，让联邦通讯委员会执法，禁止网络服务供应商优待任何公司。美国联邦通讯委员会(Federal Communications Commission, FCC )早前通过废除网络中立性的规定，不再明文禁止网络服务供应商优待来自特定网站的流量。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Us5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expo SDK v24.0 发布&lt;/a&gt;: 本周 Expo SDK 24.0 正式发布，其基于 React Native 0.51 版本；同时 Expo 的官方网站也迎来了极大的更新，搜索、项目创建、发现等界面都焕然一新。该版本中添加了离线图片支持功能，避免了每次应用初始化时都需要进行网络图片加载；同时添加了 iOS 权限对话框的配置，优化了 ImageManipulator, ImagePicker 等接口的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Usm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Studio 1.3 发布&lt;/a&gt;: React Studio 是图形化可交互地 React 应用开发工作台，本文即是介绍最新的 1.3 版本中包含的系列特性。首先是整体性能与交互体验的提升，并且增加了对多语言的支持，同时优化了 Mock 数据的创建方式；此外，该版本还引入了新的卡片、选择器等等一系列新的组件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Chalarangelo/30-seconds-of-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 基础代码片&lt;/a&gt;: 本文整理了许多简明精巧的 JavaScript 开发中用到的代码片，既适合于初学者学习语法，也能帮助开发者温故知新。本文包含了数组的常见处理、浏览器元素与位置、时间与日期、函数与函数式编程、数学公式与计算、Node.js、Object、字符串以及很多的其他工具类；更多 JS 学习资料参考&lt;a href=&#34;https://parg.co/U5v&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 开发：语法基础与工程实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;清除浏览器中的资源缓存&lt;/a&gt;: 浏览器缓存是最常见的，也是最显著的提升前端性能的手段之一；不过在如果我们错误地将某些资源设置为了长期缓存，那么就要寻求方法强制刷新这些资源。本文即是介绍讨论如何强制刷新浏览器的某些资源缓存，作者依次讨论了 location.reload, vary + fetch, fetch + cache:reload, fetch + POST, iframe 中进行 POST, Clear-Site-Data 等方法；更多浏览器的存储操作参考&lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 开发基础&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Usb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Vue.js 的 RSA 加密通信应用&lt;/a&gt;: 加密是现代互联网的基石之一，本文即是希望通过构建简单的加密聊天应用，来引导读者了解加解密算法的基本概念。本文首先介绍了 2048 位的 RSA 加密算法的概念与实现方式，然后使用 Vue.js 来编写前端界面，并且使用 Node.js 以及 Socket.io 来编写服务端来协调各个客户端的消息。更多 Vue.js 相关资料参考 &lt;a href=&#34;https://parg.co/Usp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Usl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ESM 的目前实现与未来规划&lt;/a&gt;: ES 模块化标准最早是 2015 年在 ECMAScript 6 中发布，现在我们已经可以在三个主流浏览器中使用 ES Modules。而 Node.js 目前是采用了 Common.js 模块化方案，我们可以在应用中通过 require 方法来引入其他模块。两种模块机制的巨大差异使得同时兼容 Common.js 与 ESModule 并非易事；而自 Node.js 8.9.0 以来，开发者可以实验性地使用 ESModules，本文即是对于社区的反馈以及 ESM 的未来规划进行介绍。更多相关资料参考 &lt;a href=&#34;https://parg.co/UHE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JS Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Apollo 的组件数据交互&lt;/a&gt;: 本文是 Werkspot 的工程师分享的他们协同使用 Apollo Client 与 React Native 来开发应用的实践经验，着重讨论了 GraphQL 带来的易用性与灵活性。作者首先讨论了查询组件的构成，然后分析了如何结合查询组件与 Mutations，最后讨论了如何测试查询组件；更多 GraphQL 相关资料参考&lt;a href=&#34;https://i.postimg.cc/50XLzC7C/image.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Usq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将 REST APIs 转化为实时 APIs&lt;/a&gt;: 实时交互式现代技术栈中的重要组成，从而满足用户与企业的高速频繁地数据需求；本文即是介绍如何利用开源的 Pushpin 来将 REST API 转化为实时 API。本文首先介绍了请求-响应架构与事件驱动架构地区别，然后对比了现有的事件接口的解决方案，最后介绍了 Pushpin 的特性与部署方式。更多服务端架构讨论参考&lt;a href=&#34;https://parg.co/UdT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务端应用程序开发基础&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/Yv1ss1X1K-QG9fEXGjZ_zw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Electron 开发跨平台构建流程设计&lt;/a&gt;: 这是 Electron 系列文章的第二篇，本文将和大家分享我是怎么去构建自动化的 Electron 开发构建工程的，说白了，就是怎么把敲的代码变成一个用户可以下载安装的包。当然随着之后应用复杂度的提升和技术再选型，工程体系可能随时会重构或演进，但至少可以给大家一些参考，欢迎留言交流。工程自动化，应该是所有开发者的一种基础追求，当你搭建建好工程体系，以后你将专注于产品功能的开发，而不会花大量不必要的时间去手动构建。更多 Electron 相关资料参考&lt;a href=&#34;https://i.postimg.cc/50XLzC7C/image.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://stateofjs.com/2017/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The State of JavaScript 2017&lt;/a&gt;: 经过漫长的调研与数据整理之后，2017 年的 JavaScript 使用报告正式发布；本报告汇聚了来自数万名开发者对于语法、前端框架、状态管理、服务端框架、测试、CSS、构建工具、移动端框架等等大前端相关技术栈的看法与使用体验。本报告仍然采取了乐于使用、正在使用、准备使用、不感兴趣、没听过等几个层次来描述开发者对于某个框架或者工具的看法；此外，本报告还提供了所谓 Connections 图解，即衡量使用者不同技术之间的关联度，譬如有多少 React 的使用者仍然使用了 Redux 等等。更多 JS 教程参考&lt;a href=&#34;https://parg.co/U5v&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 开发：语法基础与工程实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UOB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NectarJS: 将 JavaScript 编译为平台相关的二进制代码&lt;/a&gt;: 本文作者 Adrien Thierry 近年来致力于，打造将 JavaScript 编译为平台相关的二进制代码的途径，其在本文中介绍了开源的 NectarJS 的设计理念与运行机制。作者将 NectarJS 定位为编译即服务，即能够在优化 JavaScript 本身性能的同时，支持将其编译为 WebAssembly、IoT、Windows、OSX、Linux 等等各个平台或者目标的格式。更多 JS 教程参考&lt;a href=&#34;https://parg.co/U5v&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 开发：语法基础与工程实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;REST 就是新时代的 SOAP&lt;/a&gt;: 本文作者分享了其对于 REST 的看法，不可避免地带有主观色彩，可以辩证地去看待。作者首先讨论了 RESTful API 的不足，其抽象简练的原则往往不能满足真实业务场景中的问题；然后作者又讨论了 REST 动词、错误处理乃至于基础概念上的不足，作者并未在本文中讨论他理想的解决方案，只是抛出了很多问题留待读者去思考。更多服务端架构讨论参考&lt;a href=&#34;https://parg.co/UdT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务端应用程序开发基础&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用机器学习突破图片验证码&lt;/a&gt;: 图片验证码是现代网页中常见的安全防火墙之一，能够用于人机识别，避免爬虫等恶意抓取行为；本文则是以著名的 WordPress 图片验证码插件为例，介绍如何使用机器学习来突破验证码的限制。本文作者主要使用了 Python 3, OpenCV, Keras, TensorFlow 这些常见的机器学习库与工具，首先介绍了如何使用 WordPress 的插件创造训练数据集，然后介绍了深度卷积神经网络的基本原理以及如何进行神经网络的训练，最后介绍了如何使用训练好的模型进行图片识别。更多 Web 安全相关资料参考&lt;a href=&#34;https://parg.co/U6E&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/exercism/exercism.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exercism.io&lt;/a&gt;: Exercism 提供了超过三十种编程语言的数百个实践问题，以帮助开发者在实践中学习并且掌握某个编程语言。Exercism 还提供了便捷的客户端工具，帮助开发者快速搭建实验环境，并且允许开发者分享自己的见解与解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/developit/microbundle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microbundle&lt;/a&gt;: Microbundle 是基于 Rollup 构建的零配置小模块打包工具，开发者只需要安装，并且在 package.json 内配置基础命令即可使用。Microbundle 会自动检测 index.js 或者 cli.js 这样的文件，作为入口文件，自动编译为 CommonJS、UMD、ESM 等多种格式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ballercat/walt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WAlt&lt;/a&gt;: WAlt 可以作为 WebAssembly 文本格式的中介，其尝试使开发者利用 JavaScript 的语法来直接编写 .walt 代码，然后直接编译为 WebAssembly。WALt 的优势在于，其并不需要 C/C++ 或者 Rust 环境，而只需要了解 JavaScript；并且编译的过程也不需要 LLVM 等二进制工具，还能够集成于 Webpack 等工具。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/Us6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10 年 IT 老兵：思路上的转变，远比单纯提升技术更有价值&lt;/a&gt;: 本文节选自赵成教授在极客时间 App 开设的“赵成的运维体系管理课”，是其对自己十年技术生涯的回顾与总结。赵成教授来自美丽联合集团，集团旗下两大主力产品是蘑菇街和美丽说，目前负责管理集团的技术服务团队。作者在本文中依次分享了为什么我选择了踏上运维之路？、运维思路上的转变，远比单纯提升运维技术更有价值、专栏的构成等内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>12.4</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/12/12.4/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-63f9f2c555b36c07.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面45.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-45-期-safari-支持-service-worker-parcel-完整教程-2017-前端大事件&#34;&gt;前端每周清单第 45 期: Safari 支持 Service Worker, Parcel 完整教程, 2017 前端大事件&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;p&gt;本期是 2017 年的最后一期，不知不觉陪伴大家已经一年了；非常感谢所有阅读过清单的同学的支持，山高水远，来年再见~&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/gqNjFzRhurLLYTdWjIKpXg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Safari 支持 Service Worker 了！&lt;/a&gt;: 在昨天发布的 Safari 46 技术预览版里，发布了一个重大更新，在新的桌面版 Safari 里将默认打开 Service Worker，这意味着苹果正在逐步接受 PWA，我们将进入 PWA 的时代。早在今年 7 月份，就有人问过 WebKit 团队是否将支持 Service Worker，当时他们的回答是正在考虑，后来在 8 月份变成“In development”，现在终于正式发布了。PWA 的另一个核心特性 Web App Manifest，苹果表示也正在开发中，按开发进度可能几个月后就能与我们见面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UCw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL.js 0.12.0 发布&lt;/a&gt;: 该版本包含了很多的新特性与提升，将之前部分实验特性进行了规范化适应，显著地提升了 Flow 类型的质量。开发者在升级到该版本时需要仔细评估其对于现有系统的影响，特别是对于那些依赖 GraphQL.js 的构建工具等，更多详细的版本特性介绍请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UhB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack Cli 2.0.0 发布&lt;/a&gt;: Webpack CLI 是 Webpack 辅助构建工具，能够将应用构建所需要的配置代码交由命令行工具去创建，尽量减少开发者所需要的操作。在 2.0 版本中 Webpack CLI 进一步优化了易用性，允许在配置中使用 ES6 等语法，添加了 v8 编译缓存，同时允许开发者更方便地反馈问题与启动本地服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UsO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;你需要了解的关于 Parcel 的一切&lt;/a&gt;: Parcel 是新近开源的零配置、高性能的 Web 构建工具，其相较于 Webpack 更为简单易用；Parcel 内置了开箱即用的开发服务器，其会自动分析依赖、监测文件变化，并且完成线上热替换。本文即是对于 Parcel 用法的介绍，首先分析了 Parcel 的优势，然后具体讨论了现代 Web 开发中常见的技术栈的集成方式，包括 React、Vue、TypeScript 等等；更多 Parcel 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/iReactPack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://auth0.com/blog/typescript-practical-introduction/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeScript 实战教程&lt;/a&gt;: 本文通过实例来学习 TypeScript 的基础特性，首先介绍了如何搭建配置 TypeScript 开发环境，以及主要的编译选项的含义；然后依次讨论了 TypeScript 的语言特性，包括变量、模块、类与对象、接口、装饰器、迭代器等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UCB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Mobx-state-tree 的应用状态管理&lt;/a&gt;: 本课程是 Mobx 的作者 Michel Westrate 发布在 egghead 上的，详细介绍 Mobx-state-tree 基本使用的系列视频课程。开发者能够在该课程中学习到如何声明数据模型、如何管理数据模型的生命周期等等，并最终能够使用 MST 中开箱即用的异步 Action、Patch、Snapshot、Middleware 等特性来编写健壮可扩展的现代应用。更多 MobX 相关教程参考&lt;a href=&#34;https://parg.co/UGZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 应用架构与性能调优&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U47&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;浏览器 user-agent 简史&lt;/a&gt;: 很多人都知道浏览器的 user-agent 字符串，服务器端通过这个字符串进行客户端的浏览器、操作系统、加密等级、浏览器语言、渲染引擎和版本信息的识别。从 1993 年 NCSA 发布首款浏览器 Mosaic 以来，这个字符串经历了纷繁复杂的变化，本文即是介绍 user-agent 字符串的演变简史。更多 DOM 相关教程参考&lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 开发基础&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://sqlwiki.netspi.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NetSPI SQL 注入指南&lt;/a&gt;: 本 Wiki 致力于提供针对数据库管理系统(DBMS)的，SQL 注入攻击的识别、漏洞利用、提权等全流程的完整教程。本教程主要分为五大步骤，依次介绍了注入点分析、DBMS 识别、注入类型、注入技巧、攻击型查询载荷等内容；更多 Web 安全相关资料参考&lt;a href=&#34;https://parg.co/U4w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UC1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 中的 CPU 密集操作&lt;/a&gt;: Node.js 是典型的基于事件循环的单线程架构，其在处理 CPU 密集型任务的时候不可避免地会碰到瓶颈；本系列文章即是探讨如何在 Node.js 中处理 CPU 密集型代码。首篇文章模拟了密集型处理环境，使用 fork 来创建子进程处理任务，不过这种方式效率较低，并且会带来较大的资源占用；第二篇文章则介绍了基于 Redis 的 Kue 消息队列，如何利用 Kue 来异步多节点地处理任务等。更多 Node.js 教程参考&lt;a href=&#34;https://parg.co/UKQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Node.js 全栈架构&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UCD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Native 事件机制探究&lt;/a&gt;: React Native 在某种程度上可以简单看做 Javascript-Java-Xcode 转换器，因此 Raect 代码与原生代码之间的事件交互无疑是非常重要的部分；本文即是详细分析了 React Native 中的事件机制。本文首先介绍了 Device Event Emitter 的设计与单例模式，然后讨论了 RCTDeviceEventEmitter, RCTEventEmitter 等 JavaScript 与原生代码之间的桥梁；接下来本文以简单的原生组件为例介绍了如何完成原生与 JavaScript 之间的事件传递，最后还分析了为何 RN 中没有冒泡机制。更多 React Native 相关资料参考&lt;a href=&#34;https://parg.co/URb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uhn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Apollo Client 进行状态管理的未来&lt;/a&gt;: 随着应用体积的增加，其状态管理的复杂性也会大幅度提升；而目前 Apollo Client 已经能够帮助开发者处理远程数据交互，本地的状态数据则依然由 Redux、MobX 这样的状态管理工具负责。本文则是介绍如何利用 Apollo Link 来实现一致性的本地状态管理，统一了远程数据查询与本地状态操作；更多 GraphQL 相关资料参考&lt;a href=&#34;https://parg.co/URH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Usv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与 Vue.js 的异同&lt;/a&gt;: 一年来 React 与 Vue.js 都发生了巨大的变化，取得了长足的发展；本文则是在年末的时候对二者进行了一次深度盘点。本文依次从性能、模板与 JSX 的语法、CSS、生态系统、状态管理等多个角度进行了分析；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/URb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Us9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;对于 REST is the new SOAP 的回应&lt;/a&gt;: &lt;a href=&#34;https://parg.co/U4B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上周的清单&lt;/a&gt;中，我们推荐了 Rest is the new SOAP 这篇文章，其列举了诸多 REST 的不足；而本文即是 Phil Sturgeon 的辩驳回应。本文对于 Rest is the new SOAP 几乎是逐字逐句地进行了反驳，对比着看也是能够加深对于 REST 的理解；更多 REST 的讨论参考这里&lt;a href=&#34;https://parg.co/UdT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务端应用程序开发基础&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UCa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 前端领域发生的重大事件盘点&lt;/a&gt;: 年末多盘点，本文则是根据 Github, Google Trends, Stack Overflow, NPM 等站点的统计数据，对 2017 年前端领域发生的重大事件进行了盘点。包括了前端框架、ECMAScript、WebAssembly、包管理器、样式、TypeScript、状态管理、GraphQL、NapaJS 等方面；此外，在&lt;a href=&#34;https://parg.co/U4B&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;上周的清单&lt;/a&gt;中我们推荐了 2017 JavaScript Survey，本周作者则从统计的数据中提取出了&lt;a href=&#34;https://parg.co/UhD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;十条要点&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://google.github.io/boardgame.io/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Boardgame.io&lt;/a&gt;: Boardgame.io 是基于 React 的游戏框架，该框架允许游戏开发者将游戏的规则转化为一系列的简单函数，在用户执行某个操作之后，能够通过这些函数的组合来改变游戏的状态。该框架使得开发者专注于设计游戏逻辑本身，而不需要考虑或者编写任何的网络或者服务端代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/typicode/lowdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lowdb&lt;/a&gt;: Lowdb 是基于 Lodash 的本地 JSON 化数据库，支持 Node、Electron 以及浏览器环境。Lowdb 提供了与 Lodash 一致的接口，方便开发者快速上手使用；同时 Lowdb 编写不同的 Adapters 来适应不同的存储环境。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/danilowoz/react-content-loader&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;react-content-loader&lt;/a&gt;: react-content-loader 允许开发者利用 SVG，来创建模拟即将加载的内容块结构的提示条，其有点类似于 Facebook 的卡片加载样式。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/koute/stdweb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stdweb&lt;/a&gt;: stdweb 致力于构建 Web APIs 与 Rust 之间的绑定，从而允许 Rust 与 JavaScript 之间的高可交互性。stdweb 允许在 Rust 中直接插入 JavaScript 代码，其可被编译为 WebAssembly，并且提供了在 Rust 与 JavaScript 之间进行值传递的机制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://boat.alibaba.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;轻舟&lt;/a&gt;: 轻舟是手淘团队提供的，基于云端一体化体验一站式开发和运维 APP 的产品。它在体验方面实现了全流程支持、一站式开发环境，无缝整合端上能力与云上服务；依托手机淘宝多年技术积累强力赋能，底层的 WEEX 架构让混合式 APP 在拥有动态性的同时毫不丢失原生体验。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/U4x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;18 年互联网老兵童剑：我与技术的爱情长跑&lt;/a&gt;: 童剑，白山联合创始人兼首席技术官，EGO 北京分会会员。前新浪研发中心总经理，2016 年 5 月加盟白山，迅速搭建和完善各产品线技术梯队，构筑云链产品技术体系，带领团队推出云存储、云聚合产品，助力白山抢先布局云后市场。本文即是童剑对于自己十八年技术之路的心得分享，包括了自己从出入职场、转型管理到创业新征程中的经验与感悟等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
