<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>5 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/index.xml" rel="self" type="application/rss+xml" />
    <description>5</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>5</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/</link>
    </image>
    
    <item>
      <title>5.1-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.1-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.1-frontend/</guid>
      <description>&lt;p&gt;﻿# 前端每周清单第 11 期：Angular 4.1 支持 TypeScript 2.3，Vue 2.3 优化服务端渲染，优秀 React 界面框架合集&lt;/p&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://airbnb.design/painting-with-code/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Airbnb 设计团队发布 React SketchAPP》&lt;/a&gt;：Airbnb 设计团队近日发布能够将 React 组件渲染到 Sketch 文档中的开源工具，它为开发工程师与设计师之间提供了便捷的沟通桥梁。( &lt;a href=&#34;http://airbnb.design/painting-with-code/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://airbnb.design/painting-with-code/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/vuejs/vue/releases/tag/v2.3.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Vue.js 2.3.0 JoJo&amp;rsquo;s Bizarre Adventure 发布》&lt;/a&gt;：近日，Vue.js 发布其 2.3.0 版本，带来了一系列性能的提升与 Bug 修复。该版本对于服务端渲染、异步组件等多个重要的部分进行了优化，值得一提的是，官方还创建了新的基于 Vue 的服务端渲染实现指南。( &lt;a href=&#34;https://github.com/vuejs/vue/releases/tag/v2.3.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/vuejs/vue/releases/tag/v2.3.0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《斯坦福宣布使用 JavaScript 作为计算机课程的首选语言》&lt;/a&gt;：近日，某位有 15 年 Java 教学经验的斯坦福教授决定放弃 Java，而使用 JavaScript 作为计算机入门课程的教学语言。斯坦福官方站点将它们新的 106J 课程描述为：JavaScript 是最流行的构建交互式 Web 的开发语言，本课程会用 JavaScript 讲解 CS106A 中的实例。( &lt;a href=&#34;https://parg.co/bNX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNX&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/flow/releases/tag/v0.45.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Flow 0.45.0 版本发布》&lt;/a&gt;：近日 Flow 0.45.0 版本发布，其引入了一系列的新特征，譬如对于 Unicode 字符的支持、import 表达式的支持等；同时，Flow 还进行了部分错误的修复，并且优化了代码运行效率。( &lt;a href=&#34;https://github.com/facebook/flow/releases/tag/v0.45.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/facebook/flow/releases/tag/v0.45.0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.com/2017/04/angular-410-now-available.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Angular 4.1.0 发布》&lt;/a&gt;：近日 Angular 4.1.0 版本发布，该版本中添加了对于 TypeScript 2.2 以及 2.3 的完整支持；除此之外，本版本还添加了一系列的新特性，并且修复了许多的错误。( &lt;a href=&#34;http://angularjs.blogspot.com/2017/04/angular-410-now-available.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://angularjs.blogspot.com/2017/04/angular-410-now-available.html&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bN4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《在 Node.js 应用中如何使用 ESLint》&lt;/a&gt;：ESLint 是开源的 JavaScript Linting 工具，它能够帮助开发者解决 JavaScript 无类型语言本身带来的一些错误。ESLint 遵循组件化的设计思想，它允许开发者动态地设置使用的规则，而本文即是介绍基础的 ESLint 环境搭建与使用方法的文章。( &lt;a href=&#34;https://parg.co/bN4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bN4&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《8 小时内学习 Node.js》&lt;/a&gt;：Node.js 是基于 Google Chrome V8 引擎的 JavaScript 框架，其能够用于开发类似于视频直播、单页应用等 IO 密集型的 Web 项目。而本文则是提供了完整的从零到一的 Node.js 学习路线图，包含了基础的环境构建、Console 使用、核心模块使用、基本的 Web 服务器搭建等等内容。( &lt;a href=&#34;https://parg.co/bNy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNy&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.ssh.com/ssh/port&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《SSH 背后的故事》&lt;/a&gt;：SSH 是最常用的协议之一，而本文则是记录了 SSH 获得其默认端口号 22 的背后的故事。除此之外，本文还记录了 SSH 的基本搭建与使用，以及如何与 iptables 协同使用等内容。( &lt;a href=&#34;https://www.ssh.com/ssh/port&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.ssh.com/ssh/port&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《CSS-in-JavaScript：基于组件的样式组织》&lt;/a&gt;：通过使用内联样式，我们能够利用 JavaScript 带来的可编程性的便利来组织样式代码。它能够为我们提供类似于 CSS 预处理器、命名空间等多方面的辅助。本文则是介绍了几个常见的适用于 CSS-in-JS 技术的场景，譬如排版、空格等。( &lt;a href=&#34;https://parg.co/bNe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNe&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bN1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《你应该掌握的关于调试 Angular 应用的知识》&lt;/a&gt;：调试是 Web 开发中不可或缺的部分，特别是对于那些接管已存在代码库的开发者，他们往往需要经过大量的调试才能了解代码的架构与逻辑。不过貌似 Angular 官方文档中尚缺专门对于 Angular 中调试的讲解，本文则是深度浅出地讲解 Angular 应用开发过程中的调试技巧。本文首先介绍了作者调试源代码的技巧，然后介绍了如何使用框架内置的调试 API 来进行应用调试。( &lt;a href=&#34;https://parg.co/bN1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bN1&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《CSS Grid 布局初体验》&lt;/a&gt;：最近 CSS Grid 布局大红大紫，吸引了很多开发者的目光。而最新版的 Firefox、Chrome、Opera、Safari 都添加了对于 CSS Grid 的支持。本文则是聚焦于何谓 CSS Grid 布局、它可以做些什么以及如何投放到生产环境等内容。( &lt;a href=&#34;https://parg.co/bNW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNW&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《一系列优秀的 React 界面框架》&lt;/a&gt;：本文列举了多个优秀的 React 界面框架，分析了其特性、适用场景以及潜在的缺陷。本文涉及的框架包括 Material UI、React Desktop、Semantic-UI-React、Ant-Design、Blueprint、React Bootstrap、React Toolbox、Grommet、Fabric 等等。( &lt;a href=&#34;https://parg.co/bNh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNh&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《使用 gRPC-Web 从 Restful JSON API 迁移到类型安全的 Web API》&lt;/a&gt;：目前 Web 开发中，REST + JSON 是标准的 Web 应用于 API 服务器之间的交互方式。不过这种缺少强类型限制的、更多倾向于约定的通信方式往往会使得网络调试相对复杂。本文即介绍了如何扩展 gRPC 以及使用 TypeScript 设计新的系统中多个微服务之间的交互协议。( &lt;a href=&#34;https://parg.co/bNf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNf&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《实测 Vue SSR 的渲染性能：避开 20 倍耗时》&lt;/a&gt;：Vue SSR 是 Vue.js 2.0 引入的直出渲染方案，本文将全面解析 virtual-dom-based 及 string-based 的原理并对其进行对比。Vue SSR 的模板是 virtual-dom-based，所以 QQ 空间 Hybrid 业务做 Vue 2.0 的改造的同时，模板类型也从之前的 a 类转换成 b 类。本文是在实际业务场景中对 Vue SSR 的渲染性能做测试，并解析渲染步骤，给出尝试优化的方案和最终结论。( &lt;a href=&#34;https://parg.co/bNv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNv&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《从零开始基于 JavaScript 构建简单神经网络》&lt;/a&gt;：本文不是纯粹的前端开发文章，对于听说过人工智能与神经网络并且有兴趣的开发者不妨一读。而本文则是渐进地介绍神经网络与深度学习理论基础、如何使用 JavaScript 实现简单的数学公式、如何实现简单的神经网络等内容。( &lt;a href=&#34;https://parg.co/bNa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNa&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《来自 Vixlet 的 React 优化建议》&lt;/a&gt;：近年来 Vixlet 的 Web 团队逐步将其 Web 框架迁移到了 React + Redux 技术架构，本文是来自于 Vixlet 的 React 优化实践总结与建议。( &lt;a href=&#34;https://parg.co/bNF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNF&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《在 Web 开发中谨慎使用 CSS in JavaScript》&lt;/a&gt;：CSS 是有缺陷的，不过很多项目在选择使用 CSS-in-JavaScript 来组织样式的时候，却是对于 CSS 与 CSS-in-JS 很多的误解。本文以 Styled-Component 为例，列举出了常见的 9 个误解，譬如使用 CSS-in-JS 才能解决命名空间冲突、保证样式的可扩展性、带来了性能提升与样式文件的可组织性等等。( &lt;a href=&#34;https://parg.co/bNR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNR&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《d3.express：集成交互式编码环境》&lt;/a&gt;：本文介绍了尚在开发中的 d3.express，一个类似于 Python Juypter Notebook 的交互式编码环境。d3.express 允许开发者使用大量 d3 内置的功能函数，譬如加载远程的 CSV 文件；并且允许开发者交互地实时预览 SVG、Canvas 等绘制结果，有人认为 d3.express 会是一种基于 JavaScript 的更好的数据可视化解决方案。( &lt;a href=&#34;https://parg.co/bNi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNi&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bN9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《V8 不再使用基准测试引擎 Octane》&lt;/a&gt;：JavaScript 基准测试引擎是一段不断进化的历史。随着网页从原始静态页面到现在富客户端应用，都需要基准测试引擎能够与时俱进。SunSpider 是其中比较早的基准测试引擎，它为快速优化 JavaScript 提供了基础。但是，随着虚拟机开发者意识到微基准测试的局限性，基准测试引擎随之更新，针对 SunSpider 的短板进行优化，同时浏览器社区也将 SunSpider 从推荐基准测试引擎中剔除。Octane 基准测试套件最早发布于 2012 年，旨在减轻早期微基准测试引擎的一些缺陷。它源于 V8 的早期简单测试用例，最终成为通用网页性能的基准测试。Octane 包含 17 个不同的测试集，以覆盖各种不同的工作场景。Octane 的内容代表它创建时度量 JavaScript 性能的主流方式。( &lt;a href=&#34;https://parg.co/bN9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bN9&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bNI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《探秘 Google SEO 算法背后的秘密》&lt;/a&gt;：SEO 是网站推广过程中不可忽视的一个部分，其全称为搜索引擎优化。本文则是面向 SEO 新手或者老鸟的有关 Google 推荐算法的解构阐述，详细分析了 Google 推荐算法的考量因素，并且给出了如何对网站进行 SEO 优化的实践建议。( &lt;a href=&#34;https://parg.co/bNI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bNI&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://dimafeng.com/2017/04/23/modern-frontend/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《从实用主义视角来看现代前端应用开发》&lt;/a&gt;：现代 Web 开发技术变革迅速，而我也经历了从纯 JS、jQuery、Vaadin、Angular JS、React 等等一系列的变迁。本文则首先思考何谓现代 Web 应用，然后考虑现代 Web 应用常用的项目架构与构建方式，譬如 TypeScript、Webpack、Linting 等内容，然后讨论现代常用的技术架构，譬如 React.j、MobX、依赖注入等相关知识。( &lt;a href=&#34;http://dimafeng.com/2017/04/23/modern-frontend/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://dimafeng.com/2017/04/23/modern-frontend/&lt;/a&gt; )&lt;/p&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kitze/sizzy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Sizzy》&lt;/a&gt;：Sizzy 是辅助开发者预览网页在不同屏幕分辨率下显示效果的工具，它能够在同一页上列举出目标网页在多个设备上的显示效果，从而加速响应式开发的速度。( &lt;a href=&#34;https://github.com/kitze/sizzy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/kitze/sizzy&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://open.segment.com/create-next-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《create-next-app》&lt;/a&gt;：基于 Next.js 的类似于 create-react-app 的快速创建支持服务端渲染的 React 应用的命令行辅助工具。( &lt;a href=&#34;https://open.segment.com/create-next-app&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://open.segment.com/create-next-app&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mozilla/fathom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Fathom》&lt;/a&gt;：Fathom 是 Firefox 开源的用于提取网页中有意义内容的 JavaScript 框架，其能够有效识别页面中的前进/后退按钮、地址表单以及主文本内容等等。( &lt;a href=&#34;https://github.com/mozilla/fathom&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/mozilla/fathom&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/tamperchrome&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《tamperchrome》&lt;/a&gt;：Tamper Chrome 是一个允许你实时截获与修改 HTTP 请求的 Chrome 扩展，其能够用于 Web 安全测试等多个方面，并且它能够运行在包括 Chrome OS 在内的多种操作系统中。( &lt;a href=&#34;https://github.com/google/tamperchrome&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/google/tamperchrome&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zeit/pkg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《pkg》&lt;/a&gt;：pkg 能够将 Node.js 项目打包为单个可执行文件，其允许开发者发布商业级应用而不用担心源代码泄露的风险。pkg 会自动扫描你的 node_modules，然后将需要用到的本地内容打包到可执行文件中。( &lt;a href=&#34;https://github.com/zeit/pkg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/zeit/pkg&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.2-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.2-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.2-frontend/</guid>
      <description>&lt;p&gt;﻿&amp;gt; url: FE-Weekly-12&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;topicL 前端每周清单、前端、jQuery、Vue、PWA&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26780461&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单第 12 期&lt;/a&gt; 为 InfoQ 中文站特供稿件，首发地址为&lt;a href=&#34;https://parg.co/btd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;；如需转载，请与 InfoQ 中文站联系。从属于笔者的&lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Web 前端入门与工程实践&lt;/a&gt;的&lt;a href=&#34;https://parg.co/bh1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单系列&lt;/a&gt;系列；部分文章需要自备梯子。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;前端每周清单第-12-期&#34;&gt;前端每周清单第 12 期&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://prepack.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Facebook 发布代码优化工具 Prepack》&lt;/a&gt;：Prepack 是由 Facebook 发布的 JavaScript 源代码优化工具，它能够在编译时自动解析计算与重构代码；从而减少 JavaScript 包体的代码量，避免不必要的中间计算与对象分配过程，最终以提高代码的运行速度。( &lt;a href=&#34;https://prepack.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://prepack.io/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://jsmantra.com/faster-leaner-and-better-next-js-ea40afb94907&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Next.js 2.3 发布》&lt;/a&gt;：在 Next.js 2.3 中，应用性能得到了进一步优化。主要的优化手段包括避免内联的 JavaScript 代码、使用异步脚本标签、进行脚本预加载以及引入更好的代码分割方式、更加灵活的 Prefetch API 等等。( &lt;a href=&#34;https://jsmantra.com/faster-leaner-and-better-next-js-ea40afb94907&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://jsmantra.com/faster-leaner-and-better-next-js-ea40afb94907&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/postcss/postcss/releases/tag/6.0.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《PostCSS 6.0 发布》&lt;/a&gt;：PostCSS 6.0 放弃了对于 Node.js 0.12 的支持，清理了所有 raws API，添加了对于 @apply 的支持并且进一步优化了内存占用。( &lt;a href=&#34;https://github.com/postcss/postcss/releases/tag/6.0.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/postcss/postcss/releases/tag/6.0.0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Jest 20 发布》&lt;/a&gt;：Jest 20 相较于 Jest 19 带来了更多的变化、进行了 Test Runner 的特性重写，并且添加了新的测试接口。新版本允许同时对多项目进行测试，并且完善了配置系统，使其更加灵活；另一方面，新版本中也带来了更多的内置测试接口，同时对文档与代码库进行了优化。( &lt;a href=&#34;https://parg.co/btU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btU&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《基于 Vue.js、Webpack、Material Design 打造 PWA 应用》&lt;/a&gt;：PWA 应用已经受到了越来越多的关注与实践，而本系列文章则介绍了如何使用 Vue.js、Webpack 以及 Material Design 打造 PWA 应用。本系列文章包含七个部分，分别介绍了基于 Vue.js、Webpack 与 Material Design Lite 创建单页应用、使用 Vue-Resource 与 VueFire 进行数据交互、使用 Service Workers 实现离线模式、拍照、上传图片、实现推送、访问设备地址等内容。( &lt;a href=&#34;https://parg.co/btH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btH&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Create XP App》&lt;/a&gt;: 近日，微软的 Skype 团队发布了基于 React Native 的跨平台开发框架 ReactXP，而 create-xp-app 则是快速创建 ReactXP 应用的脚手架。本文则是对于 create-xp-app 的安装与基本使用的介绍，包括了如何运行在 Web 与 iOS/Android 等原生环境中，以及如何进行打包等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《React 动画系列教程》&lt;/a&gt;：本系列教程着眼于介绍 React 动画开发相关知识，而本文则是从 CSS transitions 基础入手，介绍了 CSS transitions 的基础语法与进度条、导航栏等经典案例。( &lt;a href=&#34;https://parg.co/bMF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMF&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《掌握 Node.js 核心模块之文件系统》&lt;/a&gt;：本文介绍 Node.js 核心模块中与文件系统、文件流等相关的部分，同时还介绍了实际开发中常用的第三方文件库。本文首先介绍了基本的读取与写入操作，然后介绍了权限控制、监听等功能，最后讨论了使用 graceful-fs、mock-fs、lockFile 等优秀的第三方库来辅助开发。( &lt;a href=&#34;https://parg.co/bMj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMj&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《使用 React、Redux 以及 Webpack 创建 TODO 应用》&lt;/a&gt;：本文是面向新手的教学文章，介绍了如何利用 React、Redux 以及 Webpack 创建简单的 TODO 应用，包括利用 Webpack 搭建构建环境、编写基本的 React 组件以及使用 Redux 管理应用状态等内容。( &lt;a href=&#34;https://parg.co/bMT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMT&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://vuejsdevelopers.com/2017/05/01/vue-js-cant-help-head-body/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Vue.js 与外部交互》&lt;/a&gt;：Vue.js 是非常优秀的网页构建框架，不过我们往往会面临着比较割裂的开发情况，即网页中的一部分是交由 Vue.js 管理，而另一部分是交由其他脚本或者插件管理；这中情况在多团队协同开发或者对旧版本的改造时可能会碰到。而本文则介绍了应该如何使用 Vue.js 与外部其他脚本进行交互，譬如管理 head、body 标签、监听键盘事件等等内容。( &lt;a href=&#34;https://parg.co/bMw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMw&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bM2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《使用 Electrino 减少近 99% 的应用大小》&lt;/a&gt;：Electro 是非常不错的利用 Web 技术开发跨平台桌面应用的运行时，不过其缺陷在于打包的应用中往往需要携带 Node.js 与 Chromium 的完整框架，导致了即使是最简单的 HelloWorld 应用也有近 115MB。而 Electrino 提供了类似于 Electron 的接口，不过使用系统自带的 Web 运行时来替代 Chromium，从而保证最后打包出来的应用仅有原来的 0.1% 大小。Electrino 适用于那些不依赖于操作系统本身功能的应用，项目也处于开发状态。( &lt;a href=&#34;https://parg.co/bM2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bM2&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《饿了么的 PWA 升级实践》&lt;/a&gt;：本文介绍了饿了么利用 Vue.js 与 PWA 开发其移动 Web 端过程中的实践经验，包括 PRPL 模式的实现、多页面性能优化、用户体验优化等等内容。( &lt;a href=&#34;https://parg.co/bMz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMz&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《使用 Brotli 压缩加快网页响应速度》&lt;/a&gt;：提升网页响应速度是 LinkedIn 工程师的首要关注之一，常见的提升方法就包括了如何减少浏览器与服务端之间传输的数据量。目前，主流的压缩算法当属 Gzip，而本文则介绍了 LinkedIn 尝试在部分现代浏览器上采用 Google 工程师 2015 年提出的 Brotli 开源压缩算法的考虑过程；Brotli 专注于文本压缩，其相较于 Gzip 能够带来 20% ~ 30% 的体积减少。( &lt;a href=&#34;https://parg.co/bMx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMx&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《调试 Node.js 应用的最佳工具》&lt;/a&gt;：调试，也就是寻找与修复软件中存在问题的过程一直是 Node.js 项目构建过程中的挑战之一，而本文则是介绍了如何利用那些优秀的工具来辅助进行 Node.js 代码调试。本文首先介绍日志相关内容，恰当的日志能够帮助开发者在生产环境中迅速定位到错误所在；然后本文介绍了如何在开发环境中直接调试 Node.js 应用。( &lt;a href=&#34;https://parg.co/bMB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMB&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/_evansalter/github-pages-and-single-page-apps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Github Pages 与单页应用》&lt;/a&gt;：单页应用 SPA 以及日渐成为目前主流的网页呈现方式，并且构建功能丰富的高性能 Web 应用也日渐容易。本文则是介绍了不同的单页应用的部署方式，包括 Google App Engine、now、以及 Github Pages 等；本文重点介绍了 Github Pages，从概念介绍、仓库设置、自动部署、以及常见的 Github Pages 使用过程中的实践。( &lt;a href=&#34;https://dev.to/_evansalter/github-pages-and-single-page-apps&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/_evansalter/github-pages-and-single-page-apps&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Node.js 根本没有 float：浮点反序列化错误背后的故事》&lt;/a&gt;：在 Node.js 中，当我们把一个浮点数序列化，再反序列化，居然出错了，这是为什么呢？作者通过刨根问底的追查，发现 Node.js 根本没有 float！( &lt;a href=&#34;https://parg.co/bMX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMX&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《JavaScript 代码风格要素》&lt;/a&gt;：本文是 Eric Elliott 编写的 JavaScript 代码风格要素指南与建议，其借鉴了 1920 年的面向英文语言的 “The Elements of Style” 一文。本文介绍的关键要素包括：使用函数最为组合的原子单元并且保证函数的单一职责性、移除不需要的代码、使用更直观具有自解释性的变量命名、根据特性进行代码划分等等。( &lt;a href=&#34;https://parg.co/bMn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMn&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bMa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《函数式组件的函数式调用》&lt;/a&gt;：本文是来自 Missive 的工程师分享了他们在基于 React 进行应用开发时的技巧，即如果直接以函数调用而非组件的方式来使用函数式组件，可以避免对于 React.createElement 的调用，最终相同组件的渲染耗时可以节约近 45%。( &lt;a href=&#34;https://parg.co/bMa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bMa&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Chrome Canary(M60+)中的 ES6 原生模块》&lt;/a&gt;：Chrome Canary 开始支持 ES6 原生模块，本文则是介绍了如何在 Chrome Canary 中使用 ES6 原生模块以及基本语法、如何利用 ES6 原生模块的新特性来发布代码、如何兼顾旧版本浏览器等内容。( &lt;a href=&#34;https://parg.co/btb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btb&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pigcan/blog/issues/4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《支付宝前端构建工具的发展和未来的选择》&lt;/a&gt;：本文介绍了支付宝前端构建工具的发展史，从 spm 到 ant tool，对于工具的中心化与去中心化进行了反复的考量。然后介绍了对于未来前端构建工具的选择，包括要放弃特定业务脚手架针对通用型构建配置进一步修改或者封装的这种方式、抹杀 webpack.config.js 这种形式、实现语义配置等。( &lt;a href=&#34;https://github.com/pigcan/blog/issues/4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/pigcan/blog/issues/4&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/loadimpact/k6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《k6》&lt;/a&gt;：k6 是基于 Go 与 JavaScript 开发的现代压测工具，它提供了非常清晰简单的 JavaScript 接口；同时它基于 Go 提供了分布式的部署方案，支持云端部署与 REST 接口控制。( &lt;a href=&#34;https://github.com/loadimpact/k6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/loadimpact/k6&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/oxalorg/sakura&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《sakura》&lt;/a&gt;：Sakura 是轻量级的 CSS 预置样式库，我们只需要简单地引入 Sakura 样式文件到网页中就能将朴素的网页转化为较为美观的、可读性较好的页面。( &lt;a href=&#34;https://github.com/oxalorg/sakura&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/oxalorg/sakura&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.3-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.3-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.3-frontend/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-13-期webpack-cli-发布angular-5-可期待的新特性解密现代浏览器引擎构建之道&#34;&gt;前端每周清单第 13 期：Webpack CLI 发布、Angular 5 可期待的新特性、解密现代浏览器引擎构建之道&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Stack Overflow 发布技术趋势工具》&lt;/a&gt;：平均每天有约 8000 名开发者在 Stack Overflow 上提问工作学习中碰到的问题，Stack Overflow 对这些问题关联的技术进行了提取与分析，形成了 Stack Overflow Trends tool。Stack Overflow Trends tool 能够根据每个月提出的问题涉及到的技术，形成对于编程语言或者框架等技术相关内容的热度变化分析图。( &lt;a href=&#34;https://parg.co/btI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btI&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/blog/2360-git-2-13-has-been-released&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Git 2.13 发布》&lt;/a&gt;：近日开源项目 Git 发布其 2.13.0 版本，包含了来自 65 个贡献者提供的新特性与错误修复。新版本中提供了 SHA-1 碰撞检测、更方便地路径匹配、条件配置等功能。( &lt;a href=&#34;https://github.com/blog/2360-git-2-13-has-been-released&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/blog/2360-git-2-13-has-been-released&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/webpack/announcing-the-new-webpack-cli-75ce1d9b8663&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《新版 Webpack CLI 发布》&lt;/a&gt;：为了减少初始化 Webpack 项目的门槛，并且使得从 Webpack V1 迁移到 Webpack V2 更加地方便，Webpack 团队根据社区的反馈意见重制了新版的 Webpack 命令行工具。该命令行工具能够快速根据用户指定模板创建初始化项目，并且能够将 V1 版本的配置文件自动升级为 V2 版本的配置文件。( &lt;a href=&#34;https://parg.co/bV0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bV0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/TypeScript-React-Starter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《TypeScript React Starter 发布》&lt;/a&gt;：为了方便初学者使用 TypeScript 开发 React 应用，近日 Microsoft 官方仓库发布了 TypeScript React Starter。其能够帮助开发者快速创建基于 React 与 TypeScript 的前端项目、使用 TSLint 进行代码检测、使用 Jest 与 Enzyme 进行代码测试并且使用 Redux 进行状态管理。( &lt;a href=&#34;https://github.com/Microsoft/TypeScript-React-Starter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/Microsoft/TypeScript-React-Starter&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bte&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《接口的权限认证技术纵览》&lt;/a&gt;：本文以表格的方式详细列举了常见的接口权限认证技术的描述、适用场景、数据存储以及和服务端交互方式等内容。本文涉及到的常用权限认证技术包括：HTTP Basic 认证、无状态 Session Cookie、JWT、有状态 Session Cookie、随机令牌、请求签名、OAuth 等。( &lt;a href=&#34;https://parg.co/bte&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bte&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《在案例分析中学习 CSS Animation 与 Web Animation API》&lt;/a&gt;：本文由作者实现的某个&lt;a href=&#34;https://bitsofco.de/how-i-animated-the-bitsofcode-logo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Logo 动画入手&lt;/a&gt;，首先介绍了如何利用 Web Animations API 创建简单的 KeyFrame 动画，包括创建动画对象以及将其应用到具体的元素中；接下来作者介绍了该动画的 CSS 实现版本，还对比分析了二者在性能上的差异。( &lt;a href=&#34;https://parg.co/btn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btn&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bVv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《拥抱 React Router 4，改变旧的思维习惯》&lt;/a&gt;：在今年的 React 大会上，Michael Jackson 以及 Ryan Florence 发布了所谓“Learn Once，Route Anywhere”的演讲。同时也代表了 React Router 4 中的核心思想：路由即声明式组件；本文则介绍了 React Router V3 到 React Router V4 的变化。( &lt;a href=&#34;https://parg.co/bVv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bVv&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bV9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《使用现代方法端到端测试 Vue.js 应用》&lt;/a&gt;：端到端测试是 Web 测试中的重要组成部分，也是应用开发流程中不可或缺的部分；本文则介绍了如何使用 TestCafe 对 Vue.js 应用进行端到端测试。( &lt;a href=&#34;https://parg.co/bV9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bV9&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bVa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《简短的 WebAssembly 卡通指南》&lt;/a&gt;：现在有很多关于 WebAssembly 与 JavaScript 生态圈的讨论，人们往往关注于 WebAssembly 带来的巨大的性能提升以及它会如何颠覆现代 Web 开发。不过很多的介绍中并没有详细阐述隐藏在速度提升之后的具体细节，本文则是从整个 JavaScript 的演化史来介绍 WebAssembly 巨大性能提升的原因。( &lt;a href=&#34;https://parg.co/bVa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bVa&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《高性能动态 CSS 样式》&lt;/a&gt;：本文是对 &lt;a href=&#34;http://cssinjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JSS&lt;/a&gt; 新近提供的&lt;a href=&#34;http://cssinjs.org/json-api?v=v7.1.1#function-values&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;函数式值的介绍&lt;/a&gt;，其与 React 内联样式以及其他 CSS 解决方案相比有数倍的性能提升。在 Web 开发中动态设置样式往往会触发页面的重渲染，而本文则是介绍了如何使用 CSSOM 的 API 来在元素渲染之前即完成样式的设置。( &lt;a href=&#34;https://parg.co/btW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btW&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bVL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《编写安全的 Node.js 代码》&lt;/a&gt;：本文是对于 Danny Grander 演讲的总结，他首先回顾了如何黑掉有漏洞的 Node.js 应用，同时也深度阐述了数个流行的 npm 包中存在的安全威胁；最后作者给出了修复这些漏洞以及在未来应用开发中保证 Node.js 代码安全性的建议。( &lt;a href=&#34;https://parg.co/bVL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bVL&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bV1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《如何保证 H5 页面高质量低成本快速生成？》&lt;/a&gt;：任何技术优化都依托于业务的发展，而 QQ 会员增值业务的重心转移到手 Q 移动端，同时由于每个页面都意味着 KPI 收入，任何可能导致页面功能不可用的发布行为都是不可接受的。那么如何保证 H5 页面高质量快速生成呢？( &lt;a href=&#34;https://parg.co/bV1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bV1&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bVy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Angular v5 中可期待的新特性》&lt;/a&gt;：在 Angular V4 发布之后，Angular 团队就开始致力于 Angular v5 的开发，本文则是介绍 Angular V5 中部分可期待的新特性。在 Angular V5 中团队致力于简化应用的编译流程，将 AOT 编译模式设置为默认模式；同时会添加编译时的自动监控辅助命令，并且为模板添加类型检测的功能；同时 V5 版本会进一步优化错误提示，并且使得未来的升级更加地平滑。( &lt;a href=&#34;https://parg.co/bVy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bVy&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《React 新引擎 React Fiber 究竟要解决什么问题？》&lt;/a&gt;：Facebook 正在以流行的 JavaScript 框架 React 为基础开发一个全新的架构。这个名为 React Fiber 的全新设计改变了检测变更的方法和时机，借此可改进浏览器端和其他渲染设备的响应速度。这一 全新架构 最初已于 2016 年 7 月公开发布，其中蕴含着过去多年来 Facebook 不断改进的工作成果。该架构可向后兼容，彻底重写了 React 的协调(Reconciliation)算法。该过程可用于确定出现变更的具体时间，并将变更传递给渲染器。( &lt;a href=&#34;https://parg.co/btw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btw&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《测试中 Fakes、Mocks 以及 Stubs 概念明晰》&lt;/a&gt;：在自动化测试中，我们经常会使用一些简化但是类似于生产环境下的对象复制品来进行测试，从而简化测试的复杂度、允许仅对测试目标而独立于其实际耦合模块进行测试。本文则是形象生动地介绍了常见的测试复制品(Test Doubles)中 Mocks、Fakes 以及 Stubs 的区别。( &lt;a href=&#34;https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/milipski/test-doubles---fakes-mocks-and-stubs&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/26799645&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《GUI 应用程序架构的十年变迁：MVC、MVP、MVVM、Unidirectional、Clean》&lt;/a&gt;：随着现代浏览器的日渐流行，Web 以及混合开发技术的发展，大前端的概念日渐成为某种共识；而无论 iOS、Android、Web 这样的端开发还是 React Native、Weex 这样的跨端开发，其术不同而道相似纵览这十年内的架构模式变迁，大概可以分为 MV* 与 Unidirectional 两大类，而 Clean Architecture 则是以严格的层次划分独辟蹊径。从笔者的认知来看，从 MVC 到 MVP 的变迁完成了对于 View 与 Model 的解耦合，改进了职责分配与可测试性。而从 MVP 到 MVVM，添加了 View 与 ViewModel 之间的数据绑定，使得 View 完全的无状态化。最后，整个从 MV* 到 Unidirectional 的变迁即是采用了消息队列式的数据流驱动的架构，并且以 Redux 为代表的方案将原本 &lt;code&gt;MV*&lt;/code&gt; 中碎片化的状态管理变为了统一的状态管理，保证了状态的有序性与可回溯性。( &lt;a href=&#34;https://zhuanlan.zhihu.com/p/26799645&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://zhuanlan.zhihu.com/p/26799645&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bVg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《 解密 Quantum：现代浏览器引擎的构建之道》&lt;/a&gt;：2016 年十月份 Mozilla 宣布了 Quantum 项目，基于 Rust 构建下一代浏览器引擎；而在上个月发布的 Firefox 53 中就包含了 Quantum 的部分代码。本文即是在介绍 Quantum 开发与演变的过程中同时解密其蕴含的现代浏览器引擎的基础框架与构建之道。( &lt;a href=&#34;https://parg.co/bVg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bVg&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hshoff/vx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《vx》&lt;/a&gt;：vx 是对基于 React 与 d3 实现的一系列底层可视化组件的汇总，它结合了 d3 来创建交互式可视化图表与 React 来进行应用更新的优势。( &lt;a href=&#34;https://github.com/hshoff/vx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hshoff/vx&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.iotacss.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《iotaCSS》&lt;/a&gt;：iotaCSS 是基于 SASS 的 OOCSS 框架，其具备了完全轻量可扩展的特性，并且提供了高性能的、可读性较好的以及完全响应式的接口配置。( &lt;a href=&#34;https://www.iotacss.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.iotacss.com/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/btg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《SVGito》&lt;/a&gt;：SVGito 是轻量级的 SVG 优化工具，特别是对于导出自 Sketch 的 SVG 图标具有较好的优化效果。SVGito 能够帮你自动完成那些手动地操作，有效减少 SVG 的复杂度与文件体积。( &lt;a href=&#34;https://parg.co/btg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/btg&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bVH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Britecharts》&lt;/a&gt;： Britecharts 是基于 D3.js v4 的客户端可复用图表库，它提供了简单而直观的图表组件以方便结合开发出复杂炫酷的可视化应用。( &lt;a href=&#34;https://parg.co/bVH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bVH&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/getinsomnia/insomnia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Insomnia》&lt;/a&gt;：Insomnia 是基于 Electron 构建的跨平台 REST 客户端，提供了友好美观的用户交互界面。( &lt;a href=&#34;https://github.com/getinsomnia/insomnia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/getinsomnia/insomnia&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>5.4-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.4-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/5/5.4-frontend/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-14-期vue-现状与展望编写现代-javascript-代码web-开发者安全自检列表&#34;&gt;前端每周清单第 14 期：Vue 现状与展望、编写现代 JavaScript 代码、Web 开发者安全自检列表&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://events.google.com/io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Google IO 2017 召开》&lt;/a&gt;：美国时间 5 月 17 日- 19 日，Google IO 2017 大会于美国加利福尼亚州山景城的海岸线圆形剧场召开；会议提及了 AI、Kotlin、Android 8.0、HOME、Assistant 等等很多值得关注的东西。会议上 Google 还宣布将 Kotlin 语言作为安卓开发的一级编程语言；Kotlin 由 JetBrains 公司开发，与 Java 完全互通，并具备诸多 Java 尚不支持的新特性。( &lt;a href=&#34;https://events.google.com/io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://events.google.com/io/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《微软 Build 2017 召开》&lt;/a&gt;：2017 年 5 月 10 日，微软 Build 2017 在美国西雅图如期举办。本次大会涉及人工智能、云计算、物联网、Office 365 以及开发工具等多个方面 。微软公布了 Windows 下一个重要更新 ——Windows 10 Fall Creators Update 的更多细节，并提出了“ Windows love all Developers ”、“ Windows is Your Home for Development ”等口号，在开发工具、发布渠道、多设备同步等方面做出了努力，旨在吸引各个平台的开发者。( &lt;a href=&#34;https://parg.co/bkH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkH&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《新版本 Create React App 特性概述》&lt;/a&gt;：不到一年前，React 官方发布了 Create React App 这个零配置的快速创建 React 应用的脚手架工具；而本文则介绍了近几个月来 Create React App 中加入的新特性。新版的 Create React App 中切换到了 Webpack 2，并且优化了运行时错误提示，同时还默认启用了 Progressive Web Apps 支持，并且引入了 Jest 20、动态导入等等一系列的新特性。( &lt;a href=&#34;https://parg.co/bkY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkY&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.polymer-project.org/blog/2017-05-15-time-for-two&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Polymer 2.0 发布》&lt;/a&gt;：近日 Polymer 发布其 2.0 版本，新版本充分利用了原生 Web 平台的特性，提升了互操作性，并且提供了平滑的迁移方式。Polymer 2.0 中最大的特性之一就是支持基于 ES6 类的语法，使得开发者能够获得更加贴近于原生开发的体验。( &lt;a href=&#34;https://parg.co/bkq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkq&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《基于 JavaScript 的异步依赖加载》&lt;/a&gt;：在 Web 应用开发中我们经常会将一些首屏不需要的脚本或者样式文件以异步方式加载；而本文则是介绍了多种异步加载网页中依赖资源的方式，作者还将常用的方法整合为了 fetchInject 这个开源库，方便使用者快速进行脚本地异步加载。( &lt;a href=&#34;https://parg.co/bkG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkG&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《React Native 开发中的 80/20 定律》&lt;/a&gt;：在构建 React Native 应用时，我们常常发现某些 20% 的投入会带来 80% 的产出。本文则是作者在构建了自己首个 React Native 应用之后的感悟，作者发现引入静态类型、通用组件以及精益部署之后，整个想法的开发速度与项目质量得到了较大地提升。( &lt;a href=&#34;https://parg.co/bko&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bko&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《利用不可变数据编写安全清晰的代码》&lt;/a&gt;：不可变性是函数式编程语言的重要特性之一，它能够帮助我们编写更加安全与清晰可读的代码。本文作者则是以对于不可变数组、纯函数以及它们在实际并发情况下的操作入手介绍如何在编写代码中引入不可变性的思想。( &lt;a href=&#34;https://parg.co/bkd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkd&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bk0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《从零开始构建 WhatsApp 应用》&lt;/a&gt;：本系列文章深入浅出地介绍了如何利用 GraphQL 与 React Native 构建类似于 WhatsApp 的应用 Chatty。前几部分主要介绍了如何搭建基础环境、设计 GraphQL Schemas、进行数据查询与交互等内容，而本文则着重于介绍如何为 Chatty 添加权限验证特性。( &lt;a href=&#34;https://parg.co/bk0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bk0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《基于 Electron 构建 Github Desktop Beta》&lt;/a&gt;：Electron 是著名的利用 HTML、CSS、JavaScript 等 Web 技术构建桌面应用的辅助工具；本文则是介绍了四个仅有原生应用开发背景的工程师如何利用 Electron 逐步构建 Github Desktop Beta 的经验。( &lt;a href=&#34;https://parg.co/bkK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkK&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/scastiel/writing-modern-javascript-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《编写现代 JavaScript 代码》&lt;/a&gt;：JavaScript 被仅用来更新页面元素状态的日子一去不返，我们也需要编写更加现代的 JavaScript 代码。本文则是介绍了如何利用 Linter 来格式化代码、如何使用 ES2015+ 特性、如何使用函数式编程等建议来提升 JavaScript 的代码质量。( &lt;a href=&#34;https://dev.to/scastiel/writing-modern-javascript-code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://dev.to/scastiel/writing-modern-javascript-code&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b8w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Web 开发者安全自检列表》&lt;/a&gt;：Michael O’Brien 在本文中分享了一系列简单而又重要的 Web 开发者应该掌握的安全自检列表；本文涵盖了数据库、开发流程、权限验证、DoS、Web 流量、API、验证、云配置、基础设施等等多个方面，以提醒开发者在构建云端 Web 应用时注意避免某些显而易见的风险。( &lt;a href=&#34;https://parg.co/b8w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b8w&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《AMP 与 MIP 等移动页面加速框架的探索与实践》&lt;/a&gt;：随着移动互联网技术发展与 H5 生态的不断演化，在前端领域涌现出了一些通用的、开源的移动 H5 页面加速框架。其中以 Google 提出的 AMP(Accelerated Mobile Pages)开源框架与百度提出的 MIP(Mobile Instant Pages)开源框架为代表。本主题主要从技术的层面讨论: 移动 H5 页面速度体验方面遇到的挑战和问题，以及解决方法的探索过程；从架构设计层面，解析通用移动页面加速框架的设计思路和实现原理；从技术实现角度，剖析移动页面加速中的重难点问题与解决方法实践；从实际应用上，提供提升移动页面加速切实可行的操作方法。( &lt;a href=&#34;https://parg.co/bkU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkU&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《如何做好 H5 性能优化？》&lt;/a&gt;：智能手机的普及、移动互联网的发展、微信异军突起，都为 H5 的发展提供了良好的环境。当前，H5 已被广泛应用于营销、广告、传播之中。而针对 H5 效率慢、体验差的硬伤，如何做好性能测试并优化其性能就显得尤为重要。红豆 Live 是微博子公司有信旗下的一款语音直播产品，有各种 H5 页面。我们在做 H5 性能测试时进行了总结，本文将为大家详细介绍 H5 性能测试的关注点、测试工具及常见问题。( &lt;a href=&#34;https://parg.co/bkl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkl&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《如何快速地为 React 站点设置 A/B 测试》&lt;/a&gt;：A/B 测试，或者称为分割测试，是用来随机地为用户展示网页以测试不同产品设计的反馈效果。A/B 测试对提升真实应用的用户接受度非常有帮助，而本文则是介绍了如何利用 react-ab-test 这个工具快速地针对 React 站点设置 A/B 测试收集用户反馈信息。( &lt;a href=&#34;https://parg.co/bkE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkE&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《重构 Airbnb 前端架构》&lt;/a&gt;：本文是近日 Airbnb 开发团队在思索重构代码库中 JavaScript 部分的经验总结，主要着眼于产品驱动开发以及技术沉淀、从传统的 Rails 架构中积攒的经验以及新的技术栈的某些特性等方面。本文首先介绍了从 Rails 迁移过程中的一些经验，譬如将原本完全的服务端渲染界面所需要的数据切分为了 API 与 Non-API 两大类，并且使用 Hypernova 来进行 React 服务端渲染。然后介绍了如何在应用前端通过引入懒加载与异步加载等方式提升前端性能与用户体验。( &lt;a href=&#34;https://parg.co/bkA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkA&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/news/2017/05/JavaScript-become-language&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《最终，JavaScript 成为了一流语言》&lt;/a&gt;：2003 年，保罗·格雷厄姆(Paul Graham)在文中提到，他的公司决定使用 Lisp(一门编程语言)，并且指出自己公司相比竞争对手的优势在于 Lisp。如果 Lisp 像法语，那么现如今的 JavaScript 就像英语一般。尽管二者的语法不一致，但英语是世界上最广泛使用的语言，JavaScript 是最广泛应用的计算语言。然而，JavaScript 仍未得到与其他语言同等的尊重。尽管它的使用率在创业公司和大型公司中持续增长，但若非必要，人们不会认为它是一门有用的语言。大公司的高级工程师声称它不是一门“真正的”编程语言，许多人并不知道除了操作像素外它还能被用于何处。。( &lt;a href=&#34;https://parg.co/bkb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkb&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《如何看待 snabbdom 的作者开发的前端框架 Turbine 抛弃了虚拟 DOM？》&lt;/a&gt;：近日 snabbdom 的作者写了个 FRP 的前端框架，该框架不仅不用虚拟 DOM (以及 snabbdom)，还称当前的大多数 FRP 以及基于观察者模式的框架在虚拟 DOM 的使用上存在问题；此情况引引发了很多人参与讨论，阅读这些讨论还是有助于提升对于虚拟 DOM 以及单页面应用数据流的理解。( &lt;a href=&#34;https://parg.co/bkc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkc&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b8D&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《案例分析：为何我们不使用框架来开发应用？》&lt;/a&gt;：Nick Gauthier 在本文中阐述了他们在，构建分布式团队使用的视频会议工具 MeetSpace 时候，的技术选型上的考虑；在目前大家习惯于基于某个框架去构建 Web 应用的背景下是个有趣的阅读文章。( &lt;a href=&#34;https://parg.co/b8D&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b8D&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bk6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《理解 WebAssembly 的文件格式》&lt;/a&gt;：为了保证 WebAssembly 能够被人们阅读与理解，需要提供对于 wasm 二进制格式的文本表示。该特性着眼于能够在文本编辑器、浏览器开发者工具等开发工具中浏览 WebAssembly 文件，而本文则介绍了这种文件格式的规范与工作原理，以及底层的字节码与上层的 JavaScript 对象之间的关联关系。( &lt;a href=&#34;https://parg.co/bk6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bk6&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b8n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Mavo》&lt;/a&gt;：Mavo 是纯粹的基于 HTML 标记的用来创建富客户端 Web 应用的框架，它允许开发者在没有服务端或者 JavaScript 脚本的情况下快速创建动态应用。( &lt;a href=&#34;https://parg.co/b8n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b8n&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bkm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Sharp》&lt;/a&gt;：高性能的 Node.js 图片处理模块，能够提供面向 JPEG、PNG、WebP 以及 TIFF 等多种格式的图片，的尺寸重置、旋转等等常见的操作。( &lt;a href=&#34;https://parg.co/bkm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkm&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pkamenarsky/leerraum.js/blob/master/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《leerraum.js》&lt;/a&gt;：leerraum.js 是基于 typeset 的 PDF 排版与布局辅助工具，其目标在于简化 PDF 中可视化对象的定位与操作。( &lt;a href=&#34;https://parg.co/bkS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bkS&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/diegomura/react-pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《react-pdf》&lt;/a&gt;：在浏览器、移动端与服务端皆可适用的基于 React 语法的 PDF 文件创建工具。( &lt;a href=&#34;https://github.com/diegomura/react-pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/diegomura/react-pdf&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
