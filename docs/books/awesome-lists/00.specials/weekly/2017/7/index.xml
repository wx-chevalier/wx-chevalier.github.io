<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>7 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/</link><atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/index.xml" rel="self" type="application/rss+xml"/><description>7</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>7</title><link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/</link></image><item><title>7.1-Frontend</title><link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.1-frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.1-frontend/</guid><description>&lt;h1 id="前端每周清单第-20-期react-组件解耦之道基于-headless-chrome-的自动化测试angular-24-是否为时已晚">前端每周清单第 20 期：React 组件解耦之道；基于 Headless Chrome 的自动化测试；Angular 2/4 是否为时已晚？&lt;/h1>
&lt;p>&lt;code>前端&lt;/code> &lt;code>前端每周清单&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://nodejs.org/en/blog/release/v8.1.3/" target="_blank" rel="noopener">Node v8.1.3 发布&lt;/a>：近日发布的 Node v8.1.3 版本包含了一系列的错误修复与文档内容提升。( &lt;a href="https://nodejs.org/en/blog/release/v8.1.3/" target="_blank" rel="noopener">https://nodejs.org/en/blog/release/v8.1.3/&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bem" target="_blank" rel="noopener">TypeScript 2.4 发布&lt;/a>：TypeScript 是提供了静态类型和很多先进特性的 JavaScript 语言超集；而在最新发布的 2.4 版本中，新增了动态 import 语法、字符串枚举类型等特性，并且提高了泛型推导等功能。( &lt;a href="https://parg.co/bem" target="_blank" rel="noopener">https://parg.co/bem&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bXx" target="_blank" rel="noopener">Preact CLI 1.3.0 发布&lt;/a>：Preact CLI 是快速创建 Preact 应用的工具，在近日发布的 Preact CLI 1.3.0 版本中，开发者可以自定义 Webpack 配置文件与 .babelrc 配置文件。该版本还转向了使用 Webpack 进行预渲染，同时还修复了之前版本遗留的一系列错误；最后该版本还引入了完整的测试用例以提高整个代码的鲁棒性。( &lt;a href="https://parg.co/bXx" target="_blank" rel="noopener">https://parg.co/bXx&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bXT" target="_blank" rel="noopener">MDN 被 Mozilla 重造，将更关注 Web 文档&lt;/a>：MDN 的权威性以及文档的高质量一直广受 Web 开发人员的认可，开发人员在搜索 HTML 和 JavaScript 的文档时，通常会发现 MDN 的点击率很高。基于此，Mozilla 决定“押宝”在提升 Web 文档体验，正式宣布将使 MDN 的工作重心侧重于 Web 文档。( &lt;a href="https://parg.co/bXT" target="_blank" rel="noopener">https://parg.co/bXT&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bX7" target="_blank" rel="noopener">Twitter Lite PWA 显著提升用户活跃度并且降低了数据流量&lt;/a>：Twitter 是主要的社交网络平台之一，其 80% 的用户访问来源于移动端。为了提高移动端网页版体验效果，Twitter 整合了现代 Web 与原生特性的优点，开发了 Twitter Lite Progressive Web App，并且在四月份正式面向所有用户开放。而近日统计数据显示新版本网页带来了 65% 的用户停留时长提升、75% 的用户发文提升与 20% 的回退率降低。( &lt;a href="https://parg.co/bX7" target="_blank" rel="noopener">https://parg.co/bX7&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beo" target="_blank" rel="noopener">基于 Headless Chrome 的自动化测试&lt;/a>：本文介绍了如何在 Headless Chrome 环境中使用 Karma 作为测试驱动运行基于 Mocha 与 Chai 的自动化测试用例。Headless Chrome 允许我们在无界面环境下，使用特性完备的 Chrome 来执行 JavaScript 脚本并且渲染网页。本文首先介绍了使用 karma-chrome-launcher 来搭建本地启动 Chrome 环境，然后介绍了使用 Mocha 与 Chai 来编写基础测试用例，最后还讨论了如何自定义 Headless Chrome 启动器并且集成到 Travis CI 环境下。( &lt;a href="https://parg.co/beo" target="_blank" rel="noopener">https://parg.co/beo&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beA" target="_blank" rel="noopener">Angular 2+ 项目实战系列&lt;/a>：本系列文章包含了八个不同的章节，从零开始介绍如何利用 MongoDB、Express、Angular 2+ 以及 Node.js(MEAN Stack)来构建某个真实的应用项目。第一部分着眼于进行基础环境的搭建，包括搭建 Angular 应用开发环境、本地搭建 MongoDB、在 Auth0 申请账户与开发者密钥、搭建 Node.js 服务器并且为 Angular 应用添加基础的组件等等。第二部分着眼于添加基础的权限验证功能，并且构建数据模型等。( &lt;a href="https://parg.co/beA" target="_blank" rel="noopener">https://parg.co/beA&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bXB" target="_blank" rel="noopener">利用树莓派、Node 与 React 打造智能家居&lt;/a>：作者自小就喜欢倒腾电路与计算机，而本文则简要记述了作者如何利用树莓派来将自己的电子家居变得智能可控。作者主要是由了 React Native 来开发客户端应用，并且通过 WebSocket 来与 NodeJS 后端进行数据通信，并且使用 &lt;code>pi-blaster&lt;/code> 与 &lt;code>wiringPi&lt;/code> 等库来保证 NodeJS 后端控制树莓派并且获取实时数据。另一方面，作者利用树莓派作为中控枢纽，分别将其连接到不同的控制器中，作者在本文中还给出了详细的电路图设计，全部的代码参考&lt;a href="https://github.com/deepsyx/home-automation" target="_blank" rel="noopener">这里&lt;/a>。( &lt;a href="https://parg.co/bXB" target="_blank" rel="noopener">https://parg.co/bXB&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ber" target="_blank" rel="noopener">VueConf 观后感&lt;/a>：首届官方举办的 Vue.js 大会刚刚落幕，本文即是作者对于自己参会之后的感想进行的简要阐述。作者首先介绍了自己参与的数个 WorkShop 与演讲，从 Evan You 对于 Vue.js 发展历史与现状的介绍，到基于 Vuex 的状态管理、服务端渲染、代码分割等多个具体的技术实现。本文是非常不错的对于 VueConf 的回顾，如果没有参会或者尚未了解过议程的同学可以一看，并且选择自己感兴趣的议题查看对应的胶片与演讲视频。( &lt;a href="https://parg.co/ber" target="_blank" rel="noopener">https://parg.co/ber&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beE" target="_blank" rel="noopener">Webpack 中的作用域提升简介&lt;/a>：近日发布的 Webpack 3 中引入了所谓的 Scope Hoisting 新特性，从社区的反馈来看该特性已经在很多项目中成功地帮助开发者减少包体大小，提高首屏加载效率；本文则是简要地介绍了 Webpack 3 中作用域提升的基础原理。本文假设你对于 JavaScript 中闭包与模块语法有所了解，首先介绍了在老版本 Webpack 中采用的作用域分割机制及其存在的额外的性能损耗，然后对比呈现了在引入作用域提升机制之后，打包而成的文件的形式，与其带来的性能提升原理。( &lt;a href="https://parg.co/beE" target="_blank" rel="noopener">https://parg.co/beE&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bXz" target="_blank" rel="noopener"> React 组件解耦之道&lt;/a>：React 的组件非常地灵活可扩展，不过随着业务复杂度的增加和许多外部工具库的引入，组件往往也会显得浮肿；作者在本文中阐述了常见的几种，遵循单一职责原则的，组件分割与解耦的方法。本文首先介绍了基础的分割 render 函数的使用范式，然后讨论了将元素以属性方式传入，最后还介绍了部分高阶组件相关的用法与知识；更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。( &lt;a href="https://parg.co/bXz" target="_blank" rel="noopener">https://parg.co/bXz&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beb" target="_blank" rel="noopener">为什么我们选择 TypeScript&lt;/a>：本文是 Reddit 工程师 Niranjan Ramadas 记述在前端技术选型时选用 TypeScript 的考虑过程。作者认为任何语言都有其优缺点，不过合适的语言应该具备如下特点：强类型、完备的工具链支持、能够用于生产环境等。作者还特地比较了 TypeScript 与 Flow，TypeScript 是能够编译到 JavaScript 的超集语言，而 Flow 则是提供了一系列额外的注解来实现类型系统。Flow 能够保证较好的类型覆盖，但是其对于多态性的支持并不是很好，并且 TypeScript 的社区也相对活跃。( &lt;a href="https://parg.co/beb" target="_blank" rel="noopener">https://parg.co/beb&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bed" target="_blank" rel="noopener">基于 Prometheus 的 Node.js 应用性能监控&lt;/a>：本文致力于帮助已有生产环境下 Node.js 应用的开发者，了解如何利用开源应用 Prometheus 搭建监测平台；Prometheus 为我们提供了强大的数据压缩与针对时序数据的快速查询功能。本文首先讨论了 Node.js 应用监控的设计理念与指标，然后对比了当前存在的几种监控解决方案的优缺点。最后介绍了如何在项目中引入 Prometheus，并且集成 Kubernetes、Grafana 等第三方插件；更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。( &lt;a href="https://parg.co/bed" target="_blank" rel="noopener">https://parg.co/bed&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beC" target="_blank" rel="noopener">我认为的 React Native 开发最佳实践分享&lt;/a>：React Native 问世已愈两年，也为越来越多的团队用来开发性能表现不输原生的应用；尽管 React Native 还不算完全成熟(未发布 1.0 版本)，但是围绕它已经产生了一个庞大的社区和许多的开发实践。作者编写本系列文章即是希望与大家共享个人在多年的 React Native 开发中总结而来最佳实践，第一篇文章首先介绍了 Redux 的概念与引入的积极意义，然后讨论了如何编写可复用的组件以及如何尽可能地提取公共代码与变量等内容；更多 React Native 相关资料参考 &lt;a href="https://parg.co/bV4" target="_blank" rel="noopener"> https://parg.co/bV4 &lt;/a>。( &lt;a href="https://parg.co/beC" target="_blank" rel="noopener">https://parg.co/beC&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bX2" target="_blank" rel="noopener">选择与支持 Vue.js 的理由&lt;/a>：本文是来自 Monterail 的前端工程师、Vue.js 资深开发者 Damian Dulisz 分享他选择与支持 Vue.js 的理由。本文不仅仅从开发者的角度阐述了 Vue.js 对其的吸引力，还从产品经理的视角、Vue.js 社区发展的角度阐述了 Vue.js 的巨大潜力。本文是一篇不错的介绍 Vue.js 最新变化与进展，并且对常见的 Vue.js 的部分误解进行了阐述的文章；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。( &lt;a href="https://parg.co/bX2" target="_blank" rel="noopener">https://parg.co/bX2&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bXD" target="_blank" rel="noopener">TC39，ECMAScript 与 JavaScript 的未来&lt;/a>：本文是 Nicolás Bevacqua 在腾讯前端大会上发表的同名演讲的总结，介绍了 TC39 与 ECMAScript 的含义，概述了 ECMAScript 中提案的步骤以及部分代表性提案，同时还畅谈了 JavaScript 的未来发展方向。作者介绍了 Stage 0、Stage 1、Stage 2、Stage 3 这四个提案处理进度的具体含义与要求，并且列举了 Array#includes、Named Captures 等具体的例子来阐述 JavaScript 不断衍化的语法特性；作者还介绍了未来社区会持续关注的代码转译与适配、代码质量保证、代码打包与发布等多个领域。( &lt;a href="https://parg.co/bXD" target="_blank" rel="noopener">https://parg.co/bXD&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/beH" target="_blank" rel="noopener">JavaScript 中的函数式编程就是反模式(*本文仅代表原作者个人意见)&lt;/a>：作者在本文中对比讨论了 JavaScript 与 Clojure，并且介绍了 ClojureScript 的基础用法与优势所在。作者首先讨论了他认为的函数式脚本语言应该包含的特性，包括充分的 API、内建的不可变数据结构等；然后阐述了 lodash、fp、Rambda 这样的单个库存在的不足，譬如 ImmutableJS 虽然能较好地解决部分问题，但是却会割裂使用者的开发体验。最后笔者介绍了 ClojureScripe 的特性与优点，包括能够在编辑器中单行运行、内建的大量转化函数、较好地性能与代码可读性保证等等。( &lt;a href="https://parg.co/beH" target="_blank" rel="noopener">https://parg.co/beH&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/siddharthkp/bundlesize" target="_blank" rel="noopener">bundlesize&lt;/a>：bundlesize 是轻量级的用于检测项目打包生成包体体积的工具，可以方便地集成于 Travis CI、Circle CI 等持续集成工具中，以确保生成的库或者应用体积不会超过预期；目前 React、styled-components、emotion 等诸多流行库都已采用该工具。( &lt;a href="https://github.com/siddharthkp/bundlesize" target="_blank" rel="noopener">https://github.com/siddharthkp/bundlesize&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/akveo/kittenTricks" target="_blank" rel="noopener">kittenTricks&lt;/a>：kittenTricks 是超过 40 屏的 React Native 应用开发中常见的精美界面集锦，包括应用加载、权限验证、社交资料、资讯浏览、聊天通信等多个领域。kittenTricks 还提供了内置的应用主题热加载，并且其本身的代码库也是相当干净整洁，值得一读。( &lt;a href="https://github.com/akveo/kittenTricks" target="_blank" rel="noopener">https://github.com/akveo/kittenTricks&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/tsherif/picogl.js" target="_blank" rel="noopener">PicoGL.js&lt;/a>：PicoGL.js 是基于 WebGL 2 的轻量级辅助库，适用于任何了解 WebGL 2 渲染管道流并且打算使用它的开发者。PicoGL.js 提高了更为方便地流式接口，典型的使用场景即是创建 Vertex Buffers、Vertex Arrays、FrameBuffers 等。( &lt;a href="https://github.com/tsherif/picogl.js" target="_blank" rel="noopener">https://github.com/tsherif/picogl.js&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/spatie/vue-table-component" target="_blank" rel="noopener">vue-table-component&lt;/a>: vue-table-component 提供了轻量级、易于使用的 Vue.js 组件；该组件的一大特性在于其能够自动缓存用户的筛选与排序结果，即使用户刷新了页面该数据仍然可以保留使用。( &lt;a href="https://github.com/spatie/vue-table-component" target="_blank" rel="noopener">https://github.com/spatie/vue-table-component&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/toplan/react-hold" target="_blank" rel="noopener">react-hold&lt;/a>: react-hold 能够自动地为纯组件创建加载提示，它能够自动地根据纯组件不同的形状与类型创建不同的占位提示符。( &lt;a href="https://github.com/toplan/react-hold" target="_blank" rel="noopener">https://github.com/toplan/react-hold&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明“前端之巅投稿”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>7.2-Frontend</title><link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.2-frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.2-frontend/</guid><description>&lt;h1 id="前端每周清单第-21-期js-项目开发样式指南基于-vue-的分角色权限验证深入-reactjs-内部原理">前端每周清单第 21 期：JS 项目开发样式指南；基于 Vue 的分角色权限验证；深入 React.js 内部原理&lt;/h1>
&lt;p>&lt;code>前端&lt;/code> &lt;code>前端每周清单&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIp" target="_blank" rel="noopener">Let&amp;rsquo;s Encrypt 宣布将在 2018 年一月提供通配符证书服务&lt;/a>：自从 2015 年上线以来，Let&amp;rsquo;s Encrypt 已经服务于数百万的在线站点，并且大幅度提升了整个 Web 的加密流量占比。近日 Let&amp;rsquo;s Encrypt 宣布将会在来年一月份提供通配符证书服务；某个通配符证书能够应用于某个根站点下的任意数目的子站点，从而帮助网站管理者更加方便地使用单证书来为多个子站点添加 HTTPS 部署支持。( &lt;a href="https://parg.co/bIp" target="_blank" rel="noopener">https://parg.co/bIp&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIZ" target="_blank" rel="noopener">百度 Web 生态构建：发布基于 Vue 的 PWA 解决方案 LAVAS；将全面支持 Web AR &lt;/a>：在 Baidu Create 2017 Web 生态分论坛上，百度搜索正式对外发布基于 Vue 的 PWA 解决方案 LAVAS，同时宣布将全面支持 Web AR，此外，百度还对 MIP 的架构与原理、HTTPS 等技术进行了深度解析。( &lt;a href="https://parg.co/bIZ" target="_blank" rel="noopener">https://parg.co/bIZ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bI8" target="_blank" rel="noopener">Webpack import 即将支持异步导入 CSS&lt;/a>：一个月前 Tobias Koppers 撰文讨论了 Webpack 对于 CSS 处理的考虑，计划将 CSS 代码与 JS 同等考虑；即开发者可以利用代码分割插件构建的动态代码块来异步加载 CSS 代码。而本文则是详细讨论了该方案以及对于未来代码分割、首屏加载可能造成的影响，并且提出了目前状态下基于 React Universal Component 与 Webpack Flush Chunks 可以实现的异步 CSS 加载方案。( &lt;a href="https://parg.co/bI8" target="_blank" rel="noopener">https://parg.co/bI8&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIk" target="_blank" rel="noopener">MobX 3.2.0 版本发布&lt;/a>：MobX 内置了一些全局状态来辅助追踪与调度 Observable 或者 Reaction，在近日发布的 3.2.0 版本中，MobX 能够自动监测应用内是否存在多个 MobX 实例，并且给出响应的告警；更多 MobX 相关资料参考 &lt;a href="https://parg.co/bVC" target="_blank" rel="noopener"> https://parg.co/bVC &lt;/a>。( &lt;a href="https://parg.co/bIk" target="_blank" rel="noopener">https://parg.co/bIk&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bev" target="_blank" rel="noopener">Styled-Components 实战&lt;/a>：Styled-Components 是由 Max Stoiber 与 Glen Maddern 创建的新的 CSS-in-JS 工具库，能够帮你组织 React 或者 React Native 项目中的样式声明。本文则着眼于介绍 Styled-Components 的设计理念与基本用法，首先介绍了 Styled-Components 的设计目标，然后介绍了如何使用 Styled-Components 来创建可复用的组件或者创建全局样式声明。( &lt;a href="https://parg.co/bev" target="_blank" rel="noopener">https://parg.co/bev&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bej" target="_blank" rel="noopener">React Redux 概念与工作流清单&lt;/a>：本文包含了一张关于 Redux 概念与工作流的清单图解以及较为详细地渐进式 Redux 基础概念介绍。本文首先概述了项目开发中使用 Redux 的意义以及 Redux 相关的技术栈，然后介绍了 Reudx 中 Store 的含义与如何与 Immutable 协同使用；接下来本文介绍了 React Redux 应用中组件的层次划分，如何定义使用 Action、ActionCreator、Reducer 等等；更多 Redux 相关资料参考&lt;a href="https://parg.co/bVQ" target="_blank" rel="noopener"> https://parg.co/bVQ &lt;/a>。( &lt;a href="https://parg.co/bej" target="_blank" rel="noopener">https://parg.co/bej&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIs" target="_blank" rel="noopener">基于 Vue.js 2 的分角色权限验证&lt;/a>：本文作者因为 Vue.js 平滑的学习曲线与易于理解的官方文档而倾向于使用 Vue.js 进行前端开发工作，本文即是作者介绍如何利用 Vue.js 2 来为项目添加基于角色的权限控制功能。作者在本文中首先介绍了基于角色的权限控制的概念与设计，然后讨论了如何使用 vue-cli 来构建基础项目架构并且按特征划定目录层次，最后介绍了关键部分的代码实现以及如何使用 Vuex 来管理应用状态；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。( &lt;a href="https://parg.co/bIs" target="_blank" rel="noopener">https://parg.co/bIs&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIV" target="_blank" rel="noopener">试用新的 Angular HTTP Client&lt;/a>：在 Angular 4.3.0-rc.0 版本在，HTTP Client API 得到了极大的改造与提升，本文即是介绍新版本的 Angular HTTP Client 的用法。在新版本的 HTTP Client 中，其默认假设以 JSON 格式进行返回值解析，并且引入了灵活的 Interceptor 以动态操作请求头或者响应体；同时新版本的 HTTP Client API 为上传与下载这些耗时操作提供了实时进度反馈回调，以方便开发者进行调试或者反馈给用户。( &lt;a href="https://parg.co/bIV" target="_blank" rel="noopener">https://parg.co/bIV&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIJ" target="_blank" rel="noopener">基于 Vue.js 与 Laravel 构建实时仪表盘&lt;/a>：本文是来自 Spatie 的工程师，介绍基于 Laravel 与 Vue.js 构建，实时的队伍与事件信息展示面板的实践总结。本文首先介绍了历史项目的不足以及目前项目的设计考量，然后讨论了前端网格布局的解决方案。接下来作者分别介绍了服务端基于 Laravel 与客户端基于 Vue.js 的关键代码的实现；更多 Vue 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。( &lt;a href="https://parg.co/bIJ" target="_blank" rel="noopener">https://parg.co/bIJ&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/shieldfy/API-Security-Checklist" target="_blank" rel="noopener">接口安全自检清单&lt;/a>：本文涵盖了项目接口在设计、测试与发布阶段应该注意的安全事项。本清单首先阐述了应该使用标准的权限控制方式 JWT 或者 OAuth 来替代基础的 Basic Auth，然后分别讨论了 JWT 与 OAuth 的设计要点。接下来本清单还列举了对于接入过滤与防 DDoS 攻击、使用合适的 HTTP 方法并且对用户输入进行有效校验、避免关键资源外泄、设置合理的响应头等等内容。( &lt;a href="https://github.com/shieldfy/API-Security-Checklist" target="_blank" rel="noopener">https://github.com/shieldfy/API-Security-Checklist&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wearehive/project-guidelines" target="_blank" rel="noopener">JavaScript 项目开发样式指南&lt;/a>：开启新的项目就好像在绿地上肆意撒欢，此时的开发者拥有极大的自由；不过如果缺乏良好的基石，未来的项目维护可能会成为你的梦魇。本文即搜集了来自 &lt;a href="http://wearehive.co.uk/" target="_blank" rel="noopener">Hive&lt;/a> 研发团队的 JavaScript 项目开发指南，涵盖了 Git、文档规范、环境变量控制、依赖管理、测试、文件结构与命名、代码样式、日志、API 设计等多个方面；更多 JavaScript 工程实践资料参考&lt;a href="https://parg.co/bIO" target="_blank" rel="noopener"> https://parg.co/bIO &lt;/a>。( &lt;a href="https://github.com/wearehive/project-guidelines" target="_blank" rel="noopener">https://github.com/wearehive/project-guidelines&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIi" target="_blank" rel="noopener">大型应用开发中使用 Redux 的五个建议&lt;/a>：Redux 是非常优秀的应用状态管理工具，单向数据流结构允许开发者专注于业务逻辑的开发。本文作者从自身实践出发总结出了大型项目中 Redux 的使用建议，包括建立数据索引并且使用选择器来访问数据、将标准状态独立于可变的界面状态与用户编辑状态、在界面之间合理地共享数据、提取公共地 Reducer 函数以及如何较好地连接 React 组件与 Redux 状态树等等；更多 Redux 相关资料参考 &lt;a href="https://parg.co/bVQ" target="_blank" rel="noopener"> https://parg.co/bVQ &lt;/a>。( &lt;a href="https://parg.co/bIi" target="_blank" rel="noopener">https://parg.co/bIi&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIL" target="_blank" rel="noopener">前端 JavaScript 面试问题总结&lt;/a>：本文作者发现目前并没有太多令人满意的前端 JavaScript 面试问题列表，因此他基于自己的面试经历与实践总结出了本文。本文主要包含以下部分，首先是基础概念的认知，譬如对于闭包、EventLoop、REST 等概念的介绍；然后是对于编码能力的考量，譬如对于常见的数据结构与算法的实现、代码调试能力与错误定位的评测等等；最后是对于整体系统设计能力的考量，譬如如何设计全栈的 Twitter 实现架构等等。( &lt;a href="https://parg.co/bIL" target="_blank" rel="noopener">https://parg.co/bIL&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/be2" target="_blank" rel="noopener">深入 React.js 内部原理&lt;/a>：本系列文章详细介绍了 React.js 内部工作原理，作者通过调试整个代码库，分析代码执行调用顺序将整个逻辑以流程图方式清晰地展示出来，并且详细介绍了内部实现中使用到的关键概念与方法。本系列文章会包含 Stack Reconciler 与 Fiber 两个部分，目前完成的 Stack Reconciler 部分分为十五个小节，包含了从渲染函数调用开始介绍 JSX 转化为 DOM 的流程、内部事务处理到组件挂载于与更新流程等等内容；更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。( &lt;a href="https://parg.co/be2" target="_blank" rel="noopener">https://parg.co/be2&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIQ" target="_blank" rel="noopener">利用 WebGL 释放 GPU 的计算潜力&lt;/a>：随着大数据时代的到来，计算能力日渐成为性能的关键瓶颈之一；而众所周知 GPU 相较于 CPU 有着更为强大的计算能力，本系列文章即是介绍如何利用 WebGL 实现 GPGPU(General Purpose Computing on Graphics Processing Units)高性能计算。本系列文章首先讨论了利用 WebGL 进行 GPGPU 计算的可行性，然后介绍了具体的实施步骤；主要步骤包括矩阵初始化、矩阵计算、结果回传、条件控制、不稳定性处理、样例实践等几个部分。( &lt;a href="https://parg.co/bIQ" target="_blank" rel="noopener">https://parg.co/bIQ&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIN" target="_blank" rel="noopener">Vue 直出内存泄露问题的追查实践&lt;/a>：近期，作者遇到了 Vue 直出内存泄露问题，并进行了追查。其项目背景是，作者在一次规模较大的运营活动中正好碰到了内存泄漏的问题，技术背景和业务背景分别如下：技术背景：node 直出项目，直出用到了 Vue 的直出方案；业务背景：一次 PV 最高达到 1400W 的运营活动 qps 的压力下，后期使得服务出现一定错误率。本文将回顾整个追查的实践过程。( &lt;a href="https://parg.co/bIN" target="_blank" rel="noopener">https://parg.co/bIN&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIC" target="_blank" rel="noopener">JavaScript 开发中常用的十大数据结构详解&lt;/a>：数据结构是软件开发的重要组成部分之一，也是求职面试中常见的主题之一；本文将回顾介绍 JavaScript 中常用的十大数据结构，并且给出详细的教程与在线实践链接。本文涉及到的数据结构包括链表、栈、队列、集合、映射、哈希表、二叉搜索树、Trie 树、二叉堆、图等；更多数据结构与算法相关资料参考 &lt;a href="https://parg.co/bIt" target="_blank" rel="noopener"> https://parg.co/bIt &lt;/a>。( &lt;a href="https://parg.co/bIC" target="_blank" rel="noopener">https://parg.co/bIC&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/vadimdemedes/ink" target="_blank" rel="noopener">Ink&lt;/a>：Ink 允许我们以类似于编写 React 组件的方式编写命令行交互界面，最大的区别在于 Ink 会将组件渲染为输出到标准控制台的字符串。笔者觉得阅读 Ink 的源代码也是不错地了解简化版的 React 内部运行机制的方式，可以了解基本的 JSX 转换、虚拟 DOM 渲染与比较、批次更新等内容。( &lt;a href="https://github.com/vadimdemedes/ink" target="_blank" rel="noopener">https://github.com/vadimdemedes/ink&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jeromedalbert/real-world-react" target="_blank" rel="noopener">real-world-react&lt;/a>：本仓库搜集了一系列基于 React 开发的真实环境下的开源应用代码库，能够帮助初学者从资深开发者的代码中逐步学习了解 React；应用涵盖了基于 Redux 的各种资讯类应用、常见的音乐播放器等等多个方面。( &lt;a href="https://github.com/jeromedalbert/real-world-react" target="_blank" rel="noopener">https://github.com/jeromedalbert/real-world-react&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/GianlucaGuarini/icaro" target="_blank" rel="noopener">icaro&lt;/a>：icaro 是轻量、高效地 JavaScript 对象观察者实现，能够自动监测 JavaScript 中对象的变化并且进行相应地譬如 DOM 更新等操作。icaro 使用了大量的 ES6 的特性，譬如 Proxies、WeakMaps、Maps 以及 Symbols，是非常不错的可以用来学习利用最新的语言特性实现 JavaScript 响应式框架的开源库。( &lt;a href="https://github.com/GianlucaGuarini/icaro" target="_blank" rel="noopener">https://github.com/GianlucaGuarini/icaro&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/icons8/titanic" target="_blank" rel="noopener">titanic&lt;/a>：titanic 为我们提供了一系列有趣的可变的 SVG 图标，这些图标能随着用户的点击或者其他操作做出相应地动画反馈。titanic 提供的动画图标包括了单选框、邮箱、笑脸等等。( &lt;a href="https://github.com/icons8/titanic" target="_blank" rel="noopener">https://github.com/icons8/titanic&lt;/a> )&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jaredpalmer/formik" target="_blank" rel="noopener">formik&lt;/a>：React 中的表单处理一直是痛点所在，而目前很多的表单处理库添加了太多的抽象，不仅不易于理解而且会造成许多额外的性能损耗。而 Formik 则提供了简便易用的高阶组件来帮你处理将 Props 转化为扁平的 React 状态、自动化字段验证并且进行错误提示、将扁平地 React 状态转化为接口可用的对象这三个任务。( &lt;a href="https://github.com/jaredpalmer/formik" target="_blank" rel="noopener">https://github.com/jaredpalmer/formik&lt;/a> )&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明“前端之巅投稿”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>7.3-Frontend</title><link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.3-frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.3-frontend/</guid><description>&lt;h1 id="前端每周清单第-22-期es8-正式发布react-与-graphql-开发指南和性能优化vuejs-240-发布以及使用-typescript-开发-vuejs-应用">前端每周清单第 22 期：ES8 正式发布、React 与 GraphQL 开发指南和性能优化，Vue.js 2.4.0 发布以及使用 TypeScript 开发 Vue.js 应用&lt;/h1>
&lt;p>&lt;code>前端&lt;/code> &lt;code>前端每周清单&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b10" target="_blank" rel="noopener">ECMAScript 2017(ES8)正式发布&lt;/a>：ECMAScript 2017 或 ES8 于 2017 年六月底由 TC39 正式发布，可以在&lt;a href="https://www.ecma-international.org/ecma-262/8.0/index.html" target="_blank" rel="noopener">这里&lt;/a>浏览完整的版本；ES8 中代表性的特征包括了 String padding、Object.values、Object.entries、Object.getOwnPropertyDescriptors、函数参数列表与调用中的尾部逗号、异步函数、共享内存与原子操作等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/vuejs/vue/releases/tag/v2.4.0" target="_blank" rel="noopener">Vue.js 2.4.0 发布&lt;/a>：Vue.js 2.4.0 版本提供了内置的服务端渲染与异步组件支持，从而保证了在服务端渲染中也能使用异步组件，而不再是局限于路由中使用。此外该版本还简化了包装组件的写法、提供了 v-on 等一系列新的指令或者 API 特性，并且修复了老版本中存在的错误；更多详细内容可参考原文，或者阅读 &lt;a href="https://parg.co/b17" target="_blank" rel="noopener"> Vue.js 2.4.0 中的 4 个重大变化&lt;/a>一文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bIw" target="_blank" rel="noopener">npm 5.2.0 内置 npx 包执行器&lt;/a>：近日发布的 npm 5.2.0 版本中内置了伴生命令：npx，类似于 npm 简化了项目开发中的依赖安装与管理，该工具致力于提升开发者使用包提供的命令行的体验。npx 允许我们使用本地安装的命令行工具而不需要再定义 npm run-script，并且允许我们仅执行一次脚本而不需要再将其实际安装到本地；同时 npx 还允许我们以不同的 node 版本来运行指定命令、允许我们交互式地开发 node 命令行工具以及便捷地安装来自于 gist 的脚本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1C" target="_blank" rel="noopener">Babylon.js 3.0 发布&lt;/a>：Babylon.js 是基于 HTML5 与 WebGL 的创建 3D 交互应用的开源框架，它提供了易用的 API 与开箱即用的性能优化。近日发布的 3.0 版本是 Babylon 重要的里程碑之一，该版本包含了大量的新特性与错误修复，支持 WebGL 2、WebVR 1.1、gITF 2.0、PBR 等多个特性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1a" target="_blank" rel="noopener">Node.js 发布重大安全更新&lt;/a>：近日 Node.js 发布重大安全更新，主要针对固定哈希表种子值(Constant HashTable Seeds)等多个 Bug。目前流行中几个版本的 Node.js(8.x，7.x，V6 LTS，V4 LTS)中都使用了固定的哈希表种子值，这有可能会导致 Node.js 应用受到基于哈希洪水的 DoS 攻击；暂时的修复方式是默认关闭 V8 的快照功能，导致依赖于 &lt;code>vm.runInNewContext&lt;/code> 的代码会有所性能损耗，不过未来会选择合适的方案重新实现该部分代码。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1n" target="_blank" rel="noopener">Progressive Web Apps 入门教程&lt;/a>：或许你已经对 PWA 有所耳闻，或者已经真实使用过某个 PWA 应用；本文并不着眼于详细介绍 PWA 的内部原理与工作机制，而是希望以简明扼要的语义引导读者构建 PWA 应用。本文依次介绍了如何测试自身应用的 PWA 评分、构建图标与说明、添加 Service Worker、发布到 Github Pages 等；更多 PWA 相关资料参考 &lt;a href="https://parg.co/bVh" target="_blank" rel="noopener"> https://parg.co/bVh&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/howtographql/howtographql" target="_blank" rel="noopener">GraphQL 全栈教程&lt;/a>：HowToGraphQL 是介绍 GraphQL 的全栈教程，由 Graphcool 以及很多其他优秀的贡献者协作而成。该教程首先是对于 GraphQL 设计理念、基础概念以及先进特性的介绍，然后介绍了在 React、Vue、Expo 等前端项目中如何使用 GraphQL，以及如何使用 Graphcool、JavaScript、Java 等语言快速搭建 GraphQL 服务端；更多 GraphQL 相关资料参考 &lt;a href="https://parg.co/b1e" target="_blank" rel="noopener"> https://parg.co/b1e &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1j" target="_blank" rel="noopener">Vue.js 项目中使用 TypeScript&lt;/a>：Vue.js 是优秀的渐进式前端框架，而 TypeScript 则可以为项目添加静态类型检测的特性，本文即是介绍如何在 Vue.js 项目中使用 TypeScript。本文以 Vue.js 中的单文件组件为例，首先讨论了 tsconfig.json 的基本配置以及如何引入 Webpack 并配置合适的 loader；然后介绍了 TypeScript 的基础用法，更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.nrwl.io/ngrx-patterns-and-techniques-f46126e2b1e5" target="_blank" rel="noopener">NgRx 的设计模式与技巧分享&lt;/a>：状态管理一直是构建前端应用过程中的难点之一，Angular 也为我们提供了多种不同的设计模式来进行状态管理；而本文即是介绍如何使用 NgRx 这个库进行状态管理。NgRx 是非常简单易用，没有太多限制条件的状态管理库；本文首先概述了 NgRx 的核心概念与设计原则，然后以实际的项目为例介绍了如何使用 NgRx 处理 Action 以及副作用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1i" target="_blank" rel="noopener">从零到一学习如何用 Babylon.js 创建跨平台的 WebVR 体验&lt;/a>：WebVR 允许我们跨平台地在多设备上发布应用与内容，而本文即介绍如何利用 Babylon.js 创建跨平台地 WebVR 应用。本文首先介绍了可供开发者使用的 VR 设备与扩展，然后介绍如何搭建基础的开发环境、如何开发 WebVR 的基本帧动画、如何响应用户交互并且添加第三方控制器等内容。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1X" target="_blank" rel="noopener">用强类型语言 GraphQL 增强 React&lt;/a>：GraphQL、React 这两项技术都来自 Facebook，它们共同成长。在本文中，Shane Stillwell 展示了 GraphQL 作为一种强类型的基于 JavaScript 的语言，如何帮助开发者与他们的数据建立联系并改善跨服务边界的封送处理。GraphQL 是可扩展的，并可与 REST 共存，可以在任意后端软件中实现；更多 GraphQL 相关资料参考 &lt;a href="https://parg.co/b1e" target="_blank" rel="noopener"> https://parg.co/b1e &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1v" target="_blank" rel="noopener">高性能 React 开发：3 个常用的辅助工具&lt;/a>：我们可以使用 React 开发高性能的应用，不过有时候一些小的错误却会导致严重的性能错误。缓慢的组件挂载、过深的组件树以及不必要的渲染都有可能会削弱应用用户体验。幸而现在有很多优秀的工具能够帮助我们应对这些性能问题，而作者在本文中即是详细地介绍了三个辅助工具及相关技术以提升应用性能；更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://gist.github.com/jareware/4738651" target="_blank" rel="noopener">你可能并不知道的 16 个 SCSS 特性&lt;/a>：作者自 2009 年以来一直使用 SCSS/SASS 来进行大部分的样式工作，而本文即是对于某些有用但是并不一定为人所知的 SCSS 特性进行介绍。本文介绍的特性包括了父选择器的灵活用法、控制流指令、默认函数参数、扩展操作符等等；更多 CSS/SCSS 相关资料参考&lt;a href="https://parg.co/baH" target="_blank" rel="noopener"> https://parg.co/baH&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b19" target="_blank" rel="noopener">大幅度减少 CSS 包体大小&lt;/a>：本文作者介绍了自己在构建某个在线售票的网站过程中，如何利用样式类名分割与作用域隔离来大幅度减少 CSS 打包文件体积的实践技巧。作者主要使用 CSS Modules，然后自定义了其样式类名生成规则来保证生成较短的样式类名并且使用作用域隔离来保证样式隔离。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1y" target="_blank" rel="noopener">扩展 Node.js 应用&lt;/a>：Node.js 设计的初衷之一即是保证其可扩展性，本文则详细介绍了开发者应该了解的可用于扩展 Node.js 应用的内建工具。本文首先介绍了复制、分解、分割等常用的设计思想，然后讨论了如何利用 Node.js 内置的 Cluster 模块来保证应用的可扩展性与如何提供零停机重启的特性。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1Q" target="_blank" rel="noopener">常见 Web 框架的内部技术纵览&lt;/a>：该系列文章从用户界面开发、用户体验设计以及内部技术纵览等多个角度讨论了现代 Web 框架的设计理念与思路；而本文着重于讨论不同的 Web 框架，对于某些共通的基本需求的不同实现方式，包括了它们支持的运行环境、如何与现有的规范保持一致、如何提供函数式支持、如何保证前向兼容性、如何进行国际化等多个方面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/azat-co/practicalnode" target="_blank" rel="noopener">Node.js 实战第二版&lt;/a>：该仓库是 Azat Mardan 的著作 Practical Node.js 第二版参考的开源发布地址，包含了十二个章节与相关的示范代码，非常值得一读。该书依次介绍了 Node.js 环境搭建与 Express.js 初探、基于 Mocha 的单元测试、模板引擎、数据持久化与性能优化、项目调试、部署与发布等章节；更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://makersden.io/blog/look-inside-fiber/" target="_blank" rel="noopener">解构 React Fiber，了解其工作流程&lt;/a>：调和算法是 React 的核心机制之一，而在即将发布的 16.0.0 版本中 React 会引入 Fiber 替代现有的 Stack Reconciler。本文则是深入浅出地介绍 Fiber 工作流程与代码逻辑，首先从客户端渲染的入口函数 &lt;code>render&lt;/code> 开始，然后介绍在状态变化之后一系列地响应步骤；更多相关资料参考 &lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1&lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/Kristories/awesome-guidelines" target="_blank" rel="noopener">代码风格约定与标准&lt;/a>：本仓库提供了一系列的各个语言的常用代码风格约定与标准，与 JavaScript 相关的包含了来自 Google、Airbnb 等多个公司或者社区的样式规范，还有包括 HTML、CSS、SCSS 等一系列 Web 相关的规范。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/b1w" target="_blank" rel="noopener">ES2015 中集合迭代器的优化&lt;/a>：ECMAScript 2015 中引入了 Map 与 Set 等常用的集合；这些集合同样实现了迭代器的特性，因此也就允许我们使用 &lt;code>for-of&lt;/code> 或者扩展操作符来迭代操作这些集合。不过在很多的评测中这些新引入的集合的迭代遍历性能并不是很好，本文则详细介绍了引擎中导致 Set 等集合迭代性能较差的原因，并且给出了解决方案与未来的实现规划。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/jaredreich/pell" target="_blank" rel="noopener">Pell&lt;/a>：Pell 是仅有 1KB 的所谓所见即所得的富文本编辑器，其不需要依赖于 jQuery、BootStrap 等第三方库。Pell 主要以 ES6 语法开发，并且支持自定义的 SCSS 文件或者复写 CSS 样式来自定义风格，也是非常不错的值得借鉴的编辑器开发示例。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/plasma-umass/doppio" target="_blank" rel="noopener">doppio&lt;/a>: doppio 是基于 TypeScript 0.5.0 版本编写的 Java 虚拟机(JVM)，其支持 Node.js 6.0 以上版本，并且内置了 Java 8 JDK 环境；doppio 是个有趣的尝试打破浏览器语言栅栏的尝试，浏览其源代码也可以学习如何编写 Java 虚拟机。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/samccone/bundle-buddy" target="_blank" rel="noopener">Bundle Buddy&lt;/a>：Bundle Buddy 能够通过分析编译生成的 SourceMap 来寻找 JavaScript 代码块之间的源代码冗余情况。该工具能够帮助开发者寻找合适的代码分割点以降低最终发布应用的不稳定性，同时还能提升页面加载性能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/gpujs/gpu.js" target="_blank" rel="noopener">gpu.js&lt;/a>：在&lt;a href="https://zhuanlan.zhihu.com/p/27815800" target="_blank" rel="noopener">上周的前端每周清单&lt;/a>中我们介绍过 GPGPU(General Purpose Computing on GPUs)的概念与基于 WebGL 的实现方式，而 gpu.js 就是提供了浏览器中快速实现 GPGPU 的单文件 JavaScript 库。gpu.js 能够自动地将某些特定的 JavaScript 函数编译为中间语言，然后利用 WebGLS API 使其运行在 GPU 中；而在某些无法使用 GPU 的环境下，仍然会将这些函数以正常的 JavaScript 执行流运行。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/tebelorg/TagUI" target="_blank" rel="noopener">TagUI&lt;/a>: TagUI 是通用的 Web 自动化交互，提供了开箱即用的声明式流程配置使用特性，支持 Chrome、Firefox、PhantomJS、Headless Chrome 等多个运行环境；同时 TagUI 还提供了 Chrome 插件以记录具体步骤以及对象存储和灵活的数据库存储支持。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明“前端之巅投稿”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>7.4-Frontend</title><link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.4-frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.4-frontend/</guid><description>&lt;h1 id="前端每周清单第-23-期react-内部原理与实现自定义基于-javascript-的-16-位虚拟机使用-apollo-server-快速搭建-graphql-服务端">前端每周清单第 23 期：React 内部原理与实现，自定义基于 JavaScript 的 16 位虚拟机，使用 Apollo Server 快速搭建 GraphQL 服务端&lt;/h1>
&lt;p>&lt;code>前端&lt;/code> &lt;code>前端每周清单&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/baN" target="_blank" rel="noopener">React 开源许可证风波&lt;/a>：近日，Apache 基金会宣布禁止使用包括 React 在内的，Facebook 带附加条款的 BSD Licence 的开源软件，引发了部分使用者的担忧；社区已经有很多人&lt;a href="https://parg.co/bax" target="_blank" rel="noopener">请愿&lt;/a>修改 React 开源许可证，同时 Facebook 另一开源项目 RocksDB 已经表示会在截止日期前修改许可证；React 项目维护者表示 Facebook 内部正在讨论此事，我们也会持续跟踪。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://blog.npmjs.org/post/162986246605/v530-2017-07-13" target="_blank" rel="noopener">npm 5.3.0 发布&lt;/a>：自 5.x 版本发布之后，npm 一直致力于提升版本迭代速度，尽可能地通过小的更新来修复 npm 存在的问题。而本周发布的 5.3.0 版本为 npm ls 命令添加了 &amp;ndash;link 参数，并且为 npx 添加了更多的支持语言版本；此外该版本还修复了一系列版本控制上的问题。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://blog.expo.io/expo-sdk-v19-0-0-is-now-available-821a62b58d3d" target="_blank" rel="noopener">Expo SDK v19.0.0 发布&lt;/a>：近日基于 React Native 0.46 版本的 Expo SDK v19.0.0 正式发布，其大幅度更新了 Android 中 JavaScriptCore 的特性支持与性能表现；除此之外该版本还优化了开发者工具与文档，并且引入了语音识别、地理位置编码、文件系统、异步加载资源以及 Android 应用的权限管理等多个新的特性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWH" target="_blank" rel="noopener">Angular 5.0.0-beta.0 以及 Angular 4.3.1 发布&lt;/a>：本周 Angular 5.0.0-beta.0 版本发布， 其对于动画以及懒加载模块进行了大幅优化；同时本周还发布了 Angular 4.3.1 以及 angular-cli 1.2.2 版本。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://deepstreamhub.com/tutorials/protocols/webrtc-intro/" target="_blank" rel="noopener">WebRTC 实战教程&lt;/a>：本系列教程会带你回顾，从构建点对点的基于 WebRTC 的数据、音频与视频传输信道开始，到搭建适用于真实场景的多人聊天室中的文件共享、视频操作以及屏幕共享等实践。本系列教程旨在让读者构建清晰、直观地 WebRTC 知识体系，能够独立地构建基于 WebRTC 的应用。本系列教程分为七个部分，依次是基础概念讲解、数据信道搭建、网络连通性诊断、音视频处理、视频操作、屏幕分享、文件传输、发布到生产环境等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bay" target="_blank" rel="noopener">ES6 中的 JavaScript 工厂函数实现&lt;/a>：本文归属于 Eric Elliott 发布的 Composing Software 系列，介绍在 JavaScript ES6 语法背景下如何实现工厂函数。所谓工厂函数即是非类或者构造函数的，能干会某个新创建对象的函数；工厂函数能够简化我们创建新对象的过程，本文即是详细地介绍了如何实现工厂函数，也是一篇不错的 ES6 函数语法讲解；更多 JavaScript 相关资料参考&lt;a href="https://parg.co/bMI" target="_blank" rel="noopener"> https://parg.co/bMI &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://toddmotto.com/lazy-loading-angular-code-splitting-webpack" target="_blank" rel="noopener">基于 NGModules 与 Webpack 的 Angular 应用模块分割与懒加载&lt;/a>：本文主要讨论如何在 Angular 应用开发中利用 Webpack 与 NGModules 实现对于代码库的模块分割，并且利用懒加载来加载非首屏内容，从而提升整体的应用响应性能。本文首先介绍了代码分割与懒加载相关的概念知识，然后介绍了如何搭建 Webpack 基础环境，然后介绍了使用 NgModules 以及性能对比；更多 Webpack 相关资料参考&lt;a href="https://parg.co/bVs" target="_blank" rel="noopener"> https://parg.co/bVs &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://codeburst.io/simple-data-visualization-with-react-js-svg-line-chart-tutorial-df12e5843ce" target="_blank" rel="noopener">基于 React.js 的简单数据可视化&lt;/a>：本文旨在介绍如何利用 React.js，并且不借助任何第三方库的帮助，来实现简单的 SVG 线型图。本文首先讨论如何利用 Create React App 搭建简单 React 项目，然后介绍了 SVG 的基础语法以及如何创建模拟数据，最后介绍了如何进行逻辑代码分割并且编写单独的 LineChart 组件；更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWY" target="_blank" rel="noopener">使用 Apollo Server 快速开发基于 Node.js 的 GraphQL 服务端&lt;/a>：Apollo Server 是由社区维护的开源 GraphQL 服务端，它支持目前主流的 Node.js HTTP 服务端框架：Express、Connect、Hapi、Koa、AWS Lambda、Restify 以及 Micro。本文首先介绍 Apollo Server 遵循着开放、简单、高性能的原则，然后介绍了基于 Express 的基础用法以及性能监控等内容；更多 GraphQL 相关资料参考 &lt;a href="https://parg.co/b1e" target="_blank" rel="noopener"> https://parg.co/b1e &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bW6" target="_blank" rel="noopener">Vue.js 组件的实践分享&lt;/a>：本文是来自 Morningstar 的工程师，分享的他们利用 Vue.js 进行前端组件化开发时的实践经验；主要是它们对于 Vue.js 组件编写的心得。作者首先介绍了组件不同生命周期回调的含义，然后介绍了从简单到复杂组件的状态与数据管理，接下来介绍了 Slot 与 Minxin 在组件重用上的具体用法等内容；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWo" target="_blank" rel="noopener">Redux 优先的路由模型&lt;/a>：路由库是构建任何复杂单页应用的核心组件之一，如果你已经使用过 React 与 Redux 开发过 Web 应用，那么对于 React Router 这个著名的路由库并不陌生。不过 React Router 还是与界面层强耦合，而本文希望介绍以 Redux 为核心的路由解决方案，作者会深入浅出地介绍概念设计、核心代码编写以及如何用不到一百行代码来编写与组件框架相关的接口；更多 Redux 相关资料参考 &lt;a href="https://parg.co/bVQ" target="_blank" rel="noopener"> https://parg.co/bVQ &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://codeburst.io/angular-best-practices-4bed7ae1d0b7" target="_blank" rel="noopener">Angular 最佳实践分享&lt;/a>：作者在本文中分享自己在工作中总结出的 Angular 应用实践，本文尽可能地避免官方的 Angular 样式指南中提及的约定，而是着眼于呈现个人的经验总结。本文依次介绍了类型定义、组件实践、服务定义、模板使用等方面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mo.github.io/2017/07/20/javascript-e2e-integration-testing.html" target="_blank" rel="noopener">基于 JavaScript 的 Web 应用的端到端测试工具对比&lt;/a>：本文回顾了常见的基于 JavaScript 的，用于对 Web 应用进行端到端测试的工具，并且对它们进行了简单对比。本文首先探讨了项目中应用端到端测试的意义，然后列举了当前可用的基于 JavaScript 的界面自动化测试框架，然后比较了不同的端到端测试框架的流行程度与基本的代码片风格；更多 Web 测试相关资料参考&lt;a href="https://parg.co/bWd" target="_blank" rel="noopener"> https://parg.co/bWd &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://about.gitlab.com/2017/07/17/redesigning-gitlabs-navigation/" target="_blank" rel="noopener">重新设计的 Gitlab 导航&lt;/a>：本文记述了 Gitlab 在重新设计应用导航栏过程中的讨论与思索过程，是一篇不错的了解用户交互与产品设计的分享文章。本文首先介绍了对于导航栏应该包含的内容的分割，譬如分为全局内容与上下文内容；然后介绍了如何针对两个原型的设计理念，以及如何进行 A/B 测试以最终决定应用方案的过程。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.robinwieruch.de/learn-react-before-using-redux/" target="_blank" rel="noopener">学习 Redux 之前你应该了解的关于 React 的 8 件事&lt;/a>：状态管理是前端的难点之一，而 React 或类似的前端界面库往往只是提供了简单的组件内状态管理，因此很多开发者还是会逐步转向于 Redux 等专用的状态管理工具；不过也有很多开发者是在并没有真实碰到需要解决大规模可扩展的状态管理问题时，或者没有仔细了解过 React 内置的状态管理范式时就盲目地去学习了 Redux。而本文则依次介绍了本地状态管理基础、函数式本地状态、状态提升、高阶组件、Context、状态组件与无状态组件等内容；更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/ba2" target="_blank" rel="noopener">美团点评收银台前端可用性保障实践&lt;/a>：本文主要讨论的是前端可用性相关话题，以在美团点评移动端网页收银台的实践为例，讲解收银台前端是如何保障可用性的。本文依次讨论了如何定义前端服务可用性、如何衡量前端服务可用性、哪里容易出问题、怎样保障才能被信服等内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://medium.com/envato/our-top-10-free-tools-for-frontend-web-development-15d8a6052652" target="_blank" rel="noopener">Web 开发中的十大常用工具&lt;/a>：每年都会涌现出很多优秀的 Web 开发辅助工具，而本文是来自于 Envato 的工程师分享的他们开发中常用的十个工具。本文依次介绍了可用于生成网格的 Grid.Guide、类似于 BootStrap 的样式库 Foundation、在线代码编辑与共享工具 CodePen、jQuery 插件聚集地 Unheap、自动界面刷新工具 LivePage、整页抓取工具 FullPage Screen Capture、字体辅助 WhatFont、Node/Npm、移动端速度测试、响应式速度测试工具等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/syg/ecmascript-binary-ast/" target="_blank" rel="noopener">JavaScript Binary AST 提案&lt;/a>：随着 Web 应用体积的不断增加，页面启动时间逐渐成为了应用性能的主要瓶颈之一；我们可以通过多种方式来缓存代码，但是对于大型代码库的解析却难以直观解决。譬如在现代的笔记本上，Chrome 在加载 Facebook.com 的时候需要花费 10% 到 15% 的时间来解析 JavaScript 代码。本文介绍了由多位工程师提出的旨在提升 JavaScript 解析速度的 Binary AST 方案，本文介绍了当前解析中的瓶颈所在，并且给出了相应的解决建议。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.mattgreer.org/articles/react-internals-part-one-basic-rendering/" target="_blank" rel="noopener">React 内部原理与实现&lt;/a>：作者会在本系列五部分的文章中介绍 React 内部原理，并且带着读者一步一步重造出简单的类 React 框架；通过阅读这几篇文章，我们可以了解 React 的工作机制，譬如组件的完整生命周期等等。本系列文章依次介绍了基础渲染过程、componentWillMount 与 componentDidMount、基础更新、setState 与事务等内容；更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://francisstokes.wordpress.com/2017/07/20/16-bit-vm-in-javascript/" target="_blank" rel="noopener">自定义基于 JavaScript 的 16 位虚拟机&lt;/a>：本文介绍了如何利用 JavaScript 自定义 16 位虚拟机，主要包括如何设计某个简单的汇编语言、如何构建某个编译器能够将 &lt;code>*.asm&lt;/code> 文件编译为可执行格式、如何构建某个能够模拟内存、CPU 以及部分 IO 操作的虚拟机。文章内容依次介绍了虚拟硬件的基础、限制、汇编语言、编译器、调试器、编码与解码等内容；更多 JavaScript 相关资料参考&lt;a href="https://parg.co/bMI" target="_blank" rel="noopener"> https://parg.co/bMI &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://aurora.mljr.com/install.html" target="_blank" rel="noopener">Aurora&lt;/a>：Aurora 是基于 Vue 2.2.0 版的组件库, 提供了常见的网格布局、按钮、表单域、分页、模态窗口等组件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://ecomfe.github.io/san/" target="_blank" rel="noopener">San&lt;/a>：San 是百度 EFE 团队出品的 Web MVVM 组件库，其具备体积小巧、引用方便、兼容性良好的特性，提供了高性能视图、组件反解、自由管理模块等功能。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/KingPixil/wade" target="_blank" rel="noopener">Wade&lt;/a>：Wade 是轻量级、高性能的 JavaScript 搜索库，Wade 会在构建阶段自动地为输入数组中的每个字符串的字符构建反向索引，然后在搜索时候快速返回用户输入关键字对应地下标；Wade 优势在于对于相同的数据集进行多次搜索时能够避免冗余的遍历。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/lord/slate" target="_blank" rel="noopener">Slate&lt;/a>：Slate 是基于 MarkDown 的接口文档生成工具，它能够从 MarkDown 文件配置中读取接口信息并且生成漂亮、智能、响应式的在线单页接口文档页面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWb" target="_blank" rel="noopener">swagger-decorator&lt;/a>：swagger-decorator 是旨在一处注解多处使用的 JavaScript &amp;amp; Node.js 应用中实体类与方法注解库，其能够用于实体类生成与校验、Sequelize ORM 实体类生成、面向 Koa 的路由注解与 Swagger 文档自动生成的场景。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明“前端之巅投稿”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item><item><title>7.5-Frontend</title><link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.5-frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/7/7.5-frontend/</guid><description>&lt;h1 id="前端每周清单第-24-期react-16-中异常处理与-fiber-实战vue-图表与-jquery-插件v8-turbofan-性能优化">前端每周清单第 24 期：React 16 中异常处理与 Fiber 实战、Vue 图表与 jQuery 插件、V8 Turbofan 性能优化&lt;/h1>
&lt;p>&lt;code>前端&lt;/code> &lt;code>前端每周清单&lt;/code>&lt;/p>
&lt;p>&lt;a href="http://www.infoq.com/cn/FE-Weekly" target="_blank" rel="noopener">前端每周清单&lt;/a>专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p>
&lt;h2 id="新闻热点">新闻热点&lt;/h2>
&lt;p>&lt;code>国内国外，前端最新动态&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWv" target="_blank" rel="noopener">Adobe 宣布将在 2020 年底停止发布与更新 Flash Player&lt;/a>：该消息的发布意味着属于 Flash 的时代即将最终落幕；Flash 以及包含的 ActionScript、Flex、AIR 等技术方案对于现代 Web 发展起到了巨大的引导与推动作用。在即将功成身退的时候，我们也对于他们致以崇高的敬意，&lt;a href="https://parg.co/bW9" target="_blank" rel="noopener">Firefox&lt;/a>、 &lt;a href="https://parg.co/bWX" target="_blank" rel="noopener">Facebook&lt;/a>、 &lt;a href="https://parg.co/bWe" target="_blank" rel="noopener">Chromium&lt;/a> 等也纷纷表示了对于 Flash 的感激与未来的迁移路线图。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWL" target="_blank" rel="noopener">阿里巴巴即将开源 Angular 组件库 NG-ZORRO&lt;/a>：Zorro 的外观设计由 Ant-Design 团队担纲，而且和其它组件库共享了一致的风格和动画效果。Zorro 已经在阿里云团队内部使用，无论是组件的数量，还是代码质量，包括外观设计，都非常值得大家期待！对于 Angular 社区来说，这是一个重大的消息，Zorro 的发布将会进一步提升 Angular 在企业应用方面的巨大优势。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/facebook/react/issues/10294" target="_blank" rel="noopener">React 16 Beta 正式发布&lt;/a>：近日 React 16 Beta 版本正式发布，该版本是 React 核心重构以来的首个发布。该版本尽量保证了从 15.x 到 16.x 的平滑升级，并且在引入了新的异常处理机制，允许编写专用的异常处理组件、引入了新的调度与生命周期接口、重构了服务端渲染模块，引入了新的流模式；更多特性介绍请查看原文。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgE" target="_blank" rel="noopener">Webpack 3.4.0 发布&lt;/a>：近日发布的 Webpack 3.4.0 版本中包含了多个插件的性能优化与错误修复；目前 NamedModulesPlugins 与 HashedModuleIdsPlugin 能够正常地与 DllReferencePlugin 协同使用，新增了 &amp;ndash;config-name 参数以动态指定部分配置参数、提升了 ModuleConcatenationPlugin 的错误显示，并且更新了大量的项目自身依赖版本。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开发教程">开发教程&lt;/h2>
&lt;p>&lt;code>步步为营，掌握基础技能&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://facebook.github.io/react/blog/2017/07/26/error-handling-in-react-16.html" target="_blank" rel="noopener"> React 16 中的错误处理&lt;/a>：在 React 15.x 及之前的版本中，组件内的异常有可能会影响到 React 的内部状态，进而导致下一轮渲染时出现未知错误。这些组件内的异常往往也是由应用代码本身抛出，在之前版本的 React 更多的是交托给了开发者处理，而没有提供较好地组件内优雅处理这些异常的方式。在 React 16.x 版本中，引入了所谓 Error Boundary 的概念，从而保证了发生在 UI 层的错误不会连锁导致整个应用程序崩溃；未被任何异常边界捕获的异常可能会导致整个 React 组件树被卸载。更多 React 相关资料参考&lt;a href="https://parg.co/bM1" target="_blank" rel="noopener"> https://parg.co/bM1 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.sitepoint.com/creating-beautiful-charts-vue-chart-js/" target="_blank" rel="noopener">使用 Vue.js 与 Chart.js 构建漂亮的图表&lt;/a>：图表是现代网站与应用的重要组成，它们能够帮助你更有张力地呈现数据；本文即是介绍如何利用 Chart.js 与 Vue.js 来有效地，针对不同格式的图表进行可视化数据呈现。本文首先介绍了使用 vue-cli 构建基本的项目骨架，然后引入了 vue-router 进行路由划分，接下来介绍了利用 vue-chartjs 库依次构建常见的线型图、饼图、气泡图、柱状图等常见的图表；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bg6" target="_blank" rel="noopener">Angular 中利用新的动画特效(v4.3+)优化路由变换&lt;/a>：本文着眼于介绍 Angular 应用开发中，如何利用新的动画特效，来为路由切换添加动画效果。本文首先介绍了如何从独立的依赖中引入动画模块，与为应用添加路由配置以及简单的路由动画；然后介绍了 Angular 动画接口，如何定义动画、如何添加参差效果等内容，最后介绍了如何将这些整合为独立的应用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgr" target="_blank" rel="noopener">循序渐进地利用 Express.js、Apollo Server 与 Webpack 创建可热加载地结构化 GraphQL 接口&lt;/a>：GraphQL 是 Facebook 在 2015 年提出的利用强类型的查询语言构建接口新方式，GraphQL 正逐步被 Twitter、Github 这样的大型互联网公司所接纳实践。本文则着眼于介绍如何利用 Express 与 Apollo Server 构建 GraphQL 接口，并且如何去结构化管理 Schema 以保证其可管理性；除此之外还介绍了如何为开发环境添加热加载特性，更多 GraphQL 相关资料参考 &lt;a href="https://parg.co/b1e" target="_blank" rel="noopener"> https://parg.co/b1e &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgP" target="_blank" rel="noopener">基于 Node.js 与 HTML5 的视频流&lt;/a>：本文一步一步地介绍如何构建基础的 Node.js 接口，并且添加某个路由从而将视频文件发送给前端。本文首先介绍了 Node.js 中流的基础概念与如何获取文件体积、从文件创建流并且获取块的大小等基本 API，然后介绍了如何搭建服务器并且添加合适的路由以返回视频流，最后介绍了前端如何利用 HTML5 的 video 标签实现视频播放与控制；更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="工程实践">工程实践&lt;/h2>
&lt;p>&lt;code>立足实践，提示实际水平&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgG" target="_blank" rel="noopener">JavaScript 设计模式学习&lt;/a>：本书是 Addy Osmani 著作的开源书籍，主要介绍面向 JavaScript 语言的经典与现代的常用设计模式。所谓设计模式即是软件设计中常见问题的可复用解决方案，对于任何一门编程语言都是非常值得探索的话题。本文首先概述了设计模式的基础理论，然后介绍了 JavaScript 中常见的十余种类与对象的设计模式，接下来介绍了 JavaScript 界面设计相关的 &lt;code>MV*&lt;/code> 设计模式，然后还介绍了 JavaScript 模块化设计以及 jQuery 中的设计模式等内容；更多 JavaScript 设计模式相关参考&lt;a href="https://parg.co/bIO" target="_blank" rel="noopener"> https://parg.co/bIO &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgU" target="_blank" rel="noopener"> Vue.js 中安全地使用 jQuery 插件&lt;/a>：实际上我们并不推荐在界面中同时使用 jQuery 与 Vue.js，不过在项目开发中有时候我们无法避免地需要同时使用，本文即是讨论如何安全地使用 jQuery 插件。本文以某个时间日期选择插件为例，首先讨论了引入 jQuery 存在的潜在风险，然后一步步地介绍了初始化插件、将插件包裹在 Vue.js 组件内、如何在插件与组件之间进行数据交互等内容；更多 Vue.js 相关资料参考&lt;a href="https://parg.co/byL" target="_blank" rel="noopener"> https://parg.co/byL &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bg5" target="_blank" rel="noopener">Angular 开发者常犯的错误枚举&lt;/a>：本文作者从自己团队的 Angular 开发经验与 Code Review 中总结出了开发者常犯的错误，并且提出了解决方案。这些错误包括对于 Angular、Angular 2、Angular 4 等各个版本的误解、ngOnChanges 与 ngDoCheck 对比、僵尸订阅、冗余订阅、不同模块的 providers 误用、直接操作 DOM 结点、重复声明组件等方面。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgu" target="_blank" rel="noopener">Node.js 微服务实践&lt;/a>：微服务架构目前正在大行其道，不过作者发现由于很多人有自己独到的见解，微服务架构的变种与复杂度在持续增加；作者则希望通过本文使初学者快速地利用 Node.js 开发出简单的微服务。本文首先介绍了微服务出现的背景以及微服务的五个原则：零配置、高冗余、可容错、自我修复、自动发现；然后介绍了使用 cote 这个微服务库一步一步地实现 Node.js 微服务集群，依次创建 Requester、Responder 等基础组件以最终实现系统中的几个相互依赖的模块。更多 Node.js 相关资料参考 &lt;a href="https://parg.co/be0" target="_blank" rel="noopener"> https://parg.co/be0 &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgZ" target="_blank" rel="noopener">渐进式 CSS 布局：从 Floats 到 Flexbox 到 Grid&lt;/a>：随着各大现代浏览器逐步支持 CSS Grid 布局，越来越多的开发者在尝试使用这种新型的布局方式。不过鉴于目前还存在着大量的老版本浏览器，作者在本文中重点讨论了如何利用渐进式 CSS 布局增强的方式来应对不同浏览器环境下的布局解决方案，并且根据运行环境来渐进增强；更多 CSS/SCSS 相关资料参考&lt;a href="https://parg.co/baH" target="_blank" rel="noopener"> https://parg.co/baH &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="深度阅读">深度阅读&lt;/h2>
&lt;p>&lt;code>深度思考，升华开发智慧&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.nearform.com/blog/node-js-is-getting-a-new-v8-with-turbofan/" target="_blank" rel="noopener">V8 新的 Turbofan JIT 编译器带来的性能特性概述&lt;/a>：V8 JavaScript 引擎最早是 Google 为 Chrome 浏览器开发的 JavaScript 虚拟机，其设计的初衷就是为了让 JavaScript 能够高速运行；而这种性能优化的保障就是所谓 JIT 编译器。本文着眼于介绍 V8 新的 Turbofan JIT 编译器提供的新的性能特性能够为应用带来的优化；本文依次介绍了使用 delete 操作符与设置为 undefined 这两种不同的去除对象属性的方式在新的编译器下的表现差异、对于 Arguments 参数不同操作的对比、柯里函数与 bind 操作符的优化，以及对象遍历、对象创建和对于新旧引擎中对于常见的 Winston 等日志框架的性能对比等内容。更多 JavaScript 引擎相关知识参考&lt;a href="https://parg.co/bgp" target="_blank" rel="noopener"> https://parg.co/bgp &lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/bpesquet/thejsway" target="_blank" rel="noopener">JavaScript 之路&lt;/a>：本书希望为任何对 JavaScript 有兴趣的开发者提供 JavaScript 的多领域知识，其兼具了入门简单、对初学者友好、使用 ES2015 语法以及规范的样式指南等特点。本书主要包含以下章节：JavaScript 语法基础、利用 DOM 接口创建交互性的网页、构建完整的 Web 应用等内容；更多 JavaScript 相关资料参考&lt;a href="https://parg.co/bMI" target="_blank" rel="noopener"> https://parg.co/bMI &lt;/a>。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bWw" target="_blank" rel="noopener">聊聊 FE 们面试那点事儿&lt;/a>：本篇不是一篇讲面试题的技术贴，而是来自一位技术面试官的深层思考。本文作者从面试官与面试者两个角度来聊聊面试的事情；对于面试官，作者讨论了如何理性对待、如何基于行为面试法对技术知识进行考核、应该尊重并且感谢候选人等。而从面试者的角度，笔者对于面试中所谓正确的答案，以及如何准备知识与简历进行了讨论。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://hackernoon.com/web-development-trends-2017-387421cf9c23" target="_blank" rel="noopener">2017 Web 开发趋势&lt;/a>：Web 开发在 2016 年里得到了长足的发展与进步，而本文则高屋建瓴地分析了 2017 年中 Web 开发可能面临的机遇与挑战。作者首先讨论了人工智能的前景以及 Web 与之相结合的案例，然后讨论了物联网行业中 Web 相关的开发案例；接下来作者分析了崛起的 JavaScript 以及目前流行的项目，然后又从静态网站生成器、虚拟现实、GIFs、Bots 等角度讨论其他的发展方向。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://parg.co/bgb" target="_blank" rel="noopener"> React 的新引擎— React Fiber 是什么？&lt;/a>：浏览器中的渲染引擎是单线程的，几乎所有的操作都是在这个单线程中执行——解析渲染 DOM Tree 和 CSS Tree，解析执行 JavaScript ——除了网络操作。这个线程就是浏览器的主线程。单线程意味着，一段时间只做一件事，所以浏览器在同一时间内，其主线程只能关注于一个任务。React 核心团队很早之前就预知这样的风险的存在，并且持续探索可解决的方式。基于浏览器对 requestIdleCallback 和 requestAnimationFrame 这两个 API 的支持，以及其他团队对者两个 API 的实现，如 React Native 团队。React 团队实现新的调度策略 &amp;ndash; Fiber reconcile；更多 Fiber 相关资料参阅 &lt;a href="https://parg.co/bgO" target="_blank" rel="noopener"> https://parg.co/bgO &lt;/a>。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="开源项目">开源项目&lt;/h2>
&lt;p>&lt;code>乐于分享，共推前端发展&lt;/code>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/hujiulong/vue-3d-model" target="_blank" rel="noopener">vue-3d-model&lt;/a>：一个展示三维模型的 Vue 组件，支持模型操作和模型点击事件，能自动缩放模型到合适大小并校正偏移，目前支持 obj、stl、dae 和 json 格式的模型。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/graphcool/chromeless" target="_blank" rel="noopener">Chromeless&lt;/a>：Chromeless 是非常优秀的 Chrome 自动化控制库，能够同时运行在本地与 AWS 中。Chromeless 能够同时运行千余个浏览器集成测试、能够被用于进行网页抓取与自动截图、能够编写需要真实浏览器的机器人等等；可以在&lt;a href="https://parg.co/bWD" target="_blank" rel="noopener">这里&lt;/a>进行在线试验。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/clauderic/react-tiny-virtual-list" target="_blank" rel="noopener">react-tiny-virtual-list&lt;/a>：零依赖的轻量级 React 列表虚拟化库，能够渲染数百万的项目而不会有什么卡顿；同时 react-tiny-virtual-list 还支持指定项目的高度、手动控制滚动到某个项目下标处、设置初始化滚动偏移、支持水平列表等等特性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ncase/trust" target="_blank" rel="noopener">trust&lt;/a>：挺有意思的博弈论交互式指南，通过简单的小游戏来介绍竞合关系。除了能了解简单的博弈论知识之外，笔者觉得该指南的动画效果还挺有意思的，值得一看。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="巅峰人生">巅峰人生&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://parg.co/bgH" target="_blank" rel="noopener">Linux、Git 之父 Linus Torvalds 的别样技术人生&lt;/a>：本文是 InfoQ 对于 Linus Torvalds 的专访；十五年来，Linus Torvalds 一直坚持在技术第一线，开发了 Linux 和 Git 两个项目，并深刻影响了软件行业。Linus Torvalds 极度热爱技术，但并不是泛 IT 技术的追随者，他从来没有写过 web 程序、不会设置 FTP 服务器的他有着很聚焦的技术关注点。但是，他并不是一根筋的洁癖开源理想者，很早他就思考了商业对开源的作用；他很开心也很感激商业公司和基金会帮他处理所有那些他不愿意处理的事情，并且可以做到完全放权、不管不问。&lt;/li>
&lt;/ul>
&lt;h2 id="前端之巅">前端之巅&lt;/h2>
&lt;p>前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href="mailto:editors@cn.infoq.com">editors@cn.infoq.com&lt;/a>，注明“前端之巅投稿”。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="前端之巅微信底图－5.jpg" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p></description></item></channel></rss>