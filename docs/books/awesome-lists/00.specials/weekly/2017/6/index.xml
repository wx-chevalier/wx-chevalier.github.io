<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>6 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/index.xml" rel="self" type="application/rss+xml" />
    <description>6</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>6</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/</link>
    </image>
    
    <item>
      <title>6.1-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.1-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.1-frontend/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-15-期nodejs-v80-发布从-react-迁移到-vue前端开发的未来&#34;&gt;前端每周清单第 15 期：Node.js v8.0 发布，从 React 迁移到 Vue，前端开发的未来&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Node.js LTS v8.0 发布》&lt;/a&gt;：Node.js 于 5 月 30 日在其官方博客上宣布发布代号为 Carbon 的 Node.js v8.0.0 版本，其带来了很多重要的特性改进和一些全新的特性。其典型改变包括了引入 async_hooks 以监控异步操作、引入 N-API 以开发原生插件、改进了 Buffer 的安全性以及将 NPM 升级到了 5.0.0 版本等( &lt;a href=&#34;https://parg.co/bJh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJh&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Chrome 60 中 DevTools 新特性介绍》&lt;/a&gt;：Google IO 2017 中，Paul Irish 在题为 DevTools: State of the Union 的演讲中，介绍了 Chrome DevTools 即将包含的新特性。新特性包括了基于 Lighthouse 的全新 Audits 面板、第三方请求标识、异步代码的单步调试支持等等。( &lt;a href=&#34;https://parg.co/bJR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJR&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://developer.github.com/v4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Github 宣布将 V4 版本的 API 完全迁移到 GraphQL 架构》&lt;/a&gt;：近日，Github 在其博客宣布将会在 V4 版本的 API 中仅使用 GraphQL 架构，而不再提供 REST 风格的接口。Github 认为 GraphQL 提供了显著的灵活性与便捷性，能够有助于使用者更为方便、多变地构建查询与获取数据。( &lt;a href=&#34;https://developer.github.com/v4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developer.github.com/v4/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《styled-components v2 发布》&lt;/a&gt;：在经过 6 个月的迭代与 300 多次提交之后，styled-components 宣布发布其 V2 版本。新版本中包体体积进一步减少，并且提供了关键路径 CSS 抽取以及很多的新 API。( &lt;a href=&#34;https://parg.co/bJM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJM&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《需要掌握的 Node.js Streams 相关知识》&lt;/a&gt;：Node.js steams 一直以来都被诟病难以理解与使用，近年来也有不少的开发者创建了封装库以便于使用 Node.js streams；不过本文追本溯源，着重于介绍 Node.js Streams 的基本语法并且理清常见的误解。本文首先以简单的利用 Stream 读取文件的例子来介绍 Stream 的概念，然后介绍了 Node.js 中四个流以及其具体实现方式。( &lt;a href=&#34;https://parg.co/bJN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJN&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《8 个常用的 NPM 技巧》&lt;/a&gt;：NPM 是前端开发中不可避免的脚本工具，而本文则介绍了数个常见的 NPM 小技巧；包括了初始化包、运行测试、可用脚本命令枚举、查看已安装包等等。( &lt;a href=&#34;https://parg.co/bJO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJO&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://restful.io/rest-api-back-to-basics-c64f282d972&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《REST API 基础》&lt;/a&gt;：作为目前主流的接口风格定义之一，REST 在数据交互中占据了重要的地位。本文则是从 REST 风格的基础开始介绍 REST 的由来、设计理念以及在真实应用中设计 RESTful API 应该考虑的方面与遵循的原则。( &lt;a href=&#34;https://restful.io/rest-api-back-to-basics-c64f282d972&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://restful.io/rest-api-back-to-basics-c64f282d972&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://vuejsdevelopers.com/2017/05/28/switch-from-react-to-vue-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《从 React 迁移到 Vue.js》&lt;/a&gt;：React 与 Vue.js 都是非常优秀的前端框架，不同的团队在不同的应用场景下可能有不同的偏好。而本文则记录了作者从 React 迁移到 Vue.js 中的思考过程；本文首先介绍了 React 与 Vue.js 之间的异同，对比了二者常用的语法特点以及生态圈，并且讨论了为何从 React 迁移到 Vue.js 的理由。( &lt;a href=&#34;https://parg.co/bJ8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJ8&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://scotch.io/tutorials/state-management-in-vue-getting-started-with-vue&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《基于 Vuex 的 Vue 应用状态管理》&lt;/a&gt;：就如同其他基于组件的框架，对于基于 Vue 开发的应用随着其体量与功能的增加，对于状态的追踪会变得日渐麻烦。而本文则分析了状态管理的痛点以及深入浅出地介绍了如何利用 Vuex 进行 Vue 应用状态管理。( &lt;a href=&#34;https://parg.co/bJk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJk&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Redux 状态管理之痛点、分析与改良》&lt;/a&gt;：如何设计 Redux 的 store？这几乎是 Redux 在实践中被问到最多的问题，或许你有自己的方式，却总觉得哪里不太对劲。这篇文章希望从状态是什么，到 Elm 中的状态管理，最后与 Redux 分析和对比，试图找到问题，并推导可行的改良方式。( &lt;a href=&#34;https://parg.co/bJq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJq&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJ5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《JavaScript 单元测试框架大乱斗：Jasmine、Mocha、AVA、Tape 以及 Jest》&lt;/a&gt;：在开始新的前端项目时，我们常常会考虑应该使用哪一个单元测试框架，或者考虑应该为哪些代码添加单元测试。而本文则对于常用的 Web 开发中的单元测试框架 Jasmie、Mocha、AVA、Tape 以及 Jest 进行了横向对比，并且基于自己的经验给出了不同应用场景与需求下不同的单元测试框架选项建议。( &lt;a href=&#34;https://parg.co/bJ5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJ5&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《React Europe 2017 见闻实录》&lt;/a&gt;：本文记录了作者在第三届 React Europe 大会上的见闻，也是不错的窥见 React 生态圈现状与未来发展方向的方式。本文首先介绍了即将到来的 React 16 以及新的调和算法 Fiber，然后介绍了一些辅助构建高质量 JavaScript 代码的工具，最后还讨论了基于流的按帧渲染方式。( &lt;a href=&#34;https://parg.co/bJt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJt&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《常用的 Recompose HOCs》&lt;/a&gt;：由 Andrew Clark 发布的 Recompose 是便捷的构建高阶组件的辅助库，本文则介绍了 branch、mapProps、withState、lifeCycle、nest 这些常用的 HOCs 的实际用法。( &lt;a href=&#34;https://parg.co/bJV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJV&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《阅读 Flexbox Spec 之后的感悟》&lt;/a&gt;：Flexbox 是 Web 前端开发中常用的布局方式之一，其便于使用并且相当灵活；不过本文作者在阅读完了 Flexbox 的 Spec 之后却有了很多基础用法之外的发现。本文就介绍了 margin、min-width 以及各个属性在 Flex 布局中的隐藏特点。( &lt;a href=&#34;https://parg.co/bJJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJJ&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJ6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Vue 2017 现状与展望》&lt;/a&gt;：5 月 20 日，在全球首届 VueConf 上，Vue.js 作者尤雨溪介绍了 Vue.js 2017 的现状，并对 Vue 的未来做了展望。本文是对此次演讲的回顾。获取更多 Vue 相关内容，请关注前端之巅公众号并回复“Vue”。( &lt;a href=&#34;https://parg.co/bJ6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJ6&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJ4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《软件开发中的合成之道》&lt;/a&gt;：本文是 Eric Elliott 为其 Composing Software 系列文章所著的序章，着眼于软件开发中常用的函数合成与对象合成相关的概念解析与介绍。我们软件开发的过程就是不断地将小的模块逐步组合为完整的系统，我们不可避免地需要去组合调度多个函数，或者利用继承等方式将简单的类慢慢组合为复杂的业务类。( &lt;a href=&#34;https://parg.co/bJ4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJ4&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Web 前端开发的未来》&lt;/a&gt;：本文作者从自己的实践出发畅想了未来 Web 前端开发的可能方向；主要包括 JavaScript 新特性的增强以及对于状态管理的深入、从简单界面逐渐过渡到完整系统、原生与 Web 之间的边界逐步消失、CSS 会逐步模块化并且预处理器会逐步退出历史舞台、性能仍然是关键瓶颈以及 URL 会变得愈发重要等多个方面。( &lt;a href=&#34;https://parg.co/bJr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJr&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bJi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《统一样式语言》&lt;/a&gt;：近几年 CSS-in-JS 迅猛发展，各种实现库也是层出不穷。而本文作者，也是 CSS Modules 的作者之一，则是高屋建瓴地介绍了 CSS-in-JS 的特点与解决的问题，梳理了人们之前对于 CSS-in-JS 存在的误解。并且横向比较了多个 CSS-in-JS 的优缺点与适用场景，最后还畅想了下 CSS-in-JS 的未来。( &lt;a href=&#34;https://parg.co/bJi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bJi&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/toish/chromatism&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《chromatism》&lt;/a&gt;：chromatism 是一系列用于进行常见颜色转换操作的函数的集合，提供了色彩转换、色差色温计算以及其他功能函数。( &lt;a href=&#34;https://github.com/toish/chromatism&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/toish/chromatism&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://workboxjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Workbox》&lt;/a&gt;：Workbox 是来自 Google Chrome 团队的快速将现有应用转化为 Progressive Web Apps 的 JavaScript 库；Workbox 允许我们通过 Webpack 插件、Gulp 插件以及 npm 脚本的方式快速地为当前应用的资源创建对应加载 ServiceWorker。( &lt;a href=&#34;https://workboxjs.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://workboxjs.org/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://tech.meituan.com/iOS_Hyperloop.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Hyperloop》&lt;/a&gt;：Hyperloop 是服务于美团点评客户端的组件发版、持续集成、App 打包构建、资源调度等各个环节的发布调度系统。接入 Hyperloop 系统后，开发同学可以通过 Hyperloop 来管理自己的项目，配置发版和打包所需要的步骤和检查项。开发完成时，用户只需要登录 Hyperloop 进行相关操作，Hyperloop 就会根据项目的配置去调用不同的步骤，上报每个步骤的状态，给出错误日志、状态通知等。( &lt;a href=&#34;http://tech.meituan.com/iOS_Hyperloop.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://tech.meituan.com/iOS_Hyperloop.html&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/tonybeltramelli/pix2code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《pix2code》&lt;/a&gt;：pix2code 依赖于深度学习技术将来自于设计师的界面图片转化为 iOS 等客户端中的代码。( &lt;a href=&#34;https://github.com/tonybeltramelli/pix2code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/tonybeltramelli/pix2code&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://achrafkassioui.com/birdview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Birdview.js》&lt;/a&gt;：Birdview.js 是个非常有趣的 JavaScript 插件，它能将整个页面以鸟瞰图的方式呈现给用户，并且允许用户直接进入选中的点。( &lt;a href=&#34;http://achrafkassioui.com/birdview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://achrafkassioui.com/birdview/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6.2-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.2-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.2-frontend/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-16-期javascript-模块化现状node-v8-与-v6-真实性能对比nuxtjs-ssr-与权限验证指南&#34;&gt;前端每周清单第 16 期：JavaScript 模块化现状；Node V8 与 V6 真实性能对比；Nuxt.js SSR 与权限验证指南&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/prettier/prettier/releases/tag/1.4.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Prettier 1.4.0 发布》&lt;/a&gt;：Prettier 1.4.0 版本中最令人期待的特性就是对于 TypeScript，与 CSS、Less 以及 SCSS 等样式语言的支持。TypeScript 是社区呼唤已久的特性，在该版本中我们可以直接使用 prettier 格式化 ts 或者 tsx 为后缀的文件；除此之外，新版本还优化了对于编辑器嵌入的支持。( &lt;a href=&#34;https://github.com/prettier/prettier/releases/tag/1.4.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/prettier/prettier/releases/tag/1.4.0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bi5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Storybook 3.0 发布》&lt;/a&gt;：Storybook 3.0 版本带来了期待已久的 Webpack 2、create-react-native-app、Snapshot 测试等一系列新特性，同时修复了不少的 Bug 并且提升了整体性能。Storybook 3.0 版本是对于 Storybook 项目的代码组织与结构的极大调整检修，也是首个完整由社区驱动开发的版本。( &lt;a href=&#34;https://parg.co/bi5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bi5&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.meteor.com/announcing-meteor-1-5-b82be66571bb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Meteor 1.5 发布》&lt;/a&gt;：近日，Meteor 宣布发布其 1.5 版本，大幅优化了生成的 JavaScript 包体尺寸，并且提升了页面加载速度。本文主要介绍了 Meteor 的发展历史、代码分割与动态导入、包体分析工具、不变的模块缓存等内容。( &lt;a href=&#34;https://blog.meteor.com/announcing-meteor-1-5-b82be66571bb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.meteor.com/announcing-meteor-1-5-b82be66571bb&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Nuxt.js SSR 与权限验证指南》&lt;/a&gt;：Nuxt.js 是基于 Vue.js 构建的服务端渲染框架，它允许开发者快速创建支持服务端渲染的应用；而本文则是介绍了利用 Nuxt.js 搭建应用并且为其添加权限验证模块的步骤。( &lt;a href=&#34;https://parg.co/bic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bic&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/biZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《理解高阶组件》&lt;/a&gt;：即使 React 新手都应该听过所谓高阶组件或者容器组件的概念，而本文则是深入浅出地介绍了 React 中高阶组件的概念与意义，并且以实例介绍具体的使用方式与适用场景。作者首先介绍了无状态组件与全局状态的概念，然后对比了所谓容器与展示型组件的使用场景，最后介绍了常见的高阶组件。( &lt;a href=&#34;https://parg.co/biZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/biZ&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《N-API：下一代编写 Node.js 原生模块的接口》&lt;/a&gt;：Node.js 有着非常庞大而又生机勃勃的模块生态圈，这也是其一直保有活力与魅力的源泉。而现在的很多基于 C/C++ 编写的原生模块直接依赖于 V8 或者 NAN 接口，导致了它们缺乏稳定性的暴走，并且需要随着 Node.js 版本的更迭而不断变化或者重编译。而 N-API 则致力于解决这个问题，文本即是对于 N-API 的基本语法与当前状态的介绍。( &lt;a href=&#34;https://parg.co/bip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bip&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《面向 Web 设计师与开发者的免费电子书合集》&lt;/a&gt;：本文介绍了十数本优秀的面向 Web 设计师与开发者的免费的电子书，涵盖了 CSS&amp;amp;HTML 基础、现代 JavaScript 开发、Git、PHP 等多个领域。( &lt;a href=&#34;https://parg.co/bis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bis&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/using-filters-vue-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《在 Vue.js 中使用过滤器》&lt;/a&gt;：过滤器是 Vue 中常用的处理数据渲染结果的方式之一，我们首先需要明白过滤器并不是对于方法、推导值等的替代，毕竟它们并没有真实地转换数据，而只是对用户的可视结果进行了处理。自 Vue 2.0 之后框架本身并无内置的过滤器，而本文则是介绍了基本的过滤器的使用语法以及几个经典的使用场景。( &lt;a href=&#34;https://css-tricks.com/using-filters-vue-js/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-tricks.com/using-filters-vue-js/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://yarnpkg.com/blog/2017/05/31/determinism/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Yarn 与 npm5 比较》&lt;/a&gt;：随着 Node.js 8.0.0 一起发布的 npm 5.0.0 不仅在性能上得到了极大提升，还通过引入类似于 yarn.lock 的 package-lock.json 文件来实现所谓可确定的包管理。本文则是介绍了所谓可确定的包管理的具体含义，以及 yarn 与 npm5 各自不同的实现方式与优缺性的比较。( &lt;a href=&#34;https://parg.co/bir&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bir&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/biu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Node 8 与 Node 6 真实应用中性能比较》&lt;/a&gt;：Node 8 宣称带来了极大的性能提升，而本文作者则记录了其基于 React 的大型站点，从 Node 6 升级到 Node 8 前后的各项性能指标对比，从而量化的来反映 Node 8 带来的性能优化。作者横向比较了服务端渲染耗时、基于 Jest 的测试用例运行耗时、Webpack 编译耗时、NPM 安装耗时等几个方面，Node 8 相较于 Node 6 皆有更好的表现。( &lt;a href=&#34;https://parg.co/biu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/biu&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hyperapp/hyperapp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《hyperapp》&lt;/a&gt;：hyperapp 是仅 1KB 大小的用于构建前端应用的 JavaScript 库，它基于 Elm 架构，支持声明式界面编程与函数式编程，允许使用 JSX 声明界面并且灵活地分割与合并自定义的标签。hyperapp 实现的简洁明了，是不错的可以阅读源码的轻量级框架。( &lt;a href=&#34;https://github.com/hyperapp/hyperapp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hyperapp/hyperapp&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/biR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《HTTP 2 推送技术之难，真的远超我们想象》&lt;/a&gt;：在讨论页面加载性能问题时，我经常听到有人说“HTTP/2 推送可以解决这问题”，但我对这个技术的了解不多，于是打算深入研究一下。HTTP/2 推送远比我最初想象中更复杂，也更底层，但最让我措手不及的地方在于，这种技术在不同浏览器上的表现竟然有这么大的差别，本来我还觉得这技术已经足够成熟，可以在生产环境中使用了。本文并不是那种认为“HTTP/2 推送一无是处”的吐槽文。我觉得 HTTP/2 推送真的很强大，以后还会更加完善，但并不算能解决所有问题的万灵药。。( &lt;a href=&#34;https://parg.co/biR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/biR&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《这 WebAssembly，是 Mozilla 赢了》&lt;/a&gt;：Mozilla 提出 1 asm.js 与 Google Chrome 提出的 PNaCI 是都是致力于在浏览器中运行原生代码的技术方案。不过 PNaCI 却存在着自绝于 JavaScript 以及 HTML 等问题，并且其他的浏览器厂商很难去支持 PNaCI 标准。而 asm.js 则以轻量级的对于标准 Web 平台扩展的方式实现了这一目标，也就导致了最终 WebAssembly 决定靠近 asm.js 而不是 PNaCI。( &lt;a href=&#34;http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://robert.ocallahan.org/2017/06/webassembly-mozilla-won.html&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bi0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《JavaScript 模块现状》&lt;/a&gt;：近日随着各大浏览器纷纷开始支持 ESM(ECMAScript Moduls)，Node.js 中也计划引入 &lt;code&gt;*.mjs&lt;/code&gt; 作为 ESM 的文件扩展名，关于 JavaScript 模块化的未来发展也在社区引发了热切讨论。本文则是首先介绍了 ESM 在浏览器、Webpack 等构件工具以及 Node.js 中未来的实现，然后讨论了个人对于 ESM 未来发展以及对于程序开发本身的潜在影响。( &lt;a href=&#34;https://parg.co/bi0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bi0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/leandromoreira/digital_video_introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《数字化视频技术概述》&lt;/a&gt;：本文是面向所有有兴趣了解视频相关技术的同学的概述文章，希望以浅显易懂的文字，结合实例与可视化交互来一步一步地介绍视频处理相关的技术。目前主要内容包括了图片编码等基础名词与理论介绍、冗余移除、视频编码工作原理、在线视频流等相关内容。( &lt;a href=&#34;https://github.com/leandromoreira/digital_video_introduction&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/leandromoreira/digital_video_introduction&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/biP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《我们为什么选择使用 React 生态》&lt;/a&gt;：本文是京东金融移动研发部工程师分享的它们对于前端框架、工具与方法的选择过程中的考虑。( &lt;a href=&#34;https://parg.co/biP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/biP&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/biC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《写给 CSS 的情书》&lt;/a&gt;：世人诟病 CSS 久矣，而本文作者则对于 CSS 一见钟情且矢志不渝。本文是一篇不错的了解不同端开发中样式设置方式的文章，作者介绍了从 Java Applets 开始到 Android、iOS 应用开发中界面样式与主题设置的方式与技术，论证了 CSS 相较于这些方式具有更好的灵活性与便捷性。( &lt;a href=&#34;https://parg.co/biC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/biC&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bih&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《现代软件开发中的常见过度技术化思维》&lt;/a&gt;：本文是 2016 年的一篇老文，不过读来也是感觉受益匪浅。本文讨论了软件开发中程序员常犯的过度技术化的思维方式，及其可能带来的不良结果，譬如轻视市场人员、过度重用业务逻辑代码、过度泛型化、过度依赖于质量检测工具等等。( &lt;a href=&#34;https://parg.co/bih&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bih&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/hilongjw/vue-recyclerview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《vue-recyclerview》&lt;/a&gt;：vue-recyclerview 是基于 DOM 重用的能够处理大型列表项目的 Vue 组件，它能够用于构建高性能瀑布式列表或者无限列表。( &lt;a href=&#34;https://github.com/hilongjw/vue-recyclerview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hilongjw/vue-recyclerview&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://feathericons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Feather》&lt;/a&gt;：Feather 是一系列简约而美丽的开源图标集合，提供了常见的用户交互提示、媒体控制、通信、定位、天气等图标。( &lt;a href=&#34;https://feathericons.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://feathericons.com/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/qntm/base65536&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《base65536》&lt;/a&gt;：Base65536 是面向基于 UTF-32 编码文本的优化的二进制编码格式，而 base65536 则是首个支持该编码格式的模块。( &lt;a href=&#34;https://github.com/qntm/base65536&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/qntm/base65536&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gitsummore/nile.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《nile.js》&lt;/a&gt;：基于 Torrents 与 WebRTC 的端到端视频流播放技术实现工具。( &lt;a href=&#34;https://github.com/gitsummore/nile.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/gitsummore/nile.js&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/biQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《hacker-news-pwas》&lt;/a&gt;：基于不同的前端框架实现的符合 PWA 应用特性的 Hacker News APP 的合集，包括了常见的 React、Angular、Vue、Preact 等多个版本，并且均在 Lighthouse 评测中达到 90 以上的评分。( &lt;a href=&#34;https://parg.co/biQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/biQ&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6.3-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.3-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.3-frontend/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-17-期大前端技术生命周期模型wwdc-发布-safari-11面向生产环境的前端性能优化&#34;&gt;前端每周清单第 17 期：大前端技术生命周期模型；WWDC 发布 Safari 11；面向生产环境的前端性能优化&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/news/2017/06/GMTC-Geeks-technology-upgrades&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;《大前端技术生命周期模型》&lt;/strong&gt;&lt;/a&gt;：GMTC 全球移动技术大会主编徐川推出了 InfoQ 观察与总结大前端技术采用的生命周期，并表示大前端正处于密集创新阶段，未来将会有几项技术突破出来成为主流。(&lt;a href=&#34;http://www.infoq.com/cn/news/2017/06/GMTC-Geeks-technology-upgrades&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.infoq.com/cn/news/2017/06/GMTC-Geeks-technology-upgrades&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;《WWDC 中发布 Safari 11》&lt;/strong&gt;&lt;/a&gt;：Safari 11 带来了很多的新特性，包括开发者喜闻乐见的 WebRTC、网页快照、WebAssembly、iOS 中的拖拽支持等等；同时在 Safari 11 中我们还可以使用 Media Capture、WebCrypto、Resource Timing 等多种新的 API。( &lt;a href=&#34;https://parg.co/bLE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLE&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/news/2017/06/chrome-devtools-updates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;《Google Chrome 开发者工具更新》&lt;/strong&gt;&lt;/a&gt;：在 Google IO 2017 大会上，Paul Irish 发表了一段&amp;quot;2017 开发者工具年度报告&amp;quot;，他展示了一些 Chrome 开发者工具的新特性，其中包括能够帮助开发者简化代码和处理现代 JavaScript 需求的一些新特性。( &lt;a href=&#34;http://www.infoq.com/cn/news/2017/06/chrome-devtools-updates&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://www.infoq.com/cn/news/2017/06/chrome-devtools-updates&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://v8project.blogspot.jp/2017/06/v8-release-60.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;《V8 6.0 发布》&lt;/strong&gt;&lt;/a&gt;：V8 6.0 发布，提供了对 SharedArrayBuffer 的支持等新特性。( &lt;a href=&#34;https://v8project.blogspot.jp/2017/06/v8-release-60.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://v8project.blogspot.jp/2017/06/v8-release-60.html&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.openbloc.fr/webassembly-first-steps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《WebAssembly 初体验：重构简单游戏引擎》&lt;/a&gt;：WebAssembly 为我们提供了构建高性能的前端应用的途径，而本文则从零开始介绍如何使用 C 来覆写简单的 JavaScript 游戏引擎并且将其编译为 WebAssembly。本文依次介绍了如何搭建基础的 Emscription 工具链、使用 JavaScript 引入 wasm 模块、覆写并且优化某个小型游戏引擎、两个引擎的性能评测等等部分。( &lt;a href=&#34;http://blog.openbloc.fr/webassembly-first-steps/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://blog.openbloc.fr/webassembly-first-steps/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nativescript.org/blog/a-new-vue-for-nativescript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《使用 Vue 与 NativeScript 开发跨端应用》&lt;/a&gt;：目前标准的开发 NativeScript 应用的方式是使用朴素的 JavaScript 或者 Angular，而本文介绍了如何结合使用 Vue 与 NativeScript 来开发跨终端应用。本文首先阐述了 Vue.js 相较于 React 或者 Angular 的优势，然后阐述了使用 Vue 语法来开发基础 NativeScript 应用的步骤。( &lt;a href=&#34;https://www.nativescript.org/blog/a-new-vue-for-nativescript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.nativescript.org/blog/a-new-vue-for-nativescript&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《基于 Firebase 与 Vue.js 构建基于地理位置的聊天室》&lt;/a&gt;：本文介绍了基于 Firebase 与 Vue.js 构建某个基于地理位置搜索与配对的聊天室应用的过程，应用发布在&lt;a href=&#34;https://near.idgo.me./&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;，还是挺有意思的应用。本文除了介绍 Vue.js 项目的基础构建与语法之外，还介绍了所谓 Geohash 的知识与 Firebase 相关接口的使用。( &lt;a href=&#34;https://parg.co/bLH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLH&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://2ality.com/2017/05/util-promisify.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Node.js 8 中 util.promisify 介绍》&lt;/a&gt;：Node.js 8 为我们提供了新的工具函数 util.promisify()，它能够将某个基于回调的函数封装为基于 Promise 的函数。本文介绍了 util.promisify() 的基本使用，首先介绍了对于文件读取写入相关接口的封装使用，然后讨论了如何引入 async 语法，最后还介绍了自定义 promisify 函数的用法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《你应该掌握的关于 Node.js 子进程的知识》&lt;/a&gt;：Node.js 最初以单进程单线程非阻塞方式提供了强大的性能表现，不过在目前多核时代下仅使用单进程已远远不能承载日益增长的应用压力。本文即介绍在 Node.js 中如何使用 spawn()、exec()、execFile()、fork() 等多进程相关模块的用法与各自的特点，依次介绍了使用 spawn 来创建实现了 EventEmit 接口的子进程、使用 exec 执行子命令、使用 fork 创建自带通信信道的子进程等。( &lt;a href=&#34;https://parg.co/bLq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLq&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/biB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Figma 利用 WebAssembly 降低三倍加载速度》&lt;/a&gt;：自 WebAssembly 推出之后，很多开发者都开始尝试在小型项目中实践 WebAssembly，不过尚缺大型真实案例比较。而 Figma 因为其产品主要基于 C++ 实现，可以方便地编译到 WebAssembly 中并且与原方案进行性能比较。本文中 Figma 介绍了它们在 Firefox 中使用 WebAssembly 之后带来的加载性能提升以及下载尺寸的优化，同时还提及了目前 WebAssembly 在实际项目使用中存在的一些问题与风险。( &lt;a href=&#34;https://parg.co/biB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/biB&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《利用 React Apollo 减少 Redux 代码量》&lt;/a&gt;：Redux 为人诟病的一点就是需要大量的模板代码，而更多的代码往往也意味着更多的潜在错误与更高的维护代价。本文则介绍了如何利用 Apollo 来接管应用中的数据加载与呈现逻辑，从而减少 Redux 实现方案中加载数据生命周期中所需要的代码。( &lt;a href=&#34;https://parg.co/bLA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLA&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《CSS 局部作用域变量详解》&lt;/a&gt;：CSS 自定义属性或者所谓的 CSS 变量，为我们带来了真正的、不同于 SASS 等预处理框架中使用的类占位符的动态变量。本文介绍了 CSS 变量的基本定义语法与使用，以及如何使用 JavaScript 来动态修改 CSS 变量值从而动态地进行界面重渲染，最后阐述了目前浏览器对于 CSS 变量的支持情况以及可以使用的兼容方式。( &lt;a href=&#34;https://parg.co/bLS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLS&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《面向生产环境的前端性能优化清单》&lt;/a&gt;：在 Web 前端开发中，产品经理更多的会关注于寻找优秀的设计与内容，而开发者同样需要关注于如何进行前端性能优化。作者在本文中则分享了多年经验累积的性能优化清单，包括常见的资源优化、CSS 优化中常用的工具、常用的性能检测工具等等。( &lt;a href=&#34;https://parg.co/bLP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLP&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《渐进式图片渲染机制》&lt;/a&gt;：图片在网页中占据了重要的地位，合适的图片能够大幅提升用户体验，不过同样会占据大量的带宽；本文则着眼于如何综合利用懒加载与渐进式渲染等方式来优化带宽使用与用户体验。本文首先讨论了对于合适的图片格式的选择，然后介绍了常见的图片懒加载的技术，最后阐述了所谓渐进式编码与渐进式图片渲染的理念与实践。( &lt;a href=&#34;https://parg.co/bLp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLp&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Mobdux：整合 MobX 与 Redux 中优秀的部分》&lt;/a&gt;：MobX 与 Redux 为我们提供了截然相反地管理前端应用状态的方式，而本文则细致地分析对比了 Redux 与 MobX 的优缺点，并且从自己的实践经验角度出发提出了结合二者优点的 mobdux 框架。( &lt;a href=&#34;https://parg.co/bLd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLd&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bL0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《不会做动画的前端不是好开发》&lt;/a&gt;：自从有了前端开发这个概念以来，这个岗位所做的事情都是围绕着人机交互来开展的，主要包括展示信息给用户看，然后获取用户的意图并做出响应。随着终端设备以及业务的快速发展，前端工程也越来越复杂，所以分工也进一步精细化，有侧重做工具化与模块化架构的，有侧重无线体验或者 Web 与 Native 融合方面的，也有侧重复杂的商家后台或者数据可视化的，甚至有部分公司把 HTML+CSS 与 JS 的工作也分开的，所以出现了不同前端工程师会有不一样的侧重点。而目前越来越多的业务线有越来越高的动画类需求，而在动画方面能紧跟技术趋势的优秀前端实在是比较难找，本文则希望让那些想在动画方面有些提升的朋友有所帮助。( &lt;a href=&#34;https://parg.co/bL0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bL0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://thejameskyle.com/adopting-flow-and-typescript.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Flow 与 TypeScript》&lt;/a&gt;：本文主要对比了 Flow 与 TypeScript 这两个常用的 JavaScript 静态类型检测工具，首先介绍了在简单项目中如何使用 TypeScript 与 Flow。然后对比了二者在类型覆盖率上的渐进对比，会发现使用 Flow 之后因为其较为严格的类型要求会相对较快地实现高覆盖，而 TypeScript 则相对较为松弛。( &lt;a href=&#34;http://thejameskyle.com/adopting-flow-and-typescript.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://thejameskyle.com/adopting-flow-and-typescript.html&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://thejameskyle.com/javascripts-new-private-class-fields.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《JavaScript 中类的私有域定义》&lt;/a&gt;：目前对于类中的私有域定义已经达到了 Stage 2，本文即是详细介绍 #private 语法的使用以及设计理念。顾名思义，我们可以使用 #privateFieldName 方式来定义类中的私有域，该私有域仅允许该类的方法访问(包括静态方法)。本文还介绍了使用这种 HashTag 方式而不是其他语言中常见的 private 关键字来定义的考量。( &lt;a href=&#34;http://thejameskyle.com/javascripts-new-private-class-fields.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://thejameskyle.com/javascripts-new-private-class-fields.html&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bLZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《CSS 的现状》&lt;/a&gt;：毫无疑问我们正在见证着 JavaScript 社区与生态的极速变化，而与此同时可能很多人没有关注到 CSS 社区的进展，本文作者则是对于 CSS 的现状进行了综述并且提出了个人的观点。本文作者主要提出了五个论点：我们可以使用 CSS Module 来替代原有的 BEM 等命名方案、使用 Flexbox 来替代 float、使用 CSS Grid 来替代第三方网格库、使用 CSS 内置的变量、计算函数等特性来替代 SASS 等预处理库，乃至于最终我们完全可以使用 CSS-in-JS 来替代 CSS。本文具有极强的主观色彩，请批判性阅读。( &lt;a href=&#34;https://parg.co/bLZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bLZ&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/metro-bundler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《metro-bundler》&lt;/a&gt;：为了更好地社区支持，原 react-native-packager 被独立为 Metro Bundler；其致力于打造具有亚秒级别的重载以及较好可扩展性的模块系统，同时它仍然是 React Naive 内置的开箱即用的工具。( &lt;a href=&#34;https://github.com/facebook/metro-bundler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/facebook/metro-bundler&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/synacor/preact-i18n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《preact-i18n》&lt;/a&gt;：轻量级的面向 preact 的国际化库，支持基于层次化目录的命名空间定义、支持模板字符串与默认值等特性。( &lt;a href=&#34;https://github.com/synacor/preact-i18n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/synacor/preact-i18n&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/naver/billboard.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《billboard.js》&lt;/a&gt;：基于 D3 v4+ 的轻量级可重用的 JavaScript 图表库，支持 IE 9 以上浏览器。billboard.js 为我们提供了常见的柱状图、时序图、饼图等等多种图表类型。( &lt;a href=&#34;https://github.com/naver/billboard.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/naver/billboard.js&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6.4-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.4-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.4-frontend/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-18-期firefoxchromereactangular-发布新版本提升-rn-应用性能的方法&#34;&gt;前端每周清单第 18 期：Firefox、Chrome、React、Angular 发布新版本；提升 RN 应用性能的方法&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Firefox 54 发布》&lt;/a&gt;：在近日发布的 Firefox 54 版本中完成了对于 Firefox 的多进程版本升级，大大提升了稳定性，在未来会保证即使某个页卡崩溃了也不会影响其他页卡。此外，Firefox 54 中还引入了新的 WebExtension API，允许使用 WebExtension 来创建自定义的开发者面板；Firefox 54 中还加入了 CSS 的 clip-path 属性支持等新特性。( &lt;a href=&#34;https://parg.co/b9c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9c&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Chrome 60 Beta 发布，新增 Patint Timing API》&lt;/a&gt;：近日发布的 Chrome 60 Beta 版本中添加了 Paint Timing API、CSS font-display 等新特性，同时优化了证书管理、支付请求接口等功能。我们可以方便地使用 Paint Timing API 来对网页的加载指标中的，首屏绘制与首屏内容绘制进行计算，具体可以参考 &lt;a href=&#34;https://parg.co/b96&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leveraging the Performance Metrics that Most Affect User Experience&lt;/a&gt; 这篇文章。( &lt;a href=&#34;https://parg.co/b9q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9q&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《React 15.6.0 发布》&lt;/a&gt;：React 15.6.0 中主要带来了输入域的提升以及对于 Deprecation 提示的优化。该版本中 onChange 事件响应会变得更加稳定，并且能够处理 IE11 中存在的部分临界情况；同时该版本还优化了对于使用废弃接口的提示，不再强行使用 console.error 提示，而是替换为了 console.warn。( &lt;a href=&#34;https://parg.co/b9m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9m&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://angularjs.blogspot.jp/2017/06/angular-42-now-available.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Angular 4.2 发布》&lt;/a&gt;：该版本可以无缝替换之前的 4.x.x 系列版本，主要包含了对于 Angular Form 中的极值校验、提升了 i18n 工具等等内容；之外我们还可以参考&lt;a href=&#34;https://parg.co/b9G&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Angular 的现状与 Angular 5 的预定日期&lt;/a&gt;这篇文章来了解更多关于 Angular 的讯息。( &lt;a href=&#34;https://parg.co/b9Y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9Y&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9P&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《ESLint 4.0.0 发布》&lt;/a&gt;：作为大版本更新，ESLint 4.0.0 中添加了很多的新特性，并且针对之前版本中包含的错误进行了修正；可以点击查看原文了解具体的规则更新情况以及升级指南。( &lt;a href=&#34;https://parg.co/b9P&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9P&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《如何用好 JavaScript console》&lt;/a&gt;：JavaScript 中最主要的的调试工具之一即是 &lt;code&gt;console.log&lt;/code&gt;，而 console 对象还包含着其他几个常用的调试方法。本文则是介绍了 console 对象，以及如何使用它进行简单的时间消耗评测、优化数组或者对象输出格式、通过 CSS 优化输入等等。( &lt;a href=&#34;https://parg.co/b9o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9o&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《九个 React Native 动画指南》&lt;/a&gt;：本文通过介绍九个 React Native 动画地实现从零到一的介绍了 React Native 中的动画机制。包含了通过 Animated.timing 来添加样式动画、创建可伸缩的按钮、创建可拖拽的卡片、动态地变换元素的颜色、角度、序列位置等等实例。( &lt;a href=&#34;https://parg.co/b9d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9d&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b90&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Airbnb: 从 Mocha 迁移到 Jest 带来的测试性能优化》&lt;/a&gt;：本文介绍了 Airbnb 在将单元测试框架从 Mocha 迁移到 Jest 之后带来的性能提升，原本的测试时间从超过十二分钟降低到了不到五分钟。本文首先介绍了通过简单地全局设置来避免大量地测试代码更改，然后讨论了如何构建测试架构以提供测试速度并且减少不确定性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9S&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《在 Vue.js 中使用 Mixins》&lt;/a&gt;：在项目开发中我们经常会碰到两个组件的业务逻辑有所相似，可能共享相同的底层业务逻辑；此时我们就需要考虑如何来合理地划分代码，即避免冗余代码，也不能过度抽象。而本文则介绍了如何在 Vue.js 中使用 Mixins 来编写可重复使用的功能代码片；Mixin 允许我们将部分代码片封装到函数中然后动态地在多个组件中使用。( &lt;a href=&#34;https://parg.co/b9S&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9S&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9u&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《构建 React 组件库》&lt;/a&gt;：本系列文章循序渐进地介绍如何设计编写自己的小型组件库并且将其发布到 NPM 仓库中；第一篇文章着眼于如何从零开始搭建开发环境，第二篇文章则介绍如何利用 styled-components 来为组件添加样式、添加调色板、构建高效开发流程以及如何实践 Atomic Design 原则。( &lt;a href=&#34;https://parg.co/b9u&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9u&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9H&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《为什么我选择了 React 而不是 Vue？》&lt;/a&gt;：本文作者阐述了自己在技术选型过程中更倾向于 React 的原因，本文带有较强的主观色彩，请读者批判性阅读。本文作者认为 React 与 Vue 虽然是相似的前端组件型库，但是 Vue、Angular、Knockout 等框架依旧是以 HTML 为中心，使用指令来描述部分逻辑；而 React 则是以 JavaScript 为中心，完全使用 JavaScript 代码来描述逻辑。本文从模板、工具、状态的可变性等角度来论证自己的观点。( &lt;a href=&#34;https://parg.co/b9H&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9H&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bv9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《现代 Web 开发魔法书》&lt;/a&gt;：本书是对现代 JavaScript Web 开发中涉及知识的分类与介绍，来源于作者日常工作中发送给全栈 Web 团队新人的资源；目前已经纳入了超过两千的涵盖了项目、工具、插件、服务、文章、数据、站点等多方面的链接。本书包含了 Web 平台概述、HTML5，CSS，JS 特性介绍、常用的 GUI 框架与架构介绍、应用开发流程中使用的工具介绍等等栏目。( &lt;a href=&#34;https://parg.co/bv9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bv9&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《使用 Webpack 的 Magic Comment 特性简化代码分割》&lt;/a&gt;：新近发布的 Webpack 2.4.0 版本中引入了所谓的 Magic Comment 特性，该特性允许我们在动态导入时手动指定块名，从而能够帮助我们简化代码分割与服务端渲染的逻辑。本文则是以在 Universal Component 中实现 SSR 为例，介绍如何利用该特性来显式地关联需要导入的组件与块名。( &lt;a href=&#34;https://parg.co/b9A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9A&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b93&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《5 个提升 React Native 应用性能的方法》&lt;/a&gt;：本文作者分享了自己在过去一段时间内尝试提升公司 React Native 应用性能的实践经验，包括如何设置有效的性能测试、强制启动 no-bind 规则、使用函数式组件、重制 TabMap 的逻辑等等。( &lt;a href=&#34;https://parg.co/b93&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b93&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9K&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《基于 JavaScript 的机器学习》&lt;/a&gt;：人工智能与机器学习的浪潮汹涌而来，JavaScript 也并非旁观者；可能有很多人认为 JavaScript 过于缓慢、缺乏大量的科学计算库、仅适用于 Web 开发，而本文以及系列文章则深入浅出地介绍了如何利用 JavaScript 进行常见的深度学习操作。本文即以简单的回归拟合为例，从最基础的库安装、数据导入、数据预处理到模型训练、模型预测 介绍了如何使用 JavaScript 进行简单的机器学习任务。( &lt;a href=&#34;https://parg.co/b9K&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9K&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《京东 618：如何配合业务打造 JDReact 三端融合开发平台？》&lt;/a&gt;：良好解决多终端开发问题是提升团队开发效率的有效方法，本文全面解析了京东 JDReact 三端融合平台。本文首先回顾了传统无线开发的痛点，然后讨论了 React Native 的优势与局限，最后介绍了 JDReact 三端融合平台的整体架构、在功能、加载性能、内存方面的改进与优化以及发布到生产环境中的流程等内容。( &lt;a href=&#34;https://parg.co/b9U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9U&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《谈爬虫反爬虫套路，以及前端工程师在该领域的逆袭》&lt;/a&gt;：本文首先介绍了爬虫与反爬虫的现状，造成目前爬虫流量泛滥的原因，然后讨论了，爬虫反爬虫技术的现状以及双方相互套路的方式，最后聊了下前端工程师在该领域会起到的作用。( &lt;a href=&#34;https://parg.co/b9b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9b&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9p&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《JavaScript 内存管理速成》&lt;/a&gt;：本系列文章以漫画的方式生动有趣地介绍了 JavaScript 中内存管理的相关知识，首先介绍了 JavaScript 与 C 这两个风格迥异的语言是如何进行内存管理的，然后讨论了 ArrayBuffers 与 ShardArrayBuffurs 存在的意义以及可能引起的临界情况，最后讨论了在未来 WebAssembly 开发中应该如何使用 Atomics 来处理并发情况下的临界情况。( &lt;a href=&#34;https://parg.co/b9p&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9p&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b9Z&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《详解 HTTPS 基础以及如何从 HTTP 切换到 HTPPS》&lt;/a&gt;：HTTPS 已经成为了现代站点不可或缺的部分，Chrome 与 Firefox 等浏览器会为没有使用 HTTPS 的网站设置警告标识，搜索引擎也会给 HTTPS 的站点进行额外加分。本文则是先详细地解释 HTTPS 的底层原理，然后介绍如何为 Apache 站点添加证书并且启用 HTTPS 连接。( &lt;a href=&#34;https://parg.co/b9Z&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/b9Z&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/521dimensions/amplitudejs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《Amplitude.js》&lt;/a&gt;：Amplitude.js 是轻量级、零依赖的现代 HTML5 音频播放器，。( &lt;a href=&#34;https://github.com/521dimensions/amplitudejs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/521dimensions/amplitudejs&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/wcdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《WCDB》&lt;/a&gt;：WCDB 是由微信开源的，一个高效、完整、易用的移动数据库框架，基于 SQLCipher，支持 iOS, macOS 和 Android。( &lt;a href=&#34;https://github.com/Tencent/wcdb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/Tencent/wcdb&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/veltman/flubber&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《flubber》&lt;/a&gt;：flubber 是用于平滑形状变换动画的工具库。在 Web 开发中，如果我们需要在基于 SVG 或者 Canvas 构建的两个图形之间进行变换；如果这两个图形本身毫无关联，那么可能会出现异常的中间状态。而 flubber 则内置了一些推测算法来帮我们平滑这个变换过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ecrmnn/collect.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;《collect.js》&lt;/a&gt;：collect.js 提供了便捷且零依赖的操作数组与对象的多个工具函数，譬如 combine 函数可以将两个数组合并为对象列表，groupBy 可以根据键来进行分组等等。( &lt;a href=&#34;https://github.com/ecrmnn/collect.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/ecrmnn/collect.js&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>6.5-Frontend</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.5-frontend/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/6/6.5-frontend/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-19-期-vue-的优势与劣势nodejs-有望超越-javajs-在嵌入式及物联网的应用现状&#34;&gt;前端每周清单第 19 期： Vue 的优势与劣势；Node.js 有望超越 Java；JS 在嵌入式及物联网的应用现状&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;前端&lt;/code&gt; &lt;code&gt;前端每周清单&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/by0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack 3.0 正式发布&lt;/a&gt;：Webpack 团队近日宣布正式发布 Webpack 3.0 版本。在 2.0 版本发布之后，Webpack 团队与社区联系更为紧密，在优先实现社区希冀的功能需求的同时，提供了更快且更稳定的发布流程。对于本次发布的 Webpack 3.0 版本，用户可以便捷地平滑升级，享受新版本中带来的性能提升与 Magic Comment 等新特征。( &lt;a href=&#34;https://parg.co/by0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/by0&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expo SDK v18.0.0 发布&lt;/a&gt;：近日发布的 Expo SDK 18.0.0 版本基于 React Native 0.45，引入了一系列的新特性与性能提升。在该版本中 exp.json 被合并到了 app.json 中，从而简化了 React Native 生态系统与 Expo 使用者之间的差异；并且新的项目不再使用 Expo.registerRootComponent，ExNavigation 也被替换为了 React Navigation。除此之外，Expo 响应的开发工具 XDE、exp、Snack 等也都得到了优化。( &lt;a href=&#34;https://parg.co/byA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byA&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mikeal Rogers: Node.js 会在一年内超越 Java(*仅代表原作者个人看法，若有翻译不当之处请指正)&lt;/a&gt;：在近日的某个采访中，Node.js 的核心创建者与社区管理者之一 Mikeal Rogers，对 Node.js 在未来的发展表达了乐观的态度。他表示目前全世界范围内已经有了大约八百万开发者在使用 Node.js，并且每年以倍数增长；尽管目前 Java 仍然保持领先，但是如果 Node.js 能保证其发展势头，有望在明年超越 Java。作者在本文中还分享了 Node.js 的现状以及一些发展趣闻和本人的经历，感兴趣者可以阅读原文。( &lt;a href=&#34;https://parg.co/byE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byE&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://eslint.org/blog/2017/06/eslint-v4.1.0-released&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ESLint 4.1.0 发布&lt;/a&gt;：ESLint 4.1.0 是对于 ESLint 的小版本更新，包含了部分的新特性引入与此前版本中的异常修复。新版本中的特性包括了细粒度配置，即允许针对同一目录下的不同文件开启不同的配置、允许从 package.json 文件中设置忽略的文件、优化了 autofixes 的用法等等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;三分钟交互式介绍 Vue.js&lt;/a&gt;：Vue.js 是近年来逐步流行的轻量级构建前端界面的组件库，其相对平滑的学习曲线确保了开发者能够快速入门使用。而本文作者则循序渐进地介绍了 Vue.js 基础使用知识，并且在每一段中都包含了&lt;a href=&#34;https://scrimba.com/casts/crNKWHd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;交互式代码演示&lt;/a&gt;；作者依次介绍了 Vue.js 中模板语法与数据绑定、常见指令以及响应用户输入等内容；更多 Vue 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。( &lt;a href=&#34;https://parg.co/byU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byU&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;16 行代码构建基于 Node.js 的天气应用&lt;/a&gt;：本文是一篇浅显易懂的 Node.js 入门实践介绍，作者利用 Node.js 抓取来自 OpenWeatherMap 的开放数据并且打印在控制台中。本文依次介绍了如何注册并且获得 OpenWeatherMap 的 ApiKey、如何使用 npm 初始化项目、如何利用 request 抓取数据、如何优化命令行交互显示等等。( &lt;a href=&#34;https://parg.co/byY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byY&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TDD 与 Vue.js&lt;/a&gt;：在真实的项目中我们免不了需要进行代码测试，而本文即分享如何在 Vue.js 中遵循测试驱动开发的基础知识。本文首先利用 Vue CLI 的默认模板创建了一个简单的组件，然后为其添加部分基础功能，同时会为每个元素添加单元测试。( &lt;a href=&#34;https://parg.co/byQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byQ&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://css-tricks.com/server-side-react-rendering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 服务端渲染&lt;/a&gt;：本文循序渐进地介绍了 React 中服务端渲染的相关知识，首先讨论了服务端渲染相较于客户端渲染带来的优势、然后介绍了如何在 React 中添加服务端渲染的支持，最后还讨论了如何通过同构的高阶函数在服务端抓取数据然后显示在客户端。( &lt;a href=&#34;https://css-tricks.com/server-side-react-rendering/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://css-tricks.com/server-side-react-rendering/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rust、WebAssembly 与 Webpack&lt;/a&gt;：WebAssembly 是新的运行于 Web 平台的二进制格式，我们能够将 C、C++、Rust 这些语言编译到 .wasm 文件格式中然后在浏览器环境下运行他们；通常这些编译后的代码在包体体积与运行速度上都会比 JavaScript 有明显提升。而本文则着眼于介绍如何在浏览器中执行底层的 Rust 代码，也可以参考&lt;a href=&#34;https://parg.co/by4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文章&lt;/a&gt;( &lt;a href=&#34;https://parg.co/by4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/by4&lt;/a&gt; )来了解更多的关于 WebAssembly 快速实践的知识。( &lt;a href=&#34;https://parg.co/byh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byh&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建生产环境下的 CSS Grid 布局&lt;/a&gt;：CSS Grid 为我们带来了真正的网格布局解决方案，会为现有的 Web 布局方式注入新的活力。本文则介绍了 CSS Grid 的基础概念和它带来的机会与挑战，应该如何在实践中利用 CSS Grid 进行应用布局；作者还以 WordPress 主题为例，介绍了真实应用开发中存在的问题、对比了老的解决方法与基于 CSS Grid 的布局方式。本文首先介绍了 CSS Grid 的基础语法与设计模式，然后讨论了在生产环境中应该如何一步步地引入 CSS Grid，包括如何从草稿设计开始进行语义化布局以及对于浏览器兼容性的保证等。( &lt;a href=&#34;https://parg.co/byc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byc&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 框架的优势与缺陷(*仅代表原作者个人看法，若有翻译不当之处请指正)&lt;/a&gt;：Vue.js 已经在国内的很多公司得到了广泛应用，与 Google 的 Angular 以及 Facebook 的 React 鼎足而立，本文作者则是从自己的角度阐述了 Vue.js 目前的优势与潜在缺陷所在。首先 Vue.js 的优势在于其包体较小，良好的文档方便开发者理解与使用，并且能很快地集成到现有项目中，其灵活性与数据通信机制也保证了项目的可扩展性。而目前来看 Vue.js 的缺陷则在于其开发者社区可能不如 React 等成熟，并且主要使用者以国人为主，与英语社区的交流存在一定语言障碍，同时其灵活性本身也是一种双刃剑，对于某些开发者而言反而会造成困难；更多 Vue 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。( &lt;a href=&#34;https://parg.co/byl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byl&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 在嵌入式设备与物联网中的应用现状&lt;/a&gt;：随着近年来 Web 的发展与 JavaScript 的崛起，JavaScript 被应用到了许多原本不曾想象到的场景中，从服务端、工作站、数据库、桌面环境到物联网设备中，都可以见到 JavaScript 的身影。而本文则概括了 JavaScript 在不同的嵌入式微型设备中的应用现状，并且选择了具有代表性的设备介绍了具体的使用场景与实践方法。( &lt;a href=&#34;https://parg.co/byr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byr&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 Webpack 加速 Vue.js 应用的四种姿势&lt;/a&gt;：Webpack 是开发 Vue.js 单页应用的必须工具之一，它能够帮你处理复杂的编译步骤从而简化开发流程，并且能够帮助你优化应用体积与性能表现。而本文中作者即从单文件组件、优化 Vue 构建配置、浏览器缓存管理、代码分割这四个角度讨论了如何利用 Webpack 提供的特性来加速 Vue.js 应用。( &lt;a href=&#34;https://parg.co/byC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byC&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 JavaScript 的机器学习：深入监督学习算法&lt;/a&gt;：本文是基于 JavaScript 的机器学习系列的第二部分，主要介绍监督学习算法 kNN。kNN 算法通常被用于分类或者回归问题，本文首先介绍了 kNN 算法的基础原理，然后介绍了如何利用 ml-knn、csvyojson、prompt 等库对 Iris 数据集中的数据进行训练与预测。( &lt;a href=&#34;https://parg.co/byR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byR&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大前端公共知识梳理：这些知识你都掌握了吗？&lt;/a&gt;：近年来，随着移动化联网浪潮的汹涌而来与浏览器性能的提升，iOS、Android、Web 等前端开发技术各领风骚，大前端的概念也日渐成为某种共识。其中特别是 Web 开发的领域，以单页应用为代表的富客户端应用迅速流行，各种框架理念争妍斗艳，百花竞放。Web 技术的蓬勃发展也催生了一系列跨端混合开发技术，希望能够结合 Web 的开发便捷性与原生应用的高性能性；其中以 Cordova、PWA 为代表的方向致力于为 Web 应用尽可能添加原生体验，而以 NativeScript、ReactNative、Weex 为代表的利用 Web 技术或者理念开发原生应用。平心而论，无论哪一种开发领域或者技术，他们本质上都是进行图形用户界面(GUI)应用程序的开发，面对的问题、思考的方式、架构的设计很大程度上仍然可以回溯到当年以 MFC、Swing、WPF 为主导的桌面应用程序开发时代，其术不同而道相似。( &lt;a href=&#34;https://parg.co/byS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byS&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/dabbott/react-express&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Express&lt;/a&gt;：针对目前 React 及其生态圈学习曲线过于陡峭的囧境，作者希望创建一个多合一的面向初学者的 React 技术栈学习教程，从最简单的 create-react-app、npm、webpack、babel 等工具的使用，到 ES2015、ES2016、JSX 等基础语法，最后还包括 React、Redux、CSS-in-JS 等工程实践。( &lt;a href=&#34;https://github.com/dabbott/react-express&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/dabbott/react-express&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/by6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 中存在纯函数吗？&lt;/a&gt;：随着函数式编程在前端界面开发中的流行，纯函数的概念相信很多人都很熟悉，不过文本作者认为 JavaScript 中是否存在真正意义上的纯函数还值得商榷。本文首先介绍了纯函数的基本定义，然后给出了我们熟知的 JavaScript 中常见的纯函数定义范式。不过作者认为函数是 JavaScript 中的一等公民，函数变量或者某个 Object 的属性方法都有可能被重新赋值，因此 JavaScript 中无法构建真正严格的纯函数。( &lt;a href=&#34;https://parg.co/by6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/by6&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/byf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;面向前端开发者的软件开发基本原则&lt;/a&gt;：毫无疑问，前端开发者也是软件工程师，作者在本文中介绍了自己归纳的软件工程师应该遵循的基本原则与规范。作者在本文中讨论了避免重复代码(DRY)、单一职责(SRP)、依赖注入(DI)、单元测试等原则，同时给出了一些重构代码与编写 Clean Code 的实践指导书。( &lt;a href=&#34;https://parg.co/byf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/byf&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jondot/react-flight&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Flight&lt;/a&gt;: React Flight 能够帮我们轻松地构建组件之间的过渡动画，它允许开发者定义初始状态的组件与结束状态的组件，React Flight 会自动地完成组件之间的切换并且添加动画效果。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/rauliyohmc/react-native-offline-utils&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;react-native-offline-utils&lt;/a&gt;：react-native-offline-utils 允许我们在 React Native 应用中优雅地处理离线情况，能够根据连接情况动态判断需要使用的组件渲染或者数据抓取逻辑。同时 react-native-offline-utils 还能够平滑地集成 Redux，能够自动转发特殊的离线 Action。( &lt;a href=&#34;https://github.com/rauliyohmc/react-native-offline-utils&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rauliyohmc/react-native-offline-utils&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/decaffeinate/decaffeinate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;decaffeinate&lt;/a&gt;：CoffeeScript 在很长一段时间内帮我们解决了传统 JavaScript 中存在的痛点，不过随着 ES6&amp;amp;ES7 的逐步流行，我们还是要从 CoffeeScript 中回归到 JavaScript；decaffeinate 正是能够方便地将 CoffeeScript 代码转化为现代的 JavaScript 代码。( &lt;a href=&#34;https://github.com/decaffeinate/decaffeinate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/decaffeinate/decaffeinate&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://golden-layout.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;golden-layout&lt;/a&gt;：golden-layout 是非常强大的基于 JavaScript 的 Web 布局工具，它支持窗口的拖拽、缩放以及原生式的弹窗，同时 golden-layout 还提供了丰富的接口以方便动态增删元素、修改布局或者自定义主题。golden-layout 官网还提供了与 RequireJS、React、Angular 等多种其他流行框架协同使用的示例。( &lt;a href=&#34;http://golden-layout.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://golden-layout.com/&lt;/a&gt; )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
