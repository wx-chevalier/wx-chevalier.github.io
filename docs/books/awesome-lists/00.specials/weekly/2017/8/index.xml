<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>8 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/index.xml" rel="self" type="application/rss+xml" />
    <description>8</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>8</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/</link>
    </image>
    
    <item>
      <title>8.1</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.1/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-25-期vue2-响应式原理rn-运行内置-nodejs-巧用-proxy-反混淆graphql-优劣思辨深入-react-动画&#34;&gt;前端每周清单第 25 期：Vue2 响应式原理，RN 运行内置 Node，JS 巧用 Proxy 反混淆，GraphQL 优劣思辨，深入 React 动画&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bgy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Storybook 3.2 发布&lt;/a&gt;：Storybook 允许我们在现代组件化开发中快速地浏览独立组件；在近日发布的 Storybook 3.2 版本中，添加了对于 Vue.js 的支持。除此之外，本版本还引入了层次化的 Story 布局，允许开发者更加灵活地定义组件的展现层次；同时还允许在移动设备中直接浏览 React Native 组件，还修复了之前的部分错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack 着手为 WebAssembly 添加头等支持&lt;/a&gt;：目前 Webpack 中仅将 JavaScript 作为头等公民看待，其他的资源(HTML、CSS 等)都需要转化为 JavaScript 表达式进行处理；而近日 Webpack 渲染与 Mozilla 基金会达成合作，获得了来自 MOSS 项目的 $125,000 资金支持。Webpack 着手为 WebAssembly 添加头等支持，我们也可以在 &lt;a href=&#34;https://parg.co/bgI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Issue Tracker&lt;/a&gt; 中了解最新的进展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bFU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webkit 着手开发 PWA 特性支持&lt;/a&gt;：Progressive Web Applications(PWAs)通过创建 Service Worker 来使 Web 用户能享受到推送、离线支持等原生应用的特性，是现代 Web 开发中重要的组成。不过令人遗憾的是 Safari 一直未表态支持 PWAs 相关特性，这一点让很多开发者也颇为不满，在 &lt;a href=&#34;https://parg.co/bFY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apple’s refusal to support Progressive Web Apps is a detriment to future of the web&lt;/a&gt; 此文中就进行了许多的讨论；不过近日有开发者发现，在 Webkit 的 BugList 与 Changelog 上出现了有关 PWA 的内容，尽管可能还需要数月乃至于更长的时间，我们相信未来 Safari 会给予 PWA 更好的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bFp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TensorFire：基于 WebGL 的浏览器端高性能神经网络框架&lt;/a&gt;：深度学习与人工智能技术正在逐步地改变人们的生活，以 TensoFlow 为代表的一系列深度学习与神经网络框架也是如日中天，迅猛发展。TensorFire 是基于 WebGL 的，运行在浏览器中的神经网络框架。使用 TensorFire 编写的应用能够在实现前沿深度学习算法的同时，不需要任何的安装或者配置就直接运行在现代浏览器中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.nativescript.org/blog/vue-and-nativescript-in-one-minute&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 与 NativeScript 初窥&lt;/a&gt;：NativeScript 框架最值得称道的即是其扩展性，它目前已经支持原生 JavaScript、Angular、Vue.js 等多种框架或者编码方式，同时未来还计划支持 Preact 等框架。本文即是介绍如何使用 NativeScript 与 Vue.js 协同开发，首先介绍了如何使用 NativeScript 命令行工具创建项目，然后引入 Vue.js 插件以及如何运行该项目；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/byL &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ElemeFE/node-practice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 实践教程&lt;/a&gt;：本教程是希望以一些有名的模块/功能为基础, 在实现的过程中讲解各项知识点，主要分为控制流、Web、存储等几个部分。目前完成的模块包括 async 介绍、Promise 实现、coroutine 实现、co 模块介绍、HTTP Client 实现、HTTP Server 实现等；更多 Node.js 相关资料参考 &lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/be0 &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bFC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airbnb React VR 实践&lt;/a&gt;：Airbnb 自 2014 年以来一直使用 React 构建用户交互界面，并且为社区贡献了很多优秀的开源项目；而随着 React VR 的发布，Airbnb 也利用其来快速原型化与测试 VR 相关的创意。本文即是介绍 Airbnb 在 React VR 实践方面的一些经验总结，本文首先阐述了 React、React Native 与 React VR 三者之间的关系与差异，然后介绍了 React VR 在布局、基础组件方面的语法，最后还讨论了 React VR、WebVR 以及 VR 技术本身的发展可能性。更多 WebVR 相关资料参考 &lt;a href=&#34;https://parg.co/bFR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://parg.co/bFR&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bFO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;突破 CSS 前端面试&lt;/a&gt;：不同于传统的软件工程师面试比较注重算法，前端面试可能更多的注重综合能力以及领域语言的掌握；本文即着眼于对于面试中常见的 CSS 问题的总结与介绍。本文列举的问题譬如 Resetting 与 Normalizing 区别、floats 工作机制阐述、z-index 与 stacking context 比较、BFC 描述等等；更多 CSS/SCSS 相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/baH &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bFs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 性能优化&lt;/a&gt;：本文介绍了些常见的 Angular 开发中可用的性能优化建议，包括了利用 ChangeDetectionStrategy.OnPush 来显式声明组件间依赖、利用 trackBy 来追踪唯一标识符和避免冗余的增删、避免模板中的计算推导、禁用变化监测、使用懒加载等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://morningstar.engineering/vue-2-unit-testing-primer-48d1d616a981&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 2 单元测试指南&lt;/a&gt;：本文主要介绍如何利用 Jasmine 为 Vue.js 2 应用搭建完整的单元测试；这里选用 Jasmine 的原因是它本身的性能较好，并且 Vue.js 本身也是使用该测试框架。本文首先介绍了环境搭建与待测试的组件构成，然后依次介绍了配置测试环境、如何根据组件的业务功能逻辑选定测试点、如何编写不同目标的测试用例等内容；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/byL &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bFh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入 React 动画实践&lt;/a&gt;：本文介绍了在 React 开发中多种创建动画效果的途径，包括了基于 React 组件状态的 CSS 动画、基于 React 组件状态的 JavaScript 样式动画以及第三方依赖的 React Motion、Animated、Velocity-React 等库。本文最后还讨论了如何用 GreenSock 等经典强大的动画库来辅助 React 组件动画开发；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/bM1 &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bF3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 如何解析 Form 上传？&lt;/a&gt;：NPM 和 GitHub 里的开源组件帮我们解决了很多繁琐的工作，但是也让我们失去了很多深入技术细节的机会。在现有组件无法满足我们需求的时候，就需要我们来自己动手丰衣足食了。作者前段时间遇到了一个需要手动解析 Form 表单上传的机会，也借此为各位解析一下 Node.js 解析 Form 上传的实现细节。更多 Node.js 相关资料参考 &lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/be0 &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/denysdovhan/wtfjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 中有趣而又无语的例子&lt;/a&gt;：JavaScript 是一门有趣的语言，它有着简单的语法、庞大的生态系统与社区，不过 JavaScript 中也有着很多令人无语的地方。本文即是对 JavaScript 中一些有趣的、出乎意料的用法收集，对于初学者是个不错的深入教程，而对于资深开发者也可以拿来作为面试题目。本文中包含的例子譬如 &lt;code&gt;[] == ![]&lt;/code&gt;、NaN 的用法注意、try-finally 等等；更多 JavaScript 相关资料参考&lt;a href=&#34;https://parg.co/bMI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/bMI &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bFm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;安息吧 REST APIs，GraphQL 长存&lt;/a&gt;：GraphQL 是 Facebook 针对复杂关系的数据获取与操作开源的数据查询语言，本文则是对比了传统的 REST APIs 与 GraphQL 各自的优劣，讨论了 GraphQL 相较于 REST APIs 更适合应用的场景；不过本文并非提倡使用 GraphQL 完全替代 REST APIs，也陈述了 GraphQL 存在的不足与缺陷。本文首先概括性地总结了 GraphQL 解决地三个问题，然后介绍了 GraphQL 的由来和其内部原理，最后讨论了 GraphQL 这种灵活性本身的代价。更多 GraphQL 相关资料参考 &lt;a href=&#34;https://parg.co/b1e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/b1e &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8UqHCrGdxOM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Proxy 的 PopUnder 库反混淆&lt;/a&gt;：本视频通过对某个商用的 Chrome 59 中 PopUnder 库，的执行过程解析，来介绍如何利用 ES6 的 Proxy 进行，简单的 JavaScript 混淆代码逆向破解。视频还是挺有意思的，作者首先分析了经过混淆的源代码，发现无法下手；然后利用 Proxy 监听常见的 Windows 中 createElement 等函数的调用来了解该库的执行流程，最后再根据 API 的调用顺序复现出该库。更多 JavaScript 设计模式相关参考&lt;a href=&#34;https://parg.co/bIO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/bIO &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bF4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入 Vue.js 响应式原理&lt;/a&gt;：本文作者从 Java 与 C# 中经典的 Getters/Setters 引入，讨论了 Vue.js 中从组件渲染函数、数据的 Getter、Setter 劫持、监听器的控制以及重渲染触发整个生命流程。更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; https://parg.co/byL &lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zeit/hazel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hazel&lt;/a&gt;: Hazel 是 Zeit 开源的轻量级 Electron 应用更新服务器，它支持 macOS 与 Windows 应用的同步更新。Hazel 基于 micro 库构建，能够自动地从 Github Releases 抓取数据并且缓存在内存中，并且没十五分钟自动刷新下数据。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/staltz/react-native-node&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Native Node&lt;/a&gt;: React Native Node 能够在基于 React Native 开发的 Android 应用中启动后台 Node.js 进程，从而可以利用 Node.js 中的流、文件系统接口等特性来进行功能操作；React Native Node 主要依靠 Node.js 7.1.0 版本能够被独立编译为 bin_node_v710 可执行文件。另一方面，尽管 iOS 并不支持直接运行 V8，但是&lt;a href=&#34;http://www.janeasystems.com/blog/node-js-meets-ios/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;该项目&lt;/a&gt;正在致力于为 ChakraCore 打造类 V8 特性支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.react-simple-maps.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;react-simple-maps&lt;/a&gt;: react-simple-maps 是基于 d3-geo 与 topojson 的 React 地图组件库，允许开发者快捷方便地构建自定义的 SVG 地图；目前的特性包括了缩放、标记、自定义 SVG 标记、自定义着色、气泡图、动画支持等等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/epicmaxco/vuestic-admin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vuestic Admin Dashboard&lt;/a&gt;: 基于 Vue.js 与 BootStrap 4 的响应式管理控制台，包含了 36 个元素、18 个页面、18 个自定义图标等内容；其使用 Chart.js 构建了响应式图标、利用 Leaflet 与 amMap 构建可视化地图组件等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bFf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;股权、期权有哪些坑？从技术创业的角度说开去&lt;/a&gt;：本文整理自知道创宇 CTO 兼 COO 杨冀龙在 GTLC 全球领导力峰会上的演讲，原题为《技术创业那些事儿》。本文从依赖独特技术领先与依赖业务领先等不同类型的创业公司的股权分配、期权分配、投融资以及创业人自己的坚持等方面分享创业经历过哪些坑、该怎么处理。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”；或者可以阅读往期文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Web 前端入门与工程实践&lt;/a&gt;的&lt;a href=&#34;https://parg.co/bh1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28225477&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单第 24 期：React 16 中异常处理与 Fiber 实战、Vue 图表与 jQuery 插件、V8 Turbofan 性能优化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/27932159&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单第 22 期：ES8 正式发布、React 与 GraphQL 开发指南和性能优化，Vue.js 2.4.0 发布&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>8.2</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.2/</guid>
      <description>&lt;h1 id=&#34;前端每周清单第-26-期nodejs-微服务实践vuejs-与-graphqlangular-组件技巧headlesschrome-攻防&#34;&gt;前端每周清单第 26 期：Node.js 微服务实践，Vue.js 与 GraphQL，Angular 组件技巧，HeadlessChrome 攻防&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bjr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firefox 55 引入 WebVR 支持&lt;/a&gt;：近日发布的 Windows 平台上的 Firefox 55 版本，成为首个支持新 WebVR 标准的桌面浏览器；Mozilla 希望能够以此推动 WebVR 的进一步发展。除此之外，Firefox 55 还支持包括 async generators 在内的众多 ES2017/2018 特性，并且进一步提升了浏览器的性能表现以及安全保障；详细的特性说明请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/PAIR-code/deeplearnjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google 开源 JavaScript 机器学习库 DeepLearn.js&lt;/a&gt;：作为 Google 开源的可实现硬件加速的机器学习 JavaScript 库，DeepLearn.js 提供高效的机器学习构建模块，使我们能够在浏览器中训练神经网络或在推断模式中运行预训练模型。它提供构建可微数据流图的 API，以及一系列可直接使用的数学函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zeit.co/blog/next3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Next.js 3.0 发布&lt;/a&gt;：Next.js 是用于快速创建 React 应用的零配置、单命令工具链，其内建支持了服务端渲染、代码分割等特性。在 3.0 版本中，Next.js 引入了静态导出功能，可以将 Next.js 应用导出为静态界面；同时添加了动态导入的支持，允许动态导入外部依赖，动态导入 React 组件等操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 8.3.0 发布，引入 Ignition 与 TurboFan 执行流&lt;/a&gt;：Ignition 与 TurboFan 是 V8 5.9 版本中提供的新的解释器与编译器，它们替换了自 2010 年以来的 Full-codegen 与 Crankshaft，可以阅读&lt;a href=&#34;https://v8project.blogspot.com/2017/05/launching-ignition-and-turbofan.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文章&lt;/a&gt;了解新的执行流带来的巨大性能优化。新版本为 Node.js 带来了极大的性能提升，除此之外新版本还修复了 8.x 系列中存在的部分错误，详细的特性与更新列表可以查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 5 与 Progressive Web Apps&lt;/a&gt;：即将于九月份发布的 Angular 5 版本将会是首个由 Google 驱动的 Progressive Web Apps 框架，Angular 5 中提供的特性包括：内建的 Progressive Web Apps 支持、能够移除冗余代码、压缩应用体积的构建优化器、服务端渲染中集成 Material Design 组件等。本文还介绍了对于 Angular 6 的开发计划的简述以及依赖注入、HTML 模板引擎等一系列 Angular 优势的分析。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bjw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;三周时间打造全栈 JavaScript Web 应用&lt;/a&gt;：本文记录了某个编程初学者如何用三周时间，循序渐进地从零构建出，基于 JavaScript 的全栈电子商务应用。本文从最初的产品设计与原型图构建开始，然后介绍了如何选择合适的数据结构与数据库。接下来介绍了如何创建 Github 仓库并且使用敏捷开发流程，最后介绍了如何利用 Express 与 Firebase 搭建服务端、使用 React 以及 Victory.js 构建前端应用等内容；更多 JavaScript 相关学习参考&lt;a href=&#34;https://parg.co/bWW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 开发：语法基础与实践技巧&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2H&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 GraphQL 创建同构 Vue.js 应用&lt;/a&gt;：GraphQL 是由 Facebook 开源的面向接口的查询语言，能够弥补 REST API 中的不足；本文即介绍如何协同使用 Vue.js 与 GraphQL 来开发同构应用。本文首先介绍了如何搭建基本的 GraphQL 服务器，然后讨论了如何在 Vue.js 项目中引入 vue-apollo、ApolloClient 等依赖项并且创建简单的 GraphQL 客户端实例，最后介绍了在 Vue.js 组件中使用 graphql-tag 提供的便捷指令来快速实现前后台的数据查询；更多 GraphQL 相关资料参考&lt;a href=&#34;https://parg.co/b1e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2l&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 Node.js 构建 API Gateway&lt;/a&gt;：随着现代业务复杂度的增加，微服务的理念正在得到更多的落地实践；作为微服务架构的重要组成部分，API Gateway 能够为所有的后端服务提供统一的权限校验与客户端协议兼容的抽象层。本文首先介绍了微服务的基础架构与 API Gateway 的概念，然后介绍了面向前端团队的 Node.js API Gateway 组成；接下来详细的分析了 API Gateway 的基础功能需求：路由与版本、迭代式设计、权限校验、数据聚合、数据序列化与反序列化、限流与缓存等等，最后讨论了基于 Express 的 API Gateway 的实现。更多 Node.js 相关资料参考&lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/VasSonic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 VasSonic 构建高性能 H5 首屏渲染&lt;/a&gt;：VasSonic 是由腾讯 VAS 团队开发的轻量级高性能混合框架，它能够有效地提升 Android 与 iOS 平台上网站的首屏加载速度；VasSonic 不仅能够优化服务端渲染地静态或者动态网站，还能够对于 Web 缓存资源进行有效优化。VasSonic 使用了自定义的 URL 连接来替代原本的网络连接来请求 index 界面，因此它能够提前或者并发地请求资源，从而避免了用户额外的等待时间；更多使用信息与特性请参考原本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bjg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 std/esm 在 Node.js 开发中使用 ES Modules&lt;/a&gt;：随着主流浏览器逐步开始支持 ES Modules 标准，越来越多的目光投注于 Node.js 对于 ESM 的支持实现上；Node.js 拟计划在 2020 年发布的 9.x 版本中引入内置的 ESM 支持。而近日正式发布的 @std/esm 为我们提供了高性能的 Node.js 中 CommonJS 与 ES Modules 模块间调用，其能够作用于 Node.js 4.x 以上版本；它能够顺滑地集成到现有的 Webpack、Babel 环境中，并且支持不同模块使用不同的依赖版本。不同于目前的解决方案需要是发布编译之后的 CommonJS 格式的文件，@std/esm 能够以最小的代价的、按需转化的、动态缓存的方式来进行源代码转化。更多 Node.js 相关资料参考&lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bjD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Angular 组件的四个技巧&lt;/a&gt;：从.5 版本的 AngularJS 开始，组件就成为 Angular 的一部分，它为代码的组织和回收提供了一种便捷的方式。Angular(Angular2 的简称)与其说是 Angular 1.x 的升级，不如说是“续集”，它在移动支持和其他功能的基础上进行了完全地重写。这里，1.x 中使用的控制器完全被组件取代。无论是否曾经使用或想继续坚持 1.x，无论是从零学起还是在跨越阶段，为了确保代码尽可能地优雅且不会过时，你都需要开始使用组件。无论属于以上哪一类，都可以在这里找到很多帮助简化流程的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://meowni.ca/posts/shadow-dom/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Shadow DOM 的样式封装&lt;/a&gt;：Shadow DOM 是 Web Components 标准的重要组成部分，它能够将 DOM 树进行隔离封装，而本文则是介绍如何利用 Shadow DOM 实现对于样式类的隔离封装。由于 CSS 并没有提供内置的模块化或者作用域机制，而在大型项目中不同组件间的样式又极易引发冲突，因此我们需要选择合适的 CSS 样式隔离方案。目前常用的隔离方案有 BEM 命名策略、IFrame、CSS Modules、CSS-in-JS 等，本文首先盘点了这些方案的优势与不足；然后介绍了 Shadow DOM 的基本原理以及如何应用到样式封装上。更多 CSS/SCSS 相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://intoli.com/blog/making-chrome-headless-undetectable/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Headless Chrome 爬虫攻防&lt;/a&gt;：Headless Chrome 为我们提供了便捷的自动化浏览器操作方式，也方便我们构建面向动态网页的爬虫；前几日在 Hacker News 上的一篇如何检测 Headless Chrome 的文章，详细列举了可用的辨别是否为 Headless Chrome 的方法，而本文即是讨论了如何反制这些检测方案。方案包括对于 User Agent 检测可以在启动时自定义 User Agent、对于语言与插件的检测可以插入脚本动态修改 language 与 plugins 属性、对于 WebGL Vendor 与 Renderer 可以 Hook 参数调用、对于 Broken Image 可以修改文件描述符等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://pspdfkit.com/blog/2017/webassembly-a-new-hope/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly 在 PSPDFKIT 的实践&lt;/a&gt;：随着今年三月份 WebAssembly Community Group 就标准达成一致，越来越多的主流浏览器开始支持 WebAssembly，本文即是 PDF 工具开发者 PSPDFKIT 介绍它们利用 WebAssembly 开发浏览器端渲染的 PDS 预览工具的实践经验。本文首先介绍了 asm.js 的工作原理与编译机制，然后阐述了 WebAssembly 的概念与组成，最后介绍了 WebAssembly 在 PSPDFKit 的实践经验以及他们在将原本大型 C++ 代码库转化为 WebAssembly 格式时的体验；更多 WebAssembly 相关资料参考&lt;a href=&#34;https://parg.co/b2S&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bj7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 全家桶：石墨文档大前端技术选型分享&lt;/a&gt;：技术选型是个很大的话题。对于创业公司而言，为了适应业务节奏，灵活与高开发效率是技术选型最看重的两点。而这两点也是这些年前端技术井喷时期新出现的技术最注重解决的两个问题。然而石墨文档作为一款拥有众多企业用户的富前端应用，复杂的表格、文档以及离线同步逻辑使得我们对于前端技术栈的工程化和稳定性有很高的要求，考虑到过于新的技术往往生态尚不完善以及相关的最佳实践缺乏验证，我们对于这些技术的选择相对谨慎。石墨文档前端团队的所有技术选型也都是围绕如上两点考虑的；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Vue.js 的原生应用开发：Weex 与 NativeScript 对比&lt;/a&gt;：Vue.js 相较于 React 与 Angular 有着更为平滑的学习曲线，不过目前 Vue.js 还没有内建的类似于 React Native 这样的原生应用开发方案。但是 Weex 与 NativeScript 都能够弥补 Vue.js 的这个暂时性不足，每周清单在前几期中也推荐过 NativeScript 与 Vue.js 协同开发的相关文章，本文即是对比 Weex 与 NativeScript 应用在原生开发中的各自优势与不足；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/byL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;你看到的 Node.js 权限校验指南可能都存在着错误&lt;/a&gt;：权限校验几乎是每个服务端应用程序的标配，本文作者在搜索学习 Node.js / Express.js 相关的权限校验教程时发现大部分都或多或少地存在着问题，因此编撰了这篇文章以提醒其他开发者。常见的误区可能包括凭证的存储方式、密码的重置策略、API Tokens 的生成与校验、限流等多个方面；更多 Node.js 相关资料参考&lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.algolia.com/performant-web-animations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;高性能 Web 动画与交互：到达 60 PFS&lt;/a&gt;：为用户提供顺滑的交互与动画体验是大部分 Web 应用的挑战之一，很多开发者着眼于减少首屏加载时间，却忘了去优化接下来的用户交互。本文是来自 Algolia 的工程师介绍他们在构建高性能 Web 动画与交互时的经验技巧，本文首先介绍了常用的性能评测标准以及浏览器的渲染流程，布局、绘制、组合等等。接下来本文介绍了如何充分利用 opacity 与 transform 属性来减少动画消耗、如何强制提升、如何优化动画相关的代码等内容；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ai/nanoid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nano ID&lt;/a&gt;: Nano ID 是轻量级的、支持 URL 的 JavaScript 唯一 ID 生成器，它使用了强力密码加密的随机 API，能够保证生成符号分布的平均性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/sghall/resonance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Resonance&lt;/a&gt;：Resonance 是数据驱动的高性能 React 动画库，它使用了 d3-timer 来管理成百上千地状态变化；Resonance 允许开发者以简单而亲切地语法实现高性能的状态更新动画。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2G&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;react-beautiful-dnd&lt;/a&gt;：react-beautiful-dnd 是 Atlassian 出品的漂亮易用的 React 列表拖拽功能增强库。目前最流行的 React 拖拽库 react-dnd 提供了相对底层的拖拽 API 支持，而 react-beautiful-dnd 则提供了面向垂直列表的高阶封装；react-beautiful-dnd 仍然处于不断地迭代开发中，很期待它未来提供更多的优秀特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/notifme/notifme-sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;notifme-sdk&lt;/a&gt;：notifme-sdk 是用于简化通知发送流程的 Node.js 库，它允许我们灵活地集成邮件、短信、推送、WebPush 等不同的渠道来发送通知；notifme-sdk 还允许我们自由注册服务提供商，内建的 Fallback 与轮询机制也能进行简单的容错，同时 notifme-sdk 还提供了简单的 UI 控制台以方便我们仅界面化监控。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bjx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何成为一个合格的技术 Leader？&lt;/a&gt;：在即将到来的 10 月份上海 QCon 大会上，百度外卖研发中心总监张灿将带来演讲《向前一步——年轻技术管理者的涅槃重生》，InfoQ 在此之前，对张灿老师进行了一次独家专访，让张灿老师聊聊作为女性技术人的成长感悟与对技术人转向管理者的思考。本文即由采访内容整理而成。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”；或者可以阅读往期文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Web 前端入门与工程实践&lt;/a&gt;的&lt;a href=&#34;https://parg.co/bh1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;列表；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28348537&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单第 25 期：Vue2 响应式原理，RN 运行内置 Node，JS 巧用 Proxy 反混淆，GraphQL 优劣思辨，深入 React 动画&lt;/a&gt;；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28225477&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单第 24 期：React 16 中异常处理与 Fiber 实战、Vue 图表与 jQuery 插件、V8 Turbofan 性能优化&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8.3</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.3/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://parg.co/bzK&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-27-期react-patent-license-回复shopify-webvr-购物原生-js-mvc-设计flow-优化-react-支持&#34;&gt;前端每周清单第 27 期：React Patent License 回复，Shopify WebVR 购物，原生 JS MVC 设计，Flow 优化 React 支持&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 就开源许可证风波进行回复&lt;/a&gt;：数周前，Apache 基金会决定禁止旗下项目使用 React，因为其在标准的 BSD 许可证之外添加了专利声明；此举引发了社区的广泛讨论，希望 React 能够更新其开源许可证。经过数周的讨论，近日 Facebook 正式做出了回复，不过令人遗憾的是最终还是拒绝更新许可证，以避免未来可能遇到的专利冲突；Facebook 在开源许可证中声明，使用 React 进行开发的商业项目，不可以专利反诉 Facebook ，也可以查看&lt;a href=&#34;https://parg.co/bz4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;此篇文章&lt;/a&gt;或者&lt;a href=&#34;https://parg.co/bzR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;社区的讨论&lt;/a&gt;了解更多信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootstrap 4 Beta 发布&lt;/a&gt;：经过两年的开发，Bootstrap 4 Beta 版本终于发布；该版本中值得注意的变化包括，从 Less 迁移到了 Sass、布局系统几乎全部迁移到了 Flexbox、优化了卡片的使用体验、自定义了 Normalize.css、放弃了对于 IE8 与 IE9 的支持、复写了几乎所有的 JavaScript 插件、提升了 Tooltip 等使用体验等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/blog/release/v8.4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 8.4.0 发布&lt;/a&gt;：本周 Node.js 8.4.0 版本发布，其重要的特性变化包括，引入内建的 http2 实验支持、允许在 inspector 控制台中查看 require()、更新了 N-API、修复了 Stream 中存在的部分错误、util.format 提供了新的占位符等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://eslint.org/blog/2017/08/eslint-v4.5.0-released&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ESLint 4.5.0 发布&lt;/a&gt;：近日发布的 ESLint 4.5.0 版本是对于 ESLint 的小版本更新，引入了部分新的特征支持与错误修复。新版本完善了对于 indent 规则、new.target 表达式以及 NaN 的支持，并且修复了 junit 结果以及 verifyAndFix 参数的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Preact：轻巧快速的 React 替代&lt;/a&gt;：Preact 是提供了兼容 React ES6 API 的轻量级前端库，Preact 本身选择了非常精巧的实现模式，避免了 React 中因为过度工程化带来的部分缺陷。本文着眼于介绍 Preact 的基础用法，从 Preact 与 React 以及常见的替代库的对比、Preact 与 React 在使用上的区别、如何使用 preact-compat 来无缝替换 React 到使用 preact-cli 快速开发项目等相关知识；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 基础概念纵览&lt;/a&gt;：本文并不会介绍 React 是什么或者为什么要学习 React，而是希望能够在单篇文章内，对实用的 React 相关概念进行介绍；让那些对 DOM API 有所了解的开发者快速上手开发 React。本文依次介绍了 React 组件化的设计理念、JSX 到底是啥以及在 JSX 中如何使用 JavaScript、如何利用 JavaScript 类来编写 React 组件、如何处理用户响应事件、如何为组件编写 Story、如何设置私有状态等内容；更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome DevTools 进阶指南&lt;/a&gt;：Chrome DevTools 是非常强大的开发工具，而本文则是以数十张动图的方式细致生动地介绍了如何使用 Chrome DevTools 进行常见的开发调试。本文涉及的内容包括了如何进行 CSS 覆盖率分析、如何进行 CPU 使用率分析、如何不使用扩展而进行浏览器截屏、如何进行 Profiling、如何进行时间轴回溯等内容；更多 Web 调试相关资料参考&lt;a href=&#34;https://parg.co/bzN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bz5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flow 0.53.0 引入更完善的 React 支持&lt;/a&gt;：在早期的 Flow 版本中，其主要还是针对 &lt;code&gt;React.createClass()&lt;/code&gt; 进行代码检测；在近日发布的 0.52.0 版本中，Flow 引入了更加完善的 React 支持，其最大的区别在于 Flow 开始完全支持基于 React.Component 类继承的组件定义方式。此外，本文还介绍了如何为 React Children、HoC 等实践模式添加静态类型检测；更多 Flow 相关资料参考&lt;a href=&#34;https://parg.co/bzM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bz3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;将现有的 Angular 应用转化为 PWA&lt;/a&gt;：本教程将会介绍如何将现有的 Angular 应用逐步地转化为 Progressive Web App，该教程适用于任何基于 @angular/cli 命令行工具创建的项目。本文首先介绍了 Service Worker 的作用、如何在项目中集成 Service Worker、如何创建自定义的 App Manifest；然后讨论了如何管理离线特征，最后说明了如何利用 Google LightHouse 进行应用的性能、可用性与最佳实践的测试，以及如何提升应用的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2g&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Native 中可共享的元素变换&lt;/a&gt;：本文着眼于讨论如何构建能够同时运行在 Android 与 iOS 应用中的 React Naive 动画；以常见的列表详情页动画切换为例，首先介绍了动画过程中帧的设计，然后介绍了 Animated 库及基础的语法，并且讨论了潜在的性能瓶颈以及如何使用 useNativeDriver；最后介绍了如何在变换过程中隐藏源与目标图像，以及如何实现返回按钮的功能。更多 React Native 相关资料参考 &lt;a href=&#34;https://parg.co/bV4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;探索 ReactJS 中的 CSS 架构&lt;/a&gt;：本文着眼于讨论 React 开发中常用的 CSS 架构，从 BEM 命名开始谈起，介绍其对于 CSS 模块分割的意义以及实际场景下增强型的 BEM 用法；然后介绍了 React 中 BEM 的实践。接下来本文讨论了 CSS Modules，如何配置与使用 CSS Modules，以及如何进行组件分层的解决方案。该结构背后的理念是通过以一种可伸缩的方式保持 CSS 架构创建更好的 ReactJS 项目，可以支持成千上万的组件和开发人员协同工作；然而本文的真正关键点在于打开你的思维，去适应新事物。更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Windows Edge 引入独立渲染来保证顺滑的 Web 体验&lt;/a&gt;：独立渲染能够允许浏览器选择性地将部分图像渲染的工作分配给其他的 CPU 线程处理，从而保证用户界面线程只需要分配最短的时间片来进行渲染操作。本文即是 Windows Edge 团队分享它们利用独立渲染来提高 Edge 浏览器性能体验的经验分享，首先以图片形象地比较了 EdgeHTML 15 与 EdgeHTML 16 在渲染流程上的异同，然后分析了图片、SVG、Canvas 等界面元素在新的渲染机制下的表现。更多 Web 开发相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建混合渲染的 PWA&lt;/a&gt;：&lt;a href=&#34;https://pwa-directory.appspot.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PWA Directory&lt;/a&gt; 最初是采用了纯粹服务端渲染的 PWA 应用，它对于搜索引擎地支持比较好。不过这种应用并无法很好地进行客户端路由跳转，反而会带来一些额外的性能损耗；本文则依次介绍了如何使用 JavaScript 来托管路由跳转、如何利用 Service Worker 来进行数据缓存或者后台操作等内容。更多 PWA 相关资料参考&lt;a href=&#34;https://parg.co/bVh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/b2v&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建基于 Web Speech API 与 Node.js 的简单 AI 聊天机器人&lt;/a&gt;：语音控制正在变得越来越流行，越来越多的智能手机使用者习惯使用 Siri 或者 Cortana 这样的指南辅助工具来进行方便地命令操作。同时，Web 平台也在变得不断完善，我们也可以用 Web Speech API 来创建最小可视化的交互友好的应用。本文首先介绍了如何在浏览器中使用 Web Speech API，然后介绍了如何使用 Socket.io 以及 WebSocket 来进行实时通信与数据传输，最后介绍了如何在 Node.js 中集成来自 api.ai 的语音解析功能来将客户端传来的语音转化为文本。更多 Node.js 相关资料参考&lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bz6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FreeWheel 前后端分离改造实践&lt;/a&gt;：在现代前端应用的工程实践中，前后端分离的架构会为两端带来更多的灵活性，已成为主流趋势。与之相对的，传统的单体 Web 应用(Monolithic Web Application)则将前后端代码放在一起，虽然耦合性较强，但在产品研发的特定阶段仍具有较强的优势，早期的 ASP.NET、Java Spring MVC，以及 Ruby On Rails 都是单体应用的代表性框架。本文将以 FreeWheel 从单体应用改造为前后端分离的实践为例，着重介绍其间前端所遇到的挑战和解决方案。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原生 JavaScript 中的 MVC 设计模式&lt;/a&gt;：近些年各种前端框架争妍斗艳，百花齐放，每个前端框架都有其自身的设计理念与模式，并且使得开发者更多的关注于上层应用开发；本文则返璞归真，讨论了如何基于原生的 JavaScript 去实现 MVC 模式。本文首先介绍了 MVC 模式的概念，然后讨论了展示一只企鹅需要分成几步：构建用于连接视图与模型的 Controller、构建用于处理数据的 Model 以及构建用于将数据渲染到界面上的 View 层。更多 JavaScript 相关参考&lt;a href=&#34;https://parg.co/b2O&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建 Web VR 虚拟购物体验的实践&lt;/a&gt;：本文是来自 Shopify 的工程师，分享的如何使用 WebVR 提供交互式虚拟购物体验的实践。本文首先分析了目前 VR 技术的发展现状以及主流的 VR 设备，然后介绍了如何将现有的产品转化为 3D 形式，接下来分享了目前 WebVR 的开发体验，以及对于 A-frame、Clara.io 以及 PlayCanvas 等常见的 VR 开发框架工具的技术选型考量。最后，本文还讨论了 3D/AR/VR 等技术发展的未来；更多 WebVR 相关资料参考&lt;a href=&#34;https://parg.co/bFR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么我们选择了 GraphQL&lt;/a&gt;：本文是来自 Universe 的工程师分享的其内部进行服务端应用程序开发的技术选型考量，主要是对于选择 GraphQL 之后的实践优劣分析。本文依次讨论了对于强客户端协议产生的问题与解决方案、如何进行领域层抽象、类型化的请求与响应接口、如何使用 Apollo Optics 进行请求划分优化、如何合理地构建接口文档等内容；更多 GraphQL 相关资料参考&lt;a href=&#34;https://parg.co/b1e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bzQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解 V8 字节码&lt;/a&gt;：V8 是由 Google 开源的 JavaScript 引擎，目前在 Chrome、Node.js 等许多的应用程序中得到广泛应用，本文着眼于介绍 V8 中使用的字节码格式。本文首先介绍了字节码的基本概念与 V8 的执行流程，然后介绍了典型的 V8 字节码的组成：LdaSmi、Star r0、LdaNamedProperty、Add r0 等常见的指令语句；更多 V8 相关资料参考&lt;a href=&#34;https://parg.co/bzt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/spikenail/spikenail&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spikenail&lt;/a&gt;：Spikenail 是面向 Node.js 的支持 GraphQL API 语法的框架，它允许开发者便捷地构建 GraphQL 接口；Spikenail 内置了对于 ES7 语法特性以及 GraphQL 的支持，允许通过实体类的方式快速描述嵌套关系、隔离域、自定义角色等访问控制。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pinterest/esprint&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;esprint&lt;/a&gt;：esprint 借鉴了 flow 的设计理念，允许以多线程方式运行 linting 引擎而提升 eslint 的效率。esprint 会启动服务端进程来缓存每个文件的 lint 结果，使用 watcher 来监控文件的变更情况，以保证只对发生变化的文件进行检测；更加详细的介绍也可以参考&lt;a href=&#34;https://parg.co/b2X&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇博客&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jaredpalmer/backpack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Backpack&lt;/a&gt;：Backpack 是受到 create-react-app、Next.js、Nodemon 启发的，面向 Node.js 项目的最小化构建工具。Backpack 允许我们创建零配置的 Node.js 项目，并为其添加文件监控、热加载、编译以及打包等常见的功能；Backpack 还允许我们方便地添加自定义的 Babel 等配置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChrome/puppeteer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Puppeteer&lt;/a&gt;：Puppeteer 是 Google Chrome 团队开源的面向 Node.js 的，基于 DevTools 协议的远程 Headless Chrome 控制库，它可以生成网页截图、PDF、抓取单页应用与网页内容、进行自动化表单提交、界面测试与模拟键盘输入等功能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bzc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;要怎样努力，才能修炼成一个架构师？&lt;/a&gt;：本文是七牛云高级副总裁、首席架构师李道兵在大咖说的分享，讲述了自身对于架构师养成之路与自我修养的认知。本文讨论了未来的编程学习、自身从化学专业到软件行业切换的感想、年轻程序员应该如何成长、如何在团队中脱颖而出、如何做好架构等内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”；或者可以阅读往期文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Web 前端入门与工程实践&lt;/a&gt;的&lt;a href=&#34;https://parg.co/bh1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;列表。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28225477&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单第 24 期：React 16 中异常处理与 Fiber 实战、Vue 图表与 jQuery 插件、V8 Turbofan 性能优化&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/28513061&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单第 26 期：Node.js 微服务实践，Vue.js 与 GraphQL，Angular 组件技巧，HeadlessChrome 攻防&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8.4</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/8/8.4/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-0d741a0c1cd8e9ef.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-28-期js-运行原理与优化高性能-css-引擎coursera-graphql-实践&#34;&gt;前端每周清单第 28 期：JS 运行原理与优化，高性能 CSS 引擎，Coursera GraphQL 实践&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ayo.js: Node.js 内部的又一次分裂&lt;/a&gt;：Node.js 正逐步成为主流的服务端语言之一，其驱动着 Microsoft 等许多公司的业务流程；与此同时，Node.js 社区也逐步在扩大。然而在上周一 TSC(技术指导委员会)上有关是否保留 Rod Vagg 职位的投票中，成员对于所谓的行为准则遵循度发生了较大分歧，并且导致了数位 TSC 成员的退出、以及新的命名为 Ayo.js 的 Node.js Fork 项目创建。这件事也反映了开源社区内部的自我调节能力，希望能有妥善的解决。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.polymer-project.org/blog/2017-08-22-npm-modules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polymer 3.0 预览&lt;/a&gt;：在 2017 Polymer Summit 上，开发团队发布了有史以来最大的变革路线之一，其核心特性在于从 HTML Imports 切换到了 ES6 Modules，以及从 Bower 迁移到了 npm。这种变革保证了 Polymer 能够与大部分现代 JavaScript 开发者习惯的工作流相适应，除以之外，本文还详细比较了 HTML Imports 与 ES6 Modules 各自的优劣，以及未来的详细版本更新计划。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Native 中气泡效果实践&lt;/a&gt;：本文记述了作者在学习使用 Animated 与 PanResponder，构建页面切换时动画效果的实践心得；本文首先介绍了 Animated 的基础用法，然后讨论了如何用 Animated.timing 添加变换，最后介绍了如何实现气泡效果并且集成 PanResponder 实现页面滑动切换的效果。更多 React Native 相关资料参考 &lt;a href=&#34;https://parg.co/bV4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 中组件间的三种通信方式&lt;/a&gt;：本文是基于 Angular 2 编写的讨论 Angular 中组件间通信方式的文章，其同样适合于现在主流的 Angular 4 版本。本文依次介绍了在组件之间传递组件句柄以读取数据、同级组件利用父组件作为中转完成数据传递、利用自动注入的单例 Service 来传递数据等。更多 Angular 相关资料参考&lt;a href=&#34;https://parg.co/bT2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 应用的测试教程&lt;/a&gt;：JavaScript 是典型的弱类型解释型语言，而添加合适的测试用例则是保证代码的鲁棒性与稳定性的有效方式。本文首先介绍了测试的概念以及基础的单元测试用例的逻辑，然后介绍了如何使用 Mocha 与 Chai 编写并运行测试用例；更多 Node.js 相关资料参考&lt;a href=&#34;https://parg.co/be0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.angular.io/the-state-of-css-in-angular-4a52d4bd2700&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 中 CSS 样式使用&lt;/a&gt;：为应用添加合适的样式是提升整体用户体验与感染力的重要手段，而 CSS 则是通用的 Web 样式定义标准。本文主要讨论如何在 Angular 应用中使用 CSS 来为组件添加样式，首先介绍了全局 CSS 与组件隔离的 CSS 这两种不同的定义范式，然后介绍了三种组件封装的方式；更多 Angular 相关资料参考&lt;a href=&#34;https://parg.co/bT2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Flow 为 React 应用添加类型检测&lt;/a&gt;：与 Flow 相比，TypeScript 是更为流行的 JavaScript 静态类型检测工具；不过近年来 Flow 社区也一直在不断增长，特别是其在 React 方面的天生优势为其增添了不少优势。本文首先对比了 Flow 与 TypeScript 各自的优劣，然后细致介绍了如何使用 Flow 为 React 与 Redux 等添加类型检测；更多 Flow 相关资料参考&lt;a href=&#34;https://parg.co/bzM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么在 React Render 函数中使用箭头函数或者 bind 绑定是有问题的？&lt;/a&gt;：我们常常会在 Render 函数中使用 bind 或者 Arrow Function 来绑定回调函数的 this 指针，本文则以实际的案例分析了这种方式存在怎样的问题。更多 React 相关资料参考&lt;a href=&#34;https://parg.co/bM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTX&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Coursera 应用 GraphQL 实践&lt;/a&gt;：在过去的数年中，Coursera 通过编写动态工具以逐步将它们的所有 REST API 迁移到了 GraphQL 接口；这种方式即允许服务端开发者在以他们熟悉的方式编写 RESTful 接口，也允许客户端开发者通过 GraphQL 灵活地访问数据。本文则是 Coursera 开发者分享的他们应用 GraphQL 的实践经验，包括在这个过程中感受到的优势与碰到的坑。更多 GraphQL 相关资料参考&lt;a href=&#34;https://parg.co/b1e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Font-size: 比想象中还要复杂点的属性&lt;/a&gt;: Font-size 算是最常用而又复杂的属性之一，本文则是从构建样式系统的角度出发，讨论 Font-size 属性处理的复杂性。本文首先讨论了 Font-size 常用的单位，尺寸、百分比、计算值、绝对关键字、相对关键字等；然后介绍了样式系统的工作原理以及对于不同的属性值的工作原理与默认设置。更多 CSS/SCSS 相关资料参考&lt;a href=&#34;https://parg.co/baH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Angular.js 动画&lt;/a&gt;：合理的变换动画是构建现代 Web 应用的重要元素，能够方便用户更好地理解产品的设计理念，提升用户体验。本文则是着眼于讨论基于 Angular.js 构建现代 Web 应用中的动画的不同方式，从 CSS 与 JavaScript 动画基础开始讨论，到复杂的 Angular 应用动画组成。本文依次介绍了状态转化基础、如何添加 UI 变换动画、使用 GreenSock 编写命令式动画、使用 Angular Animations 添加声明式动画等内容；更多 Angular 相关资料参考&lt;a href=&#34;https://parg.co/bT2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 JavaScript 扩展低延迟内存中键值存储&lt;/a&gt;：RAMCloud 是典型的整合了 DRAM 与 RDMA 的超低延迟键值存储，本文则是讨论了使用 SQL、C++/Native Code 以及 JavaScript 这三种不同的方式实现服务端逻辑计算的性能与可用性对比。原论文是使用了 asm.js 来加速 JavaScript 运算，本文作者还扩展讨论了 WebAssembly 在高性能计算方面的应用；更多 JavaScript 相关参考&lt;a href=&#34;https://parg.co/b2O&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bT9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;十个可编译为 JavaScript 的语言对比&lt;/a&gt;：随着现代 Web 应用复杂度的增加，其相较于简单的网站有了更多的特殊需求；然而浏览器本身只是提供了固定的统一的功能接口，并且目前浏览器仅支持 JavaScript 这一门脚本语言。在这种背景下，出现了很多的 JavaScript 的方言或者超集，这些能够编译为 JavaScript 的语义以其各自的语言特性吸引了很多的关注；本文则对比讨论了 Dart、TypeScript、Elm、PureScript、CoffeeScript、ClojureScript、Scala.js、Reason、Haxe、Nim 等常见的可编译为 JavaScript 的语言。更多 JavaScript 相关参考&lt;a href=&#34;https://parg.co/b2O&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入解析高性能 CSS 引擎：Quantum CSS(Stylo)&lt;/a&gt;：Qutantum 项目旨在利用 Rust 重写 Firefox 内核来提升其运行性能，该项目将会替换现存的 Jet 引擎，主要由 Flow、CSS、Render、DOM、Compositor 这几个部分组成。本文则是对于 Quantum CSS(又名 Stylo)进行深度解析，其能有效利用现代计算机上搭配的硬件设备，利用所有的计算单元来并行化所有的操作。本文依次介绍了 CSS 引擎的工作原理、Stylo 的优化之道等内容；更多浏览器相关资料参考&lt;a href=&#34;https://parg.co/btv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/bTg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 工作原理与优化建议&lt;/a&gt;：本系列文章着眼于深入讨论 JavaScript 及其内部工作原理，从而帮助开发者编写出更加稳定高性能的 JavaScript 代码。首篇文章会对于 JavaScript 引擎、运行时与调用栈进行简要的介绍，第二篇会专注于 Google V8 引擎的内部原理介绍，与此同时文中还会给出数个 JavaScript 代码优化的建议；更多 JavaScript 相关参考&lt;a href=&#34;https://parg.co/b2O&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/extr0py/oni&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Oni&lt;/a&gt;：Oni 是基于 Neovim、React 与 Electro 的 IDE，其受到了 VSCode、Atom 以及 LightTable 的启发。Oni 提供了语法提示、自动补全、错误提示、模糊搜索、状态栏等功能，希望为开发者提供跨平台、丰富插件、优良界面、高性能、易用易上手的编辑器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://vuejsfeed.com/blog/extension-for-visual-code-to-generate-vue-file-components&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;generate-vue-file-components&lt;/a&gt;: generate-vue-file-components 是基于 Visual Studio Code 的自动生成 Vue.js 单文件组件的插件，它支持多种灵活地创建方式，允许指定组件模板或者默认的文件路径。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChrome/rendertron&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rendertron&lt;/a&gt;: Rendertron 是可使用 Docker 进行容器化打包的，基于 Headless Chrome 的渲染解决方案；Rendertron 可用于渲染动态网页，也可以用于增强 PWA 对于不同的 Bot 的响应内容。Rendertron 能够以独立的 HTTP 服务器的方式运行，也可以以中间件形式嵌入到现有的 Web 服务端应用中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/RocketChat/Rocket.Chat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rocket.Chat&lt;/a&gt;：Rocket.Chat 是基于 Meteor 开发的，类 Slack 功能丰富的开源 Web 聊天通信平台。Rocket.Chat 为我们提供了服务端、桌面应用、移动应用、Web 应用等涵盖全流程的模块，同时支持 Docker、Ansible、Heroku 等多种不同的部署方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/bTk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;在 CTO 眼里，什么样的程序员是更值得信赖的？&lt;/a&gt;：本文是轻松筹 CTO，EGO 会员李汐在大咖说上的分享，主要从公司的层面来聊聊程序员的发展之路。本文依次讨论了如何平衡个人成长与公司效率、90 后程序员的特点以及公司在技术选型上的考量、如何进行有效地个人转型以及优秀程序的特质、如何和产品经理等小伙伴高效合作打造产品等内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”；或者可以阅读往期文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wx-chevalier/Web-Development-And-Engineering-Practices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt; Web 前端入门与工程实践&lt;/a&gt;的&lt;a href=&#34;https://parg.co/bh1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;列表。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
