<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>10 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/index.xml" rel="self" type="application/rss+xml" />
    <description>10</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>10</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/</link>
    </image>
    
    <item>
      <title>10.1</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.1/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-9590dbd0cb4f2f8b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面34.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-34-期vue-现状盘点与-30-展望react-代码迁移与优化图片优化详论&#34;&gt;前端每周清单第 34 期：Vue 现状盘点与 3.0 展望，React 代码迁移与优化，图片优化详论&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UmY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft 宣发面向 iOS 与 Android 平台的 Microsoft Edge&lt;/a&gt;：为了保证 Windows 用户各平台使用体验的一致性，Microsoft 于本周发布了针对于 iOS 与 Android 平台的 Microsoft Edge 浏览器以及针对 Android 平台的 Microsoft Launcher；不过目前各平台上的 Edge 浏览器仍然使用的是操作系统默认的渲染引擎，即 iOS 系统上的 Webkit 引擎与 Android 的 Chrome 引擎，因此开发者们也无需担心需要针对移动版的 Microsoft Edge 进行适配。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hacks.mozilla.org/2017/10/firefox-56-last-stop-before-quantum/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firefox 56 正式发布&lt;/a&gt;：本周 Firefox 56 版本正式发布，其搭载的新一代 Quantum 引擎带来了大幅度的性能提升、全新的交互界面、升级版本的开发者工具等诸多特性与优化。除此之外，Firefox 56 还提供了便捷的截图功能，允许使用者对于网页截图编辑并且快速保存到云端；同时引入了 &lt;code&gt;&amp;lt;link rel=&amp;quot;preload&amp;quot;&amp;gt;&lt;/code&gt; 以提供资源预加载功能，并且允许使用者通过 &lt;code&gt;-headless&lt;/code&gt; 指令来启动无界面化的浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mochajs/mocha/releases/tag/v4.0.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mocha 4.0.0 发布&lt;/a&gt;：本周 Mocha 4.0.0 版本正式发布，其不再支持 Node.js Pre-v4.0.0 及之前的版本，不再支持 npm v2.15.11 以及之前的版本，并且计划不再支持 Bower；除了版本的兼容性之外，Mocha 不再会强制测试完毕后退出，并且优化了输出显示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Umd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iView 2.4 版本发布&lt;/a&gt;：iView 是基于 Vue.js 构建的界面组件与插件库，其包含了 TalkingData 开发的一系列面向中间层与后端业务逻辑的解决方案；iView 提供了基础组件、表单组件、视图组件、导航组件、图表与其他多种类型的组件。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Um6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 个关键的 React 技术选型&lt;/a&gt;：自 2013 年 React 开源以来，React 技术栈也发生了急剧的变化与更新，现在搜索到的不少文章可能也都过时了；本文则是对于现在进行 React 开发所需要的技术栈进行了盘点。首先是开发环境，create-react-app 以 65% 独占鳌头；在类型系统上，有 42% 的开发者选择了 PropTypes，34% 的开发者选择了 TypeScript。而在状态管理上，48% 的使用 Redux，11% 的使用了 MobX；越来越多的开发者也选择使用 CSS 或 SASS 设置样式，选择用 HoC 或者 Render Props 来复用逻辑。更多 React 相关资料查看&lt;a href=&#34;https://parg.co/Um3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.cloudboost.io/reactivity-in-vue-js-2-vs-vue-js-3-dcdd0728dcdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 2 与 Vue.js 3 中响应式实现的对比&lt;/a&gt;：Vue.js 核心团队已经在讨论 Vue.js 3 中核心的响应式实现方式，在保证 API 一致的情况下，其内部实现方式可能会发生变化，本文即是对两种响应式实现方案进行对比。Vue.js 2.0 的响应式主要依赖 Object.defineProperty，其具有较好地浏览器兼容性，但是其无法直接监听数组下标方式变更以及动态添加的属性；而 Vue.js 3 中则计划使用 ES6 Proxy 来实现响应式监听，其能够简化源代码、易于学习，并且还能带来更好地性能表现。更多 Vue.js 相关资料查看&lt;a href=&#34;https://parg.co/Um3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/ruidfigueiredo/briefish-explanation-of-how-https-works&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTPS 工作原理简述&lt;/a&gt;：本文是对于 HTTPS 协议原理的简要介绍，随着越来越多的站点全站化 HTTPS，我们也有必要去了解 HTTPS 的相关知识。本文首先概述了 HTTPS 的机制原理，然后介绍了 Diffie-Hellman 算法，接下来介绍了电子证书、Asymmetric Key Encryption、电子签名、证书校验等内容；更多 HTTPS 相关资料查看&lt;a href=&#34;https://parg.co/Ums&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Umq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Grid 中的技巧与绊脚石&lt;/a&gt;：CSS Grid 为我们带来了新的布局方式，不过在实际使用的过程中也存在着很多的问题，本文即是对这些技巧与绊脚石进行盘点。本文首先分析了 CSS Grid 相较于 Flexbox 的优势，然后讨论了 CSS Grid 与 Flexbox 各自的适用场景、自适应尺寸的 CSS Grid、如何利用 CSS Grid 实现瀑布流、如何添加背景与边距色、如何进行嵌套布局、如何调试等内容；更多 CSS 相关资料查看&lt;a href=&#34;https://parg.co/Um3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Um0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React, 内联函数与性能&lt;/a&gt;：很多关于 React 性能优化的文章都会谈及内联函数，其也是常见的被诟病为拖慢性能表现的元凶之一；不过本文却是打破砂锅问到底，论证了内联函数并不一定就会拖慢性能，过度的性能优化反而会有损于应用性能。作者从自己的实践谈起，首先讨论了内联函数可能拖慢性能的两个原因：内存分配与垃圾回收、&lt;code&gt;shouldComponentUpdate&lt;/code&gt;；作者认为使用内联函数反而能够减少组件初始化时的耗时，而 shouldComponentUpdate 或者 PureComponent 也并非所有的情况都能起作用，我们也是应该因时而异。更多 React 相关资料查看&lt;a href=&#34;https://parg.co/Um3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UmK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 性能优化建议&lt;/a&gt;：Oasis Digital 一直在使用 Angular 来构建大型软件项目，而在多年的实践中，特别是在构建性能敏感的应用过程中，工程师们总结了很多的经验教训；本文即是他们分享的三个最为重要的性能优化相关的建议。本文首先讨论了对于运行时性能的定义与指标构成，然后分析了如何提升事件的响应速度、如何最小化变化检测的范围、如何最小化 DOM 操作这三个优化策略。更多 Angular 相关资料查看&lt;a href=&#34;https://parg.co/Um3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UmS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;响应式图片基础&lt;/a&gt;：图片是现代网站的重要组成，其能够增强网页的表现力与感染力；不过用户往往不愿意过久地等待图片加载，因此选择合适的图片尺寸能够大大提升用户体验。作者在本文中阐释了响应式图片的基本概念以及常见的设置响应式图片的方法；本文首先讨论了如何选择合适的方式来设置响应式图片、如何选择合适的分割点、像素与百分比的对比、浏览器中 size 属性的作用、利用 CSS 使得图片更加流畅等待。更多性能优化相关资料参考&lt;a href=&#34;https://parg.co/Umu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UmG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 现状盘点与未来规划&lt;/a&gt;：本文不是一篇教程，而是以时间线叙述的方式来介绍 Vue.js 的创建与发展，Vue.js 技术社区的现状以及未来 3.0 版本的规划。本文首先介绍了 Vue.js 的创建初衷与设计理念，然后介绍了 Vue.js 目前的各种资源：学习资料、周报、论坛、社区等等，还有 Vue.js 相关的 Weex 这样的原生扩展。最后本文还讨论了 2.0 版本中对于测试套件、TypeScript 支持、ESLint 优化等提升，以及 3.0 版本中对核心的响应式机制、对于旧版本浏览器的支持等规划。更多 Vue.js 相关资料查看&lt;a href=&#34;https://parg.co/Um3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://v8project.blogspot.co.id/2017/10/optimizing-proxies.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 引擎中针对 ES2015 Proxy 进行的优化&lt;/a&gt;：Proxy 是 ES2015 的重要组成部分，其也被逐步地应用到众多的项目或者库中，譬如 jsdom、Comlink RPC 等；近日来 V8 团队也在致力于提升 Proxy 在 V8 中的性能表现，本文主要分享了 V8 中 Proxy 的性能提升范式，也有助于开发者了解 Proxy 的实现原理。本文首先分析了老版本的 Proxy 实现原理与工作机制，然后讨论了优化的解决方案以及现实环境下的性能对比；更多 V8 相关资料查看&lt;a href=&#34;https://parg.co/UmO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://images.guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;图片优化中的必知必会&lt;/a&gt;：截止 2017 年，图片仍然是网络带宽最大的占用者，参考 &lt;a href=&#34;http://httparchive.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP Archive&lt;/a&gt; 的统计数据，所有抓取的网页数据中有超过 60% 的流量是 JPEG、PNG 以及 GIF 等图片资源；Addy Osmani 则在本书中非常详细地阐述了图片压缩中必知必会的知识。本书首先抛出了观点：所有的图片都应该进行合适地压缩，所有的压缩都应当是自动化地进行,接下来本书依次介绍了如何判断图片是否需要压缩、如何选择合适的图片格式、JPEG 的格式介绍与压缩技巧、WebP 介绍与浏览器的支持情况、SVG 压缩技巧、避免重复压缩、雪碧图、缓存、预加载等等内容；更多性能优化相关资料参考&lt;a href=&#34;https://parg.co/Umu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Umo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;大型代码库迁移到 React 16 过程中学到的知识&lt;/a&gt;：在 Facebook 正式发布了 React 16.0 版本之后，新的 Fiber 渲染流带来了更多的性能提升；本文则是来自 Discord 的工程师分享的它们将原有应用升级到 React 16.0 版本的经验。本文首先分析了新版本中带来的譬如 ErrorBoundary 等一系列的特性变化，分享了 Discord 内部关于是否有必要升级的讨论；然后介绍了利用 jscodeshift 来修正 PropTypes、如何安全移除原有内部 API 的使用、如何升级依赖，以及 React Native 中需要进行的升级工作等内容。更多 React 相关资料查看&lt;a href=&#34;https://parg.co/Um3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UmA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vuera&lt;/a&gt;: Vuera 是同时兼容 React 与 Vue.js 组件的集成框架，它允许开发者在 React 中引入 Vue.js 组件，或者在 Vue.js 中引入 React 组件。Vuera 算是非常不错的实验性尝试，不过其具体的性能表现如何还有待观察。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nestjs/nest&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nest&lt;/a&gt;: Nest 是基于 TypeScript 的用于构建高性能、可扩展的 Node.js 应用的框架，其同时整合了面向对象编程 OOP 与函数式编程 FP 以及函数响应式编程 FRP 优秀理念。Nest 提供了类似于 Angular、Express 这样著名框架的接口，内置了 WebSocket、响应式微服务支持、管道等多种功能特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/muicss/sentineljs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sentineljs&lt;/a&gt;: SentinelJS 是轻量级的，允许通过 CSS 选择器设置监听目标，并且动态监测新 DOM 节点创建的库；它能够在监控到新的 DOM 节点创建完毕之后自动调用回调函数。SentinelJS 相较于其他解决方案，使用了动态定义的 CSS Animation 规则中的 animationstart 事件来监听某个元素是否存在，能够获得比 Mutation Observer 更好地性能表现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mp.weixin.qq.com/s/jnutJ6qUGMy2-swXZBwtdA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;欲修炼成架构师，必先……&lt;/a&gt;：本文是互联网老兵陈美珍(Frank)分享的其对于架构师的看法与理解，以及成为架构师所需要各方面能力的讨论。作者首先分析了什么是架构师以及架构师在团队中的定位，然后讨论了架构师与传统领域专家的异同，最后分享了其认为架构师应该具备的各项能力，从基础的逻辑、抽象、想象，到空杯、好奇、实践的心态，以及技术架构与组织架构等待。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.2</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.2/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-d53cee74e67e8866.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-35-期vuejs-25-发布微前端概念详解浏览器扩展开发实践&#34;&gt;前端每周清单第 35 期：Vue.js 2.5 发布、微前端概念详解、浏览器扩展开发实践&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/the-vue-point/vue-2-5-released-14bd65bf030b&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 2.5 发布&lt;/a&gt;：本周 Vue.js 2.5 版本正式发布，同样包含了很多的特性提升与性能优化，推荐阅读 &lt;a href=&#34;https://github.com/vuejs/vue/releases/tag/v2.5.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt; 获取详细的特性列表。本文则是对于 Vue.js 2.5 中的重要特性进行介绍，包括了更好的 TypeScript 集成、更好的错误处理、更好的单文件组件中的函数式组件支持以及多环境下服务端渲染的支持等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zeit.co/blog/next4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Next.js 4 发布&lt;/a&gt;：本周发布的 Next.js 4 版本全面支持 React 16，并且针对其内置的样式引擎 styled-jsx 进行了更新，添加了对于动态样式的支持。而在迁移到了新的 React 版本之后，Next.js 4 在服务端渲染的性能有了约 2.6 倍的提升，并且样式初始化的速度也提升了 20% 左右。除此之外，该版本还包含了一系列的错误修复与功能增强，可以查看原文获取更多信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/developit/preact-cli/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Preact Cli 2.0.0 发布&lt;/a&gt;：本周发布的 Preact Cli 2.0.0 版本引入了自定义模板的特性，允许开发者使用 GitHub/Gitlab/Bitbucket 仓库作为自定义模板，并且通过 preact-cli 命令行工具来创建新的项目。除此之外，preact-cli 2.0.0 还升级到了 Webpack 3，并且修复了一系列的错误；可以查看原文获得更多信息。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UGN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reboot.css: Bootstrap 4 中 CSS 基础样式归一化&lt;/a&gt;：Bootstrap 是广为使用的前端样式库之一，而 Bootstrap 4 使用了 Reboot.css 来替换老的 Normalize.css 进行基础的样式归一化操作。本文首先回顾了 CSS Reset 概念的由来、其实际的价值以及流行过的版本，特别介绍了 Normalize.css 的作用及其缺陷。而 Reboot.css 正是面向现代浏览器，默认将所有元素设置为 &lt;code&gt;box-size: border-box;&lt;/code&gt;，并且以简单自然的基础样式保证了跨浏览器样式的一致性；更多 CSS 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 JavaScript Streams 加速 IO 与数据操作&lt;/a&gt;：在现代 Web 平台之上，Web Bluetooth、Background Sync 以及 WebVR 等一系列新特性的出现使得很多的新功能得以实现；而参考 &lt;a href=&#34;https://streams.spec.whatwg.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Streams Specification&lt;/a&gt;，我们能够使用流来进行数据的读写与处理，从而减少内存占用、提高程序并行率、延长电池寿命、优化用户体验。本文即是介绍 Streams Specification 在浏览器中的实践，首先对比了 Node.js 中的流与 Streams Specification、然后介绍了流的概念、语法和典型的使用场景，接下来具体介绍了读写流的使用以及 Fetch 的示范。更多 JavaScript 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UGF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;结合 Bootstrap 4 与 Firebase 构建 Angular 5 项目&lt;/a&gt;：本文是入门级的介绍文章，介绍如何从零构建 Angular 5 项目，并且手动地添加 Bootstrap 4 以及 Firebase 库到项目中。本文首先介绍了如何创建空白的 Angular 项目，然后介绍了如何创建空白的 Firebase 在线项目，并且将相关的 JavaScript 库添加到 Angular 项目中；接下来本文讨论了如何引入 Bootstrap 4 与 ng-Bootstrap，以及如何从 Firebase 中获取数据并且呈现在界面上。更多 Angular 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UGT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 中 Form 使用详解&lt;/a&gt;：Web 开发中常见的需求即是处理表单输入，本文即着眼于介绍在 Vue.js 2.x 应用中如何创建、校验以及利用表单中的用户输入。本文首先介绍了如何利用 v-model 等指令双向绑定表单中的输入域，然后介绍了利用 vee-validate 组件来进行声明式数据校验，并且添加自定义的校验规则，最后介绍了如何提交表单数据并且进行响应回显。更多 Vue.js 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://slack.engineering/rebuilding-slack-com-b124c405c193&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 CSS Grid 重构 slack.com&lt;/a&gt;: 本文是来自 Slack 的工程师分享他们基于 CSS Grid 重新设计与实现 slack.com 主页的实践；他们希望能够在保证体验连贯性的情况下，提升站点架构、代码模块化以及整体的性能与可访问性等整体指标。本文首先介绍了对于主页与 Web App 的解耦，以及对于基本组件库的重构；然后介绍了现代化的响应式布局方案以及如何使用 Flexbox 实现优雅降级。最后介绍了字体的设置与响应式图片等内容；更多 CSS 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UGj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Event Loop 与异步编程的崛起&lt;/a&gt;：本文是 How JavaScript works 系列的第四篇文章，主要讨论了单线程环境的缺陷以及 JavaScript UI 中如何避免这些，最后还分享了几个使用 async/await 的实践。本文首先介绍了单线程中的不足、JavaScript 中构建块、JavaScript Call Stack 以及 Event Loop 的详细介绍、JavaScript 异步编程范式以及 async/await 的使用建议；更多 JavaScript 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tech.grammarly.com/blog/building-browser-extensions-at-scale&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;构建弹性的浏览器扩展&lt;/a&gt;: Grammarly 是广为使用的 Chrome 插件，其 Firefox、Safari 以及 Edge 插件同样吸引了大量的用户。本文即是 Grammarly 背后的工程师团队分享的他们六年来构建与完善该工具的实践经验，同样也是他们对于如何构建弹性的浏览器扩展项目的心得分享。本文第一部分首先介绍了开发框架的搭建，包括文件目录、命令行、组件浏览等；然后介绍了测试、分支模型、持续交付等；接下来讨论了发布到 Chrome Store、Mozilla add-ons、Safari gallery、Edge 的步骤，以及线上版本的质量管理、追踪、反馈收集等内容。第二部分则介绍了具体的应用开发相关内容，包括网络请求、权限验证、用户存储、浏览器接口、权限校验、容错、弹窗、动态更新、性能等。更多浏览器扩展开发相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UG7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;QQ 空间在生产环境使用 QUIC 协议的经验&lt;/a&gt;：QUIC(Quick UDP Internet Connections，发音’quick’)是 Google 于 2013 年发布的基于 UDP 的多路传输协议，它的主要目标是为了整合 TCP 协议的可靠性和 UDP 协议的速度和效率，以降低延迟，提高用户体验。Google 通过大规模的性能分析发现，“相对于 TCP 而言，QUIC 的性能有了真正的进步”，而 QQ 空间前端团队通过对 HTTP2 和 QUIC 协议的应用和实践，使得 Web 页面访问速度得到了很大的提升，并且他们针对性地采用了不同的资源加载策略，最大化利用了协议的优势。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UGM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebRender 的极速之道&lt;/a&gt;：本文是对于 Firefox Quantum 引擎中，即将使用的高性能渲染引擎 WebRender 的详细介绍。WebRender 最引人瞩目的就是它的高性能，不过 WebRender 其实不能说是快，而是顺滑；WebRender 的设计目标是希望应用能够以 60 FPS 运行，无论展示的数据量大小或者页面跳转。本文首先介绍了渲染引擎的作用，然后介绍了 Painting 与 Compositing 的含义与历史，接下来讨论了 WebRender 如何与 GPU 协同工作及其性能优化范式；更多浏览器引擎相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://micro-frontends.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微前端：微服务概念的前端实践&lt;/a&gt;：本文是对于不同团队使用的不同 JavaScript 框架构建 Web 应用的技术、策略、方法进行讨论，其借鉴了服务端中非常流行的微服务的概念，对于 &lt;a href=&#34;https://www.thoughtworks.com/radar/techniques/micro-frontends&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ThoughtWorks&lt;/a&gt; 2016 年末技术雷达中介绍的微前端的概念进行了详细解读。所谓微前端，即是将某个网站或者应用看做一系列由独立团队支撑的特性集合；本文对于现代 Web 应用、微前端的核心概念、DOM API、浏览器支持、服务端渲染、数据抓取等概念进行了详细解读。更多 Web 架构相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UG2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;微服务监控与仪表展示的未来&lt;/a&gt;：监控能够帮助我们实时地了解系统状态，发现、理解、定位、最小化潜在的业务问题；特别是在微服务这样的分布式离散系统中，我们需要依赖强大的监控功能来保障业务的顺畅运行。而微服务监控的未来也是依赖于行业中的标准化解决规范以及会引入的新特性，本文即是对于 2018 年中那些可以预期的监控特性进行分析，介绍了 APM 的理论基础以及 OpenTracing 的标准与实践； 更多微服务相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UGx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;王跃：关于微信小程序的技术，也许你想错了&lt;/a&gt;：2017 年 1 月 9 日，微信小程序正式发布。在近一年里，不管外界评价如何，小程序一直在坚定的向前走。同时它的理念和模式受到广泛认可，也被其它公司所模仿。在微信小程序尚在内测之时，外界对它所采用的技术就有很多猜测，正式发布的小程序解答了人们的一些疑惑，但有些问题官方并未正式对外公开说过。在即将于 10 月 17 日举办的 QCon 上海 2017 大会上，微信小程序相关项目负责人王跃将向大家分享小程序的核心架构及实战案例，我们也对他进行了采访，提前了解了一些我们关心的问题。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mdn/browser-compat-data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;browser-compat-data&lt;/a&gt;：browser-compat-data 是由 MDN 提供的常见 Web 相关技术的浏览器兼容性数据，使得我们除了 Can i use 之外有了新的参考选择。所谓的浏览器兼容性即描述了具体的浏览器平台对于某些特定的 Web API 的支持情况，可以方便于我们构建接口文档，譬如浏览器支持度，或者动态地引入 Polyfill。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/React-Sight/React-Sight&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React-Sight&lt;/a&gt;: React-Sight 是支持 Fiber、React Router、Redux 的 React 组件可视化工具，它能够将 React 组件以树状方式层次化地可视化呈现给开发者。目前 React Sight 提供了 Chrome 插件，不过需要开发者首先安装 React Dev Tools。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/maptalks/maptalks.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MapTalks.js&lt;/a&gt;: MapTalks.js 是用于创建易集成的 2D/3D 地图的 JavaScript 轻量级框架，提供了高性能顺滑的交互体验、插件化的开发方式，并且易于上手与集成。MapTalks.js 基于 Mapbox.gl，并且完全使用了 ES2015 的代码，支持 IE9 以上的现代浏览器。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UGD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;漫极客 CTO 李焱：大前端之路：如何用 Web 技术一统三端开发&lt;/a&gt;：本文是 EGO 会员、漫极客 CTO 李焱的线上分享，依次介绍了自己不安分、爱挑战的折腾之旅、对于大前端的理解与定义、Web 技术一统三端开发实践，包括 Node.js、APP、微信开发、PC 端、数据可视化、AR / VR、JS 性能、部署架构等方面。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.3</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.3/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-4fcfe52420ff3dc8.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-36-期深入-vue-25-类型增强puppeteer-端到端测试paypal-跨域套装&#34;&gt;前端每周清单第 36 期：深入 Vue 2.5 类型增强、Puppeteer 端到端测试、PayPal 跨域套装&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UAN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MSDN 将 7700 余份文档重定向到 MDN&lt;/a&gt;: 为了更好地协同维护 Web 开发相关的文档，微软决定将 MSDN 上 7700 余份 Web 开发相关的文档重定向到 MDN；MDN 是 Mozilla 开源共享的核心部分，来保证 Internet 资源的开放性与可用性，从而帮助开发者更快地学习与成长；微软也长期致力于维护 MDN 上相关地开发文档，包括整个 Microsoft Edge 的 Web API 接口也是完全构建在 MDN 上。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UA9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expo SDK v22.0.0 发布&lt;/a&gt;：Expo SDK v22.0.0 基于近日发布的 React Native 0.49 版本，进行了一系列的功能特性提升与优化。现在，Snacks 可以支持多文件与多资源拖动上传，并且能够将自定义的 Snacks 持久化保存到个人文档中；该版本还优化了 Android 中使用的 JavaScriptCore 以及 ARKit，同时增强了 Splash Screen API, WebBrowser.openAuthSessionAsync 等接口。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Udc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome 62 发布&lt;/a&gt;：本周发布的 Chrome 62 版本针对调试工具中的 Network Information API 进行了重大升级，其提供了更多的性能评测信息，而不再仅仅是统计结果；除此之外，该版本还开始支持 OpenType Variable Fonts 以及 DOM 元素中进行 Media 捕获。另一个有趣的地方在于 Chrome 62 的 iOS 版本提供了 Payment Request API，尽管 iOS Webkit 本身都没有提供这个功能；这也为自定义浏览器中希望添加 Payment Request API 的支持提供了思路。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://ropig.com/blog/end-end-tests-dont-suck-puppeteer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Puppeteer 的端到端测试&lt;/a&gt;：Chrome 在 59 版本时推出了 Headless Chrome(无界面 Chrome)，可用于自动化测试和不需要可视化用户界面的服务器；Puppeteer 就是 Chrome 团队推出的基于 Headless Chrome 开发的自动化工具，它可以用来做 UI 自动化测试。本文即是对如何利用 Jest 与 Puppeteer 进行界面的端到端测试进行介绍，本文首先讨论了何为端到端测试及其在项目开发流程中的意义、如何使用 Puppeteer 编写测试用例、如何在 Jest 中运行这些用例，文末还给出了数个编写端到端测试用例的建议。如果有对于 Puppeteer 还不了解的同学也可以阅读前端之巅专栏本周推荐文章：&lt;a href=&#34;https://parg.co/Udp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 Puppeteer 玩转 Headless Chrome&lt;/a&gt;；&lt;a href=&#34;https://parg.co/Ub7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;更多 Puppeteer 相关资料参考这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UAy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular JWT 权限验证完整指南&lt;/a&gt;: 本文循序渐进地介绍如何设计与实现 Angular 应用中基于 JWT 的权限验证部分；本文不仅仅聚焦于如何写代码，而是希望能够带领读者一起来考虑如何设计基于 JWT 的权限验证，我们应该关心哪些设计要点并且如何将它们应用到具体的开发实践中。本文首先讨论了登录页的设计、JWT 机制原理，然后 利用 node-jsonwebtoken 来创建基于 JWT 的用户 Session，接下来讨论了如何将 JWT 返回给客户端并且选择合适的存放位置，最后分析了如何在客户端中将 JWT 返回给服务端并且验证用户是否合规。更多 Angular 相关资料参考&lt;a href=&#34;https://parg.co/Uds&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UA1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue.js 中高级概念介绍&lt;/a&gt;: Vue.js 毫无疑问是简单易上手的框架，本文则 长篇大论地对 Vue.js 中一些高级概念的理解与使用进行深入介绍，包括 Mixins、Custom Directives、Filters、Transitions、状态管理、服务端渲染等。本文依次介绍了如何使用 Mixins 实现代码复用、如何创建自定义的指令、如何使用 Filters 来对展示信息进行过滤、如何使用 Transitions 创建动画、如何使用 Vuex 进行状态管理等内容。更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/UdC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://tech.io/playgrounds/7859/flexbox-and-css-grid-part--1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flexbox 与 CSS Grid 系列教程&lt;/a&gt;: 本系列文章是对于 CSS 布局中常用的 Flexbox 与 CSS Grid 进行深度介绍，首篇文章是对于 Flexbox 与 CSS Grid 的概念进行详细介绍与对比；Flexbox 是面向一维布局设计，适合于单纯的行布局或者列布局；而 CSS Grid 则面向二维布局设计，能够同时在行或列上进行元素排布。更多 CSS 布局相关资料参考&lt;a href=&#34;https://parg.co/Udh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uoo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 PayPal 的开源跨域 JavaScript 套装&lt;/a&gt;: PayPal 的工程师们编写了很多运行于不同网页、不同域名下的 JavaScript 代码，并且还为很多的第三方网站提供了便捷的代码嵌入方式，不过这样也就导致了 PayPal 面临着极为复杂的跨域问题：既需要提供跨浏览器的兼容方案，也不能强制性的让所有的后端接口允许 CORS 跨域请求等，本文即是 PayPal 对其 日常业务中使用的跨域相关工具进行深度介绍，譬如有基于 Listener/Client 模式的客户端跨域通信工具、跨域 React 组件、跨域的安全 WeakMap、基于 iFrame 的 fetch 请求代理等等；更多跨域相关讨论参考&lt;a href=&#34;https://parg.co/Ud4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Udu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;访谈：Bustle 的 GraphQL 实践&lt;/a&gt;：Facebook 将 GraphQL 定义成“一门 API 查询语言以及一个支持查询现有数据的运行时”。REST 通过向 REST 端点发送请求获取数据，而 GraphQL 允许客户端指定它们想要的数据。当 Facebook 公司内部开始大规模使用 GraphQL 时，社区才刚刚开始使用 GraphQL。InfoQ 采访了来自 Bustle 的工程总监 Steve Faulkner，谈论了 GraphQL 的相关问题以及 Bustle 如何使用 GraphQL，并为想要采用 GraphQL 的团队提供了一些建议。更多 GraphQL 相关资料参考&lt;a href=&#34;https://parg.co/b1e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UAf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 技术栈&lt;/a&gt;: 本文是对于现代 JavaScript 技术栈的高屋建瓴的盘点，希望能够为那些还停留在旧时代的开发者提供完整的 2017 年 JavaScript 技术概念。本文首先阐述了所谓传统开发方式的面貌，然后依次介绍了包管理器 npm、JavaScript 模块打包工具 Webpack、代码语法转换工具 Babel、任务运行工具 Npm Scripts 等；更多 JavaScript 相关资料参考&lt;a href=&#34;https://parg.co/UHR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UdZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入 Vue.js 2.5 类型支持&lt;/a&gt;: Vue.js 2.5 着重提升了 TypeScript 的类型支持，使得开发者不仅仅能通过类组件接口来获得正确的类型定义，还能直接从内置的接口中获取类型，本文则是对于 Vue.js 2.5 中的类型支持进行详细阐述，展示了 TypeScript 中强大的类型系统是如何被用于流行的框架。本文依次讨论了 this 对象、Mapping Computed、PropTypes 以及兼容性等内容；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/UdC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Microsoft/napajs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Napa.js&lt;/a&gt;: Napa.js 是 Microsoft 开源的基于 V8 的多线程 JavaScript 运行时，其最初被用于解决 Bing 中高 CPU 占用的服务。随着该项目的不断发展，开发团队发现其同样能够被用于解决 Node.js 中 CPU 密集型的任务，即将 JavaScript 代码运行在多个隔离的 V8 运行时中，并且为不同运行时之间提供数据通信服务。Napa.js 能够像普通的 Node.js Module 一样被引入到项目中，同时也能不依赖于 Node.js 而被嵌入到某个宿主进程中。更多 JavaScript 相关资料参考&lt;a href=&#34;https://parg.co/UHR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.krackattacks.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Key Reinstallation Attacks&lt;/a&gt;: 本周，所谓的 KRACK 攻击占据了新闻头条，其能够突破大部分 WiFi 硬件设备上使用的 WPA2 加密体系，窃听用户机密；虽然很多的设备商已经更新了他们的系统或者提供了软件更新，这起事件也为我们敲响了警钟。在本次事件中使用 HSTS 预加载的网页并没有受到影响，也提醒了我们应该考虑是否将该头部声明添加到网站中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/github/accessibilityjs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;accessibilityjs&lt;/a&gt;: accessibilityjs 是由 GitHub 开源的界面可访问性错误扫描工具，其被用于了开发与生产环境下页面中不可访问的元素发现。accessibilityjs 会将那些不可访问的元素添加错误标识，包括了 ImageWithoutAltAttributeError, ElementWithoutLabelError,LinkWithoutLabelOrRoleError, LabelMissingControlError, InputMissingLabelError, ButtonWithoutLabelError, ARIAAttributeMissingError。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/froala/design-blocks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;design-blocks&lt;/a&gt;: 基于 Bootstrap 构建的超过 170 个设计块，能够帮助设计师快速设计现代网站；design-blocks 主要包括了响应、通讯录、内容、特性、页脚、表单、页头、价格、团队、证明书等等组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://formidable.com/blog/2017/release-webpack-dashboard-and-electron-webpack-dashboard/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Electron Webpack Dashboard&lt;/a&gt;：Electron Webpack Dashboard 对于 Webpack Dashboard 的扩展，为了方便各个平台的用户都能稳定、便捷地使用美观的 Webpack 控制台。Electron Webpack Dashboard 1.0 版本能够稳定支持 Webpack 2 与 Webpack 3，同时修复了早前版本存在的一些问题；而下一步 Electron Webpack Dashboard 将会专注于提供单机多实例并发的功能，同时针对 macOS 提供多 Tab 页，针对 Linux 与 Windows 提供多窗口的支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/idiotWu/smooth-scrollbar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Smooth Scrollbar&lt;/a&gt;: Smooth Scrollbar 允许我们自定义跨浏览器的高性能滚动条，它使用 CSS3 的 &lt;code&gt;translate3d&lt;/code&gt; 属性来实现惯性滚动。Smooth Scrollbar 还提供了丰富的插件系统与易用的插件接口，方便开发者根据自身地业务需要灵活定制。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UdP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;程序员是手艺人，如何让自己的技能变现？&lt;/a&gt;: 本文摘自陈皓(左耳朵耗子)在极客时间 App 开设的付费专栏“左耳听风”，是他对自身技术成长道路的分享。本文聚焦于如何让自己的技能变现，从千里之行基于跬步、关注有价值的东西、找到能体现价值的地方、动手能力很重要、关注技术付费点、提升自己的能力和经历、找到有价值的信息源等几个方面进行考虑。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>10.4</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2017/10/10.4/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-aa9754e572a5b77c.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-37-期bootstrap-4-必知必会2017-vuejs-报告graphcool-开源框架&#34;&gt;前端每周清单第 37 期：Bootstrap 4 必知必会、2017 Vue.js 报告、Graphcool 开源框架&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID：frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://hacks.mozilla.org/2017/10/saying-goodbye-to-firebug/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;再见，Firebug&lt;/a&gt;: Firebug 是曾经最为流行与强大的 Web 开发调试工具，无数的 Web 开发者都曾经使用过 Firebug。在 2005 年 Firebug 面世之初，它是首个能够允许开发者审查、编辑以及直接在 Firefox 浏览器中直接调试代码的工具；一年之后 Firebug 宣布开源，也吸引了更多的开发者协同维护这个工具。直到 2016 年，Firefox 宣布将会统一 Firebug 与 Firefox 的内置调试工具；近日发布的新版的 Firefox 的内置开发工具也是基于 React/Redux/Webpack 等流行的 Web 开发技术栈，为开发者们提供了更多酷炫的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://dev-blog.apollodata.com/apollo-client-2-0-5c8d0affcec7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apollo Client 2.0 发布&lt;/a&gt;: Apollo Client 是灵活易用的、完全由社区驱动的，能够与 React、Vue.js、Angular 等常见的 JavaScript 框架无缝集成的 GraphQL 客户端。目前 KLM、IBM、Intuit 等公司都已经在他们的项目中使用了 Apollo Client。2.0 版本也是更来了一系列的功能更新与特性增强。在新版本中，我们可以使用 Apollo Link 来作为网络层以优化数据交互的性能，通过 apollo-link-state 与 apollo-link-rest 则能够平滑地兼容原有的内部状态与 REST 接口；更详细的版本说明请参考原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Studio 1.2 发布&lt;/a&gt;：React Studio 是基于 React 的可视化 Web 开发工具，近日其发布了 1.2 版本；该版本中主要包含以下特性更新：内置集成了 Git 版本管理工具、集成了插件编辑器、添加了 Create Plugin 等命令、允许基于 Canvas 的 3D 预览。此外，项目的结构图功能也得到了增强，能够帮助开发者自动优化显示的组件树结构，并且优化了 Plugin Store 中插件的提交与安装方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.graph.cool/introducing-the-graphcool-framework-d9edab2a7816&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graphcool Framework 介绍&lt;/a&gt;: 近日 Graphcool 宣布开源包括 GraphQL 数据库、权限认证系统、实时订阅、Cloud Native 运行时等在内的完整的 Graphcool 开发框架；本文即是介绍如何利用 Graphcool Framework 快速构建与部署生产环境下的 GraphQL 服务端。GraphQL 数据库允许使用者通过 GraphQL CRUD 接口来对数据进行增删改查与流式获取,Permission 系统则提供了基于角色的权限校验功能，Subscription API 则提供了实时的数据推送功能。更多 GraphQL 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Coder/blob/master/Awesome-Lists/ServerSideApplication/API/QueryLanguage/GraphQL-List.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/US1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 JavaScript 的浏览器自动化与网页抓取&lt;/a&gt;: 本文的核心内容是介绍如何使用 Headless Chrome、Puppeteer 以及 Node.js 进行网页抓取，我们在过去的清单中也多次推荐过 Puppeteer 相关的内容。本文首先介绍了 Puppeteer 中基础的截图接口的调用与代码运行，然后循序渐进地介绍了如何针对性地抓取数据，最后讨论了如何使用对外发布的服务；更多浏览器自动化详细教程参考&lt;a href=&#34;https://parg.co/USn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 WebStorm 高效率开发 Angular 的建议&lt;/a&gt;: 本系列文章是由 Google 技术专家 Jurgen 以及 Motto 分享的，使用 WebStorm 开发 Angular 应用过程中，如何提高开发效率的实践思考。本文首先介绍了协同使用 WebStorm 与 Angular CLI，然后讨论了如何在 WebStorm 中快速切换与定位组件，接下来讨论了如何利用 Angular Language Service 以及如何自动化补全代码，最后介绍了如何优化 Imports。更多 Angular 相关资料参考&lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Coder/blob/master/Awesome-Lists/Web/Framework/Angular/Angular-List.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;使用 TypeScript 编写 React 与 Redux 应用&lt;/a&gt;: 随着应用复杂度与工程中代码数目的增加，我们不可避免地需要引入静态检测工具以提高代码质量，本文即是介绍如何在 React 与 Redux 开发中使用 TypeScript。本文依次介绍了在类组件、函数式组件、Redux 的 Action 与 Action Creator、Reducer、Store 中使用类型校验；更多 React 教程参考&lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/joshbuchea/HEAD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML 文档中 head 内标签详解&lt;/a&gt;: 本仓库是对于 HTML 文档中 head 相关的属性进行详细介绍，包括 head 中可使用的标签枚举、元标签、Link、图标、社交分享、浏览器与平台增强等；更多 HTML 头标签教程查看&lt;a href=&#34;https://parg.co/USB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;为什么 Decisiv 选择使用 Styled Components&lt;/a&gt;: 本文是来自 Decisiv 的工程师分享的他们对于 CSS-in-JS 的看法，以及为何在众多的 CSS-in-JS 框架中选择 Styled Components 的原因。作者首先阐述了自己的看法，CSS-in-JS 并非适用于所有的团队或者所有的场景，然后作者讨论了 React 中常见的样式管理模式以及 CSS-in-JS 的基本概念。接下来作者根据 Decisiv 的业务特殊性以及自身的架构设计分析了为何需要使用 CSS-in-JS，并且讨论了 Styled Components 相较于其他框架的优势：庞大而快速发展的社区、模板字符串以及对于 Sass 的支持、原生的移动端支持等。更多 CSS-in-JS 教程查看&lt;a href=&#34;https://parg.co/USB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;小米直达服务介绍与开发实战&lt;/a&gt;: 本文为 10 月 24 日前端之巅社群群分享整理而成，分享人小米 MIUI 系统框架负责人董红光，主要会围绕项目的背景和理念、平台的技术架构、以及一个简单的开发示例，来介绍小米的直达服务。本文首先介绍了直达服务平台的背景理念，即能够结合移动端网页和应用的优点，既不需要下载安装，功能服务又完整，还能达到原生般的流畅，服务间还能无缝打通和互相索引。直达服务平台上的各个服务采用前端技术栈开发，但是并不跑在浏览器或 WebView 中，它舍弃了浏览器内核渲染，转而采用 Android 的原生渲染机制，也就是说，实际上是使用前端技术栈开发了一个原生应用，无论是渲染效率，还是系统能力的 API 丰富程度，都远远超出传统网页。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端清单&lt;/a&gt;: 作者根据自身多年的前端开发经验与其他的开源清单，总结出了此份将站点或者网页发布到生产环境之前的自检清单。本文依次介绍了必备的视口、语言等头部标签，HTML 的最佳实践与测试，Webfonts 的使用，CSS 中响应式设计、预处理器、唯一 ID、Reset CSS 等内容，图片的优化，JavaScript 的连接、压缩、测试等，网络安全、性能、可用性的提升，SEO 等内容。更多 Web 实践教程参考&lt;a href=&#34;https://parg.co/USn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入了解 Bootstrap 4&lt;/a&gt;: 本文涵盖了如何使用 Bootstrap 4 构建响应式网站的关键技巧，特别是在浏览器逐步全面支持 Flexbox 与 Grid 的情况下，应该如何解决常见的响应式 Web 设计难题。本文首先对于 Bootstrap 4 的特性进行介绍，包括默认的 CSS Resets 等关键变化；接下来本文讨论了 Bootstrap 的工作原理以及它能够在 Web 项目中起到的作用与如何引入到项目中，最后作者以上万字的篇幅详细介绍了如何使用 Bootstrap 4 来构建常用的 布局与组件。更多 Web 布局相关内容参考&lt;a href=&#34;https://parg.co/USB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://www.monterail.com/state-of-vuejs-report&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 Vue.js 现状报告&lt;/a&gt;: 本文作者将 2017 年中重要的 Vue.js 相关的信息与商业使用案例浓缩在了一份 80 页的报告中。该报告主要包含了以下内容：Vue.js 的创建者 Evan You 对于 Vue.js 的未来有何规划，Adobe、Behance、Codeship 以及 Gitlab 这些公司是如何使用 Vue.js 的，为什么大部分软件开发者会愿意在下一个项目中使用 Vue.js，Vue.js 的主要学习资源包含哪些，Vue.js 这些年经历了怎样的变化；更多 Vue.js 相关资料参考&lt;a href=&#34;https://parg.co/bWF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 与 ECMAScript&lt;/a&gt;: 作者在本文中阐述了其对于 JavaScript 与 ECMAScript 之间的异同点的认知，同时也讨论了 ECMAScript 与浏览器、Babel 等概念之间的关联。Ecma International 是负责创建技术标准的组织，ECMA-262 是由 Ecma International 发布的描述通用脚本语言的标准，而所谓的脚本语言即是指在某个现存系统或者实体上运行的语言。ECMAScript 并不是一种语言，而是一种规范(Specification)，即 ECMA-262 中定义的规范；JavaScript 则是遵循 ECMAScript 规范的具体的脚本语言的实现，根据 ECMAScript 规范我们能创建新的脚本语言，而学习 JavaScript 则能够使我们了解如何去使用它。更多 JavaScript 教程参考&lt;a href=&#34;http://ngte-pl.gitbook.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/USh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React-Virgin&lt;/a&gt;: React-Virgin 是由 Trixie 公司开源的针对 React Native 项目的 UI 模板与工具库，其致力于帮助开发者快速开发美观的应用。React-Virgin 目前包含了基于 react-navigation 的模板，以及基础组件、水平列表、垂直列表、按钮、头、网格、气泡、加载器等组件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/SparkPost/heml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HEML&lt;/a&gt;：HEML 是开源的用于构建响应式邮件的标记语言，可以将其看做邮件模板的开发利器；开发者使用正常的 HTML 写好邮件，HEML 则会处理所有邮件客户端的兼容性。HEML 官方宣称的特性包括 Native Feel，即使用 HTML、CSS 这样熟悉的语言进行开发；Forward Thinking，即能够为所有的客户端提供一致的体验；Extendable，即提供了丰富的接口以创建自定义的元素与样式规则。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/technopagan/sqip&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQIP&lt;/a&gt;: SQIP 是基于 SVG 的 LQIO 方案，其能够用于生成可用的 SVG 格式的图片替代(Image PlaceHolder)；所谓的 Image PlaceHolder 即指那些能够从图片中捕获图片的主要色彩，并且在图片加载完成之前先占用相同尺寸的资源。而于 2012 年提出的 LQIP 则是主流的 Image PlaceHolder 解决方案，Facebook、Pinterest、Medium 等公司皆有其相应的开源库；SQIP 希望能够在替代图的质量与文件大小之间达成较好地平衡。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/webpackmonitor/webpackmonitor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack Monitor&lt;/a&gt; : Webpack Monitor 是一个高可配置的 Webpack 插件，其能够捕获构建生成的，生产环境中包体关键统计指标；并且 Webpack Monitor 提供了交互式地分析工具，来帮助开发者更好地审视包体的构成，以此来识别与选择可用的优化策略。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/US7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;网安专家养成记：勤动手，多交流，善思考&lt;/a&gt;: 作为一名从事信息安全工作 10 年之久的沙场老将，谷野从传统安全公司安全服务开始，历经大型传统企业、互联网公司安全管理实践。一路走来，谷野在安全方面的探索，对业界从业者可能都有更好的借鉴作用。作者在本文中依次讨论了以管窥豹，互联网行业的安全如何做、如何从专业的角度审视和规划安全产品选型等内容。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复“加群”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明“前端之巅投稿”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
