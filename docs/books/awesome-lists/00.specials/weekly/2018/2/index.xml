<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/index.xml" rel="self" type="application/rss+xml" />
    <description>2</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>2</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/</link>
    </image>
    
    <item>
      <title>2.1</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.1/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-158b53fefd7a44fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面50.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-50-期-angularjs-and-long-term-support-web-安全二三论react-与-clean-code&#34;&gt;前端每周清单第 50 期: AngularJS and Long Term Support, Web 安全二三论，React 与 Clean Code&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TypeScript 2.7 发布&lt;/a&gt;: 本周，TypeScript 2.7 发布，本文则是对于该版本的特性进行总结描述：严格的类属性检测，Definite assignment assertions，更为方便的 ECMAScript 模块操作性，Symbol 与常量名属性，对于 &amp;ndash;watch 模式的优化，以及对于数值、元组等数据类型的优化等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uvd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;style-components 3.1.0 发布&lt;/a&gt;: 该版本引入了新的 CSS 注入机制，极大地优化了生产环境下客户端渲染的性能；同时还提供了流式服务端渲染的支持，保障了首字节返回的速度。styled-components v3.1.0 在生产环境下已经默认使用了 insertRule，一个可能不太为人所知的 API，却能够近十倍地提升初始化挂载效率，以及近二十倍地提升重渲染效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AngularJS 稳定版本与 LTS 规划&lt;/a&gt;: 作为现代 Web 框架的先驱，AngularJS 已然是用于构建 Web 应用的稳定框架首选之一，并且为数百万的开发者所使用。不过长江后浪推前浪，AngularJS 的占比与社区活跃度也在逐步下降，其开发团队也计划发布最后一个重大的更新：1.7 版本，然后于 2018 年 7 月 1 日进入 Long Term Support 阶段。在该版本发布之后，开发团队并不会继续发布新的特性，而会着眼于进行重大的错误修复。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://v8project.blogspot.my/2018/02/v8-release-65.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 6.5 发布&lt;/a&gt;: 每六个星期，V8 团队就会创建新的分支作为发布通道，本文即是对新近发布的 6.5 版本进行简要介绍。该版本引入了对于 WebAssembly 代码的流编译机制，新的 WebAssembly API 提供了与 fetch 协同使用的抓取 WASM 源代码并且进行流式编译的功能。此外，该版本还一如既往地着眼于性能优化，不断拓宽 JavaScript 内建的优化路径，并且引入了新的 “deoptimization loop.” 机制来避免一些意外情况。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/ULc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Progressive Web Apps 介绍&lt;/a&gt;: Progressive Web Apps (PWA) 是移动 Web 应用开发中的新潮流之一，所谓的 PWA 即指那些使用了某些技术以保证用户体验与原生应用尽量一直的网页。本文是对于 PWA 的入门介绍，主要讨论了 Progressive Web Apps 的竞品、Progressive Web Apps 的特性与优势等内容。更多相关内容参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#production&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome PWA Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uvj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 MobX State Tree 的状态管理&lt;/a&gt;: MobX State Tree 是另一个前端状态管理框架，其虽然内部使用了 MobX，却提供了截然不同的设计模式与编程接口。MobX State Tree 设定好了数据的结构与更新方式，而 MobX 仅仅提供了基础的接口，MobX State Tree 还为我们提供了类型支持与模型创建接口。本文作者首先讨论了 MobX State Tree 的设计理念，然后比较了分别以 MobX 与 MobX State Tree 实现相同功能的差异。更多相关资料参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome MobX Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Nuxt.js 的服务端渲染的 Vue 应用&lt;/a&gt;: 对于很多初学者而言，服务端渲染可能并不是一件容易的事情，特别是在混杂了数据抓取、路由与权限控制等需求时。本文即深入浅出地介绍了如何利用 Nuxt.js 来构建完整的 Vue.js 服务端渲染应用，作者依次介绍了为什么需要服务端渲染、服务端渲染与 SEO、从零构建 Nuxt.js 项目、自定义布局、Webpack 与静态资源处理、隐式路由与代码分割、嵌套路由、中间件等内容。更多相关内容参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Vue Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Node.js 开发中的 JavaScript 代码风格&lt;/a&gt;: 性能问题一直是 JavaScript 中引人关注的部分，随着 JavaScript 引擎与运行时的不断优化，我们也需要不断变革自身对于 JavaScript 优化方式的考量。本文作者抛出了自己的观点：随着 Node.js 能同时跑在 ChakraCore 引擎与 V8 引擎上，并且 V8 引擎也引入了新的 Turbofan 优化编译器，JavaScript 开发者应该更多地关注于写出惯用的、可读性高的、易于维护的代码，而不应该在花费过多的精力去编写编译器友好的代码。更多相关内容参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#webframework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Node.js Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U9A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 Google Cloud Platform 的十二个账户管理与权限控制的最佳实践&lt;/a&gt;: 随着应用用户数与复杂度的增加，安全问题也变得日渐重要，而其中的账户管理、权限控制与密码管理无疑是安全的重要组成基石。这些方面却往往容易被开发者忽视或者未能采取正确的措施，而 Google Cloud Platform(GCP) 一直致力于为用户提供账户的创建、安全加固、管理等多中操作工具，本文即是其多年实践总结而来的最佳实践分享，以其帮助开发者打造安全、可扩展、高可用的用户权限认证系统。更多相关资料参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#websecurity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome WebSecurity Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ukr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解 CSS 布局中的盒尺寸&lt;/a&gt;: Flexbox 与 CSS Grid 的核心特性之一，就是能将内部的剩余可用空间分割给内部元素；作者在本文中分享了一些对于 CSS 布局中尺寸单位与计算的考虑。作者首先会给出一些规范的解读，然后深入讲解 Flexbox 与 CSS Grid 中的尺寸计算规则。更多相关内容参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#syntax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome CSS Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uv2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;架构师之路&lt;/a&gt;: 未来的职业规划几乎是每位开发者会考虑的事情，在职业生涯上我们也会有很多的选择，本系列则是讨论如何成为一位架构师。本系列包含了如下的文章：如何成为架构师，架构师的利害相关，架构师的类型，架构师的特性等，更多相关内容可以参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#softwarearchitecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome SoftwareArchitecture Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 前端中的增强现实(AR)开发技术&lt;/a&gt;: 增强现实(以下简称 AR)浪潮正滚滚而来，Web 浏览器作为人们最唾手可得的人机交互终端，正在大力发展 AR 技术。很多 Web 前端工程师也在寻求职业转型，于是本文作者 &lt;a href=&#34;http://geekplux.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GeekPlux&lt;/a&gt; 把近半年的相关调研结果在此汇结成文。本文力求把目前前端方向的 AR 技术都罗列一遍，细节不赘述，只做概括和科普，主要关注实现方式与关键技术。更多相关内容参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#vr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome AR Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uvz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何避免攻击者从网站中窃取信用卡账户与密码&lt;/a&gt;: 本文作者曾撰文介绍自己是如何通过上传分发恶意代码来搜集用户的敏感信息。本文中，作者则从加固的角度给出了保护用户敏感信息的多个建议：并不需要刻意的避免第三方代码，可以将敏感信息放在独立的 HTML 文件中，并且将该文件通过 iframe 中加载，同时以静态文件服务器的方式从不同的域名中访问该文件。更多相关资料参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#websecurity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome WebSecurity Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeburst.io/clean-code-in-react-fe11372f331c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 中 Clean Code 的实践&lt;/a&gt;: 来自 Bara 的开发者在遵循 Clean Code 的前提下重构了他们的代码库，以提升代码的可读性与可维护性。本文即是作者对于此次重构过程的心得分享，其在末尾亦给出了一些个人的思考：分解组件与函数，保证每个组件或者函数的单层抽象；使用更易于理解的命名等。更多 React 相关资料参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome React Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wulkano/kap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kap&lt;/a&gt;: Kap 是使用 Web 技术构建的开源屏幕录制工具，目前仅有 macOS 版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lukeed/polka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polka&lt;/a&gt;: Polka 是轻量级、高性能的 Express.js 替代框架；尽管 Express.js 的性能已然不错，Polka 仍然青出于蓝而胜于蓝，在很多的细节上做到了优化。一言以蔽之，Polka 是内置了路由、中间件以及子应用的原生 HTTP 服务器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/callbag/callbag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callbag&lt;/a&gt;: Callbag 是用于保证轻量级的 Observables 与 Iterables 的 JS 回调标准，&lt;a href=&#34;https://github.com/staltz/callbag-basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;callbags-basic&lt;/a&gt; 则是对于 Callbag 标准的具体实现，我们可以阅读 &lt;a href=&#34;https://twitter.com/andrestaltz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;André Staltz&lt;/a&gt; 编写的&lt;a href=&#34;https://staltz.com/why-we-need-callbags.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这篇文章&lt;/a&gt;来了解更多信息。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/thejameskyle/unstated&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unstated&lt;/a&gt;: Unstated 是另一个状态管理框架，其并未引入新的模式，而是基于 React 组件与 Context 的内置设计构建。Unstated 包含了三个部分，Container 是类似于 React.Component 的简单类，但是会包含一些状态相关的操作；Subscribe，允许传入 Container 实例，并且将其传递到子组件中，Provider 则是作为根节点来存储所有的实例。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/8zN4jlg-HpsdFSTxqFC08g&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 年，Mozilla 为 Web 做了哪些事情？&lt;/a&gt;: 2017 对于 Mozilla 来说是非常重要的一年。我们发布了历史上最快的 Firefox，重新构建了 DevTools 开发者工具，见证了四个主流浏览器对 WebAssembly 的支持，启动了开源的虚拟现实和语音识别平台。我们的开发者关系团队也参与了全球 60 多场路演，见证了 MDN Web Docs 网站读者数量几乎增加了一倍。本文即是对 Mozilla 2017 工作的总结与盘点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.1-en</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.1-en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.1-en/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-158b53fefd7a44fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面50.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;frontend-weekly-no4angularjs-and-long-term-support-something-about-web-security-clean-code-in-react&#34;&gt;Frontend+ Weekly No.4：AngularJS and Long Term Support, Something about Web Security, Clean Code in React&lt;/h1&gt;
&lt;p&gt;The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href=&#34;https://medium.com/@384924552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/news&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;reddit.com&#34;&gt;Reddit&lt;/a&gt;,&lt;a href=&#34;twitter.com&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;mybridge.co&#34;&gt;MyBridge&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;More Issues can be found in &lt;a href=&#34;https://parg.co/U9x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frontend+ Weekly Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Announcing TypeScript 2.7&lt;/a&gt;: In this week, TypeScript 2.7 is released, this post puts together a quick list for a bird’s eye view of this release: Stricter class property checks, Definite assignment assertions, Easier ECMAScript module interoperability, unique symbol types and const-named properties, Cleaner output in &amp;ndash;watch mode, Prettier &amp;ndash;pretty output, Numeric Separators, Fixed Length Tuples, in operator narrowing and accurate instanceof and Smarter object literal inference.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uvd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;style-components 3.1.0 is available&lt;/a&gt;: This version introduces a new CSS injection mechanism, which means faster client-side rendering in production and streaming server-side rendering support enables a faster time-to-first-byte. styled-components v3.1.0 now uses insertRule in production by default, a new and widely unknown DOM API, initial mount time of the benchmark app was reduced by ~10x, and re-render time was reduced by ~20x!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stable AngularJS and Long Term Support&lt;/a&gt;: AngularJS is an extremely stable framework for building web applications, and has been used by millions of developers across the web. AngularJS is planning one more significant release, version 1.7, and on July 1, 2018 it will enter a 3 year Long Term Support period. After the release of 1.7.0 the team does not intend to merge any feature or fix that will require even a minor breaking change.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://v8project.blogspot.my/2018/02/v8-release-65.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 release v6.5&lt;/a&gt;: Every six weeks, we create a new branch of V8 as part of our release process, this post provides a preview of some of the highlights in anticipation of the release. This release comes with a streaming compilation for WebAssembly code, The WebAssembly API provides a special function to support streaming compilation in combination with the fetch() API. In addition, they continued to work on widening the fast-path of JavaScript builtins in general, adding a mechanism to detect and prevent a ruinous situation called a “deoptimization loop.”&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/ULc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;An introduction to Progressive Web Apps&lt;/a&gt;: Progressive Web Apps (PWA) are the latest trend in mobile application development using web technologies. A Progressive Web App is a website which is developed with certain technologies that make the mobile experience much more pleasant than a normal mobile-optimized website. In this post, the author talks about Progressive Web Apps alternatives, Progressive Web Apps features, etc. More reference about this can be found &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#production&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome PWA Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Routing and Route Protection in Server-Rendered Vue Apps Using Nuxt.js&lt;/a&gt;: The concept and implementation details of Server-Side Rendering (SSR) are challenging for beginners as well as experienced developers. The challenges get more daunting when you have to do things like data fetching, routing and protecting authenticated routes. This article will walk you through how to overcome these challenges with Nuxt.js. More reference about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Vue Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uvj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;State Management with MobX State Tree&lt;/a&gt;: With MobX State Tree, we have another first class contender that should be thrown into the candidates for managing state. While it is not completely its own separate state management solution (it is very similar to MobX), it is different enough to not categorize it as just “MobX”. This post introduce how to use MobX State Tree, and compare the codebase between MobX. More reference about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome MobX Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UvG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Modernizing Node.js with idiomatic JavaScript&lt;/a&gt;: Performance in JavaScript is a huge area, it is faster than ever, but there is still one question that remains unanswered: How can we decide which JavaScript to make fast? In the past, performance advice was often presented as anti-patterns, for example “Don’t use for-each” or “Don’t use try-catch”. Fast-forward to 2018 — Node.js can now also be powered by the ChakraCore JavaScript engine and V8 has a new optimizing compiler Turbofan, so JavaScript developers should focus on writing idiomatic, readable and maintainable code and not focus on the compilers underneath. More reference about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#webframework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Node.js Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U9A&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;12 best practices for user account, authorization and password management&lt;/a&gt;: Account management, authorization and password management can be tricky. For many developers, account management is a dark corner that doesn&amp;rsquo;t get enough attention. For product managers and customers, the resulting experience often falls short of expectations. Google Cloud Platform (GCP) brings several tools to help you make good decisions around the creation, secure handling and authentication of user accounts. This post will lay out the best practices to ensure you have a safe, scalable, usable account authentication system. More reference about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#websecurity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome WebSecurity Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ukr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How Big Is That Box? Understanding Sizing In CSS Layout&lt;/a&gt;: A key feature of Flexbox and Grid Layout is that they can deal with distributing available space between, around and inside grid and flex items. In this article, I’m going to share with you some interesting things about sizing boxes in CSS. I’ve picked out a few things from the specifications that I believe are vital in terms of understanding exactly how big that box is. Take some time to read through, and I think you’ll find sizing in Grid a lot less mysterious! More reference about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#syntax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome CSS Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-the-hood&#34;&gt;Under the hood&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uv2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Path to Becoming a Software Architect&lt;/a&gt;: Have you ever wondered what career opportunities a developer has? There are several career paths a developer might take, and this series talks over how to become a software architect. There are several posts in this series: The Path to Becoming a Software Architect, Stakeholders in Software Architecture, Types of Software Architects, Quality attributes in Software Architecture, etc. More reference about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#websecurity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome WebSecurity Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uvz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to stop me harvesting credit card numbers and passwords from your site&lt;/a&gt;: The author wrote a post to describe how I distributed malicious code that gathers sensitive information. In this article, he puts forward some practical advice: no need to try and avoid third-party code, capture sensitive information in a separate HTML file, display this file in an iframe, serve the file from a static file server on a different domain. More reference about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#websecurity&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome WebSecurity Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://codeburst.io/clean-code-in-react-fe11372f331c&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Clean Code in React&lt;/a&gt;: Developer from Bara refactor his codebase, following the Clean Code, so as to make them better. At the end of article, author shares some thoughts: Break down the component: only one level of abstraction per component, Break down the function: only one level of abstraction per function, Use more descriptive names, etc. More reference for React can be found &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#framework&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome React Reference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wulkano/kap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kap&lt;/a&gt;: Kap is an open-source screen recorder built with web technology, only can be used in macOS at now.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/lukeed/polka&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polka&lt;/a&gt;: Polka is an extremely minimal, highly performant Express.js alternative. Yes, you’re right, Express is already super fast &amp;amp; not that big 🤔 — but Polka shows that there was (somehow) room for improvement! Essentially, Polka is just a native HTTP server with added support for routing, middleware, and sub-applications. That’s it!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/callbag/callbag&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Callbag&lt;/a&gt;: Callbag is a standard for JS callbacks that enables lightweight observables and iterables, and &lt;a href=&#34;https://github.com/staltz/callbag-basics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;callbags-basic&lt;/a&gt; is a tiny library based on the Callbag standard. We can also read the &lt;a href=&#34;https://staltz.com/why-we-need-callbags.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;article&lt;/a&gt; by &lt;a href=&#34;https://twitter.com/andrestaltz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;André Staltz&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/thejameskyle/unstated&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Unstated&lt;/a&gt;: Unstated is another state management framework, which designed to build on top of the patterns already set out by React components and context. It has three pieces, Container, a very simple class which is meant to look just like React.Component but with only the state-related bits; Subscribe, allows us to pass our container classes and receive instances of them in the tree and Provider, something to store all of our instances internally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2.2</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.2/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-f28849fccd2129fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面51.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-51-期-react-context-api-与模式变迁-webpack-与-web-优化-ai-界面生成&#34;&gt;前端每周清单第 51 期: React Context API 与模式变迁, Webpack 与 Web 优化, AI 界面生成&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome 即将标识所有的 HTTP 站点为非安全&lt;/a&gt;: 近日，Google Chrome 宣布，他们将会在 2018 年七月左右发布的 Chrome 68 版本中，开始把所有的 HTTP 站点标识为非安全；此举也可能标志着非 HTTPS 站点的终结。开发者可以使用最新版本的 Lighthouse Node.js 命令行工具来检测某个网站中是否存在了基于 HTTP 协议加载的资源，并且能够自动地判断是否已经有了相对应的 HTTPS 版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rollup 开始支持代码分割&lt;/a&gt;: 在近日发布的 0.55 版本中，JavaScript 模块打包工具 Rollup 终于引入了代码分割，这个千呼万唤始出来的特性。一直以来，Rollup 都是 React, Vue, D3, Moment, Three.js, Ember, Angular, Babylon, Jest, Bootstrap, Leaflet, Prettier 这样的工具库的首选，而该特性的加入也意味着其逐步成为了应用打包工具的候选之一。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft Edge 与 Windows 10 进一步拥抱 PWA&lt;/a&gt;: Edge 17 即将内置 Service Workers 与 Push Notifications，同时 Microsoft Store 将会把那些手动提交的 PWA 应用于原生应用同等对待。本文即是 Microsoft Edge 技术团队对于 PWA 的介绍，对于它能够解决的问题的畅想以及未来如何在 Windows 10 中保证 PWA 的表现。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UX4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 16.3 新特性介绍&lt;/a&gt;: React 16.3-alpha 近日登陆 npmjs，并且能够引入到项目中，本文即是对于 16.3 版本中的新特性进行介绍。该版本引入了新的 Context API，允许开发者使用 React.createContext() 生成两个关联组件；重构了生命周期回调，废除了 componentWillMount, componentWillUpdate, componentWillReceiveProps，引入了 getDerivedStateFromProps；提供了 StrictMode，以保证代码符合最佳实践；更新了 React Developer Tools 等。更多相关资料参考 &lt;a href=&#34;https://parg.co/UXI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service workers 介绍与使用&lt;/a&gt;: Service workers 可以看做 Progressive Web Apps 的核心组成，提供了资源缓存与通知推送的功能，这也是 Web 应用与原生应用当前的区别之一。本文会包含 Service Worker 的基本概念与使用，具体讨论了后台处理、离线支持、资源预抓取、网络请求缓存、安装与基础使用等内容。更多相关资料参考 &lt;a href=&#34;https://parg.co/UX1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PWA Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React’s ⚛️ new Context API&lt;/a&gt;: 本文将会详细介绍 React 16.3 版本中提供的新 Context API，它主要包含了三个部分：React.createContext 允许输入初始值，并且返回包含 Provider 与 Consumer 的对象。Provider 组件被放置在组件树中的较高层，允许传入名为 value 的属性，而 Consumer 属性则可以放置在组件树的任意位置，通过传入渲染回调函数的方式来接收 value 参数。更多相关内容参阅 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;系列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL 应用中的五个常见问题与规避方案&lt;/a&gt;: 本文中，我们将会讨论如何尽可能地发挥 GraphQL 的长处而绕过其中的坑。作者在本文中讨论了以下内容：Schema duplication, Server/client data mismatch, Superfluous database calls, Poor performance and Boilerplate overdose 等。对于每个问题，作者首先进行了描述，然后介绍了在 Vulcan 的开发过程中是如何定位，并且解决的。更多相关内容参考 &lt;a href=&#34;https://parg.co/UX2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nicolasgallagher.com/redux-modules-and-code-splitting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redux 模块与代码分割&lt;/a&gt;: Twitter Lite 一直在使用 Redux 作为其状态管理框架，并且在不断地寻找合适的模块与代码风格方案。虽然 Redux 默认的接口风格并非面向那种持续加载的情形，本文即是介绍了 Twitter Lite 如何通过合理的代码风格来支持渐进式代码加载，该模式已经在生产环境下经受了数年的检验。更多相关内容参考 &lt;a href=&#34;https://parg.co/bMe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 开发基础与工程实践&lt;/a&gt;系列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Addy Osmani: 使用 Webpack 进行 Web 性能优化&lt;/a&gt;: 现代 Web 应用常常会使用所谓的构建工具来创建部署到生产环境的包体，该包体往往是被优化的、压缩的，尽可能减少用户的消耗。本文则是 Addy Osmani 编写的，基于 Webpack 的 Web 性能优化教程，讨论了如何利用代码分割等特性来移除不用的代码片，并且尽可能压缩包体，来保证最小的网络消耗与处理时间。更多相关内容参考 &lt;a href=&#34;https://parg.co/bMe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 开发基础与工程实践/性能优化&lt;/a&gt;系列。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 模式演化&lt;/a&gt;: 本文将会深度探讨 React 生态圈中流行的架构模式，这些架构模式能够提升代码的可读性，清晰性，并且保障代码的可组合性与可重用性。本文将会依次介绍 Conditional Render, Passing Down Props, Destructuring Props, Provider Pattern, High Order Components, Render Props, 等等模式。更多相关内容参阅 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;系列。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yangshun/front-end-interview-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端面试手册&lt;/a&gt;: 不同于传统的软件工程师的技术面试，前端工程师的面试可能较少地关注算法，更多地瞩目于交互相关以及 HTML，CSS，JavaScript 这些领域相关的知识。本文作者在遍寻了现存的面试手册之后，未发现有完全满意的，前端相关的面试手册；因此编写了此文，以共享自己在前端工作中的知识积淀，本文也可以看做对于著名的 Front-end Job Interview Questions 的回答。更多相关内容参考 &lt;a href=&#34;https://parg.co/UXa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Web Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;如何训练能够将设计稿转化为 HTML 与 CSS 的 AI 程序&lt;/a&gt;: 随着人工智能与深度学习技术的发展，我们也可以预见它们将逐步地改变前端开发中的一些领域。AI 能够帮助我们提升原型构建的速度，降低软件构建的门槛。这两年来，随着 Tony Beltramelli 的 &lt;a href=&#34;https://arxiv.org/abs/1705.07962&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pix2code paper&lt;/a&gt; 以及 Airbnb 开源 &lt;a href=&#34;https://airbnb.design/sketching-interfaces/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sketch2code&lt;/a&gt;，我们可以逐步地使用 AI 来帮助我们构建简单的页面。不过，目前前端开发自动化方面最大的瓶颈可能就是计算能力，但是这并不妨碍我们来学习了解相关的深度学习基础算法，以及如何训练数据，如何使用模型来进行界面转换。本文中，作者会循序渐进地带领读者来构建基础的，能够将某个设计稿转化为 HTML 与 CSS 代码的神经网络。更多相关内容参阅 &lt;a href=&#34;https://parg.co/UXa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Web Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018-有货移动 Web 端性能优化探索实践&lt;/a&gt;: 在移动互联网的时代里，对于一个 Web 站点来说，移动端的用户体验尤为重要。现代 web 站点的设计和开发都是以移动优先作为第一原则，我们也专门为了移动端的 Web 站点做了相应的优化和提升。这个过程中任何一个环节的延迟都会造成性能瓶颈，降低用户继续访问的可能性，所以我们在服务器端，浏览器端，网络加载，多个方面做了一系列的优化工作。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/automerge/automerge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Automerge&lt;/a&gt;: Automerge 是类似于 JSON 的，能够用于构建协同 JavaScript 应用的数据结构。其核心特性在于允许多个用户并发修改，并且会进行自动地合并；目前，很多的 JavaScript 应用会将状态保存在 JSON 文档这样的模型中，Automerge 即可以保证这种使用的一致性，还能够提供原子化同步与合并等扩展功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/captbaritone/winamp2-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;winamp2-js&lt;/a&gt;: winamp2-js 是利用 HTML5 与 JavaScript 对于 Winamp 2.9 的覆写，包含了如下特性：支持动态换肤，支持通过拖拽的方式加载本地皮肤文件或者资源文件，支持自定义操作按钮等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/supnate/rekit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rekit&lt;/a&gt;: Rekit 是完整的，开发基于 React，Redux，与 React Router 应用的工具集与解决方案。Rekit 首先提供了包容万象的编辑器，帮开发者自动进行了项目构建与文件布局，从而使得开发者能够更加专注于业务逻辑，而不是无止境的库、模式、配置文件等等。Rekit 提供了 opinionated 的架构模式，通过面向特性的分割方式，来保证应用的可扩展性、可测试性与可维护性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wasdk/WebAssemblyStudio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly Studio&lt;/a&gt;: WebAssembly Studio 是在线学习、实践、运行 WebAssembly 的工作台，它提供了基于 Web 的 IDE，支持用户将 C++ 或者 Rust 编译为 WebAssembly。同时，用户也可以本地运行该 Studio，只需要安装 Node.js 与 Webpack 然后运行即可。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UXc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;N26 是如何利用 JavaScript 构建面向银行业的微服务系统&lt;/a&gt;: N26 是来自德国的银行业初创项目，其 CTO Patrick Kua 在 ThoughtWorks 工作了十三年，积累了丰富的软件相关经验，并成功地带领技术团队为数十万用户提供优质的银行业服务。本文以对话的方式，注重于讨论 Patrick 的团队时如何选择语言与框架，如果处理测试、DevOps 以及持续集成等操作，如果部署微服务并提供高可用的服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.2-en</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.2-en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.2-en/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-f28849fccd2129fa.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面51.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;frontend-weekly-no5-react-context-api--patterns-evolution-web-optimize-with-webpack-page-generation-by-ai&#34;&gt;Frontend+ Weekly No.5: React Context API &amp;amp; Patterns Evolution, Web Optimize with Webpack, Page Generation by AI&lt;/h1&gt;
&lt;p&gt;The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href=&#34;https://medium.com/@384924552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/news&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;reddit.com&#34;&gt;Reddit&lt;/a&gt;,&lt;a href=&#34;twitter.com&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;mybridge.co&#34;&gt;MyBridge&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;More Issues can be found in &lt;a href=&#34;https://parg.co/U9x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frontend+ Weekly Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chrome will mark all HTTP sites as “not secure&lt;/a&gt;: Google Chrome now announced that starting in Chrome 68 (to be releaded in July 2018) the browser will mark non-secure sites (HTTP) as “not secure”, marking the end of non-HTTPS websites. Developers can use latest Node CLI version of Lighthouse, an automated tool for improving web pages, to find which resources a site loads using HTTP, and which of those are ready to be upgraded to HTTPS simply by changing the subresource reference to the HTTPS version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rollup now has code-splitting&lt;/a&gt;: As of version 0.55, Rollup, the JavaScript module bundler, finally has code-splitting, the most popular feature request for a long time. Rollup has long been the tool of choice for library authors — it powers React, Vue, D3, Moment, Three.js, Ember, Angular, Babylon, Jest, Bootstrap, Leaflet, Prettier, and thousands of other tools — but code-splitting means Rollup can now become a great choice for applications of all sizes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXq&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Welcoming Progressive Web Apps to Microsoft Edge and Windows 10&lt;/a&gt;: Edge 17 will come with Service Workers and Push Notifications, and the Microsoft Store will start listing Progressive Web Apps by manual submission which is a big step ahead for making web apps as usable as native apps. In this post, we’ll give a quick introduction to Progressive Web Apps – what they are, the problems they solve, and how we’ll be enabling them across Windows 10.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UX4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What’s new in React 16.3&lt;/a&gt;: React 16.3-alpha just hit npmjs and can be downloaded and added to your project, this post will make some observation about new features in this version. New context API, The new API is accessible as React.createContext() and creates two components for us; New life-cycle methods, componentWillMount, componentWillUpdate, componentWillReceiveProps get removed and getDerivedStateFromProps is introduced; StrictMode to make sure your code is following the best practices, New version of React Developer Tools. More reference about this can be found &lt;a href=&#34;https://parg.co/UXI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Service workers: the little heroes behind Progressive Web Apps&lt;/a&gt;: Service workers are at the core of Progressive Web Apps. They allow caching of resources and push notifications, which are two of the main distinguishing features that have set native apps apart up to this point. This post will cover Background Processing, Offline Support, Precache assets during installation, Caching network requests, Installation and Basic Usage, etc. More reference about this can be found &lt;a href=&#34;https://parg.co/UX1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PWA Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React’s ⚛️ new Context API&lt;/a&gt;: This post will introduce the new Conext API in React, it consists of thress main parts: React.createContext which is passed the initial value, returns an object with a Provider and a Consumer. The Provider component is used higher in the tree and accepts a prop called value (which can be anything). The Consumer component is used anywhere below the provider in the tree and accepts a prop called “children” which must be a function that accepts the value and must return a react element (JSX). More reference about this can be found &lt;a href=&#34;https://parg.co/UXI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Five Common Problems in GraphQL Apps (And How to Fix Them)&lt;/a&gt;: In this article, we will learn to unlock the power of GraphQL without suffering its drawbacks. The author talks about problems such as: Schema duplication, Server/client data mismatch, Superfluous database calls, Poor performance and Boilerplate overdose. For each issue, I’ll describe the problem, and then explain how I’m addressing it inside Vulcan, a React/GraphQL open-source framework I’ve been working on over the past year. More reference about this can be found in &lt;a href=&#34;https://parg.co/UX2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://nicolasgallagher.com/redux-modules-and-code-splitting/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redux modules and code-splitting&lt;/a&gt;: Twitter Lite uses Redux for state management and relies on code-splitting. However, Redux’s default API is not designed for applications that are incrementally-loaded during a user session. This post describes how I added support for incrementally loading the Redux modules in Twitter Lite. It’s relatively straight-forward and proven in production over several years. More reference about this can be found in &lt;a href=&#34;https://parg.co/UXT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Redux Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXN&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web Performance Optimization with Webpack by Addy Osmani&lt;/a&gt;: Modern web applications often use a bundling tool to create a production “bundle” of files (scripts, stylesheets, etc.) that is optimized, minified and can be downloaded in less time by your users. In Web Performance Optimization with webpack, we will walk through how to effectively optimize site resources using webpack. This can help users load and interact with your sites more quickly. Webpack is one of the most popular bundling tools in use today. Taking advantage of its features for optimizing modern code, code-splitting scripts into critical and non-critical pieces and stripping out unused code (to name but a few optimizations) can ensure your app has a minimal network and processing cost. More reference about this can be found in &lt;a href=&#34;https://parg.co/UXz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-the-hood&#34;&gt;Under the hood&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Evolving Patterns in React&lt;/a&gt;: Let’s take a closer look at some of the patterns that are emerging in the React ecosystem. These patterns improve readability, code clarity, and push your code towards composition and reusability. This post will cover Conditional Render, Passing Down Props, Destructuring Props, Provider Pattern, High Order Components, Render Props, etc. More reference about this can be found &lt;a href=&#34;https://parg.co/UXI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/yangshun/front-end-interview-handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Front End Interview Handbook&lt;/a&gt;: Unlike typical software engineer job interviews, front-end job interviews have less emphasis on algorithms and have more questions on intricate knowledge and expertise about the domain — HTML, CSS, JavaScript, just to name a few areas. While there are some existing resources to help front end developers in preparing for interviews, they aren&amp;rsquo;t as abundant as materials for a software engineer interview. Among the existing resources, probably the most helpful question bank would be Front-end Developer Interview Questions. And this post is almost complete answers to &amp;ldquo;Front-end Job Interview Questions&amp;rdquo;. More reference about this can be found &lt;a href=&#34;https://parg.co/UXa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Web Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UXR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How you can train an AI to convert your design mockups into HTML and CSS&lt;/a&gt;: Within three years, deep learning will change front-end development. It will increase prototyping speed and lower the barrier for building software. The field took off last year when Tony Beltramelli introduced the &lt;a href=&#34;https://arxiv.org/abs/1705.07962&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pix2code paper&lt;/a&gt; and Airbnb launched &lt;a href=&#34;https://airbnb.design/sketching-interfaces/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sketch2code&lt;/a&gt;. Currently, the largest barrier to automating front-end development is computing power. However, we can use current deep learning algorithms, along with synthesized training data, to start exploring artificial front-end automation right now. In this post, we’ll teach a neural network how to code a basic a HTML and CSS website based on a picture of a design mockup. More reference about this can be found &lt;a href=&#34;https://parg.co/UXa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Web Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/automerge/automerge&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Automerge&lt;/a&gt;: Automerge is a library of data structures for building collaborative applications in JavaScript, or a JSON-like data structure that can be modified concurrently by different users, and merged again automatically. A common approach to building JavaScript apps involves keeping the state of your application in model objects, such as a JSON document, Automerge is used in a similar way, but the big difference is that it supports automatic syncing and merging.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/captbaritone/winamp2-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;winamp2-js&lt;/a&gt;: This is a reimplementation of Winamp 2.9 in HTML5 and JavaScript. It includes these features: Decodes the actual skin file in your browser so you can load your favorite Winamp 2 skins, Load local audio or skin files via drag-and-drop, eject button, or &amp;ldquo;options&amp;rdquo; button (upper left-hand corner), etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/supnate/rekit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rekit #JavaScript#&lt;/a&gt;: Rekit is a toolkit for building scalable web applications with React, Redux and React-router. It&amp;rsquo;s an all-in-one solution for creating modern React apps. It helps you focus on business logic rather than dealing with massive libraries, patterns, configurations etc. Rekit creates apps using an opinionated folder and code structure. It&amp;rsquo;s designed to be scalable, testable and maintainable by using feature oriented architecture, one action per file pattern. This ensures application logic is well grouped and decoupled.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/wasdk/WebAssemblyStudio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssemblyStudio&lt;/a&gt;: Onine studio to learn, teach, work and play WebAssembly, it supports C++ and Rust. User can build and run wasm projects in the browser, also can run a local copy, which need to install node.js and webpack on your computer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;work-life&#34;&gt;Work Life&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UXc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How N26 built a modern banking software with JavaScript &amp;amp; Microservices.&lt;/a&gt;: Patrick Kua, the CTO of N26, a successful banking startup from Germany. Patrick is a microservices expert who spent 13 years at ThoughtWorks, and then decided to lead the tech team for a modern banking company which already serves more than 500.000 users. This post will with the intention of understanding how Patrick&amp;rsquo;s team choose the languages and frameworks they use, how they handle testing, DevOps &amp;amp; continuous integration and how they develop Microservices.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2.3</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.3/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-2555c0980f838e48.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面52.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-52-期-webpack-40graphql-安全加固去中心化的-web&#34;&gt;前端每周清单第 52 期: Webpack 4.0，GraphQL 安全加固，去中心化的 Web&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack 4.0.0 发布&lt;/a&gt;: 本周 Webpack 4 正式发布，包含了大量的特性更新，以及极大的性能优化(最高可达 98%)。Webpack 4 中移除了 CommonsChunkPlugin，替换以一系列默认的配置以及简单的 optimize.splitChunks 接口。同时 Webpack 4 为我们带来了 mode 的配置项，允许开发者根据不同的需求选择是面向开发环境优化还是生产环境优化，从而降低了初学者的门槛。更多变化说明参考&lt;a href=&#34;https://parg.co/U1N&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UIi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Parcel v1.6.0 发布&lt;/a&gt;: 虽然距离 Parcel v1.5.0 发布仅仅过去了三周，Parcel v1.6.0 依然为我们带来了超过十五个的新特性以及大量的修复提升。该版本中值得关注的特性包括：基于 Babel 的 ES6+ 零配置转化，面向 React 以及 Preact 的自动 JSX 支持，Node 以及 Electron 目标的支持，生产环境下包体分析，Node 6 以及 W3C WebManifest 的支持等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.npmjs.org/post/171139955345/v570/amp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npm v5.7.0 发布&lt;/a&gt;: 该版本带来了一系列令人激动的特性与修复提升，本文即是对该版本的重点变化的详细说明。该版本引入了 package-lock.json 文件的自动合并功能，开发者使用 npm install 的时候即可以自动合并 package-lock.json 与 npm-shrinkwrap.json。同时该版本引入了新的 ci 命令，其仅会安装 lock 文件中的依赖项，并且会在 package.json 与 lock 文件不一致的时候抛出错误。该命令相较于 npm install 有 2 ~ 10 倍的性能速度提升，能够大大优化目前的 CI 持续集成流程。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UIJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;你需要知道的关于 CSS Variables 的一切&lt;/a&gt;: 大部分的编程语言都支持变量，或者类似的特性；尽管 CSS 长久以来一直不支持自定义变量，随着 Web 的快速发展我们也欣慰地看到它引入了自定义属性，或所谓的变量的特性。本文即是对于 CSS Variables 的全面介绍，从 CSS Variables 的特性原理到它在实际应用开发中的实践；为了更好地进行讲解，作者还从零构建了三个项目：使用 CSS Variables 创建多态组件，基于 CSS Variables 的主题特性，创建小的 CSS Variable Booth。更多相关资料参考&lt;a href=&#34;https://parg.co/Ua0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 全栈开发与工程架构-基础篇&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018 JavaScript 测试概述&lt;/a&gt;: 该指南旨在介绍 2018 年中应该掌握的与 JavaScript 测试相关的概念、名词、工具与方法。本文集合了许多的优秀文章中的理念，以及作者自身多年在构建 Welldone 软件解决方案过程中积攒的经验。作者在多年的工作中曾经面向不同的产品使用实践了不同的测试解决方案的组合搭配，本文则是使用 Jest 进行单元测试与集成测试，并且使用 TestCafe 进行界面测试。更多相关资料参考 &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome JavaScript Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;人脸识别：使用 React-Redux 以及 Kairos 来识别你自己&lt;/a&gt;: 我们正处在人工智能与机器学习技术迅猛发展的年代，Face ID 与人脸识别也不再遥不可及，而成为了生活中不可缺少的一部分。付诸实践总好过高谈阔论，本文作者即介绍如何使用 React-Redux 以及 Kairos 来创建人脸识别的应用，并且用它做一些有趣的事情。更多相关资料参考 &lt;a href=&#34;https://parg.co/Ual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DataScienceAI MindMap&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zeit.co/blog/streaming-server-rendering-at-spectrum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Spectrum 的 Streaming Server-Side Rendering 以及分布式缓存的实践&lt;/a&gt;: React 16 为我们带来了 Streaming ServerSide Rendering，允许并发地进行 HTML 传输与界面渲染。该特性优化了首字节传输与首屏渲染的时间，使得用户能更快地见到有意义的界面。本文则是 Spectrum CTO 分享的，他们是如何使用流式响应以及分布式缓存来保证高性能的 React 应用服务端渲染实践；更多相关资料参考&lt;a href=&#34;https://parg.co/UaY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 全栈开发与工程架构&amp;ndash;React 篇&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL API 的安全加固&lt;/a&gt;: GraphQL 让前端能够便捷，乃至随心所欲地进行数据查询，这样保证了 API 的灵活性，但也带来了一定的安全隐患。除去合法的，有效的查询，恶意的攻击者可能会提交很多耗时的、嵌套多层的查询，从而耗光你的服务器、数据库、网络以及其他的计算与存储资源。本文中，Spectrum CTO 为我们分享了他们在生产环境下是如何对 GraphQL API 进行安全加固的；更多相关资料参考 &lt;a href=&#34;https://parg.co/UX2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1V&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Event sourcing vs CRUD&lt;/a&gt;: 很多情况下，事件驱动(Event Sourcing)往往与领域驱动开发(DDD)以及 CQRS 这种设计模式紧密连接在一起，不过 Event Sourcing 并不仅仅是他们的部分，本文即是对 Event Sourcing 与 CRUD 进行的详细对比介绍。Event Sourcing 也可以看做特殊的数据存储方式，不同于传统的以关系型数据库为核心的存储方式，Event Sourcing 并不会将记录持久化，而是将变化存放为时序序列或者其他类型，从而方便消费者进行处理。更多相关资料参考 &lt;a href=&#34;https://parg.co/UaS&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MicroService MindMap&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://staltz.com/promises-are-not-neutral-enough.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Promises 并不中立&lt;/a&gt;: Promises 方便了我们在 JavaScript 中进行异步操作，但是本文作者认为 Promise 的中立性不足，以至于对整个生态系统造成了伤害。Promise 最简单的目标，就是包含了某个未来可知的值，可能在下一次的 Event Loop，或者几分钟之后才能得到该值。作者认为 Promise 不够中立的原因包括：非延时执行；不可取消；无法通过；then() 混淆了 map() 与 flatMap()。更多相关资料参考 &lt;a href=&#34;https://parg.co/UIj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 JavaScript 开发基础&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/maxchehab/CSS-Keylogging&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS 键盘记录&lt;/a&gt;: 本项目，CSS Keylogging 包含了一个 Chrome 插件，以及一个 Express 服务器来演示如何利用 CSS 实现键盘记录攻击。该攻击方式的原理很简单，就是利用 CSS 属性选择器来匹配字符，以及 background-image 属性来将判断的字符传到服务器中；该项目还包含了简单的脚本来为每个 ASCII 字符生成独特的请求格式。更多相关资料参考 &lt;a href=&#34;https://parg.co/Uac&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebSecurity MindMap&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UIk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;去中心化的意义&lt;/a&gt;: 在互联网发展的第一波浪潮，大概是 1980s ~ 2000s 年间，互联网服务都是基于开源的协议构建，并且由社区维护控制。而在第二个年代，大概从 2000 年到现在，Google，Apple，Facebook 以及 Amazon 这样的巨头掌控着互联网。随着以区块链为代表的加密网络的兴起，或许在未来我们可能会进入去中心化的年代。本文即是从宏观的历史发展的角度，讨论了去中心化的意义，以及其与中心化应用相比的不足或优势；加密网络允许我们构建社区主导的网络，并且方便第三方的开发者、创新者以及商业人才加入。更多相关资料参考 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web Series&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GhostText/GhostText&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GhostText&lt;/a&gt;: GhostText 为我们提供了丰富的编辑器插件，从而允许我们能够直接在编辑器中向浏览器的输入框中写入内容；换言之，所有在编辑器中输入的内容都会实时同步到浏览器中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://proton-native.js.org/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proton Native&lt;/a&gt;: 移动端开发中，React Native 为我们带来了跨平台的界面构建与状态管理支持，从而能够更方便地构建跨平台应用。Proton Native 则是类似于 React Native 的，依托于 React 生态系统的，开发桌面扩平台应用的框架；它同样允许开发者使用 Redux 这样的流行的库。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redacademy/vue-ethereum-ipfs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vue-ethereum-ipfs&lt;/a&gt;: vue-ethereum-ipfs 是基于 Vue，Ethereum 以及 IPFS 的分布式应用服务器。Ethereum 可以看做分布式虚拟机，IPFS 则是分布式内容分发网络的一种，Vue 是用于构建 Web 应用的 JavaScript 框架。vue-ethereum-ipfs 通过将状态存放于 Ethereum，并且使用 IPFS 来分发 HTML，从而使得 Web 应用更高效地运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/electerious/basicScroll&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;basicScroll&lt;/a&gt;: basicScroll 为我们提供了面向移动端与桌面的，基于 CSS Variables 控制的独立并发滚动效果。basicScroll 允许我们根据滚动位置来改变 CSS Variables，并且可以使用 CSS Variables 来自定义动画。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/UIa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hinton：人类就是机器，绝妙的机器&lt;/a&gt;: 本文是对于深度学习之父，Geoffrey Hinton 人生与职业经历的简要介绍。三十多年来，Geoffrey Hinton 一直徘徊在人工智能研究的边缘地带。他像局外人一样坚守着一个简单的观点：计算机可以像人类一样思考，依靠直觉而不是规则。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2.3-en</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.3-en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/2/2.3-en/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-2555c0980f838e48.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面52.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;frontend-weekly-no6-webpack-400-securing-your-graphql-api-why-decentralization-matters&#34;&gt;Frontend+ Weekly No.6: Webpack 4.0.0, Securing Your GraphQL API, Why Decentralization Matters&lt;/h1&gt;
&lt;p&gt;The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href=&#34;https://medium.com/@384924552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/news&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;reddit.com&#34;&gt;Reddit&lt;/a&gt;,&lt;a href=&#34;twitter.com&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;mybridge.co&#34;&gt;MyBridge&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;More Issues can be found in &lt;a href=&#34;https://parg.co/U9x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frontend+ Weekly Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack 4.0.0 Release&lt;/a&gt;: This week, Webpack 4 (Legato) is available; There are so many new things in webpack 4, and it is fast(up to 98% faster). Webpack 4 have deprecated and removed CommonsChunkPlugin, and have replaced it with a set of defaults and easily overridable API called optimize.splitChunks. It also introduce a new property for your config called mode, for either build size (production) optimization, or build time (development) optimization. More changelogs can be found in &lt;a href=&#34;https://parg.co/U1N&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UIi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Parcel v1.6.0 Release&lt;/a&gt;: Parcel v1.6.0 is a huge release that comes just 3 weeks after v1.5.0, with over 15 new features and lots of bugfixes and improvements. The highlights include: Zero config ES6+ transpilation with Babel, Automatic JSX support for React and Preact, Node and Electron targets, Production bundle statistics, Node 6 support, W3C WebManifest support.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.npmjs.org/post/171139955345/v570/amp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npm v5.7.0 Release&lt;/a&gt;: This release brings a bunch of exciting new features and bug fixes. Package-lock git merge conflict resolution allows npm install to fix package-lock.json and npm-shrinkwrap.json files that have merge conflicts in them without your having to edit them. The new npm ci command installs from your lock-file ONLY. If your package.json and your lock-file are out of sync then it will report an error, it’s also much faster (2x-10x!) than npm install when you don’t start with a node_modules. It works by throwing away your node_modules and recreating it from scratch.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UIJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Everything you need to know about CSS Variables&lt;/a&gt;: Most programming languages have support for variables. But sadly, CSS has lacked support for native variables from the very beginning. Well the web is moving fast. And I’m glad to report that CSS now finally supports variables. In this guide, I’ll show you how variables work natively in CSS, and how you can use them to make your life a lot easier. I’ll wrap things up by showing you how to build 3 projects that show off CSS variables and their ease of use: Creating Component Variations using CSS Variables, Theme Styles with CSS Variables, Building the CSS Variable Booth. More links about this can be found in &lt;a href=&#34;https://parg.co/UXa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Web Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U14&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;An Overview of JavaScript Testing in 2018&lt;/a&gt;: This guide is intended to catch you up with the most important reasoning, terms, tools, and approaches to JavaScript testing in 2018. It combines information from many great articles, that are linked at the bottom, and adds from our own experience in Welldone Software Solutions where we implemented different testing solutions for different products for years. He uses Jest for unit and integration tests and TestCafe for UI tests. More links about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome JavaScript Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1M&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Facial-Recognition: Using React-Redux and Kairos to Identify Yourself&lt;/a&gt;: We are in the era where Face ID and Facial Recognition is no longer a maybe or simply good-to-have feature. It has become rather the talk of the town. So as a developer, my curiosity was heightened by the prospect of trying to create a face recognition based application and testing out this awesome feature which has been apparently bestowed to mankind. More links about this can be found in &lt;a href=&#34;https://parg.co/Ual&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DataScienceAI MindMap&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://zeit.co/blog/streaming-server-rendering-at-spectrum&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Streaming Server-Side Rendering and Caching at Spectrum&lt;/a&gt;: React 16 introduced streaming server-side rendering, which allows you to send down HTML in chunks in parallel to rendering it. This enables a faster time to first byte and first meaningful paint for your users since the initial markup arrives in the browser sooner. In this guest post he describes the journey to high performance server-rendering of their React application with streaming responses and distributed caching. More links about this can be found in &lt;a href=&#34;https://parg.co/UXI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Securing Your GraphQL API from Malicious Queries&lt;/a&gt;: With GraphQL you can query exactly what you want whenever you want. That is amazing for working with an API, but also has complex security implications. Instead of asking for legitimate, useful data, a malicious actor could submit an expensive, nested query to overload your server, database, network, or all of these. In this guest post he describes how they secured their GraphQL API from attackers. More links about this can be found in &lt;a href=&#34;https://parg.co/UX2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GraphQL Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U1V&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Event sourcing vs CRUD&lt;/a&gt;: In many cases event sourcing is combined with domain-driven design (DDD) and the design pattern CQRS, but it is only partly related to the two concepts. Event sourcing is a specific procedure for storing data. Unlike the traditional approach with a relational database, event sourcing does not persist the current state of a record, but instead stores the individual changes as a series of deltas that led to the current state over time. More links about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#softwarearchitecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome SoftwareArchitecture Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-the-hood&#34;&gt;Under the hood&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://staltz.com/promises-are-not-neutral-enough.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Promises are not neutral enough&lt;/a&gt;: Promises in JavaScript create problems which affect the entire ecosystem. In this blog post I’ll explain some of those problems. The basic purpose of Promises is to represent a value that will be eventually available. It could become available in the next event loop or in the next minutes. Basically Promises are not neutral enough because they introduce 4 opinions: Eager, not lazy; No cancellation; Never synchronous; then() is a mix of map() and flatMap(). More links about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists#javascript&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome JavaScript Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/maxchehab/CSS-Keylogging&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Keylogging&lt;/a&gt;: CSS Keylogging contains a chrome extension and Express server that exploits keylogging abilities of CSS. This attack is really simple. Utilizing CSS attribute selectors, one can request resources from an external server under the premise of loading a background-image. Using a simple script one can create a css file that will send a custom request for every ASCII character. More links about this can be found in &lt;a href=&#34;https://parg.co/UXa&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Awesome Web Reference&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UIk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Why Decentralization Matters&lt;/a&gt;: During the first era of the internet — from the 1980s through the early 2000s — internet services were built on open protocols that were controlled by the internet community. During the second era of the internet, from the mid 2000s to the present, for-profit tech companies — most notably Google, Apple, Facebook, and Amazon (GAFA) — built software and services that rapidly outpaced the capabilities of open protocols. Decentralized platforms, by contrast, often launch half-baked and without clear use cases. Cryptonetworks are a powerful way to develop community-owned networks and provide a level playing field for 3rd-party developers, creators, and businesses. More links about this can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GhostText/GhostText&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GhostText&lt;/a&gt;: Use your text editor to write in your browser. Everything you type in the editor will be instantly updated in the browser (and vice versa).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://proton-native.js.org/#/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Proton Native&lt;/a&gt;: On mobile, the React Native gives us a seamless way to build user interfaces and manage state in code, all while doing it cross platform. Proton Native does the same to desktop that React Native did to mobile. Build cross-platform apps for the desktop, all while never leaving the React eco-system. Popular React packages such as Redux still work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/redacademy/vue-ethereum-ipfs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;vue-ethereum-ipfs&lt;/a&gt;: It is a distributed application starter wih Vue, Ethereum and IPFS. Ethereum is a distributed virtual machine that pays eth in return for miners running your smart contracts. IPFS is a kind of distributed content distribution network. Vue is a javascript framework for building client-side webapps. By keeping state inside ethereum and using IPFS to deliver HTML, webapps can become nearly indestructable!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/electerious/basicScroll&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;basicScroll&lt;/a&gt;: Standalone parallax scrolling for mobile and desktop with CSS variables. basicScroll allows you to change CSS variables depending on the scroll position. Use the variables directly in your CSS to animate whatever you want. Highly inspired by skrollr and Reactive Animations with CSS Variables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
