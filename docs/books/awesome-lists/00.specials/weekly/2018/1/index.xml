<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>1 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/index.xml" rel="self" type="application/rss+xml" />
    <description>1</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>1</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/</link>
    </image>
    
    <item>
      <title>1.1</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.1/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-f85c4e9001e3c2bb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面46.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-46-期-2017-nodejs--graphql--vuejs-盘点前端性能优化与可用性保障&#34;&gt;前端每周清单第 46 期: 2017 Node.js / GraphQL / Vue.js 盘点，前端性能优化与可用性保障&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UMm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Intel CPU 爆重大设计缺陷，浏览器中同样可以越权访问&lt;/a&gt;: 近日 Intel CPU 被爆存在设计缺陷，普通的用户程序能够识别受保护区域的内核布局及其中内容；所有能访问虚拟内存的 CPU，都可能被越权访问，而该问题的修复方案可能带来极大的处理器性能下降。同时根据 &lt;a href=&#34;https://parg.co/UMG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mozilla&lt;/a&gt; 安全研究人员验证表明，相同的技术能够用于浏览器中读取不同源的隐私内容；各大浏览器厂商在致力于规避该问题，譬如限制 performance.now() 的执行间隔，或者默认禁用 SharedArrayBuffer 等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UM2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FuseBox 3.0 发布&lt;/a&gt;: FuseBox 是轻量级的打包工具，近日发布的 3.0 版本更是提升了约 20% 的性能表现；其只需要 50~100ms 即可以打包大型项目。新版本中支持零配置代码分割，更新了任务运行器，优化了 TypeScript 包发布流程，并且大幅提升了速度与稳定性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UtH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Storybook 3.3 发布&lt;/a&gt;: 新年之际，Storybook 发布了 3.3 版本，带来了对 Angular 的支持。该版本支持在 Angular 4+ 的项目中使用 Storybook，并且允许开发者设置不同的 Viewport 以模拟不同分辨率的设备；同时该版本还支持直接在 Storybook 中预览测试结果，更多的特性变化请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UMj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 年发布的优秀 Node.js 开源项目盘点&lt;/a&gt;: 2017 年里，Node.js 社区也愈发活跃；本文从 4700 多个去年发布的 Node.js 开源项目中，挑选出 25 个优秀的代表。这些项目涵盖了不同的功能方向，譬如 Headless Chrome Node API Puppeteer, 用于创建模拟数据的 faker.js，用于将 Node.js 项目打包为可执行文件的 Pkg，用于进行图片处理的 Sharp，用于进行 Docker 界面化管理的 Portainer 等等。更多 Node.js 相关资料参考&lt;a href=&#34;https://parg.co/UtE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UM7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 React, Apollo, 以及 GraphQL 构建短链接服务&lt;/a&gt;: 本系列文章循序渐进地介绍了如何使用 React、GraphQL 以及 Node.js 构建完整的短链接服务。首篇文章介绍了使用 GraphQL 与 React 搭建短链接展示界面，第二篇介绍了短链接构造服务，然后讨论了如何创建用于计算 Hash 的 Serverless Function，接下来分析了如何记录点击数等统计信息，最后介绍了如何添加用户权限认证。更多 React 教程查阅 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Utm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;探究 V8 引擎是如何将 JavaScript 转化为机器码&lt;/a&gt;: 本文以扩展 V8 的原生方法为例，介绍了 V8 引擎是如何将 JavaScript 转化为可被 CPU 执行的机器码指令。V8 是由 Google 开源的 JavaScript 引擎，其能够将 JavaScript 代码转化为低级别的机器码；V8 实现了 ECMA-262 标准，其即可以独立运行，也可以嵌套在其他的 C++ 程序中运行。更多 V8 相关资料参考 &lt;a href=&#34;https://parg.co/Utr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;V8 引擎资料索引&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UMw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 Tinder 的 PWA 实践案例&lt;/a&gt;: 随着 Safari 开始支持 ServiceWorker，PWA 的前景也愈发光明；本文则是记述了 Tinder 是如何优化 JavaScript 性能表现、使用 Service Worker 来提供网络弹性、使用 Push Notification 来提示会话。同样，本文首先量化对比了改造前后 Tinder 应用在不同网络环境下的性能表现，然后依次讨论了基于 Loadable 的代码分割、资源缓存与预加载、CSS 加载策略、运行时性能优化等内容；更多 PWA 相关资料参考 &lt;a href=&#34;https://parg.co/UKh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PWA Learning &amp;amp; Practices Links&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UtG&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018 前端性能清单&lt;/a&gt;: 性能优化任重道远，随着硬件设备、浏览器以及开发技术的不断演化，优化技巧也在不停地改变，本文即是最新的性能优化总结清单；本文也并不局限于介绍技术本身，还讨论了如何打通优化全流程，构建持续性优化地开发文化。本文依次讨论了调优规划与性能评测、设置合理的目标、构建合适的环境、优化构建流程与图片文本等资源、分发流程优化等内容；更多 Web 性能优化讨论参考&lt;a href=&#34;https://parg.co/UGZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 应用架构与性能调优&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UtY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代浏览器的网络层性能优化之道&lt;/a&gt;: 因特网问世已有数十年，本文则是着眼于介绍现代浏览器采用了哪些技术，主要是在网络层上，来自动地进行性能优化。浏览器的性能会受到很多因素的影响，其中网络层往往会是瓶颈，而浏览器为我们屏蔽了很多底层的实现细节；本文依次介绍了 Socket 管理、网络安全与沙盒、资源与客户端状态缓存、应用接口与协议等内容。更多 Web 性能优化讨论参考&lt;a href=&#34;https://parg.co/UGZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 应用架构与性能调优&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://molily.de/robust-javascript/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;健壮的客户端 JavaScript 代码&lt;/a&gt;: JavaScript 已然是现代 Web 开发者必需的工具之一，网站也越来越多的应用 JavaScript 来提高可交互性。不过随着客户端 JavaScript 代码复杂度的增加，用户使用过程中出现错误的概率也就越大；本小书即讨论什么是 JavaScript 代码的健壮性以及如何保证。本书首先讨论了 JavaScript 的特性以及健壮性的通用定义，然后列举了 JavaScript 中可能抛出的异常或者失败的情景，最后陈述了数十条避免或者抑制错误的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UM1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 Vue.js 盘点&lt;/a&gt;: 本文是对于 Vue.js 的年末盘点，总结了 2017 年中 Vue.js 及其社区发生的变化与取得的成就。在过去一年中 Vue.js 获得了四万多 Star，框架本身的性能与易用性、健壮性也都得到了提升；服务端渲染、异常处理等也都得到了优化。而在内部的变化之外，整个技术栈内的框架，譬如 Element, Framework7, Onsen UI, vuetify, vue-material 以及 quasar 都发布了重大的版本更新，相关的资料也得到了扩充。此外，Weex, nativescript-vue 这样的原生集成扩展也取得了长足的发展，Adobe, GitLab, IBM 等大型团队或公司也都在逐步使用 Vue.js。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Utl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2017 GraphQL 盘点&lt;/a&gt;: GraphQL 最早开源于 2015 年，随着 Apollo, graphcool 等一系列优秀框架的出现，GraphQL 在 2017 年蓬勃发展，并且可以预见其在 2018 年会继续蒸蒸日上；本文是对去年 GraphQL 及其社区发生的变化与取得的成就的盘点。本文首先介绍了 IBM, Walmart 等巨头对 GraphQL 的看法，然后列举了去年发生的 GraphQL 大事件，最后展望了 2018 年 GraphQL 的规划；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Utd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;我是如何从网页中窃取信用卡账户密码的&lt;/a&gt;: 本文讲述了某些攻击者是如何用 NPM 向一些广泛使用的开源工具，注入渗透代码并搜集各类信息的故事。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Raathigesh/majestic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Majestic&lt;/a&gt;: Majestic 是基于 Electron 开发的，界面化查看与控制 Jest 测试用例的应用。Jest CLI 本身已然提供了非常友好的测试体验，不过 Majestic 希望能够通过界面交互地方式进一步优化开发测试的体验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://teavm.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TeaVM&lt;/a&gt;: TeaVM 是面向 Java 字节码的 AOT 编译器，其能够将 Java 字节码编译为 JavaScript 与 WebAssembly。不同于著名的 GWT，TeaVM 并不需要源代码支持，而只需要编译之后的字节码文件；这也意味着 TeaVM 天生支持 Scala 与 Kotlin 这样的 JVM 方言。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UMv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stimulus&lt;/a&gt;: Stimulus 是辅助型的前端框架，它并不介入到具体的 HTML 渲染流程，自然也不会想去接管整个前端应用。它的设计初衷即是在尽可能少地介入的情况下来增强当前的 HTML，与 Turbolinks 协同使用的话能够在最小改动的情况下完成对应用的性能改造。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://uppy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uppy&lt;/a&gt;: Uppy 是新一代的模块化文件上传控件，其能够无缝集成到任何 Web 应用中，并且提供了易用的接口。Uppy 内建支持从本地磁盘、Google Drive、Dropbox、Instagram、Camera 等多个源中抓取数据，并且提供了良好的预览界面，同时支持对上传过程地审视与控制。更多特性介绍请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/Uto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10 大关键词，10+1 位技术人的全年回顾&lt;/a&gt;: 年末的时候，以“记录与时代并行的技术人”为使命的二叉树，问了十位技术人同一个问题：过去一年你经历了什么？有来自百度的 Web 前端高级技术经理，有 Google 开发者平台工程师，有火币网 CTO，他们从不同的角度谈了谈技术的发展，谈了谈明年的期许。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.2</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.2/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-d2946f9aac541857.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-47-期npm-年度报告与-2018-展望airbnb-react-router-实践&#34;&gt;前端每周清单第 47 期：NPM 年度报告与 2018 展望，Airbnb React Router 实践&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NPM 发布 2017 JavaScript 框架增长度报告&lt;/a&gt;: 作者使用某个包的下载占全部下载量的百分比，作为衡量某个框架是否持续性增长的指标，并以此发布了 2017 JavaScript 框架使用报告；该报告主要着眼于前端框架，React 生态圈以及后端框架这三个部分。根据该报告，前端框架中的 Preact 与 Vue 都是增长迅速，不过 React 在总体量与增长速度上还是占据优势；而在 React 生态圈内，Apollo 则是飞速崛起，MobX 也是增长迅速但还难以匹敌 Redux。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UtZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nuxt.js 1.0 发布&lt;/a&gt;: Nuxt.js 是基于 Vue.js, vue-router, vuex 以及 vue-meta 的，快速创建 Web 应用的零配置工具。本周发布的 Nuxt 1.0.0 版本，将各项依赖更新到了最新版本，同时提升了整体的稳定性与性能表现，也意味着其能够用于生产环境；更多特性变化描述请查看原文。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UV5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node v9.4.0 发布&lt;/a&gt;: 该版本中的重要变化包括了废弃 AsyncHooks Sensitive API 与 runInAsyncIdScope，从 _events 内部实现中移除 reaches，在 clientError 中添加 rawPacket 属性等等；可以查看原文了解更多变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NPM 确定新的包命名规则&lt;/a&gt;: 为了尽可能避免包的误植域名现象，NPM Registry 将不会再允许使用相似的包命名；不过会进一步鼓励开发者使用自己的命名空间来发布包。譬如，因为 react-native 已经存在，将不会再允许类似于 reactnative 这样的包发布，不过推荐使用 @ceejbot/reactnative 这样的方式。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bitsofco.de/whats-new-in-html-5-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML 5.2 新特性与实践盘点&lt;/a&gt;: 不到一个月之前，HTML 5.2 成为了 W3C 的官方推荐版本，这也就意味着 W3C 官方建议开发者应该遵循与实现该版本。本文则是对于 HTML 5.2 中提出的影响较大的，新特性与实践模式进行了概述，譬如原生弹窗组件、iFrames 中的 Payment Request API 以及部分元素实践的变化等；更多 HTML 学习参考&lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代 Web 开发基础&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 TypeScript 的实时聊天应用&lt;/a&gt;: 作者在本文中介绍了如何仅使用 TypeScript，来整合 Web Sockets，Node 与 Angular 去实现某个实时聊天应用。本文首先介绍了 WebSocket 的定义与规范，然后使用 Express，Socket.io 去实现服务端应用，最后使用 Angular 来构建客户端应用。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 Node.js 实现的深度学习面部识别库&lt;/a&gt;: 本文中，作者介绍了如何使用新近开源的 &lt;a href=&#34;https://github.com/justadudewhohacks/face-recognition.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;face-recognition.js&lt;/a&gt; 库，去构建高可用的面部识别与检测应用。该库底层使用了 dlib，然后使用 Node.js 绑定来暴露上层接口；而 dlib 则使用了深度学习算法，并且内置了部分预训练的模型，其在 LFW 面部识别评测中能够获得 99.38% 的准确率。更多 Node.js 学习参考 &lt;a href=&#34;https://parg.co/b2s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Node.js 全栈架构&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 React Router v4 的服务端渲染，代码分割与懒加载实践&lt;/a&gt;: 本文中，来自 Airbnb 的工程师分享的了，他们基于 React Router V4 进行服务端渲染，代码分割与懒加载的实践。在 RRV4 中，路由即组件的方案替代了原本的集中式配置，但是这导致了无法根据路径进行合适的服务端渲染；针对这个问题，作者首先讨论了如何在现有框架上进行路由管理，然后讨论了异步组件与代码分割的技巧。更多 React 学习参考 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uti&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018 Web 开发者学习路线图&lt;/a&gt;: 本仓库包含了一系列成为前端工程师、服务端工程师或者运维工程师的学习路线图，前端工程师路线图包括了基础、深入 JavaScript 中的测试、框架、模块打包、包管理、响应式开发等，后端则包括了开发框架、包管理、数据库、缓存、消息中间件、搜索引擎等，DevOps 则包括了操作系统、云计算、持续集成、自动化、监控告警、Web 服务器、集群管理等等。更多图谱参考 &lt;a href=&#34;https://parg.co/UHY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IT 知识图谱与技术路线&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UV8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 个 2018 构建 Node.js 应用的建议&lt;/a&gt;: 本文是来自 RisingStack 的工程师分享的，他们关于 2018 年构建 Node.js 应用的建议。这些建议包括使用 async-await, 尝试 import 与 import(), 尝试 HTTP/2，加固你的 Node.js 应用等等。更多 Node.js 学习参考 &lt;a href=&#34;https://parg.co/b2s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Node.js 全栈架构&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://t.cn/RQAfr5x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;现代网络负载均衡与代理综述&lt;/a&gt;: 负载均衡是构建现代分布式应用系统的重要组成部分，本文即是对现代负载均衡与代理技术进行了综述与盘点。本文依次讨论了什么是负载均衡，其和代理的异同，负载均衡的特点，现代常用 L4 与 L7 的不同层负载均衡的实现拓扑与应用案例等；更多微服务相关参考&lt;a href=&#34;https://parg.co/bvT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;服务端应用程序开发与系统架构&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;操作系统工作原理：开发者应该掌握的十个概念&lt;/a&gt;: 操作系统是软件开发中必备的基础知识之一，而作者在本文中总结了十个操作系统相关的关键概念，来帮助开发者更深入地掌握编程理念。这些概念包括进程与进程管理、线程与并发、调度、内存管理、输入与输出管理、可视化、分布式文件系统、分布式共享内存、云计算等等；更多操作学习参考 &lt;a href=&#34;https://parg.co/UMI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Linux 配置使用、内部原理与 Shell 编程&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2018 年前端展望：合久必分，分久必合&lt;/a&gt;: 这几年来前端领域风起云涌，百花齐放，本文在简要总结 2017 前端各个框架领域的变化之后，对 2018 年可能的发展进行了展望。React 可能在渲染函数参数、setState 返回 Promise、异步友好地生命周期回调等方面做出改进，初次之外，作者还对 Angular、Vue、Webpack、Parcel 等框架或工具进行了点评；更多前端学习参考 &lt;a href=&#34;https://parg.co/bMe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 开发基础与工程实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gaojiuli/toapi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;toapi&lt;/a&gt;: Toapi 是基于 Flask 开发的，能够将任何网站转化为 API 服务的框架。Toapi 实际上也包含了爬虫抓取、接口服务等部分，不过其简化了整个流程；使用者仅需要定义数据的输入输出，Toapi 会帮助自动化整个流程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TOAST UI Editor&lt;/a&gt;: TOAST UI Editor 是面向生产环境的，可扩展的，支持 MarkDown 语法的 WYSIWYG 编辑器；它提供了 MarkDown 与 WYSIWYG 两种模式。TOAST UI Editor 实现了 CommonMark 与 GFM 两个标准，同时提供了强大的 API 来方便开发者自定义扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/NervJS/nerv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nerv&lt;/a&gt;: Nerv 是基于 Virtual-DOM 的 JavaScript(TypeScript)框架，其能够兼容 React 16 API；不过提供了更加高性能、小尺寸与更好浏览器兼容性等特性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/developit/workerize&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;workerize&lt;/a&gt;: workerize 能够方便地将某个模块移入 Web Worker，自动反射提供出接口函数；workerize 会注入某个轻量级的 RPC 实现到应用中，支持同步或者异步地 Worker 函数调用，并且能够顺滑支持 async/await。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/emilwallner/Screenshot-to-code-in-Keras&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Screenshot-to-code-in-Keras&lt;/a&gt;: 近年来深度学习技术飞速发展，或可以在某些方面改变前端开发；而该仓库提供了某个神经网络，来将设计稿的截图直接转化为静态网页，它能够加速原型实现地速度，并且降低软件构建的成本。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/nzZGByazWK0IuRkPMia5Ew&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;老炮程序员响马：年轻时我想写代码到 60 岁，现在我想写到 65 岁&lt;/a&gt;: 响马(Xicilion)，本名刘琥，70 后程序员，南京第三极软件科技有限公司创始人。1992 年毕业于南京动力高等专科学校后留校教授计算机课程，1998 年创办西祠胡同，2012 年创办孢子社区，目前专注于 fibjs 项目的开发。本文是对其几十年来技术之路的回顾与展望，也是一代技术人的青春回忆。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.2-en</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.2-en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.2-en/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-d2946f9aac541857.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;frontend-weekly-no1-the-state-of-javascript-frameworks-web-developer-roadmap---2018&#34;&gt;Frontend+ Weekly No.1: The State of JavaScript Frameworks, Web Developer Roadmap - 2018&lt;/h1&gt;
&lt;p&gt;The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href=&#34;https://medium.com/@384924552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/news&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;reddit.com&#34;&gt;Reddit&lt;/a&gt;,&lt;a href=&#34;twitter.com&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;mybridge.co&#34;&gt;MyBridge&lt;/a&gt;, and so on.&lt;/p&gt;
&lt;p&gt;More Issues can be found in &lt;a href=&#34;./README-en.md&#34;&gt;Frontend+ Weekly Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The State of JavaScript Frameworks, 2017 by NPM&lt;/a&gt;: Npm guys use the number by looking at download counts for a package as a percentage of the download count for all packages in the registry at that time (&amp;ldquo;share of registry&amp;rdquo;), to mine whether a package is growing faster than the Registry (increasing in popularity) or slower than the registry (becoming less popular). This post focus on Front-End Frameworks, The React Ecosystem and Back-End Frameworks. For front-end frameworks, Preact and Vue is very fast growing, React is both huge and very fast-growing for its size. For react ecosystem, Apollo is growing extremely quickly and MobX has good growth but is yet to challenge Redux.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UtZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nuxt.js 1.0 is out&lt;/a&gt;: Nuxt.js is a framework on top of Vue.js, vue-router, vuex and vue-meta. Nuxt 1.0.0 is out, up to date with the lastest versions of Vue, vue-router, vuex and vue-meta. Better stability, performances and ready for production. It also brings a few breaking changes (node &amp;gt;8 compatibility), new features and a lot of bug fixes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UV5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node v9.4.0 (Current) released&lt;/a&gt;: Notable changes include deprecate AsyncHooks Sensitive API and runInAsyncIdScope, remove reaches into _events internals, add rawPacket in err of clientError event, etc. You can turn to the original for more information&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;New Package Moniker rules&lt;/a&gt;: In order to reduce typosquatting of packages, the npm registry not does not allow any similar namings for your package anymore if there’s an existing package already. In effect, this is an active push and encouragement to make people use their user scope for publishing packages. For example, because react-native exists, no one can publish variations like reactnative, but can use a scope like @ceejbot/json-stream.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bitsofco.de/whats-new-in-html-5-2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What’s New in HTML 5.2?&lt;/a&gt;: Less than a month ago, HTML 5.2 became an official W3C Recommendation (REC), this means that W3C officially recommends it’s deployment by user agents, and it’s implementation by web page authors. In this article, author will go over some of the changes, which will impact my development the most, such as native dialog element, Payment Request API from iFrames and some newly valid practices. More reference for HTML can be found &lt;a href=&#34;https://parg.co/UUK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Real Time Apps with TypeScript: Integrating Web Sockets, Node &amp;amp; Angular&lt;/a&gt;: In this article, the author will show you how to build a real time chat application using typeScript language only. This article will introduce webSocket, use express and typescript to implement chat server, use angular to build client application, etc. More reference for TypeScript can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js + face-recognition.js : Simple and Robust Face Recognition using Deep Learning&lt;/a&gt;: In this article I am going to show you how to perform robust face detection and face recognition using &lt;a href=&#34;https://github.com/justadudewhohacks/face-recognition.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;face-recognition.js&lt;/a&gt;. This npm package uses dlib under the hood and exposes Node.js bindings to face recognition tools from dlib, The dlib library uses deep learning methods and comes with some pretrained models, which have been shown to provide an astonishing prediction accuracy of 99.38% running the LFW face recognition benchmark. More reference for Node.js can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVJ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Server Rendering, Code Splitting, and Lazy Loading with React Router v4&lt;/a&gt;: In this article, software engineers from Airbnb share practices in combing server rendering and code splitting, so as to match against your current route before rendering. More reference for React can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UV8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;8 Tips to Build Better Node.js Apps in 2018&lt;/a&gt;: In this article, guys from RisingStack collected a few tips that we think Node.js developers should follow in 2018. These are Use async - await, Get acquainted with import and import(), Get familiar with HTTP/2, Get rid of code style controversies, Secure your Node.js applications, and so on. More reference for Node.js can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/kamranahmedse/developer-roadmap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web Developer Roadmap - 2018&lt;/a&gt;: In this repository, you find a set of charts demonstrating the paths that you can take and the technologies that you would want to adopt in order to become a frontend, backend or a devops. More reference for Web can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-the-hood&#34;&gt;Under the hood&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://t.cn/RQAfr5x&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introduction to modern network load balancing and proxying&lt;/a&gt;: In this post the author attempt to rectify the lack of information by providing a gentle introduction to modern network load balancing and proxying. This post includes what is network load balancing and proxying, Load balancer vs. proxy, different load balancer topologies，etc. More reference for microservice can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVV&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How Operating Systems Work: 10 Concepts you Should Know as a Developer&lt;/a&gt;: In this article, the author shares 10 critical operating system concepts that you need to learn if you want to get good at developing software. These are Processes and Process Management, Threads and Concurrency, Scheduling, Memory Management, Input/Output Management, Virtualization, Distributed File Systems, Distributed Shared Memory, Cloud Computing, and so on. More reference for Operating System can be found in &lt;a href=&#34;https://github.com/wx-chevalier/Awesome-Lists&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AwesomeList&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Frontend in 2018: More consensus, less complexity&lt;/a&gt;: Frameworks like React and Angular have continued to enjoy large-scale support among the community, but new contenders like Vue have also exploded in popularity. Webpack continues to be the build tool of choice and NPM the package system of choice. WebAssembly opened up the web to a multitude of new and exciting use cases with unprecedented speeds. Technologies like GraphQL have innovated the way that APIs are both written and used in web applications.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UtL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Docusaurus&lt;/a&gt;: Docusaurus is a project for easily building, deploying, and maintaining open source project websites. It claims to be Simple to Start, Localizable and Customizable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/gaojiuli/toapi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;toapi&lt;/a&gt;: Toapi is a clever, simple and fast flask library that enable any website to provide API services. Toapi turns these matters into a piece of cake. All you need to do is to define the data you want, and you&amp;rsquo;ve made it. The process is fully automated, and data can be accessed through API in seconds!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TOAST UI Editor&lt;/a&gt;:TOAST UI Editor is a Productive and Extensible Markdown WYSIWYG Editor, provides Markdown mode and Wysiwyg mode. TOAST UI Editor respects both CommonMark and GFM specifications, alse comes with powerful Extensions in compliance with the Markdown syntax, while also providing APIs so you can develop your own extensions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/NervJS/nerv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Nerv&lt;/a&gt;: Nerv is a virtual-dom based JavaScript (TypeScript) library with identical React 16 API, which offers much higher performance, tinier package size and better browser compatibility.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/developit/workerize&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;workerize&lt;/a&gt;: workerize moves a module into a Web Worker, automatically reflecting exported functions as asynchronous proxies. It bundles a tiny, purpose-built RPC implementation into your app, supports synchronous and asynchronous worker functions and works beautifully with async/await&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/emilwallner/Screenshot-to-code-in-Keras&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Screenshot-to-code-in-Keras&lt;/a&gt;: A neural network that transforms a screenshot into a static website. Within three years deep learning will change front-end development. It will increase prototyping speed and lower the barrier for building software. In the provided models, we’ll teach a neural network how to code a basic a HTML and CSS website based on a picture of a design mockup.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>1.3</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.3/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-791110b4c5c94053.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面48.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-48-期slack-webpack-构建优化css-命名规范与用户追踪vuejs-单元测试&#34;&gt;前端每周清单第 48 期：Slack Webpack 构建优化，CSS 命名规范与用户追踪，Vue.js 单元测试&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uk5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ECharts 4.0 发布&lt;/a&gt;: 2018 年 1 月 16 日，百度的 ECharts 团队对产品进行了更新，发布了时隔两年的大版本 4.0。在 ECharts 4.0 新版本中，主要在性能功能、易用性及扩大使用范围三个大的方面进行了八项升级：带给用户更强大的性能和功能，让开发者使用 ECharts 变得更加轻松，让更多的人在更多的场景都能访问使用 ECharts 制作的可视化产品。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U8n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Puppeteer 1.0 发布&lt;/a&gt;: Puppeteer 是由 Google Chrome 团队开源的，Headless Chrome 操作接口库，已成为事实上的 Headless 浏览器操作标准。本周 Puppeteer 1.0 正式发布，为我们带来了 Chromium 65，page.coverage API，page.pdf() 支持自定义头部与脚部，XPath 支持增强，target.createCDPSession() 兼容原生协议等特性变化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jQuery 3.3.0 发布&lt;/a&gt;: jQuery 仍然是很多 Web 开发工作中不可或缺的部分，自上次 jQuery 大版本更新以来，其核心团队更多地着眼于应该移除什么部分，而不是添加新的功能特性，来保证 jQuery 的小巧易用性。该版本中移除了部分过时的 API，并且为 .addClass(), .removeClass(), 以及 .toggleClass() 这几个函数支持输入某个样式类名数组作为参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 5.2 发布&lt;/a&gt;: Angular 5.2 发布，其可以直接替代之前的 5.1 版本，包含了部分错误修复与性能提升。新版本中，优化了对于模板的类型检查，添加了对于 TypeScript 2.6 的支持，优化了 Router 参数与数据继承。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ukg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;无缝为 create-react-app 项目添加 SSR + 代码分割特性&lt;/a&gt;: create-react-app 是非常不错的原型化工具，能够快速搭建 React 基础应用。本文即是介绍在无需弹出配置的情况下，为 create-react-app 创建的项目添加服务端渲染与代码分割异步加载的特性；本文依次介绍了服务端渲染、基于 react-loadable 的代码分割、服务端代码分割、利用 Webpack 的 chunkNames 特性等内容。更多 React 学习参考 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U8O&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue Devtools 4.0 新特性介绍&lt;/a&gt;: 日前 Vue Devtools 发布了 4.0 大版本更新，引入了一系列的新特性与提升，本文即是对这些变化进行深入解读。本文介绍的新特性包括了组件数据可编辑、在外部编辑器中打开组件、展示原始组件名、优化组件审查方式、根据组件过滤事件、可伸缩的审查器等；更多 Vue.js 学习资料参考 &lt;a href=&#34;https://parg.co/UHc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS 命名规范，加速你的代码调试&lt;/a&gt;: 维护大型的 CSS 代码库并非易事，特别是那些随意散漫未经组织的 CSS 代码极易变成一团乱麻；本文则深入浅出地介绍了 CSS 命名规范，来帮助开发者编写优质的代码。本文首先讨论了连字符与 camelCase，然后介绍了 BEM 的含义与用法，最后讨论了如何设置合适的 JS 操作类；更多 CSS 学习资料参考 &lt;a href=&#34;https://parg.co/bMe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 开发基础与工程实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jbtronics/CrookedStyleSheets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;纯 CSS 的网页追踪方案&lt;/a&gt;: 我们经常会从用户访问的网页中，采集某些用户相关的偏好数据，譬如他们对于某些链接的点击情况等等。本文则是提出了一种不使用 JS，纯粹依赖于 CSS 来进行网页追踪与分析的方案，其依赖于用户点击某个链接或者悬停在某个元素之后，浏览器添加的默认样式类；该方案目前能够用于采集用户的访问与查看情况，更多 CSS 学习资料参考 &lt;a href=&#34;https://parg.co/bMe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 开发基础与工程实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uk9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;菜鸟网络前端全栈化之路&lt;/a&gt;: WEB 前端开发在开发体系里面是一个特殊的群体，阿里早期给前端的定义是“D2”，D2 的含义是：developer &amp;amp; designer。这么一个定位就直接导致了基础教育阶段的人才是空白的，也导致了前端优秀人才特别少，招聘难的问题，随之带来的问题往往会成为整个研发链路的瓶颈。另外近几年随着无线的快速发展，前端在 PC 传统流域的优势逐渐在丧失，而无线端随着无线动态化技术的发展，web 前端又再次受到发展空间的挤压。在这样的情况下前端这个岗位其实需要一些比较大的突破和改变。而 web 前端传统价值的中台化和新领域的拓展变的尤为重要。今天我要分享的就是菜鸟是如何实施前端技术中台化和推动开发全栈的一些经验。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;来自 Slack 的 Webpack 构建性能优化&lt;/a&gt;: Webpack 已然是主流的前端打包工具之一，不过其繁荣的第三方插件生态反而会使得，优化 Webpack 的构建性能成为了一件不容易的事情。本文即是来自 Slack 的工程师，分享的他们在重构整个前端过程中累积的，如何优化 Webpack 构建性能的经验；本文主要从衡量并且分析构建耗时的组成、并行化构建流程、减少构建工作、使用缓存、优化硬件等几个方面。更多 Webpack 学习资料参考 &lt;a href=&#34;https://parg.co/UkT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpack Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;编写 Vue.js 单元测试时需要规避的五个陷阱&lt;/a&gt;: 单元测试是应用开发中不可或缺的部分，本文作者会循序渐进地，以具体的例子来介绍日常开发中会用到的 Vue.js 单元测试的例子。作者希望在本文中讲清楚如何测试、应该测试哪些，并提醒开发者注意避免五个坑：等到最后再测试，测试了不恰当的内容，搞混了 Test Doubles，结构过度耦合，过度追求测试覆盖率等；更多 Vue.js 学习资料参考 &lt;a href=&#34;https://parg.co/UHc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue Reference&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;理解 React 源代码&lt;/a&gt;: React 为我们提供了直接易用的，以状态为核心的前端应用开发方式，本系列文章则着眼于分析 React 内部工作原理。依次讨论了 React 中简单组件、类组件等渲染流程；更多 React 学习参考 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ukj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js 内建模块加载机制&lt;/a&gt;: 本系列文章着眼于分析 Node.js 内部原理，首篇文章讨论了 Node.js 的主进程是如何启动的。接下来作者又分析了在主进程初始化过程中，是如何加载内建模块的，然后还深度分析了 os 包的实现；更多 Node.js 学习参考&lt;a href=&#34;https://parg.co/b2s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;深入浅出 Node.js 全栈架构&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;不曾了解的 JS 特性&lt;/a&gt;: 本文作者在通读了 MDN 文档之后，惊讶地发现了很多他不曾了解的 JS 特性与 API；本文即是作者的读后总结分享，JS 也是学无止境啊。作者在本文中介绍了 Label Statements，void 操作符，Comma 操作符，with 条件操作符，国际化 API，管道操作符，setTimeout 参数等等；&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jaredpalmer/after.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;After.js&lt;/a&gt;: After.js 是类似于 Next.js 的 React 服务端渲染框架，不过其是由了 React Router 作为路由系统，而不像 Next.js 那样自建路由系统。After.js 同样践行了组件即路由的理念，支持基于路由的代码分割、基于路由的变换、分析、数据加载、数据预加载等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChrome/dialog-polyfill&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dialog-polyfill&lt;/a&gt;: 上周的清单中我们介绍过 HTML 5.2 中引入的 dialog 标签，dialog-polyfill 则是由 Google 开源的，dialog 的适配库。不同于第三方组件或者框架提供的弹窗功能，原生的 dialog 标签更为简单易用，并且其可访问性也更好，浏览器也能够针对该标签进行优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zouhir/jarvis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JARVIS&lt;/a&gt;: J.A.R.V.I.S. (Just A Rather Very Intelligent System) 是 Webpack 实时监控工具，其能够将开发环境或生产环境下的 Webpack 构建信息实时展示到浏览器中。JARVIS 借鉴了 Webpack Dashboard 等流行的 Webpack 监控工具，然后提供了可优化的 ES Harmony 模块统计、将资源分割为不同的类别等扩展功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/1backend/1backend&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1Backend&lt;/a&gt;: 1Backend 是自部署的 Serverless 平台，其设计目标是简化 Lambda 函数与微服务的部署、运行、维护流程。1Backend 使得开发者能够快速开发服务，其支持 Go，JavaScript，TypeScript，MySQL 等常见的技术栈。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/graphcool/prisma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prisma&lt;/a&gt;: Prisma 能够将数据库转化为 GraphQL API；其允许用户自定义数据模型，然后快速地转化为可用的 GraphQL 服务器。Prisma GraphQL API 提供了强大的数据抽象与构建块，来辅助开发灵活可扩展的 GraphQL 服务端，包括了类型安全的 API，声明式 DSL 的数据模型、实时接口、与流行前端框架无缝兼容等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/Uky&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;对话 AI 专家洪亮劼：这次，我们全方位聊聊人工智能&lt;/a&gt;: 洪亮劼，极客时间《AI 技术内参》专栏作者，电子商务平台 Etsy 数据科学主管，前雅虎研究院高级研发经理。长期从事机器学习与人工智能的基础以及应用研究，积累了丰富的学术研究和工业实践经验，对推荐系统、搜索引擎、计算广告学、社交网络以及自然语言处理等领域有非常深入的理解。本文从人工智能的落地、观点、人才培养与招聘、学习等几个角度来聊聊人工智能。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.3-en</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.3-en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.3-en/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-791110b4c5c94053.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面48.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;frontend-weekly-no2-puppeteer-10-released-keep-webpack-fast-from-slack-prisma&#34;&gt;Frontend+ Weekly No.2: Puppeteer 1.0 Released, Keep webpack Fast from Slack, Prisma&lt;/h1&gt;
&lt;p&gt;The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href=&#34;https://medium.com/@384924552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/news&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;reddit.com&#34;&gt;Reddit&lt;/a&gt;,&lt;a href=&#34;twitter.com&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;mybridge.co&#34;&gt;MyBridge&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;More Issues can be found in &lt;a href=&#34;./README-en.md&#34;&gt;Frontend+ Weekly Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U8N&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Speedometer 2.0 Released&lt;/a&gt;: In 2014, the WebKit team at Apple released Speedometer 1.0, a benchmark for web app responsiveness. Last week, Speedometer 2.0 is released, their benchmark tool for modern web app responsiveness, revamped and improved to match today’s standards.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U8n&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Puppeteer 1.0 Released&lt;/a&gt;: Chromium 65, JS/CSS code coverage API, PDF customization, XPath support, raw devtools protocol access.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkP&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;jQuery 3.3.0 Released&lt;/a&gt;: It’s been a while since the last jQuery release, but the Core team hasn’t been idle, they focus more on what can be removed rather than can be added. In new version, The .addClass(), .removeClass(), and .toggleClass() methods now accept an array of classes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkF&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular 5.2 Now Available&lt;/a&gt;: Angular version 5.2.0 has been released. This is a minor release that is a drop-in replacement for 5.1 containing many bugfixes. In this version, they improve type checking for templates, add support for TypeScript 2.6, and improve Router Param &amp;amp; Data Inheritance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/U8O&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What’s new in Vue Devtools 4.0&lt;/a&gt;: A big update was released to the Vue devtools just a few days ago, in this article we will dive into the new features and improvements. Changes include Editable component data, Open component in editor, Show the original component names, Inspecting components just got easier, Filter events by component, Collapsible inspectors, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Naming Conventions that Will Save You Hours of Debugging&lt;/a&gt;: It is darn difficult to maintain CSS, poorly written CSS will quickly turn into a nightmare. Here are a few naming conventions that will save you a bit of stress and countless hours down the line.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jbtronics/CrookedStyleSheets&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Webpage tracking only using CSS (and no JS)&lt;/a&gt;: This article is proof of concept for website tracking/analytics using only CSS and without Javascript. We can gather some basic information about the user, using this method, it&amp;rsquo;s possible to track when a user visits a link the first time or hovers over a field the first time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ukg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Upgrading a create-react-app project to a SSR + code splitting setup&lt;/a&gt;: Since its inception, create-react-app is a great tool for rapidly prototyping React apps, demos and testing different features or techniques. Luckily, we can improve things, even without ejecting. Let’s try to do this step by step. This is what we’ll cover: Server-side rendering, Code splitting with react-loadable, Code splitting on the server, Taking benefit of webpack’s chunkNames.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keep webpack Fast: A Field Guide for Better Build Performance&lt;/a&gt;: Webpack is a brilliant tool for bundling frontend assets, but its batteries-included nature and the ocean of third-party tooling can make it difficult to optimize. This post is a field guide offering up what we learned on our path towards a faster build. Slack guys share their experience on measuring the build cost, parallelizing the build process, reducing the wordload, using cache, investing the hardware, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ukv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Grid + Flexbox Solving Real-world Problems&lt;/a&gt;: Recently I had been given a responsive design that looked complex in the way items changed order and layouts changed at different viewports. This new design looked complex, until we thought of it in terms of CSS Grid and FlexBox. The challenge for this would be supporting Internet Explorer 11 and Safari 9+. After highlighting the design complexities, we will show the CSS needed to support modern browsers, then we’ll add IE support and finally get it to work in Safari 9 + 10.0.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkZ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Five Traps to Avoid While Unit Testing Vue.js&lt;/a&gt;: Unit testing is a skill on its own, and it may not be your priority while you are learning a new language or a new framework. In the blog, the author will show you concrete steps you can use in your day-to-day work, walking through Vue.js examples, and help you to avoid five traps: waiting until the end, testing the wrong things, test doubles, structural coupling, testing everything.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-the-hood&#34;&gt;Under the hood&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UVD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Understanding The React Source Code&lt;/a&gt;: React offers a straightforward and intuitive way to program front-end Apps with all the moving parts converged in the form of states. This series is focused on how React works internally. First article will start walking through one of the critical paths of React by rendering a simple component, and followed by a class component.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ukj&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How does Node load built-in modules&lt;/a&gt;: In the previous blog, the author started looking at how the Node main process was initialized. There was quite a lot going on in there, One of the things that caught my eye in particular was the reference to a function that seemed to be loading built-in modules during the initialization phase of the Node main process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UkL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JS things I never knew existed&lt;/a&gt;: I was reading through the MDN docs the other day and found these JS features and APIs I never knew existed. So here is a short list of those things, useful or not - learning JS seemingly never ends. There are Label Statements, &amp;ldquo;void&amp;rdquo; Operator, Comma Operator, With Conditional Operator, Internationalization API, Pipeline Operator, setTimeout() Parameters, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jaredpalmer/after.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;After.js&lt;/a&gt;: Next.js-like framework for server-rendered React apps built with React Router 4. Next.js is awesome, but its routing system isn&amp;rsquo;t satisfied for the author, so he build After.js, whose goals are routes are just components and don&amp;rsquo;t / should not have anything to do with folder structure.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/GoogleChrome/dialog-polyfill&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dialog-polyfill&lt;/a&gt;: dialog-polyfill.js is a polyfill for &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;form method=&amp;quot;dialog&amp;quot;&amp;gt;&lt;/code&gt;. &lt;code&gt;&amp;lt;dialog&amp;gt;&lt;/code&gt; is an element for a popup box in a web page, including a modal option which will make the rest of the page inert during use. This could be useful to block a user&amp;rsquo;s interaction until they give you a response, or to confirm an action. See the &lt;a href=&#34;https://html.spec.whatwg.org/multipage/forms.html#the-dialog-element&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTML spec&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/russellgoldenberg/scrollama&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Scrollama&lt;/a&gt;: Scrollama is a modern &amp;amp; lightweight JavaScript library for scrollytelling using IntersectionObserver in favor of scroll events.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/zouhir/jarvis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JARVIS&lt;/a&gt;: J.A.R.V.I.S. (Just A Rather Very Intelligent System) will put in your browser all the relevant information you need from your webpack build whether in dev or in prod. It is hugely inspired by other webpack dashboards and the core idea is not original, but here are some features: shows you the count of ES Harmony module imports which can be treeshakable and the CJS ones which are not, shows you how well your assets perform in 12 different connection types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/1backend/1backend&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1Backend&lt;/a&gt;: 1Backend is a platform designed to make deploying, running and maintaining lambda functions/microservices easy. It enables you to launch a new live app in seconds - after choosing your tech stack (e.g. Go with access to an SQL database) you get an empty app which is already live and callable from the outside (through HTTP). At that moment, it supports Go, JavaScript, TypeScript and MySQL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/graphcool/prisma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prisma&lt;/a&gt;: Prisma can turn your database into a GraphQL API. Prisma lets you design your data model and have a production ready GraphQL API online in minutes. The Prisma GraphQL API provides powerful abstractions and building blocks to develop flexible, scalable GraphQL backends: type-safe api, data modeling with declarative sdl, realtime api, advanced API composition and works with all frontend frameworks.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>1.4</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.4/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-5931b2820439ccf4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面49.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;前端每周清单第-49-期webpack-4-beta-尝鲜react-windowing-与-setstate-分析web-worker-实战&#34;&gt;前端每周清单第 49 期：Webpack 4 Beta 尝鲜，React Windowing 与 setState 分析，Web Worker 实战&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;作者：王下邀月熊&lt;/code&gt; &lt;code&gt;编辑：徐川&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/cn/FE-Weekly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;前端每周清单&lt;/a&gt;专注前端领域内容，以对外文资料的搜集为主，帮助开发者了解一周前端热点；分为新闻热点、开发教程、工程实践、深度阅读、开源项目、巅峰人生等栏目。欢迎关注【前端之巅】微信公众号(ID: frontshow)，及时获取前端每周清单。&lt;/p&gt;
&lt;h2 id=&#34;新闻热点&#34;&gt;新闻热点&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;国内国外，前端最新动态&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iOS 11.3 与 macOS 10.13.4 即将包含 Service Workers&lt;/a&gt;: 本周，Safari Technology Preview 48 版本发布，其引入了包括密码自动填充机制变更、启用 Storage Access API 等一系列特性。更值得一提的是，这也意味着 iOS 11.3 与 macOS 10.13.4 即将包含 Service Workers，从而允许开发者利用后台脚本提供更强大的可离线使用的 Web 应用；此外，iOS 11.3 还允许将 Web Apps 添加到屏幕桌面，并且支持 Manifest 文件，更多 PWA 相关资料参考&lt;a href=&#34;https://parg.co/UiT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uiv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Parcel v1.5.0 发布&lt;/a&gt;: 虽然发布不久，但是 Parcel 已然在 Github 上获取了超 17000 的点赞，并且在 npm 上有超百万的下载量与数十位来自各地的贡献者。Parcel v1.5.0 是发布以来的重量级更新，其引入了 JavaScript Source Map，WebAssembly 支持，Rust 与 WebAssembly 转换的支持，配置文件缓存失效，.env 文件等特性，并且进一步优化了小型项目的编译效率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expo SDK v25.0.0 发布&lt;/a&gt;: 本周发布的 Expo SDK v25.0.0 基于最近的 React Native 0.52 版本，其带来了如下新特性：支持在独立应用中打包字体、视频与音频资源；优化发布通道，允许回滚更新，交叉发布，查看历史等；为 AWS Cognito 提供了开箱即用的支持。除此之外，该版本还优化了 Calendar、MailComposer、GLView 等一系列接口与扩展。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.getbootstrap.com/2018/01/18/bootstrap-4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootstrap 4&lt;/a&gt;: 尽管等待了多年，但是 Bootstrap 4 最终还是发布了；正式版本与上一个 Beta 版本相比未有重大变化，主要着眼于部分错误修复与提升。本版本中优化了打印样式与工具类，添加了额外的边辅助函数，更新了 &lt;code&gt;$spacers&lt;/code&gt; 与 &lt;code&gt;$sizes&lt;/code&gt; 映射，并且修改了主题文档等。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开发教程&#34;&gt;开发教程&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;步步为营，掌握基础技能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webpack 4 beta  尝鲜&lt;/a&gt;: 本周，webpack 4.0.0-beta.0 发布，本文即是对于 Webpack 4 的特性与使用进行简要介绍。Webpack 4 为我们带来了如下特性：多场景下更好的性能提升，更好的默认配置，支持 package.json 中的 sideEffects 配置，更好的 JSON Tree Shaking 支持，更新到 UglifyJS2，更多的类型支持，WebAssembly 支持，取消 CommonsChunkPlugin 替换为默认优化配置。更多 Webpack 相关资料参考&lt;a href=&#34;https://parg.co/UkT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;有趣的 JavaScript Proxies 用法&lt;/a&gt;: JavaScript 中还有很多尚未广泛使用的新特性，JavaScript proxies 可能就是其中之一，它能够在运行时复写或者拦截某个对象的属性以及方法。本文中，作者使用 Proxy 完成了几个有趣的小功能：仅有二十行代码的 API SDK，以可读性更好的方式查询数据属性值，监控异步函数调用等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;一些有趣的 ECMAScript 2017 尚未接纳的提案&lt;/a&gt;: 随着 Polyfills 与转换器的流行，很多还处于早期的提案在完成之前就在开发者之间获得了极大的欢迎，本文即是对 ECMAScript 2017 尚未接纳的提案中一些有趣的进行分享。作者首先讨论了 ECMAScript 提案的五个进程，然后讨论了 Asynchronous Iteration, Class Improvements, Class Decorators, Import Function, Observables, Do Expression, Optional Chaining 等特性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;工程实践&#34;&gt;工程实践&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;立足实践，提示实际水平&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;利用 Windowing 创建高效的 React 视图&lt;/a&gt;: 本文是 &lt;a href=&#34;https://github.com/bvaughn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bvaughn&lt;/a&gt; 讨论 React 性能、搜索与应用架构相关演讲上的 Presentation，他着眼于到底是什么拖慢了 React 应用性能，并且分享了如何解决问题以及学到的经验。值得一提的是，他讨论了很多关于 Windowing 工作原理，以及如何仅创建那些用户可见数据的实践；更多 React 教程参阅 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPA 技术选型时的考量&lt;/a&gt;: 本文作者讨论了他在对于网页的技术选型中，是否应该采用 SPA 方案的考量，需要注意的是，本文带有了较多的主观态度，请批判性地看待。作者提出的考量点包括：速度与性能，高开发成本，不稳定性，不易长期维护，低安全性，重造轮子，社交媒介属性，低可访问性，对于内存的浪费等。更多 Web 架构相关资料参考&lt;a href=&#34;https://parg.co/UiB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uiu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;基于 IntersectionObserver 进行资源延迟加载&lt;/a&gt;: 本文中，我们将会讨论页面滚动交互里经常涉及到的资源懒加载，不仅仅是图片，而是基于 IntersectionObserver 的任何资源懒加载。本文也会讨论如何根据元素的可见性来判断是否触发某个函数，更多 Web 性能优化相关内容参考 &lt;a href=&#34;https://parg.co/bMe&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Web 开发基础与工程实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;深度阅读&#34;&gt;深度阅读&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;深度思考，升华开发智慧&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;why is &lt;code&gt;setState&lt;/code&gt; asynchronous?&lt;/a&gt;: MobX 的作者，mweststrate，近日提了某个 Issue 讨论为何 setState 需要设置为异步。我们耳熟能详的原因是 异步的 setState 用于进行异步渲染，并且确保 state 对象是反馈了那些被渲染好的状态。而 Gaearon 也澄清了这个问题，异步的 setState 主要是为了保证内部一致性，并且为后续的并发更新打下基础。更多 React 教程参阅 &lt;a href=&#34;https://github.com/wx-chevalier/Web-Notes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React 与前端工程化实践&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;JavaScript 工作原理系列：Web Workers 浅析与典型的使用场景&lt;/a&gt;: 本文是 How JavaScript Works 系列文章的第七篇，主要讨论了 Workers 的类型，它们的特性与作用，以及它们在不同的场景下的优势与不足。众所周知的是，异步代码以及 Event Loop 机制能够帮助缓解 JavaScript 单线程的不足；而 Web Worker 则是能够创建轻量级的、浏览器内线程，从而运行那些并不会阻塞 Event Loop 的代码。Web Worker 典型的使用场景包括了 Ray tracing，数据加解密，数据预抓取，Progressive Web Apps 以及拼写检查等等；更多 Web Worker 相关资料参考&lt;a href=&#34;https://parg.co/UiD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firefox 58: The Quantum Era Continues&lt;/a&gt;: 对于 Mozilla 而言，2017 年是个非常有意义里程碑，正式发布了 Firefox Quantum，通过彻底重写的方式极大地提升与优化了 Firefox 的性能与使用体验。本文即是对于 Firefox 58 版本正式发布时，其带来的新特性进行解读：非主线程渲染、后台 Tab 限流、WebAssembly 流式编译器、CSS 字体呈现、新的 Promise 特性等，更多 Firefox 59 的规划可以查看&lt;a href=&#34;https://parg.co/Uis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;开源项目&#34;&gt;开源项目&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;乐于分享，共推前端发展&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/rejoiner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rejoiner&lt;/a&gt;: Rejoiner 是由 Google 开源的，能够基于 gRPC 或者其他的 Protobuf 资源自动生成统一 GraphQL Schema 的工具。它致力于灵活化 GraphQL 的定义与交互，方便多数据源连接。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ibm/css-gridish&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Gridish&lt;/a&gt;: CSS Gridish 能够基于产品的网格设计，自动生成多个资源文件：包含画板与网格布局设计的 Sketch 文件，包含了 Flexbox 兼容的 CSS/SCSS CSS Grid 代码，能够用于监测网页布局的 Chrome 插件。需要注意的是，该工具并不致力于辅助构建网格，而是帮你自动化地生成产品开发全流程中需要的资源文件，更多信息查阅&lt;a href=&#34;https://parg.co/Uim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Greenlet&lt;/a&gt;: Greenlet 能够将异步函数移入独立线程中，可以看做 workerize 函数的单函数简化版。不过需要注意的是，Greenlet 仅支持纯函数，其会在独立的作用域中运行这些函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Purgecss&lt;/a&gt;: 当我们开发网页时，往往会使用 Bootstrap，Materializecss 以及 Foundation 这样的 CSS 库；不过实际上我们仅会使用其中的部分样式，其余的样式对于当前界面而言都可以算作冗余样式。Purgecss 即可以帮助我们清除界面上的无用样式，它能够自动分析输入的 HTML 文件与 CSS 样式，并且进行选择器匹配，最终移除无用的 CSS 代码。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;巅峰人生&#34;&gt;巅峰人生&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://parg.co/Uii&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;专访 ECharts 团队：无 KPI 驱动如何做出成功开源项目&lt;/a&gt;: 近日，国内知名的数据可视化开源项目 ECharts 发布了 4.0 版，InfoQ 编辑对 ECharts 团队做了一个采访，了解团队的一些近况，对可视化的看法，以及在开源方面的一些经验。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;前端之巅&#34;&gt;前端之巅&lt;/h2&gt;
&lt;p&gt;前端之巅是 InfoQ 旗下关注前端技术的垂直社群，加入前端之巅学习群请关注前端之巅公众号后回复 “ 加群 ”。投稿请发邮件到 &lt;a href=&#34;mailto:editors@cn.infoq.com&#34;&gt;editors@cn.infoq.com&lt;/a&gt;，注明 “ 前端之巅投稿 ”。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-01712a993d2b23de.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;前端之巅微信底图－5.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1.4-en</title>
      <link>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.4-en/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-lists/00.specials/weekly/2018/1/1.4-en/</guid>
      <description>&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://upload-images.jianshu.io/upload_images/1647496-5931b2820439ccf4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&#34; alt=&#34;周报封面49.jpg&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;frontend-weekly-no3-try-webpack-4-beta-react-windowing-and-setstate-building-blocks-of-web-workers&#34;&gt;Frontend+ Weekly No.3: Try Webpack 4 Beta, React Windowing and setState, Building blocks of Web Workers&lt;/h1&gt;
&lt;p&gt;The best articles, links and news related to Frontend Development, and more, delivered once a week. All reference in this issue are gathered from &lt;a href=&#34;https://medium.com/@384924552&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Medium&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/news&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;reddit.com&#34;&gt;Reddit&lt;/a&gt;,&lt;a href=&#34;twitter.com&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;mybridge.co&#34;&gt;MyBridge&lt;/a&gt;, etc.&lt;/p&gt;
&lt;p&gt;More Issues can be found in &lt;a href=&#34;./README-en.md&#34;&gt;Frontend+ Weekly Repository&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;news&#34;&gt;News&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;iOS 11.3 and macOS 10.13.4 include Service Workers&lt;/a&gt;: In this week, Safari Technology Preview 48 is available, it changes how Password AutoFill works, enable the Storage Access API, etc. More important, iOS 11.3 and macOS 10.13.4 include Service Workers, a powerful specification that allows background scripts to power offline web applications. iOS 11.3 also consults Web App Manifest when add web apps to the home screen. More reference about PWA can be found &lt;a href=&#34;https://parg.co/UiT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uiv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Parcel v1.5.0 released&lt;/a&gt;: Parcel has over 17,000 stars on Github, over half a million downloads on npm, and over 60 contributors who have submitted over 200 pull requests! Parcel v1.5.0 is a HUGE release. The highlights include: JavaScript Source Map support, WebAssembly support, Rust → WebAssembly support, Config files invalidate cache, .env file support, Even faster for smaller projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui9&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Expo SDK v25.0.0 released&lt;/a&gt;: Expo SDK v25.0.0 is based off the recently released React Native 0.52. In this release, it supports for fonts, videos, and audio assets in standalone apps; make release channels get more powerful; out-of-the-box support for AWS Cognito; improve APIs and additions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://blog.getbootstrap.com/2018/01/18/bootstrap-4/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bootstrap 4&lt;/a&gt;: It’s literally taken us years to do it, but Bootstrap 4 has finally arrived! There are no breaking changes since our last beta, but we have made some key improvements and resolved some tricky bugs: print styles and utility classes have been updated, additive border utilities have been added, our &lt;code&gt;$spacers&lt;/code&gt; and &lt;code&gt;$sizes&lt;/code&gt; Sass maps have been updated, added documentation to our Theming docs, added responsive .order-0 and .order-last classes for more control over the flexbox grid.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tutorial&#34;&gt;Tutorial&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiR&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;webpack 4 beta — try it today!&lt;/a&gt;: In this week, webpack 4.0.0-beta.0 is released. This post states what’s new in webpack 4: Performance will be significantly enhanced in multiple scenarios, Better Defaults, support for sideEffects: false in package.json, JSON Support &amp;amp; Tree Shaking, Upgrade to UglifyJS2, Module Type’s Introduced + .mjs support, WebAssembly Support, Goodbye CommonsChunkPlugin, etc. More reference about Webpack can be found &lt;a href=&#34;https://parg.co/UkT&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to use JavaScript Proxies for Fun and Profit&lt;/a&gt;: There’s a very recent new feature of the JavaScript language that is still not being widely used: JavaScript proxies. With JavaScript proxies you can wrap an existing object and intercept any access to its attributes or methods. In this article, the author uses proxy for developing an sdk for api with 20 lines of code, querying data structures with more readable methods, monitoring async functions. More reference about JavaScript can be found &lt;a href=&#34;https://parg.co/ULH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiW&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interesting ECMAScript 2017 proposals that weren’t adopted&lt;/a&gt;: Because polyfills and transpilers have become popular in recent years, some early-stage proposals have gained significant adoption before they’ve even been finalized. In this article, we will go through some interesting ECMAScript 2017 proposals that weren’t adopted. Firstly, the author introduce five stages of the ECMAScript proposal process. Next, he talks about Asynchronous Iteration, Class Improvements, Class Decorators, Import Function, Observables, Do Expression, Optional Chaining, etc. More reference about JavaScript can be found &lt;a href=&#34;https://parg.co/ULH&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;engineering-practices&#34;&gt;Engineering Practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Creating more efficient React views with windowing&lt;/a&gt;: In this presentation, the &lt;a href=&#34;https://github.com/bvaughn/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;bvaughn&lt;/a&gt; talks something abot performance, search, and app architecture in React development. He focuses on what slows React applications down, how can we fix and shares some lessons-learned. It is worth mentioning that he discusses how does windowing work and how to only create elements the user can see. More reference for learning React can be found &lt;a href=&#34;https://parg.co/UHK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SPA, or not SPA, that is the question!&lt;/a&gt;: In this article I will try to share my experience by listing my 10 reasons why you shouldn’t do a SPA website: Speed and Performance, High Development Costs, Fragility, Hard Long term Maintainability, Poor Security, Reinventing the wheel, Social media and meta attributes, Poor Accessibility, Waste of memory and energy. More reference about web architecture can be found &lt;a href=&#34;https://parg.co/UiB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uiu&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Now You See Me: How To Defer, Lazy-Load And Act With IntersectionObserver&lt;/a&gt;: In this article, we are going to go out of the scroll darkness and talk about the modern way of lazy-loading resources. Not just lazy-loading images, but loading any asset for that matter. More so, the technique we are going to talk about today is capable of much more than just lazy-loading assets: We will be able to provide any type of deferred functionality based on the elements’ visibility to users. More Reference About Web Optimization can be found &lt;a href=&#34;https://parg.co/Uin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;under-the-hood&#34;&gt;Under the hood&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uid&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;why is &lt;code&gt;setState&lt;/code&gt; asynchronous?&lt;/a&gt;: mweststrate, the author of MobX, open this issue to wonder why setState is asynchronous. Reasons we often hear are that: async setState is required for async rendering, async setState is needed to know which state was rendered, etc. Gaearon clarify this confusion with different thought: guaranteeing internal consistency, enabling concurrent updates, etc. More reference for learning React can be found &lt;a href=&#34;https://parg.co/UHK&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uig&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How JavaScript works: The building blocks of Web Workers + 5 cases when you should use them&lt;/a&gt;: This is post # 7 of the series dedicated to exploring JavaScript and its building components, we’ll offer an overview, discuss the different types of workers, how their building components come to play together, and what advantages and limitations they offer in different scenarios. Asynchronous functions solve only a small part of the single-thread limitations of the JavaScript language, on the other hand, Web Workers are lightweight, in-browser threads that can be used to execute JavaScript code without blocking the event loop. More reference about Web Worker can be found &lt;a href=&#34;https://parg.co/UiD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/UiO&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Firefox 58: The Quantum Era Continues&lt;/a&gt;: 2017 was a big year for Mozilla, culminating in the release of Firefox Quantum, a massive multi-year retooling of the browser focused on speed, and laying the groundwork for the years to come. Here are a few improvements that have landed in the latest Firefox, Off-Main-Thread Painting, Keeping Firefox Focused with Background Tab Throttling, WebAssembly Streaming Compiler, CSS Font Display, New Promise feature to reduce redundant code. These are also some &lt;a href=&#34;https://parg.co/Uis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;extension enhancement in Firefox 59&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;opensource&#34;&gt;OpenSource&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/rejoiner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rejoiner&lt;/a&gt;: Rejoiner is opensourced by Google, to generate a unified GraphQL schema from gRPC microservices and other Protobuf sources. It allows the GraphQL schema to be flexibly defined and composed as shared components, populates request Proto based on GraphQL query parameters, supplies a DSL to modify the generated schema, joins data sources by annotating methods that fetch data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ibm/css-gridish&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CSS Gridish&lt;/a&gt;: CSS Gridish takes design specs of your product’s grid and builds out several resources for your team to use: Sketch file with artboards and grid/layout settings for designers, CSS/SCSS code using CSS Grid with a CSS Flexbox fallback for developers, Google Chrome extension for anyone to check a webpage’s alignment. This tool is not a grid system with a grid already designed for you. Instead, CSS Gridish builds all of the resources for the grid your team designed. More information can be found in &lt;a href=&#34;https://parg.co/Uim&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this article&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Ui1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Greenlet&lt;/a&gt;: Greenlet can move an async function into its own thread, it can be treated as a simplified single-function version of workerize. The function you pass should be pure, since they get executed in an isolated scope.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://parg.co/Uia&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Purgecss&lt;/a&gt;: When you are building a website, chances are that you are using a css framework like Bootstrap, Materializecss, Foundation, etc&amp;hellip; But you will only use a small set of the framework and a lot of unused css styles will be included. This is where Purgecss comes into play. Purgecss analyzes your content and your css files. Then it matches the selectors used in your files with the one in your content files. It removes unused selectors from your css, resulting in smaller css files.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
