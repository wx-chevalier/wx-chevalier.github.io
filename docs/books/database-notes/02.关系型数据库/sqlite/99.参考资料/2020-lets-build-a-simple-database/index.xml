<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>2020-《Lets Build a Simple Database》 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/database-notes/02.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/sqlite/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-lets-build-a-simple-database/</link><atom:link href="https://ng-tech.icu/books/database-notes/02.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/sqlite/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-lets-build-a-simple-database/index.xml" rel="self" type="application/rss+xml"/><description>2020-《Lets Build a Simple Database》</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>2020-《Lets Build a Simple Database》</title><link>https://ng-tech.icu/books/database-notes/02.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/sqlite/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-lets-build-a-simple-database/</link></image><item><title>01.简介和设置 REPL</title><link>https://ng-tech.icu/books/database-notes/02.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/sqlite/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-lets-build-a-simple-database/01.%E7%AE%80%E4%BB%8B%E5%92%8C%E8%AE%BE%E7%BD%AE-repl/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/database-notes/02.%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/sqlite/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2020-lets-build-a-simple-database/01.%E7%AE%80%E4%BB%8B%E5%92%8C%E8%AE%BE%E7%BD%AE-repl/</guid><description>&lt;h1 id="简介和设置-repl">简介和设置 REPL&lt;/h1>
&lt;p>作为一个 web 开发者，我每天都在工作中和关系型数据库打交道，但是他们对我来说是一个黑盒。这导致我出现了一些疑问：&lt;/p>
&lt;ul>
&lt;li>数据保存的格式是什么？（在内存和硬盘中）&lt;/li>
&lt;li>什么是候将它从内存移动到硬盘中？&lt;/li>
&lt;li>为什么一个数据表只能有一个主键？&lt;/li>
&lt;li>回滚操作是怎么完成的？&lt;/li>
&lt;li>索引是如何格式化的？&lt;/li>
&lt;li>何时及如何进行全表扫描？&lt;/li>
&lt;li>准备好的语句以什么格式保存？&lt;/li>
&lt;/ul>
&lt;p>换句话说，一个数据库是如何&lt;strong>工作&lt;/strong>的？&lt;/p>
&lt;p>为了搞清楚这些事，我正在从头编写数据库。它是基于 sqlite 架构的，因为它的体积小，不像 MySQL 或是 PostgreSQL 那样，所以我更有希望理解它。整个数据库都存在一个.db 文件中！&lt;/p>
&lt;h1 id="sqlite">Sqlite&lt;/h1>
&lt;p>他们的网站上有许多 &lt;a href="https://www.sqlite.org/arch.html" target="_blank" rel="noopener">内部 sqlite 文档&lt;/a>，另外，我还有一个 &lt;a href="https://play.google.com/store/books/details?id=9Z6IQQnX1JEC" target="_blank" rel="noopener">SQLite 数据库系统：设计和实现&lt;/a> 的副本。&lt;/p>
&lt;p>&lt;a href="https://camo.githubusercontent.com/eb5784f48f09a00ed7834cc23ab3c92eb7137362ab9e099363972cbf5fc78848/68747470733a2f2f63737461636b2e6769746875622e696f2f64625f7475746f7269616c2f6173736574732f696d616765732f61726368312e676966" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://camo.githubusercontent.com/eb5784f48f09a00ed7834cc23ab3c92eb7137362ab9e099363972cbf5fc78848/68747470733a2f2f63737461636b2e6769746875622e696f2f64625f7475746f7269616c2f6173736574732f696d616765732f61726368312e676966" alt="sqlite 架构（https://www.sqlite.org/zipvfs/doc/trunk/www/howitworks.wiki）" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;p>查询通过一系列组件来检索或是修改数据。&lt;strong>前端&lt;/strong>包括：&lt;/p>
&lt;ul>
&lt;li>Tokenizer&lt;/li>
&lt;li>解析器&lt;/li>
&lt;li>代码生成器&lt;/li>
&lt;/ul>
&lt;p>输入到前端的是一个 SQL 查询。输出是 sqlite 虚拟机字节码（本质上是可以在数据库上运行的已编译程序）&lt;/p>
&lt;p>&lt;em>后端&lt;/em>包括：&lt;/p>
&lt;ul>
&lt;li>虚拟机&lt;/li>
&lt;li>B 树&lt;/li>
&lt;li>Pager&lt;/li>
&lt;li>系统接口&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>虚拟机&lt;/strong>将前端生成的字节码当成指令。然后，他可以对一个或多个表进行索引操作，每个表都存储在一种叫做 B 树的数据结构中。VM 本质上是关于字节码指令类型的大开关语句。&lt;/p>
&lt;p>每个&lt;strong>B 树&lt;/strong>都由许多个节点组成。每个节点的长度为一页。B 数可以通过向 Pager 发出命令来从硬盘检索页面或将其保存回硬盘。&lt;/p>
&lt;p>&lt;strong>Pager&lt;/strong> 接收命令以读取或写入数据页。它负责以适当的偏移量在数据库文件中进行读/写操作。它还会在内存中保留最近访问页面的缓存，并确定何时需要将这些页面写回到硬盘。&lt;/p>
&lt;p>&lt;strong>系统接口&lt;/strong>是不同的层，具体取决于为哪个操作系统的 sqlite 进行编译。在这个指南中，我不会去支持多种平台。&lt;/p>
&lt;p>千里之行始于足下，让我们从一个简单的东西开始：&lt;strong>REPL&lt;/strong>。&lt;/p>
&lt;h1 id="制作一个简单的-repl">制作一个简单的 REPL&lt;/h1>
&lt;p>当你在命令行启动 Sqlite 的时候，Sqlite 会启动一个 read-execute-print loop：&lt;/p>
&lt;pre tabindex="0">&lt;code>~ sqlite3
SQLite version 3.16.0 2016-11-04 19:09:39
Enter &amp;#34;.help&amp;#34; for usage hints.
Connected to a transient in-memory database.
Use &amp;#34;.open FILENAME&amp;#34; to reopen on a persistent database.
sqlite&amp;gt; create table users (id int, username varchar(255), email varchar(255));
sqlite&amp;gt; .tables
users
sqlite&amp;gt; .exit
~
&lt;/code>&lt;/pre>&lt;p>为此，我们的 &lt;code>main&lt;/code> 函数应有一个无限循环，这个循环打印提示，获取输入，然后处理输入：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">new_input_buffer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">print_prompt&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read_input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.exit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">close_input_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Unrecognized command &amp;#39;%s&amp;#39;.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们将 &lt;code>InputBuffer&lt;/code> 定义为一个围绕状态存储的小包装，以便和 &lt;a href="http://man7.org/linux/man-pages/man3/getline.3.html" target="_blank" rel="noopener">getline()&lt;/a> 函数进行交互（稍后详细介绍）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">buffer_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">ssize_t&lt;/span> &lt;span class="n">input_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">InputBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">new_input_buffer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">InputBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">input_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着，&lt;code>print_prompt()&lt;/code> 打印一个提示给用户。我们在读每一行输入之前都要进行这个操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print_prompt&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db &amp;gt; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果要读取一行输入，那就使用 &lt;a href="http://man7.org/linux/man-pages/man3/getline.3.html" target="_blank" rel="noopener">getline()&lt;/a>：&lt;/p>
&lt;pre tabindex="0">&lt;code>ssize_t getline(char **lineptr, size_t *n, FILE *stream);
&lt;/code>&lt;/pre>&lt;p>&lt;code>lineptr&lt;/code>：一个指向字符串的指针，我们用来指向包含读取行的缓冲区。如果将它设置为 NULL，那它就将由 getline 分配，因此即使命令失败，也应由用户释放。&lt;/p>
&lt;p>&lt;code>n&lt;/code>：一个指向用于保存为缓冲区分配的大小的变量的指针。&lt;/p>
&lt;p>&lt;code>stream&lt;/code>：输入来源。我们使用标准输入。&lt;/p>
&lt;p>&lt;code>返回值&lt;/code>：读取的字节数，可能小于缓冲区的大小。&lt;/p>
&lt;p>我们让 &lt;code>getline&lt;/code> 将读取的行存储在 &lt;code>input_buffer-&amp;gt;buffer&lt;/code> 中，将分配的缓冲区大小存储在 &lt;code>input_buffer-&amp;gt;buffer_length&lt;/code> 中。我们将返回值存储在 &lt;code>input_buffer-&amp;gt;input_length&lt;/code> 中。&lt;/p>
&lt;p>&lt;code>buffer&lt;/code> 开始为空，所以 &lt;code>getline&lt;/code> 分配足够的内存来容纳输入行，并让缓冲区指向输入行。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">read_input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">ssize_t&lt;/span> &lt;span class="n">bytes_read&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer_length&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bytes_read&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error reading input&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_FAILURE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Ignore trailing newline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">input_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bytes_read&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bytes_read&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>现在定义一个释放为 &lt;code>InputBuffer *&lt;/code> 实例分配的内存和响应结构的 &lt;code>buffer&lt;/code> 元素（&lt;code>getline&lt;/code> 在 &lt;code>read_input&lt;/code> 中为 &lt;code>input_buffer-&amp;gt;buffer&lt;/code> 分配的内存）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">close_input_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后，我们解析并执行命令。 现在只有一个可识别的命令：.exit，它将终止程序。 否则，我们将显示错误消息并继续循环。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.exit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">close_input_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Unrecognized command &amp;#39;%s&amp;#39;.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>来试试！&lt;/p>
&lt;pre tabindex="0">&lt;code>~ ./db
db &amp;gt; .tables
Unrecognized command &amp;#39;.tables&amp;#39;.
db &amp;gt; .exit
~
&lt;/code>&lt;/pre>&lt;p>好了，我们有一个有效的 REPL。 在下一部分中，我们将开始开发命令语言。 同时，这是此部分中的整个程序：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdbool.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">buffer_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">ssize_t&lt;/span> &lt;span class="n">input_length&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">InputBuffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="nf">new_input_buffer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">InputBuffer&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">input_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print_prompt&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;db &amp;gt; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">read_input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">ssize_t&lt;/span> &lt;span class="n">bytes_read&lt;/span> &lt;span class="o">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">getline&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer_length&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">stdin&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">bytes_read&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Error reading input&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_FAILURE&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// Ignore trailing newline
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">input_length&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bytes_read&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">bytes_read&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">close_input_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">InputBuffer&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">input_buffer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">new_input_buffer&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">true&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">print_prompt&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">read_input&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;.exit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">close_input_buffer&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input_buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">EXIT_SUCCESS&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Unrecognized command &amp;#39;%s&amp;#39;.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">input_buffer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>