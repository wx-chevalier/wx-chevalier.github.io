<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>持久化 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%8C%81%E4%B9%85%E5%8C%96/</link><atom:link href="https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%8C%81%E4%B9%85%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><description>持久化</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>持久化</title><link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%8C%81%E4%B9%85%E5%8C%96/</link></image><item><title>AOF 机制</title><link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%8C%81%E4%B9%85%E5%8C%96/aof-%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%8C%81%E4%B9%85%E5%8C%96/aof-%E6%9C%BA%E5%88%B6/</guid><description>&lt;h1 id="aof-机制">AOF 机制&lt;/h1>
&lt;p>AOF 是 Redis 提供的另外一种持久化的方式，它以独立日志的方式记录每次写入操作，重启时再重新执行这些操作，从而达到恢复数据的命令。&lt;/p>
&lt;h3 id="31-执行原理">3.1 执行原理&lt;/h3>
&lt;p>开启 AOF 机制后，所有的写入命令都会追加到 aof_buf 缓冲区中，并按照指定的策略定时将缓冲区中的数据同步到磁盘上。 AOF 除了记录每条命令外，还会在适当的时候 fork 出一个子进程对 AOF 文件进行重写，在重写过程中，Redis 会将可以合并的语句进行合并，将无效的语句进行删除，从而减小 AOF 文件的体积，以便减少文件的占用空间和方便在数据恢复时能够更快的进行加载。&lt;/p>
&lt;h3 id="32-同步策略">3.2 同步策略&lt;/h3>
&lt;p>Redis 提供了三种同步策略，用于控制 AOF 缓冲区同步数据到磁盘上的行为，由参数 &lt;code>appendfsync&lt;/code> 控制：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>可选配置&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>always&lt;/strong>&lt;/td>
&lt;td>命令写入 aof_buf 后就调系统 fsync 操作同步到 AOF 文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>everysec&lt;/strong>&lt;/td>
&lt;td>命令写入 aof_buf 后就调用系统的 write 操作，但 fsync 同步文件的操作则由专门线程每秒调用一次&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>no&lt;/strong>&lt;/td>
&lt;td>命令写入 aof_buf 后就调用系统的 write 操作，不对 AOF 文件做 fsync 同步，同步操作由操作系统负责，通常同步周期最长为 30 秒&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>write 和 fsync 操作说明：&lt;/p>
&lt;ul>
&lt;li>write 操作会触发延迟写机制，Linux 在内核提供页缓冲区用来提高硬盘的 IO 性能，write 操作在写入系统缓冲区后直接返回。同步操作依赖于系统调度机制，例如缓冲区页空间写满或达到特定时间周期。 同步文件之前，如果此时系统故障宕机，缓冲区内数据将丢失。&lt;/li>
&lt;li>fsync 针对单个文件操作，做强制硬盘同步，fsync 操作将阻塞直到写入硬盘完成后返回，它保证了数据持久化的安全。&lt;/li>
&lt;/ul>
&lt;p>Redis 默认的同步机制为 &lt;code>everysec&lt;/code>，此时能够兼顾性能和保证数据安全，在发生意外宕机的时，最多会丢失一秒的数据。&lt;/p>
&lt;h3 id="33-相关配置">3.3 相关配置&lt;/h3>
&lt;p>想要使用 AOF 功能，需要配置 &lt;code>appendonly &lt;/code> 的值为 &lt;code>yes&lt;/code>，默认值为 &lt;code>no&lt;/code>。默认 AOF 的文件名为 &lt;code>appendonly.aof&lt;/code>, 可以通过修改&lt;code>appendfilename&lt;/code> 的值进行修改，和 RDB 文件的保存位置一样，默认保存在 Redis 的工作目录下。&lt;/p>
&lt;h2 id="四对比分析">四、对比分析&lt;/h2>
&lt;h3 id="41-优点与缺点">4.1 优点与缺点&lt;/h3>
&lt;h4 id="rdb-的优点">RDB 的优点&lt;/h4>
&lt;ul>
&lt;li>RDB 使用一次性生成内存快照的方式， 产生的文件紧凑压缩比更高， 适用于备份和全量复制等场景。&lt;/li>
&lt;li>RDB 文件通常比同一数据集的等效 AOF 文件小，所以使用 RDB 恢复数据远远快于 AOF 方式。&lt;/li>
&lt;li>RDB 最大限度地提高了 Redis 的性能，因为 Redis 父进程只需要 fork 出一个子进程，它本生并不会执行磁盘 I/O 等操作。&lt;/li>
&lt;/ul>
&lt;h4 id="rdb-的缺点">RDB 的缺点&lt;/h4>
&lt;ul>
&lt;li>RDB 方式没办法做到数据的实时持久化，假设每次持久化的时间间隔是 5 分钟，当在上一次持久化后 3 分钟后发生了服务宕机，则这三分钟内的数据会全部丢失。&lt;/li>
&lt;li>fork 操作是一个重量级的操作，如果数据集很大，Fork 操作可能会非常耗时。&lt;/li>
&lt;/ul>
&lt;h4 id="aof-的优点">AOF 的优点&lt;/h4>
&lt;ul>
&lt;li>AOF 能够实现实时或秒级的持久化操作，能够保证数据的最少丢失。&lt;/li>
&lt;li>如果突然宕机，日志以半写命令结束，可以使用 redis-check-aof 工具进行修复，从而保证数据最少丢失。&lt;/li>
&lt;/ul>
&lt;h4 id="aof-的缺点">AOF 的缺点&lt;/h4>
&lt;ul>
&lt;li>AOF 文件通常比同一数据集等效的 RDB 文件大。&lt;/li>
&lt;li>根据选择的同步策略的不同，AOF 可能比 RDB 还慢。&lt;/li>
&lt;/ul>
&lt;h3 id="42-使用建议">4.2 使用建议&lt;/h3>
&lt;p>按照 Redis 官方的推荐，为保证的数据安全性，可以同时使用这两种持久化机制，在 Redis 官方的长期计划里面，未来可能会将 AOF 和 RDB 统一为单一持久化模型。需要注意的是，在这种情况下，当 Redis 重新启动时，Redis 将使用 AOF 文件重建数据集，因为它可以保证数据的最少丢失。&lt;/p></description></item><item><title>RDB 机制</title><link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%8C%81%E4%B9%85%E5%8C%96/rdb-%E6%9C%BA%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/2.%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/%E6%8C%81%E4%B9%85%E5%8C%96/rdb-%E6%9C%BA%E5%88%B6/</guid><description>&lt;h1 id="rdb-机制">RDB 机制&lt;/h1>
&lt;p>RDB 机制是以指定的时间间隔将 Redis 中的数据生成快照并保存到硬盘中，它更适合于定时备份数据的应用场景。可以通过手动或者自动的方式来触发 RDB 机制：&lt;/p>
&lt;h3 id="21-手动触发">2.1 手动触发&lt;/h3>
&lt;p>可以通过以下两种方式来手动触发 RDB 机制：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>save&lt;/strong> ：save 命令会阻塞当前 Redis 服务，直到 RDB 备份过程完成，在这个时间内，客户端的所有查询都会被阻塞；&lt;/li>
&lt;li>&lt;strong>bgsave&lt;/strong> ：Redis 进程会 fork 出一个子进程，阻塞只会发生在 fork 阶段，之后持久化的操作则由子进程来完成。&lt;/li>
&lt;/ul>
&lt;h3 id="22-自动触发">2.2 自动触发&lt;/h3>
&lt;p>除了手动使用命令触发外，在某些场景下也会自动触发 Redis 的 RDB 机制：&lt;/p>
&lt;ul>
&lt;li>在 &lt;code>redis.conf&lt;/code> 中配置了 &lt;code>save m n&lt;/code> ，表示如果在 m 秒内存在了 n 次修改操作时，则自动触发 &lt;code>bgsave&lt;/code>;&lt;/li>
&lt;li>如果从节点执行全量复制操作，则主节点自动执行 &lt;code>bgsave&lt;/code>，并将生成的 RDB 文件发送给从节点；&lt;/li>
&lt;li>执行 &lt;code>debug reload&lt;/code> 命令重新加载 Redis 时，会触发 &lt;code>save&lt;/code> 操作；&lt;/li>
&lt;li>执行 &lt;code>shutdown&lt;/code> 命令时候，如果没有启用 AOF 持久化则默认采用 &lt;code>bgsave &lt;/code> 进行持久化。&lt;/li>
&lt;/ul>
&lt;h3 id="23-相关配置">2.3 相关配置&lt;/h3>
&lt;p>&lt;strong>1. 文件目录&lt;/strong>&lt;/p>
&lt;p>RDB 文件默认保存在 Redis 的工作目录下，默认文件名为 &lt;code>dump.rdb&lt;/code>，可以通过静态或动态方式修改：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>静态配置：通过修改 &lt;code>redis.conf&lt;/code> 中的工作目录 &lt;code>dir&lt;/code> 和数据库存储文件名 &lt;code>dbfilename&lt;/code> 两个配置；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>动态修改：通过在命令行中执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">config &lt;span class="nb">set&lt;/span> dir&lt;span class="o">{&lt;/span>newDir&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">config &lt;span class="nb">set&lt;/span> dbfilename&lt;span class="o">{&lt;/span>newFileName&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>2. 压缩算法&lt;/strong>&lt;/p>
&lt;p>Redis 默认采用 LZF 算法对生成的 RDB 文件做压缩处理， 这样可以减少占用空间和网络传输的数据量，但是压缩过程会耗费 CPU 的计算资源， 你可以按照实际情况，选择是否启用。可以通过修改 &lt;code>redis.conf&lt;/code> 中的 &lt;code>rdbcompression&lt;/code> 配置或使用以下命令来进行动态修改：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">config &lt;span class="nb">set&lt;/span> rdbcompression&lt;span class="o">{&lt;/span>yes&lt;span class="p">|&lt;/span>no&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>