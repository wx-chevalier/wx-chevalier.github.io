<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>01.数据操作 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</link>
      <atom:link href="https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/index.xml" rel="self" type="application/rss+xml" />
    <description>01.数据操作</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>01.数据操作</title>
      <link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/</link>
    </image>
    
    <item>
      <title>基础类型</title>
      <link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;基础数据类型&#34;&gt;基础数据类型&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;APPEND&lt;/td&gt;
&lt;td&gt;将值追加到指定 key 的值末尾，如果 key 不存在，则相当于增加操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BITCOUNT&lt;/td&gt;
&lt;td&gt;计算给定字符串中，被设置为 1 的 Bit 位的数量，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BITOP&lt;/td&gt;
&lt;td&gt;对一个或多个保存二进制位的字符串 key 进行位元操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DECR&lt;/td&gt;
&lt;td&gt;将 key 中储存的数字值减一。Key 不存在，则将值置 0，key 类型不正确返回一个错误&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DECRBY&lt;/td&gt;
&lt;td&gt;将 key 所储存的值减去指定数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;td&gt;返回 key 所关联的字符串值，如果 Key 储存的值不是字符串类型，返回一个错误，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GETBIT&lt;/td&gt;
&lt;td&gt;对 key 所储存的字符串值，获取指定偏移量上的位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GETRANGE&lt;/td&gt;
&lt;td&gt;返回 key 中字符串值的子字符串，字符串的截取范围由 start 和 end 两个偏移量决定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GETSET&lt;/td&gt;
&lt;td&gt;将给定 key 的值设为 value，并返回 key 的旧值。非字符串报错，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INCR&lt;/td&gt;
&lt;td&gt;将 key 中储存的数字值增一。不能转换为数字则报错，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INCRBY&lt;/td&gt;
&lt;td&gt;将 key 所储存的值加上指定增量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INCRBYFLOAT&lt;/td&gt;
&lt;td&gt;为 key 中所储存的值加上指定的浮点数增量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MGET&lt;/td&gt;
&lt;td&gt;返回所有(一个或多个)给定 key 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MSET&lt;/td&gt;
&lt;td&gt;同时设置一个或多个 key-value 对&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MSETNX&lt;/td&gt;
&lt;td&gt;同时设置一个或多个 key-value 对，若一个 key 已被占用，则全部的执行取消，&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PSETEX&lt;/td&gt;
&lt;td&gt;以毫秒为单位设置 key 的有效时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SET&lt;/td&gt;
&lt;td&gt;将字符串值 value 关联到 key&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SETBIT&lt;/td&gt;
&lt;td&gt;对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SETEX&lt;/td&gt;
&lt;td&gt;将值 value 关联到 key，并将 key 的有效时间(秒)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SETNX&lt;/td&gt;
&lt;td&gt;当 key 未被使用时，设置为指定值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SETRANGE&lt;/td&gt;
&lt;td&gt;用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;STRLEN&lt;/td&gt;
&lt;td&gt;返回 key 所储存的字符串值的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>集合类型</title>
      <link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E9%9B%86%E5%90%88%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;datatypes&#34;&gt;DataTypes&lt;/h1&gt;
&lt;h1 id=&#34;hash&#34;&gt;Hash&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;HDEL&lt;/td&gt;
&lt;td&gt;删除哈希表 key 中的一个或多个指定域，不存在的域将被忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HEXISTS&lt;/td&gt;
&lt;td&gt;查看哈希表 key 中，给定域 field 是否存在&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HGET&lt;/td&gt;
&lt;td&gt;返回哈希表 key 中给定域 field 的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HGETALL&lt;/td&gt;
&lt;td&gt;返回哈希表 key 中，所有的域和值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HINCRBY&lt;/td&gt;
&lt;td&gt;为哈希表 key 中的域 field 的值加上指定增量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HINCRBYFLOAT&lt;/td&gt;
&lt;td&gt;为哈希表 key 中的域 field 加上指定的浮点数增量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HKEYS&lt;/td&gt;
&lt;td&gt;返回哈希表 key 中的所有域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HLEN&lt;/td&gt;
&lt;td&gt;返回哈希表 key 中域的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HMGET&lt;/td&gt;
&lt;td&gt;返回哈希表 key 中，一个或多个给定域的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HMSET&lt;/td&gt;
&lt;td&gt;同时将多个 field-value (域-值)对设置到哈希表 key 中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HSET&lt;/td&gt;
&lt;td&gt;将哈希表 key 中的域 field 的值设为 value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HSETNX&lt;/td&gt;
&lt;td&gt;当且仅当域 field 不存在时，将哈希表 key 中的域 field 的值设置为 value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HVALS&lt;/td&gt;
&lt;td&gt;返回哈希表 key 中所有域的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HSCAN&lt;/td&gt;
&lt;td&gt;增量迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;list&#34;&gt;List&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BLPOP&lt;/td&gt;
&lt;td&gt;它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BRPOP&lt;/td&gt;
&lt;td&gt;与 BLPOP 同义，弹出位置不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BRPOPLPUSH&lt;/td&gt;
&lt;td&gt;当列表 source 为空时，BRPOPLPUSH 命令将阻塞连接，直到等待超时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LINDEX&lt;/td&gt;
&lt;td&gt;返回列表 key 中，下标为 index 的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LINSERT&lt;/td&gt;
&lt;td&gt;将值 value 插入到列表 key 当中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LLEN&lt;/td&gt;
&lt;td&gt;返回列表 key 的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LPOP&lt;/td&gt;
&lt;td&gt;移除并返回列表 key 的头元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LPUSH&lt;/td&gt;
&lt;td&gt;将一个或多个值 value 插入到列表 key 的表头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LPUSHX&lt;/td&gt;
&lt;td&gt;将值 value 插入到列表 key 的表头，当且仅当 key 存在并且是一个列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LRANGE&lt;/td&gt;
&lt;td&gt;返回列表 key 中指定区间内的元素，区间以偏移量 start 和 stop 指定&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LREM&lt;/td&gt;
&lt;td&gt;根据参数 count 的值，移除列表中与参数 value 相等的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LSET&lt;/td&gt;
&lt;td&gt;将列表 key 下标为 index 的元素的值设置为 value&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LTRIM&lt;/td&gt;
&lt;td&gt;对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPOP&lt;/td&gt;
&lt;td&gt;移除并返回列表 key 的尾元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPOPLPUSH&lt;/td&gt;
&lt;td&gt;命令 RPOPLPUSH 在一个原子时间内，执行两个动作：1、将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。2、将 source 弹出的元素插入到列表 destination，作为 destination 列表的的头元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPUSH&lt;/td&gt;
&lt;td&gt;将一个或多个值 value 插入到列表 key 的表尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RPUSHX&lt;/td&gt;
&lt;td&gt;将值 value 插入到列表 key 的表尾，当且仅当 key 存在并且是一个列表&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;sortedlist&#34;&gt;SortedList&lt;/h2&gt;
&lt;h1 id=&#34;set&#34;&gt;Set&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SADD&lt;/td&gt;
&lt;td&gt;将一个或多个 member 元素加入到集合 key 当中，已经存在于集合的 member 元素将被忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SCARD&lt;/td&gt;
&lt;td&gt;返回集合 key 的集合中元素的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SDIFF&lt;/td&gt;
&lt;td&gt;返回一个集合的全部成员，该集合是所有给定集合之间的差集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SDIFFSTORE&lt;/td&gt;
&lt;td&gt;这个命令的作用和 SDIFF 类似，但它将结果保存到新集合，而不是简单地返回结果集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SINTER&lt;/td&gt;
&lt;td&gt;返回一个集合的全部成员，该集合是所有给定集合的交集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SINTERSTORE&lt;/td&gt;
&lt;td&gt;与 SINTER 类似，不过可以指定保存到新集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SISMEMBER&lt;/td&gt;
&lt;td&gt;判断 member 元素是否集合 key 的成员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMEMBERS&lt;/td&gt;
&lt;td&gt;返回集合 key 中的所有成员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SMOVE&lt;/td&gt;
&lt;td&gt;将 member 元素从一个集合移动到另一个集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SPOP&lt;/td&gt;
&lt;td&gt;移除并返回集合中的一个随机元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SRANDMEMBER&lt;/td&gt;
&lt;td&gt;仅仅返回随机元素，而不对集合进行任何改动，与 SPOP 的区别在于不移除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SREM&lt;/td&gt;
&lt;td&gt;移除集合 key 中的一个或多个 member 元素，不存在的 member 元素会被忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUNION&lt;/td&gt;
&lt;td&gt;返回一个集合的全部成员，该集合是所有给定集合的并集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SUNIONSTORE&lt;/td&gt;
&lt;td&gt;与 SUNION 类似，不过可以指定保存到新集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSCAN&lt;/td&gt;
&lt;td&gt;增量迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;sortedset&#34;&gt;SortedSet&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ZADD&lt;/td&gt;
&lt;td&gt;将一个或多个 member 元素及其 score 值加入到有序集 key 当中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZCARD&lt;/td&gt;
&lt;td&gt;返回有序集 key 的基数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZCOUNT&lt;/td&gt;
&lt;td&gt;返回有序集 key 中，score 值在 min 和 max 之间(包括 score 值等于 min 或 max )的成员的数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZINCRBY&lt;/td&gt;
&lt;td&gt;为有序集 key 的成员 member 的 score 值加上指定增量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZRANGE&lt;/td&gt;
&lt;td&gt;返回有序集 key 中，指定区间内的成员(小到大排列)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZRANGEBYSCORE&lt;/td&gt;
&lt;td&gt;返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZRANK&lt;/td&gt;
&lt;td&gt;返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZREM&lt;/td&gt;
&lt;td&gt;移除有序集 key 中的一个或多个成员，不存在的成员将被忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZREMRANGEBYRANK&lt;/td&gt;
&lt;td&gt;移除有序集 key 中，指定排名(rank)区间内的所有成员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZREMRANGEBYSCORE&lt;/td&gt;
&lt;td&gt;移除有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZREVRANGE&lt;/td&gt;
&lt;td&gt;返回有序集 key 中，指定区间内的成员，成员位置按 score 大到小排列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZREVRANGEBYSCORE&lt;/td&gt;
&lt;td&gt;返回有序集 key 中，score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。成员按 score 值递减(从大到小)排列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZREVRANK&lt;/td&gt;
&lt;td&gt;返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZSCORE&lt;/td&gt;
&lt;td&gt;返回有序集 key 中，成员 member 的 score 值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZUNIONSTORE&lt;/td&gt;
&lt;td&gt;计算给定的一个或多个有序集的并集，其中给定 key 的数量必须以 numkeys 参数指定，并将该并集(结果集)储存到新集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZINTERSTORE&lt;/td&gt;
&lt;td&gt;计算给定的一个或多个有序集的交集，其中给定 key 的数量必须以 numkeys 参数指定，并将该交集(结果集)储存到新集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZSCAN&lt;/td&gt;
&lt;td&gt;增量迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>键基础</title>
      <link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E9%94%AE%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E9%94%AE%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;h1 id=&#34;redis-键基础操作&#34;&gt;Redis 键基础操作&lt;/h1&gt;
&lt;h1 id=&#34;key--键基础&#34;&gt;Key | 键基础&lt;/h1&gt;
&lt;p&gt;Redis 的 key 是二进制安全的，也就是说你可以使用任何二进制的序列作为 key，从一个”foo”字符串到一个 JPEG 文件的内容都可以；空字符串也同样是一个有效的 key。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用非常长的 key 并不是好的主意，例如使用一个 1024 字节(bytes)长度的 key 就很烂，其不仅仅耗费内存，而且在数据集中查找这个 key 时也需要很高的比较成本。即使当前处理的任务是匹配存在的大值，采用哈希来处理(例如使用 SHA1) 会是一个更好的主意，特别是从内存和带宽的角度来看。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用很短的 key 通常也不是一个好主意。将”u1000flw”作为一个 key 几乎是毫无意义的，如果你可以将其替换成”user:1000:followers”，则它会更具可读性，而由此增加的空间与 key 对象和值对象使用的空间比起来微乎其微。当简短的 key 将明显的消耗一小部分内存，你的工作就是寻找到一个正确的平衡点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;尝试去坚持一个模式。例如使用”object-type:id”做为 key 就是一个好的想法，像”user:1000″。点或者虚线经常被用作多单词字段的连接符，例如”comment:1234-reply.to”或”comment-1234:reply-to”。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;key 最大可分配 512MB。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;key-查询&#34;&gt;Key 查询&lt;/h1&gt;
&lt;h2 id=&#34;遍历&#34;&gt;遍历&lt;/h2&gt;
&lt;p&gt;有一些命令并未定义特定类型，但是在与 key 进行交互时是很有用的，因为它们没有定义特定的类型，所以它们可以用于任何类型的 key。例如，&lt;code&gt;EXISTS&lt;/code&gt; 命令返回 1 或者 0 来表示一个给定的 key 在数据库中是否存在，&lt;code&gt;DEL&lt;/code&gt; 命令将删除一个 key 以及其关联的任何值。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; mykey hello
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; exists mykey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; del mykey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; exists mykey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; keys *
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;//查询所有的key值
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;从这个例子中可以看到，&lt;code&gt;DEL&lt;/code&gt; 命令返回 1 或者 0 取决于要删除的这个 key 是被删除了(当它存在时)还是没有(不存在给定名字的 key)。有很多与 key 相关的命令，但是上面介绍的这两个是与 &lt;code&gt;TYPE&lt;/code&gt; 命令结合使用的基本部分，&lt;code&gt;TYPE&lt;/code&gt; 将返回指定 key 所存储的值的类型。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; mykey x
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; mykey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;string
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; del mykey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; &lt;span class=&#34;nb&#34;&gt;type&lt;/span&gt; mykey
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;none
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;iteration&#34;&gt;Iteration&lt;/h2&gt;
&lt;p&gt;Keys are returned in incremental iterations with constant time guarantee for each iteration. A cursor (an integer is this case) is returned when the iterations is initialized and an updated cursor is returned and every iteration. An iteration cycle begins when the cursor is set to 0 in the SCAN request, and terminates when the cursor returned by the server is 0. Due to nuances of Redis architecture and the cursor algorithm implementation here are some peculiarities of this approach:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A full iteration always retrieves all the elements that were present in the collection from the start to the end of a full iteration.&lt;/li&gt;
&lt;li&gt;A full iteration never returns any element that was NOT present in the collection from the start to the end of a full iteration.&lt;/li&gt;
&lt;li&gt;A given element may be returned multiple times. It is up to the application to handle the case of duplicated elements&lt;/li&gt;
&lt;li&gt;Elements that were not constantly present in the collection during a full iteration, may be returned or not: it is undefined.&lt;/li&gt;
&lt;li&gt;A number of elements returned during each count varies and can be 0 too. However, the iteration is not complete until the server returns the cursor value of 0.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;COUNT&lt;/strong&gt; option can be used to limit the number of elements returned in each iteration. The default value is 10. However, it is considered only a suggestion and not enforced in all cases. COUNT value can be changed during each iteration call.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;MATCH&lt;/strong&gt; option allows specifying of patterns like the KEYS command allows.&lt;/li&gt;
&lt;li&gt;The cursor implementation is completely stateless on the server side. That allows (potentially) infinite iterations to start in parallel. Also, there are no requirements of ensuring that an iteration continues up to the end and can be stopped anytime.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;key-操作&#34;&gt;Key 操作&lt;/h1&gt;
&lt;h2 id=&#34;删除-key&#34;&gt;删除 Key&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://redis.io/commands/del&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DEL 命令&lt;/a&gt; 在删除单个集合类型的 Key 时，命令的时间复杂度是 O(M)，其中 M 是集合类型 Key 包含的元素个数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;DEL key
Time complexity: O(N) where N is the number of keys that
will be removed. When a key to remove holds a value other than a string,
the individual complexity for this key is O(M) where M is the number of
elements in the list, set, sorted set or hash. Removing a single key
that holds a string value is O(1).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;key-expire&#34;&gt;Key Expire&lt;/h1&gt;
&lt;h2 id=&#34;key-的存活时间&#34;&gt;Key 的存活时间&lt;/h2&gt;
&lt;p&gt;在继续介绍复杂的数据结构之前，我们需要讨论另外一个与值类型无关的特性，它叫做 &lt;strong&gt;Redis 的过期&lt;/strong&gt;。基本上，你可以为一个 key 设置一个过期时间，也就是 key 的存活的期限。当达到存活的时间，这个 key 将会自动销毁，它跟用户在一个 key 上调用 &lt;code&gt;DEL&lt;/code&gt; 命令是完全一样的。&lt;/p&gt;
&lt;p&gt;几个关于 Redis 过期的快捷信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它们可以被设置为秒或者毫秒。&lt;/li&gt;
&lt;li&gt;过期时间的精确度始终为 1 毫秒。&lt;/li&gt;
&lt;li&gt;过期的信息会复制和保存在硬盘上，当你的 Redis 服务停止后，时间也是在走的(意思是 Redis 保存的是 key 的过期日期)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;过期的设置很简单：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; key some-value
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;OK
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; expire key &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;integer&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; get key &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;immediately&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;some-value&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;gt; get key &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;after some &lt;span class=&#34;nb&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;nil&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这个 key 在两个&lt;code&gt;GET&lt;/code&gt;调用中间消失了，由于第二个调用延迟了 5 秒以上。在这个例子中使用&lt;code&gt;EXPIRE&lt;/code&gt; 来进行过期设置(它同样可以用来为一个已经设置过期的 key 设置一个不同的过期时间，就像 &lt;code&gt;PERSIST&lt;/code&gt; 可以用来移除一个过期而使这个 key 永久的保存)。然而，我们同样可以使用其他的 Redis 命令来创建带过期的 key。例如使用 &lt;code&gt;SET&lt;/code&gt; 的选项：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;gt; set key 100 ex 10
OK
&amp;gt; ttl key
(integer) 9
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上的例子，是将一个 key 设置为一个字符串的值 100，并且过期时间设置为 10 秒。接下来的 TTL 命令是检查这个 key 剩余的存活时间。如果需要采用毫秒来设置和检查过期时间，请查看 PEXPIRE 和 PTTL 命令，以及 SET 选项的完整列表。&lt;/p&gt;
&lt;p&gt;不过，要注意一点，随着 Redis 中数据量的增加，因为处理过期的 Key 的时间复杂度是 O(N)。&lt;/p&gt;
&lt;h2 id=&#34;lru-缓存&#34;&gt;LRU 缓存&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>其他类型</title>
      <link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E5%85%B6%E4%BB%96%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;geo-地理与位置信息&#34;&gt;Geo 地理与位置信息&lt;/h1&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://cristian.regolo.cc/2015/07/07/introducing-the-geo-api-in-redis.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;introducing-the-geo-api-in-redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>事务与管道</title>
      <link>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E7%AE%A1%E9%81%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/database-notes/03.%E9%94%AE%E5%80%BC%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93/redis/01.%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C/%E4%BA%8B%E5%8A%A1%E4%B8%8E%E7%AE%A1%E9%81%93/</guid>
      <description>&lt;h1 id=&#34;事务与管道&#34;&gt;事务与管道&lt;/h1&gt;
&lt;h1 id=&#34;transaction--事务&#34;&gt;Transaction | 事务&lt;/h1&gt;
&lt;h1 id=&#34;pipeline--管道&#34;&gt;Pipeline | 管道&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
