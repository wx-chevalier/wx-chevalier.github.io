<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>图片优化 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</link><atom:link href="https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/index.xml" rel="self" type="application/rss+xml"/><description>图片优化</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>图片优化</title><link>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</link></image><item><title>Webp</title><link>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/webp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/webp/</guid><description>&lt;h1 id="webp">Webp&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.jianshu.com/p/849058bc4855" target="_blank" rel="noopener">https://www.jianshu.com/p/849058bc4855&lt;/a> 浅谈Webp&lt;/li>
&lt;/ul></description></item><item><title>视频优化</title><link>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E8%A7%86%E9%A2%91%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E8%A7%86%E9%A2%91%E4%BC%98%E5%8C%96/</guid><description>&lt;h1 id="视频优化">视频优化&lt;/h1>
&lt;h1 id="gif">GIF&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">video&lt;/span> &lt;span class="na">autoplay&lt;/span> &lt;span class="na">loop&lt;/span> &lt;span class="na">muted&lt;/span> &lt;span class="na">playsinline&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">source&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;dancing-baby.webm&amp;#34;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;video/webm&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">source&lt;/span> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;dancing-baby.mp4&amp;#34;&lt;/span> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;video/mp4&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Your browser doesn&amp;#39;t support this embedded video.&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">video&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Using the autoplay, loop, and muted attributes gives us the same behavior that we expect from a GIF. While serving a video is not as straightforward as serving a GIF, the file size savings can be tremendous. The following video is 103 KB in size, compared to 4.1 MB for the GIF that I converted it from. That&amp;rsquo;s a size reduction of over 97%.&lt;/p>
&lt;p>To quickly convert a GIF into a video, there are plenty of websites that let you do a one-off conversion.To convert a GIF into a video file on the command line, I use FFmpeg.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">$&lt;/span> &lt;span class="nx">ffmpeg&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="nx">gif&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="nx">dancing&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">baby&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">gif&lt;/span> &lt;span class="nx">dancing&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nx">baby&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">mp4&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>图片格式与转换</title><link>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E4%B8%8E%E8%BD%AC%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8F%E4%B8%8E%E8%BD%AC%E6%8D%A2/</guid><description>&lt;h1 id="图片格式与转换">图片格式与转换&lt;/h1>
&lt;p>图片格式繁多，不同的浏览器对图片支持也略有不同，概览表格可以参见MDN 图像文件类型与格式指南。为了最大限度的通用性，网站通常只考虑以下三种图片: png, jpg, gif（未来如果 webp 能大一统基本不做考虑了）。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>png: 优点：无损压缩，质量最好，支持透明背景。缺点：对于色彩丰富的图片容量压缩效果差。推荐场景：有透明背景、颜色简单、对细节质量要求较高的场景。如结构图（架构图、流程图、思维导图等等）、Logo、桌面截图、二维码、条码等等。这些场景绝大多数情况下用 png 会比 jpg 容量更小。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>jpg: 优点：采用有损压缩算法，压缩率较高，支持渐进式加载。缺点：图像细节损失，对于文字可能边缘模糊看不清，不支持透明背景。推荐场景：照片、背景图等总体分辨率较大，对细节要求不高，只关注总体风貌的图片。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>gif: 优点：采用伪色，容量最小，加载最快，这三种格式中唯一支持动图。缺点：色彩细节丢失严重。推荐场景：网站 Logo 图，动图等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="webp">webp&lt;/h1>
&lt;h2 id="利用阿里云-cdn-边缘脚本实现自适应转换-webp">利用阿里云 CDN 边缘脚本实现自适应转换 webp&lt;/h2>
&lt;p>理论上完全可以在浏览器端添加一个 js，自动判断浏览器是否支持 webp，决定访问 webp 图片或者原图。不过这样在本地的工作量就太大了，每次添加图片还得多转换一个 webp 图片，本地的工作量太大了。我们可以利用阿里云 OSS 的图片转换功能，以及 CDN 的边缘脚本实现浏览器自动使用 webp 图片的功能，本地不作任何处理，不影响原来的开发流程。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">m1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">and&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">$http_accept&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">match_re&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">$http_accept&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">.*&lt;/span>&lt;span class="n">image&lt;/span>&lt;span class="err">\&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">webp&lt;/span>&lt;span class="o">.*&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">m2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">match_re&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">$uri&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">.+(.&lt;/span>&lt;span class="na">JPEG&lt;/span>&lt;span class="o">|.&lt;/span>&lt;span class="na">jpeg&lt;/span>&lt;span class="o">|.&lt;/span>&lt;span class="na">JPG&lt;/span>&lt;span class="o">|.&lt;/span>&lt;span class="na">jpg&lt;/span>&lt;span class="o">|.&lt;/span>&lt;span class="na">PNG&lt;/span>&lt;span class="o">|.&lt;/span>&lt;span class="na">png&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">$&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">uri_is_posts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">match_re&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">$uri&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">^/&lt;/span>&lt;span class="n">posts&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="n">and&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">m1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">m2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="n">uri_is_posts&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rewrite&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">concat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">$uri&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">webp_watermark&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">rewrite&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">concat&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">$uri&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="n">webp&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="err">&amp;#39;&lt;/span>&lt;span class="k">break&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>图片压缩</title><link>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E5%8E%8B%E7%BC%A9/</guid><description>&lt;h1 id="图片压缩">图片压缩&lt;/h1>
&lt;p>对于网页图片用户往往并不在乎太高的质量，更关心的是加载速度，因此合理化压缩图片可以带来更好的用户体验。&lt;/p>
&lt;p>在线压缩推荐 tinypng(&lt;a href="https://tinypng.com/" target="_blank" rel="noopener">https://tinypng.com/&lt;/a>)，同时支持 png 和 jpg 图片，使用简单，压缩质量好，建议图片放到版本库之前都先用 tinypng 压缩一遍。&lt;/p>
&lt;p>如果本地需要批量压缩可以使用命令行工具，这里推荐下 pngquant(只支持 png)和 imgopt(同时支持 png 和 jpg)，他们都可以很方便的在脚本中进行调用，进行快速批量化的图片压缩，注意合理设置一下量化质量，可以达到更好的压缩效果。&lt;/p></description></item><item><title>图片优化</title><link>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-series/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/%E5%9B%BE%E7%89%87%E4%BC%98%E5%8C%96/</guid><description>&lt;h1 id="图片优化">图片优化&lt;/h1>
&lt;h1 id="jpeg">JPEG&lt;/h1>
&lt;h1 id="webp">WebP&lt;/h1>
&lt;h2 id="image-delivery">Image Delivery&lt;/h2>
&lt;p>图片是网站的不可或缺的部分，其能够大大提升网站的表现力与视觉效果，而目前&lt;a href="http://httparchive.org/interesting.php?a=All&amp;amp;l=Jul%2015%202016" target="_blank" rel="noopener">平均大小为 2406KB 的网页中就有 1535KB 是图片资源&lt;/a>，可见图片占据了静态资源多么大的一个比重，这也是我们需要重点优化的部分。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://cdn.css-tricks.com/wp-content/uploads/2016/08/average-bytes-per-page-chart.jpg" alt="img" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h3 id="webp-1">WebP&lt;/h3>
&lt;p>&lt;a href="https://developers.google.com/speed/webp/" target="_blank" rel="noopener">WebP&lt;/a> 是面向现代网页的高压缩低损失的图片格式，通常会比 JPEG 小 25%左右。然后 WebP 目前被很多人忽视，也不常使用。截止到本文撰写的时候，WebP 目前只能够在&lt;a href="http://caniuse.com/#feat=webp" target="_blank" rel="noopener">Chrome, Opera and Android&lt;/a> (大概占用户数的 50%)这些浏览器中使用，不过我们还是有办法以 JPG/PNG 来弥补部分浏览器中不支持 WebP 的缺憾。&lt;/p>
&lt;h3 id="picture标签">&lt;code>picture&lt;/code>标签&lt;/h3>
&lt;p>使用 picture 标签可以方便的对于 WebP 格式不支持的情况下完成替换:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;picture&amp;gt;
&amp;lt;source type=&amp;#34;image/webp&amp;#34; srcset=&amp;#34;image-l.webp&amp;#34; media=&amp;#34;(min-width: 640px)&amp;#34;&amp;gt;
&amp;lt;source type=&amp;#34;image/webp&amp;#34; srcset=&amp;#34;image-m.webp&amp;#34; media=&amp;#34;(min-width: 320px)&amp;#34;&amp;gt;
&amp;lt;source type=&amp;#34;image/webp&amp;#34; srcset=&amp;#34;image-s.webp&amp;#34;&amp;gt;
&amp;lt;source srcset=&amp;#34;image-l.jpg&amp;#34; media=&amp;#34;(min-width: 640px)&amp;#34;&amp;gt;
&amp;lt;source srcset=&amp;#34;image-m.jpg&amp;#34; media=&amp;#34;(min-width: 320px)&amp;#34;&amp;gt;
&amp;lt;source srcset=&amp;#34;image-s.jpg&amp;#34;&amp;gt;
&amp;lt;img alt=&amp;#34;Description of the image&amp;#34; src=&amp;#34;image-l.jpg&amp;#34;&amp;gt;
&amp;lt;/picture&amp;gt;
&lt;/code>&lt;/pre>&lt;p>这里我们使用了 &lt;a href="https://github.com/scottjehl/picturefill" target="_blank" rel="noopener">picturefill by Scott Jehl&lt;/a>作为 Polyfill 库来保证低版本的浏览器中能够支持 picture 标签，并且保证跨浏览器的功能一致性。并且我们还使用了 img 标签来保证那些不支持 picture 的浏览器能够正常工作。&lt;/p>
&lt;h3 id="图片多格式生成">图片多格式生成&lt;/h3>
&lt;p>现在我们已经可以通过设置不同的图片尺寸、格式来保证图片的分发优化，不过我们总不希望每次要用一张图片的时候就去生成 6 个不同的尺寸/实例。我们希望有一种抽象的方法可以帮我们自动完成这一步，为我们自动生成不同的格式/尺寸，然后自动插入合适的 picture 元素，在我们的静态网站生成器中是这么做的：&lt;/p>
&lt;ul>
&lt;li>首先是要&lt;a href="https://github.com/mahnunchik/gulp-responsive" target="_blank" rel="noopener">gulp responsive&lt;/a>来生成不同尺寸的图片，该插件同样会输出 WebP 格式的图片&lt;/li>
&lt;li>压缩生成好的图片&lt;/li>
&lt;li>用户只需要在 MarkDown 中编写&lt;code>![Description of the image](image.jpg)&lt;/code>即可&lt;/li>
&lt;li>我们自定义的 MarkDown 渲染引擎会在处理过程中自动使用 picture 元素替换这些 img 标签&lt;/li>
&lt;/ul>
&lt;h2 id="svg-animation">SVG Animation&lt;/h2>
&lt;p>我们的网站中也存在着很多的 Icon 以及动画性质图片，这里我们是选择 SVG 作为 Icon 与 Animation 的格式，主要考虑有下:&lt;/p>
&lt;ul>
&lt;li>SVG 是矢量表示，往往比位图文件更小&lt;/li>
&lt;li>SVG 自带响应式功效，能够根据容器大小进行自动缩放，因此我们不需要再为了 picture 元素生成不同尺寸的图片&lt;/li>
&lt;li>最重要的一点是我们可以使用 CSS 去改变其样式或者添加动画效果，关于这一点可以参考&lt;a href="https://codepen.io/voorhoede/pen/qNgWod/" target="_blank" rel="noopener">CodePen 上的这个演示&lt;/a>。&lt;/li>
&lt;/ul></description></item></channel></rss>