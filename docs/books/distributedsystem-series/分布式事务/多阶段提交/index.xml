<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>多阶段提交 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <atom:link href="https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/index.xml" rel="self" type="application/rss+xml" />
    <description>多阶段提交</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>多阶段提交</title>
      <link>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
    </image>
    
    <item>
      <title>XA 事务</title>
      <link>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/xa-%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/xa-%E4%BA%8B%E5%8A%A1/</guid>
      <description>&lt;h1 id=&#34;xa-事务&#34;&gt;X/A 事务&lt;/h1&gt;
&lt;p&gt;X/Open XA（扩展架构（eXtended Architecture）的缩写）是跨异构技术实现两阶段提交的标准，由 X/Open 国际联盟提出的 X/Open Distributed Transaction Processing（DTP）模型，简称 XA 协议。它于 1991 年推出并得到了广泛的实现：许多传统关系数据库（包括 PostgreSQL，MySQL，DB2，SQL Server 和 Oracle）和消息代理（包括 ActiveMQ，HornetQ，MSMQ 和 IBM MQ）都支持 XA。XA 不是一个网络协议，它只是一个用来与事务协调者连接的 C API。其他语言也有这种 API 的绑定；例如在 Java EE 应用的世界中，XA 事务是使用 Java 事务 API（JTA, Java Transaction API）实现的，而许多使用 Java 数据库连接（JDBC, Java Database Connectivity）的数据库驱动，以及许多使用 Java 消息服务（JMS）API 的消息代理都支持 Java 事务 API（JTA）。&lt;/p&gt;
&lt;p&gt;XA 假定你的应用使用网络驱动或客户端库来与参与者进行通信（数据库或消息服务）。如果驱动支持 XA，则意味着它会调用 XA API 以查明操作是否为分布式事务的一部分；如果是，则将必要的信息发往数据库服务器。驱动还会向协调者暴露回调接口，协调者可以通过回调来要求参与者准备，提交或中止。事务协调者需要实现 XA API。标准没有指明应该如何实现，但实际上协调者通常只是一个库，被加载到发起事务的应用的同一个进程中（而不是单独的服务）。它在事务中个跟踪所有的参与者，并在要求它们准备之后收集参与者的响应（通过驱动回调），并使用本地磁盘上的日志记录每次事务的决定（提交/中止）。&lt;/p&gt;
&lt;p&gt;如果应用进程崩溃，或者运行应用的机器报销了，协调者也随之往生极乐。然后任何带有准备了但未提交事务的参与者都会在疑虑中卡死。由于协调程序的日志位于应用服务器的本地磁盘上，因此必须重启该服务器，且协调程序库必须读取日志以恢复每个事务的提交/中止结果。只有这样，协调者才能使用数据库驱动的 XA 回调来要求参与者提交或中止。数据库服务器不能直接联系协调者，因为所有通信都必须通过客户端库。&lt;/p&gt;
&lt;p&gt;X/Open 组织(即现在的 Open Group）定义了分布式事务处理模型。X/Open DTP 模型（1994）包括应用程序（AP）、事务管理器（TM）、资源管理器（RM）、通信资源管理器（CRM）四部分。一般，常见的事务管理器（TM）是交易中间 件，常见的资源管理器（RM）是数据库，常见的通信资源管理器（CRM）是消息中间件。通常把一个数据库内部的事务处理，如对多个表的操作，作为本地事务看待。数据库的事务处理对象是本地事务，而分布式事务处理的对象是全局事务。所谓全局事务，是指分布式事务处理环境中，多个数据库可能需要共同完成一个工作，这个工作即是一个全局事务，例如，一个事务中可能更新几个不同的数据库。对数据库的操作发生在系统的各处但必须全部被提交或回滚。此时一个数据库对自己内部所做操作的提交不仅依赖本身操作是否成功，还要依赖与全局事务相关的其 它数据库的操作是否成功，如果任一数据库的任一操作失败，则参与此事务的所有数据库所做的所有操作都必须回滚。一般情况下，某一数据库无法知道其它数据库在做什么，因此，在一个 DTP 环境中，交易中间件是必需的，由它通知和协调相关数据库的提交或回滚。而 一个数据库只将其自己所做的操作(可恢复)影射到全局事务中。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://pic.imgdb.cn/item/61f253672ab3f51d91a24212.jpg&#34; alt=&#34;DTP 模型图&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;XA 就是 X/Open DTP 定义的交易中间件与数据库之间的接口规范(即接口函数)，交易中间件用它来通知数据库事务的开始、结束以及提交、回滚等。XA 接口函数由数据库厂商提供。二阶提交协议和三阶提交协议就是根据这一思想衍生出来的。可以说二阶段提交其实就是实现 XA 分布式事务的关键，下面分别来看看 XA 事务成功和失败的模型图：&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://pic.imgdb.cn/item/61f2538b2ab3f51d91a26a5c.jpg&#34; alt=&#34;二阶段成功&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://pic.imgdb.cn/item/61f2539d2ab3f51d91a282a6.jpg&#34; alt=&#34;二阶段失败&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&#34;xa-规范的限制&#34;&gt;XA 规范的限制&lt;/h1&gt;
&lt;p&gt;XA 事务解决了保持多个参与者（数据系统）相互一致的现实的重要问题，但正如我们所看到的那样，它也引入了严重的运维问题。特别来讲，这里的核心认识是：事务协调者本身就是一种数据库（存储了事务的结果），因此需要像其他重要数据库一样小心地打交道：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果协调者没有复制，而是只在单台机器上运行，那么它是整个系统的失效单点（因为它的失效会导致其他应用服务器阻塞在存疑事务持有的锁上）。令人惊讶的是，许多协调者实现默认情况下并不是高可用的，或者只有基本的复制支持。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;许多服务器端应用都是使用无状态模式开发的（受 HTTP 的青睐），所有持久状态都存储在数据库中，因此具有应用服务器可随意按需添加删除的优点。但是，当协调者成为应用服务器的一部分时，它会改变部署的性质。突然间，协调者的日志成为持久系统状态的关键部分，与数据库本身一样重要，因为协调者日志是为了在崩溃后恢复存疑事务所必需的。这样的应用服务器不再是无状态的了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由于 XA 需要兼容各种数据系统，因此它必须是所有系统的最小公分母。例如，它不能检测不同系统间的死锁（因为这将需要一个标准协议来让系统交换每个事务正在等待的锁的信息），而且它无法与 SSI 协同工作，因为这需要一个跨系统定位冲突的协议。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于数据库内部的分布式事务（不是 XA），限制没有这么大，例如，分布式版本的 SSI 是可能的。然而仍然存在问题：2PC 成功提交一个事务需要所有参与者的响应。因此，如果系统的任何部分损坏，事务也会失败。因此，分布式事务又有**扩大失效（amplifying failures）**的趋势，这又与我们构建容错系统的目标背道而驰。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>二阶段提交</title>
      <link>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/%E4%BA%8C%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid>
      <description>&lt;h1 id=&#34;二阶段提交&#34;&gt;二阶段提交&lt;/h1&gt;
&lt;p&gt;事务原子性的目的是在多次写操作中途出错的情况下，提供一种简单的语义。事务的结果要么是成功提交，在这种情况下，事务的所有写入都是持久化的；要么是中止，在这种情况下，事务的所有写入都被回滚（即撤消或丢弃）。原子性可以防止失败的事务搅乱数据库，避免数据库陷入半成品结果和半更新状态。这对于多对象事务和维护次级索引的数据库尤其重要。每个辅助索引都是与主数据相分离的数据结构，因此，如果你修改了一些数据，则还需要在辅助索引中进行相应的更改。原子性确保二级索引与主数据保持一致（如果索引与主数据不一致，就没什么用了）。&lt;/p&gt;
&lt;p&gt;两阶段提交（Two-phase commit）是一种用于实现跨多个节点的原子事务提交的算法，即确保所有节点提交或所有节点中止。它是分布式数据库中的经典算法。2PC 在某些数据库内部使用，也以 XA 事务的形式对应用可用（例如 Java Transaction API 支持）或以 SOAP Web 服务的 WS-AtomicTransaction 形式提供给应用。下图说明了 2PC 的基本流程。2PC 中的提交/中止过程分为两个阶段（因此而得名），而不是单节点事务中的单个提交请求。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2020/02/17/3PiRBT.md.png&#34; alt=&#34;两阶段提交（2PC）的成功执行&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2PC 使用一个通常不会出现在单节点事务中的新组件：协调者（coordinator）（也称为事务管理器（transaction manager））。协调者通常在请求事务的相同应用进程中以库的形式实现（例如，嵌入在 Java EE 容器中），但也可以是单独的进程或服务。这种协调者的例子包括 Narayana，JOTM，BTM 或 MSDTC。正常情况下，2PC 事务以应用在多个数据库节点上读写数据开始。我们称这些数据库节点为参与者（participants）。当应用准备提交时，协调者开始阶段 1：它发送一个准备（prepare）请求到每个节点，询问它们是否能够提交。然后协调者会跟踪参与者的响应：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果所有参与者都回答“是”，表示它们已经准备好提交，那么协调者在阶段 2 发出提交（commit）请求，然后提交真正发生。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果任意一个参与者回复了“否”，则协调者在阶段 2 中向所有节点发送中止（abort）请求。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这个过程有点像西方传统婚姻仪式：司仪分别询问新娘和新郎是否要结婚，通常是从两方都收到“我愿意”的答复。收到两者的回复后，司仪宣布这对情侣成为夫妻：事务就提交了，这一幸福事实会广播至所有的参与者中。如果新娘与新郎之一没有回复”我愿意“，婚礼就会中止。&lt;/p&gt;
&lt;h1 id=&#34;系统承诺&#34;&gt;系统承诺&lt;/h1&gt;
&lt;p&gt;这个简短的描述可能并没有说清楚为什么两阶段提交保证了原子性，而跨多个节点的一阶段提交却没有。在两阶段提交的情况下，准备请求和提交请求当然也可以轻易丢失。2PC 又有什么不同呢？为了理解它的工作原理，我们必须更详细地分解这个过程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当应用想要启动一个分布式事务时，它向协调者请求一个事务 ID。此事务 ID 是全局唯一的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;应用在每个参与者上启动单节点事务，并在单节点事务上捎带上这个全局事务 ID。所有的读写都是在这些单节点事务中各自完成的。如果在这个阶段出现任何问题（例如，节点崩溃或请求超时），则协调者或任何参与者都可以中止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当应用准备提交时，协调者向所有参与者发送一个准备请求，并打上全局事务 ID 的标记。如果任意一个请求失败或超时，则协调者向所有参与者发送针对该事务 ID 的中止请求。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;参与者收到准备请求时，需要确保在任意情况下都的确可以提交事务。这包括将所有事务数据写入磁盘（出现故障，电源故障，或硬盘空间不足都不能是稍后拒绝提交的理由）以及检查是否存在任何冲突或违反约束。通过向协调者回答“是”，节点承诺，只要请求，这个事务一定可以不出差错地提交。换句话说，参与者放弃了中止事务的权利，但没有实际提交。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当协调者收到所有准备请求的答复时，会就提交或中止事务作出明确的决定（只有在所有参与者投赞成票的情况下才会提交）。协调者必须把这个决定写到磁盘上的事务日志中，如果它随后就崩溃，恢复后也能知道自己所做的决定。这被称为提交点（commit point）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一旦协调者的决定落盘，提交或放弃请求会发送给所有参与者。如果这个请求失败或超时，协调者必须永远保持重试，直到成功为止。没有回头路：如果已经做出决定，不管需要多少次重试它都必须被执行。如果参与者在此期间崩溃，事务将在其恢复后提交，由于参与者投了赞成，因此恢复后它不能拒绝提交。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，该协议包含两个关键的“不归路”点：当参与者投票“是”时，它承诺它稍后肯定能够提交（尽管协调者可能仍然选择放弃）。一旦协调者做出决定，这一决定是不可撤销的。这些承诺保证了 2PC 的原子性。（单节点原子提交将这两个事件混为一谈：将提交记录写入事务日志。）&lt;/p&gt;
&lt;h1 id=&#34;协调者失效&#34;&gt;协调者失效&lt;/h1&gt;
&lt;p&gt;我们已经讨论了在 2PC 期间，如果参与者之一或网络发生故障时会发生什么情况：如果任何一个准备请求失败或者超时，协调者就会中止事务。如果任何提交或中止请求失败，协调者将无条件重试。但是如果协调者崩溃，会发生什么情况就不太清楚了。如果协调者在发送准备请求之前失败，参与者可以安全地中止事务。但是，一旦参与者收到了准备请求并投了“是”，就不能再单方面放弃，必须等待协调者回答事务是否已经提交或中止。如果此时协调者崩溃或网络出现故障，参与者什么也做不了只能等待。参与者的这种事务状态称为存疑（in doubt）的或不确定（uncertain）的。&lt;/p&gt;
&lt;p&gt;如下图所示，在这个特定的例子中，协调者实际上决定提交，数据库 2 收到提交请求。但是，协调者在将提交请求发送到数据库 1 之前发生崩溃，因此数据库 1 不知道是否提交或中止。即使超时在这里也没有帮助：如果数据库 1 在超时后单方面中止，它将最终与执行提交的数据库 2 不一致。同样，单方面提交也是不安全的，因为另一个参与者可能已经中止了。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://s2.ax1x.com/2020/02/17/3iN28J.md.png&#34; alt=&#34;参与者投赞成票后，协调者崩溃。数据库1不知道是否提交或中止&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;没有协调者的消息，参与者无法知道是提交还是放弃。原则上参与者可以相互沟通，找出每个参与者是如何投票的，并达成一致，但这不是 2PC 协议的一部分。可以完成 2PC 的唯一方法是等待协调者恢复。这就是为什么协调者必须在向参与者发送提交或中止请求之前，将其提交或中止决定写入磁盘上的事务日志：协调者恢复后，通过读取其事务日志来确定所有存疑事务的状态。任何在协调者日志中没有提交记录的事务都会中止。因此，2PC 的提交点归结为协调者上的常规单节点原子提交。&lt;/p&gt;
&lt;h2 id=&#34;怀疑时持有锁&#34;&gt;怀疑时持有锁&lt;/h2&gt;
&lt;p&gt;为什么我们这么关心存疑事务？系统的其他部分就不能继续正常工作，无视那些终将被清理的存疑事务吗？问题在于锁（locking），正如在读已提交中所讨论的那样，数据库事务通常获取待修改的行上的行级排他锁，以防止脏写。此外，如果要使用可序列化的隔离等级，则使用两阶段锁定的数据库也必须为事务所读取的行加上共享锁。&lt;/p&gt;
&lt;p&gt;在事务提交或中止之前，数据库不能释放这些锁，因此，在使用两阶段提交时，事务必须在整个存疑期间持有这些锁。如果协调者已经崩溃，需要 20 分钟才能重启，那么这些锁将会被持有 20 分钟。如果协调者的日志由于某种原因彻底丢失，这些锁将被永久持有，或至少在管理员手动解决该情况之前。&lt;/p&gt;
&lt;p&gt;当这些锁被持有时，其他事务不能修改这些行。根据数据库的不同，其他事务甚至可能因为读取这些行而被阻塞。因此，其他事务没法儿简单地继续它们的业务了，如果它们要访问同样的数据，就会被阻塞。这可能会导致应用大面积进入不可用状态，直到存疑事务被解决。&lt;/p&gt;
&lt;h2 id=&#34;从协调者故障中恢复&#34;&gt;从协调者故障中恢复&lt;/h2&gt;
&lt;p&gt;理论上，如果协调者崩溃并重新启动，它应该干净地从日志中恢复其状态，并解决任何存疑事务。然而在实践中，孤立（orphaned）的存疑事务确实会出现，即无论出于何种理由，协调者无法确定事务的结果（例如事务日志已经由于软件错误丢失或损坏）。这些事务无法自动解决，所以它们永远待在数据库中，持有锁并阻塞其他事务。即使重启数据库服务器也无法解决这个问题，因为在 2PC 的正确实现中，即使重启也必须保留存疑事务的锁（否则就会冒有违反原子性保证的风险）。这是一种棘手的情况。&lt;/p&gt;
&lt;p&gt;唯一的出路是让管理员手动决定提交还是回滚事务。管理员必须检查每个存疑事务的参与者，确定是否有任何参与者已经提交或中止，然后将相同的结果应用于其他参与者。解决这个问题潜在地需要大量的人力，并且可能发生在严重的生产中断期间（不然为什么协调者处于这种糟糕的状态），并很可能要在巨大精神压力和时间压力下完成。&lt;/p&gt;
&lt;p&gt;许多 XA 的实现都有一个叫做启发式决策（heuristic decistions）的紧急逃生舱口：允许参与者单方面决定放弃或提交一个存疑事务，而无需协调者做出最终决定。要清楚的是，这里启发式是可能破坏原子性（probably breaking atomicity）的委婉说法，因为它违背了两阶段提交的系统承诺。因此，启发式决策只是为了逃出灾难性的情况而准备的，而不是为了日常使用的。&lt;/p&gt;
&lt;h1 id=&#34;2pc&#34;&gt;2PC&lt;/h1&gt;
&lt;p&gt;所谓的两个阶段是指：第一阶段：准备阶段(投票阶段)和第二阶段：提交阶段(执行阶段)。&lt;/p&gt;
&lt;h2 id=&#34;准备阶段&#34;&gt;准备阶段&lt;/h2&gt;
&lt;p&gt;事务协调者(事务管理器)给每个参与者(资源管理器)发送 Prepare 消息，每个参与者要么直接返回失败(如权限验证失败)，要么在本地执行事务，写本地的 redo 和 undo 日志，但不提交，到达一种“万事俱备，只欠东风”的状态。&lt;/p&gt;
&lt;p&gt;可以进一步将准备阶段分为以下三个步骤：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1)协调者节点向所有参与者节点询问是否可以执行提交操作(vote)，并开始等待各参与者节点的响应。&lt;/p&gt;
&lt;p&gt;2)参与者节点执行询问发起为止的所有事务操作，并将 Undo 信息和 Redo 信息写入日志。(注意：若成功这里其实每个参与者已经执行了事务操作)&lt;/p&gt;
&lt;p&gt;3)各参与者节点响应协调者节点发起的询问。如果参与者节点的事务操作实际执行成功，则它返回一个”同意”消息；如果参与者节点的事务操作实际执行失败，则它返回一个”中止”消息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;提交阶段&#34;&gt;提交阶段&lt;/h2&gt;
&lt;p&gt;如果协调者收到了参与者的失败消息或者超时，直接给每个参与者发送回滚(Rollback)消息；否则，发送提交(Commit)消息；参与者根据协调者的指令执行提交或者回滚操作，释放所有事务处理过程中使用的锁资源。(注意:必须在最后阶段释放锁资源)&lt;/p&gt;
&lt;p&gt;接下来分两种情况分别讨论提交阶段的过程。&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/007rAy9hly1g0pxsghl0wj30u00h4ta4.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/007rAy9hly1g0pxsgab3aj30u00h4dh8.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当协调者节点从所有参与者节点获得的相应消息都为”同意”时:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.hollischuang.com/wp-content/uploads/2015/12/success.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://www.hollischuang.com/wp-content/uploads/2015/12/success.png&#34; alt=&#34;success&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1)协调者节点向所有参与者节点发出”正式提交(commit)”的请求。&lt;/p&gt;
&lt;p&gt;2)参与者节点正式完成操作，并释放在整个事务期间内占用的资源。&lt;/p&gt;
&lt;p&gt;3)参与者节点向协调者节点发送”完成”消息。&lt;/p&gt;
&lt;p&gt;4)协调者节点受到所有参与者节点反馈的”完成”消息后，完成事务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果任一参与者节点在第一阶段返回的响应消息为”中止”，或者 协调者节点在第一阶段的询问超时之前无法获取所有参与者节点的响应消息时：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.hollischuang.com/wp-content/uploads/2015/12/fail.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://www.hollischuang.com/wp-content/uploads/2015/12/fail.png&#34; alt=&#34;fail&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1)协调者节点向所有参与者节点发出”回滚操作(rollback)”的请求。&lt;/p&gt;
&lt;p&gt;2)参与者节点利用之前写入的 Undo 信息执行回滚，并释放在整个事务期间内占用的资源。&lt;/p&gt;
&lt;p&gt;3)参与者节点向协调者节点发送”回滚完成”消息。&lt;/p&gt;
&lt;p&gt;4)协调者节点受到所有参与者节点反馈的”回滚完成”消息后，取消事务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不管最后结果如何，第二阶段都会结束当前事务。&lt;/p&gt;
&lt;p&gt;二阶段提交看起来确实能够提供原子性的操作，但是不幸的事，二阶段提交还是有几个缺点的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、同步阻塞的性能问题同步阻塞问题。执行过程中，所有参与节点都是事务阻塞型的。当参与者占有公共资源时，其他第三方节点访问公共资源不得不处于阻塞状态。&lt;/p&gt;
&lt;p&gt;2、单点故障的可靠性问题。由于协调者的重要性，一旦协调者发生故障。参与者会一直阻塞下去。尤其在第二阶段，协调者发生故障，那么所有的参与者还都处于锁定事务资源的状态中，而无法继续完成事务操作。(如果是协调者挂掉，可以重新选举一个协调者，但是无法解决因为协调者宕机导致的参与者处于阻塞状态的问题)&lt;/p&gt;
&lt;p&gt;3、数据不一致。在二阶段提交的阶段二中，当协调者向参与者发送 commit 请求之后，发生了局部网络异常或者在发送 commit 请求过程中协调者发生了故障，这回导致只有一部分参与者接受到了 commit 请求。而在这部分参与者接到 commit 请求之后就会执行 commit 操作。但是其他部分未接到 commit 请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据部一致性的现象。&lt;/p&gt;
&lt;p&gt;4、二阶段无法解决的问题：协调者再发出 commit 消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于二阶段提交存在着诸如同步阻塞、单点问题、脑裂等缺陷，所以，研究者们在二阶段提交的基础上做了改进，提出了三阶段提交。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>三阶段提交</title>
      <link>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/distributedsystem-series/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/%E5%A4%9A%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/%E4%B8%89%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/</guid>
      <description>&lt;h1 id=&#34;三阶段提交&#34;&gt;三阶段提交&lt;/h1&gt;
&lt;p&gt;两阶段提交被称为阻塞（blocking）原子提交协议，因为存在 2PC 可能卡住并等待协调者恢复的情况。理论上，可以使一个原子提交协议变为非阻塞（nonblocking）的，以便在节点失败时不会卡住。但是让这个协议能在实践中工作并没有那么简单。作为 2PC 的替代方案，已经提出了一种称为三阶段提交（3PC）的算法。然而，3PC 假定网络延迟有界，节点响应时间有限；在大多数具有无限网络延迟和进程暂停的实际系统中，它并不能保证原子性。&lt;/p&gt;
&lt;p&gt;通常，非阻塞原子提交需要一个完美的故障检测器（perfect failure detector），即一个可靠的机制来判断一个节点是否已经崩溃。在具有无限延迟的网络中，超时并不是一种可靠的故障检测机制，因为即使没有节点崩溃，请求也可能由于网络问题而超时。出于这个原因，2PC 仍然被使用，尽管大家都清楚可能存在协调者故障的问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;三阶段提交(Three-phase commit)，也叫三阶段提交协议(Three-phase commit protocol)，是二阶段提交(2PC)的改进版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三阶段提交协议，是二阶段提交协议的改进版本，与二阶段提交不同的是，引入超时机制。同时在协调者和参与者中都引入超时机制。&lt;/p&gt;
&lt;p&gt;三阶段提交将二阶段的准备阶段拆分为 2 个阶段，插入了一个 preCommit 阶段，使得原先在二阶段提交中，参与者在准备之后，由于协调者发生崩溃或错误，而导致参与者处于无法知晓是否提交或者中止的“不确定状态”所产生的可能相当长的延时的问题得以解决。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.hollischuang.com/wp-content/uploads/2015/12/3.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;http://www.hollischuang.com/wp-content/uploads/2015/12/3.png&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;与两阶段提交不同的是，三阶段提交有两个改动点。&lt;/p&gt;
&lt;p&gt;1、引入超时机制。同时在协调者和参与者中都引入超时机制。
2、在第一阶段和第二阶段中插入一个准备阶段。保证了在最后提交阶段之前各参与节点的状态是一致的。&lt;/p&gt;
&lt;p&gt;也就是说，除了引入超时机制之外，3PC 把 2PC 的准备阶段再次一分为二，这样三阶段提交就有&lt;code&gt;CanCommit&lt;/code&gt;、&lt;code&gt;PreCommit&lt;/code&gt;、&lt;code&gt;DoCommit&lt;/code&gt;三个阶段。&lt;/p&gt;
&lt;h3 id=&#34;cancommit-阶段&#34;&gt;CanCommit 阶段&lt;/h3&gt;
&lt;p&gt;3PC 的 CanCommit 阶段其实和 2PC 的准备阶段很像。协调者向参与者发送 commit 请求，参与者如果可以提交就返回 Yes 响应，否则返回 No 响应。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.事务询问 协调者向参与者发送 CanCommit 请求。询问是否可以执行事务提交操作。然后开始等待参与者的响应。&lt;/p&gt;
&lt;p&gt;2.响应反馈 参与者接到 CanCommit 请求之后，正常情况下，如果其自身认为可以顺利执行事务，则返回 Yes 响应，并进入预备状态。否则反馈 No&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;precommit-阶段&#34;&gt;PreCommit 阶段&lt;/h3&gt;
&lt;p&gt;协调者根据参与者的反应情况来决定是否可以记性事务的 PreCommit 操作。根据响应情况，有以下两种可能。&lt;/p&gt;
&lt;p&gt;假如协调者从所有的参与者获得的反馈都是 Yes 响应，那么就会执行事务的预执行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.发送预提交请求 协调者向参与者发送 PreCommit 请求，并进入 Prepared 阶段。&lt;/p&gt;
&lt;p&gt;2.事务预提交 参与者接收到 PreCommit 请求后，会执行事务操作，并将 undo 和 redo 信息记录到事务日志中。&lt;/p&gt;
&lt;p&gt;3.响应反馈 如果参与者成功的执行了事务操作，则返回 ACK 响应，同时开始等待最终指令。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;假如有任何一个参与者向协调者发送了 No 响应，或者等待超时之后，协调者都没有接到参与者的响应，那么就执行事务的中断。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.发送中断请求 协调者向所有参与者发送 abort 请求。&lt;/p&gt;
&lt;p&gt;2.中断事务 参与者收到来自协调者的 abort 请求之后(或超时之后，仍未收到协调者的请求)，执行事务的中断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;docommit-阶段&#34;&gt;doCommit 阶段&lt;/h3&gt;
&lt;p&gt;该阶段进行真正的事务提交，也可以分为以下两种情况。&lt;/p&gt;
&lt;p&gt;执行提交&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.发送提交请求 协调接收到参与者发送的 ACK 响应，那么他将从预提交状态进入到提交状态。并向所有参与者发送 doCommit 请求。&lt;/p&gt;
&lt;p&gt;2.事务提交 参与者接收到 doCommit 请求之后，执行正式的事务提交。并在完成事务提交之后释放所有事务资源。&lt;/p&gt;
&lt;p&gt;3.响应反馈 事务提交完之后，向协调者发送 Ack 响应。&lt;/p&gt;
&lt;p&gt;4.完成事务 协调者接收到所有参与者的 ack 响应之后，完成事务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;中断事务 协调者没有接收到参与者发送的 ACK 响应(可能是接受者发送的不是 ACK 响应，也可能响应超时)，那么就会执行中断事务。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.发送中断请求 协调者向所有参与者发送 abort 请求&lt;/p&gt;
&lt;p&gt;2.事务回滚 参与者接收到 abort 请求之后，利用其在阶段二记录的 undo 信息来执行事务的回滚操作，并在完成回滚之后释放所有的事务资源。&lt;/p&gt;
&lt;p&gt;3.反馈结果 参与者完成事务回滚之后，向协调者发送 ACK 消息&lt;/p&gt;
&lt;p&gt;4.中断事务 协调者接收到参与者反馈的 ACK 消息之后，执行事务的中断。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;在doCommit阶段，如果参与者无法及时接收到来自协调者的doCommit或者rebort请求时，会在等待超时之后，会继续进行事务的提交。(其实这个应该是基于概率来决定的，当进入第三阶段时，说明参与者在第二阶段已经收到了PreCommit请求，那么协调者产生PreCommit请求的前提条件是他在第二阶段开始之前，收到所有参与者的CanCommit响应都是Yes。(一旦参与者收到了PreCommit，意味他知道大家其实都同意修改了)所以，一句话概括就是，当进入第三阶段时，由于网络超时等原因，虽然参与者没有收到commit或者abort响应，但是他有理由相信：成功提交的几率很大。)
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2pc-与-3pc-的区别&#34;&gt;2PC 与 3PC 的区别&lt;/h2&gt;
&lt;p&gt;优点：相比二阶段提交，三阶段提交降低了阻塞范围，在等待超时后协调者或参与者会中断事务。避免了协调者单点问题，阶段 3 中协调者出现问题时，参与者会继续提交事务。&lt;/p&gt;
&lt;p&gt;缺点：数据不一致问题依然存在，当在参与者收到 preCommit 请求后等待 do commite 指令时，此时如果协调者请求中断事务，而协调者无法与参与者正常通信，会导致参与者继续提交事务，造成数据不一致。&lt;/p&gt;
&lt;p&gt;相对于 2PC，3PC 主要解决的单点故障问题，并减少阻塞，因为一旦参与者无法及时收到来自协调者的信息之后，他会默认执行 commit。而不会一直持有事务资源并处于阻塞状态。但是这种机制也会导致数据一致性问题，因为，由于网络原因，协调者发送的 abort 响应没有及时被参与者接收到，那么参与者在等待超时之后执行了 commit 操作。这样就和其他接到 abort 命令并执行回滚的参与者之间存在数据不一致的情况。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;了解了 2PC 和 3PC 之后，我们可以发现，无论是二阶段提交还是三阶段提交都无法彻底解决分布式的一致性问题。Google Chubby 的作者 Mike Burrows 说过，&lt;code&gt;there is only one consensus protocol, and that’s Paxos” – all other approaches are just broken versions of Paxos.&lt;/code&gt; 意即世上只有一种一致性算法，那就是 Paxos，所有其他一致性算法都是 Paxos 算法的不完整版。后面的文章会介绍这个公认为难于理解但是行之有效的 Paxos 算法。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
