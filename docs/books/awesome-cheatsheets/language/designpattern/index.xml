<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DesignPattern | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/index.xml" rel="self" type="application/rss+xml" />
    <description>DesignPattern</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>DesignPattern</title>
      <link>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/</link>
    </image>
    
    <item>
      <title>DesignPattern-CheatSheet</title>
      <link>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/designpattern-cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/designpattern-cheatsheet/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.processon.com/view/link/5a8bd7f3e4b064e9ddc6783e&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;

















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5803001/36413335-ddd675f0-1658-11e8-9326-4f4eb7aace4e.png&#34; alt=&#34;designpattern&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;design-pattern-cheatsheet&#34;&gt;Design Pattern CheatSheet&lt;/h1&gt;
&lt;p&gt;Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.&lt;/p&gt;
&lt;p&gt;Design patterns are not a silver bullet to all your problems.
Do not try to force them; bad things are supposed to happen, if done so.
Keep in mind that design patterns are solutions to problems, not solutions finding problems; so don&amp;rsquo;t overthink.
If used in a correct place in a correct manner, they can prove to be a savior; or else they can result in a horrible mess of a code.&lt;/p&gt;
&lt;h1 id=&#34;creational-design-patterns&#34;&gt;Creational Design Patterns&lt;/h1&gt;
&lt;p&gt;Creational patterns are focused towards how to instantiate an object or group of related objects.&lt;/p&gt;
&lt;h2 id=&#34;simple-factory&#34;&gt;Simple Factory&lt;/h2&gt;
&lt;p&gt;In object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be &amp;ldquo;new&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Simple factory simply generates an instance for client without exposing any instantiation logic to the client&lt;/p&gt;
&lt;p&gt;When creating an object is not just a few assignments and involves some logic, it makes sense to put it in a dedicated factory instead of repeating the same code everywhere.&lt;/p&gt;
&lt;h2 id=&#34;factory-method&#34;&gt;Factory Method&lt;/h2&gt;
&lt;p&gt;It provides a way to delegate the instantiation logic to child classes.&lt;/p&gt;
&lt;p&gt;Useful when there is some generic processing in a class but the required sub-class is dynamically decided at runtime. Or putting it in other words, when the client doesn&amp;rsquo;t know what exact sub-class it might need.&lt;/p&gt;
&lt;h2 id=&#34;abstract-factory&#34;&gt;Abstract Factory&lt;/h2&gt;
&lt;p&gt;A factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes.&lt;/p&gt;
&lt;p&gt;When there are interrelated dependencies with not-that-simple creation logic involved.&lt;/p&gt;
&lt;h2 id=&#34;builder&#34;&gt;Builder&lt;/h2&gt;
&lt;p&gt;Allows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.&lt;/p&gt;
&lt;p&gt;When there could be several flavors of an object and to avoid the constructor telescoping. The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.&lt;/p&gt;
&lt;h2 id=&#34;prototype&#34;&gt;Prototype&lt;/h2&gt;
&lt;p&gt;Create object based on an existing object through cloning.&lt;/p&gt;
&lt;p&gt;In short, it allows you to create a copy of an existing object and modify it to your needs, instead of going through the trouble of creating an object from scratch and setting it up.&lt;/p&gt;
&lt;p&gt;When an object is required that is similar to existing object or when the creation would be expensive as compared to cloning.&lt;/p&gt;
&lt;h2 id=&#34;singleton&#34;&gt;Singleton&lt;/h2&gt;
&lt;p&gt;Ensures that only one object of a particular class is ever created.&lt;/p&gt;
&lt;p&gt;Singleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them is it makes your code tightly coupled plus mocking the singleton could be difficult.&lt;/p&gt;
&lt;h1 id=&#34;structural-design-patterns&#34;&gt;Structural Design Patterns&lt;/h1&gt;
&lt;p&gt;Structural patterns are mostly concerned with object composition or in other words how the entities can use each other. Or yet another explanation would be, they help in answering &amp;ldquo;How to build a software component?&amp;rdquo;&lt;/p&gt;
&lt;h1 id=&#34;behavioral-design-patterns&#34;&gt;Behavioral Design Patterns&lt;/h1&gt;
&lt;p&gt;It is concerned with assignment of responsibilities between the objects. What makes them different from structural patterns is they don&amp;rsquo;t just specify the structure but also outline the patterns for message passing/communication between them. Or in other words, they assist in answering &amp;ldquo;How to run a behavior in software component?&amp;rdquo;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DesignPrincipe-CheatSheet</title>
      <link>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/designprincipe-cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/designprincipe-cheatsheet/</guid>
      <description>&lt;h1 id=&#34;软件架构的设计原则&#34;&gt;软件架构的设计原则&lt;/h1&gt;
&lt;p&gt;设计原则就是架构设计的指导思想，它指导我们如何将数据和函数组织成类，如何将类链接起来成为组件和程序。反向来说，架构的主要工作就是将软件拆解为组件，设计原则指导我们如何拆解、拆解的粒度、组件间依赖的方向、组件解耦的方式等。这些设计原则往往会从以下几个维度考虑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单性：体现在应用架构是否有清晰、明确的层次划分，各应用系统之间的连接关系是否简单明确，系统之间的耦合程度低。&lt;/li&gt;
&lt;li&gt;灵活性：体现在应用架构适应业务的快速变化，不仅要求在快速增加新应用时保持现有应用架构的稳定性，还要在适应业务变化的同时主动促进业务变革。&lt;/li&gt;
&lt;li&gt;整合性：通过应用系统之间的解耦和组合，以统一的方式对外提供一致的服务接口，从而实现应用系统之间的共享和协作。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;具体到编程的领域中，我们进行架构设计的主导原则是 OCP（开闭原则），在类和代码的层级上有：SRP（单一职责原则）、LSP（里氏替换原则）、ISP（接口隔离原则）、DIP（依赖反转原则）；在组件的层级上有：REP（复用、发布等同原则）、CCP（共同闭包原则）、CRP（共同复用原则），处理组件依赖问题的三原则：无依赖环原则、稳定依赖原则、稳定抽象原则。不确定性原则要求抽象与隔离原则，抽象与隔离原则推导复用与依赖原则，复用与依赖原则延伸单源一致性原则与可测试性原则，单源一致性原则与可测试性原则保障了系统的相对确定性。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参阅：https://www.processon.com/view/5ff1b6e46376896cfa00ba88#map&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;架构设计总体原则&#34;&gt;架构设计总体原则&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;案例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;领域视角原则&lt;/td&gt;
&lt;td&gt;架构师必须要有领域工程意识，必须站在领域的角度，从多行业、多产品应用构成的领域维度来规划和设计架构。输出的系统架构设计，要能从“面”上回答解决了哪些问题，而不仅仅只是回答“点”上的问题。&lt;/td&gt;
&lt;td&gt;比如，“购物车”是是否能做成全局统一的组件？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;系统视角原则&lt;/td&gt;
&lt;td&gt;架构师必须要有系统工程意识，架构设计必须站在全系统的角度，对整个系统进行宏观整体把握，不能把软件/硬件等割裂开来，只考虑某一个方面。另一方面，系统设计中各个方面的能力应该是均衡的，没有明显的瓶颈和短木板。架构师在回答架构设计支撑了那些系统功能问题的同时，需要回答做了哪些平衡，为什么做这些平衡？&lt;/td&gt;
&lt;td&gt;比如 _ 在节省 10 ms 与 模型更加合理上的平衡与选择 _ 增加 5 ms 性能开销，但能增加系统后续的可维护性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;重用原则&lt;/td&gt;
&lt;td&gt;重用分为几个层次：架构重用、组件重用、设计重用、代码重用。领域架构设计强调的是领域内架构的重用和基于架构的组件重用。架构重用包括：逻辑架构重用和物理架构重用，在可能的情况下要尽量扩大重用的范围，特别是物理架构的重用，将带来巨大的价值。设计师在进行系统设计和实现时必须遵循重用原则，应用开发时，如果已有领域架构和平台，则其系统设计必须符合领域架构，并应用平台组件开发；如果无领域架构和平台，则需要考虑如何构建领域架构和平台为后续类似产品的重用和共享做好准备。&lt;/td&gt;
&lt;td&gt;比如： _ TBBPM、QRExpression 就是组建级重用 _ 基于 HSF 的分布式服务治理架构，是属于架构重用 * 村淘二阶段物流需求参考运费险需求的设计实现，是代码级重用(最没价值的重用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;商业目标原则&lt;/td&gt;
&lt;td&gt;由于影响架构设计的各个质量属性之间存在一定的联系和冲突，比如：高的性能需求会导致成本的上升，高的可靠性要求也会导致成本的上升，扩展性的提高可能会牺牲一定的性能，而可移植性好则会提升架构的可重用性等等。因此架构设计时必须对各个质量属性的进行权衡，而权衡的依据就是架构设计的商业目标，包括：目标市场、架构的应用范围、上市时间、成本和收益、关键需求（质量属性需求）、开发过程和约束等，只有确定了商业目标才能确定架构设计的方向并对各个相互冲突的质量属性进行仲裁和权衡。&lt;/td&gt;
&lt;td&gt;比如： _ 究竟是基于 HSF 构建统一的服务治理框架，还是基于 Dubbo？ _ 增加实时的 HSF 服务监控，就没法做到 XXX 并发/台机器，并发性能有 10%的损耗等。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;一致性原则&lt;/td&gt;
&lt;td&gt;架构设计应该作为一个统一的整体而存在，架构设计在整体应该上是统一、和谐的，符合美学原则。架构中类似需求应该遵循相同的设计规范和标准，比如：接口、模型、术语等。架构中类似的处理机制应该是统一的：如异常处理流程。而可测试性、可调试性等设计等应采用统一的框架设计和实现。&lt;/td&gt;
&lt;td&gt;比如： _ 一个 XML 解析，一个系统中用了 10 种框架，一个 JSON 解析，用了 4 个框架 _ “组件”的定义在各个人的理解都不一致，什么是“产品”？等等 * 有的产品用 JDK 8，有的用 JDK 7，有的用 6。有的产品用 JBOSS，有的用 Tomcat 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;够用/简单原则（JUST RIGHT）&lt;/td&gt;
&lt;td&gt;在达到预定的目标、具备所需要的功能前提下，架构设计应尽量简单，避免“过设计”，这样可减少处理费用，提高系统效益，便于实现和管理。简化组件/模块/方法/类的功能设计，避免设计面面俱到的多功能组件/模块/方法/类；调用功能时，避免功能过剩。架构设计应该在适当的范围内考虑其可扩展性，特别需要杜绝为了应用某种新技术而采用新的架构。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;变化点分离原则&lt;/td&gt;
&lt;td&gt;领域架构设计的核心就是通过设计支持各个变化点独立变化，因此在需求分析阶段就需要分离公共的部分和变化的部分，判断出哪些需求是相对稳定不变的，哪些需求是可能变动的，并将不同的变化点分离开；在逻辑架构设计时，工作重点也是使变化点在逻辑上隔离，并确定支持变化点的机制。根据那些稳定不变的需求设计体系结构，而根据那些可变的需求设计软件的“可扩展性”。分面和分层都是识别并隔离变化点的方法，使得架构具有良好的可扩展性。a、首先要确认软件中变和不变的因素，并根据变化频度进行分类。b、依据变化频度的分类进行层次划分，并标出各个层次的依赖关系。c、对不变的部分，设计得稳固、牢靠。对变化的部分，根据变化的频度设计其灵活性。&lt;/td&gt;
&lt;td&gt;目前，buy-old 的设计相对而言，主要问题有缺少层次划分、缺少按功能域的进行分类。虽然有 Provider 扩展机制，但业务逻辑相互掺杂…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;逻辑与物理分离原则&lt;/td&gt;
&lt;td&gt;系统功能逻辑与基于质量、成本等因素分割的物理实现并不存在直接的对应关系，同样的系统可能由于硬件技术和软件技术的需要，在功能部署和实现手段都会发生变化。架构设计强调多视角的设计，逻辑和物理分离就是在变化点分离原则的基础上，把逻辑功能和物理实现进行分离，在接口设计上就是把逻辑语义和接口形式以及物理承载分离开。&lt;/td&gt;
&lt;td&gt;比如，在业务量比较少的时候，所有逻辑模块可以在一起部署。当用户搜索量上来时，搜索模块可以独立部署。。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;支持分阶段交付原则&lt;/td&gt;
&lt;td&gt;对于大型需求的设计，需要在架构设计时考虑要能够支持平台和产品分阶段/增量式实现和交付的要求，具有较强的可修改性和可扩展性。分阶段交付的版本之间要保持兼容性。&lt;/td&gt;
&lt;td&gt;比如，现在有些业务初期很简单，需要快速上线，但后期越做越复杂。早起需求简单时，业务方自己实现了一套，在业务复杂后，想切回平台，发现平台也无法一下支撑。。根本原因：平台不支持简单业务在早期的快速上线，也不具备支撑业务从下发展到大的能力。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;平面层次子系统划分原则&#34;&gt;平面&amp;amp;层次&amp;amp;子系统划分原则&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;案例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;高内聚/低耦合原则&lt;/td&gt;
&lt;td&gt;子系统/模块的划分必须具有独立性，将联系比较密切、功能近似的部分集中，使得子系统/模块的内部功能、信息等各方面的凝聚性较好。子系统/模块之间的联系要尽量减少，接口设计简单、明确，尽量减少子系统/模块相互之间各种不必要的数据、调用和控制联系。一个内部联系强的子系统/模块对外部的联系必然是相对很少的。&lt;/td&gt;
&lt;td&gt;比如，退款功能， 在 TP 中有，在 RP 中也有。TP 的退款功能会去修改 RP 的数据库表内容…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据冗余最小原则&lt;/td&gt;
&lt;td&gt;架构设计应该使得系统中数据的冗余最小，否则可能引起相关的功能数据分布在各个不同的子系统/模块中，大量的原始数据需要调用和同步，大量的中间结果需要保存和传递，大量计算工作将要重复进行。数据冗余使得程序结构紊乱，不但给软件开发工作带来很大的困难，而且系统的工作效率和可靠性也大大降低了。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数据一致性原则&lt;/td&gt;
&lt;td&gt;为了提高系统性能，备份节点和子系统/模块必要时需要对数据进行缓存，当发生变化时，必须有相应的机制保证缓存数据的一致性和有效性。&lt;/td&gt;
&lt;td&gt;比如，Diamond 就是为了解决缓存同步、数据一致性问题。如果应用中有数据缓存，必须要考虑数据一致性问题。对于两个应用间的数据一致性也要注意是否有考虑？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通用的平面划分原则&lt;/td&gt;
&lt;td&gt;划分平面是隔离架构中变化点的常用方法。平面划分作为最高层次的系统划分，目的首先自然是进行功能的分类、分解，以及对系统复杂性分割、封装。平面划分的另一个目的是对系统设计所涉及知识领域的划分，或者说是工作的划分，便于让不同知识领域的专家专心于自己的领域开展下一步的设计工作。&lt;/td&gt;
&lt;td&gt;比如，淘宝系统可初略划分成以下几个平面：买家平面、卖家平面、运营小二管理平面 不同的平面对于时延、可靠性要求、抖动性要求都不一样，需要区分对待。（比如买家数据分库分表的设计）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通用的层次划分原则&lt;/td&gt;
&lt;td&gt;划分层次也是隔离架构中变化点的常用方法。分层的目的是要实现可重用性、可更改性和可移植性。层次结构是一种应用非常广的架构模式。操作系统、数据库管理系统和网络通信软件都是层次结构软件系统的例子。对于追求屏蔽作用（屏蔽变化）的系统，首先需要把通用的部分和可变的部分分开。当通用部分和可变部分无法简单划分时，就需要一个抽象分析的过程。越是抽象的东西越不容易发生变化，越是具体的东西越是容易变化。&lt;/td&gt;
&lt;td&gt;比如，TMF 2.1 层次划分为 行业定制、开放平台、交易场景、功能组件等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;分层的单向依赖原则&lt;/td&gt;
&lt;td&gt;采用分层模式时，原则上只允许较高层次依赖于较低层次，不允许出现反向依赖。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;无循环依赖原则&lt;/td&gt;
&lt;td&gt;架构设计中，子系统/模块之间的依赖关系要尽量减少，且不允许模块之间出现循环依赖。&lt;/td&gt;
&lt;td&gt;一个不好的做法，为了解决循环依赖，将所有的模块都用一个工程来做管理，而不是考虑其他设计来解决依赖问题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;避免跨层通信原则&lt;/td&gt;
&lt;td&gt;采用分层模式时，原则上不允许出现跨层通信，包括：API 调用、消息通信等。&lt;/td&gt;
&lt;td&gt;比如，在展现层，直接调用 DO 对象的 API 方法进行操作。思考：BizOrderDO 对象，是否存在广泛的滥用？&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解耦原则&lt;/td&gt;
&lt;td&gt;解耦原则要求架构设计中的各个模块之间是松耦合的，并且各个组件可以基于架构独立应用，这也是架构可裁减性的实现基础。&lt;/td&gt;
&lt;td&gt;比如，我们采用的 Pandora，是有构建独立模块应用的想法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;实现无关性原则&lt;/td&gt;
&lt;td&gt;构成架构的元素 DM 是与实现无关的，这也正是架构能够重用的关键。&lt;/td&gt;
&lt;td&gt;简单的说：关键的 API，对外暴露的是接口，实现类不应暴露出去&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;灵活部署原则&lt;/td&gt;
&lt;td&gt;架构设计要能够支持各模块灵活部署。构成架构的模块的粒度划分需要考虑不同应用场景的部署需求，同时各模块也是与实现无关的，其部署可以是灵活的，与物理位置无关。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;接口设计原则&#34;&gt;接口设计原则&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;案例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;接口标准化原则&lt;/td&gt;
&lt;td&gt;架构设计中，模块之间的接口设计应该尽量采用业界标准协议和公司内部协议规范，以保持稳定性和兼容性。如果涉及对外的互操作等则建议采用用业界标准协议。&lt;/td&gt;
&lt;td&gt;对于自行定制的接口，在接口发布后，最好要能发布配套的接口规范。并需要能保证后续接口对规范的前向兼容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接口扩展性原则&lt;/td&gt;
&lt;td&gt;接口设计要具有良好的可扩展性，比如通过预留字段等方式以方便今后的扩展。&lt;/td&gt;
&lt;td&gt;但，不能将预留字段作为万能字段，任其自身自灭，不断腐化。比如，BizOrderDO 的 Attribute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接口兼容性原则&lt;/td&gt;
&lt;td&gt;系列化接口中所有版本应该保持兼容性，其基础通用功能和关键特性接口（如软件升级）设计在一个系列版本之内必须保持兼容，如：1.x 系列、2.x 系列&lt;/td&gt;
&lt;td&gt;在之前做过的需求中，就发现。部分 API 升级后，就要求集团所有用到此 API 的都需要升级，因为接口参数发生了变化，输入/输出产生了变化。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;接口抽象性原则&lt;/td&gt;
&lt;td&gt;接口设计要具有抽象性，接口定义应该强调接口的逻辑语义而不是实现方法，以屏蔽掉具体实现的差异。&lt;/td&gt;
&lt;td&gt;比如，&amp;ldquo;增加用户” 接口定义就是屏蔽了实现，而 “增加 LDAP 的用户”就是暴露了实现方式。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&#34;质量属性设计原则&#34;&gt;质量属性设计原则&lt;/h1&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;案例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;可重用性原则&lt;/td&gt;
&lt;td&gt;架构或基于此架构的某些组件能够在未来的产品应用开发中能够重复使用。这要求架构设计时要充分分析其应用场景、范围和实现技术，以及不同的质量属性。&lt;/td&gt;
&lt;td&gt;与“架构总体设计”原则类似。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可扩展性原则&lt;/td&gt;
&lt;td&gt;可扩展性是通过变更系统增加新功能的能力和容易程度，架构设计根据其规模和复杂性对可扩展性有不同的要求。稳定性和可扩展性之间存在辩证的关系：如果架构不可扩展的话，那么就没有发展前途，所以不能只关心稳定性而忽视可扩展性；“可扩展”的前提条件是“保持架构稳定”，否则相同难以按计划开发出来，稳定性是使系统能够持续发展的基础。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可修改性原则&lt;/td&gt;
&lt;td&gt;基于该架构产品及平台的可修改性(Modifiability) ，是与系统架构关系最为密切的一个质量属性。1、基于领域架构的产品能够进行快速修改，修改代价低，架构不限制组件设计及局部设计的修改。2、对外接口稳定，对内接口：机制稳定、可演进、可扩充。3、领域架构本身具有自我扩展性。分层是一种通用的可修改性实现方法，通过分层，可以使得修改被限制在各层之内，各层的修改不会影响其他层次的设计和实现。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可移植性原则&lt;/td&gt;
&lt;td&gt;架构设计不依赖于特定的运行环境，基于该架构的产品及平台具有能够在不同软件或（和）硬件环境下运行的能力。如果对任何特定运行环境的所有假设都仅包含其中一个组件（或者在最坏情况下，包含在少数几个易于修改的组件）中，则该架构是可移植的。一般通过分层模式来提高架构的可移植性，在架构中对平台相关实现细节的封装表现为可移植性层。&lt;/td&gt;
&lt;td&gt;比如，优惠功能域中的计算器，应该可设计为可移植的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;兼容性原则&lt;/td&gt;
&lt;td&gt;架构设计上要支持不同应用场景以及系列化版本之间的兼容性设计。兼容性有两个方面的含义：一是版本的前向（forward）和后向（backward）兼容，另一个是对运行环境的兼容性。运行环境包括软件环境（如 OS）、硬件环境（如硬件平台）和网络环境（如接口兼容性）等，运行环境的兼容性要求与可移植性要求是相同的。后向兼容是兼容老版本，前向兼容是指将来可以被新版本所兼容，所以前向兼容本质上是特殊的可扩展性需求。&lt;/td&gt;
&lt;td&gt;软件领域，比较常见的不兼容主要体现在，新上了某个业务之后，由于对一些接口的改动，导致之前的某个老业务的某些特性不可用了，功能丢失了。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可伸缩性原则&lt;/td&gt;
&lt;td&gt;架构设计在不同的应用场景下具有一定的可伸缩性，包括容量、规格等指标。在线扩容能力就是一种可伸缩性，当用户增长时，可以通过增加服务器、虚拟机、Docker 容器等不同级别的手段来适应。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可裁剪性原则&lt;/td&gt;
&lt;td&gt;可裁剪性是指用户从系统中删除部分功能的难易程度，或者从系统中选择部分功能丢弃其他功能的难易程度。可裁剪性有利于提高架构的可重用性。架构和平台设计必须具有良好的可裁剪性，可裁减性可以看成是可配置性的一个方面。可裁减性设计要求尽量降低组件之间的耦合和依赖关系。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能原则&lt;/td&gt;
&lt;td&gt;架构设计必须满足预定的性能目标，做好性能、成本、可扩展性和可移植性等的综合权衡，并能够根据应用场景的变化具有平滑扩容的能力。性能需求主要包括两个方面，一是吞吐量（Throughput），指系统或部件在指定时间段内执行的工作量，二是响应时间或速度，指事务或请求与响应之间的平均延迟。系统性能还包括：容量（Capacity）；资源占用率（Resource Consumption），如内存资源的使用效率，CPU 资源占用率；Memory footprint，是指程序被加载到内存中所占用的静态内存大小。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可用性/可靠性原则&lt;/td&gt;
&lt;td&gt;架构设计要满足预定的可靠性/可用性指标。不同的应用场景对可靠性指标的要求是不同的。系统的可靠性指系统硬件和软件在运行过程中抵抗异常情况的干扰及保证系统正常工作的能力。衡量系统可靠性的指标是平均故障间隔时间和平均维护时间。前者指平均的前后两次发生故障的时间，反映了系统安全运行时间，后者指故障后平均每次所用的修复时间，反映系统可维护性的好坏。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;安全性原则&lt;/td&gt;
&lt;td&gt;架构设计必须满足目标应用场景的安全需求。安全性是衡量系统在向合法用户提供服务的同时，阻止非授权用户使用的能力，以及防止意外或恶意访问限制性的资源或大量的资源，试图显示数据、改变/删除数据、访问系统服务、降低系统的可用性。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可测试性/可调试性原则&lt;/td&gt;
&lt;td&gt;架构设计必须具有良好的可测试性和可调试性。良好的可测试性/可调试性能够方便系统缺陷的发现，降低对工具、仪器种类和专业测试设备和仪器的要求，并且在发现问题后能够快速检测和定位故障。设计中应该统一考虑可测试性/可调试性框架的设计和实现，尽量减少测试软件和产品软件之间的耦合性。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可生产性/可制造性原则&lt;/td&gt;
&lt;td&gt;略&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可安装性原则&lt;/td&gt;
&lt;td&gt;可安装性是指完成设备安装的难易程度。针对用户安装使用场景，是否有针对性设计来提高系统可安装性。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可配置性原则&lt;/td&gt;
&lt;td&gt;架构设计上提供，能够方便地支持组件的裁剪和配置。&lt;/td&gt;
&lt;td&gt;比如，基于运营平台，进行业务配置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;成本原则&lt;/td&gt;
&lt;td&gt;架构设计要从全局出发，不能只考虑单方面的成本，要综合考虑软件、硬件、整机、生产、备货、发货、测试等各个方面，以达到系统的最优成本。&lt;/td&gt;
&lt;td&gt;互联网行业重点要考虑服务器、占地场租、电费等方面的成本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;易懂性原则&lt;/td&gt;
&lt;td&gt;好的架构设计必然是易于理解，易于掌握的，同时符合自然原则和美学原理。良好的易懂性同时也有利于提高系统的可维护性。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>Refactor-CheatSheet</title>
      <link>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/refactor-cheatsheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-cheatsheets/language/designpattern/refactor-cheatsheet/</guid>
      <description>&lt;h1 id=&#34;clean-code-review--refactor--简洁代码审视与重构&#34;&gt;Clean Code, Review &amp;amp; Refactor | 简洁代码、审视与重构&lt;/h1&gt;
&lt;p&gt;Working Effectively with Legacy Code, by Michael Feathers. This book will give you an appreciation of what it is like to work with long-lived code bases, and how to write code now so future You (and future Your Colleagues) can be happy developers. Refactoring: Improving the Design of Existing Code, by Martin Fowler. You’ll get a whole new appreciation for the word “refactoring” after reading this book. Design Patterns: Elements of Reusable Object-Oriented Software, by Erich Gamma et al. This is also famously knows as the Gang of Four book. If you want a simpler version of this, check out Head First Design Patterns too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CamelCase 适用于类与接口名。&lt;/li&gt;
&lt;li&gt;snakeCase 适用于变量与方法名。&lt;/li&gt;
&lt;li&gt;SCREAMING_SNAKE_CASE 适用于常量名。&lt;/li&gt;
&lt;li&gt;sPoNgEbOb_SnAkE_cAsE 适用于讨厌的名字。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.&lt;/p&gt;
&lt;p&gt;Michael Feathers 在他的《修改代码的艺术》一书中，提出了当我们听到“遗留代码”的时候会想到什么：
如果你也和我一样，那么大抵会联想到错综复杂的、难以理清的结构，需要改变然而实际上又根本无法理解的代码；你会联想到那些不眠之夜，试图添加一个本该很容易就添加上去的特性；你会联想到自己是如何的垂头丧气，以及你的团队中的每个人对一个似乎没人管的代码库是如何打心底里感到厌烦的，这种代码简直让你生不如死。你内心深处甚至对于想一想怎样才能改善这种代码都感到痛苦。这种事情似乎太不值得我们付出努力了。&lt;/p&gt;
&lt;h1 id=&#34;编码规约&#34;&gt;编码规约&lt;/h1&gt;
&lt;p&gt;这里用规约二字，而非规范，也是希望能表明，在各个团队的独特业务场景、开发语言、编码习惯下，支持对该规约的二次解释。&lt;/p&gt;
&lt;p&gt;Data is better than code.&lt;/p&gt;
&lt;p&gt;Store data in your state, send data over the wire, dispatch based on data.&lt;/p&gt;
&lt;p&gt;Everything should be CQRS.&lt;/p&gt;
&lt;p&gt;(Almost) Everything should be pubsub.&lt;/p&gt;
&lt;p&gt;A subscriber shouldn&amp;rsquo;t affect a publisher.&lt;/p&gt;
&lt;p&gt;Communication between nodes should be communication between independent actors.&lt;/p&gt;
&lt;p&gt;Each message should do one complete thing, and there shouldn&amp;rsquo;t need to be a sequence of coupled messages.&lt;/p&gt;
&lt;p&gt;Represent your data as closely as possible to the essential structure of the problem.&lt;/p&gt;
&lt;p&gt;A client&amp;rsquo;s representation of data should be as close as possible to that of the server.&lt;/p&gt;
&lt;p&gt;This blurs the distinction between client and server. It allows offline-mode, reduces communication to syncing, and decentralizes.&lt;/p&gt;
&lt;p&gt;When mating different paradigms, build one cleanly on top of the other.&lt;/p&gt;
&lt;p&gt;Never try to make them work on some of the same primitives. Never abuse one to make the other work. For example, ducts in themselves are very general - if you want to do pubsub, that can easily be built on top of ducts, but don&amp;rsquo;t pretend that pubsub is a part of the duct system.&lt;/p&gt;
&lt;p&gt;Never misuse an abstraction.&lt;/p&gt;
&lt;p&gt;An abstraction provides a certain set of tools; use them and only them.&lt;/p&gt;
&lt;p&gt;Correctness is more important than performance.&lt;/p&gt;
&lt;p&gt;Be simple and uncompromising in defining what&amp;rsquo;s correct; go crazy with optimizations.&lt;/p&gt;
&lt;p&gt;Nock is a great example of this. It contains the character of the virtual machine, but its asymptotics are bad. Add jets to fix the asymptotics.&lt;/p&gt;
&lt;p&gt;Another example is the ACID nature of Arvo. Arvo is a pure function f(logs) of its event log, so formally Arvo is just a function run against an event log. A naive implementation has very bad asymptotics; processing each new event is O(n) in the number of historical events. Choose the function g(state,log) such that f(logs ++ log) = g(f(logs),log). Then, as long as you keep the state in memory, processing each new event is constant in the number of previous events. This still requires O(n) restart from disk, but you can also periodically (and non-blockingly) write a checkpoint of the state to disk, so that restart from disk is only linear in the number of events since the last checkpoint.&lt;/p&gt;
&lt;p&gt;Correctness is more important than optimality.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t completely understand your code and the semantics of all the code it depends on, your code is wrong.&lt;/p&gt;
&lt;p&gt;Deterministic beats heuristic.&lt;/p&gt;
&lt;p&gt;Heuristics are evil and should only be used where determinism is infeasible, such as in cache reclamation.&lt;/p&gt;
&lt;p&gt;Stateless is better than stateful.&lt;/p&gt;
&lt;p&gt;Explicit state is better than implicit state.&lt;/p&gt;
&lt;p&gt;Referential transparency is honesty and stability.&lt;/p&gt;
&lt;p&gt;Lack of referential transparency and other forms of disingenuousness are some of the world&amp;rsquo;s big problems. Only deviate from referential transparency if absolutely necessary.&lt;/p&gt;
&lt;p&gt;Responsibilities should be clearly separated.&lt;/p&gt;
&lt;p&gt;This applies from kernel modules through network citizens.&lt;/p&gt;
&lt;p&gt;Dualities must be faced head-on and analyzed differently at different layers.&lt;/p&gt;
&lt;p&gt;Statically typed vs. dynamically typed, imperative vs. functional, code vs. data, and effectful vs. pure can all be a matter of perspective, and all relevant perspectives must have coherent answers.&lt;/p&gt;
&lt;p&gt;One hundred lines of simplicity is better than twenty lines of complexity.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not enough for an abstraction to reduce code duplication; it must actually make the code simpler.&lt;/p&gt;
&lt;p&gt;Prefer mechanical simplicity to mathematical simplicity.&lt;/p&gt;
&lt;p&gt;Often mechanical simplicity and mathematical simplicity go together.&lt;/p&gt;
&lt;p&gt;The Law of Leaky Abstractions is a lie; abstract airtightly.&lt;/p&gt;
&lt;p&gt;If your abstractions are leaking, it&amp;rsquo;s not due to some law of the universe; you just suck at abstracting. Usually, you didn&amp;rsquo;t specify the abstraction narrowly enough.&lt;/p&gt;
&lt;h1 id=&#34;attitude&#34;&gt;Attitude&lt;/h1&gt;
&lt;p&gt;Code courageously.&lt;/p&gt;
&lt;p&gt;If you avoid changing a section of code for fear of awakening the demons therein, you are living in fear. If you stay in the comfortable confines of the small section of the code you wrote or know well, you will never write legendary code. All code was written by humans and can be mastered by humans.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s natural to feel fear of code; however, you must act as though you are able to master and change any part of it. To code courageously is to walk into any abyss, bring light, and make it right.&lt;/p&gt;
&lt;p&gt;No time for lazy people.&lt;/p&gt;
&lt;p&gt;If there&amp;rsquo;s clearly a right way to do something and a wrong way, do it the right way. Coding requires incredible discipline. Always follow conventions, and fire anyone who won&amp;rsquo;t. Anything that can be solved by discipline is not a real problem.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;To him who knows to do good and does not do it, to him it is sin.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;When a smart person makes an obviously stupid suggestion, before responding take a full 60 seconds to envision how you would implement it and what the effects would be.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
