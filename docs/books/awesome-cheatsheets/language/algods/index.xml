<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>AlgoDS | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-cheatsheets/language/algods/</link><atom:link href="https://ng-tech.icu/books/awesome-cheatsheets/language/algods/index.xml" rel="self" type="application/rss+xml"/><description>AlgoDS</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>AlgoDS</title><link>https://ng-tech.icu/books/awesome-cheatsheets/language/algods/</link></image><item><title>AlgoDS-CheatSheet</title><link>https://ng-tech.icu/books/awesome-cheatsheets/language/algods/algods-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cheatsheets/language/algods/algods-cheatsheet/</guid><description>&lt;p>﻿# 面试算法实践与国外大厂习题指南&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Algorithm&lt;/th>
&lt;th>Preprocessing time&lt;/th>
&lt;th>Matching time[&lt;a href="https://en.wikipedia.org/wiki/String_searching_algorithm#endnote_Asymptotic_times" target="_blank" rel="noopener">1]&lt;/a>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Naïve string search algorithm&lt;/td>
&lt;td>0 (no preprocessing)&lt;/td>
&lt;td>Θ(nm)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_string_search_algorithm" target="_blank" rel="noopener">Rabin–Karp string search algorithm&lt;/a>&lt;/td>
&lt;td>Θ(m)&lt;/td>
&lt;td>average Θ(n + m),worst Θ((n−m)m)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Finite-state_machine" target="_blank" rel="noopener">Finite-state automaton&lt;/a> based search&lt;/td>
&lt;td>Θ(mk)&lt;/td>
&lt;td>Θ(n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Knuth%E2%80%93Morris%E2%80%93Pratt_algorithm" target="_blank" rel="noopener">Knuth–Morris–Pratt algorithm&lt;/a>&lt;/td>
&lt;td>Θ(m)&lt;/td>
&lt;td>Θ(n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm" target="_blank" rel="noopener">Boyer–Moore string search algorithm&lt;/a>&lt;/td>
&lt;td>Θ(m + k)&lt;/td>
&lt;td>best Ω(n/m),worst O(mn)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.wikipedia.org/wiki/Bitap_algorithm" target="_blank" rel="noopener">Bitap algorithm&lt;/a> (&lt;em>shift-or&lt;/em>, &lt;em>shift-and&lt;/em>, &lt;em>Baeza–Yates–Gonnet&lt;/em>)&lt;/td>
&lt;td>Θ(m + k)&lt;/td>
&lt;td>O(mn)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="https://en.wikipedia.org/w/index.php?title=Two-way_string-matching_algorithm&amp;amp;action=edit&amp;amp;redlink=1" target="_blank" rel="noopener">Two-way string-matching algorithm&lt;/a>&lt;/td>
&lt;td>Θ(m)&lt;/td>
&lt;td>O(n+m)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BNDM (Backward Non-Deterministic Dawg Matching)&lt;/td>
&lt;td>O(m)&lt;/td>
&lt;td>O(n)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>BOM (Backward Oracle Matching)&lt;/td>
&lt;td>O(m)&lt;/td>
&lt;td>O(n)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="在线练习">在线练习&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://leetcode.com/" target="_blank" rel="noopener">LeetCode&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://vjudge.net/" target="_blank" rel="noopener">Virtual Judge&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.careercup.com/" target="_blank" rel="noopener">CareerCup&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.hackerrank.com/" target="_blank" rel="noopener">HackerRank&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://codefights.com/" target="_blank" rel="noopener">CodeFights&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="在线面试编程">在线面试编程&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="http://www.gainlo.co/#!/" target="_blank" rel="noopener">Gainlo&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="数据结构">数据结构&lt;/h2>
&lt;h3 id="linked-list">Linked List&lt;/h3>
&lt;p>_ 链表即是由节点(Node)组成的线性集合，每个节点可以利用指针指向其他节点。它是一种包含了多个节点的，能够用于表示序列的数据结构。
_ &lt;strong>Singly-linked list&lt;/strong>: 链表中的节点仅指向下一个节点。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Doubly-linked list&lt;/strong>: 链表中的节点不仅指向下一个节点，还指向前一个节点。&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>索引: &lt;code>O(n)&lt;/code>&lt;/li>
&lt;li>搜索: &lt;code>O(n)&lt;/code>&lt;/li>
&lt;li>插入: &lt;code>O(1)&lt;/code>&lt;/li>
&lt;li>移除: &lt;code>O(1)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="stack">Stack&lt;/h3>
&lt;p>_ 栈是元素的集合，其包含了两个基本操作：push 操作可以用于将元素压入栈，pop 操作可以将栈顶元素移除。
_ 遵循后入先出(LIFO)原则。&lt;/p>
&lt;ul>
&lt;li>时间复杂度:&lt;/li>
&lt;li>索引: &lt;code>O(n)&lt;/code>
_ 搜索: &lt;code>O(n)&lt;/code>
_ 插入: &lt;code>O(1)&lt;/code> * 移除: &lt;code>O(1)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="queue">Queue&lt;/h3>
&lt;p>_ 队列是元素的集合，其包含了两个基本操作：enqueue 操作可以用于将元素插入到队列中，而 dequeeu 操作则是将元素从队列中移除。
_ 遵循先入先出原则 (FIFO)。&lt;/p>
&lt;ul>
&lt;li>时间复杂度:&lt;/li>
&lt;li>索引: &lt;code>O(n)&lt;/code>
_ 搜索: &lt;code>O(n)&lt;/code>
_ 插入: &lt;code>O(1)&lt;/code> * 移除: &lt;code>O(1)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="tree">Tree&lt;/h3>
&lt;p>* 树即是无向非循环图。&lt;/p>
&lt;h3 id="binary-tree">Binary Tree&lt;/h3>
&lt;p>_ 二叉树即是每个节点最多包含左子节点与右子节点这两个节点的树形数据结构。
_ &lt;strong>满二叉树&lt;/strong>: 树中的每个节点仅包含 0 或 2 个节点。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>完美二叉树&lt;/strong>: 二叉树中的每个叶节点都拥有两个子节点，并且具有相同的高度。&lt;/li>
&lt;li>&lt;strong>完全二叉树&lt;/strong>: 除最后一层外，每一层上的结点数均达到最大值；在最后一层上只缺少右边的若干结点。&lt;/li>
&lt;/ul>
&lt;h3 id="binary-search-tree">Binary Search Tree&lt;/h3>
&lt;ul>
&lt;li>二叉搜索树(BST)是一种特殊的二叉树，其任何节点中的值都会大于或者等于其左子树中存储的值并且小于或者等于其右子树中存储的值。&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>索引: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>搜索: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>插入: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>删除: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/BST.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/BST.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h3 id="trie">Trie&lt;/h3>
&lt;ul>
&lt;li>字典树，又称基数树或者前缀树，能够用于存储键为字符串的动态集合或者关联数组的搜索树。树中的节点并没有直接存储关联键值，而是该节点在树中的挂载位置决定了其关联键值。某个节点的所有子节点都拥有相同的前缀，整棵树的根节点则是空字符串。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/trie.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/trie.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h3 id="fenwick-tree">Fenwick Tree&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>树状数组又称 Binary Indexed Tree，其表现形式为树，不过本质上是以数组实现。数组中的下标代表着树中的顶点，每个顶点的父节点或者子节点的下标能够通过位运算获得。数组中的每个元素包含了预计算的区间值之和，在整棵树更新的过程中同样会更新这些预计算的值。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>时间复杂度:&lt;/p>
&lt;ul>
&lt;li>区间求值: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>更新: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/fenwickTree.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/fenwickTree.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h3 id="segment-tree">Segment Tree&lt;/h3>
&lt;ul>
&lt;li>线段树是用于存放间隔或者线段的树形数据结构，它允许快速的查找某一个节点在若干条线段中出现的次数.&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>区间查询: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>更新: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/segmentTree.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/segmentTree.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h3 id="heap">Heap&lt;/h3>
&lt;ul>
&lt;li>堆是一种特殊的基于树的满足某些特性的数据结构，整个堆中的所有父子节点的键值都会满足相同的排序条件。堆更准确地可以分为最大堆与最小堆，在最大堆中，父节点的键值永远大于或者等于子节点的值，并且整个堆中的最大值存储于根节点；而最小堆中，父节点的键值永远小于或者等于其子节点的键值，并且整个堆中的最小值存储于根节点。&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>访问: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>搜索: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>插入: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>移除: &lt;code>O(log(n))&lt;/code>&lt;/li>
&lt;li>移除最大值 / 最小值: &lt;code>O(1)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/heap.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/heap.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h3 id="hashing">Hashing&lt;/h3>
&lt;ul>
&lt;li>哈希能够将任意长度的数据映射到固定长度的数据。哈希函数返回的即是哈希值，如果两个不同的键得到相同的哈希值，即将这种现象称为碰撞。&lt;/li>
&lt;li>&lt;strong>Hash Map&lt;/strong>: Hash Map 是一种能够建立起键与值之间关系的数据结构，Hash Map 能够使用哈希函数将键转化为桶或者槽中的下标，从而优化对于目标值的搜索速度。&lt;/li>
&lt;li>碰撞解决
&lt;ul>
&lt;li>&lt;strong>链地址法(Separate Chaining)&lt;/strong>: 链地址法中，每个桶是相互独立的，包含了一系列索引的列表。搜索操作的时间复杂度即是搜索桶的时间(固定时间)与遍历列表的时间之和。&lt;/li>
&lt;li>&lt;strong>开地址法(Open Addressing)&lt;/strong>: 在开地址法中，当插入新值时，会判断该值对应的哈希桶是否存在，如果存在则根据某种算法依次选择下一个可能的位置，直到找到一个尚未被占用的地址。所谓开地址法也是指某个元素的位置并不永远由其哈希值决定。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/hash.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/hash.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h3 id="graph">Graph&lt;/h3>
&lt;ul>
&lt;li>图是一种数据元素间为多对多关系的数据结构,加上一组基本操作构成的抽象数据类型。 - &lt;strong>无向图(Undirected Graph)&lt;/strong>: 无向图具有对称的邻接矩阵，因此如果存在某条从节点 u 到节点 v 的边，反之从 v 到 u 的边也存在。 - &lt;strong>有向图(Directed Graph)&lt;/strong>: 有向图的邻接矩阵是非对称的，即如果存在从 u 到 v 的边并不意味着一定存在从 v 到 u 的边。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/graph.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/graph.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h2 id="算法">算法&lt;/h2>
&lt;h3 id="sorting">Sorting&lt;/h3>
&lt;h4 id="快速排序">快速排序&lt;/h4>
&lt;ul>
&lt;li>稳定: 否&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>最优时间: &lt;code>O(nlog(n))&lt;/code>&lt;/li>
&lt;li>最坏时间: &lt;code>O(n^2)&lt;/code>&lt;/li>
&lt;li>平均时间: &lt;code>O(nlog(n))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/quicksort.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/quicksort.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="合并排序">合并排序&lt;/h4>
&lt;ul>
&lt;li>合并排序是典型的分治算法，它不断地将某个数组分为两个部分，分别对左子数组与右子数组进行排序，然后将两个数组合并为新的有序数组。&lt;/li>
&lt;li>稳定: 是&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>最优时间: &lt;code>O(nlog(n))&lt;/code>&lt;/li>
&lt;li>最坏时间: O(nlog(n))&lt;code>- 平均时间:&lt;/code>O(nlog(n))`&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/mergesort.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/mergesort.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="桶排序">桶排序&lt;/h4>
&lt;ul>
&lt;li>桶排序将数组分到有限数量的桶子里。每个桶子再个别排序(有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序)。&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>最优时间: &lt;code>Ω(n + k)&lt;/code>&lt;/li>
&lt;li>最坏时间: &lt;code>O(n^2)&lt;/code>&lt;/li>
&lt;li>平均时间:&lt;code>Θ(n + k)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/bucketsort.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/bucketsort.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="基数排序">基数排序&lt;/h4>
&lt;ul>
&lt;li>基数排序类似于桶排序，将数组分割到有限数目的桶中；不过其在分割之后并没有让每个桶单独地进行排序，而是直接进行了合并操作。&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>最优时间: &lt;code>Ω(nk)&lt;/code>&lt;/li>
&lt;li>最坏时间: &lt;code>O(nk)&lt;/code>&lt;/li>
&lt;li>平均时间: &lt;code>Θ(nk)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="图算法">图算法&lt;/h3>
&lt;h4 id="深度优先搜索">深度优先搜索&lt;/h4>
&lt;ul>
&lt;li>深度优先算法是一种优先遍历子节点而不是回溯的算法。&lt;/li>
&lt;li>时间复杂度: &lt;code>O(|V| + |E|)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/dfsbfs.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/dfsbfs.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="广度优先搜索">广度优先搜索&lt;/h4>
&lt;ul>
&lt;li>广度优先搜索是优先遍历邻居节点而不是子节点的图遍历算法。&lt;/li>
&lt;li>时间复杂度: &lt;code>O(|V| + |E|)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/dfsbfs.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/dfsbfs.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="拓扑排序">拓扑排序&lt;/h4>
&lt;ul>
&lt;li>拓扑排序是对于有向图节点的线性排序，如果存在某条从 u 到 v 的边，则认为 u 的下标先于 v。&lt;/li>
&lt;li>时间复杂度: &lt;code>O(|V| + |E|)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="dijkstra-算法">Dijkstra 算法&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Dijkstra 算法&lt;/em> 用于计算有向图中单源最短路径问题。&lt;/li>
&lt;li>时间复杂度: &lt;code>O(|V|^2)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/dijkstra.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/dijkstra.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="bellman-ford-算法">Bellman-Ford 算法&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Bellman-Ford 算法&lt;/em> 是在带权图中计算从单一源点出发到其他节点的最短路径的算法。&lt;/li>
&lt;li>尽管算法复杂度大于 Dijkstra 算法，但是它适用于包含了负值边的图。&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>最优时间: &lt;code>O(|E|)&lt;/code>&lt;/li>
&lt;li>最坏时间: &lt;code>O(|V||E|)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/bellman-ford.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/bellman-ford.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="floyd-warshall-算法">Floyd-Warshall 算法&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Floyd-Warshall 算法&lt;/em> 能够用于在无环带权图中寻找任意节点的最短路径。&lt;/li>
&lt;li>时间复杂度:
&lt;ul>
&lt;li>最优时间: &lt;code>O(|V|^3)&lt;/code>&lt;/li>
&lt;li>最坏时间: &lt;code>O(|V|^3)&lt;/code>&lt;/li>
&lt;li>平均时间: &lt;code>O(|V|^3)&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h4 id="prim-算法">Prim 算法&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Prim&amp;rsquo;s 算法&lt;/em>是用于在带权无向图中计算最小生成树的贪婪算法。换言之，Prim 算法能够在图中抽取出连接所有节点的边的最小代价子集。&lt;/li>
&lt;li>时间复杂度: &lt;code>O(|V|^2)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/prim.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/prim.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="kruskal-算法">Kruskal 算法&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Kruskal 算法&lt;/em> 同样是计算图的最小生成树的算法，与 Prim 的区别在于并不需要图是连通的。&lt;/li>
&lt;li>时间复杂度: &lt;code>O(|E|log|V|)&lt;/code>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/kruskal.gif?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/kruskal.gif?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h2 id="位运算">位运算&lt;/h2>
&lt;ul>
&lt;li>位运算即是在位级别进行操作的技术，合适的位运算能够帮助我们得到更快地运算速度与更小的内存使用。&lt;/li>
&lt;li>测试第 k 位: &lt;code>s &amp;amp; (1 &amp;lt;&amp;lt; k)&lt;/code>&lt;/li>
&lt;li>设置第 k 位: &lt;code>s |= (1 &amp;lt;&amp;lt; k)&lt;/code>&lt;/li>
&lt;li>第 k 位置零: &lt;code>s &amp;amp;= ~(1 &amp;lt;&amp;lt; k)&lt;/code>&lt;/li>
&lt;li>切换第 k 位值: &lt;code>s ^= ~(1 &amp;lt;&amp;lt; k)&lt;/code>&lt;/li>
&lt;li>乘以 2: &lt;code>s &amp;lt;&amp;lt; n&lt;/code>&lt;/li>
&lt;li>除以 2: &lt;code>s &amp;gt;&amp;gt; n&lt;/code>&lt;/li>
&lt;li>交集: &lt;code>s &amp;amp; t&lt;/code>&lt;/li>
&lt;li>并集: &lt;code>s | t&lt;/code>&lt;/li>
&lt;li>减法: &lt;code>s &amp;amp; ~t&lt;/code>&lt;/li>
&lt;li>交换 &lt;code>x = x ^ y ^ (y = x)&lt;/code>&lt;/li>
&lt;li>Extract lowest set bit: &lt;code>s &amp;amp; (-s)&lt;/code>&lt;/li>
&lt;li>Extract lowest unset bit: &lt;code>~s &amp;amp; (s + 1)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="算法复杂度分析">算法复杂度分析&lt;/h2>
&lt;h4 id="大-o-表示">大 O 表示&lt;/h4>
&lt;ul>
&lt;li>&lt;em>大 O 表示&lt;/em> 用于表示某个算法的上限，往往用于描述最坏的情况。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/bigO.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/bigO.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="小-o-表示">小 O 表示&lt;/h4>
&lt;ul>
&lt;li>&lt;em>小 O 表示&lt;/em> 用于描述某个算法的渐进上界，不过二者要更为紧密。&lt;/li>
&lt;/ul>
&lt;h4 id="大-ω-表示">大 Ω 表示&lt;/h4>
&lt;ul>
&lt;li>&lt;em>大 Ω 表示&lt;/em> 用于描述某个算法的渐进下界。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/bigOmega.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/bigOmega.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h4 id="小-ω-表示">小 ω 表示&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Little Omega Notation&lt;/em> 用于描述某个特定算法的下界，不过不一定很靠近。&lt;/li>
&lt;/ul>
&lt;h4 id="theta-θ-表示">Theta Θ 表示&lt;/h4>
&lt;ul>
&lt;li>&lt;em>Theta Notation&lt;/em> 用于描述某个确定算法的确界。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/kdn251/interviews/blob/master/Images/theta.png?raw=true" target="_blank" rel="noopener">
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://github.com/kdn251/interviews/raw/master/Images/theta.png?raw=true" alt="Alt text" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/a>&lt;/p>
&lt;h2 id="视频教程">视频教程&lt;/h2>
&lt;ul>
&lt;li>Data Structures
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=mFPmKGIrQs4&amp;amp;index=1&amp;amp;list=PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd" target="_blank" rel="noopener">UC Berkeley Data Structures&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=T0yzrZL1py0&amp;amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;amp;index=1" target="_blank" rel="noopener">MIT Advanced Data Structures&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Algorithms
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=HtSuA80QTyo&amp;amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;amp;index=1" target="_blank" rel="noopener">MIT Introduction to Algorithms&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c" target="_blank" rel="noopener">MIT Advanced Algorithms&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="面试书籍">面试书籍&lt;/h2>
&lt;ul>
&lt;li>Competitive Programming 3 - Steven Halim &amp;amp; Felix Halim&lt;/li>
&lt;li>Cracking The Coding Interview - Gayle Laakmann McDowell&lt;/li>
&lt;li>Cracking The PM Interview - Gayle Laakmann McDowell &amp;amp; Jackie Bavaro&lt;/li>
&lt;/ul>
&lt;h2 id="计算机科学与技术资讯">计算机科学与技术资讯&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="文件结构">文件结构&lt;/h2>
&lt;pre tabindex="0">&lt;code>.
├── Array
│ ├── bestTimeToBuyAndSellStock.java
│ ├── findTheCelebrity.java
│ ├── gameOfLife.java
│ ├── increasingTripletSubsequence.java
│ ├── insertInterval.java
│ ├── longestConsecutiveSequence.java
│ ├── maximumProductSubarray.java
│ ├── maximumSubarray.java
│ ├── mergeIntervals.java
│ ├── missingRanges.java
│ ├── productOfArrayExceptSelf.java
│ ├── rotateImage.java
│ ├── searchInRotatedSortedArray.java
│ ├── spiralMatrixII.java
│ ├── subsetsII.java
│ ├── subsets.java
│ ├── summaryRanges.java
│ ├── wiggleSort.java
│ └── wordSearch.java
├── Backtracking
│ ├── androidUnlockPatterns.java
│ ├── generalizedAbbreviation.java
│ └── letterCombinationsOfAPhoneNumber.java
├── BinarySearch
│ ├── closestBinarySearchTreeValue.java
│ ├── firstBadVersion.java
│ ├── guessNumberHigherOrLower.java
│ ├── pow(x,n).java
│ └── sqrt(x).java
├── BitManipulation
│ ├── binaryWatch.java
│ ├── countingBits.java
│ ├── hammingDistance.java
│ ├── maximumProductOfWordLengths.java
│ ├── numberOf1Bits.java
│ ├── sumOfTwoIntegers.java
│ └── utf-8Validation.java
├── BreadthFirstSearch
│ ├── binaryTreeLevelOrderTraversal.java
│ ├── cloneGraph.java
│ ├── pacificAtlanticWaterFlow.java
│ ├── removeInvalidParentheses.java
│ ├── shortestDistanceFromAllBuildings.java
│ ├── symmetricTree.java
│ └── wallsAndGates.java
├── DepthFirstSearch
│ ├── balancedBinaryTree.java
│ ├── battleshipsInABoard.java
│ ├── convertSortedArrayToBinarySearchTree.java
│ ├── maximumDepthOfABinaryTree.java
│ ├── numberOfIslands.java
│ ├── populatingNextRightPointersInEachNode.java
│ └── sameTree.java
├── Design
│ └── zigzagIterator.java
├── DivideAndConquer
│ ├── expressionAddOperators.java
│ └── kthLargestElementInAnArray.java
├── DynamicProgramming
│ ├── bombEnemy.java
│ ├── climbingStairs.java
│ ├── combinationSumIV.java
│ ├── countingBits.java
│ ├── editDistance.java
│ ├── houseRobber.java
│ ├── paintFence.java
│ ├── paintHouseII.java
│ ├── regularExpressionMatching.java
│ ├── sentenceScreenFitting.java
│ ├── uniqueBinarySearchTrees.java
│ └── wordBreak.java
├── HashTable
│ ├── binaryTreeVerticalOrderTraversal.java
│ ├── findTheDifference.java
│ ├── groupAnagrams.java
│ ├── groupShiftedStrings.java
│ ├── islandPerimeter.java
│ ├── loggerRateLimiter.java
│ ├── maximumSizeSubarraySumEqualsK.java
│ ├── minimumWindowSubstring.java
│ ├── sparseMatrixMultiplication.java
│ ├── strobogrammaticNumber.java
│ ├── twoSum.java
│ └── uniqueWordAbbreviation.java
├── Linked List
│ ├── addTwoNumbers.java
│ ├── deleteNodeInALinkedList.java
│ ├── mergeKSortedLists.java
│ ├── palindromeLinkedList.java
│ ├── plusOneLinkedList.java
│ ├── README.md
│ └── reverseLinkedList.java
├── Queue
│ └── movingAverageFromDataStream.java
├── README.md
├── Sort
│ ├── meetingRoomsII.java
│ └── meetingRooms.java
├── Stack
│ ├── binarySearchTreeIterator.java
│ ├── decodeString.java
│ ├── flattenNestedListIterator.java
│ └── trappingRainWater.java
├── String
│ ├── addBinary.java
│ ├── countAndSay.java
│ ├── decodeWays.java
│ ├── editDistance.java
│ ├── integerToEnglishWords.java
│ ├── longestPalindrome.java
│ ├── longestSubstringWithAtMostKDistinctCharacters.java
│ ├── minimumWindowSubstring.java
│ ├── multiplyString.java
│ ├── oneEditDistance.java
│ ├── palindromePermutation.java
│ ├── README.md
│ ├── reverseVowelsOfAString.java
│ ├── romanToInteger.java
│ ├── validPalindrome.java
│ └── validParentheses.java
├── Tree
│ ├── binaryTreeMaximumPathSum.java
│ ├── binaryTreePaths.java
│ ├── inorderSuccessorInBST.java
│ ├── invertBinaryTree.java
│ ├── lowestCommonAncestorOfABinaryTree.java
│ ├── sumOfLeftLeaves.java
│ └── validateBinarySearchTree.java
├── Trie
│ ├── addAndSearchWordDataStructureDesign.java
│ ├── implementTrie.java
│ └── wordSquares.java
└── TwoPointers
├── 3Sum.java
├── 3SumSmaller.java
├── mergeSortedArray.java
├── minimumSizeSubarraySum.java
├── moveZeros.java
├── removeDuplicatesFromSortedArray.java
├── reverseString.java
└── sortColors.java
18 directories, 124 files
&lt;/code>&lt;/pre></description></item></channel></rss>