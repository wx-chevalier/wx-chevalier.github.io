<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CG | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-cheatsheets/2.frontend/cg/</link><atom:link href="https://ng-tech.icu/books/awesome-cheatsheets/2.frontend/cg/index.xml" rel="self" type="application/rss+xml"/><description>CG</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>CG</title><link>https://ng-tech.icu/books/awesome-cheatsheets/2.frontend/cg/</link></image><item><title>FFmpeg-CheatSheet</title><link>https://ng-tech.icu/books/awesome-cheatsheets/2.frontend/cg/ffmpeg-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cheatsheets/2.frontend/cg/ffmpeg-cheatsheet/</guid><description>&lt;h1 id="ffmpeg-cheatsheet">FFmpeg CheatSheet&lt;/h1>
&lt;h1 id="基础使用">基础使用&lt;/h1>
&lt;p>FFmpeg 可以使用下面的参数进行基本信息查询。例如，想查询一下现在使用的 FFmpeg 都支持哪些 filter，就可以用 ffmpeg -filters 来查询。详细参数说明如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>ffmpeg -version&lt;/td>
&lt;td>显示版本&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-formats&lt;/td>
&lt;td>显示可用的格式（包括设备）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-demuxers&lt;/td>
&lt;td>显示可用的 demuxers&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-muxers&lt;/td>
&lt;td>显示可用的 muxers&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-devices&lt;/td>
&lt;td>显示可用的设备&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-codecs&lt;/td>
&lt;td>显示已知的所有编解码器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-decoders&lt;/td>
&lt;td>显示可用的解码器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-encoders&lt;/td>
&lt;td>显示所有可用的编码器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-bsfs&lt;/td>
&lt;td>显示可用的比特流 filter&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-protocols&lt;/td>
&lt;td>显示可用的协议&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-filters&lt;/td>
&lt;td>显示可用的过滤器&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-pix_fmts&lt;/td>
&lt;td>显示可用的像素格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-sample_fmts&lt;/td>
&lt;td>显示可用的采样格式&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-layouts&lt;/td>
&lt;td>显示 channel 名称和标准 channel 布局&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-colors&lt;/td>
&lt;td>显示识别的颜色名称&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="参数">参数&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Common switches&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-codecs &lt;span class="c1"># list codecs&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c:v &lt;span class="c1"># video codec (-vcodec): &amp;#39;copy&amp;#39; to copy stream&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c:a &lt;span class="c1"># audio codec (-acodec)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-fs SIZE &lt;span class="c1"># limit file size (bytes)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Audio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-aq QUALITY &lt;span class="c1"># audio quality (codec-specific)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-ar &lt;span class="m">44100&lt;/span> &lt;span class="c1"># audio sample rate (hz)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-ac &lt;span class="m">1&lt;/span> &lt;span class="c1"># audio channels (1=mono, 2=stereo)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-an &lt;span class="c1"># no audio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-vol N &lt;span class="c1"># volume (256=normal)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Bitrate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-b:v 1M &lt;span class="c1"># video bitrate (1M = 1Mbit/s)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-b:a 1M &lt;span class="c1"># audio bitrate&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Video&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-aspect RATIO &lt;span class="c1"># aspect ratio (4:3, 16:9, or 1.25)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r RATE &lt;span class="c1"># frame rate per sec&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-s WIDTHxHEIGHT &lt;span class="c1"># frame size&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-vn &lt;span class="c1"># no video&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="录制">录制&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查找设备名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## Windows&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -list_devices &lt;span class="nb">true&lt;/span> -f dshow -i dummy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">## MAC&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f avfoundation -list_devices &lt;span class="nb">true&lt;/span> -i &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="windows">Windows&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="nx">ffmpeg&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="nx">dshow&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="nx">video&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;Virtual-Camera&amp;#34;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">preset&lt;/span> &lt;span class="nx">ultrafast&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">vcodec&lt;/span> &lt;span class="nx">libx264&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">tune&lt;/span> &lt;span class="nx">zerolatency&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="mi">900&lt;/span>&lt;span class="nx">k&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="nx">mpegts&lt;/span> &lt;span class="nx">udp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//10.1.0.102:1234
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">$&lt;/span> &lt;span class="nx">ffmpeg&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="nx">dshow&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">i&lt;/span> &lt;span class="nx">video&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;screen-capture-recorder&amp;#34;&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">audio&lt;/span>&lt;span class="p">=&lt;/span>&lt;span class="s">&amp;#34;Stereo Mix (IDT High Definition&amp;#34;&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="nx">vcodec&lt;/span> &lt;span class="nx">libx264&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">preset&lt;/span> &lt;span class="nx">ultrafast&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">tune&lt;/span> &lt;span class="nx">zerolatency&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">async&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">acodec&lt;/span> &lt;span class="nx">libmp3lame&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">ab&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="nx">k&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">ar&lt;/span> &lt;span class="mi">22050&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">bsf&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="nx">v&lt;/span> &lt;span class="nx">h264_mp4toannexb&lt;/span> \
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">-&lt;/span>&lt;span class="nx">maxrate&lt;/span> &lt;span class="mi">750&lt;/span>&lt;span class="nx">k&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">bufsize&lt;/span> &lt;span class="mi">3000&lt;/span>&lt;span class="nx">k&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">f&lt;/span> &lt;span class="nx">mpegts&lt;/span> &lt;span class="nx">udp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="c1">//192.168.5.215:48550
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>&lt;code>-f fshow&lt;/code>: windows system drivers for capturing video and audio&lt;/li>
&lt;li>&lt;code>-f v4l2&lt;/code>: linux system drivers for capturing video&lt;/li>
&lt;li>&lt;code>-f alsa&lt;/code>: linux system drivers for capturing audio&lt;/li>
&lt;li>&lt;code>-i&lt;/code>: ffmpeg option that defines &lt;strong>input&lt;/strong>&lt;/li>
&lt;li>&lt;code>-vcodec libx264&lt;/code>: raw video from camera will be encoded using H264 video codec&lt;/li>
&lt;li>&lt;code>-r 10&lt;/code>: video FPS (frames per second)&lt;/li>
&lt;li>&lt;code>-b:v 512k&lt;/code>: video bitrate Kb/s (kilo bits per second)&lt;/li>
&lt;li>&lt;code>-s 640x360&lt;/code>: video width and height&lt;/li>
&lt;li>&lt;code>-acodec aac&lt;/code>: raw audio from microphone will be encoded using AAC audio codec&lt;/li>
&lt;li>&lt;code>-ac 2&lt;/code>: 2 audio channels (stereo)&lt;/li>
&lt;li>&lt;code>-ab 32k&lt;/code>: audio bitrate in Kb/s&lt;/li>
&lt;li>&lt;code>-ar 44100&lt;/code>: audio sampling rate 44.1 KHz&lt;/li>
&lt;li>&lt;code>-f mpegts&lt;/code>: video and audio will be packed into &lt;a href="https://en.wikipedia.org/wiki/MPEG_transport_stream" target="_blank" rel="noopener">MPEG transport stream (MPEG TS)&lt;/a>&lt;/li>
&lt;li>&lt;code>udp://192.168.1.4:5000&lt;/code>: MPEG transport stream is sent via UDP protocol to computer with IP address 192.168.1.4 on IP port 5000.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -y -loglevel warning -f dshow -i &lt;span class="nv">video&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;screen-capture-recorder&amp;#34;&lt;/span> -vf &lt;span class="nv">crop&lt;/span>&lt;span class="o">=&lt;/span>690:388:136:0 -r &lt;span class="m">30&lt;/span> -s 962x388 -threads &lt;span class="m">2&lt;/span> -vcodec libx264 -vpre baseline -vpre my_ffpreset -f flv rtmp:///live/myStream.sdp
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 输出为 MP4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f dshow -rtbufsize 1000000k -s 640×480 -r &lt;span class="m">30&lt;/span> -i &lt;span class="nv">video&lt;/span>&lt;span class="o">=&lt;/span>”1714-INOGENI 4K2USB3″ -an -c:v libx264 -q &lt;span class="m">0&lt;/span> -f h264 – &lt;span class="p">|&lt;/span> ffmpeg -f h264 -i – -an -c:v copy -f mp4 file.mp4 -an -c:v copy -f h264 pipe:play &lt;span class="p">|&lt;/span> ffplay -i pipe:play
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>屏幕录制：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 屏幕录制并保存成文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f gdigrab -i desktop eguid.mp4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 屏幕录制并推流&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f gdigrab -i desktop -vcodec libx264 -preset:v ultrafast -tune:v zerolatency -f flv rtmp://eguid.cc:1935/rtmp/destop
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 视频文件推流&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -re -i eguid.flv -vcodec copy -acodec copy -f flv -y rtmp://eguid.cc:1935/rtmp/eguid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 转流（rtsp转rtmp为例）&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -i rtsp://184.72.239.149/vod/mp4://BigBuckBunny_175k.mov -rtsp_transport tcp -vcodec h264 -acodec aac -f flv rtmp://eguid.cc:1935/rtmp/eguid
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 拉流&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">- ffmpeg -i rtmp://eguid.cc:1935/rtmp/eguid -vcodec h264 -f flv -acodec aac -ac &lt;span class="m">2&lt;/span> eguid.flv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="mac">Mac&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 录屏+声音&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f avfoundation -i &lt;span class="m">1&lt;/span> -r &lt;span class="m">30&lt;/span> out.yuv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-f 指定使用 avfoundation 采集数据。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i 指定从哪儿采集数据，它是一个文件索引号。在我的MAC上，1代表桌面（可以通过上面的命令查询设备索引号）。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-r 指定帧率。按ffmpeg官方文档说-r与-framerate作用相同，但实际测试时发现不同。-framerate 用于限制输入，而-r用于限制输出。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 录视频&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f avfoundation -i 1:0 -r 29.97 -c:v libx264 -crf &lt;span class="m">0&lt;/span> -c:a libfdk_aac -profile:a aac_he_v2 -b:a 32k out.flv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-i 1:0 冒号前面的 “1” 代表的屏幕索引号。冒号后面的&lt;span class="s2">&amp;#34;0&amp;#34;&lt;/span>代表的声音索相号。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c:v 与参数 -vcodec 一样，表示视频编码器。c 是 codec 的缩写，v 是video的缩写。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-crf 是 x264 的参数。0 表式无损压缩。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-c:a 与参数 -acodec 一样，表示音频编码器。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-profile 是 fdk_aac 的参数。aac_he_v2 表式使用 AAC_HE v2 压缩数据。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-b:a 指定音频码率。b 是 bitrate的缩写, a是 audio的缩与。
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 录音&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f avfoundation -i :0 out.wav
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 录制音频裸数据&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f avfoundation -i :0 -ar &lt;span class="m">44100&lt;/span> -f s16le out.pcm
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#! /bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Diffusion bilibili live avec ffmpeg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Make sure you have FFmpeg installed in your mac&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># list avfoundation devices&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ffmpeg -f avfoundation -list_devices &lt;span class="nb">true&lt;/span> -i &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># change the param after `-i` and `-f flv`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># use 140m mermory&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ffmpeg &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -f avfoundation &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -re -i &lt;span class="s2">&amp;#34;2&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -vcodec libx264 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -preset ultrafast &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -acodec aac &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -ar &lt;span class="m">44100&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -ac &lt;span class="m">1&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -f flv &lt;span class="s2">&amp;#34;rtmp://example.com/path?key=xx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 560m mermory 90% cpu&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ffmpeg &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -f avfoundation &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -video_size 1920x1080 &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -framerate &lt;span class="m">30&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -i &lt;span class="s2">&amp;#34;2:0&amp;#34;&lt;/span> -ac &lt;span class="m">2&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -vcodec libx264 -maxrate 2000k &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -bufsize 2000k -acodec libmp3lame -ar &lt;span class="m">44100&lt;/span> -b:a 128k &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -f flv &lt;span class="s2">&amp;#34;rtmp://example.com/path?key=xx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="其他直播">其他直播&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>推流: &lt;code>ffmpeg -re -i out.mp4 -c copy -f flv rtmp://server/live/streamName&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>拉流保存: &lt;code>ffmpeg -i rtmp://server/live/streamName -c copy dump.flv&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>转流: &lt;code>ffmpeg -i rtmp://server/live/originalStream -c:a copy -c:v copy -f flv rtmp://server/live/h264Stream&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实时推流: &lt;code>ffmpeg -framerate 15 -f avfoundation -i &amp;quot;1&amp;quot; -s 1280x720 -c:v libx264 -f flv rtmp://localhost:1935/live/room&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="视频处理">视频处理&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -framerate &lt;span class="m">1&lt;/span> -pattern_type glob -i &lt;span class="s1">&amp;#39;*.bmp&amp;#39;&lt;/span> -c:v libx264 -r &lt;span class="m">30&lt;/span> -pix_fmt yuv420p out.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="视频联接">视频联接&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">:: Create File List
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> file file1.mp4 &amp;gt; mylist.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> file file2.mp4 &amp;gt;&amp;gt; mylist.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> file file3.mp4 &amp;gt;&amp;gt; mylist.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Windows 下视频连接&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:: Concatenate Files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f concat -i mylist.txt -c copy output.mp4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:: Create File List
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> %%i in &lt;span class="o">(&lt;/span>*.mp4&lt;span class="o">)&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> file &lt;span class="s1">&amp;#39;%%i&amp;#39;&lt;/span>&amp;gt;&amp;gt; mylist.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">:: Concatenate Files
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f concat -safe &lt;span class="m">0&lt;/span> -i mylist.txt -c copy output.mp4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ ffmpeg -f avfoundation -i &lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span> -framerate &lt;span class="m">30&lt;/span> -f avfoundation -i &lt;span class="s2">&amp;#34;0:0&amp;#34;&lt;/span> -r &lt;span class="m">30&lt;/span> -c:v libx264 -preset ultrafast -c:a libfdk_aac -profile:a aac_he_v2 -ar &lt;span class="m">44100&lt;/span> -ac &lt;span class="m">2&lt;/span> -filter_complex &lt;span class="s2">&amp;#34;[0:v]scale=320:240[a];[a]pad=640:240[b];[b][1:v]overlay=320:0[out]&amp;#34;&lt;/span> -map &lt;span class="s2">&amp;#34;[out]&amp;#34;&lt;/span> -movflags faststart -map 1:a c.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="分解复用">分解/复用&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>抽取音频流&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i input.mp4 -acodec copy -vn out.aac&lt;/code>&lt;/p>
&lt;p>acodec: 指定音频编码器，copy 指明只拷贝，不做编解码。
vn: v 代表视频，n 代表 no 也就是无视频的意思。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>抽取视频流&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i input.mp4 -vcodec copy -an out.h264&lt;/code>&lt;/p>
&lt;p>vcodec: 指定视频编码器，copy 指明只拷贝，不做编解码。
an: a 代表视频，n 代表 no 也就是无音频的意思。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>转格式&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i out.mp4 -vcodec copy -acodec copy out.flv&lt;/code>&lt;/p>
&lt;p>上面的命令表式的是音频、视频都直接 copy，只是将 mp4 的封装格式转成了 flv。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>音视频合并&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i out.h264 -i out.aac -vcodec copy -acodec copy out.mp4&lt;/code>&lt;/p>
&lt;h2 id="格式转换与压缩">格式转换与压缩&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -i in.mp4 out.avi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -i foo.mp3 -ac &lt;span class="m">1&lt;/span> -ab &lt;span class="m">128000&lt;/span> -f mp4 -acodec libfaac -y target.m4r
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># no audio&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ffmpeg -i input.mov -vcodec h264 -an -strict -2 output.mp4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ffmpeg -i input.mov -vcodec libvpx -an output.webm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ffmpeg -i input.mov -vcodec h264 -acodec aac -strict -2 output.mp4
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ffmpeg -i input.mov -vcodec libvpx -acodec libvorbis output.webm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;video &lt;span class="nv">width&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;320&amp;#34;&lt;/span> &lt;span class="nv">height&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;240&amp;#34;&lt;/span> controls&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;&lt;span class="nb">source&lt;/span> &lt;span class="nv">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;movie.mp4&amp;#34;&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;video/mp4&amp;#39;&lt;/span>&amp;gt;&amp;lt;/source&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &amp;lt;&lt;span class="nb">source&lt;/span> &lt;span class="nv">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;movie.webm&amp;#34;&lt;/span> &lt;span class="nv">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;video/ogg&amp;#39;&lt;/span>&amp;gt;&amp;lt;/source&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;lt;/video&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>视频缩小一倍&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -i out.mp4 -vf &lt;span class="nv">scale&lt;/span>&lt;span class="o">=&lt;/span>iw/2:-1 scale.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-vf scale&lt;/code> 指定使用简单过滤器 scale，iw/2:-1 中的 iw 指定按整型取视频的宽度。-1 表示高度随宽度一起变化。&lt;/p>
&lt;ul>
&lt;li>视频裁剪&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -i VR.mov -vf &lt;span class="nv">crop&lt;/span>&lt;span class="o">=&lt;/span>in_w-200:in_h-200 -c:v libx264 -c:a copy -video_size 1280x720 vr_new.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>crop 格式：crop=out_w:out_h: x :y&lt;/p>
&lt;ul>
&lt;li>
&lt;p>out_w: 输出的宽度。可以使用 in_w 表式输入视频的宽度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>out_h: 输出的高度。可以使用 in_h 表式输入视频的高度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>x : X 坐标&lt;/p>
&lt;/li>
&lt;li>
&lt;p>y : Y 坐标&lt;/p>
&lt;/li>
&lt;li>
&lt;p>倍速播放&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -i out.mp4 -filter_complex &lt;span class="s2">&amp;#34;[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]&amp;#34;&lt;/span> -map &lt;span class="s2">&amp;#34;[v]&amp;#34;&lt;/span> -map &lt;span class="s2">&amp;#34;[a]&amp;#34;&lt;/span> speed2.0.mp4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>-filter_complex 复杂滤镜，[0:v]表示第一个（文件索引号是 0）文件的视频作为输入。&lt;code>setpts=0.5*PTS&lt;/code> 表示每帧视频的 pts 时间戳都乘 0.5，也就是差少一半。[v]表示输出的别名。音频同理就不详述了。&lt;/li>
&lt;li>map 可用于处理复杂输出，如可以将指定的多路流输出到一个输出文件，也可以指定输出到多个文件。&amp;quot;[v]&amp;quot; 复杂滤镜输出的别名作为输出文件的一路流。上面 map 的用法是将复杂滤镜输出的视频和音频输出到指定文件中。&lt;/li>
&lt;/ul>
&lt;h3 id="图视互转">图/视互转&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>视频转 JPEG&lt;/strong>：&lt;code>ffmpeg -i test.flv -r 1 -f image2 image-%3d.jpeg&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>视频转 gif&lt;/strong>：&lt;code>ffmpeg -i out.mp4 -ss 00:00:00 -t 10 out.gif&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>图片转视频&lt;/strong>：&lt;code>ffmpeg -f image2 -i image-%3d.jpeg images.mp4&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="对称视频与画中画">对称视频与画中画&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>对称视频：&lt;code>$ ffmpeg -i out.mp4 -filter_complex &amp;quot;[0:v]pad=w=2*iw[a];[0:v]hflip[b];[a][b]overlay=x=w&amp;quot; duicheng.mp4&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>画中画：&lt;code>ffmpeg -i out.mp4 -i out1.mp4 -filter_complex &amp;quot;[1:v]scale=w=176:h=144:force_original_aspect_ratio=decrease[ckout];[0:v][ckout]overlay=x=W-w-10:y=0[out]&amp;quot; -map &amp;quot;[out]&amp;quot; -movflags faststart new.mp4&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>录制画中画：&lt;code>ffmpeg -f avfoundation -i &amp;quot;1&amp;quot; -framerate 30 -f avfoundation -i &amp;quot;0:0&amp;quot; -r 30 -c:v libx264 -preset ultrafast -c:a libfdk_aac -profile:a aac_he_v2 -ar 44100 -ac 2 -filter_complex &amp;quot;[1:v]scale=w=176:h=144:force_original_aspect_ratio=decrease[a];[0:v][a]overlay=x=W-w-10:y=0[out]&amp;quot; -map &amp;quot;[out]&amp;quot; -movflags faststart -map 1:a b.mp4&lt;/code>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="处理原始数据">处理原始数据&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>提取 YUV 数据&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i input.mp4 -an -c:v rawvideo -pixel_format yuv420p out.yuv ffplay -s wxh out.yuv&lt;/code>&lt;/p>
&lt;p>-c:v rawvideo 指定将视频转成原始数据
-pixel_format yuv420p 指定转换格式为 yuv420p&lt;/p>
&lt;ul>
&lt;li>&lt;strong>YUV 转 H264&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -f rawvideo -pix_fmt yuv420p -s 320x240 -r 30 -i out.yuv -c:v libx264 -f rawvideo out.h264&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>提取 PCM 数据&lt;/strong>&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i out.mp4 -vn -ar 44100 -ac 2 -f s16le out.pcm ffplay -ar 44100 -ac 2 -f s16le -i out.pcm&lt;/code>&lt;/p>
&lt;h1 id="滤镜">滤镜&lt;/h1>
&lt;p>在编码之前，ffmpeg 可以使用 libavfilter 库中的过滤器处理原始音频和视频帧。几个链式过滤器形成一个过滤器图形。ffmpeg 区分两种类型的过滤器图形：简单和复杂。&lt;/p>
&lt;h2 id="水印">水印&lt;/h2>
&lt;ul>
&lt;li>添加水印&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i out.mp4 -vf &amp;quot;movie=logo.png,scale=64:48[watermask];[in][watermask] overlay=30:10 [out]&amp;quot; water.mp4&lt;/code>&lt;/p>
&lt;p>&lt;code>-vf&lt;/code> 中的 movie 指定 logo 位置。scale 指定 logo 大小。overlay 指定 logo 摆放的位置。&lt;/p>
&lt;ul>
&lt;li>滤镜加水印&lt;/li>
&lt;/ul>
&lt;p>&lt;code>ffmpeg -i killer.mp4 -filter_complex &amp;quot;movie=./logo/daka.png,scale=64:48[w];[0:v]curves=vintage[o];[o][w]overlay=30:10[out]&amp;quot; -map &amp;quot;[out]&amp;quot; -map 0:a test1.mp4&lt;/code>&lt;/p>
&lt;ul>
&lt;li>删除水印&lt;/li>
&lt;/ul>
&lt;p>先通过 ffplay 找到要删除 LOGO 的位置。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffplay -i test.flv -vf &lt;span class="nv">delogo&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="o">=&lt;/span>806:y&lt;span class="o">=&lt;/span>20:w&lt;span class="o">=&lt;/span>70:h&lt;span class="o">=&lt;/span>80:show&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 delogo 滤镜删除 LOGO。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ ffmpeg -i test.flv -vf &lt;span class="nv">delogo&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="o">=&lt;/span>806:y&lt;span class="o">=&lt;/span>20:w&lt;span class="o">=&lt;/span>70:h&lt;span class="o">=&lt;/span>&lt;span class="m">80&lt;/span> output.flv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Three.js-CheatSheet</title><link>https://ng-tech.icu/books/awesome-cheatsheets/2.frontend/cg/three.js-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cheatsheets/2.frontend/cg/three.js-cheatsheet/</guid><description>&lt;h1 id="threejs-cheatsheet--threejs-入门与实践">Three.js CheatSheet | Three.js 入门与实践&lt;/h1>
&lt;p>OpenGL 是最常用的跨平台图形库；WebGL 是基于 OpenGL 设计的面向 web 的图形标准，提供了一系列 JavaScript API，通过这些 API 进行图形渲染将得以利用图形硬件从而获得较高性能。而 Three.js 是通过对 WebGL 接口的封装与简化而形成的一个易用的图形库。WebGL 门槛相对较高，需要相对较多的数学知识。虽然 WebGL 提供的是面向前端的 API，但本质上 WebGL 跟前端开发完全是两个不同的方向，知识的重叠很少。&lt;/p>
&lt;h1 id="基本概念">基本概念&lt;/h1>
&lt;p>Scene 场景，即构建的三维空间。&lt;/p>
&lt;h2 id="camera">Camera&lt;/h2>
&lt;p>Camera，即选定的观察点，确定观察方向/角度等。首先我们要描述空间中的位置，Three.js 中使用采用常见的右手坐标系定位。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/42416327-53bf587a-829e-11e8-8a09-a06a76578db1.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>接下来要确定三维投影方式，视景体是一个几何体，只有视景体内的物体才会被我们看到，视景体之外的物体将被裁剪掉。这是为了去除不必要的运算。Three 中的相机有两种，分别是正投影相机 THREE.OrthographicCamera 和透视投影相机 THREE.PerspectiveCamera。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/42416337-8875c978-829e-11e8-85d0-54c1194f3524.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>正交投影与透视投影的区别如上图所示，左图是正交投影，物体发出的光平行地投射到屏幕上，远近的方块都是一样大的；右图是透视投影，近大远小，符合我们平时看东西的感觉。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/42416347-bc035fc6-829e-11e8-8830-36f1419f322b.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>正交投影相机的视景体是一个长方体，OrthographicCamera 的构造函数是这样的：OrthographicCamera( left, right, top, bottom, near, far )
Camera 本身可以看作是一个点，left 则表示左平面在左右方向上与 Camera 的距离。另外几个参数同理。于是六个参数分别定义了视景体六个面的位置。可以近似地认为，视景体里的物体平行投影到近平面上，然后近平面上的图像被渲染到屏幕上。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/42416362-dc512808-829e-11e8-8d45-670d4a3e690b.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>透视投影相机的视景体是个四棱台，它的构造函数是这样的：PerspectiveCamera( fov, aspect, near, far )
fov 对应着图中的视角，是上下两面的夹角。aspect 是近平面的宽高比。在加上近平面距离 near，远平面距离 far，就可以唯一确定这个视景体了。透视投影相机很符合我们通常的看东西的感觉，因此大多数情况下我们都是用透视投影相机展示 3D 效果。&lt;/p>
&lt;h2 id="objects">Objects&lt;/h2>
&lt;p>Three 中供显示的物体有很多，它们都继承自 Object3D 类，这里我们主要看一下 Mesh 和 Points 两种。一条弧线是由有限个点构成的有限条线段连接得到的。线段很多时，看起来就是一条平滑的弧线了。计算机中的三维模型也是类似的，普遍的做法是用三角形组成的网格来描述，我们把这种模型称之为 Mesh 模型。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://user-images.githubusercontent.com/5803001/42416375-1492da36-829f-11e8-9993-b628d06d22c1.png" alt="image" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>这是那只著名的斯坦福兔子。它在 3D 图形中的地位与数字图像处理领域中著名的 lena 是类似的。看这只兔子，随着三角形数量的增加，它的表面越来越平滑/准确。在 Three 中，Mesh 的构造函数是这样的：&lt;code>Mesh(geometry, material)&lt;/code> geometry 是它的形状，material 是它的材质。Geometry 通过存储模型用到的点集和点间关系(哪些点构成一个三角形)来达到描述物体形状的目的。Three 提供了立方体(其实是长方体)、平面(其实是长方形)、球体、圆形、圆柱、圆台等许多基本形状；对于比较复杂的形状，我们还可以通过外部的模型文件导入。&lt;/p>
&lt;p>材质其实是物体表面除了形状以为所有可视属性的集合，例如色彩、纹理、光滑度、透明度、反射率、折射率、发光度。材质(Material) 包括了贴图(Map)和纹理(Texture)，贴图包括了图片和图片应当贴到什么位置，纹理本质上就是图。Three.js 提供了多种材质可供选择，能够自由地选择漫反射/镜面反射等材质。&lt;/p>
&lt;p>Points 其实就是一堆点的集合，它在之前很长时间都被称为 ParticleSystem(粒子系统)，r68 版本时更名为 PointCloud,r72 版本时才更名为 Points。更名主要是因为，Mr.doob 认为，粒子系统应当是包括粒子和相关的物理特性的处理的一套完整体系，而 Three 中的 Points 简单得多。因此最终这个类被命名为 Points。&lt;/p>
&lt;h1 id="简单使用">简单使用&lt;/h1>
&lt;h2 id="旋转正方体">旋转正方体&lt;/h2>
&lt;p>实际的 Three.js 应用中需要包含上述提及的关键对象，首先需要构建渲染器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">initRenderer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">width&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;three_canvas&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">clientWidth&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;three_canvas&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">clientHeight&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">renderer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">THREE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">WebGLRenderer&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">canvas&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="nb">document&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">getElementById&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;three_canvas&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">renderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setSize&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">width&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">height&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">renderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">setClearColor&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mh">0xffffff&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mf">1.0&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后初始化 Camera:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">initCamera&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">THREE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OrthographicCamera&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">width&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">height&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">height&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="mi">1000&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">position&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">200&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">up&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">up&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">up&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">z&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">camera&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">lookAt&lt;/span>&lt;span class="p">({&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">x&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">y&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">z&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="mi">0&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>接下来则是初始化场景与场景中的物体：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">initScene&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scene&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">THREE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Scene&lt;/span>&lt;span class="p">();&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">initObject&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">geometry&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">THREE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CubeGeometry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">object&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">THREE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Mesh&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">geometry&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nx">THREE&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">MeshNormalMaterial&lt;/span>&lt;span class="p">());&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">scene&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">object&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>最后是定期执行重渲染操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">render&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">requestAnimationFrame&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rotation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mf">0.05&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">object&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">rotation&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">y&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="mf">0.05&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">renderer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">render&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">scene&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">camera&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>