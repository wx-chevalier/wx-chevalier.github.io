<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Shell | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-cheatsheets/4.infrastructure/os/linux/shell/</link><atom:link href="https://ng-tech.icu/books/awesome-cheatsheets/4.infrastructure/os/linux/shell/index.xml" rel="self" type="application/rss+xml"/><description>Shell</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Shell</title><link>https://ng-tech.icu/books/awesome-cheatsheets/4.infrastructure/os/linux/shell/</link></image><item><title>Linux-Shell-CheatSheet</title><link>https://ng-tech.icu/books/awesome-cheatsheets/4.infrastructure/os/linux/shell/linux-shell-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cheatsheets/4.infrastructure/os/linux/shell/linux-shell-cheatsheet/</guid><description>&lt;h1 id="shell-cheatsheet">Shell CheatSheet&lt;/h1>
&lt;h2 id="一脚本基础">一、脚本基础&lt;/h2>
&lt;h3 id="11-创建脚本">1.1 创建脚本&lt;/h3>
&lt;p>在创建 shell 脚本时，必须在文件第一行指明要使用的 shell 。其格式为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>date
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">who
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>脚本创建完成后，还需要使用 &lt;code>chmod&lt;/code> 命令赋予文件拥有者执行文件的权限：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="line">&lt;span class="cl">&lt;span class="n">chmod&lt;/span> &lt;span class="n">u&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="n">test1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>u 表示该文件的拥有者，g 表示同组其他用户，o 表示该组外的其他用户，a 表示所有用户；&lt;/li>
&lt;li>+ 表示增加权限、- 表示取消权限、= 表示设定唯一权限；&lt;/li>
&lt;li>x 表示可执行，r 表示可读取，w 表示可写入。&lt;/li>
&lt;/ul>
&lt;h3 id="12-显示消息">1.2 显示消息&lt;/h3>
&lt;p>shell 支持使用 echo 命令来在控制台上显示文本内容，以提示用户进行相应的操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> This is a &lt;span class="nb">test&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下，不需要使用引号来圈定所需要输出的字符，但如果待输出字符中含有单引号，则需要使用双引号进行圈定，反之亦然。示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;This is a test to see if you&amp;#39;re paying attention&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除此之外，echo 还支持 &lt;code>-n&lt;/code> 参数，用于将文本和命令行的输出显示在同一行：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;The time and date are: &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">date
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">输出：the &lt;span class="nb">time&lt;/span> and date are: 2020年 02月 18日 星期二 10:29:28 CST
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="13-使用变量">1.3 使用变量&lt;/h3>
&lt;p>&lt;strong>1. 用户变量&lt;/strong>&lt;/p>
&lt;p>用户变量可以是由字母、数字或下划线组成的长度不超过 20 的任意字符串，区分大小，采用等号进行赋值，在变量、等号和值之间不能有空格。定义完成后，可以使用 &lt;code>$&lt;/code> 符号进行引用：&lt;/p>
&lt;pre tabindex="0">&lt;code>name=heibaiying
echo $name
&lt;/code>&lt;/pre>&lt;p>需要注意的是使用一个已经存在的用户变量来对新的用户变量进行赋值，仍然需要使用 &lt;code>$&lt;/code> 符号进行引用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$value1&lt;/span> &lt;span class="c1">#正确&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value2&lt;/span>&lt;span class="o">=&lt;/span>value1 &lt;span class="c1">#错误&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>因为 &lt;code>$&lt;/code> 符号已经用作引用变量，所以如果想在普通文本中使用它，则需要使用 &lt;code>\&lt;/code> 进行转义。&lt;/p>
&lt;p>&lt;strong>2. 环境变量&lt;/strong>&lt;/p>
&lt;p>在 shell 脚本中，除了可以使用用户自定义变量外，还可以使用系统内置的环境变量，系统内置的环境变量可以使用 &lt;code>set&lt;/code> 命令进行查看。和自定义变量一样，引用系统变量时也需要使用 &lt;code>$&lt;/code> 符号。&lt;/p>
&lt;p>&lt;strong>3. 命令变量&lt;/strong>&lt;/p>
&lt;p>除了可以将普通文本内容赋值给变量外，还可以将命令的输出赋值给变量，此时可以使用两种方式来进行引用：&lt;/p>
&lt;ul>
&lt;li>使用反引号将整个命令圈起来；&lt;/li>
&lt;li>使用 &lt;code>$()&lt;/code> 格式。&lt;/li>
&lt;/ul>
&lt;p>示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">date1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>date&lt;span class="sb">`&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;1.The date and time are: &amp;#34;&lt;/span> &lt;span class="nv">$date1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">date2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>date&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;2.The date and time are: &amp;#34;&lt;/span> &lt;span class="nv">$date2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-数学运算">1.4 数学运算&lt;/h3>
&lt;p>&lt;strong>1. 基本运算&lt;/strong>&lt;/p>
&lt;p>在 shell 脚本中，如果想要将数学运算的结果赋值给变量，一种较为通用的方式是使用方括号表示法（ $[ operation ] ），示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span>&lt;span class="m">1&lt;/span> + 5&lt;span class="o">]&lt;/span> &lt;span class="c1"># 结果：6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var2&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span>&lt;span class="nv">$var1&lt;/span> * 2&lt;span class="o">]&lt;/span> &lt;span class="c1"># 结果：12&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var3&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span>&lt;span class="nv">$var1&lt;/span> * &lt;span class="o">(&lt;/span>&lt;span class="nv">$var2&lt;/span> - &lt;span class="nv">$var1&lt;/span>&lt;span class="o">)]&lt;/span> &lt;span class="c1"># 结果：36&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是 bash shell 默认只支持整数运算，不支持浮点数运算：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">45&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var3&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span>&lt;span class="nv">$var1&lt;/span> / &lt;span class="nv">$var2&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> The final result is &lt;span class="nv">$var3&lt;/span> &lt;span class="c1"># 结果：2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2. 浮点数运算&lt;/strong>&lt;/p>
&lt;p>如果想要支持浮点数运算，可以使用内置的 bc 计算器，在命令行中输入 &lt;code>bc&lt;/code> 命令即可打开该计算器：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>root@node01 ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># bc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">bc 1.06.95
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Copyright 1991-1994, 1997, 1998, 2000, 2004, &lt;span class="m">2006&lt;/span> Free Software Foundation, Inc.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">This is free software with ABSOLUTELY NO WARRANTY.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">For details &lt;span class="nb">type&lt;/span> &lt;span class="sb">`&lt;/span>warranty&lt;span class="err">&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">scale&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="m">4&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">8/3
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2.6666
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想要在脚本文件中使用 bc 计算器，则需要使用到命令变量，其基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">variable&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;options; expression&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该方式通过管道运算符将 echo 的输出作为 bc 命令的输入，同时使用 &lt;code>$()&lt;/code> 格式来引用 bc 命令的输出，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">45&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;scale=4; &lt;/span>&lt;span class="nv">$var1&lt;/span>&lt;span class="s2"> / &lt;/span>&lt;span class="nv">$var2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="p">|&lt;/span> bc&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> The answer &lt;span class="k">for&lt;/span> this is &lt;span class="nv">$var3&lt;/span> &lt;span class="c1"># 结果：2.2222&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你要进行的运算比较复杂，需要多行书写，此时可以使用内联输入重定向：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var2&lt;/span>&lt;span class="o">=&lt;/span>1.5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var3&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var4&lt;/span>&lt;span class="o">=&lt;/span>2.5
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var5&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>bc &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">a1 = ( $var1 * $var2)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">b1 = ($var3 * $var4)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">a1 + b1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s">EOF&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">)&lt;/span> &lt;span class="c1"># 结果：27.5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里使用 EOF 来标识了内联重定向数据的开始和结束。&lt;/p>
&lt;h3 id="15-退出脚本">1.5 退出脚本&lt;/h3>
&lt;p>&lt;strong>1. 退出状态码&lt;/strong>&lt;/p>
&lt;p>shell 中运行的每个命令在结束时都会传递给 shell 一个退出状态码（exit status），可以使用 &lt;code>$?&lt;/code> 来查看上一个命令的退出状态码，使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># date&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020年 02月 18日 星期二 11:43:42 CST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># echo $?&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">0&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>0 表示命令成功结束，其他常用状态码如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>状态码&lt;/strong>&lt;/th>
&lt;th>&lt;strong>描述&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>命令成功结束&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>一般性未知错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>不适合的 shell 命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>126&lt;/td>
&lt;td>命令不可执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>127&lt;/td>
&lt;td>没找到命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>128&lt;/td>
&lt;td>无效的退出参数&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>128+x&lt;/td>
&lt;td>与 Linux 信号 x 相关的严重错误&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>130&lt;/td>
&lt;td>通过 Ctrl+C 终止的命令&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>255&lt;/td>
&lt;td>范围之外的退出状态码&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>2. exit 命令&lt;/strong>&lt;/p>
&lt;p>默认情况下，shell 脚本会以最后一个命令的退出状态码来作为最终的退出状态码， 当然你也可以使用 exit 命令来指定最终的退出状态码，示例如下：&lt;/p>
&lt;pre tabindex="0">&lt;code>exit 0
&lt;/code>&lt;/pre>&lt;p>需要注意的是退出状态码的范围只能是 0~255，如果超过这个数值，则会以对 256 取余的结果来作为退出状态码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exit&lt;/span> &lt;span class="m">300&lt;/span> &lt;span class="c1">#实际的退出状态码为：44&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="二分支语句">二、分支语句&lt;/h2>
&lt;h3 id="21-if-then">2.1 if-then&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nb">command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 if 后面 commond 命令的退出状态码为 0，则执行 then 部分的命令，then 后面可以是一行或多行命令。&lt;/p>
&lt;h3 id="22-if-then-else">2.2 if-then-else&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nb">command&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果 if 后面的 commond 命令的退出状态码为 0，则执行 then 部分的命令，否则执行 else 部分的命令。&lt;/p>
&lt;h3 id="23-if-then-elif">2.3 if-then-elif&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> command1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">elif&lt;/span> command2
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bash shell 会依次执行 if 语句，只有第一个退出状态码是 0 的语句中的 then 部分会被执行。&lt;/p>
&lt;h3 id="24-test-命令">2.4 test 命令&lt;/h3>
&lt;p>&lt;code>test&lt;/code> 可以用在 if-then 的测试语句中，如果 &lt;code>test&lt;/code> 命令中条件成立，&lt;code>test&lt;/code> 命令就会退出并返回退出状态码 0。基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nb">test&lt;/span> condition
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>bash shell 还提供了另一种条件测试方法，其效果与 test 命令相同，只需要使用方括号将测试条件包裹起来，格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> condition &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是第一个方括号后和第二个方括号前必须加上一个空格，否则就会报错。常见的条件测试分为以下三种：&lt;/p>
&lt;p>&lt;strong>1. 数值比较&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>比较&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>n1 -eq n2&lt;/td>
&lt;td>检查 n1 是否与 n2 相等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n1 -ge n2&lt;/td>
&lt;td>检查 n1 是否大于或等于 n2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n1 -gt n2&lt;/td>
&lt;td>检查 n1 是否大于 n2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n1 -le n2&lt;/td>
&lt;td>检查 n1 是否小于或等于 n2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n1 -lt n2&lt;/td>
&lt;td>检查 n1 是否小于 n2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n1 -ne n2&lt;/td>
&lt;td>检查 n1 是否不等于 n2&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">11&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$value1&lt;/span> -eq &lt;span class="nv">$value2&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The values are equal&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The values are different&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2. 字符串比较&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>比较&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>str1 = str2&lt;/td>
&lt;td>检查 str1 是否和 str2 相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str1 != str2&lt;/td>
&lt;td>检查 str1 是否和 str2 不同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str1 &amp;lt; str2&lt;/td>
&lt;td>检查 str1 是否比 str2 小&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>str1 &amp;gt; str2&lt;/td>
&lt;td>检查 str1 是否比 str2 大&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-n str1&lt;/td>
&lt;td>检查 str1 的长度是否非 0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-z str1&lt;/td>
&lt;td>检查 str1 的长度是否为 0&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>字符串在进行大小比较时使用的是标准的 ASCII 顺序，但需要注意的是 &lt;code>&amp;lt;&lt;/code> 和 &lt;code>&amp;gt;&lt;/code> 符号通常会被解释为输入重定向符号和输出重定向符号，因此需要使用 &lt;code>\&lt;/code> 对其进行转义。&lt;/p>
&lt;p>&lt;strong>3. 文件比较&lt;/strong>&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>比较&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>-d file&lt;/td>
&lt;td>检查 file 是否存在并且是一个目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-e file&lt;/td>
&lt;td>检查 file 是否存在&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-f file&lt;/td>
&lt;td>检查 file 是否存在并且是一个文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-r file&lt;/td>
&lt;td>检查 file 是否存在并且可读&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-s file&lt;/td>
&lt;td>检查 file 是否存在并且非空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-w file&lt;/td>
&lt;td>检查 file 是否存在并且可写&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-x file&lt;/td>
&lt;td>检查 file 是否存在并且可执行&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-O file&lt;/td>
&lt;td>检查 file 是否存在并且属于当前用户所有&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>-G file&lt;/td>
&lt;td>检查 file 是否存在并且默认组与当前用户的默认组是否相同&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>file1 -nt file2&lt;/td>
&lt;td>检查 file1 是否比 file2 新&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>file1 -ot file2&lt;/td>
&lt;td>检查 file1 是否比 file2 旧&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="25-复合条件">2.5 复合条件&lt;/h3>
&lt;p>除了上面的单一测试外，还可以使用逻辑运算符来组合测试：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&amp;amp;&amp;amp;&lt;/strong> ：等价于 and ，基本格式如下： [ condition1 ] &amp;amp;&amp;amp; [ condition2 ] ；&lt;/li>
&lt;li>&lt;strong>||&lt;/strong> ：等价于 or，基本格式如下：[ condition1 ] || [ condition2 ] 。&lt;/li>
&lt;/ul>
&lt;h3 id="26-if-then-高级特性">2.6 if-then 高级特性&lt;/h3>
&lt;p>bash shell 提供了两项可在 if-then 语句中使用的高级特性：&lt;/p>
&lt;ul>
&lt;li>用于数学表达式的双括号；&lt;/li>
&lt;li>用于高级字符串处理功能的双方括号。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>1. 使用双括号&lt;/strong>&lt;/p>
&lt;p>基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">((&lt;/span> expression &lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>expression 可以是任意的数学赋值或比较表达式，除此之外还支持以下运算符：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>符 号&lt;/th>
&lt;th>描 述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>val++&lt;/td>
&lt;td>后增&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>val&amp;ndash;&lt;/td>
&lt;td>后减&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>++val&lt;/td>
&lt;td>先增&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;ndash;val&lt;/td>
&lt;td>先减&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>!&lt;/td>
&lt;td>逻辑求反&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>~&lt;/td>
&lt;td>位求反&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>**&lt;/td>
&lt;td>幂运算&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;laquo;&lt;/td>
&lt;td>左位移&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;gt;&amp;gt;&lt;/td>
&lt;td>右位移&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;&lt;/td>
&lt;td>位布尔和&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>|&lt;/td>
&lt;td>位布尔或&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;amp;&amp;amp;&lt;/td>
&lt;td>逻辑和&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>||&lt;/td>
&lt;td>逻辑或&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">val1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">$val1&lt;/span> ** &lt;span class="m">2&lt;/span> &amp;gt; &lt;span class="m">90&lt;/span> &lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">((&lt;/span> &lt;span class="nv">val2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nv">$val1&lt;/span> ** &lt;span class="m">2&lt;/span> &lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The square of &lt;/span>&lt;span class="nv">$val1&lt;/span>&lt;span class="s2"> is &lt;/span>&lt;span class="nv">$val2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时由于使用了双括号，这里的 &lt;code>&amp;gt;&lt;/code> 符号也不需要转义。&lt;/p>
&lt;p>&lt;strong>2. 使用双方括号&lt;/strong>&lt;/p>
&lt;p>双方括号的基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[[&lt;/span> expression &lt;span class="o">]]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>它最主要的功能是支持字符串的模式匹配，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="nv">$USER&lt;/span> &lt;span class="o">==&lt;/span> r* &lt;span class="o">]]&lt;/span> &lt;span class="c1">#匹配所有以r开头的用户&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello &lt;/span>&lt;span class="nv">$USER&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Sorry, I do not know you&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="27-case">2.7 case&lt;/h3>
&lt;p>case 命令会将指定的变量与不同模式进行比较，如果变量和模式相匹配，那么 shell 会执行该模式指定的命令，基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> variable in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pattern1 &lt;span class="p">|&lt;/span> pattern2 &lt;span class="o">)&lt;/span> commands1 &lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">pattern3 &lt;span class="o">)&lt;/span> commands2 &lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*&lt;span class="o">)&lt;/span> default commands &lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">esac&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">city&lt;/span>&lt;span class="o">=&lt;/span>上海
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">case&lt;/span> &lt;span class="nv">$city&lt;/span> in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">北京&lt;span class="p">|&lt;/span>天津&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;华北地区&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">上海&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;华东地区&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">广州&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;华南地区&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">*&lt;span class="o">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;其他地区&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">esac&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="三循环语句">三、循环语句&lt;/h2>
&lt;h3 id="31-for">3.1 for&lt;/h3>
&lt;p>for 命令的基本使用格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> var in list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> letter in a b c d e f g
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> The next letter is &lt;span class="nv">$letter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 输出&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>默认情况下，bash shell 会将下列字符当做字段分隔符：&lt;/p>
&lt;ul>
&lt;li>空格；&lt;/li>
&lt;li>制表符；&lt;/li>
&lt;li>换行符。&lt;/li>
&lt;/ul>
&lt;p>如果你想要的采用自定义的字段分隔符，可以通过修改 IFS（internal field separator，内部字段分隔符）来进行实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;a,b,c,d,e,f&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">OLDIFS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$IFS&lt;/span> &lt;span class="c1"># 保存原有的IFS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">IFS&lt;/span>&lt;span class="o">=&lt;/span>, &lt;span class="c1"># 自定义IFS&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> letter in &lt;span class="nv">$value&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> The next letter is &lt;span class="nv">$letter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">IFS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$OLDIFS&lt;/span> &lt;span class="c1"># 还原默认的IFS,防止影响其他命令的执行&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除此之外，for 命令还支持在读取目录时使用通配符，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> file in /home/rich/test/*
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -d &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 是一个目录&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$file&lt;/span>&lt;span class="s2"> 是一个文件&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了上面介绍的 for 循环外，bash shell 还支持 C 语言风格的 for 循环，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">i&lt;/span>&lt;span class="o">=&lt;/span>1&lt;span class="p">;&lt;/span> i &amp;lt;&lt;span class="o">=&lt;/span> 10&lt;span class="p">;&lt;/span> i++ &lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;The next number is &lt;/span>&lt;span class="nv">$i&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>该风格的 for 循环还支持在迭代中使用多个变量，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> &lt;span class="o">((&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>1, &lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>10&lt;span class="p">;&lt;/span> a &amp;lt;&lt;span class="o">=&lt;/span> 10&lt;span class="p">;&lt;/span> a++, b-- &lt;span class="o">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="s2"> - &lt;/span>&lt;span class="nv">$b&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="32-while">3.2 while&lt;/h3>
&lt;p>while 命令的基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="nb">test&lt;/span> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> other commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$var1&lt;/span> -gt &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$var1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$var1&lt;/span> - &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>while 命令支持使用多个测试语句，但只有最后一个测试语句的退出状态码会被用来决定循环的结束。&lt;/p>
&lt;h3 id="33-until">3.3 until&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">until&lt;/span> &lt;span class="nb">test&lt;/span> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> other commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">until&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$var1&lt;/span> -eq &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="nv">$var1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">var1&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$var1&lt;/span> - &lt;span class="m">25&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="34-break--contiune">3.4 break &amp;amp; contiune&lt;/h3>
&lt;p>和其他大多数编程语言类似，shell 支持使用 break 和 contiune 来控制循环：&lt;/p>
&lt;ul>
&lt;li>break 用于退出循环，默认只能跳出当前循环，如果想要跳出多层循环，可以使用 &lt;code>break n&lt;/code> 进行指定；&lt;/li>
&lt;li>contiune 用于提前结束本次循环。&lt;/li>
&lt;/ul>
&lt;p>基本使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> var1 in &lt;span class="m">1&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">9&lt;/span> &lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$var1&lt;/span> -eq &lt;span class="m">5&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">break&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Iteration number: &lt;/span>&lt;span class="nv">$var1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;循环结束&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="35-处理循环的输出">3.5 处理循环的输出&lt;/h3>
&lt;p>想要对循环的输出进行处理，可以通过在 done 之后添加一个处理命令来实现，例如将循环的输出重定向到指定文件中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> letter in a b c d e f g
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> The next letter is &lt;span class="nv">$letter&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span> &amp;gt; output.txt
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cat output.txt&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is a
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is d
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is e
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is f
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">The next letter is g
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="四处理用户输入">四、处理用户输入&lt;/h2>
&lt;h3 id="41-命令行参数">4.1 命令行参数&lt;/h3>
&lt;p>命令行参数允许在运行脚本时向脚本传递额外参数，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">./test &lt;span class="m">10&lt;/span> &lt;span class="m">20&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这些位置参数可以在程序中直接引用：&lt;code>$0&lt;/code> 是脚本名，&lt;code>$1&lt;/code> 是第一个参数，&lt;code>$2&lt;/code> 是第二个参数，依次类推，直到第九个参数 &lt;code>$9&lt;/code> ；如果命令行参数不止 9 个，则之后的变量名需要加上花括号，例如 &lt;code>${10}&lt;/code> 。另外还需要注意以下事项：&lt;/p>
&lt;ul>
&lt;li>每个参数默认使用空格进行分割，如果参数值包含空格，则需要用单引号或者双引号进行包裹；&lt;/li>
&lt;li>如果你在启动脚本时使用的是完整的路径，则&lt;code>$0&lt;/code> 也会包含路径信息，此时可以使用 &lt;code>basename $0&lt;/code> 来获取脚本名称；&lt;/li>
&lt;li>命令行参数的总个数可以使用 &lt;code>$#&lt;/code> 来获取；&lt;/li>
&lt;li>如果想要访问所有参数，可以使用 &lt;code>$*&lt;/code> 和 &lt;code>$@&lt;/code> ，两者的区别在于：&lt;code>$*&lt;/code> 会将命令行上的所有参数当做一个整体的单词来保存，而 &lt;code>$@&lt;/code> 会将命令行上的所有参数当做同一个字符串中的多个独立单词来保存，示例如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> param in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$*&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;\$* Parameter #&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2"> = &lt;/span>&lt;span class="nv">$param&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$count&lt;/span> + &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span> param in &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;\$@ Parameter #&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2"> = &lt;/span>&lt;span class="nv">$param&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$count&lt;/span> + &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./test.sh a b c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$*&lt;/span> Parameter &lt;span class="c1">#1 = a b c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$@&lt;/span> Parameter &lt;span class="c1">#1 = a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$@&lt;/span> Parameter &lt;span class="c1">#2 = b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">$@&lt;/span> Parameter &lt;span class="c1">#3 = c&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="42-移动变量">4.2 移动变量&lt;/h3>
&lt;p>bash shell 支持使用 shift 命令来移动参数。默认情况下，它会将每个参数向左移动一个位置：即变量 &lt;code>$3&lt;/code> 的值会移到 &lt;code>$2&lt;/code> 中，变量 &lt;code>$2&lt;/code> 的值会移到 &lt;code>$1&lt;/code> 中，而变量 &lt;code>$1&lt;/code> 的值则会被删除（变量 &lt;code>$0&lt;/code> 的值，也就是程序名，不会改变）。使用 shift 参数，可以很方便的完成参数的遍历，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Parameter #&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2"> = &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$count&lt;/span> + &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">shift&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./test.sh a b c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Parameter &lt;span class="c1">#1 = a&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Parameter &lt;span class="c1">#2 = b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Parameter &lt;span class="c1">#3 = c&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想要一次移动多个参数，可以使用 &lt;code>shift n&lt;/code> 来实现。另外，通过 shift 还可以很方便的处理带值的选项，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -a&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Found the -a option&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -b&lt;span class="o">)&lt;/span> &lt;span class="nv">param&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="c1">#当找到选项b时，则后面一个参数就是其对应的值&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Found the -b option, with parameter value &lt;/span>&lt;span class="nv">$param&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">shift&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -c&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Found the -c option&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> --&lt;span class="o">)&lt;/span> &lt;span class="nb">shift&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">break&lt;/span> &lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> *&lt;span class="o">)&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2"> is not an option&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">esac&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">shift&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出结果如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># ./test.sh -a -b heibaiying -d&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Found the -a option
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Found the -b option, with parameter value heibaiying
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">-d is not an option
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="43-处理用户输入">4.3 处理用户输入&lt;/h3>
&lt;p>命令行参数主要用于初始化脚本运行，但在程序运行的过程中，你可能还需要与用户进行交互，并根据用户的输入来决定程序的走向，此时可以使用 read 命令来实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Please enter your age: &amp;#34;&lt;/span> age &lt;span class="c1"># -p用于显示提示文本，用户的输入会被保存到age变量中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">days&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$age&lt;/span> * &lt;span class="m">365&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;That makes you over &lt;/span>&lt;span class="nv">$days&lt;/span>&lt;span class="s2"> days old! &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除此之外还支持使用以下参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-s&lt;/strong>：用于隐藏用户输入，即用户的输入不会显示在终端页面上，通常用在输入密码等敏感信息时；&lt;/li>
&lt;li>&lt;strong>-t&lt;/strong>：用于指定等待的秒数，如果在指定时间内用户没有输入，则 read 命令会以非 0 状态码退出，示例如下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nb">read&lt;/span> -t &lt;span class="m">5&lt;/span> -p &lt;span class="s2">&amp;#34;Please enter your name: &amp;#34;&lt;/span> name
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Hello &lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">, welcome to my script&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Sorry, too slow! &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>read 命令除了可以用于读取终端的输入外，还可以用于读取文件的内容，通常配合 cat 命令来使用，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">cat &lt;span class="nb">test&lt;/span> &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> line
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Line &lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">: &lt;/span>&lt;span class="nv">$line&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$count&lt;/span> + 1&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="五处理程序输出">五、处理程序输出&lt;/h2>
&lt;h3 id="51-文件描述符">5.1 文件描述符&lt;/h3>
&lt;p>Linux 系统将每个对象都当作文件处理，并用文件描述符（ filedescriptor ）来标识每个文件对象。文件描述符是一个非负整数，可以唯一标识会话中打开的文件，每个进程一次最多可以有九个文件描述符。bash shell 保留了前三个文件描述符（ 0 、1 和 2 ）用于特定的表述：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>文件描述符&lt;/th>
&lt;th>缩写&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>0&lt;/td>
&lt;td>STDIN&lt;/td>
&lt;td>标准输入&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>STDOUT&lt;/td>
&lt;td>标准输出&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>STDERR&lt;/td>
&lt;td>标准错误&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;ul>
&lt;li>&lt;strong>STDIN&lt;/strong>：代表 shell 的标准输入，它可以是终端界面的键盘，也可以是使用重定向符号（&amp;lt;）读取的文件。&lt;/li>
&lt;li>&lt;strong>STDOUT&lt;/strong>：代表 shell 的标准输出，它通常是终端界面的显示器，也可以是使用重定向符号（&amp;gt;）创建的文件。&lt;/li>
&lt;li>&lt;strong>STDERR&lt;/strong>：代表 shell 的标准错误输出，默认情况下，STDERR 文件描述符和 STDOUT 文件描述符指向相同的地方。也就是说，在默认情况下，错误消息会被输出到显示器上。当然你也可以重定向错误的输出位置：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ls -al badfile 2&amp;gt; test1 &lt;span class="c1">#将错误输出重定向到test1文件，正常的输出默认显示到屏幕上&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">ls -al badfile 2&amp;gt; test2 1&amp;gt; test3 &lt;span class="c1">#将错误的输出重定向到test2，正常输出重定向到test1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果你想要将正常输出和错误输出重定向到同一个文件，可以使用 &lt;code>&amp;amp;&amp;gt;&lt;/code> 符号进行简写：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">ls -al badfile &lt;span class="p">&amp;amp;&lt;/span>&amp;gt; test4
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="52-输出重定向">5.2 输出重定向&lt;/h3>
&lt;p>&lt;strong>1. 临时重定向&lt;/strong>&lt;/p>
&lt;p>如果你想要在脚本中输出特定的错误信息，此时可以在文件描述符数字之前加一个 &amp;amp; ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;捕获到未知异常&amp;#34;&lt;/span> &amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">2&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时异常信息就会被添加到标准错误输出中。但上面提到过，标准错误输出默认是显示在界面上，如果想要将捕获到的错误信息输出到指定文件中，则还需要对标准错误输出进行重定向：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ./test 2&amp;gt; error.txt
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2. 永久重定向&lt;/strong>&lt;/p>
&lt;p>如果需要对每条语句都进行临时重定向，此时可以使用 &lt;code>exec&lt;/code> 进行一次性永久重定向：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exec&lt;/span> 1&amp;gt;testout &lt;span class="c1">#之后的所有正常输出都重定向到testout文件中&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;This is a test of redirecting all output&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;from a script to another file.&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;without having to redirect every individual line&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="53-输入重定向">5.3 输入重定向&lt;/h3>
&lt;p>exec 命令还允许你将 STDIN 重定向到文件上，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exec&lt;/span> 0&amp;lt; testfile
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="54-自定义重定向">5.4 自定义重定向&lt;/h3>
&lt;p>bash shell 只占用了 3 个文件描述符，其他的 6 个（ 3~8 ）文件描述符均可用作自定义的输入或输出重定向，具体如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exec&lt;/span> 3&amp;gt;test3out &lt;span class="c1">#将文件描述符为3的输出重定向到test3out&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;and this should be stored in the file&amp;#34;&lt;/span> &amp;gt;&lt;span class="p">&amp;amp;&lt;/span>&lt;span class="m">3&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果之后想要关闭自定义的文件描述符，需要将它重定向到特殊符号 &lt;code>&amp;amp;-&lt;/code> ：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">exec&lt;/span> 3&amp;gt;&lt;span class="p">&amp;amp;&lt;/span>-
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是一旦关闭了文件描述符，就不能再向它写入任何数据，否则就会抛出异常。&lt;/p>
&lt;h3 id="55-阻止命令输出">5.5 阻止命令输出&lt;/h3>
&lt;p>如果你不需要任何输出信息，此时可以将输出重定向到一个叫作 null 的特殊文件中，在 Linux 系统上 null 文件的标准位置是 &lt;code>/dev/null&lt;/code> ，重定向到该位置的任何数据都会被丢弃，不会显示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ls -al &amp;gt; /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ cat /dev/null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="56-创建临时文件">5.6 创建临时文件&lt;/h3>
&lt;p>通常你会需要创建某些临时文件用于保存程序输出，此时可以使用 mktemp 命令来实现，它会创建一个唯一的临时文件，并赋予创建者完整的读写权限。默认情况下， mktemp 会在本地目录中创建一个文件，你只要指定文件名，并加上任意个 X ，X 会被替换为其他字符，用于保证唯一性：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># mktemp testing.XXXXXX&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">testing.UdxhQH
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># mktemp testing.XXXXXX&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">testing.3pe64N
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># mktemp testing.XXX&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">testing.SWw
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除此之外，它还支持以下参数：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-t&lt;/strong> ：该选项会强制 mktemp 在系统的临时目录（如 /tmp）下创建文件， 此时它会返回临时文件的全路径；&lt;/li>
&lt;li>&lt;strong>-d&lt;/strong>：该选项告诉 mktemp 需要创建的是一个目录而不是文件。&lt;/li>
&lt;/ul>
&lt;h3 id="57-记录输出">5.7 记录输出&lt;/h3>
&lt;p>如果你需要将输出既显示在终端上，又写入到文件中，此时可以使用 tee 命令来实现。它不仅会将结果输出到 STDOUT 中，同时也会将结果写出到指定的文件中：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># date | tee testfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020年 02月 20日 星期四 14:21:40 CST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># cat testfile&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">2020年 02月 20日 星期四 14:21:40 CST
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="六创建函数">六、创建函数&lt;/h2>
&lt;h3 id="61-创建函数">6.1 创建函数&lt;/h3>
&lt;p>在 shell 脚本中可以通过以下两种方式来定义函数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 方式一：使用function关键字&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> name &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 方式二&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">name &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> commands
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>调用函数时，只需要在对应行中指定函数名即可，示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> func &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;This is an example of a function&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func &lt;span class="c1">#调用函数&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>函数的调用必须在函数的定义之后，另外函数名必须是唯一的，如果出现同名函数，则后面的函数定义会覆盖前面的函数定义。&lt;/p>
&lt;h3 id="62-函数参数">6.2 函数参数&lt;/h3>
&lt;p>如果想要为函数传递所需的参数，只需要在函数名后面跟上所需的参数即可。在函数体内可以通过 &lt;code>$1&lt;/code> 、 &lt;code>$2&lt;/code> 来进行引用的；&lt;code>$0&lt;/code> 则表示具体的函数名，&lt;code>$#&lt;/code> 表示参数的总数：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> addem &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -eq &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -gt &lt;span class="m">2&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="c1">#如果没有传递参数或者传递两个以上的参数都返回-1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">elif&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$#&lt;/span> -eq &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> $&lt;span class="o">[&lt;/span> &lt;span class="nv">$1&lt;/span> + &lt;span class="nv">$1&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> $&lt;span class="o">[&lt;/span> &lt;span class="nv">$1&lt;/span> + &lt;span class="nv">$2&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;Adding 10 and 15: &amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>addem &lt;span class="m">10&lt;/span> 15&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$value&lt;/span> &lt;span class="c1">#25&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>同时如上面的例子所示，&lt;strong>函数的返回值使用 echo 语句进行输出&lt;/strong>。&lt;/p>
&lt;h3 id="63-退出状态码">6.3 退出状态码&lt;/h3>
&lt;p>默认情况下，函数中最后一条命令的退出状态码就是整个函数的退出状态码。在函数执行后，可以使用变量 &lt;code>$?&lt;/code> 来获取函数的退出状态码。如果你想要返回自定义的状态码，可以使用 return 命令来实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> func &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">read&lt;/span> -p &lt;span class="s2">&amp;#34;Enter a value: &amp;#34;&lt;/span> value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;doubling the value&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> $&lt;span class="o">[&lt;/span> &lt;span class="nv">$value&lt;/span> * &lt;span class="m">2&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>和命令的退出状态码一致，这里的退出状态码的取值范围必须是 0~255 。&lt;/p>
&lt;h3 id="64-局部变量">6.4 局部变量&lt;/h3>
&lt;p>在 shell 脚本中，变量分为全局变量和局部变量。默认情况下，你在脚本中定义的任何变量都是全局变量，为了避免函数体内的变量对全局变量造成污染，你可以在函数体内使用局部变量，此时只需要在变量声明前面加上 local 关键字即可：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">100&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> func &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">local&lt;/span> &lt;span class="nv">value1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">value2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;局部变量value1 ：&amp;#34;&lt;/span> &lt;span class="nv">$value1&lt;/span> &lt;span class="c1">#200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;局部变量value2 ：&amp;#34;&lt;/span> &lt;span class="nv">$value2&lt;/span> &lt;span class="c1">#200&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">func
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;全局变量value1 ：&amp;#34;&lt;/span> &lt;span class="nv">$value1&lt;/span> &lt;span class="c1">#100 使用局部变量可以保证同名的全局变量不被污染&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;全局变量value2 ：&amp;#34;&lt;/span> &lt;span class="nv">$value2&lt;/span> &lt;span class="c1">#200 没有使用局部变量，全局变量收到了勿扰&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="65-函数库">6.5 函数库&lt;/h3>
&lt;p>某些时候你可能需要引用第三方的函数库，或者你的通用函数比较多，此时可以将通用函数定义到一个统一的文件中。如下，就是一个简单的自定义函数库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ cat myfuncs
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 自定义函数库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> addem &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> $&lt;span class="o">[&lt;/span> &lt;span class="nv">$1&lt;/span> + &lt;span class="nv">$2&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> multem &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> $&lt;span class="o">[&lt;/span> &lt;span class="nv">$1&lt;/span> * &lt;span class="nv">$2&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">function&lt;/span> divem &lt;span class="o">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$2&lt;/span> -ne &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">then&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> $&lt;span class="o">[&lt;/span> &lt;span class="nv">$1&lt;/span> / &lt;span class="nv">$2&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> -1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fi&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>想要在其他脚本中引用该函数库，可以使用 source 命令。source 命令可以使用点操作符进行简写，假设脚本文件和函数库文件处于同一目录，此时只需要在脚本文件中使用以下命令进行引用：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">. ./myfuncs &lt;span class="c1">#引用函数库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">value2&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">result1&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="k">$(&lt;/span>addem &lt;span class="nv">$value1&lt;/span> &lt;span class="nv">$value2&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="c1">#直接调用函数库中的函数&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="七控制脚本">七、控制脚本&lt;/h2>
&lt;h3 id="71-处理信号">7.1 处理信号&lt;/h3>
&lt;p>Linux 系统可以使用信号来与运行在系统中的进程通信，从而可以启动、停止、终止进程。我们可以通过对脚本进行编程，使其在收到特定信号时执行特定的操作，常用的 Linux 系统信号如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>信号&lt;/th>
&lt;th>值&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>SIGHUP&lt;/td>
&lt;td>挂起进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>SIGINT&lt;/td>
&lt;td>终止进程（可以通过键盘组合 Ctrl+C 进程触发）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>SIGQUIT&lt;/td>
&lt;td>停止进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>9&lt;/td>
&lt;td>SIGKILL&lt;/td>
&lt;td>无条件终止进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>15&lt;/td>
&lt;td>SIGTERM&lt;/td>
&lt;td>尽可能终止进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>17&lt;/td>
&lt;td>SIGSTOP&lt;/td>
&lt;td>无条件停止进程，但不是终止进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>18&lt;/td>
&lt;td>SIGTSTP&lt;/td>
&lt;td>停止或暂停进程，但不终止进程程（可以通过键盘组合 Ctrl+Z 进程触发）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>19&lt;/td>
&lt;td>SIGCONT&lt;/td>
&lt;td>继续运行处于停止状态的进程&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>想要在脚本中捕获这些信号，可以通过 trap 命令来实现，其基本使用格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> commonds signals
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo &amp;#39; Sorry! I have trapped Ctrl-C&amp;#39;&amp;#34;&lt;/span> SIGINT &lt;span class="c1">#捕获SIGINT信号并执行echo命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$count&lt;/span> -le &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Loop #&lt;/span>&lt;span class="nv">$count&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> sleep &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">count&lt;/span>&lt;span class="o">=&lt;/span>$&lt;span class="o">[&lt;/span> &lt;span class="nv">$count&lt;/span> + &lt;span class="m">1&lt;/span> &lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了可以在 shell 脚本中捕获到正常信号外，你还可以在 shell 脚本退出时捕获到退出信号：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> &lt;span class="s2">&amp;#34;echo Goodbye...&amp;#34;&lt;/span> EXIT &lt;span class="c1">#捕获脚本退出的EXIT信号&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>要想在脚本中的不同位置进行不同的捕获处理，你只需重新使用 trap 命令即可。如果想要删除已设置好的捕获，则需要在 trap 命令与信号名称之间加上两个破折号：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">trap&lt;/span> -- SIGINT &lt;span class="c1">#删除对SIGINT命令的捕获&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="72-后台运行">7.2 后台运行&lt;/h3>
&lt;p>如果想要以后台模式运行 shell ，只要在命令后加个 &amp;amp; 符号：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ ./test.sh &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>采用该方式运行的后台进程默认是与终端会话关联在一起的，如果终端会话退出了，那么后台进程也会随之退出，如果希望后台进程在登出控制台之后仍能继续运行，则可以使用 nohup 命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ nohup ./test.sh &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于 nohup 命令会解除进程与终端的关联，此时进程也就不再同 STDOUT 和 STDERR 联系在一起。为了保存该命令产生的输出， nohup 命令会自动将 STDOUT 和 STDERR 的消息重定向到一个名为 nohup.out 的文件中。如果该文件已存在，则会将输出以追加的方式写入该文件。&lt;/p>
&lt;h3 id="73-作业控制">7.3 作业控制&lt;/h3>
&lt;p>想要查看 shell 当前正在处理的作业，可以使用 jobs 命令来实现：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># jobs -l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>1&lt;span class="o">]&lt;/span>+ &lt;span class="m">14630&lt;/span> 停止 ./test.sh
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>2&lt;span class="o">]&lt;/span>- &lt;span class="m">14831&lt;/span> 运行中 ./test.sh &amp;gt; test.out &lt;span class="p">&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-l&lt;/code> 表示列出作业的 PID 以及作业号，其余的部分可选参数如下：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-r&lt;/strong>：只列运行中的作业；&lt;/li>
&lt;li>&lt;strong>-s&lt;/strong>：只列出已停止的作业。&lt;/li>
&lt;/ul>
&lt;p>如上输出所示，带加号的作业是默认作业，当默认作业处理完成后，带减号的作业会成为下一个默认作业。不论 shell 中有多少个正在运行的作业，任何时候都只有一个带加号的作业和一个带减号的作业。&lt;/p>
&lt;p>在 bash 的作业控制中，还可以将已停止的作业作为后台进程或前台进程进行重启，命令如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="nb">bg&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">#将作业号为1的作业以后台进程的方式进程重启&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nb">fg&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">#将作业号为1的作业以前台进程的方式进程重启&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="74-定时作业">7.4 定时作业&lt;/h3>
&lt;p>Linux 提供了以下两个命令来执行定时作业：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>at&lt;/strong>：用于一次性的定时作业；&lt;/li>
&lt;li>&lt;strong>corn&lt;/strong>：用于需要周期性执行的定时作业。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>1. at 命令&lt;/strong>&lt;/p>
&lt;p>at 命令的基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">at &lt;span class="o">[&lt;/span>-f filename&lt;span class="o">]&lt;/span> &lt;span class="nb">time&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>-f&lt;/code> 用于指定脚本文件，time 用于指定脚本的执行时间，它可以是以下多种格式：&lt;/p>
&lt;ul>
&lt;li>标准的小时和分钟格式，比如 10:15；&lt;/li>
&lt;li>AM/PM 指示符，比如 10:15 PM；&lt;/li>
&lt;li>特定可命名时间，比如 now、noon、midnight 或者 teatime（4 PM）。&lt;/li>
&lt;/ul>
&lt;p>除了指定运行作业的时间，也可以通过不同的日期格式指定特定的日期：&lt;/p>
&lt;ul>
&lt;li>标准日期格式，比如 MMDDYY、MM/DD/YY 或 DD.MM.YY；&lt;/li>
&lt;li>文本日期，比如 Jul 4 或 Dec 25，加不加年份均可。&lt;/li>
&lt;/ul>
&lt;p>另外还可以指定时间增量：&lt;/p>
&lt;ul>
&lt;li>now + 25 min；&lt;/li>
&lt;li>10:15 + 7 days。&lt;/li>
&lt;/ul>
&lt;p>使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">$ at -f test.sh now &lt;span class="c1">#立即执行test.sh脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 at 命令时，该作业会被提交到作业队列中（job queue）。针对不同优先级，存在 26 种不同的作业队列，通常用小写字 &lt;code>a~z&lt;/code> 或大写字母 &lt;code>A~Z&lt;/code> 来指代，作业队列的字母排序越高，作业运行的优先级就越低。默认情况下， at 的作业会被提交到 a 队列，如果想以更高优先级运行作业，可以用 &lt;code>-q&lt;/code> 参数进行指定。&lt;/p>
&lt;p>需要注意的是，显示器并不会关联 at 提交的作业。取而代之的是，Linux 系统会将提交该作业的用户的电子邮件地址作为 STDOUT 和 STDERR，任何发到 STDOUT 或 STDERR 的输出都会通过邮件系统发送给该用户；如果你的系统中没有安装 sendmail ，那就无法获得任何输出。因此在使用 at 命令时，最好在脚本中对 STDOUT 和 STDERR 进行重定向。&lt;/p>
&lt;p>最后 Linux 还提供了 &lt;code>atq&lt;/code> 命令用于查看处于等待状态的作业，并且支持使用 &lt;code>atrm&lt;/code> 命令来删除处于等待中的作业：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl"> $ atrm &lt;span class="m">18&lt;/span> &lt;span class="c1">#删除作业号为18的等待作业&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2. cron 命令&lt;/strong>&lt;/p>
&lt;p>cron 命令通常用于需要周期性执行的任务，其基本格式如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">min hour dayofmonth month dayofweek &lt;span class="nb">command&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用示例如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="m">15&lt;/span> &lt;span class="m">10&lt;/span> * * * /root/test.sh &lt;span class="c1">#每天15:10分执行test.sh脚本&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>想要新建基于该 cron 表达式的定时任务，可以使用 &lt;code>crontab -e&lt;/code> 命令，然后在打开的文本编辑器（操作类似 Vim）中输入上述表达式，编辑完成后保存即可。最后可以使用 &lt;code>crontab -l&lt;/code> 来查看系统中所有的定时任务：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># crontab -l&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="m">15&lt;/span> &lt;span class="m">10&lt;/span> * * * /root/test.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mojotv.cn/2018/12/26/shell-cheat-sheet" target="_blank" rel="noopener">https://mojotv.cn/2018/12/26/shell-cheat-sheet&lt;/a> Shell 语法快速入门&lt;/li>
&lt;li>&lt;a href="https://mojotv.cn/2019/07/26/general-shell-resources" target="_blank" rel="noopener">https://mojotv.cn/2019/07/26/general-shell-resources&lt;/a> linux-Bash 命令快速查询&lt;/li>
&lt;li>&lt;a href="https://devhints.io/bash" target="_blank" rel="noopener">https://devhints.io/bash&lt;/a> 提取其中的命令语句为 CheatSheet&lt;/li>
&lt;li>&lt;a href="https://linuxconfig.org/bash-scripting-cheat-sheet" target="_blank" rel="noopener">https://linuxconfig.org/bash-scripting-cheat-sheet&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>