<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-cheatsheets/1.cs/language/rust/</link><atom:link href="https://ng-tech.icu/books/awesome-cheatsheets/1.cs/language/rust/index.xml" rel="self" type="application/rss+xml"/><description>Rust</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Rust</title><link>https://ng-tech.icu/books/awesome-cheatsheets/1.cs/language/rust/</link></image><item><title>Learn Rust in Y Minutes</title><link>https://ng-tech.icu/books/awesome-cheatsheets/1.cs/language/rust/learn-rust-in-y-minutes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cheatsheets/1.cs/language/rust/learn-rust-in-y-minutes/</guid><description>&lt;h1 id="learn-rust-in-y-minutes">Learn Rust in Y Minutes&lt;/h1>
&lt;p>Rust 是由 Mozilla 研究院开发的编程语言。Rust 将底层的性能控制与高级语言的便利性和安全保障结合在了一起。而 Rust 并不需要一个垃圾回收器或者运行时即可实现这个目的，这使得 Rust 库可以成为一种 C 语言的替代品。&lt;/p>
&lt;p>Rust 第一版（0.1 版）发布于 2012 年 1 月，3 年以来一直在紧锣密鼓地迭代。因为更新太频繁，一般建议使用每夜构建版而不是稳定版，直到最近 1.0 版本的发布。2015 年 3 月 15 日，Rust 1.0 发布，完美向后兼容，最新的每夜构建版提供了缩短编译时间等新特性。Rust 采用了持续迭代模型，每 6 周一个发布版。Rust 1.1 beta 版在 1.0 发布时同时发布。&lt;/p>
&lt;p>尽管 Rust 相对来说是一门底层语言，它提供了一些常见于高级语言的函数式编程的特性。这让 Rust 不仅高效，并且易用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 这是注释，单行注释...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cm">/* ...这是多行注释 */&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">///////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 1. 基础 //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">///////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 函数 (Functions)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// `i32` 是有符号 32 位整数类型(32-bit signed integers)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">add2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="kt">i32&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 隐式返回 (不要分号)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="c1">// 主函数(Main function)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 数字 (Numbers) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 不可变绑定
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 整形/浮点型数 后缀
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="k">i32&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>: &lt;span class="kt">f64&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.3&lt;/span>&lt;span class="k">f64&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 类型推导
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 大部分时间，Rust 编译器会推导变量类型，所以不必把类型显式写出来。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这个教程里面很多地方都显式写了类型，但是只是为了示范。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 绝大部分时间可以交给类型推导。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">implicit_x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">implicit_f&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">1.3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 算术运算
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">sum&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">13&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 可变变量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mutable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">mutable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">mutable&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 字符串 (Strings) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 字符串字面量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello world!&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">f&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 1.3 hello world
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 一个 `String` – 在堆上分配空间的字符串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>: &lt;span class="nb">String&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">to_string&lt;/span>&lt;span class="p">();&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 字符串分片(slice) - 另一个字符串的不可变视图
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 基本上就是指向一个字符串的不可变指针，它不包含字符串里任何内容，只是一个指向某个东西的指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 比如这里就是 `s`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s_slice&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">s_slice&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// hello world hello world
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 数组 (Vectors/arrays) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 长度固定的数组 (array)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">four_ints&lt;/span>: &lt;span class="p">[&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 变长数组 (vector)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vector&lt;/span>: &lt;span class="nb">Vec&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">vec!&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">push&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 分片 - 某个数组(vector/array)的不可变视图
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 和字符串分片基本一样，只不过是针对数组的
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">slice&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">]&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 使用 `{:?}` 按调试样式输出
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{:?} {:?}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">vector&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">slice&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// [1, 2, 3, 4, 5] [1, 2, 3, 4, 5]
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 元组 (Tuples) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 元组是固定大小的一组值，可以是不同类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="kt">str&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">f64&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mf">3.4&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 解构 `let`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} {} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 1 hello 3.4
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 索引
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// hello
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">//////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 2. 类型 (Type) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 结构体（Sturct)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">origin&lt;/span>: &lt;span class="nc">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="mi">0&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 匿名成员结构体，又叫“元组结构体”（‘tuple struct’）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Point2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">origin2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Point2&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 基础的 C 风格枚举类型（enum）
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Direction&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Left&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Right&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Up&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Down&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">up&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Direction&lt;/span>::&lt;span class="n">Up&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 有成员的枚举类型
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">OptionalI32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">Nothing&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">two&lt;/span>: &lt;span class="nc">OptionalI32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OptionalI32&lt;/span>::&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">nothing&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OptionalI32&lt;/span>::&lt;span class="n">Nothing&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 泛型 (Generics) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">Foo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bar&lt;/span>: &lt;span class="nc">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 这个在标准库里面有实现，叫 `Option`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">enum&lt;/span> &lt;span class="nc">Optional&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">SomeVal&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">NoVal&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 方法 (Methods) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 方法需要一个显式的 `self` 参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">get_bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nc">T&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a_foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bar&lt;/span>: &lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">a_foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">get_bar&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 1
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 接口（Traits） （其他语言里叫 interfaces 或 typeclasses） //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">trait&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Frobnicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">frobnicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">impl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Frobnicate&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">fn&lt;/span> &lt;span class="nf">frobnicate&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>-&amp;gt; &lt;span class="nb">Option&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="nb">Some&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="bp">self&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">another_foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">Foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bar&lt;/span>: &lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{:?}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">another_foo&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">frobnicate&lt;/span>&lt;span class="p">());&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// Some(1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">///////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 3. 模式匹配 (Pattern matching) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">///////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">OptionalI32&lt;/span>::&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">OptionalI32&lt;/span>::&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it’s an i32: {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">OptionalI32&lt;/span>::&lt;span class="n">Nothing&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;it’s nothing!&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 高级模式匹配
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="nc">FooBar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="kt">i32&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">OptionalI32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">FooBar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">OptionalI32&lt;/span>::&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">match&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">FooBar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">OptionalI32&lt;/span>::&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The numbers are zero!&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">FooBar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="nc">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">OptionalI32&lt;/span>::&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The numbers are the same&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">FooBar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="nc">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">OptionalI32&lt;/span>::&lt;span class="n">AnI32&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Different numbers: {} {}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">m&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">FooBar&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">x&lt;/span>: &lt;span class="nc">_&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">y&lt;/span>: &lt;span class="nc">OptionalI32&lt;/span>::&lt;span class="n">Nothing&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&amp;gt;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The second number is Nothing!&amp;#34;&lt;/span>&lt;span class="p">),&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">///////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 4. 流程控制 (Control flow) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">///////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// `for` 循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">];&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 区间 (Ranges)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">for&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">in&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="k">u32&lt;/span>&lt;span class="o">..&lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">print!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{} &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 输出 `0 1 2 3 4 5 6 7 8 9 `
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// `if`
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Maths is working!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Oh no...&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// `if` 可以当表达式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">if&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;good&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">else&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="s">&amp;#34;bad&amp;#34;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">};&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// `while` 循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">==&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;The universe is operating normally.&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 无限循环
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">loop&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">////////////////////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 5. 内存安全和指针 (Memory safety &amp;amp; pointers) //
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">////////////////////////////////////////////////
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 独占指针 (Owned pointer) - 同一时刻只能有一个对象能“拥有”这个指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 意味着 `Box` 离开他的作用域后，会被安全地释放
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mine&lt;/span>: &lt;span class="nb">Box&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nb">Box&lt;/span>::&lt;span class="n">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">mine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 解引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// `now_its_mine` 获取了 `mine` 的所有权。换句话说，`mine` 移动 (move) 了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">now_its_mine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">mine&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">now_its_mine&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">now_its_mine&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 7
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// println!(&amp;#34;{}&amp;#34;, mine); // 编译报错，因为现在 `now_its_mine` 独占那个指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 引用 (Reference) – 引用其他数据的不可变指针
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 当引用指向某个值，我们称为“借用”这个值，因为是被不可变的借用，所以不能被修改，也不能移动
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 借用一直持续到生命周期结束，即离开作用域
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ref_var&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="kt">i32&lt;/span> &lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">var&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">//不像 `mine`, `var` 还可以继续使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ref_var&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// var = 5; // 编译报错，因为 `var` 被借用了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// *ref_var = 6; // 编译报错，因为 `ref_var` 是不可变引用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="c1">// 可变引用 (Mutable reference)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 当一个变量被可变地借用时，也不可使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">var2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="kd">let&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">ref_var2&lt;/span>: &lt;span class="kp">&amp;amp;&lt;/span>&lt;span class="nc">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kt">i32&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="k">mut&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="n">var2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ref_var2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">+=&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;{}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">ref_var2&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// 6
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c1">// var2 = 2; // 编译报错，因为 `var2` 被借用了
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>Rust-CheatSheet</title><link>https://ng-tech.icu/books/awesome-cheatsheets/1.cs/language/rust/rust-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cheatsheets/1.cs/language/rust/rust-cheatsheet/</guid><description>&lt;blockquote>
&lt;p>Rust CheatSheet 是对于 Rust 学习/实践过程中的语法与技巧进行盘点，其属于 &lt;a href="https://github.com/wx-chevalier/Awesome-CheatSheets/" target="_blank" rel="noopener">Awesome CheatSheet&lt;/a> 系列，致力于提升学习速度与研发效能，即可以将其当做速查手册，也可以作为轻量级的入门学习资料。本文参考了许多优秀的文章与代码示范，统一声明在了 &lt;a href="https://github.com/wx-chevalier/Awesome-Lists" target="_blank" rel="noopener">Awesome Rust List&lt;/a>；如果希望深入了解某方面的内容，可以继续阅读&lt;a href="https://github.com/wx-chevalier/Rust-Series" target="_blank" rel="noopener">Rust-Series&lt;/a>，或者前往 &lt;a href="https://github.com/wx-chevalier/rust-examples" target="_blank" rel="noopener">rust-examples&lt;/a> 查看使用 Rust 解决常见的数据结构与算法、设计模式、业务功能方面的代码实现。&lt;/p>
&lt;/blockquote>
&lt;h1 id="rust-语法速览实践技巧与开源工具清单">Rust 语法速览、实践技巧与开源工具清单&lt;/h1>
&lt;p>Rust 是为工业应用而生，并不拘泥于遵循某个范式（Paradigm），笔者认为其最核心的特性为 Ownership 与 Lifetime；能够在没有 GC 与 Runtime 的情况下，防止近乎所有的段错误，并且保证线程安全(prevents nearly all segfaults, and guarantees thread safety)。Rust 为每个引用与指针设置了 Lifetime，对象则不允许在同一时间有两个和两个以上的可变引用，并且在编译阶段即进行了内存分配(栈或者堆)；Rust 还提供了 Closure 等函数式编程语言的特性、编译时多态(Compile-time Polymorphism)、衍生的错误处理机制、灵活的模块系统等。&lt;/p>
&lt;p>对于 Rust 的语法速览可以参考本目录下的 &lt;a href="./rust-snippets.rs">rust-snippets&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://cheats.rs/" target="_blank" rel="noopener">Cheats.rs&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h1 id="hello-world">Hello World&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-rs" data-lang="rs">&lt;span class="line">&lt;span class="cl">&lt;span class="k">fn&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="p">{&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>&lt;span class="fm">println!&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello, world!&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>//&lt;/code>&lt;/td>
&lt;td>Line comment, use these to document code flow or &lt;em>internals&lt;/em>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>///&lt;/code>&lt;/td>
&lt;td>Outer line &lt;strong>doc comment&lt;/strong>, use these on types.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>//!&lt;/code>&lt;/td>
&lt;td>Inner line doc comment, mostly used at start of file to document module.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/*...*/&lt;/code>&lt;/td>
&lt;td>Block comment.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/**...*/&lt;/code>&lt;/td>
&lt;td>Outer block doc comment.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>/*!...*/&lt;/code>&lt;/td>
&lt;td>Inner block doc comment.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>rust ...&lt;/code>&lt;/td>
&lt;td>In doc comments, include a &lt;a href="https://doc.rust-lang.org/rustdoc/documentation-tests.html" target="_blank" rel="noopener">doc test&lt;/a> (doc code running on &lt;code>cargo test&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>#&lt;/code>&lt;/td>
&lt;td>In doc tests, hide line from documentation (&lt;code># use x::hidden;&lt;/code>).&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="variables">Variables&lt;/h2>
&lt;p>通过关键字定义的数据类型和存储位置。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>struct S {}&lt;/code>&lt;/td>
&lt;td>Define a &lt;strong>struct&lt;/strong> with named fields.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>struct S { x: T }&lt;/code>&lt;/td>
&lt;td>Define struct with named field &lt;code>x&lt;/code> of type &lt;code>T&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>struct S&lt;/code> &lt;code>(T);&lt;/code>&lt;/td>
&lt;td>Define &amp;ldquo;tupled&amp;rdquo; struct with numbered field &lt;code>.0&lt;/code> of type &lt;code>T&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>struct S;&lt;/code>&lt;/td>
&lt;td>Define &lt;strong>zero sized&lt;/strong> unit struct. Occupies no space, optimized away.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enum E {}&lt;/code>&lt;/td>
&lt;td>Define an &lt;strong>enum&lt;/strong>, &lt;em>c&lt;/em>. &lt;a href="https://en.wikipedia.org/wiki/Algebraic_data_type" target="_blank" rel="noopener">algebraic data types&lt;/a>, &lt;a href="https://en.wikipedia.org/wiki/Tagged_union" target="_blank" rel="noopener">tagged unions&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enum E { A, B``(), C {} }&lt;/code>&lt;/td>
&lt;td>Define variants of enum; can be unit- &lt;code>A&lt;/code>, tuple- &lt;code>B&lt;/code> &lt;code>()&lt;/code> and struct-like &lt;code>C{}&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>enum E { A = 1 }&lt;/code>&lt;/td>
&lt;td>If variants are only unit-like, allow discriminant values, e.g., for FFI.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>union U {}&lt;/code>&lt;/td>
&lt;td>Unsafe C-like &lt;strong>union&lt;/strong> for FFI compatibility.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>static X: T = T();&lt;/code>&lt;/td>
&lt;td>&lt;strong>Global variable&lt;/strong> with &lt;code>'static&lt;/code> lifetime, single memory location.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>const X: T = T();&lt;/code>&lt;/td>
&lt;td>Defines &lt;strong>constant&lt;/strong> . Copied into a temporary when used.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let x: T;&lt;/code>&lt;/td>
&lt;td>Allocate &lt;code>T&lt;/code> bytes on stack bound as &lt;code>x&lt;/code>. Assignable once, not mutable.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let mut x: T;&lt;/code>&lt;/td>
&lt;td>Like &lt;code>let&lt;/code>, but allow for &lt;strong>mutability&lt;/strong> and mutable borrow.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x = y;&lt;/code>&lt;/td>
&lt;td>Moves &lt;code>y&lt;/code> to &lt;code>x&lt;/code>, invalidating &lt;code>y&lt;/code> if &lt;code>T&lt;/code> is not &lt;strong>&lt;code>Copy&lt;/code>&lt;/strong>, and copying &lt;code>y&lt;/code> otherwise.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>绑定变量（Bound Variables）存在于堆栈中，用于同步代码。在 &lt;code>async {}&lt;/code> 代码中，它们成为异步状态机的一部分，可能驻留在堆上。从技术上讲，可变性和不变性是误称。不可变的绑定或共享引用可能仍包含 Cell，从而提供内部可变性。创建和访问数据结构；以及其他一些西语类型。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>S { x: y }&lt;/code>&lt;/td>
&lt;td>Create &lt;code>struct S {}&lt;/code> or &lt;code>use&lt;/code>&amp;lsquo;ed &lt;code>enum E::S {}&lt;/code> with field &lt;code>x&lt;/code> set to &lt;code>y&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { x }&lt;/code>&lt;/td>
&lt;td>Same, but use local variable &lt;code>x&lt;/code> for field &lt;code>x&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { ..s }&lt;/code>&lt;/td>
&lt;td>Fill remaining fields from &lt;code>s&lt;/code>, esp. useful with &lt;a href="https://doc.rust-lang.org/std/default/trait.Default.html" target="_blank" rel="noopener">Default&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { 0: x }&lt;/code>&lt;/td>
&lt;td>Like &lt;code>S&lt;/code> &lt;code>(x)&lt;/code> below, but set field &lt;code>.0&lt;/code> with struct syntax.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S&lt;/code> &lt;code>(x)&lt;/code>&lt;/td>
&lt;td>Create &lt;code>struct S&lt;/code> &lt;code>(T)&lt;/code> or &lt;code>use&lt;/code>&amp;lsquo;ed &lt;code>enum E::S&lt;/code> &lt;code>()&lt;/code> with field &lt;code>.0&lt;/code> set to &lt;code>x&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S&lt;/code>&lt;/td>
&lt;td>If &lt;code>S&lt;/code> is unit &lt;code>struct S;&lt;/code> or &lt;code>use&lt;/code>&amp;lsquo;ed &lt;code>enum E::S&lt;/code> create value of &lt;code>S&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>E::C { x: y }&lt;/code>&lt;/td>
&lt;td>Create enum variant &lt;code>C&lt;/code>. Other methods above also work.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>()&lt;/code>&lt;/td>
&lt;td>Empty tuple, both literal and type, aka &lt;strong>unit&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(x)&lt;/code>&lt;/td>
&lt;td>Parenthesized expression.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(x,)&lt;/code>&lt;/td>
&lt;td>Single-element &lt;strong>tuple&lt;/strong> expression.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(S,)&lt;/code>&lt;/td>
&lt;td>Single-element tuple type.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[S]&lt;/code>&lt;/td>
&lt;td>Array type of unspecified length, i.e., &lt;strong>slice&lt;/strong>. Can&amp;rsquo;t live on stack.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[S; n]&lt;/code>&lt;/td>
&lt;td>&lt;strong>Array type&lt;/strong> of fixed length &lt;code>n&lt;/code> holding elements of type &lt;code>S&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[x; n]&lt;/code>&lt;/td>
&lt;td>Array instance with &lt;code>n&lt;/code> copies of &lt;code>x&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[x, y]&lt;/code>&lt;/td>
&lt;td>Array instance with given elements &lt;code>x&lt;/code> and &lt;code>y&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x[0]&lt;/code>&lt;/td>
&lt;td>Collection indexing. Overloadable &lt;a href="https://doc.rust-lang.org/std/ops/trait.Index.html" target="_blank" rel="noopener">Index&lt;/a>, &lt;a href="https://doc.rust-lang.org/std/ops/trait.IndexMut.html" target="_blank" rel="noopener">IndexMut&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x[..]&lt;/code>&lt;/td>
&lt;td>Collection slice-like indexing via &lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeFull.html" target="_blank" rel="noopener">RangeFull&lt;/a>, &lt;em>c&lt;/em>. slices.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x[a..]&lt;/code>&lt;/td>
&lt;td>Collection slice-like indexing via &lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeFrom.html" target="_blank" rel="noopener">RangeFrom&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x[..b]&lt;/code>&lt;/td>
&lt;td>Collection slice-like indexing &lt;a href="https://doc.rust-lang.org/std/ops/struct.RangeTo.html" target="_blank" rel="noopener">RangeTo&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x[a..b]&lt;/code>&lt;/td>
&lt;td>Collection slice-like indexing via &lt;a href="https://doc.rust-lang.org/std/ops/struct.Range.html" target="_blank" rel="noopener">Range&lt;/a>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a..b&lt;/code>&lt;/td>
&lt;td>Right-exclusive &lt;strong>range&lt;/strong> creation, also seen as &lt;code>..b&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a..=b&lt;/code>&lt;/td>
&lt;td>Inclusive range creation, also seen as &lt;code>..=b&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.x&lt;/code>&lt;/td>
&lt;td>Named &lt;strong>field access&lt;/strong>, might try to &lt;a href="https://doc.rust-lang.org/std/ops/trait.Deref.html" target="_blank" rel="noopener">Deref&lt;/a> if &lt;code>x&lt;/code> not part of type &lt;code>S&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s.0&lt;/code>&lt;/td>
&lt;td>Numbered field access, used for tuple types &lt;code>S&lt;/code> &lt;code>(T)&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>这些签名不适合任何其他类别，但是很高兴知道。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>!&lt;/code>&lt;/td>
&lt;td>Always empty &lt;strong>never type&lt;/strong>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>_&lt;/code>&lt;/td>
&lt;td>Unnamed variable binding, e.g., `&lt;/td>
&lt;td>x, _&lt;/td>
&lt;td>{}`.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let _ = x;&lt;/code>&lt;/td>
&lt;td>Unnamed assignment is no-op, does &lt;strong>not&lt;/strong> move out &lt;code>x&lt;/code> or preserve scope!&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>_x&lt;/code>&lt;/td>
&lt;td>Variable binding explicitly marked as unused.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>1_234_567&lt;/code>&lt;/td>
&lt;td>Numeric separator for visual clarity.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>1_u8&lt;/code>&lt;/td>
&lt;td>Type specifier for &lt;strong>numeric literals&lt;/strong> (also &lt;code>i8&lt;/code>, &lt;code>u16&lt;/code>, &amp;hellip;).&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>0xBEEF&lt;/code>, &lt;code>0o777&lt;/code>, &lt;code>0b1001&lt;/code>&lt;/td>
&lt;td>Hexadecimal (&lt;code>0x&lt;/code>), octal (&lt;code>0o&lt;/code>) and binary (&lt;code>0b&lt;/code>) integer literals.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r#foo&lt;/code>&lt;/td>
&lt;td>A &lt;strong>raw identifier&lt;/strong> for edition compatibility.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x;&lt;/code>&lt;/td>
&lt;td>&lt;strong>Statement&lt;/strong> terminator, &lt;em>c&lt;/em>. &lt;strong>expressions&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="references--pointers">References &amp;amp; Pointers&lt;/h2>
&lt;p>授予对未拥有的内存的访问权限。另请参见“泛型和约束”部分。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;amp;S&lt;/code>&lt;/td>
&lt;td>Shared &lt;strong>reference&lt;/strong> (space for holding &lt;em>any&lt;/em> &lt;code>&amp;amp;s&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;[S]&lt;/code>&lt;/td>
&lt;td>Special slice reference that contains (&lt;code>address&lt;/code>, &lt;code>length&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;str&lt;/code>&lt;/td>
&lt;td>Special string reference that contains (&lt;code>address&lt;/code>, &lt;code>length&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;mut S&lt;/code>&lt;/td>
&lt;td>Exclusive reference to allow mutability (also &lt;code>&amp;amp;mut [S]&lt;/code>, &lt;code>&amp;amp;mut dyn S&lt;/code>, &amp;hellip;)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;dyn T&lt;/code>&lt;/td>
&lt;td>Special &lt;strong>trait object&lt;/strong> reference that contains (&lt;code>address&lt;/code>, &lt;code>vtable&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*const S&lt;/code>&lt;/td>
&lt;td>Immutable &lt;strong>raw pointer type&lt;/strong> w/o memory safety.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*mut S&lt;/code>&lt;/td>
&lt;td>Mutable raw pointer type w/o memory safety.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;s&lt;/code>&lt;/td>
&lt;td>Shared &lt;strong>borrow&lt;/strong> (e.g., address, len, vtable, &amp;hellip; of &lt;em>this&lt;/em> &lt;code>s&lt;/code>, like &lt;code>0x1234&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;mut s&lt;/code>&lt;/td>
&lt;td>Exclusive borrow that allows &lt;strong>mutability&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>ref s&lt;/code>&lt;/td>
&lt;td>&lt;strong>Bind by reference&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let ref r = s;&lt;/code>&lt;/td>
&lt;td>Equivalent to &lt;code>let r = &amp;amp;s&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let S { ref mut x } = s;&lt;/code>&lt;/td>
&lt;td>Mutable ref binding (&lt;code>let x = &amp;amp;mut s.x&lt;/code>), shorthand destructuring version.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*r&lt;/code>&lt;/td>
&lt;td>&lt;strong>Dereference&lt;/strong> a reference &lt;code>r&lt;/code> to access what it points to.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>*r = s;&lt;/code>&lt;/td>
&lt;td>If &lt;code>r&lt;/code> is a mutable reference, move or copy &lt;code>s&lt;/code> to target memory.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s = *r;&lt;/code>&lt;/td>
&lt;td>Make &lt;code>s&lt;/code> a copy of whatever &lt;code>r&lt;/code> references, if that is &lt;code>Copy&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>s = *my_box;&lt;/code>&lt;/td>
&lt;td>&lt;a href="https://www.reddit.com/r/rust/comments/b4so6i/what_is_exactly/ej8xwg8/" target="_blank" rel="noopener">Special case&lt;/a> for &lt;code>Box&lt;/code> that can also move out Box&amp;rsquo;ed content if it isn&amp;rsquo;t &lt;code>Copy&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>'a&lt;/code>&lt;/td>
&lt;td>A &lt;strong>lifetime parameter&lt;/strong>,, duration of a flow in static analysis.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;'a S&lt;/code>&lt;/td>
&lt;td>Only accepts a &lt;code>s&lt;/code> with an address that lives &lt;code>'a&lt;/code> or longer.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;'a mut S&lt;/code>&lt;/td>
&lt;td>Same, but allow content of address to be changed.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>struct S&amp;lt;'a&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Signals &lt;code>S&lt;/code> will contain address with lifetime &lt;code>'a&lt;/code>. Creator of &lt;code>S&lt;/code> decides &lt;code>'a&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trait T&amp;lt;'a&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Signals a &lt;code>S&lt;/code> which &lt;code>impl T for S&lt;/code> might contain address.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f&amp;lt;'a&amp;gt;(t: &amp;amp;'a T)&lt;/code>&lt;/td>
&lt;td>Same, for function. Caller decides &lt;code>'a&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>'static&lt;/code>&lt;/td>
&lt;td>Special lifetime lasting the entire program execution.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="types">Types&lt;/h2>
&lt;p>类型的简写名称，以及将一种类型转换为另一种类型的方法。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>type T = S;&lt;/code>&lt;/td>
&lt;td>Create a &lt;strong>type alias&lt;/strong>, i.e., another name for &lt;code>S&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Self&lt;/code>&lt;/td>
&lt;td>Type alias for &lt;strong>implementing type&lt;/strong>, e.g. &lt;code>fn new() -&amp;gt; Self&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>self&lt;/code>&lt;/td>
&lt;td>Method subject in &lt;code>fn f(self) {}&lt;/code>, same as &lt;code>fn f(self: Self) {}&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;self&lt;/code>&lt;/td>
&lt;td>Same, but refers to self as borrowed, same as &lt;code>f(self: &amp;amp;Self)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>&amp;amp;mut self&lt;/code>&lt;/td>
&lt;td>Same, but mutably borrowed, same as &lt;code>f(self: &amp;amp;mut Self)&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>self: Box&lt;/code>&lt;/td>
&lt;td>&lt;a href="https://github.com/withoutboats/rfcs/blob/arbitray-receivers/text/0000-century-of-the-self-type.md" target="_blank" rel="noopener">Arbitrary self type&lt;/a>, add methods to smart pointers (&lt;code>my_box.f_of_self()&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S as T&lt;/code>&lt;/td>
&lt;td>&lt;strong>Disambiguate&lt;/strong> type &lt;code>S&lt;/code> as trait &lt;code>T&lt;/code>, e.g., &lt;code>::f()&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S as R&lt;/code>&lt;/td>
&lt;td>In &lt;code>use&lt;/code> of symbol, import &lt;code>S&lt;/code> as &lt;code>R&lt;/code>, e.g., &lt;code>use a::S as R&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x as u32&lt;/code>&lt;/td>
&lt;td>Primitive &lt;strong>cast&lt;/strong>, may truncate and be a bit surprising.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="functions--behavior">Functions &amp;amp; Behavior&lt;/h2>
&lt;p>定义代码单元及其抽象。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;th>&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>trait T {}&lt;/code>&lt;/td>
&lt;td>Define a &lt;strong>trait&lt;/strong>; common behavior others can implement.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trait T : R {}&lt;/code>&lt;/td>
&lt;td>&lt;code>T&lt;/code> is subtrait of &lt;strong>supertrait&lt;/strong> &lt;code>R&lt;/code>. Any &lt;code>S&lt;/code> must &lt;code>impl R&lt;/code> before it can &lt;code>impl T&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>impl S {}&lt;/code>&lt;/td>
&lt;td>&lt;strong>Implementation&lt;/strong> of functionality for a type &lt;code>S&lt;/code>, e.g., methods.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>impl T for S {}&lt;/code>&lt;/td>
&lt;td>Implement trait &lt;code>T&lt;/code> for type &lt;code>S&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>impl !T for S {}&lt;/code>&lt;/td>
&lt;td>Disable an automatically derived &lt;strong>auto trait&lt;/strong> .&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f() {}&lt;/code>&lt;/td>
&lt;td>Definition of a &lt;strong>function&lt;/strong>; or associated function if inside &lt;code>impl&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f() -&amp;gt; S {}&lt;/code>&lt;/td>
&lt;td>Same, returning a value of type S.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f(&amp;amp;self) {}&lt;/code>&lt;/td>
&lt;td>Define a &lt;strong>method&lt;/strong>, e.g., within an &lt;code>impl S {}&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>const fn f() {}&lt;/code>&lt;/td>
&lt;td>Constant &lt;code>fn&lt;/code> usable at compile time, e.g., &lt;code>const X: u32 = f(Y)&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>async fn f() {}&lt;/code>&lt;/td>
&lt;td>&lt;strong>Async&lt;/strong> function transformation, makes &lt;code>f&lt;/code> return an &lt;code>impl&lt;/code> &lt;strong>&lt;code>Future&lt;/code>&lt;/strong>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>async fn f() -&amp;gt; S {}&lt;/code>&lt;/td>
&lt;td>Same, but make &lt;code>f&lt;/code> return an &lt;code>impl Future&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>async { x }&lt;/code>&lt;/td>
&lt;td>Used within a function, make &lt;code>{ x }&lt;/code> an &lt;code>impl Future&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn() -&amp;gt; S&lt;/code>&lt;/td>
&lt;td>&lt;strong>Function pointers&lt;/strong>,, memory holding address of a callable.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>Fn() -&amp;gt; S&lt;/code>&lt;/td>
&lt;td>&lt;strong>Callable Trait&lt;/strong>, (also &lt;code>FnMut&lt;/code>, &lt;code>FnOnce&lt;/code>), implemented by closures, fn&amp;rsquo;s &amp;hellip;&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`&lt;/td>
&lt;td>&lt;/td>
&lt;td>{}`&lt;/td>
&lt;td>A &lt;strong>closure&lt;/strong> that borrows its &lt;strong>captures&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`&lt;/td>
&lt;td>x&lt;/td>
&lt;td>{}`&lt;/td>
&lt;td>Closure with a bound parameter &lt;code>x&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`&lt;/td>
&lt;td>x&lt;/td>
&lt;td>x + x`&lt;/td>
&lt;td>Closure without block expression; may only consist of single expression.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`move&lt;/td>
&lt;td>x&lt;/td>
&lt;td>x + y`&lt;/td>
&lt;td>Closure taking ownership of its captures.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`return&lt;/td>
&lt;td>&lt;/td>
&lt;td>true`&lt;/td>
&lt;td>Closures sometimes look like logical ORs (here: return a closure).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unsafe&lt;/code>&lt;/td>
&lt;td>If you enjoy debugging segfaults Friday night; &lt;strong>unsafe code&lt;/strong>.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unsafe f() {}&lt;/code>&lt;/td>
&lt;td>Sort-of means &amp;ldquo;&lt;em>can cause UB, &lt;strong>YOU must check&lt;/strong> requirements&lt;/em>&amp;rdquo;.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>unsafe {}&lt;/code>&lt;/td>
&lt;td>Guarantees to compiler &amp;ldquo;&lt;strong>*I have checked&lt;/strong> requirements, trust me*&amp;rdquo;.&lt;/td>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="control-flow">Control Flow&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>while x {}&lt;/code>&lt;/td>
&lt;td>&lt;strong>Loop&lt;/strong>, run while expression &lt;code>x&lt;/code> is true.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>loop {}&lt;/code>&lt;/td>
&lt;td>&lt;strong>Loop infinitely&lt;/strong> until &lt;code>break&lt;/code>. Can yield value with &lt;code>break x&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>for x in iter {}&lt;/code>&lt;/td>
&lt;td>Syntactic sugar to loop over &lt;strong>iterators&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>if x {} else {}&lt;/code>&lt;/td>
&lt;td>&lt;strong>Conditional branch&lt;/strong> if expression is true.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>'label: loop {}&lt;/code>&lt;/td>
&lt;td>&lt;strong>Loop label&lt;/strong>, useful for flow control in nested loops.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>break&lt;/code>&lt;/td>
&lt;td>&lt;strong>Break expression&lt;/strong> to exit a loop.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>break x&lt;/code>&lt;/td>
&lt;td>Same, but make &lt;code>x&lt;/code> value of the loop expression (only in actual &lt;code>loop&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>break 'label&lt;/code>&lt;/td>
&lt;td>Exit not only this loop, but the enclosing one marked with &lt;code>'label&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>continue&lt;/code>&lt;/td>
&lt;td>&lt;strong>Continue expression&lt;/strong> to the next loop iteration of this loop.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>continue 'label&lt;/code>&lt;/td>
&lt;td>Same, but instead of enclosing loop marked with &lt;code>'label&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x?&lt;/code>&lt;/td>
&lt;td>If &lt;code>x&lt;/code> is &lt;a href="https://doc.rust-lang.org/std/result/enum.Result.html#variant.Err" target="_blank" rel="noopener">Err&lt;/a> or &lt;a href="https://doc.rust-lang.org/std/option/enum.Option.html#variant.None" target="_blank" rel="noopener">None&lt;/a>, &lt;strong>return and propagate&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x.await&lt;/code>&lt;/td>
&lt;td>Only works inside &lt;code>async&lt;/code>. Yield flow until &lt;strong>&lt;code>Future&lt;/code>&lt;/strong> or Stream &lt;code>x&lt;/code> ready.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>return x&lt;/code>&lt;/td>
&lt;td>Early return from function. More idiomatic way is to end with expression.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>f()&lt;/code>&lt;/td>
&lt;td>Invoke callable &lt;code>f&lt;/code> (e.g., a function, closure, function pointer, &lt;code>Fn&lt;/code>, &amp;hellip;).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x.f()&lt;/code>&lt;/td>
&lt;td>Call member function, requires &lt;code>f&lt;/code> takes &lt;code>self&lt;/code>, &lt;code>&amp;amp;self&lt;/code>, &amp;hellip; as first argument.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>X::f(x)&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>x.f()&lt;/code>. Unless &lt;code>impl Copy for X {}&lt;/code>, &lt;code>f&lt;/code> can only be called once.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>X::f(&amp;amp;x)&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>x.f()&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>X::f(&amp;amp;mut x)&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>x.f()&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S::f(&amp;amp;x)&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>x.f()&lt;/code> if &lt;code>X&lt;/code> &lt;a href="https://doc.rust-lang.org/std/ops/trait.Deref.html" target="_blank" rel="noopener">derefs&lt;/a> to &lt;code>S&lt;/code>, i.e., &lt;code>x.f()&lt;/code> finds methods of &lt;code>S&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T::f(&amp;amp;x)&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>x.f()&lt;/code> if &lt;code>X impl T&lt;/code>, i.e., &lt;code>x.f()&lt;/code> finds methods of &lt;code>T&lt;/code> if in scope.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>X::f()&lt;/code>&lt;/td>
&lt;td>Call associated function, e.g., &lt;code>X::new()&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>::f()&lt;/code>&lt;/td>
&lt;td>Call trait method &lt;code>T::f()&lt;/code> implemented for &lt;code>X&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="pattern-matching">Pattern Matching&lt;/h2>
&lt;p>在 match 或 let 表达式或函数参数中找到的构造。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>match m {}&lt;/code>&lt;/td>
&lt;td>Initiate &lt;strong>pattern matching&lt;/strong>, then use match arms, &lt;em>c&lt;/em>. next table.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let S(x) = get();&lt;/code>&lt;/td>
&lt;td>Notably, &lt;code>let&lt;/code> also &lt;strong>destructures&lt;/strong> similar to the table below.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let S { x } = s;&lt;/code>&lt;/td>
&lt;td>Only &lt;code>x&lt;/code> will be bound to value &lt;code>s.x&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let (_, b, _) = abc;&lt;/code>&lt;/td>
&lt;td>Only &lt;code>b&lt;/code> will be bound to value &lt;code>abc.1&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let (a, ..) = abc;&lt;/code>&lt;/td>
&lt;td>Ignoring &amp;rsquo;the rest&amp;rsquo; also works.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let (.., a, b) = (1, 2);&lt;/code>&lt;/td>
&lt;td>Specific bindings take precedence over &amp;rsquo;the rest&amp;rsquo;, here &lt;code>a&lt;/code> is &lt;code>1&lt;/code>, &lt;code>b&lt;/code> is &lt;code>2&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>let Some(x) = get();&lt;/code>&lt;/td>
&lt;td>&lt;strong>Won&amp;rsquo;t&lt;/strong> work if pattern can be &lt;strong>refuted&lt;/strong>, use &lt;code>if let&lt;/code> instead.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>if let Some(x) = get() {}&lt;/code>&lt;/td>
&lt;td>Branch if pattern can be assigned (e.g., &lt;code>enum&lt;/code> variant), syntactic sugar.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f(S { x }: S)&lt;/code>&lt;/td>
&lt;td>Function parameters also work like &lt;code>let&lt;/code>, here &lt;code>x&lt;/code> bound to &lt;code>s.x&lt;/code> of &lt;code>f(s)&lt;/code>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>匹配表达式中的模式匹配臂。这些臂的左侧也可以在 let 表达式中找到。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Match Arm&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;th>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>E::A =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match enum variant &lt;code>A&lt;/code>, &lt;em>c&lt;/em>. &lt;strong>pattern matching&lt;/strong>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>E::B ( .. ) =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match enum tuple variant &lt;code>B&lt;/code>, wildcard any index.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>E::C { .. } =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match enum struct variant &lt;code>C&lt;/code>, wildcard any field.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { x: 0, y: 1 } =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match struct with specific values (only accepts &lt;code>s&lt;/code> with &lt;code>s.x&lt;/code> of &lt;code>0&lt;/code> and &lt;code>s.y&lt;/code> of &lt;code>1&lt;/code>).&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { x: a, y: b } =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match struct with &lt;em>any&lt;/em>(!) values and bind &lt;code>s.x&lt;/code> to &lt;code>a&lt;/code> and &lt;code>s.y&lt;/code> to &lt;code>b&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { x, y } =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Same, but shorthand with &lt;code>s.x&lt;/code> and &lt;code>s.y&lt;/code> bound as &lt;code>x&lt;/code> and &lt;code>y&lt;/code> respectively.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { .. } =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match struct with any values.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>D =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match enum variant &lt;code>E::D&lt;/code> if &lt;code>D&lt;/code> in &lt;code>use&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>D =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match anything, bind &lt;code>D&lt;/code>; possibly false friend of &lt;code>E::D&lt;/code> if &lt;code>D&lt;/code> not in &lt;code>use&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>_ =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Proper wildcard that matches anything / &amp;ldquo;all the rest&amp;rdquo;.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>(a, 0) =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match tuple with any value for &lt;code>a&lt;/code> and &lt;code>0&lt;/code> for second.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[a, 0] =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>&lt;strong>Slice pattern&lt;/strong>, match array with any value for &lt;code>a&lt;/code> and &lt;code>0&lt;/code> for second.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[1, ..] =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match array starting with &lt;code>1&lt;/code>, any value for rest; &lt;strong>subslice pattern&lt;/strong>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[2, .., 5] =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Match array starting with &lt;code>1&lt;/code>, ending with &lt;code>5&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>[2, x @ .., 5] =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Same, but also bind &lt;code>x&lt;/code> to slice representing middle (&lt;em>c.&lt;/em> next entry).&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>x @ 1..=5 =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Bind matched to &lt;code>x&lt;/code>; &lt;strong>pattern binding&lt;/strong>, here &lt;code>x&lt;/code> would be &lt;code>1&lt;/code>, &lt;code>2&lt;/code>, &amp;hellip; or &lt;code>5&lt;/code>.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`0&lt;/td>
&lt;td>1 =&amp;gt; {}`&lt;/td>
&lt;td>Pattern alternatives (or-patterns).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`E::A&lt;/td>
&lt;td>E::Z`&lt;/td>
&lt;td>Same, but on enum variants.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>`E::C {x}&lt;/td>
&lt;td>E::D {x}`&lt;/td>
&lt;td>Same, but bind &lt;code>x&lt;/code> if all variants have it.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S { x } if x &amp;gt; 10 =&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Pattern &lt;strong>match guards&lt;/strong>, condition must be true as well to match.&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="macros--attributes">Macros &amp;amp; Attributes&lt;/h2>
&lt;p>代码生成结构在实际编译发生之前就已扩展。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>m!()&lt;/code>&lt;/td>
&lt;td>&lt;strong>Macro&lt;/strong> invocation, also &lt;code>m!{}&lt;/code>, &lt;code>m![]&lt;/code> (depending on macro).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>#[attr]&lt;/code>&lt;/td>
&lt;td>Outer &lt;strong>attribute&lt;/strong>., annotating the following item.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>#![attr]&lt;/code>&lt;/td>
&lt;td>Inner attribute, annotating the surrounding item.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>在声明性宏中的示例 macro_rules！实现这些工作：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Within Macros&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>$x:ty&lt;/code>&lt;/td>
&lt;td>Macro capture, with the &lt;code>ty&lt;/code> part being:&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:item&lt;/code>&lt;/td>
&lt;td>An item, like a function, struct, module, etc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:block&lt;/code>&lt;/td>
&lt;td>A block &lt;code>{}&lt;/code> of statements or expressions, e.g., &lt;code>{ let x = 5; }&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:stmt&lt;/code>&lt;/td>
&lt;td>A statement, e.g., &lt;code>let x = 1 + 1;&lt;/code>, &lt;code>String::new();&lt;/code> or &lt;code>vec![];&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:expr&lt;/code>&lt;/td>
&lt;td>An expression, e.g., &lt;code>x&lt;/code>, &lt;code>1 + 1&lt;/code>, &lt;code>String::new()&lt;/code> or &lt;code>vec![]&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:pat&lt;/code>&lt;/td>
&lt;td>A pattern, e.g., &lt;code>Some(t)&lt;/code>, &lt;code>(17, 'a')&lt;/code> or &lt;code>_&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:ty&lt;/code>&lt;/td>
&lt;td>A type, e.g., &lt;code>String&lt;/code>, &lt;code>usize&lt;/code> or &lt;code>Vec&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:ident&lt;/code>&lt;/td>
&lt;td>An identifier, for example in &lt;code>let x = 0;&lt;/code> the identifier is &lt;code>x&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:path&lt;/code>&lt;/td>
&lt;td>A path (e.g. &lt;code>foo&lt;/code>, &lt;code>::std::mem::replace&lt;/code>, &lt;code>transmute::&amp;lt;_, int&amp;gt;&lt;/code>, …).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:literal&lt;/code>&lt;/td>
&lt;td>A literal (e.g. &lt;code>3&lt;/code>, &lt;code>&amp;quot;foo&amp;quot;&lt;/code>, &lt;code>b&amp;quot;bar&amp;quot;&lt;/code>, etc.).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:lifetime&lt;/code>&lt;/td>
&lt;td>A lifetime (e.g. &lt;code>'a&lt;/code>, &lt;code>'static&lt;/code>, etc.).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:meta&lt;/code>&lt;/td>
&lt;td>A meta item; the things that go inside &lt;code>#[...]&lt;/code> and &lt;code>#![...]&lt;/code> attributes.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:vis&lt;/code>&lt;/td>
&lt;td>A visibility modifier; &lt;code>pub&lt;/code>, &lt;code>pub(crate)&lt;/code>, etc.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x:tt&lt;/code>&lt;/td>
&lt;td>A single token tree, &lt;a href="https://stackoverflow.com/a/40303308" target="_blank" rel="noopener">see here&lt;/a> for more details.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$x&lt;/code>&lt;/td>
&lt;td>Macro substitution, e.g., use the captured &lt;code>$x:ty&lt;/code> from above.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$(x),*&lt;/code>&lt;/td>
&lt;td>Macro repetition &amp;ldquo;zero or more times&amp;rdquo; in macros by example.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$(x),?&lt;/code>&lt;/td>
&lt;td>Same, but &amp;ldquo;zero or one time&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$(x),+&lt;/code>&lt;/td>
&lt;td>Same, but &amp;ldquo;one or more times&amp;rdquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$(x)&amp;lt;&amp;lt;+&lt;/code>&lt;/td>
&lt;td>In fact separators other than &lt;code>,&lt;/code> are also accepted. Here: &lt;code>&amp;lt;&amp;lt;&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>$crate&lt;/code>&lt;/td>
&lt;td>Special hygiene variable, crate where macros is defined.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="generics--constraints">Generics &amp;amp; Constraints&lt;/h2>
&lt;p>Generics combine with many other constructs such as struct S&lt;T>, fn f&lt;T>(), &amp;hellip;&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>S&lt;/code>&lt;/td>
&lt;td>A &lt;strong>generic&lt;/strong> type with a type parameter (&lt;code>T&lt;/code> is placeholder name here).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S&lt;/code>&lt;/td>
&lt;td>Type short hand &lt;strong>trait bound&lt;/strong> specification (&lt;code>R&lt;/code> &lt;em>must&lt;/em> be actual trait).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T: R, P: S&lt;/code>&lt;/td>
&lt;td>&lt;strong>Independent trait bounds&lt;/strong> (here one for &lt;code>T&lt;/code> and one for &lt;code>P&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T: R, S&lt;/code>&lt;/td>
&lt;td>Compile error, you probably want compound bound &lt;code>R + S&lt;/code> below.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T: R + S&lt;/code>&lt;/td>
&lt;td>&lt;strong>Compound trait bound&lt;/strong>, &lt;code>T&lt;/code> must fulfill &lt;code>R&lt;/code> and &lt;code>S&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T: R + 'a&lt;/code>&lt;/td>
&lt;td>Same, but w. lifetime. &lt;code>T&lt;/code> must fulfill &lt;code>R&lt;/code>, if &lt;code>T&lt;/code> has lifetimes, must outlive &lt;code>'a&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T: ?Sized&lt;/code>&lt;/td>
&lt;td>Opt out of a pre-defined trait bound, here &lt;code>Sized&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T: 'a&lt;/code>&lt;/td>
&lt;td>Type &lt;strong>lifetime bound&lt;/strong> ; if T has references, they must outlive &lt;code>'a&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>T: 'static&lt;/code>&lt;/td>
&lt;td>Same; does esp. &lt;em>not&lt;/em> mean value &lt;code>t&lt;/code> &lt;em>will&lt;/em> live &lt;code>'static&lt;/code>, only that it could.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>'b: 'a&lt;/code>&lt;/td>
&lt;td>Lifetime &lt;code>'b&lt;/code> must live at least as long as (i.e., &lt;em>outlive&lt;/em>) &lt;code>'a&lt;/code> bound.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S where T: R&lt;/code>&lt;/td>
&lt;td>Same as &lt;code>S&lt;/code> but more pleasant to read for longer bounds.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S&lt;/code>&lt;/td>
&lt;td>&lt;strong>Default type parameter&lt;/strong> for associated type.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S&amp;lt;'_&amp;gt;&lt;/code>&lt;/td>
&lt;td>Inferred &lt;strong>anonymous lifetime&lt;/strong>; asks compiler to &lt;em>&amp;lsquo;figure it out&amp;rsquo;&lt;/em> if obvious.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S&amp;lt;_&amp;gt;&lt;/code>&lt;/td>
&lt;td>Inferred &lt;strong>anonymous type&lt;/strong>, e.g., as &lt;code>let x: Vec&amp;lt;_&amp;gt; = iter.collect()&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>S::&lt;/code>&lt;/td>
&lt;td>&lt;strong>Turbofish&lt;/strong> call site type disambiguation, e.g. &lt;code>f::()&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trait T {}&lt;/code>&lt;/td>
&lt;td>A trait generic over &lt;code>X&lt;/code>. Can have multiple &lt;code>impl T for S&lt;/code> (one per &lt;code>X&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trait T { type X; }&lt;/code>&lt;/td>
&lt;td>Defines &lt;strong>associated type&lt;/strong> &lt;code>X&lt;/code>. Only one &lt;code>impl T for S&lt;/code> possible.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>type X = R;&lt;/code>&lt;/td>
&lt;td>Set associated type within &lt;code>impl T for S { type X = R; }&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>impl S {}&lt;/code>&lt;/td>
&lt;td>Implement functionality for any &lt;code>T&lt;/code> in &lt;code>S&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>impl S {}&lt;/code>&lt;/td>
&lt;td>Implement functionality for exactly &lt;code>S&lt;/code> (e.g., &lt;code>S&lt;/code>).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f() -&amp;gt; impl T&lt;/code>&lt;/td>
&lt;td>&lt;strong>Existential types&lt;/strong>, returns an unknown-to-caller &lt;code>S&lt;/code> that &lt;code>impl T&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f(x: &amp;amp;impl T)&lt;/code>&lt;/td>
&lt;td>Trait bound,&amp;quot;&lt;strong>impl traits&lt;/strong>&amp;quot;, somewhat similar to &lt;code>fn f(x: &amp;amp;S)&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f(x: &amp;amp;dyn T)&lt;/code>&lt;/td>
&lt;td>Marker for &lt;strong>dynamic dispatch&lt;/strong>, &lt;code>f&lt;/code> will not be monomorphized.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f() where Self: R;&lt;/code>&lt;/td>
&lt;td>In &lt;code>trait T {}&lt;/code>, make &lt;code>f&lt;/code> accessible only on types known to also &lt;code>impl R&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>fn f() where Self: R {}&lt;/code>&lt;/td>
&lt;td>Esp. useful w. default methods (non dflt. would need be impl&amp;rsquo;ed anyway).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>for&amp;lt;'a&amp;gt;&lt;/code>&lt;/td>
&lt;td>&lt;strong>Higher-ranked trait bounds.&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>trait T: for&amp;lt;'a&amp;gt; R&amp;lt;'a&amp;gt; {}&lt;/code>&lt;/td>
&lt;td>Any &lt;code>S&lt;/code> that &lt;code>impl T&lt;/code> would also have to fulfill &lt;code>R&lt;/code> for any lifetime.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="data-structures">Data Structures&lt;/h1>
&lt;h1 id="organizing-code">Organizing Code&lt;/h1>
&lt;p>将项目分割成较小的单元，并最大程度地减少依赖性。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>mod m {}&lt;/code>&lt;/td>
&lt;td>Define a &lt;strong>module&lt;/strong>, get definition from inside &lt;code>{}&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>mod m;&lt;/code>&lt;/td>
&lt;td>Define a module, get definition from &lt;code>m.rs&lt;/code> or &lt;code>m/mod.rs&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>a::b&lt;/code>&lt;/td>
&lt;td>Namespace &lt;strong>path&lt;/strong> to element &lt;code>b&lt;/code> within &lt;code>a&lt;/code> (&lt;code>mod&lt;/code>, &lt;code>enum&lt;/code>, &amp;hellip;).&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>::b&lt;/code>&lt;/td>
&lt;td>Search &lt;code>b&lt;/code> relative to crate root.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>crate::b&lt;/code>&lt;/td>
&lt;td>Search &lt;code>b&lt;/code> relative to crate root.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>self::b&lt;/code>&lt;/td>
&lt;td>Search &lt;code>b&lt;/code> relative to current module.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>super::b&lt;/code>&lt;/td>
&lt;td>Search &lt;code>b&lt;/code> relative to parent module.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>use a::b;&lt;/code>&lt;/td>
&lt;td>&lt;strong>Use&lt;/strong> &lt;code>b&lt;/code> directly in this scope without requiring &lt;code>a&lt;/code> anymore.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>use a::{b, c};&lt;/code>&lt;/td>
&lt;td>Same, but bring &lt;code>b&lt;/code> and &lt;code>c&lt;/code> into scope.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>use a::b as x;&lt;/code>&lt;/td>
&lt;td>Bring &lt;code>b&lt;/code> into scope but name &lt;code>x&lt;/code>, like &lt;code>use std::error::Error as E&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>use a::b as _;&lt;/code>&lt;/td>
&lt;td>Bring &lt;code>b&lt;/code> anonymously into scope, useful for traits with conflicting names.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>use a::*;&lt;/code>&lt;/td>
&lt;td>Bring everything from &lt;code>a&lt;/code> into scope.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pub use a::b;&lt;/code>&lt;/td>
&lt;td>Bring &lt;code>a::b&lt;/code> into scope and reexport from here.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pub T&lt;/code>&lt;/td>
&lt;td>&amp;ldquo;Public if parent path is public&amp;rdquo; &lt;strong>visibility&lt;/strong> for &lt;code>T&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pub(crate) T&lt;/code>&lt;/td>
&lt;td>Visible at most in current crate.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pub(self) T&lt;/code>&lt;/td>
&lt;td>Visible at most in current module.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pub(super) T&lt;/code>&lt;/td>
&lt;td>Visible at most in parent.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>pub(in a::b) T&lt;/code>&lt;/td>
&lt;td>Visible at most in &lt;code>a::b&lt;/code>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extern crate a;&lt;/code>&lt;/td>
&lt;td>Declare dependency on external &lt;strong>crate&lt;/strong> ; just &lt;code>use a::b&lt;/code> in .&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extern &amp;quot;C&amp;quot; {}&lt;/code>&lt;/td>
&lt;td>&lt;em>Declare&lt;/em> external dependencies and ABI (e.g., &lt;code>&amp;quot;C&amp;quot;&lt;/code>) from &lt;strong>FFI&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>extern &amp;quot;C&amp;quot; fn f() {}&lt;/code>&lt;/td>
&lt;td>&lt;em>Define&lt;/em> function to be exported with ABI (e.g., &lt;code>&amp;quot;C&amp;quot;&lt;/code>) to FFI.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="内存结构">内存结构&lt;/h1>
&lt;h2 id="basic-types">Basic Types&lt;/h2>
&lt;h2 id="字符串">字符串&lt;/h2>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Example&lt;/th>
&lt;th>Explanation&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>&amp;quot;...&amp;quot;&lt;/code>&lt;/td>
&lt;td>&lt;strong>String literal&lt;/strong>, UTF-8, will interpret &lt;code>\n&lt;/code> as &lt;em>line break&lt;/em> &lt;code>0xA&lt;/code>, &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r&amp;quot;...&amp;quot;&lt;/code>&lt;/td>
&lt;td>&lt;strong>Raw string literal&lt;/strong>. UTF-8, won&amp;rsquo;t interpret &lt;code>\n&lt;/code>, &amp;hellip;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>r#&amp;quot;...&amp;quot;#&lt;/code>&lt;/td>
&lt;td>Raw string literal, UTF-8, but can also contain &lt;code>&amp;quot;&lt;/code>. Number of &lt;code>#&lt;/code> can vary.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b&amp;quot;...&amp;quot;&lt;/code>&lt;/td>
&lt;td>&lt;strong>Byte string literal&lt;/strong>; constructs ASCII &lt;code>[u8]&lt;/code>, not a string.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>br&amp;quot;...&amp;quot;&lt;/code>, &lt;code>br#&amp;quot;...&amp;quot;#&lt;/code>&lt;/td>
&lt;td>Raw byte string literal, ASCII &lt;code>[u8]&lt;/code>, combination of the above.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>'🦀'&lt;/code>&lt;/td>
&lt;td>&lt;strong>Character literal&lt;/strong>, fixed 4 byte unicode &amp;lsquo;&lt;strong>char&lt;/strong>&amp;rsquo;.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>b'x'&lt;/code>&lt;/td>
&lt;td>ASCII &lt;strong>byte literal&lt;/strong>.&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h1 id="tbd">TBD&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mojotv.cn/rust/rust-cheatsheet-01-data-structures" target="_blank" rel="noopener">https://mojotv.cn/rust/rust-cheatsheet-01-data-structures&lt;/a> Rust-CheatSheet&lt;/li>
&lt;li>&lt;a href="https://colobu.com/2020/03/05/A-half-hour-to-learn-Rust/?hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io" target="_blank" rel="noopener">https://colobu.com/2020/03/05/A-half-hour-to-learn-Rust/?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>