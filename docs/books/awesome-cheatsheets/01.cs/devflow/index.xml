<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevFlow | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/awesome-cheatsheets/01.cs/devflow/</link><atom:link href="https://ng-tech.icu/books/awesome-cheatsheets/01.cs/devflow/index.xml" rel="self" type="application/rss+xml"/><description>DevFlow</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>DevFlow</title><link>https://ng-tech.icu/books/awesome-cheatsheets/01.cs/devflow/</link></image><item><title>Git-Cheatsheet</title><link>https://ng-tech.icu/books/awesome-cheatsheets/01.cs/devflow/git-cheatsheet/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/awesome-cheatsheets/01.cs/devflow/git-cheatsheet/</guid><description>&lt;h1 id="git-cheatsheet--git-命令速览与备忘清单">Git CheatSheet | Git 命令速览与备忘清单&lt;/h1>
&lt;p>对于新手而言，在日常工作中还是尽量使用 &lt;a href="">SourceTree&lt;/a>、&lt;a href="">GitHub Desktop&lt;/a>等 界面工具，避免意外操作。&lt;/p>
&lt;h1 id="常用脚本">常用脚本&lt;/h1>
&lt;ul>
&lt;li>快速提交&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># !/bin/bash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit -m &lt;span class="s2">&amp;#34;feat: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">1&lt;/span>&lt;span class="p">:=update articles or snippets&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> --no-verify
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git pull
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git push
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="configuration--配置">Configuration | 配置&lt;/h1>
&lt;h2 id="management--配置管理">Management | 配置管理&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 列举所有的别名与配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --list
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Git 别名配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global alias.&amp;lt;handle&amp;gt; &amp;lt;command&amp;gt; git config --global alias.st status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置 Git 为大小写敏感&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global core.ignorecase &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以查看常用的辅助查询命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 在 Git 命令行里查看 everyday git&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git &lt;span class="nb">help&lt;/span> everyday
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 显示 git 常用的帮助命令&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git &lt;span class="nb">help&lt;/span> -g
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取 Git Bash 的自动补全&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">curl http://git.io/vfhol &amp;gt; ~/.git-completion.bash &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;[ -f ~/.git-completion.bash ] &amp;amp;&amp;amp; . ~/.git-completion.bash&amp;#39;&lt;/span> &amp;gt;&amp;gt; ~/.bashrc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置自动更正&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global help.autocorrect &lt;span class="m">1&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="user--用户配置">User | 用户配置&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置 HTTP 代理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global http.proxy http://127.0.0.1:1080
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.proxy https://127.0.0.1:1080
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 配置 Socks 代理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global http.proxy &lt;span class="s1">&amp;#39;socks5://127.0.0.1:1080&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global https.proxy &lt;span class="s1">&amp;#39;socks5://127.0.0.1:1080&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 取消代理&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global --unset http.proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global --unset https.proxy
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git config --global http.sslVerify &lt;span class="nb">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.cp&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;cherry-pick&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.st&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;status -sb&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.cl&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;clone&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.ci&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;commit&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.co&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;checkout&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.br&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;branch&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.dc&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;diff --cached&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.lg&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;log --graph --pretty=format:&amp;#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Cblue&amp;lt;%an&amp;gt;%Creset&amp;#39; --abbrev-commit --date=relative --all&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.last&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;log -1 --stat&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">gitalias&lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;alias.unstage&amp;#39;&lt;/span>&lt;span class="o">]=&lt;/span>&lt;span class="s1">&amp;#39;reset HEAD --&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="repository--仓库配置与管理">Repository | 仓库配置与管理&lt;/h1>
&lt;h2 id="manipulation--操作">Manipulation | 操作&lt;/h2>
&lt;p>初始化某个仓库：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 初始化一个版本仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git init
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#Clone远程版本库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone git@xbc.me:wordpress.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone https://username@github.com/username/repository.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 添加远程版本库origin，语法为 git remote add [shortname] [url]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote add origin git@xbc.me:wordpress.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看远程仓库&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote -v
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看远端仓库相关信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 获取所有远端引用配置&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 或者&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote show
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改某个远端的地址&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git remote set-url origin &amp;lt;URL&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看仓库的统计信息：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看当前仓库中的所有未打包的 objects 和磁盘占用&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git count-objects --human-readable
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 从 object 数据库中删除所有不可达的 object&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git gc --prune&lt;span class="o">=&lt;/span>now --aggressive
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="gitignore">.gitignore&lt;/h2>
&lt;p>注意忽略只对未跟踪文件有效，对于已加入版本库的文件无效，Git 内置三级忽略文件机制：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>版本库共享式忽略文件，版本库中目录下的 .gitignore 文件作用于整个目录及子目录，会随着该版本库同其他人共享。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地的针对具体版本库的独享式忽略文件，即在版本库 .git 目录下的文件 info/exclude 中设置文件忽略&lt;/p>
&lt;/li>
&lt;li>
&lt;p>本地的全局的独享式忽略文件，通过 Git 的配置变量 core.excludesfile 指定的一个忽略文件(指定文件名)，其设置的忽略对所有本地版本库均有效。设置方法如下(文件名可以任意设置)：&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">git config --global core.excludesfile ~/.gitignore
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Git 的忽略文件遵循以下语法规则：&lt;/p>
&lt;ul>
&lt;li>忽略文件中的空行或以井号(#)开始的行将会被忽略。&lt;/li>
&lt;li>可以使用 Linux 通配符。例如：星号(*)代表任意多个字符，问号(？)代表一个字符，方括号([abc])代表可选字符范围，大括号({string1,string2,&amp;hellip;})代表可选的字符串等。&lt;/li>
&lt;li>如果名称的最前面有一个感叹号(!)，表示例外规则，将不被忽略。&lt;/li>
&lt;li>如果名称的最前面是一个路径分隔符(/)，表示要忽略的文件在此目录下，而子目录中的文件不忽略。&lt;/li>
&lt;li>如果名称的最后面是一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件(默认文件或目录都忽略)。&lt;/li>
&lt;/ul>
&lt;h1 id="commit--提交">Commit | 提交&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 管道命令，可用于脚本&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git diff-tree --no-commit-id --name-only -r bd61ad98
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看某次提交中修改的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git show --pretty&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span> --name-only bd61ad98
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tracking--追踪">Tracking | 追踪&lt;/h2>
&lt;p>查看当前追踪的文件信息&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 展示所有被追踪的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-files -t
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 展示所有未被追踪的分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-files --others
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 展示所有被忽略的文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git ls-files --others -i --exclude-standard
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git check-ignore *
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git status --ignored
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 从工作目录中删除文件，同时会暂存信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git rm &lt;span class="o">[&lt;/span>file&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 从版本控制中移除该文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git rm --cached &lt;span class="o">[&lt;/span>file&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 本地重命名并且提交&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git mv &lt;span class="o">[&lt;/span>file-original&lt;span class="o">]&lt;/span> &lt;span class="o">[&lt;/span>file-renamed&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="stash--贮存">Stash | 贮存&lt;/h2>
&lt;p>git stash &amp;ndash; The command saves your local modifications away and reverts the working directory to match the HEAD commit. It allows you to store your uncommited modifications into a buffer area called stash, and deletes it from the branch you are working on. You may later retreive them by applying the stash.&lt;/p>
&lt;h2 id="undo--撤销">Undo | 撤销&lt;/h2>
&lt;h1 id="branch--分支">Branch | 分支&lt;/h1>
&lt;p>Git 中的分支实际上只是 Commit 指针。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 命令行中查看版本树&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git log --pretty&lt;span class="o">=&lt;/span>oneline --graph --decorate --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 内置的可视化界面查看版本树&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ gitk --all
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 根据提交人过滤 Commit 信息&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git log --author&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span> --pretty&lt;span class="o">=&lt;/span>format:&lt;span class="s2">&amp;#34;%h - %an, %ar : %s&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="manipulation--操作-1">Manipulation | 操作&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建某个分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git branch BRANCH_NAME
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 创建并且切换到某个分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git checkout -b BRANCH_NAME
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="head">Head&lt;/h3>
&lt;p>分支是&lt;/p>
&lt;h2 id="merge--分支合并">Merge | 分支合并&lt;/h2>
&lt;p>&amp;ndash;force 会使用本地分支的提交覆盖远端推送分支的提交。也就是说，如果其他人在相同的分支推送了新的提交，你的这一举动将“删除”他的那些提交！就算在强制推送之前先 fetch 并且 merge 或 rebase 了也是不安全的，因为这些操作到推送之间依然存在时间差，别人的提交可能发生在这个时间差之内。使用此参数推送，如果远端有其他人推送了新的提交，那么推送将被拒绝，这种拒绝和没有加 &amp;ndash;force 参数时的拒绝是一样的。&lt;/p>
&lt;h3 id="cherry-pick">cherry-pick&lt;/h3>
&lt;p>git cherry-pick 可以选择某一个分支中的一个或几个 commit(s) 来进行操作，譬如我们存在多个稳定开发版本，在不能完全合并分支的情况下又想把某些功能合入到某个分支，那就可以利用 cherry-pick 对已经存在的 commit 进行再次提交。注意，当执行完 cherry-pick 以后，将会生成一个新的提交；这个新的提交的哈希值和原来的不同，但标识名一样。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 选择某个其他分支的 commit 合并到当前分支&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git cherry-pick &amp;lt;commit id&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 如果出现冲突，则类似于 Rebase 进行解决&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 手动查看冲突文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git status
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置文件已经解决冲突&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git add ...
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 设置 cherry-pick 继续执行&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git cherry-pick --continue
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git cherry-pick --quit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git cherry-pick --abort
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="rebase">Rebase&lt;/h2>
&lt;p>顾名思义，Rebase(变基)有移花接木之效果，能将特性分支移接到主分支之上，常用于优化提交历史，或者修改本地的提交信息。&lt;/p>
&lt;p>首先查看本地的 Commit 历史：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ git log --pretty&lt;span class="o">=&lt;/span>oneline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">a931ac7c808e2471b22b5bd20f0cad046b1c5d0d c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">b76d157d507e819d7511132bdb5a80dd421d854f b
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df239176e1a2ffac927d8b496ea00d5488481db5 a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 Git Rebase:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 使用 Git Rebase，对最后两个提交进行操作&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git rebase --interactive HEAD~2
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="n">pick&lt;/span> &lt;span class="n">b76d157&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">squash&lt;/span> &lt;span class="n">a931ac7&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">//&lt;/span>&lt;span class="n">change&lt;/span> &lt;span class="n">pick&lt;/span> &lt;span class="n">to&lt;/span> &lt;span class="n">squash&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Rebase df23917..a931ac7 onto df23917&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Commands:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># p, pick = use commit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># r, reword = use commit, but edit the commit message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># e, edit = use commit, but stop for amending&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># s, squash = use commit, but meld into previous commit&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># f, fixup = like &amp;#34;squash&amp;#34;, but discard this commit&amp;#39;s log message&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># If you remove a line here THAT COMMIT WILL BE LOST.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># However, if you remove everything, the rebase will be aborted.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">#&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and save-quitting your editor, you’ll get another editor whose contents are&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This is a combination of 2 commits.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># The first commit&amp;#39;s message is:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># This is the 2nd commit message:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>done&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ git log --pretty&lt;span class="o">=&lt;/span>oneline
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">18fd73d3ce748f2a58d1b566c03dd9dafe0b6b4f b and c
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">df239176e1a2ffac927d8b496ea00d5488481db5 a
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="workflow--协作">Workflow | 协作&lt;/h1>
&lt;h2 id="commit-message--提交信息规范">Commit Message | 提交信息规范&lt;/h2>
&lt;p>目前规范使用较多的是 &lt;a href="https://github.com/angular/angular.js/blob/master/DEVELOPERS.md%23-git-commit-guidelines" target="_blank" rel="noopener">Angular 团队的规范&lt;/a>, 继而衍生了 &lt;a href="https://conventionalcommits.org/" target="_blank" rel="noopener">Conventional Commits specification&lt;/a>. 很多工具也是基于此规范, 它的 message 格式如下:&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;BLANK LINE&amp;gt;
&amp;lt;footer&amp;gt;
&lt;/code>&lt;/pre>&lt;p>我们通过 git commit 命令带出的 vim 界面填写的最终结果应该类似如上这个结构, 大致分为三个部分(使用空行分割):&lt;/p>
&lt;ul>
&lt;li>标题行: 必填, 描述主要修改类型和内容&lt;/li>
&lt;li>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等&lt;/li>
&lt;li>页脚注释: 放 Breaking Changes 或 Closed Issues&lt;/li>
&lt;/ul>
&lt;p>分别由如下部分构成:&lt;/p>
&lt;ul>
&lt;li>type: commit 的类型
&lt;ul>
&lt;li>feat: 新特性&lt;/li>
&lt;li>fix: 修改问题&lt;/li>
&lt;li>refactor: 代码重构&lt;/li>
&lt;li>docs: 文档修改&lt;/li>
&lt;li>style: 代码格式修改, 注意不是 css 修改&lt;/li>
&lt;li>test: 测试用例修改&lt;/li>
&lt;li>chore: 其他修改, 比如构建流程, 依赖管理.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>scope: commit 影响的范围, 比如: route, component, utils, build&amp;hellip;&lt;/li>
&lt;li>subject: commit 的概述, 建议符合 &lt;a href="https%ef%bc%9a//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting&lt;/a>&lt;/li>
&lt;li>body: commit 具体修改内容, 可以分为多行, 建议符合 &lt;a href="https%ef%bc%9a//stackoverflow.com/questions/2290016/git-commit-messages-50-72-formatting" target="_blank" rel="noopener">50/72 formatting&lt;/a>&lt;/li>
&lt;li>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.&lt;/li>
&lt;/ul>
&lt;p>这样一个符合规范的 commit message, 就好像是一份邮件。如果你只是个人的项目, 或者想尝试一下这样的规范格式, 那么你可以为 git 设置 commit template, 每次 git commit 的时候在 vim 中带出, 时刻提醒自己:&lt;/p>
&lt;p>修改 ~/.gitconfig, 添加:&lt;/p>
&lt;pre tabindex="0">&lt;code>[commit]
template = ~/.gitmessage
&lt;/code>&lt;/pre>&lt;p>新建 ~/.gitmessage 内容可以如下:&lt;/p>
&lt;pre tabindex="0">&lt;code># head: &amp;lt;type&amp;gt;(&amp;lt;scope&amp;gt;): &amp;lt;subject&amp;gt;
# - type: feat, fix, docs, style, refactor, test, chore
# - scope: can be empty (eg. if the change is a global or difficult to assign to a single component)
# - subject: start with verb (such as &amp;#39;change&amp;#39;), 50-character line
#
# body: 72-character wrapped. This should answer:
# * Why was this change necessary?
# * How does it address the problem?
# * Are there any side effects?
#
# footer:
# - Include a link to the ticket, if any.
# - BREAKING CHANGE
#
&lt;/code>&lt;/pre>&lt;h2 id="merge-request">Merge Request&lt;/h2>
&lt;p>推荐团队中采用 Merge Request 的方式进行协作开发，即基于主分支 clone 之后再合并回去：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">checkout&lt;/span> &lt;span class="nx">dev&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">pull&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">rebase&lt;/span> &lt;span class="o">--&lt;/span>&lt;span class="nx">prune&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">checkout&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">b&lt;/span> &lt;span class="nx">feat&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">x&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">or&lt;/span> &lt;span class="nx">fix&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">y&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span> &lt;span class="nx">coding&lt;/span> &lt;span class="nx">time&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span> &lt;span class="nx">may&lt;/span> &lt;span class="nx">commit&lt;/span> &lt;span class="nx">several&lt;/span> &lt;span class="nx">times&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">commit&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="nx">m&lt;/span> &lt;span class="s1">&amp;#39;&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span> &lt;span class="nx">make&lt;/span> &lt;span class="nx">sure&lt;/span> &lt;span class="nx">rebase&lt;/span> &lt;span class="nx">from&lt;/span> &lt;span class="nx">origin&lt;/span> &lt;span class="nx">dev&lt;/span> &lt;span class="nx">branch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">fetch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">rebase&lt;/span> &lt;span class="nx">origin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">dev&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">push&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="nx">maybe&lt;/span> &lt;span class="sb">`-f`&lt;/span> &lt;span class="nx">flag&lt;/span> &lt;span class="nx">is&lt;/span> &lt;span class="nx">required&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="nx">you&lt;/span>&lt;span class="err">&amp;#39;&lt;/span>&lt;span class="nx">ve&lt;/span> &lt;span class="nx">pushed&lt;/span> &lt;span class="nx">before&lt;/span> &lt;span class="nx">rebase&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span> &lt;span class="nx">create&lt;/span> &lt;span class="nx">Merge&lt;/span> &lt;span class="nx">Request&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">dev&lt;/span> &lt;span class="nx">branch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span> &lt;span class="nx">code&lt;/span> &lt;span class="nx">changes&lt;/span> &lt;span class="nx">according&lt;/span> &lt;span class="nx">MR&lt;/span> &lt;span class="nx">review&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">#&lt;/span> &lt;span class="nx">confirm&lt;/span> &lt;span class="nx">to&lt;/span> &lt;span class="nx">rebase&lt;/span> &lt;span class="nx">again&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="nx">others&lt;/span> &lt;span class="nx">merged&lt;/span> &lt;span class="nx">before&lt;/span> &lt;span class="nx">your&lt;/span> &lt;span class="nx">MR&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">fetch&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">rebase&lt;/span> &lt;span class="nx">origin&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="nx">dev&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">git&lt;/span> &lt;span class="nx">push&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="statistics--统计数据">Statistics | 统计数据&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 查看 Git 上的个人代码量，username 需要修改为真实用户名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git log --author&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;username&amp;#34;&lt;/span> --pretty&lt;span class="o">=&lt;/span>tformat: --numstat &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &amp;#34;added lines: %s, removed lines: %s, total lines: %s\n&amp;#34;, add, subs, loc }&amp;#39;&lt;/span> -
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># added lines: 120745, removed lines: 71738, total lines: 49007&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 统计每个人增删行数&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git log --format&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;%aN&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sort -u &lt;span class="p">|&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="nb">read&lt;/span> name&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span> &lt;span class="nb">echo&lt;/span> -en &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">\t&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> git log --author&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> --pretty&lt;span class="o">=&lt;/span>tformat: --numstat &lt;span class="p">|&lt;/span> awk &lt;span class="s1">&amp;#39;{ add += $1; subs += $2; loc += $1 - $2 } END { printf &amp;#34;added lines: %s, removed lines: %s, total lines: %s\n&amp;#34;, add, subs, loc }&amp;#39;&lt;/span> -&lt;span class="p">;&lt;/span> &lt;span class="k">done&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 统计提交数前五名&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ git log --pretty&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;%aN&amp;#39;&lt;/span> &lt;span class="p">|&lt;/span> sort &lt;span class="p">|&lt;/span> uniq -c &lt;span class="p">|&lt;/span> sort -k1 -n -r &lt;span class="p">|&lt;/span> head -n &lt;span class="m">5&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://learnxinyminutes.com/docs/zh-cn/git-cn/" target="_blank" rel="noopener">https://learnxinyminutes.com/docs/zh-cn/git-cn/&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gist.github.com/eashish93/3eca6a90fef1ea6e586b7ec211ff72a5" target="_blank" rel="noopener">https://gist.github.com/eashish93/3eca6a90fef1ea6e586b7ec211ff72a5&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>