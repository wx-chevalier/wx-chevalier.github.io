<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>快速开始 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</link><atom:link href="https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/index.xml" rel="self" type="application/rss+xml"/><description>快速开始</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>快速开始</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</link></image><item><title>A-Study-Plan-To-Cure-JavaScript-Fatigue</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/a-study-plan-to-cure-javascript-fatigue/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/a-study-plan-to-cure-javascript-fatigue/</guid><description>&lt;blockquote>
&lt;p>本文翻译自&lt;a href="https://medium.com/@sachagreif/a-study-plan-to-cure-javascript-fatigue-8ad3a54f2eb1#.gfap70pkh" target="_blank" rel="noopener">A-Study-Plan-To-Cure-JavaScript-Fatigue&lt;/a>。笔者看到里面的几张配图着实漂亮，顺手翻译了一波。本文从属于笔者的&lt;a href="https://github.com/wx-chevalier/Web-Develop-Introduction-And-Best-Practices/tree/master/Frontend" target="_blank" rel="noopener">Web Frontend Introduction And Best Practices: 前端入门与最佳实践&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;p>最近我也读了 Jose Aguinaga 的博文&lt;a href="https://segmentfault.com/a/1190000007083024" target="_blank" rel="noopener">2016 年里做前端是怎样一种体验&lt;/a>。这篇博客引发了广泛的关注与讨论，无论是在 Hacker News 还是 Reddit 还是 Medium 上，都有很多人参与到了它的讨论中。我也是很早之前就感觉到了目前 JavaScript 生态圈中的群雄逐鹿，并且我还特地对目前&lt;a href="http://stateofjs.com/" target="_blank" rel="noopener">JavaScript 库流行现状&lt;/a>进行了调查，希望能够在异彩纷呈的各式各样的库中寻找到真正的为大众所接受的。不过今天我希望能够更进一步，不仅仅再抱怨现状，而是从我个人的角度来给出一个逐步深入学习 JavaScript 生态圈的方案。(如果你尚对 HTML/CSS/JavaScript 并不了解，那么可以阅读&lt;a href="https://github.com/wx-chevalier/Web-Develop-Introduction-And-Best-Practices/blob/master/Frontend/Introduction/Frontend-From-Zero-To-Hero.md" target="_blank" rel="noopener">前端攻略：从路人甲到英雄无敌&lt;/a>)。而在文本中我们会涉及以下几个方面&lt;/p>
&lt;ul>
&lt;li>一个现代的 JavaScript Web 应用会包含哪些部分&lt;/li>
&lt;li>为什么不推荐使用 jQuery？&lt;/li>
&lt;li>为什么 React 是个不错的选择&lt;/li>
&lt;li>为什么并不需要你首先学透 JavaScript？&lt;/li>
&lt;li>如何学习 ES6 语法&lt;/li>
&lt;li>缘何与如何学习 Redux?&lt;/li>
&lt;li>GraphQL 到底解决了什么问题？&lt;/li>
&lt;li>下一步又会走向何方&lt;/li>
&lt;/ul>
&lt;h1 id="background">Background&lt;/h1>
&lt;h2 id="javascript-vs-javascript">JavaScript vs JavaScript&lt;/h2>
&lt;p>在正式开始之前，我们先要搞清楚我所要说的和你目前理解的是不是同一个东西。如果你在 Google 中搜索 ‘Learn JavaScript’ 或者 ‘JavaScript study plan’，你能得到一坨一坨的资料与教程指导你如何学习。不过实际上在我们的真实项目中，我们只会用到一些相对简单的语法。换言之，可能你在学习 Web 应用编写中所需要的 80% 的知识点都包含在了任何一本 JavaScript 书籍的前几章。另一个角度来说，真正麻烦的点在于如何掌握整个 JavaScript 生态圈，这里包含了数不尽的框架与库。不过我相信本文可以给你一点启示。&lt;/p>
&lt;h2 id="building-blocks-of-javascript-apps">Building Blocks Of JavaScript Apps&lt;/h2>
&lt;blockquote>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000006728971" target="_blank" rel="noopener">State Of JavaScript：前端框架现状调查&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>为了便于理解现代 JavaScript 为啥看起来如何复杂，我们首先要明白其工作原理。我们首先来看下 2008 年左右流行的所谓传统 Web 应用的架构 : 1. 服务端从数据库中获取数据。2. 服务端读取这些数据然后渲染到 HTML 中。3.HTML 文件被发送到浏览器，浏览器将 HTML 转化为 DOM 树并且展示出来。&lt;/p>
&lt;p>现在很多的应用会在客户端使用 JavaScript 来保证应用的可交互性，不过本质上浏览器还是从收到 HTML 文件开始。下面我们再比较下 2016 年流行的所谓现代 Web 应用，典型的就是所谓的单页应用 : 注意到区别了吗？与传统的 Web 应用相比，现在的服务端更多的承担起是提供数据的功能，而渲染 HTML 文件这一步交由客户端进行处理。这一个根本性的变化也会导致很多或好或坏的结果，好的一方面呢&lt;/p>
&lt;ul>
&lt;li>对于某一块内容，仅仅发送数据会比发送整个 HTML 文件快很多&lt;/li>
&lt;li>以单页应用为例，客户端可以刷新局部数据而不需要刷新整个浏览器窗口&lt;/li>
&lt;/ul>
&lt;p>坏的方面&lt;/p>
&lt;ul>
&lt;li>由于现在数据的加载与渲染放在了客户端，初始加载与渲染会耗费更长的时间&lt;/li>
&lt;li>现在需要在客户端提供一个存储与管理数据的地方，也就是我们目前所熟悉的状态管理工具&lt;/li>
&lt;/ul>
&lt;p>恶心的地方&lt;/p>
&lt;ul>
&lt;li>随着客户端应用逻辑与交互的日渐复杂，你需要掌握像服务端技术栈一样复杂的前端技术栈&lt;/li>
&lt;/ul>
&lt;h2 id="the-client-server-spectrum">The Client-Server Spectrum&lt;/h2>
&lt;p>实际上很多才接触现代前端开发技术栈的同学，特别是才从后端转前端的同学都会有个疑问，既然这么麻烦为何还要进行转变？举个例子，如果用户希望得到 2+2 的结果，肯定不需要我们将这个计算发送到服务端然后等待结果，浏览器完全能够支持这种简单的计算。换言之，如果你是打算构建一个纯粹的静态内容站，譬如博客这样的，那么在服务端直接生成最终的 HTML 文件是个不错的选择。不过实际上很多 Web 应用中我们并不能很好地界定这个分割点，并且整个光谱并不是连续的，你并不能先构建一个纯粹的服务端应用然后慢慢地向客户端迁移。当到达某个分割点时，你不得不停止这种迁移过程而去重构大量的代码，或者你就会面对一个庞杂无序难以维护的垃圾代码库。&lt;/p>
&lt;p>这一点与不建议使用 jQuery 不谋而合，你可以将 jQuery 看做胶带一类的存在。对于房子的修修补补很是不错，但是如果你想不断地增加内容与功能，你就会发现你的房子歪歪扭扭，到处都是狗皮膏药，越看越丑。而大部分的现代 JavaScript 框架则是更像 3D 打印技术，可能在开始之前需要大量的准备时间，但是它能还你一个更整洁稳定的房屋。&lt;/p>
&lt;h1 id="week-0javascript-basics">Week 0:JavaScript Basics&lt;/h1>
&lt;p>除非你是一个纯粹的服务端应用程序开发者，你肯定知道些 JavaScript 基础的内容。如果你还不是很了解的话那么也不需要担心，这里推荐个不错的教程&lt;a href="https://www.codecademy.com/learn/javascript" target="_blank" rel="noopener">Codecademy’s JavaScript lessons&lt;/a>。&lt;/p>
&lt;h1 id="week-1start-with-react">Week 1:Start With React&lt;/h1>
&lt;p>在你了解了 JavaScript 基础语法知识之后，我推荐你下一步开始学习&lt;a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React&lt;/a>。React 是由 Facebook 开发并且开源的 UI 库，换言之，其专注于完成将数据渲染到 HTML 这一步骤，也就是所谓的 View 层。不过需要注意的是，我在这里并不是安利 React 为最优秀的库，这个是因项目而定的，不过我觉得 React 是个挺不错的合适初学者的库：&lt;/p>
&lt;ul>
&lt;li>React 不一定就是最受欢迎的库，不过其受欢迎程度相当高&lt;/li>
&lt;li>React 不一定是最轻量级的库，不过其谈不上是一个重量级的库&lt;/li>
&lt;li>React 不一定是最简单易学的库，不过其并不难学&lt;/li>
&lt;li>React 不一定是最优雅的库，不过其看上去还是很舒心的&lt;/li>
&lt;/ul>
&lt;p>总而言之，React 并不一定适用于所有的场景，但是我觉得它是所谓最安全的，学了不吃亏。React 还会引导你去了解一些像组件、应用状态与无状态函数等等现代 Web 应用框架的概念。最后，React 的整个生态圈非常繁荣，你可以从 Github 上有关 React 的项目中找到很多可用的组件，或者在 Stack Overflow 上找到很多关于 React 的答疑解惑。我个人是比较推荐&lt;a href="https://reactforbeginners.com/friend/STATEOFJS" target="_blank" rel="noopener">Wes Bos 的 React for Beginners&lt;/a>这一课程。这课程包含了 React 从入门到最佳实践的全部知识。&lt;/p>
&lt;h1 id="week-2your-first-react-project">Week 2:Your First React Project&lt;/h1>
&lt;blockquote>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000006055973" target="_blank" rel="noopener">使用 Facebook 的 create-react-app 快速构建 React 开发环境&lt;/a>
&lt;blockquote>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000007166607" target="_blank" rel="noopener">在重构脚手架中掌握 React/Redux/Webpack2 基本套路&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>到了这里我假设你已经完成了 React 的基础课程，如果你跟我差不多的话，那么我估计你现在的状态可能是&lt;/p>
&lt;ul>
&lt;li>估摸着你已经忘了一大半学过的知识点&lt;/li>
&lt;li>你很想能够尽快付诸实践&lt;/li>
&lt;/ul>
&lt;p>众所周知，实践是学习某个框架的不二法诀，并且开始一个简单的个人项目也是学习新技术的不错的试验点。一个个人项目可以是简单的单页应用，也可能是像 Github 客户端这样复杂的 Web 应用。这里我推荐你可以尝试着去做一个简单的个人主页。不过还是要补充一句，如果你打算用 React 做一个简单的静态内容页就有点大材小用了，这里推荐一个不错的工具&lt;a href="https://github.com/gatsbyjs/gatsby" target="_blank" rel="noopener">Gatsby&lt;/a>，这是一个 React 静态网站生成器。&lt;/p>
&lt;p>这里我把 Gatsby 推荐为你可以在初步实践 React 阶段一个不错的参考项目，主要是因为&lt;/p>
&lt;ul>
&lt;li>其提供了配置好的 Webpack，可以省去你很多学习配置的烦恼&lt;/li>
&lt;li>能够基于你目录结构动态设置路由&lt;/li>
&lt;li>所有的 HTML 内容同样可以服务端渲染&lt;/li>
&lt;li>生成的静态内容页意味着你可以简单地就可以部署在 Github 主页上&lt;/li>
&lt;/ul>
&lt;h1 id="week-3mastering-es6">Week 3:Mastering ES6&lt;/h1>
&lt;p>随着我学习 React 的深入，我很快就感觉到了现在能够看得懂简单的代码示例，不过还有很多语法尚不能完全理解。举例来说，我还不熟悉&lt;a href="http://es6-features.org/#Constants" target="_blank" rel="noopener">ES6&lt;/a>中的一些常见特性&lt;/p>
&lt;ul>
&lt;li>Arrow functions&lt;/li>
&lt;li>Object destructing&lt;/li>
&lt;li>Classes&lt;/li>
&lt;li>Spread Operator&lt;/li>
&lt;/ul>
&lt;p>如果你跟我一样也不是很熟悉，那么建议可以花个几天时间来认真学习下 ES6 的特性。如果你喜欢上面推荐的 React 基础课程，那么你也可以看下&lt;a href="https://es6.io/friend/stateofjs" target="_blank" rel="noopener">ES6 for Everybody&lt;/a>系列教程。不过如果你想找点免费的资源，那么这里推荐&lt;a href="https://ponyfoo.com/books/practical-es6/chapters" target="_blank" rel="noopener">Nicolas Bevacqua’s book, Practical ES6.&lt;/a>。最后，我还是想提到下对于 ES6 的好的学习方法就是回顾参照各种各样的代码库，学习人家的用法与实践。&lt;/p>
&lt;h1 id="week-4taking-on-state-management">Week 4:Taking On State Management&lt;/h1>
&lt;blockquote>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000007103433" target="_blank" rel="noopener">思考 : 我需要怎样的前端状态管理工具 ?&lt;/a>
&lt;blockquote>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000006966262" target="_blank" rel="noopener">你不一定需要 Redux&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000006769471" target="_blank" rel="noopener">深入理解 Redux:10 个来自专家的 Redux 实践建议&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>到这里我们已经能够构建基于静态内容的简单的 React 的前端项目，不过真实的 Web 应用项目不可能全是静态内容，他们需要从服务端获取数据然后交与 React 进行动态渲染。最直观的做法就是将数据一层一层地传递给组件，不过这很容易引发整个系统的混乱。譬如当两个组件需要去展示同样的数据时候，它们应该如何交互呢？这也就是所谓状态管理工具的用武之处，不同于将你的数据存放到组件内，你可以创建一个独立的全局单例 Store 来为组件树存放状态 : 。&lt;/p>
&lt;h1 id="week-5-building-apis-with-graphql">Week 5: Building APIs With GraphQL&lt;/h1>
&lt;blockquote>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000005766732" target="_blank" rel="noopener">GraphQL 初探 : 从 REST 到 GraphQL，更完善的数据查询定义&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>现在我们已经讨论了很多客户端开发中所需要的知识栈，不过对于有追求的前端开发者而言这远远不够。不谈整个 Node 生态社区，我们还需要注意这个服务端的数据是如何传递到客户端的。这里要着重介绍下&lt;a href="http://graphql.org/" target="_blank" rel="noopener">GraphQL&lt;/a>，一个由 Facebook 出品的可以替代传统的 REST API 的标准。传统的 REST API 会通过暴露多个 REST 路由来允许用户访问些数据集，譬如&lt;code>/api/posts,/api/comments&lt;/code>。而 GraphQL 将多个后端的 REST 接口整合为单个端点，允许用户从单个端点获取所需要的数据。&lt;/p>
&lt;h1 id="beyond--next-steps">Beyond &amp;amp; Next Steps&lt;/h1>
&lt;p>章节所限，在我的调查里也提到&lt;a href="http://vuejs.org/" target="_blank" rel="noopener">Vue&lt;/a>与&lt;a href="http://elm-lang.org/" target="_blank" rel="noopener">Elm&lt;/a>都是很优秀的框架，推荐有兴趣的朋友可以了解下。另外，在学完了这些基础知识，你还可以了解以下几个方面&lt;/p>
&lt;ul>
&lt;li>JavaScript on the server (Node, &lt;a href="https://expressjs.com/" target="_blank" rel="noopener">Express&lt;/a>…)&lt;/li>
&lt;li>JavaScript testing (&lt;a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">Jest&lt;/a>, &lt;a href="https://github.com/airbnb/enzyme" target="_blank" rel="noopener">Enzyme&lt;/a>…)&lt;/li>
&lt;li>Build tools (&lt;a href="https://webpack.github.io/" target="_blank" rel="noopener">Webpack&lt;/a>…)&lt;/li>
&lt;li>Type systems (&lt;a href="https://www.typescriptlang.org/" target="_blank" rel="noopener">TypeScript&lt;/a>, &lt;a href="https://flowtype.org/" target="_blank" rel="noopener">Flow&lt;/a>…)&lt;/li>
&lt;li>Dealing with CSS in your JavaScript apps (&lt;a href="https://github.com/css-modules/css-modules" target="_blank" rel="noopener">CSS Modules&lt;/a>, &lt;a href="https://github.com/styled-components/styled-components" target="_blank" rel="noopener">Styled Components&lt;/a>…)&lt;/li>
&lt;li>JavaScript for mobile apps (&lt;a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native&lt;/a>…)&lt;/li>
&lt;li>JavaScript for desktop apps (&lt;a href="http://electron.atom.io/" target="_blank" rel="noopener">Electron&lt;/a>…)&lt;/li>
&lt;/ul></description></item><item><title>HTML 与 CSS 简史</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/html-%E4%B8%8E-css-%E7%AE%80%E5%8F%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/html-%E4%B8%8E-css-%E7%AE%80%E5%8F%B2/</guid><description>&lt;h1 id="html-与-css-简史">HTML 与 CSS 简史&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://mp.weixin.qq.com/s/JuctRBR9GsrNsIwxwsH-DQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/JuctRBR9GsrNsIwxwsH-DQ&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>从路人甲到英雄无敌的前端开发指南</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E4%BB%8E%E8%B7%AF%E4%BA%BA%E7%94%B2%E5%88%B0%E8%8B%B1%E9%9B%84%E6%97%A0%E6%95%8C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E4%BB%8E%E8%B7%AF%E4%BA%BA%E7%94%B2%E5%88%B0%E8%8B%B1%E9%9B%84%E6%97%A0%E6%95%8C%E7%9A%84%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97/</guid><description>&lt;blockquote>
&lt;p>本文翻译整理自 FreeCodeCamp 的 &lt;a href="https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-1-7d4f7f0bff02#.ailsv41bd" target="_blank" rel="noopener">From Zero to Frontend Hero&lt;/a> 系列，归档于&lt;a href="https://github.com/wx-chevalier/Web-Notes" target="_blank" rel="noopener">现代 Web 全栈开发与工程架构 https://github.com/wx-chevalier/Web-Notes&lt;/a> 系列。&lt;/p>
&lt;/blockquote>
&lt;h1 id="从路人甲到英雄无敌的前端开发指南">从路人甲到英雄无敌的前端开发指南&lt;/h1>
&lt;p>记得那年，我初学前端，遇见了很多的文章，在浩瀚的知识海洋里我手足无措，不知从何开始。己所不欲，勿施于人。这篇文章就会帮你去遨游前端学习的海洋，主要包含了在我之前的学习过程中整理的一些资源和一些感悟。我打算将整篇文章切分为两部分，第一部分重温 HTML 与 CSS 的基本知识，第二部分概括 JavaScript、前端框架与设计模式。&lt;/p>
&lt;h1 id="html-与-css-基础">HTML 与 CSS 基础&lt;/h1>
&lt;p>前端的领域里，任何东西都离不开&lt;a href="https://en.wikipedia.org/wiki/HTML" target="_blank" rel="noopener">HTML&lt;/a> 与 &lt;a href="https://en.wikipedia.org/wiki/Cascading_Style_Sheets" target="_blank" rel="noopener">CSS&lt;/a>。HTML 与 CSS 基本上控制了你看到的所有东西，HTML 用来定义内容而 CSS 负责样式与布局。&lt;/p>
&lt;p>首先从&lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Introduction" target="_blank" rel="noopener">HTML&lt;/a> 以及 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/What_is_CSS" target="_blank" rel="noopener">CSS&lt;/a> 开始，这里推荐的是 MDN 的官方指南。MDN 对于重要的 HTML 与 CSS 内容进行了详细条理的阐述，除此之外，每一章都是单独的一页，提供了在 CodePen 与 JSFiddle 展示的 Demo。看完了这些基础教程之后，可以来看看由 CodeAcademy 提供的 t&lt;a href="https://www.codecademy.com/learn/make-a-website" target="_blank" rel="noopener">Make a Website&lt;/a>系列课程。这个课程只要几个小时就能看完，如果你想要更多的锻炼，可以瞅瞅&lt;a href="http://flukeout.github.io/" target="_blank" rel="noopener">CSS Diner&lt;/a>，这是一个 CSS 挑战的小游戏。最后，可以看看怎么使用 &lt;a href="https://www.google.com/fonts" target="_blank" rel="noopener">Google Fonts&lt;/a>，参考下 CSSTricks 出的&lt;a href="https://css-tricks.com/snippets/css/basics-of-google-font-api/" target="_blank" rel="noopener">Basics of Google Font API&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>国内用不了 Google Fonts 的话可以参考下 FontAwesome，如果你要用中文字体的话建议参考 FontSpider，请自行 Github 搜索。&lt;/p>
&lt;/blockquote>
&lt;p>Typography&amp;ndash; 排版也是个构建界面时候很重要的部分，有时间的话推荐你看看 Donny Truong 写的&lt;a href="https://prowebtype.com/" target="_blank" rel="noopener">Professional Web Typography&lt;/a>这本书，它会教你基本上关于排版的所有东西。在学习这些的时候不要太担心自己会忘了，反正记不住。你应该着重于记录这些并且理解 HTML 和 CSS 是怎么工作的。&lt;/p>
&lt;h1 id="practicing-html-and-css-basics">Practicing HTML and CSS Basics&lt;/h1>
&lt;p>到这里你应该已经明白了 HTML 与 CSS 的基本使用，下面我们要学以致用了。这一部分就设计了两个小实验来让你自己动手构建网站与界面。我是把它们形容成实验，所以不要害怕失败。&lt;/p>
&lt;h2 id="experiment-1">Experiment 1&lt;/h2>
&lt;p>第一个实验里，我们用的是&lt;a href="http://codepen.io/" target="_blank" rel="noopener">CodePen&lt;/a>，一个在线的 HTML 与 CSS 实验台。同时也提供了实时预览功能，一石二鸟呦。好了，下面我们要看看我们做的界面的原型了，转到 &lt;a href="https://dribbble.com/" target="_blank" rel="noopener">Dribbble&lt;/a>吧, 这嘎达可全是设计创意啊。我是看上了这个系列：&lt;a href="https://dribbble.com/shots/2262761-Mobile-Blog-App-Interface/attachments/424147" target="_blank" rel="noopener">1&lt;/a>, &lt;a href="https://dribbble.com/shots/2492038-Task-List-App/attachments/489171" target="_blank" rel="noopener">2&lt;/a>, &lt;a href="https://dribbble.com/shots/2144170-Day-014-Location-Card/attachments/392323" target="_blank" rel="noopener">3&lt;/a>, &lt;a href="https://dribbble.com/shots/2639709-Confirm-Reservation/attachments/528798" target="_blank" rel="noopener">4&lt;/a>, 以及 &lt;a href="https://dribbble.com/shots/2314157-Daily-UI-Day-1/attachments/439137" target="_blank" rel="noopener">5&lt;/a>.。我选择了一个移动优先的设计是因为与桌面设计相比更简单一点，不过你也可以自己找一个。&lt;/p>
&lt;p>在你选定了设计之后，就可以在 CodePen 上面开始动手了。你也可以看看其他人设计的 Pen: &lt;a href="http://codepen.io/pens/" target="_blank" rel="noopener">pens on CodePen&lt;/a>. 另外，别忘了&lt;a href="http://stackoverflow.com/" target="_blank" rel="noopener">StackOverflow&lt;/a>，这可是你的小伙伴呦。如果你最后实现的东西跟设计相去甚远，也不要灰心，不断尝试总会提高的。## Experiment 2 经过实验一估计你已经有点自信了，在实验二里面我们将会先借鉴一些大公司的经典站点。有不少站点会用一些 CSS 框架或者混淆它们的 CSS 类名，这会让源代码的阅读比较麻烦，这嘎达我列举了几个源代码可读性比较好的：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.dropbox.com/business" target="_blank" rel="noopener">Dropbox for Business&lt;/a>: Try replicating their &lt;a href="https://en.wikipedia.org/wiki/Hero_image" target="_blank" rel="noopener">hero&lt;/a> section&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.airbnb.com/" target="_blank" rel="noopener">AirBnB&lt;/a>: Try replicating their footer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.paypal.com/home" target="_blank" rel="noopener">PayPal&lt;/a>: Try replicating their navigation bar&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.invisionapp.com/" target="_blank" rel="noopener">Invision&lt;/a>: Try replicating their signup section at the bottom of the page&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://stripe.com/us/pricing" target="_blank" rel="noopener">Stripe&lt;/a>: Try replicating their payments section&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>再次强调下，实验二的目的并不是让你去重构整个页面，而是知道怎么去分割组件以及人家是怎么做的。如果你没有设计的背景，可能你要好好发掘下你的潜能了。一个优秀的前端开发者要能够辨别好的设计然后完美地重现它们，可以参考下我的这篇文章：&lt;a href="https://medium.com/@JonathanZWhite/developing-your-eye-for-design-cce944bbeae4#.tsg9204dm" target="_blank" rel="noopener">develop your design eye&lt;/a>.&lt;/p>
&lt;p>你可以选择在线编程：&lt;a href="http://codepen.io/" target="_blank" rel="noopener">CodePen&lt;/a> 或者直接本地开发。如果你选择本地做，那你可以使用这个 &lt;a href="https://github.com/murtaugh/HTML5-Reset" target="_blank" rel="noopener">模板项目&lt;/a>。我推荐是使用&lt;a href="https://atom.io/" target="_blank" rel="noopener">Atom&lt;/a> 或者&lt;a href="https://www.sublimetext.com/" target="_blank" rel="noopener">Sublime&lt;/a>这样的编辑器。另外，对于 Firefox 或者 Chrome 自带的控制台与开发者工具也要好好瞅瞅。&lt;/p>
&lt;h1 id="html-and-css-best-practices">HTML and CSS Best Practices&lt;/h1>
&lt;p>好了，现在你已经能够用 HTML 与 CSS 做一些简单的事情了，下面就要看看所谓的最佳实践了。最佳实践实际上就是一系列的在日常开发中总结出来的约定俗成的规范的集合，来让你更快地开发与构建更高质量的代码。&lt;/p>
&lt;h2 id="semantic-markup-语义标记">&lt;strong>Semantic Markup&lt;/strong>: 语义标记&lt;/h2>
&lt;p>HTML 与 CSS 最佳实践中重要的一条就是怎么来写出有语义可读性的标记。好的语义即是你使用了合适的 HTML 标签与 CSS 的类名来传达出你想表达的结构含义。譬如 *h1 &lt;em>标签会告诉我们里面包裹的是一些很重要的标题信息，另一个例子就是&lt;/em>footer *标签，会直截了当地跟你说，这里面是包含一些页脚信息。建议你阅读 &lt;a href="http://www.hongkiat.com/blog/html-5-semantics/" target="_blank" rel="noopener">A Look Into Proper HTML5 Semantics&lt;/a> 以及 CSSTricks 的 &lt;a href="https://css-tricks.com/semantic-class-names/" target="_blank" rel="noopener">What Makes For a Semantic Class Name&lt;/a>。&lt;/p>
&lt;h2 id="css-naming-conventions">&lt;strong>CSS Naming Conventions&lt;/strong>&lt;/h2>
&lt;p>下面一个比较重要的事情就是怎么给你的 CSS 定一个合适的类名。好的命名习惯，譬如语义化的标记，可以更好地传达含义，让代码的可读性与可维护性大大增加。你可以瞅瞅&lt;a href="http://clubmate.fi/oocss-acss-bem-smacss-what-are-they-what-should-i-use/" target="_blank" rel="noopener">OOCSS, ACSS, BEM, SMACSS: what are they? What should I use?&lt;/a>这篇文章里提及的 CSS 的一些命名的习惯。总体来说，我的建议是跟着你的直觉来确定命名习惯，随着时间的发展你会觉得这样看上去很舒服。如果你要看看大公司，譬如 Medium 是怎么实践 BEM 这样的命名规范的，可以阅读 &lt;a href="https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06#.ef81j61eg" target="_blank" rel="noopener">Medium’s CSS is actually pretty f***ing good&lt;/a>这篇文章，在这里你会学到怎么在一个快速迭代地情况下也维护你的有效地 CSS 命名习惯。&lt;/p>
&lt;h2 id="css-reset">CSS Reset&lt;/h2>
&lt;p>不同的浏览器在譬如 margin 以及 line-height 这些小的样式点之间存在着一些不一致性，因此你要学会重置你的 CSS 环境。&lt;a href="http://meyerweb.com/eric/tools/css/reset/index.html" target="_blank" rel="noopener">MeyerWeb&lt;/a> 就是一个常见的重置手段，如果你想深入了解下，推荐你阅读 &lt;a href="http://code.tutsplus.com/tutorials/weekend-quick-tip-create-your-own-resetcss-file--net-206" target="_blank" rel="noopener">Create Your Own Simple Reset.css File&lt;/a>这篇文章。&lt;/p>
&lt;h2 id="cross-browser-support">&lt;strong>Cross Browser Support&lt;/strong>&lt;/h2>
&lt;p>跨浏览器支持意味着你的代码要去支持绝大部分的现代浏览器，一些常见的 CSS 属性，譬如 &lt;em>transition&lt;/em> 需要 &lt;a href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix" target="_blank" rel="noopener">vendor prefixes&lt;/a> 来运行在不同的浏览器中。你可以在 &lt;a href="http://webdesign.about.com/od/css/a/css-vendor-prefixes.htm" target="_blank" rel="noopener">CSS Vendor Prefixes&lt;/a>这篇文章里获取更多的知识。这就意味着你需要花费更多的时间来在不同的浏览器之间进行测试。&lt;/p>
&lt;h2 id="css-preprocessors-and-postprocessors">&lt;strong>CSS Preprocessors and Postprocessors&lt;/strong>&lt;/h2>
&lt;p>翻开 CSS 的历史，自 90 年代以来，CSS 走过了一段漫长而崎岖的道路。整个 UI 系统变得日益繁复，人们也会去选择使用一些预处理器或者后处理器来管理这种复杂性。CSS 的预处理器或者 CSS 语言的扩展会在无声无息之间提供类似于变量、Mixins 以及继承这些特性。最主要的两个 CSS 的预处理器就是&lt;a href="http://sass-lang.com/guide" target="_blank" rel="noopener">Sass&lt;/a> 与 &lt;a href="http://lesscss.org/" target="_blank" rel="noopener">Less&lt;/a>。2016 年中 Sass 被越发广泛地使用，著名的响应式框架 BootStrap 就是从 Less 迁移到了 Sass。另外，很多人谈到 SASS 的时候也会提到 Scss，你可以参考 &lt;a href="https://www.sitepoint.com/whats-difference-sass-scss/" target="_blank" rel="noopener">whats-difference-sass-scss&lt;/a>这篇文章。&lt;/p>
&lt;p>CSS 后处理器则对于手写的 CSS 文件或者经过预编译的 CSS 文件进行一些处理，以著名的&lt;a href="https://github.com/postcss/postcss" target="_blank" rel="noopener">PostCSS&lt;/a> 为例，它有一个插件可以帮你自动地添加一些渲染前缀。当你接触过 CSS 的预处理与后处理器之后，你会把它们提升到日常伴侣的。不过，过犹不及，像变量和 Mixins 这些特性不能滥用啊，还是应该在合适的地方使用(译者注：此言非常有理)。还是推荐下&lt;a href="https://medium.com/@fat/mediums-css-is-actually-pretty-fucking-good-b8e2a6c78b06#.ef81j61eg" target="_blank" rel="noopener">Medium’s CSS is actually pretty f***ing good&lt;/a>这篇文章。&lt;/p>
&lt;h2 id="grid-systems-and-responsiveness">&lt;strong>Grid Systems and Responsiveness&lt;/strong>&lt;/h2>
&lt;p>网格系统即是用来水平或者垂直地排布元素的 CSS 架构。&lt;/p>
&lt;p>著名的网格框架有&lt;a href="http://getbootstrap.com/" target="_blank" rel="noopener">Bootstrap&lt;/a>, &lt;a href="http://getskeleton.com/" target="_blank" rel="noopener">Skeleton&lt;/a>, 以及 &lt;a href="http://foundation.zurb.com/" target="_blank" rel="noopener">Foundation&lt;/a>，它们提供了用于在布局中进行行列管理的样式表。这些框架用起来很方便，不过我们也是要理解网格的工作原理，推荐看&lt;a href="http://www.sitepoint.com/understanding-css-grid-systems/" target="_blank" rel="noopener">Understanding CSS Grid Systems&lt;/a> 以及 &lt;a href="https://css-tricks.com/dont-overthink-it-grids/" target="_blank" rel="noopener">Don’t Overthink Grids&lt;/a>。网格系统另一个目标就是是你的网站具有响应式特性。响应式意味着你的网站可以根据屏幕的大小来动态调整你网站大小与布局。很多时候这个响应式特性都是基于&lt;a href="http://www.w3schools.com/css/css_rwd_mediaqueries.asp" target="_blank" rel="noopener">CSS media queries&lt;/a>, 即根据不同的屏幕大小选用不同的 CSS 样式规则。&lt;/p>
&lt;p>你可以看一下 &lt;a href="https://varvy.com/mobile/media-queries.html" target="_blank" rel="noopener">Intro to Media Queries&lt;/a>来了解更多。另外，因为我们正在进行一场所谓&lt;a href="http://zurb.com/word/mobile-first" target="_blank" rel="noopener">mobile-first&lt;/a>变革，推荐你看下&lt;a href="http://www.sitepoint.com/introduction-mobile-first-media-queries/" target="_blank" rel="noopener">An Introduction to Mobile-First Media Queries&lt;/a>。&lt;/p>
&lt;h1 id="practicing-html-and-css-best-practices">Practicing HTML and CSS Best Practices&lt;/h1>
&lt;p>恭喜道友，筑基成功，你已经能够了解一些关于 HTML 与 CSS 的最佳实践了，下面又到了学以致用的时间。这里的两个实验主要是让你锻炼下编写整洁的代码和保证长期的可读性与可维护性。&lt;/p>
&lt;h2 id="experiment-3">Experiment 3&lt;/h2>
&lt;p>实验 3 中，你需要选一个你之前自己做的项目并且用上文中提及的最佳实践去重构它们，从而保证你的代码更易读并且更简洁。掌握如何有效地重构代码是前端开发者的一个重要技能。当然，写出高质量的代码并非一蹴而就，而是需要一个长期的迭代过程，&lt;a href="https://www.sitepoint.com/css-architectures-refactor-your-css/" target="_blank" rel="noopener">CSS Architectures: Refactor Your CSS&lt;/a>这篇文章就是一个不错的学习起点。&lt;/p>
&lt;p>当你决定要重构代码之前，你要先扪心自问以下几点&lt;/p>
&lt;ul>
&lt;li>你的类名定义是不是模糊不清的，6 个月之后你还能否明白你类名的意义。&lt;/li>
&lt;li>你的 HTML 与 CSS 是否足够语义化，一眼望去是否就能明白你的代码架构与关系意义？&lt;/li>
&lt;li>你是否 N 次的重复使用了相同的颜色代码，别忘了可以用&lt;a href="http://webdesign.tutsplus.com/articles/understanding-variable-scope-in-sass--cms-23498" target="_blank" rel="noopener">Sass variable&lt;/a>。&lt;/li>
&lt;li>你的代码是否能够在 Safari 与 Chrome 都能正常运行？&lt;/li>
&lt;li>能否用像&lt;a href="http://getskeleton.com/" target="_blank" rel="noopener">Skeleton&lt;/a>这样的网格框架来代替你自己的布局 ?&lt;/li>
&lt;li>你是不是经常使用了&lt;code>!important&lt;/code>?&lt;/li>
&lt;/ul>
&lt;h4 id="experiment-4">Experiment 4&lt;/h4>
&lt;p>最后一个实验是一个大杂烩，把前面讲的所有知识都混杂起来。不过要知道的是，上面讲的很多最佳实践在一个草稿或者小型项目里难见分晓，只有在大项目里才能显露峥嵘。因此，最后一个项目我是建议建立一个自己的作品剪辑网站，作为一个前端开发者，个人网站就是自己的电子名片。这里会展示你的作品与项目的积累，也是一个回溯你发展的进程与开发履历的地方。&lt;/p>
&lt;p>可以参考 Adham Dannaway 的文章 &lt;a href="https://www.smashingmagazine.com/2013/06/workflow-design-develop-modern-portfolio-website/" target="_blank" rel="noopener">My (Simple) Workflow To Design And Develop A Portfolio Website&lt;/a>来从零开始。&lt;/p>
&lt;h1 id="stay-current">Stay current&lt;/h1>
&lt;p>当 HTML 与 CSS 已经是小菜一碟，你就算是进入了前端开发者的殿堂，一个不断发生改变的地方。&lt;/p>
&lt;p>这里推荐一些博客或者期刊，你可以随时关注：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://css-tricks.com/" target="_blank" rel="noopener">CSSTricks&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.smashingmagazine.com/" target="_blank" rel="noopener">Smashing Magazine&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.designernews.co/" target="_blank" rel="noopener">Designer News&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://code.tutsplus.com/" target="_blank" rel="noopener">Nettuts+&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://csswizardry.com/" target="_blank" rel="noopener">CSS Wizard&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="learn-by-example">Learn by example&lt;/h1>
&lt;p>最后，一般来说，最好的学习方式呢就是跟着例子来，这里再安利一波别人家的公司的样式与命名规范。&lt;/p>
&lt;h2 id="styleguides">&lt;strong>Styleguides&lt;/strong>&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://cdn-images-1.medium.com/max/1600/1*792UDPCcmauyc7MDehMHYg.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.mapbox.com/base/styling/" target="_blank" rel="noopener">Mapbox&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://rizzo.lonelyplanet.com/styleguide/design-elements/colours" target="_blank" rel="noopener">LonelyPlanet&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.lightningdesignsystem.com/" target="_blank" rel="noopener">SalesForce&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://ux.mailchimp.com/patterns/" target="_blank" rel="noopener">MailChimp&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="code-conventions">&lt;strong>Code Conventions&lt;/strong>&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://cssguidelin.es/" target="_blank" rel="noopener">CSS Guidelines&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/primer/primer" target="_blank" rel="noopener">Github internal CSS toolkit and guidelines&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/airbnb/css" target="_blank" rel="noopener">AirBnB’s CSS Styleguide&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="further-reading">Further Reading&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://segmentfault.com/a/1190000004292245" target="_blank" rel="noopener">我的前端之路&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/baidu-ife/ife/tree/master/2015_summer" target="_blank" rel="noopener">百度前端训练营&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>本文翻译自 FreeCodeCamp 的&lt;a href="https://medium.freecodecamp.com/from-zero-to-front-end-hero-part-2-adfa4824da9b#.vbcyfngpa" target="_blank" rel="noopener">from-zero-to-front-end-hero-part&lt;/a>。&lt;/p>
&lt;blockquote>
&lt;p>继续译者的废话，这篇文章是&lt;a href="https://segmentfault.com/a/1190000005174755" target="_blank" rel="noopener">前端攻略 - 从路人甲到英雄无敌&lt;/a>的下半部分，在上半篇中介绍了 HTML 与 CSS 的基础知识，在这里就主要介绍 JavaScript 与各种各样的前端框架。再安利一波笔者的&lt;a href="https://segmentfault.com/a/1190000004292245" target="_blank" rel="noopener">我的前端之路&lt;/a> 笔者一直觉得不断变革的前端永远充满活力与激情，但是，哪有那么多激情燃烧的岁月，很多时候会有一种深深的无力感。B 狗的才学会某个东西发现又被抛弃了，就好像笔者才决定大规模使用 React+Redux+Webpack，就看到了这个&lt;a href="https://engineering.footballradar.com/from-a-react-point-of-vue-comparing-reactjs-to-vuejs-for-dynamic-tabular-data/" target="_blank" rel="noopener">from-a-react-point-of-vue-comparing&amp;hellip;&lt;/a>。实际上，就包括 React 本身已经 OverWhelming，对于初学者很不友好。并且各种各样的最佳实践、Boilerplate 在某些意义上会反而提高学习门槛与曲线，对于这方面的讨论笔者推荐几个瞅瞅，当然，笔者本身也在思考，打腹稿中：&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>&lt;a href="https://medium.com/@ericclemmons/javascript-fatigue-48d4011b6fc4#.8okr4h152" target="_blank" rel="noopener">javascript-fatigue&lt;/a>
&lt;blockquote>
&lt;/blockquote>
&lt;/li>
&lt;li>&lt;a href="https://medium.com/@matthiasak/state-of-the-union-js-d664bdbffd14#.9agxss2s2" target="_blank" rel="noopener">state-of-the-union-js&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>我做到我已知的最好的，让最佳实践留给未来的我吧&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>以下是正文部分&lt;/p>
&lt;/blockquote>
&lt;h1 id="javascript-basics">JavaScript Basics&lt;/h1>
&lt;p>作为目前最流行的跨平台语言之一，JavaScript 几乎出现在了所有的地方，但是千里之行始于足下，我们还是要先来理解 JavaScript 的一些基础知识。&lt;/p>
&lt;h2 id="language">Language&lt;/h2>
&lt;p>在学习怎么将 JavaScript 应用到 Web 开发之前，我们还是要看下 JavaScript 的基本语法。推荐阅读 Mozilla Developer Network 的 &lt;a href="https://developer.mozilla.org/zh-CN/Learn/Getting_started_with_the_web/JavaScript_basics" target="_blank" rel="noopener">Language basics crash course&lt;/a>。本教程会导引学习譬如基本的变量、流程控制与函数等等语言基础部分。读完了这个，你就可以读 MDN 的 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide" target="_blank" rel="noopener">JavaScript guide&lt;/a>中的剩余部分：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types" target="_blank" rel="noopener">语法与类型&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Control_flow_and_error_handling" target="_blank" rel="noopener">流程控制与异常处理&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Loops_and_iteration" target="_blank" rel="noopener">循环与迭代&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Functions" target="_blank" rel="noopener">函数&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/wx-chevalier/web-frontend-practice-handbook/blob/master/javascript/introduction.md" target="_blank" rel="noopener">JavaScript Introduction, 可以参考里面的 Reference 部分，有很多推荐的阅读参考&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>同样的，不要死记硬背，你可以在你记不住的时候多看看，当然，最好的是能形成你自己的阅读笔记或者知识体系框架，譬如&lt;a href="https://segmentfault.com/a/1190000004612590" target="_blank" rel="noopener">这个&lt;/a>。你应当专注于理解变量初始化、循环以及函数等等关键的知识点，譬如 for-in、forEach、for-of 的区别，this 的 N 种绑定方法等。如果你实在觉得这货太单调了，那也能直接跳过，以后发现啥东西不理解的时候再滚回来瞅一眼。在实践中学习可能能让你理解地更好。读书读累了，那可以看看视频换个脑子，这个 Codecademy 提供的 &lt;a href="https://www.codecademy.com/learn/javascript" target="_blank" rel="noopener">JavaScript 系列教程&lt;/a> 不错，可以随手看也很有意思。另一个，如果你还有时间，可以看看 &lt;a href="http://eloquentjavascript.net/" target="_blank" rel="noopener">Eloquent JavaScript&lt;/a> 中的相关章节来加深你的记忆。Eloquent JavaScript 是个非常优秀的在线的免费的 JavaScript 学习工具书。## Interactivity&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xlgth.com1.z0.glb.clouddn.com/1-V4UtSyfCN9DDpl70IxXSHA.gif" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> 到这一步你应该已经对 JavaScript 这门语言本身的基础知识有了了解，那么下一步就是学会如何应用到 Web 项目开发中。你首先需要来瞅几眼&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">文档对象模型 (DOM)&lt;/a>来理解 JavaScript 是如何完成与网页的交互的。文档对象模型 (DOM) 是 HTML 和 XML 文档的编程接口。它提供了对文档的结构化的表述，并定义了一种方式可以使从程序中对该结构进行访问，从而改变文档的结构，样式和内容。DOM 将文档解析为一个由节点和对象(包含属性和方法的对象)组成的结构集合。简言之，它会将 web 页面和脚本或程序语言连接起来。如果要做进一步了解的话推荐阅读 CSSTricks 出品的&lt;a href="https://css-tricks.com/dom/" target="_blank" rel="noopener">What is the DOM&lt;/a>，它也提供了简单而直接的对于 DOM 的介绍。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-o1lGaXpnKYgp2r9CFOI_9A.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;blockquote>
&lt;p>好像刚才那段对 DOM 的介绍有点照本宣科，CSS Tricks 里是这么说的，关于 DOM 与 HTML 的区别。可能你在 HTML 代码中写了个&lt;code>&amp;lt;table&amp;gt;&lt;/code>元素，但是忘了写&lt;code>&amp;lt;tbody&amp;gt;&lt;/code>，没关系，浏览器会自动帮你插入&lt;code>&amp;lt;tbody&amp;gt;&lt;/code>到 DOM 中，你可以利用 JavaScript 来控制该节点并且赋予样式，尽管它从未出现在你的 HTML 中。&lt;/p>
&lt;/blockquote>
&lt;p>这里提供了一个简单的例子，通过 JavaScript 是如何改变某个 DOM 元素里的内容来展示基本的 JavaScript 与 DOM 树的交互，首先需要选择到对应 DOM 节点&lt;/p>
&lt;pre tabindex="0">&lt;code>var container = document.getElementById(“container”);
&lt;/code>&lt;/pre>&lt;p>然后使用该 DOM 节点的属性来改变其内容&lt;/p>
&lt;pre tabindex="0">&lt;code>container.innerHTML = &amp;#39;New Content!&amp;#39;;
&lt;/code>&lt;/pre>&lt;p>这只是一个简单的例子，你还可以用 JavaScript DOM API 干更多的事情，你可以阅读以下的 MDN 的教程来进行了解, &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener">The Document Object Model&lt;/a>.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Events" target="_blank" rel="noopener">Events&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Examples" target="_blank" rel="noopener">使用 DOM 进行 Web 与 XML 开发示例&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_object_model/How_to_create_a_DOM_tree" target="_blank" rel="noopener">怎么创建一个 DOM 树&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction" target="_blank" rel="noopener">DOM 介绍&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors" target="_blank" rel="noopener">利用选择器来定位 DOM 节点&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>老生常谈了，不能舍本逐末，还是要专注于理解概念而不是简单地表达式使用，要在心中默问自己几个问题：&lt;/p>
&lt;ul>
&lt;li>DOM 是什么鬼 ?&lt;/li>
&lt;li>怎么查询元素 ?&lt;/li>
&lt;li>怎么进行事件监听 ?&lt;/li>
&lt;li>怎么改变 DOM 节点的属性 ?&lt;/li>
&lt;/ul>
&lt;p>对于常见的 JavaScript 与 DOM 之间的交互, 可以参考 PlainJS 出品的 &lt;a href="https://plainjs.com/javascript/" target="_blank" rel="noopener">JavaScript Functions and Helpers&lt;/a>。这个站点会给你提供很多的例子，譬如 &lt;a href="https://plainjs.com/javascript/styles/set-and-get-css-styles-of-elements-53/" target="_blank" rel="noopener">如何操作 DOM 元素样式&lt;/a> 或者 &lt;a href="https://plainjs.com/javascript/events/getting-the-keycode-from-keyboard-events-17/" target="_blank" rel="noopener">怎么添加键盘事件响应&lt;/a>等等。如果你希望再深入一点，同样推荐&lt;a href="http://eloquentjavascript.net/13_dom.html" target="_blank" rel="noopener">Eloquent JavaScript&lt;/a>中的 DOM 介绍的章节。&lt;/p>
&lt;h2 id="inspector">Inspector&lt;/h2>
&lt;p>在浏览器中，我们可以用开发者工具来调试客户端运行的 JavaScript 代码，譬如 Firefox 的 Firebug 和 Chrome 的开发者工具，可以帮你审视网页源代码，追踪 JavaScript 的执行过程和结果，打印出调试语句，还能瞅瞅譬如网络请求、Cookie 等等资源。这个 &lt;a href="https://developer.chrome.com/devtools" target="_blank" rel="noopener">tutorial&lt;/a> 是关于如何使用 Chrome 的开发者工具，如果你是火狐的话，瞅瞅这个 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Tools/Page_Inspector" target="_blank" rel="noopener">tutorial&lt;/a>。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-wW-FbgJhP0R_id-XPOSKpg.jpeg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="practicing-the-basics">Practicing the basics&lt;/h1>
&lt;p>上面聊完了基础的语法和交互操作，但是对于不知道有多少个坑的 JS 而言不过沧海一粟，不过我把一些新的东西放到了最后一节介绍，这边先放松放松，做点小实验玩玩。&lt;/p>
&lt;h2 id="experiment-1-1">Experiment 1&lt;/h2>
&lt;p>实验 1 里让我们把目光投向 &lt;a href="https://www.airbnb.com/" target="_blank" rel="noopener">AirBnB&lt;/a>, 打开你浏览器的 &lt;a href="https://developer.chrome.com/devtools" target="_blank" rel="noopener">page inspector&lt;/a>, 然后点击 &lt;a href="https://developer.chrome.com/devtools/docs/console" target="_blank" rel="noopener">console tab&lt;/a>。这样你就可以在页面上执行一些 JavaScript 脚本了，你可以尝试着控制一些界面元素，改个字体样式啥的。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-5L17hFKIMTsBFQOLCy8tCQ.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> 我选用 airbnb 的网站作为介绍是因为它的 CSS 类命名比较直接，并且没有被编译器混淆过，当然，你也可以看看百度啊之类的调试。&lt;/p>
&lt;ul>
&lt;li>选择一个拥有唯一类名的 header 标签，改变其文字内容&lt;/li>
&lt;li>移除页面上的随机一个元素&lt;/li>
&lt;li>改变任意元素的 CSS 属性&lt;/li>
&lt;li>将一块区域的高度减小 250px&lt;/li>
&lt;li>改变一个组件，譬如 panel 的可见性&lt;/li>
&lt;li>定义一个叫做 *doSomething *的函数，让它弹出 “Hello world”，并且执行它&lt;/li>
&lt;li>为某个文本块添加一个点击响应事件&lt;/li>
&lt;/ul>
&lt;p>如果你在那边卡住了，别忘了去看看&lt;a href="https://plainjs.com/javascript/" target="_blank" rel="noopener">JavaScript Functions and Helpers&lt;/a> 指南，我在这边也给一个小小的例子：&lt;/p>
&lt;pre tabindex="0">&lt;code>var header = document.querySelector(‘.text-branding’)
header.innerText = ‘Boop&amp;#39;
&lt;/code>&lt;/pre>&lt;p>这个实验的主要目的就是回顾下你学到的 JavaScript 的基本语法以及一些 DOM 操作的知识。&lt;/p>
&lt;h2 id="experiment-2">Experiment 2&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-7365CToqHiLkXf16Di8xRw.gif" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>第二个实验使用 &lt;a href="https://twitter.com/JonathanZWhite" target="_blank" rel="noopener">CodePen-JonathanZWhite&lt;/a>编写一个较大较复杂的 JavaScript 交互项目，会用到一些&lt;a href="https://en.wikipedia.org/wiki/Logic_in_computer_science" target="_blank" rel="noopener">programmatic logic&lt;/a>。这个实验的关注点会综合你在&lt;a href="https://segmentfault.com/a/1190000005174755" target="_blank" rel="noopener">前端攻略 - 从路人甲到英雄无敌&lt;/a>中学到的关于 HTML 与 CSS 的知识，这边有几个参考项目：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/tony_the_coder/pen/GZdNQY" target="_blank" rel="noopener">Periodic Table&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/mecarter/pen/RNomVo" target="_blank" rel="noopener">Mood Color Generator&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/nodws/pen/heILd" target="_blank" rel="noopener">Calculator&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/jasonchan/pen/wMaEwN" target="_blank" rel="noopener">JavaScript Quiz&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/jeffibacache/pen/bzBsp" target="_blank" rel="noopener">Playable Canvas Asteroids&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="more-javascript">More JavaScript&lt;/h1>
&lt;p>看过了基础知识，动手做了几个小实验，下面我们会进入一些更有难度的概念的学习。这边的列举的概念可能之间并么有什么必然的练习，不过我还是把它们放在了一起是因为它们能有助于你通往专家的道路，并且也能有助于你理解下面关于框架部分的讲解。&lt;/p>
&lt;h2 id="language-1">Language&lt;/h2>
&lt;p>实际上 JavaScript 并不是一门浅薄的语言，虽然它只用了短短一周时间就创建出来了，它包含了很多高级的概念与用法(并且因为历史版本问题存在着大量的 Polyfill)。这里是列举出了常见的概念，同样地 &lt;a href="http://eloquentjavascript.net/" target="_blank" rel="noopener">Eloquent JavaScript&lt;/a>也攘括了这些点：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">原型与继承&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://spin.atomicobject.com/2014/10/20/javascript-scope-closures/" target="_blank" rel="noopener">作用域&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures" target="_blank" rel="noopener">闭包&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop" target="_blank" rel="noopener">回环&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://javascript.info/tutorial/bubbling-and-capturing" target="_blank" rel="noopener">事件冒泡&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/" target="_blank" rel="noopener">Apply, call, and bind&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.quora.com/Whats-the-difference-between-a-promise-and-a-callback-in-Javascript" target="_blank" rel="noopener">Callbacks and promises&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://adripofjavascript.com/blog/drips/variable-and-function-hoisting" target="_blank" rel="noopener">变量与提升&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.sitepoint.com/currying-in-functional-javascript/" target="_blank" rel="noopener">Currying&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="imperative-vs-declarative命令式-vs-声明式">Imperative vs. Declarative(命令式 VS 声明式)&lt;/h2>
&lt;p>就如同常见的两种编程方式，JavaScript 与 DOM 交互的方式也分为命令式与声明式。一般来说，声明式编程关注于发生了啥，而命令式则同时关注与咋发生的。&lt;/p>
&lt;pre tabindex="0">&lt;code>var hero = document.querySelector(&amp;#39;.hero&amp;#39;)
hero.addEventListener(‘click’, function() {
  var newChild = document.createElement(‘p’)
  newChild.appendChild(document.createTextNode(‘Hello world!’))
  newChild.setAttribute(‘class’, ‘text’)
  newChild.setAttribute(‘data-info’, ‘header’)
  hero.appendChild(newChild)
 })
}
&lt;/code>&lt;/pre>&lt;p>上面这个小例子就是典型的命令式编程，我们手动地查找到某个元素，然后将 UI 状态存储在 DOM 中，换言之，就是关注于如何达成某个目标。命令式编程的优势在于很直观，不过缺点也很明显，整个程序的健壮性很差，也不易于扩展。譬如如果某人把那个元素的类名从&lt;code>hero&lt;/code>变成了&lt;code>villain&lt;/code>，那么事件监听器就永远不会被调用了。声明式编程可以较好地解决这个问题，刚才提到的比较麻烦的元素选择这个动作可以交托给框架或者库区处理，这样就能让开发者专注于发生了啥，这里推荐一波 &lt;a href="http://www.tysoncadenhead.com/blog/the-state-of-javascript-a-shift-from-imperative-to-declarative#.Vz0WEZMrIUE" target="_blank" rel="noopener">The State Of JavaScript — A Shift From Imperative To Declarative&lt;/a> 与 &lt;a href="http://developer.telerik.com/featured/three-ds-of-web-development-1-declarative-vs-imperative/" target="_blank" rel="noopener">Three D’s of Web Development #1: Declarative vs. Imperative&lt;/a>。本指南并没有一上来先给你看 Angular 或者 React 的 HelloWord，而是告诉你命令式的做法和声明式的区别在哪，这样你就能更好地理解为啥我们会需要框架。&lt;/p>
&lt;blockquote>
&lt;p>响应式与声明式也可以看看笔者在&lt;a href="https://segmentfault.com/a/1190000004292245" target="_blank" rel="noopener">我的前端之路&lt;/a>里面提到的从以 DOM 操作为核心到数据流驱动的页面，关注发生了啥本质上就是关注状态与数据，而不是额外的操作。&lt;/p>
&lt;/blockquote>
&lt;h2 id="ajax">Ajax&lt;/h2>
&lt;p>虽然已经有了很多关于 Ajax 的教程指南，还是建议你阅读下官方的&lt;a href="https://developer.mozilla.org/zh-CN/docs/AJAX/Getting_Started" target="_blank" rel="noopener">Ajax&lt;/a> 介绍。Ajax 即是一个允许 Web 页面通过 JavaScript 与服务端完成交互的技术，Ajax 也是前后端分离的一个基石。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-kkezNwUnuEiAztlQRkJ69A.gif" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> 譬如，如果你要去提交一个表单，那么就要先收集下输入的内容然后通过 HTTP 请求发送到服务端。你在发 Twitter 的时候，就是 Twitter 客户端发送 HTTP 请求到 Twitter 的服务器，然后根据服务端响应来修正页面状态。推荐阅读下 &lt;a href="http://www.vandelaydesign.com/what-is-ajax-webdev/" target="_blank" rel="noopener">What is Ajax&lt;/a>来深入理解 Ajax，如果还是觉得有些疑惑，那可以看看 &lt;a href="https://www.reddit.com/r/explainlikeimfive/comments/19gvn9/explain_it_like_im_5_what_is_ajax/" target="_blank" rel="noopener">Explain it like i’m 5, what is Ajax&lt;/a>，要是还不够，那就回到&lt;a href="http://eloquentjavascript.net/17_http.html" target="_blank" rel="noopener">eloquentjavascript chapter&lt;/a> 关于 HTTP 的章节吧。早期，笔者是习惯用 jQuery 的 $.ajax 来进行 Ajax 操作，不过现在已经慢慢统一到了标准的 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API" target="_blank" rel="noopener">Fetch&lt;/a>，你可以看看由 &lt;a href="https://davidwalsh.name/fetch" target="_blank" rel="noopener">Dan Walsh&lt;/a>写的文章来多了解下 Fetch，它涵盖了 Fetch 的工作原理与基本的用法。因为 Fetch 在部分低版本浏览器上还不能使用，因此我们会选择一些 Fetch &lt;a href="http://stackoverflow.com/questions/7087331/what-is-the-meaning-of-polyfills-in-html5" target="_blank" rel="noopener">polyfill&lt;/a>，文档是 &lt;a href="https://github.com/github/fetch" target="_blank" rel="noopener">这里&lt;/a>。&lt;/p>
&lt;h2 id="jquery">jQuery&lt;/h2>
&lt;ul>
&lt;li>&lt;a href="https://segmentfault.com/a/1190000003911481" target="_blank" rel="noopener">一些 jQuery 使用技巧&lt;/a> &amp;gt; &lt;a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">也需要你压根用不到 jQuery&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>到这里，咱们一直是用单纯的 JavaScript 来进行节点操作，怪麻烦的说，而且在不同的浏览器里还有写不同的 Polyfill。实际上，已经有了大量的 DOM 节点的操作库来帮我们简化常用代码，其中最著名的就是&lt;a href="https://jquery.com/" target="_blank" rel="noopener">jQuery&lt;/a>，一个当年前端程序猿的标配。要记住，jQuery 是一个典型的命令式的操作库，它编写与前端井喷之前，在那个年代有着无可比拟的先进行。虽然今天，我们应该用像 Angular、React 这样的声明式编程的框架来进行复杂 UI 界面的编写，但是仍然是推荐学习下 jQuery，毕竟还有大量的项目仍然是基于 jQuery 的。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-4XD5t8AEjQFWeTWEIdhQpw.gif" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> jQuery 官方提供了一个&lt;a href="http://learn.jquery.com/" target="_blank" rel="noopener">Learning Center&lt;/a>，是不错的基础学习的教程，它会一步一步带你学习重要的概念，譬如&lt;a href="http://learn.jquery.com/effects/intro-to-effects/" target="_blank" rel="noopener">animations&lt;/a> 与 &lt;a href="http://learn.jquery.com/events/handling-events/" target="_blank" rel="noopener">event handling&lt;/a>。如果你想要更多的学习资源，那么可以参考 Codecademy 的 &lt;a href="https://www.codecademy.com/learn/jquery" target="_blank" rel="noopener">jQuery course&lt;/a>。不过一定要记住，jQuery 并不是唯一的进行 DOM 操作的库，&lt;a href="https://plainjs.com/javascript/" target="_blank" rel="noopener">PlainJS&lt;/a> 和 &lt;a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener">You Might Not Need jQuery&lt;/a> 也提供了基于原本的 JavaScript 代码怎么实现常见的 jQuery 中的操作。&lt;/p>
&lt;h2 id="es5-vs-es6">ES5 vs. ES6&lt;/h2>
&lt;p>在现代的前端开发中，另一个绕不过去的概念就是 &lt;a href="https://en.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">ECMAScript&lt;/a>。现在主要有两个常用的 JavaScript 版本，分布是 ES5 和 ES6，它们呢都是 JavaScript 使用的 ECMAScript 标准。你可以把它们看做不同版本的 JavaScript，ES5 是在 2009 年定稿，然后使用至今。而 ES6, 也叫作 ES2015，是一个新的标准，它提供了很多譬如&lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/const" target="_blank" rel="noopener">常量&lt;/a>, &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Classes" target="_blank" rel="noopener">类&lt;/a>, 以及 &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals" target="_blank" rel="noopener">模板字符串&lt;/a>等等特性。ES6 是兼容 ES5 的，不像 Python3 和 Python2，并且很多 ES6 带来的语法特性都是在 ES5 的封装的基础上，譬如 ES6 中的类是基于 JavaScript &lt;a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="noopener">prototypal inheritance&lt;/a>的&lt;a href="https://en.wikipedia.org/wiki/Syntactic_sugar" target="_blank" rel="noopener">syntactical sugar&lt;/a>。这里推荐一个不错的 ES6 的教程&lt;a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/" target="_blank" rel="noopener">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning&lt;/a> 以及 Dan Wahlin 的&lt;a href="http://weblogs.asp.net/dwahlin/getting-started-with-es6-%E2%80%93-the-next-version-of-javascript" target="_blank" rel="noopener">Getting Started with ES6 — The Next Version of JavaScript&lt;/a>.。看完了这些，你也可以看看 ES5 和 ES6 特性的详细列表: &lt;a href="http://es6-features.org/#Constants" target="_blank" rel="noopener">ES6 Features&lt;/a>以及 &lt;a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener">Github repository&lt;/a>。&lt;/p>
&lt;h1 id="more-practice">More Practice&lt;/h1>
&lt;p>恭喜你，成功到达存档点，你已经学了不少关于 JavaScript 的知识了，下面让我们来温习一波。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-vThR7vEzW40OloxGnbmwuA.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> ## Experiment 3 Experiment 3 着重于如何利用 jQuery 进行常见的 DOM 节点操作，本实验中，我们会以一种更加结构化的方式。我是选择了 Flipboard 的主页作为范本，你可以参考下 Codecademy 的&lt;a href="https://www.codecademy.com/skills/make-an-interactive-website" target="_blank" rel="noopener">Flipboard’s home page and add interactivity with JavaScript&lt;/a> 教程。## Experiment 4
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-OxwMghRSssqkALRIaS72iw.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> 按照惯例，实验 4 呢又把你学过的 HTML 和 CSS 的知识跟 JavaScript 的知识混杂到了一起进行锻炼，这是一个关于钟的实验，各种各样的钟。在动手之前推荐你看看 &lt;a href="http://philipwalton.com/articles/decoupling-html-css-and-javascript/" target="_blank" rel="noopener">Decoupling Your HTML, CSS, and JavaScript&lt;/a>来了解下 JavaScript 混入的情况下基本的 CSS 类名命名规范。同样的，我也准备了一系列的 CodePen 来当做你的教材：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/stevenfabre/pen/Cyhjb" target="_blank" rel="noopener">Flat Clock&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/mattlitzinger/pen/ruEyz" target="_blank" rel="noopener">jQuery Wall Clock&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/rapidrob/pen/IGEhn" target="_blank" rel="noopener">Fancy Clock&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/OfficialAntarctica/pen/VYzvgj" target="_blank" rel="noopener">Retro Clock&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://codepen.io/dudleystorey/pen/unEyp" target="_blank" rel="noopener">Simple JavaScript Clock&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>如果你要更多的例子，请在 CodePen 上搜索 &lt;a href="http://codepen.io/search/pens?q=clock&amp;amp;limit=all&amp;amp;type=type-pens" target="_blank" rel="noopener">clock&lt;/a>。你可以选择先写基本的 HTML 与 CSS 样式然后再加上 JavaScript 逻辑，也可以先写 JavaScript 逻辑代码然后再放入到样式中。你可以选择用 jQuery，不过尽量还是用纯粹的 JavaScript 代码吧。&lt;/p>
&lt;h1 id="javascript-frameworks">JavaScript Frameworks&lt;/h1>
&lt;p>小怪清完了，下面开始刷 BOSS 了，拿起你的剑吧勇士，美丽的公主就在前方。我们在这一章节会开始介绍常用的 JavaScript 框架。我们不提倡重复造轮子，但是一定要理解轮子并且能给它上上油或者换换螺丝钉，这些 JavaScript 框架可以帮你更好地组织你的代码。它们为前端开发者提供了可复用的解决方案，就好像所谓的设计模式一样，它可以用来解决状态管理、路由以及性能优化等等，正是因为有了这些框架，我们才能更好地构建&lt;a href="http://www.visionmobile.com/blog/2013/07/web-sites-vs-web-apps-what-the-experts-think/" target="_blank" rel="noopener">web apps&lt;/a>。贪多嚼不烂，我不打算介绍所有的 JavaScript 框架，不过还是列个目录下来，这些框架包括但不限于 &lt;a href="https://angularjs.org/" target="_blank" rel="noopener">Angular&lt;/a>, &lt;a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React&lt;/a> + &lt;a href="https://facebook.github.io/react/docs/flux-overview.html" target="_blank" rel="noopener">Flux&lt;/a>, &lt;a href="http://emberjs.com/" target="_blank" rel="noopener">Ember&lt;/a>, &lt;a href="http://aurelia.io/" target="_blank" rel="noopener">Aurelia&lt;/a>,&lt;a href="http://vuejs.org/" target="_blank" rel="noopener">Vue&lt;/a>, 以及 &lt;a href="https://www.meteor.com/" target="_blank" rel="noopener">Meteor&lt;/a>。你并不需要学习所有的框架，选择一个然后深入，最合适自己的才是最好的。&lt;/p>
&lt;blockquote>
&lt;p>便如译者在文首所说，我们并不能盲目地追赶框架，而是要理解框架背后的思想与原则。另一个在译者自己的实践中，会尽可能的基于 ES6 进行抽象，这样保证了即使换框架也能有很好地兼容于复用。&lt;/p>
&lt;/blockquote>
&lt;h2 id="architectural-patterns">Architectural Patterns&lt;/h2>
&lt;p>在学习框架之前，首先要了解下常用的架构模式：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller" target="_blank" rel="noopener">model-view-controller&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93viewmodel" target="_blank" rel="noopener">model-view-viewmodel&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93presenter" target="_blank" rel="noopener">model–view–presenter&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>这些模式可以用来创建清晰的多层应用&lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener">关注分离&lt;/a>。关注分离是一个设计原则，即是讲一个巨石型应用切分到不同的领域专注层，譬如前面我们都是在 HTML 中保留应用状态，而你可以使用一个 JavaScript 对象，或者说是 Model 层来存储应用状态。如果你想要了解地更多，可以先看下&lt;a href="https://developer.chrome.com/apps/app_frameworks" target="_blank" rel="noopener">Chrome Developers&lt;/a>里对于 MVC 的讲解，然后阅读&lt;a href="https://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/" target="_blank" rel="noopener">Understanding MVC And MVP (For JavaScript And Backbone Developers)&lt;/a>。阅读这篇文章的时候不要在意有没有学过 Backbone，只要关注 MVC 与 MVP 比较的部分。Addy Osman 也写了另一篇关于 MVVM 的文章&lt;a href="https://addyosmani.com/blog/understanding-mvvm-a-guide-for-javascript-developers/" target="_blank" rel="noopener">Understanding MVVM — A Guide For JavaScript Developers&lt;/a>。如果你想了解 MVC 的源起，可以参考 Martin Fowler 的 &lt;a href="http://martinfowler.com/eaaDev/uiArchs.html" target="_blank" rel="noopener">GUI Architectures&lt;/a>。最后，阅读这篇&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvcmvp" target="_blank" rel="noopener">JavaScript &lt;code>MV*&lt;/code> Patterns&lt;/a>，&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/" target="_blank" rel="noopener">Learning JavaScript Design Patterns&lt;/a>也是个很不错的在线免费电子书。&lt;/p>
&lt;h2 id="design-patterns">Design Patterns&lt;/h2>
&lt;p>JavaScript 的框架也并没有重复造轮子，很多还是基于&lt;a href="https://en.wikipedia.org/wiki/Software_design_pattern" target="_blank" rel="noopener">已有的设计模式&lt;/a>，你可以认为设计模式是在软件开发中用于解决通用问题的可复用的方法。尽管理解设计模式并不是学习一个框架的前提，不过我还是建议你可以先了解一些：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#decoratorpatternjavascript" target="_blank" rel="noopener">Decorator&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#factorypatternjavascript" target="_blank" rel="noopener">Factory&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#singletonpatternjavascript" target="_blank" rel="noopener">Singleton&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#revealingmodulepatternjavascript" target="_blank" rel="noopener">Revealing module&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#facadepatternjavascript" target="_blank" rel="noopener">Facade&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#observerpatternjavascript" target="_blank" rel="noopener">Observer&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>理解这些设计模式不仅会让你变成一个更好地设计师，也能有助于你更好地理解这些框架。&lt;/p>
&lt;h2 id="angularjs">AngularJS&lt;/h2>
&lt;p>AngularJS 是一个 JavaScript &lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvc" target="_blank" rel="noopener">MVC&lt;/a>框架，不过有时候也是一个 &lt;a href="https://addyosmani.com/resources/essentialjsdesignpatterns/book/#detailmvvm" target="_blank" rel="noopener">MVVM&lt;/a>框架。它由在 2010 年由 Google 进行维护并且迅速在社区刮起了一波浪潮。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-lFZ7nP3KlRtb69abn19xJQ.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> Angular 是一个典型的声明式框架，这里推荐一个阅读，可以帮你理解命令式编程到声明式编程的转变: &lt;a href="http://stackoverflow.com/questions/13151725/how-is-angularjs-different-from-jquery" target="_blank" rel="noopener">How is AngularJS different from jQuery&lt;/a>。如果你希望了解更多关于 Angular 的知识，可以参考 Angular&lt;a href="https://docs.angularjs.org/guide" target="_blank" rel="noopener">documentation&lt;/a>。还有一个叫做 &lt;a href="https://docs.angularjs.org/tutorial/step_00" target="_blank" rel="noopener">Angular Cat&lt;/a> 的渐进教程。&lt;a href="https://github.com/timjacobi/angular2-education" target="_blank" rel="noopener">angular2-education&lt;/a> 是一个由 Tim Jacobi. 整理的完整的关于 angular2 的教程，另外，还有 John Papa 编写的 &lt;a href="https://github.com/johnpapa/angular-styleguide" target="_blank" rel="noopener">最佳实践指南&lt;/a>。&lt;/p>
&lt;h2 id="react--flux">React + Flux&lt;/h2>
&lt;p>Angular 帮助开发者解决了很多前端系统构建中遇到的问题，不过 Angular 1 存在着极大的性能问题。今年才出的 Angular 2 也是组件化思维，不过太过庞大。另一个常用的小而美的工具就是 &lt;a href="https://facebook.github.io/react/" target="_blank" rel="noopener">React&lt;/a>，专注于用户交互的构建。React 可以认为是 MVC 层中的 View 层，React 只是一个 Library，通常与 &lt;a href="https://facebook.github.io/flux/" target="_blank" rel="noopener">Flux&lt;/a>或者 Redux 一起结合起来使用。
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-c0JXNVxVnTlOuQCnDqA6CA.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> Facebook 最早设计 React 与 Flux 是为了解决 MVC 中的一些缺陷与扩展问题，可以参考著名的&lt;a href="https://www.youtube.com/watch?list=PLb0IAmt7-GS188xDYE-u1ShQmFFGbrk0v&amp;amp;v=nYkdrAPrdcw" target="_blank" rel="noopener">Hacker Way: Rethinking Web App Development at Facebook&lt;/a>演讲，这里介绍了 Flux 的起源。首先，我们来学习 React，推荐是直接看&lt;a href="https://facebook.github.io/react/docs/getting-started.html" target="_blank" rel="noopener">React 官方文档&lt;/a>，然后看看&lt;a href="http://reactfordesigners.com/labs/reactjs-introduction-for-people-who-know-just-enough-jquery-to-get-by/" target="_blank" rel="noopener">React.js Introduction For People Who Know Just Enough jQuery To Get By&lt;/a> 来帮你从 jQuery 思维转移到 React 思维。&lt;/p>
&lt;blockquote>
&lt;p>可以参照译者的&lt;a href="https://github.com/wx-chevalier/web-frontend-practice-handbook/blob/master/framework/view/react/introduction/react-introduction.md" target="_blank" rel="noopener">React Introduction&lt;/a>来获取更多关于 React 参考资料的东东&lt;/p>
&lt;/blockquote>
&lt;p>在你对 React 有了基本的了解之后，下面就可以开始学习 Flux 了，同样的首先推荐&lt;a href="https://facebook.github.io/flux/docs/overview.html" target="_blank" rel="noopener">官方 Flux 文档&lt;/a>。然后你可以看看&lt;a href="https://github.com/enaqx/awesome-react" target="_blank" rel="noopener">Awesome React&lt;/a>, 这里包含了很多你可以慢慢咀嚼的内容。&lt;/p>
&lt;h1 id="practicing-with-frameworks">Practicing with Frameworks&lt;/h1>
&lt;p>又到了实践环节了，现在你已经对于 JavaScript 框架与架构模式有了基本的了解，是时候带一波节奏了。在这两个实验中，注意体会架构设计的理念，首先要保证 &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY&lt;/a>, 然后有一个 &lt;a href="https://en.wikipedia.org/wiki/Separation_of_concerns" target="_blank" rel="noopener">清晰的分层概念&lt;/a>, 最后要注意 &lt;a href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">单一职责原则&lt;/a>.&lt;/p>
&lt;h2 id="experiment-5">Experiment 5&lt;/h2>
&lt;p>实验 5 是不用框架重构著名的 TodoMVC，换言之，就是用最基础的 JavaScript 代码来实现一个 TodoMVC。本实验的目的就是为了向你展示在没有框架介入的情况下怎么构建一个完整的 MVC 应用
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-ISCVxjX3_691DLnV3EPZ3w.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure> 你可以参考 &lt;a href="http://todomvc.com/examples/vanillajs/" target="_blank" rel="noopener">TodoMVC&lt;/a>，第一步就是创建一个新的本地项目然后建立三个基本的组件，你可以参考&lt;a href="https://github.com/tastejs/todomvc/tree/gh-pages/examples/vanillajs" target="_blank" rel="noopener">Github repository&lt;/a>这里的完整代码。如果你觉得现在的自己能力还不足以 Hold 住整个项目，表担心，先把它们下载下来，然后慢慢实践。&lt;/p>
&lt;h2 id="experiment-6">Experiment 6&lt;/h2>
&lt;p>Experiment 6 就是跟着 Scotch.io 的教程来实现一个下面这样的站点:
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-zOIJ31nV3rDYBidYkPSH_A.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>&lt;a href="https://scotch.io/tutorials/build-an-etsy-clone-with-angular-and-stamplay-part-1" target="_blank" rel="noopener">Build an Etsy Clone with Angular and Stamplay&lt;/a> 会教你怎么基于 Angular 来构建一个网站，提供&lt;a href="https://en.wikipedia.org/wiki/Application_programming_interface" target="_blank" rel="noopener">APIs&lt;/a>并且在一个大型的项目中进行架构组织。学完了这些之后，你要能理解以下这些问题：&lt;/p>
&lt;ul>
&lt;li>啥是 web app?&lt;/li>
&lt;li>怎么用 Angular 实践 MVC/MVVM?&lt;/li>
&lt;li>API 是啥，肿么用 ?&lt;/li>
&lt;li>怎么组织与管理一个大型的 CodeBase?&lt;/li>
&lt;li>将一个 UI 切分为声明式组件的好处在哪 ?&lt;/li>
&lt;/ul>
&lt;p>如果这个教程还不够，那还可以看看&lt;a href="https://www.sitepoint.com/real-time-status-update-app-angularjs-firebase/" target="_blank" rel="noopener">Build a Real-Time Status Update App with AngularJS &amp;amp; Firebase&lt;/a>。&lt;/p>
&lt;h2 id="experiment-7">Experiment 7&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-3HrnGSbAzIM5Lwu0_eqmjw.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>第 7 个实验是将 React 与 Flux 综合使用，即利用 React 来构建一个 TODOMVC。你可以参考&lt;a href="https://facebook.github.io/flux/docs/todo-list.html" target="_blank" rel="noopener">Facebook’s Flux documentation site&lt;/a>这个教程，它会教你一步一步地从零开始构建界面然后将 Flux 应用到整个 Web 项目中。通过了第一关，就可以移步到 &lt;a href="https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/" target="_blank" rel="noopener">怎么利用 React、Redux 与 Immutable.js 构建一个 TodoMVC&lt;/a> 以及 &lt;a href="http://code.tutsplus.com/courses/build-a-microblogging-app-with-flux-and-react" target="_blank" rel="noopener">利用 Flux 与 React 构建一个微博客&lt;/a>。&lt;/p>
&lt;h1 id="stay-current-1">Stay current&lt;/h1>
&lt;p>就像前端一样，JavaScript 也永远不会停下前进的步伐。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="http://7xi5sw.com1.z0.glb.clouddn.com/1-gcVLvWktBPvc3rgp5fLvBA.jpeg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>下面列举了一系列博客，多读读，能够随时了解最新的发展与消息：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://www.smashingmagazine.com/tag/javascript/" target="_blank" rel="noopener">Smashing Magazine&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://javascriptweekly.com/" target="_blank" rel="noopener">JavaScript Weekly&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="http://www.ng-newsletter.com/" target="_blank" rel="noopener">Ng Weekly&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://www.reddit.com/r/javascript/" target="_blank" rel="noopener">Reddit JavaScript&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://devchat.tv/js-jabber" target="_blank" rel="noopener">JavaScript Jabber&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="learn-by-example-1">Learn by example&lt;/h1>
&lt;h2 id="styleguides-1">Styleguides&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">AirBnB JavaScript Styleguide&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/rwaldron/idiomatic.js/" target="_blank" rel="noopener">Principles of Writing Consistent, Idiomatic JavaScript&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/felixge/node-style-guide" target="_blank" rel="noopener">Node Styleguide&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://developer.mozilla.org/zh-CN/docs/Mozilla/Developer_guide/Coding_Style" target="_blank" rel="noopener">MDN Coding Style&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="codebases">Codebases&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://github.com/lodash/lodash" target="_blank" rel="noopener">Lodash&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/jashkenas/underscore" target="_blank" rel="noopener">Underscore&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/babel/babel" target="_blank" rel="noopener">Babel&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/TryGhost/Ghost" target="_blank" rel="noopener">Ghost&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/NodeBB/NodeBB" target="_blank" rel="noopener">NodeBB&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/keystonejs/keystone" target="_blank" rel="noopener">KeystoneJS&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>开发环境与工具链</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E5%85%B7%E9%93%BE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8E%E5%B7%A5%E5%85%B7%E9%93%BE/</guid><description>&lt;h1 id="visual-studio-code">Visual Studio Code&lt;/h1>
&lt;h2 id="快速编辑">快速编辑&lt;/h2>
&lt;h2 id="代码调试">代码调试&lt;/h2>
&lt;h1 id="tool">Tool&lt;/h1>
&lt;h2 id="prettier">Prettier&lt;/h2>
&lt;h2 id="eslint">ESLint&lt;/h2>
&lt;h2 id="sass">SASS&lt;/h2></description></item></channel></rss>