<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>History | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/webapis/history/</link><atom:link href="https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/webapis/history/index.xml" rel="self" type="application/rss+xml"/><description>History</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>History</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/webapis/history/</link></image><item><title>History</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/webapis/history/history/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/webapis/history/history/</guid><description>&lt;h1 id="html5-history">HTML5 History&lt;/h1>
&lt;p>传统的不使用 Ajax 的站点，每一个翻页是一个跳转，然后你可以在浏览器地址栏里看到诸如 &lt;code>?page=2&lt;/code> 这样的参数。每一页就这样通过地址栏的 URL 做了标记，每一次请求，浏览器都会根据参数返回正确的页码。所以，传统的跳转翻页，刷新也不会丢失状态。&lt;/p>
&lt;p>在 Ajax 更新页面局部内容的同时，也在地址栏的 URL 里更新状态参数，HTML5 history API 将解决这个问题。HTML5 history API 只包括 2 个方法：&lt;code>history.pushState()&lt;/code> 和 &lt;code>history.replaceState()&lt;/code>，以及 1 个事件：&lt;code>window.onpopstate&lt;/code>。&lt;/p>
&lt;h1 id="apis">APIs&lt;/h1>
&lt;p>我们可以使用如下方式来检测是否可用 HTML5 History:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kr">export&lt;/span> &lt;span class="kr">const&lt;/span> &lt;span class="nx">supportsHistory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">()&lt;/span> &lt;span class="p">=&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kr">const&lt;/span> &lt;span class="nx">ua&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">navigator&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">userAgent&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="nx">ua&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Android 2.&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="nx">ua&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Android 4.0&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ua&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Mobile Safari&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ua&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Chrome&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">ua&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">indexOf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Windows Phone&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">history&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="s2">&amp;#34;pushState&amp;#34;&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">history&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="historypushstate">history.pushState()&lt;/h2>
&lt;p>它的完全体是 &lt;code>history.pushState(stateObject, title, url)&lt;/code>，包括三个参数。&lt;/p>
&lt;p>第 1 个参数是&lt;strong>状态对象&lt;/strong>，它可以理解为一个拿来存储自定义数据的元素。它和同时作为参数的&lt;code>url&lt;/code>会关联在一起。&lt;/p>
&lt;p>第 2 个参数是&lt;strong>标题&lt;/strong>，是一个字符串，目前各类浏览器都会忽略它(以后才有可能启用，用作页面标题)，所以设置成什么都没关系。目前建议设置为空字符串。&lt;/p>
&lt;p>第 3 个参数是&lt;strong>URL 地址&lt;/strong>，一般会是简单的&lt;code>?page=2&lt;/code>这样的参数风格的相对路径，它会自动以当前 URL 为基准。需要注意的是，&lt;strong>本参数 URL 需要和当前页面 URL 同源&lt;/strong>，否则会抛出错误。&lt;/p>
&lt;p>调用 &lt;code>pushState()&lt;/code> 方法将新生成一条历史记录，方便用浏览器的“后退”和“前进”来导航(“后退”可是相当常用的按钮)。另外，从 URL 的同源策略可以看出，HTML5 history API 的出发点是很明确的，就是让无跳转的单站点也可以将它的各个状态保存为浏览器的多条历史记录。当通过历史记录重新加载站点时，站点可以直接加载到对应的状态。&lt;/p>
&lt;h2 id="historyreplacestate">history.replaceState()&lt;/h2>
&lt;p>它和 &lt;code>history.pushState()&lt;/code> 方法基本相同，区别只有一点，&lt;code>history.replaceState()&lt;/code> 不会新生成历史记录，而是将当前历史记录替换掉。&lt;/p>
&lt;h2 id="windowonpopstate">window.onpopstate&lt;/h2>
&lt;p>push 的对立就是 pop，可以猜到这个事件是在浏览器取出历史记录并加载时触发的。但实际上，它的条件是比较苛刻的，几乎只有点击浏览器的“前进”、“后退”这些导航按钮，或者是由 JavaScript 调用的 &lt;code>history.back()&lt;/code> 等导航方法，且切换前后的两条历史记录都属于同一个网页文档，才会触发本事件。&lt;/p>
&lt;p>上面的“同一个网页文档”请理解为 JavaScript 环境的 &lt;code>document&lt;/code> 是同一个，而不是指基础 URL(去掉各类参数的)相同。也就是说，只要有重新加载发生(无论是跳转到一个新站点还是继续在本站点)，JavaScript 全局环境发生了变化，&lt;code>popstate&lt;/code> 事件都不会触发。&lt;/p>
&lt;p>&lt;code>popstate&lt;/code> 事件是设计出来和前面的 2 个方法搭配使用的。一般只有在通过前面 2 个方法设置了同一站点的多条历史记录，并在其之间导航(前进或后退)时，才会触发这个事件。同时，前面 2 个方法所设置的状态对象(第 1 个参数)，也会在这个时候通过事件的&lt;code>event.state&lt;/code>返还回来。&lt;/p>
&lt;p>此外请注意，&lt;code>history.pushState()&lt;/code> 及 &lt;code>history.replaceState()&lt;/code> 本身调用时是不触发 &lt;code>popstate&lt;/code> 事件的。&lt;/p>
&lt;h1 id="路由监听">路由监听&lt;/h1>
&lt;p>首先，在服务器端添加对 URL 状态参数的支持，例如 &lt;code>?page=3&lt;/code> 将会输出对应页码的内容(后端模板)。也可以是服务器端把对应页码的数据给 JavaScript，由 JavaScript 向页面写入内容(前端模板)。接下来，使用 &lt;code>history.pushState()&lt;/code>，在任一次翻页的同时，也设置正确的带参数的 URL，代码可能是这样：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">newURL&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;?page=&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">pageNow&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">history&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">pushState&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">null&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">newURL&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>到此，就解决了 F5 刷新状态还原的事了。在浏览器中点击后退，例如从 &lt;code>?page=3&lt;/code> 退到 &lt;code>?page=2&lt;/code>，会发现没有变化。按道理说，这时候也应该对应变化。这就要用到 &lt;code>popstate&lt;/code> 事件了。为 &lt;code>window&lt;/code> 添加 &lt;code>popstate&lt;/code> 事件，加入这种导航变化时的处理：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">$&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">window&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">on&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;popstate&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kd">function&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">event&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 取得之前通过pushState保存的state object，尽管本示例并不打算使用它。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// jQuery对event做了一层包装，需要通过originalEvent取得原生event。
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">state&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">event&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">originalEvent&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">state&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="c1">// 本示例直接取URL参数来处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">reg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="sr">/page=(\d+)/&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">regMatch&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">reg&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">exec&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="c1">// 第1页的时候既可以是 ?page=1，也可以根本没有page参数
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">pageNow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nx">regMatch&lt;/span> &lt;span class="o">===&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="o">+&lt;/span>&lt;span class="nx">regMatch&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">updateByPage&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">pageNow&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">});&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样，就完成了。这样看起来是否会觉得还挺容易的呢？在支持 HTML5 history API 的浏览器中，以上部分就已经做到了带页码记录的 Ajax 翻页。&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="http://javascript.ruanyifeng.com/bom/history.html" target="_blank" rel="noopener">阮一峰 浏览器对象之 History&lt;/a>&lt;/li>
&lt;/ul></description></item></channel></rss>