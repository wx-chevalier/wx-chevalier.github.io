<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>对象 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E5%AF%B9%E8%B1%A1/</link><atom:link href="https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E5%AF%B9%E8%B1%A1/index.xml" rel="self" type="application/rss+xml"/><description>对象</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>对象</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E5%AF%B9%E8%B1%A1/</link></image><item><title>浏览器对象</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E5%AF%B9%E8%B1%A1/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E5%AF%B9%E8%B1%A1/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%AF%B9%E8%B1%A1/</guid><description>&lt;h1 id="浏览器对象">浏览器对象&lt;/h1>
&lt;p># Window&lt;/p>
&lt;h2 id="location">Location&lt;/h2>
&lt;p>Location 对象存储在 Window 对象的 Location 属性中，表示那个窗口中当前显示的文档的 Web 地址。它的 href 属性存 放的是文档的完整 URL，其他属性则分别描述了 URL 的各个部分。这些属性与 Anchor 对象(或 Area 对象)的 URL 属性非常相似。当一个 Location 对象被转换成字符串，href 属性的值被返回。这意味着你可以使用表达式 location 来替代 location.href。不过 Anchor 对象表示的是文档中的超链接，Location 对象表示的却是浏览器当前显示的文档的 URL(或位置)。但是 Location 对象所能做的远远不止这些，它还能控制浏览器显示的文档的位置。如果把一个含有 URL 的字符串赋予 Location 对象或它的 href 属性，浏览器就会把新的 URL 所指的文档装载进来，并显示出来。&lt;/p>
&lt;p>除了设置 location 或 location.href 用完整的 URL 替换当前的 URL 之外，还可以修改部分 URL，只需要给 Location 对象的其他属性赋值即可。这样做就会创建新的 URL，其中的一部分与原来的 URL 不同，浏览器会将它装载并显示出来。例如，假设设置了 Location 对象的 hash 属性，那么浏览器就会转移到当前文档中的一个指定的位置。同样，如果设置了 search 属性，那么浏览器就会重新装载附加了新的查询字符串的 URL。&lt;/p>
&lt;p>除了 URL 属性外，Location 对象的 reload() 方法可以重新装载当前文档，replace()  可以装载一个新文档而无须为它创建一个新的历史记录，也就是说，在浏览器的历史列表中，新文档将替换当前文档。&lt;/p>
&lt;h3 id="location-对象属性">Location 对象属性&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_hash.asp" target="_blank" rel="noopener">hash&lt;/a>&lt;/td>
&lt;td>设置或返回从井号 (#) 开始的 URL(锚)，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_host.asp" target="_blank" rel="noopener">host&lt;/a>&lt;/td>
&lt;td>设置或返回主机名和当前 URL 的端口号，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_hostname.asp" target="_blank" rel="noopener">hostname&lt;/a>&lt;/td>
&lt;td>设置或返回当前 URL 的主机名，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_href.asp" target="_blank" rel="noopener">href&lt;/a>&lt;/td>
&lt;td>设置或返回完整的 URL，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_pathname.asp" target="_blank" rel="noopener">pathname&lt;/a>&lt;/td>
&lt;td>设置或返回当前 URL 的路径部分，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_port.asp" target="_blank" rel="noopener">port&lt;/a>&lt;/td>
&lt;td>设置或返回当前 URL 的端口号，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_protocol.asp" target="_blank" rel="noopener">protocol&lt;/a>&lt;/td>
&lt;td>设置或返回当前 URL 的协议，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/prop_loc_search.asp" target="_blank" rel="noopener">search&lt;/a>&lt;/td>
&lt;td>设置或返回从问号 (?) 开始的 URL(查询部分)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="location-对象方法">Location 对象方法&lt;/h3>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>属性&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/met_loc_assign.asp" target="_blank" rel="noopener">assign()&lt;/a>&lt;/td>
&lt;td>加载新的文档，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/met_loc_reload.asp" target="_blank" rel="noopener">reload()&lt;/a>&lt;/td>
&lt;td>重新加载当前文档，&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;a href="http://www.w3school.com.cn/jsref/met_loc_replace.asp" target="_blank" rel="noopener">replace()&lt;/a>&lt;/td>
&lt;td>用新的文档替换当前文档&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="properties">Properties&lt;/h3>
&lt;p>对于这样一个 URL&lt;/p>
&lt;p>&lt;a href="http://www.maidq.com/index.html?ver=1.0&amp;amp;id=6#imhere" target="_blank" rel="noopener">http://www.maidq.com/index.html?ver=1.0&amp;id=6#imhere&lt;/a>&lt;/p>
&lt;p>我们可以用 javascript 获得其中的各个部分&lt;/p>
&lt;p>1, window.location.href 整个 URl 字符串(在浏览器中就是完整的地址栏) 本例返回值: http://www.maidq.com/index.html?ver=1.0&amp;amp;id=6#imhere&lt;/p>
&lt;p>2,window.location.protocol URL 的协议部分 本例返回值:http:&lt;/p>
&lt;p>3,window.location.host URL 的主机部分 本例返回值:www.maidq.com&lt;/p>
&lt;p>4,window.location.port URL 的端口部分 如果采用默认的 80 端口(update:即使添加了:80)，那么返回值并不是默认的 80 而是空字符 本例返回值:&amp;quot;&amp;quot;&lt;/p>
&lt;p>5,window.location.pathname URL 的路径部分(就是文件地址) 本例返回值:/fisker/post/0703/window.location.html&lt;/p>
&lt;p>6,window.location.search 查询(参数)部分 除了给动态语言赋值以外，我们同样可以给静态页面,并使用 javascript 来获得相信应的参数值 本例返回值:?ver=1.0&amp;amp;id=6&lt;/p>
&lt;p>7,window.location.hash 锚点 本例返回值:#imhere&lt;/p>
&lt;h3 id="methods">Methods&lt;/h3>
&lt;h3 id="获取路径参数">获取路径参数&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-js" data-lang="js">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">function&lt;/span> &lt;span class="nx">GetQueryString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">name&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">reg&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="nb">RegExp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;(^|&amp;amp;)&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="nx">name&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s2">&amp;#34;=([^&amp;amp;]*)(&amp;amp;|$)&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kd">var&lt;/span> &lt;span class="nx">r&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">window&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">location&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">search&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">substr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="nx">match&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">reg&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="nx">unescape&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 调用方法
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">GetQueryString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;参数名1&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">GetQueryString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;参数名2&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">alert&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">GetQueryString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;参数名3&amp;#34;&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p># Performance:性能测试&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://javascript.ruanyifeng.com/bom/performance.html" target="_blank" rel="noopener">Performance API&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>元素对象</title><link>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E5%AF%B9%E8%B1%A1/%E5%85%83%E7%B4%A0%E5%AF%B9%E8%B1%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-notes/01.%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/dom/%E5%AF%B9%E8%B1%A1/%E5%85%83%E7%B4%A0%E5%AF%B9%E8%B1%A1/</guid><description>&lt;h1 id="dom-中-html-的元素对象">DOM 中 HTML 的元素对象&lt;/h1>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; EventTarget.prototype &amp;lt; Node.prototype &amp;lt; Element.prototype &amp;lt; HTMLElement.prototype &amp;lt; HTMLAnchorElement.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; EventTarget.prototype &amp;lt; Node.prototype &amp;lt; Attr.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; EventTarget.prototype &amp;lt; Node.prototype &amp;lt; CharacterData.prototype &amp;lt; Text.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; EventTarget.prototype &amp;lt; Node.prototype &amp;lt; CharacterData.prototype &amp;lt; Comment.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; EventTarget.prototype &amp;lt; Node.prototype &amp;lt; Document.prototype &amp;lt; HTMLDocument.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; EventTarget.prototype &amp;lt; Node.prototype &amp;lt; DocumentType.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; EventTarget.prototype &amp;lt; Node.prototype &amp;lt; DocumentFragment.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; NodeList.prototype
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Object.prototype &amp;lt; HTMLCollection.prototype
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230430222339.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>EventTarget, Node, Element, HTMLElement, CharacterData, Document, HTMLDocument 都是抽象类&lt;/li>
&lt;li>HTMLElement, CharacterData, Attr, Document, DocumentType, DocumentFragment 直接实现了 Node 类&lt;/li>
&lt;li>Text, Comment 实现了 CharacterData 抽象类&lt;/li>
&lt;li>HTMLElement 实现了抽象类 Element&lt;/li>
&lt;li>HTMLStyleElement, HTMLLinkElement, HTMLScriptElement, HTMLImageElement, HTMLIframeElement, HTMLFormElement, HTMLInputElement, HTMLSelectElement, HTMLTextAreaElement 实现了抽象类 HTMLElement&lt;/li>
&lt;/ul>
&lt;h1 id="css-对象">CSS 对象&lt;/h1>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://assets.ng-tech.icu/item/20230430222357.png" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在 CSS 中，一个样式表可以包含多个样式规则，一个样式规则可以包含多个样式声明，CSSStyleDeclaration 是一个声明对象，CSSRule 是一个 CSS 规则对象，CSSStyleSheet 是一个样式表对象，一个 CSS 规则对象包含多个声明对象，一个样式表对象包含多个 CSS 规则对象 document.styleSheets 包含多个样式表。&lt;/p></description></item></channel></rss>