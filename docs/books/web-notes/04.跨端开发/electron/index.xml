<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Electron | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/</link>
      <atom:link href="https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/index.xml" rel="self" type="application/rss+xml" />
    <description>Electron</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>Electron</title>
      <link>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/</link>
    </image>
    
    <item>
      <title>开发基础</title>
      <link>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80/</guid>
      <description>&lt;h1 id=&#34;electron-环境搭建与开发基础&#34;&gt;Electron 环境搭建与开发基础&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>内存调优</title>
      <link>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E5%86%85%E5%AD%98%E8%B0%83%E4%BC%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E5%86%85%E5%AD%98%E8%B0%83%E4%BC%98/</guid>
      <description>&lt;h1 id=&#34;electron-内存调优&#34;&gt;Electron 内存调优&lt;/h1&gt;
&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;DEBUGGING ELECTRON MEMORY USAGE &lt;a href=&#34;http://seenaburns.com/debugging-electron-memory-usage/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://seenaburns.com/debugging-electron-memory-usage/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>应用发布</title>
      <link>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/web-notes/04.%E8%B7%A8%E7%AB%AF%E5%BC%80%E5%8F%91/electron/%E5%BA%94%E7%94%A8%E5%8F%91%E5%B8%83/</guid>
      <description>&lt;h1 id=&#34;electron-应用发布&#34;&gt;Electron 应用发布&lt;/h1&gt;
&lt;p&gt;## Release&lt;/p&gt;
&lt;h2 id=&#34;using-native-node-modules&#34;&gt;Using Native Node Modules&lt;/h2&gt;
&lt;p&gt;The native Node modules are supported by Electron, but since Electron is using a different V8 version from official Node, you have to manually specify the location of Electron&amp;rsquo;s headers when building native modules.&lt;/p&gt;
&lt;p&gt;Native modules might break when Node starts using a new version of V8. To make sure the module you&amp;rsquo;re interested in will work with Electron, you should check if it supports the internal Node version used by Electron. You can check what version of Node is used in Electron by looking it up in the releases page or by using process.version (see Quick Start for example).
Consider using NAN for your own modules, since it makes it easier to support multiple versions of Node. It&amp;rsquo;s also helpful for porting old modules to newer versions of Node so they can work with Electron.&lt;/p&gt;
&lt;h3 id=&#34;the-easy-way&#34;&gt;The Easy Way&lt;/h3&gt;
&lt;p&gt;The most straightforward way to rebuild native modules is via the &lt;a href=&#34;https://github.com/paulcbetts/electron-rebuild&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;electron-rebuild&lt;/code&gt;&lt;/a&gt; package, which handles the manual steps of downloading headers and building native modules:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;npm install --save-dev electron-rebuild


# Every time you run &amp;#34;npm install&amp;#34;, run this
./node_modules/.bin/electron-rebuild


# On Windows if you have trouble, try:
.\node_modules\.bin\electron-rebuild.cmd
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;httpsgithubcomelectronelectronblobmasterdocstutorialusing-native-node-modulesmdthe-npm-waythe-npm-way&#34;&gt;&lt;a href=&#34;https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md#the-npm-way&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;The npm Way&lt;/h3&gt;
&lt;p&gt;You can also use &lt;code&gt;npm&lt;/code&gt; to install modules. The steps are exactly the same with Node modules, except that you need to setup some environment variables:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;export npm_config_disturl=https://atom.io/download/atom-shell
export npm_config_target=0.33.1
export npm_config_arch=x64
export npm_config_runtime=electron
HOME=~/.electron-gyp npm install module-name
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;httpsgithubcomelectronelectronblobmasterdocstutorialusing-native-node-modulesmdthe-node-gyp-waythe-node-gyp-way&#34;&gt;&lt;a href=&#34;https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md#the-node-gyp-way&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;The node-gyp Way&lt;/h3&gt;
&lt;p&gt;To build Node modules with headers of Electron, you need to tell &lt;code&gt;node-gyp&lt;/code&gt; where to download headers and which version to use:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cd /path-to-module/
$ HOME=~/.electron-gyp node-gyp rebuild --target=0.29.1 --arch=x64 --dist-url=https://atom.io/download/atom-shell
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;HOME=~/.electron-gyp&lt;/code&gt; changes where to find development headers. The &lt;code&gt;--target=0.29.1&lt;/code&gt; is version of Electron. The &lt;code&gt;--dist-url=...&lt;/code&gt; specifies where to download the headers. The &lt;code&gt;--arch=x64&lt;/code&gt; says the module is built for 64bit system.&lt;/p&gt;
&lt;p&gt;### Executable File&lt;/p&gt;
&lt;p&gt;为了使用 Electron 部署你的应用程序，你存放应用程序的文件夹需要叫做  &lt;code&gt;app&lt;/code&gt;  并且需要放在  Electron  的资源文件夹下(在  OS X  中是指  &lt;code&gt;Electron.app/Contents/Resources/&lt;/code&gt;，在  Linux  和  Windows  中是指  &lt;code&gt;resources/&lt;/code&gt;)  就像这样：&lt;/p&gt;
&lt;p&gt;在  OS X  中:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language- &#34; data-lang=&#34; &#34;&gt;electron/Electron.app/Contents/Resources/app/
├── package.json
├── main.js
└── index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在  Windows  和  Linux  中:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language- &#34; data-lang=&#34; &#34;&gt;electron/resources/app
├── package.json
├── main.js
└── index.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后运行  &lt;code&gt;Electron.app&lt;/code&gt; (或者  Linux  中的  &lt;code&gt;electron&lt;/code&gt;，Windows  中的  &lt;code&gt;electron.exe&lt;/code&gt;),  接着  Electron  就会以你的应用程序的方式启动。&lt;code&gt;electron&lt;/code&gt;  文件夹将被部署并可以分发给最终的使用者。&lt;/p&gt;
&lt;p&gt;### Package&lt;/p&gt;
&lt;p&gt;除了通过拷贝所有的资源文件来分发你的应用程序之外，你可以可以通过打包你的应用程序为一个  &lt;a href=&#34;https://github.com/atom/asar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asar&lt;/a&gt;  库文件以避免暴露你的源代码。&lt;/p&gt;
&lt;p&gt;为了使用一个  &lt;code&gt;asar&lt;/code&gt;  库文件代替  &lt;code&gt;app&lt;/code&gt;  文件夹，你需要修改这个库文件的名字为  &lt;code&gt;app.asar&lt;/code&gt; ，  然后将其放到  Electron  的资源文件夹下，然后  Electron  就会试图读取这个库文件并从中启动。  如下所示：&lt;/p&gt;
&lt;p&gt;在  OS X  中:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language- &#34; data-lang=&#34; &#34;&gt;electron/Electron.app/Contents/Resources/
└── app.asar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在  Windows  和  Linux  中:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language- &#34; data-lang=&#34; &#34;&gt;electron/resources/
└── app.asar
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更多的细节请见  &lt;a href=&#34;https://github.com/atom/electron/blob/master/docs-translations/zh-CN/tutorial/application-packaging.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Application packaging&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;electron-packagerhttpsgithubcomelectron-userlandelectron-packager根据不同平台打包成app-或者exe&#34;&gt;&lt;a href=&#34;https://github.com/electron-userland/electron-packager&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Electron Packager&lt;/a&gt;:根据不同平台打包成.app 或者.exe&lt;/h3&gt;
&lt;p&gt;Electron Packager is known to run on the following &lt;strong&gt;host&lt;/strong&gt; platforms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows (32/64 bit)&lt;/li&gt;
&lt;li&gt;OS X&lt;/li&gt;
&lt;li&gt;Linux (x86/x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It generates executables/bundles for the following &lt;strong&gt;target&lt;/strong&gt; platforms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows (also known as &lt;code&gt;win32&lt;/code&gt;, for both 32/64 bit)&lt;/li&gt;
&lt;li&gt;OS X (also known as &lt;code&gt;darwin&lt;/code&gt;) / &lt;a href=&#34;http://electron.atom.io/docs/v0.36.0/tutorial/mac-app-store-submission-guide/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mac App Store&lt;/a&gt; (also known as &lt;code&gt;mas&lt;/code&gt;)*&lt;/li&gt;
&lt;li&gt;Linux (for both x86/x86_64)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Running electron-packager from the command line has this basic form:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;electron-packager &amp;lt;sourcedir&amp;gt; &amp;lt;appname&amp;gt; --platform=&amp;lt;platform&amp;gt; --arch=&amp;lt;arch&amp;gt; [optional flags...]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This will:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Find or download the correct release of Electron&lt;/li&gt;
&lt;li&gt;Use that version of Electron to create a app in &lt;code&gt;/--&lt;/code&gt; &lt;em&gt;(this can be customized via an optional flag)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
