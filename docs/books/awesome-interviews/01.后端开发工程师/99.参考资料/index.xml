<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>99.参考资料 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/awesome-interviews/01.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
      <atom:link href="https://ng-tech.icu/books/awesome-interviews/01.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/index.xml" rel="self" type="application/rss+xml" />
    <description>99.参考资料</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>99.参考资料</title>
      <link>https://ng-tech.icu/books/awesome-interviews/01.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/</link>
    </image>
    
    <item>
      <title>2018-后端开发面试题</title>
      <link>https://ng-tech.icu/books/awesome-interviews/01.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/awesome-interviews/01.%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/99.%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99/2018-%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E9%9D%A2%E8%AF%95%E9%A2%98/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/monklof/Back-End-Developer-Interview-Questions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;原文地址&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;后端开发面试题&#34;&gt;后端开发面试题&lt;/h1&gt;
&lt;h2 id=&#34;说明&#34;&gt;说明&lt;/h2&gt;
&lt;p&gt;这篇文章翻译自一位外国友人的关于面试后端程序员的文章，我比较喜爱这篇文章。一是因为它极大的拓宽了我的视角，另一方面是其中的一些问题非常具有启发性。不仅对于面试者，对于面试官来说也是个不错的参考。于是迫不及待的翻译了一下，给各位看官做个参考。&lt;/p&gt;
&lt;p&gt;这篇文章中，许多问题我并没有完全理解，所以翻译可能存在不准确的地方。如果有读者发现有一些翻译有误或者不好的地方，请不吝赐教。&lt;/p&gt;
&lt;p&gt;原文参见 &lt;a href=&#34;https://github.com/arialdomartini&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@arialdomartini&lt;/a&gt;的: &lt;a href=&#34;https://github.com/arialdomartini/Back-End-Developer-Interview-Questions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Back-End Developer Interview Questions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;以下是原文翻译。&lt;/p&gt;
&lt;h1 id=&#34;后端开发面试题-1&#34;&gt;后端开发面试题&lt;/h1&gt;
&lt;p&gt;在面试的时候，我并不特别喜欢问一些技术性的问题。我更喜欢的方式是这样的: 和面试者坐在一起，看一些实际的代码，解决一些实际的问题。并且用一整天的时间，让团队所有成员轮流和面试者进行结对编程。虽然如此，但是一些技术问题仍然可以用来很好地启动一段有深度的谈话，能够让面试者和面试官相互都有更加深入的了解。&lt;/p&gt;
&lt;p&gt;这个仓库包含了可以用来考核面试者的一系列后端面试题。但绝不是说，面试官必须用每个面试题来考核面试者（这样可能要耗费好几个小时）。根据你期望面试者拥有的技能，从这个列表中有选择的挑一些题目，可以帮助你在特定技能上考核面试者。&lt;/p&gt;
&lt;p&gt;应当承认的是，这个项目的灵感来自于&lt;a href=&#34;https://github.com/darcyclarke&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@darcyclarke&lt;/a&gt;的文章&lt;a href=&#34;https://github.com/darcyclarke/Front-end-Developer-Interview-Questions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Front-end Job Interview Questions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 请记住，这些面试题中有许多问题是开放式的，能引导讨论一些有趣的问题。相比那些有直接答案的问题来说，这种问题能够让你对面试者的能力有更多的了解。再一次强调，我认为仅仅是问问题是不够的。要通过与面试者较长时间的结对编程来完成面试: 这是你们相互了解对方的风格和方法、让面试者了解未来工作的最佳手段之一。&lt;/p&gt;
&lt;h2 id=&#34;a-nametoc目录a&#34;&gt;&lt;a name=&#39;toc&#39;&gt;目录&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;#general&#34;&gt;通用问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#open&#34;&gt;开放式问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#patterns&#34;&gt;设计模式相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design&#34;&gt;代码设计相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#languages&#34;&gt;语言相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#web&#34;&gt;Web 相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#databases&#34;&gt;数据库相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#nosql&#34;&gt;非关系型数据库相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#codeversioning&#34;&gt;代码版本管理相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#concurrency&#34;&gt;并发问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#distributed&#34;&gt;分布式系统相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#management&#34;&gt;软件生命周期和团队管理相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#algorithms&#34;&gt;逻辑和算法相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#architecture&#34;&gt;软件架构相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#soa&#34;&gt;面向服务架构(SOA)和微服务(Microservice)相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#security&#34;&gt;安全相关问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#billgates&#34;&gt;比尔盖茨式问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#snippets&#34;&gt;代码示例问题&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;a-namegeneral通用问题a-toc&#34;&gt;&lt;a name=&#39;general&#39;&gt;通用问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;语言设计中空引用(&lt;a href=&#34;http://programmers.stackexchange.com/questions/12777/are-null-references-really-a-bad-thing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;null reference&lt;/a&gt;)的存在有什么问题？假设你想要将空引用的概念从你的首选语言中移除，可能导致什么结果？&lt;/li&gt;
&lt;li&gt;为什么函数式编程重要？什么时候适用函数式语言？&lt;/li&gt;
&lt;li&gt;设计(design)、架构(architecture)、功能(functionality)和美学(aesthetic)之间有什么区别？讨论一下。&lt;/li&gt;
&lt;li&gt;微软、谷歌、欧朋(opera)和火狐这类公司是如何从他们的浏览器中获利的？&lt;/li&gt;
&lt;li&gt;为什么打开 TCP 套接字有很大的开销？&lt;/li&gt;
&lt;li&gt;封装的重要性体现在哪儿？&lt;/li&gt;
&lt;li&gt;什么是实时系统？它与普通系统有什么区别？&lt;/li&gt;
&lt;li&gt;实时语言(real-time language)和堆内存分配(heap memory allocation)之间的关系是什么？&lt;/li&gt;
&lt;li&gt;不变性(Immutability)是指: (变量的)值只能在创建的时候被设置一次，之后就不能被改变。为什么不变性对写更加安全的代码有帮助？&lt;/li&gt;
&lt;li&gt;可变值(mutable values)和不可变值(immutable values)有哪些优缺点？&lt;/li&gt;
&lt;li&gt;什么是 O/R 阻抗失衡(Object-Relational impedence mismatch)？&lt;/li&gt;
&lt;li&gt;如果你需要使用缓存，你使用哪些原则来确定缓存的大小？&lt;/li&gt;
&lt;li&gt;TCP 和 HTTP 有什么区别？&lt;/li&gt;
&lt;li&gt;在客户端渲染(client-side rendering)和服务端渲染(server-side rendering)之间，你是如何权衡的？&lt;/li&gt;
&lt;li&gt;如何在一个不可靠的协议之上构建一个可靠的通信协议？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-nameopen开放式问题a-toc&#34;&gt;&lt;a name=&#39;open&#39;&gt;开放式问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为什么人们会抵制变化？&lt;/li&gt;
&lt;li&gt;如何向你的祖母解释什么是线程？&lt;/li&gt;
&lt;li&gt;作为一个软件工程师，你想要既要有创新力，又要产出具有可预测性。采用什么策略才能使这两个目标可以共存呢？&lt;/li&gt;
&lt;li&gt;什么是好的代码？&lt;/li&gt;
&lt;li&gt;解释什么是流(Streaming)和如何实现一个流？&lt;/li&gt;
&lt;li&gt;假设你的公司给你一周的时间，用来改善你和同事的生活: 你将如何使用这一周？&lt;/li&gt;
&lt;li&gt;本周你学了什么？&lt;/li&gt;
&lt;li&gt;所有的设计中都会有美学元素(aesthetic element)的存在。问题是，你认为美学元素是你的朋友还是敌人？&lt;/li&gt;
&lt;li&gt;列出最近你读过的 5 本书。&lt;/li&gt;
&lt;li&gt;假设目前有个大型公司（非常有钱），他们的开发流程是瀑布式流程（Waterfall），如果需要你在他们公司引入持续交付（&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_delivery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Continue Devivery&lt;/a&gt;），你会怎么做？&lt;/li&gt;
&lt;li&gt;我们来谈谈&amp;quot;&lt;em&gt;重复造轮子&lt;/em&gt;&amp;quot;,&amp;quot;&lt;em&gt;非我发明症&lt;/em&gt;&amp;quot;, &amp;ldquo;&lt;em&gt;吃自己做出来的狗粮&lt;/em&gt;&amp;ldquo;的这些做法吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(注: 重复造轮子: Reinventing the wheel; 非我发明症:Not Invented Here Syndrome; 吃自己做出来的狗粮: Eating Your Own Dog Food)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在你当前的工作流中，什么事情是你计划下一步需要自动化的？&lt;/li&gt;
&lt;li&gt;为什么写软件是困难的？是什么使软件的维护变得困难？&lt;/li&gt;
&lt;li&gt;你更喜欢在全新项目（Green Field Project）上工作还是在已有项目(Brown Field Project)基础上工作？为什么？&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/alex/what-happens-when&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;当你在浏览器地址栏输入 google.com 回车之后都发生了什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;当操作系统 CPU 处于空闲的时候，它可能在处理哪些事情？&lt;/li&gt;
&lt;li&gt;如何向一个 5 岁的孩子解释什么是 Unicode/数据库事务？&lt;/li&gt;
&lt;li&gt;如何维护单体架构(monolithic architecture)？&lt;/li&gt;
&lt;li&gt;一个&amp;quot;专业的开发者&amp;quot;意味着什么？&lt;/li&gt;
&lt;li&gt;软件开发是艺术、是技艺还是工程？你的观点是什么？&lt;/li&gt;
&lt;li&gt;&amp;ldquo;喜欢这个的人也喜欢&amp;hellip;&amp;quot;，如何在一个电子商务商店里实现这种功能？&lt;/li&gt;
&lt;li&gt;为什么在创新上，企业会比创业公司慢些？&lt;/li&gt;
&lt;li&gt;为什么说，对于涉及密码学的问题，你不应该尝试应用自己的发明或者设计？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namepatterns设计模式相关问题a-toc&#34;&gt;&lt;a name=&#39;patterns&#39;&gt;设计模式相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;请用一个例子表明，全局对象是邪恶的存在。&lt;/li&gt;
&lt;li&gt;假设你工作的系统不支持事务性，你会如何从头开始实现它？&lt;/li&gt;
&lt;li&gt;什么是好莱坞原则（Hollywood Principles）？&lt;/li&gt;
&lt;li&gt;关于迪米特法则(最少知识原则): 写一段代码违反它, 然后修复它。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（注: 迪米特法则：the Law of Demeter, 最少知识原则： the Principle of Least Knowledge）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Active-Record 模式有什么限制和缺陷？&lt;/li&gt;
&lt;li&gt;Data-Mapper 模式和 Active-Record 模式有什么区别？&lt;/li&gt;
&lt;li&gt;空对象模式(Null Object Pattern)的目的是什么？&lt;/li&gt;
&lt;li&gt;为什么组合(Composition)比继承(Inheritance)更好？&lt;/li&gt;
&lt;li&gt;什么是反腐败层(Anti-corruption Layer)?&lt;/li&gt;
&lt;li&gt;你可以写一个线程安全的单例(Singleton)类吗？&lt;/li&gt;
&lt;li&gt;数据抽象(Data Abstraction)能力是指能改变实现而不影响客户端的这种能力。请构造一个一个例子，违反这个特性，并且尝试修复它。&lt;/li&gt;
&lt;li&gt;你是如何处理依赖关系地狱(Dependency Hell)的？&lt;/li&gt;
&lt;li&gt;为什么说 goto 语句是恶魔般的存在？&lt;/li&gt;
&lt;li&gt;健壮性是进行软件设计时的一个通用原则，它建议 &lt;em&gt;“发送时要保守，接收时要开放”&lt;/em&gt;。这也经常被写成，“做一个有耐心的读者，做一个谨慎的作者”。你能解释一些这背后的逻辑吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;译者注： &amp;ldquo;发送时要保守，接收时要开发&amp;quot;的原文是： &amp;ldquo;Be conservative in what you send, be liberal in what you accept&amp;rdquo;，有点类似于“严于律己，宽于待人”的意味。&lt;/p&gt;
&lt;h4 id=&#34;a-namedesign代码设计相关问题a-toc&#34;&gt;&lt;a name=&#39;design&#39;&gt;代码设计相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;你在进行软件设计时会考虑软件测试吗？软件测试是如何影响软件设计的？&lt;/li&gt;
&lt;li&gt;内聚和耦合的区别是什么？&lt;/li&gt;
&lt;li&gt;重构在哪些场景下有用？&lt;/li&gt;
&lt;li&gt;代码中的注释有用吗？&lt;/li&gt;
&lt;li&gt;设计和架构有什么区别？&lt;/li&gt;
&lt;li&gt;为什么在测试驱动开发(TDD)中是先写测试，再写代码？&lt;/li&gt;
&lt;li&gt;C++支持多继承，Java 允许类实现多个接口。这些特性对正交性有什么影响？使用多继承和使用多接口有区别吗？[这个问题来自 Andrew .Hunt 和 David Thomas 写的《程序员修炼之道》]&lt;/li&gt;
&lt;li&gt;在存储过程（Stored Procedures）中写业务逻辑有什么优缺点？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namelanguages语言相关问题a-toc&#34;&gt;&lt;a name=&#39;languages&#39;&gt;语言相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;告诉我你的首选语言的三个最坏的缺陷。&lt;/li&gt;
&lt;li&gt;为什么现在函数式编程这么越来越受关注？&lt;/li&gt;
&lt;li&gt;闭包是什么？它有什么用途？闭包和类有什么共同点？&lt;/li&gt;
&lt;li&gt;泛型有什么用途？&lt;/li&gt;
&lt;li&gt;什么是高阶函数？有什么用途？用你的首选语言写个例子出来。&lt;/li&gt;
&lt;li&gt;讨论一下，如何写一个循环，然后把它转换成递归函数，要避免易变性。&lt;/li&gt;
&lt;li&gt;有些语言将函数视为第一公民，这是什么意思？&lt;/li&gt;
&lt;li&gt;用一个例子说明匿名函数是有用的。&lt;/li&gt;
&lt;li&gt;什么是动态方法调度(Dynamic Method Dispatch)？&lt;/li&gt;
&lt;li&gt;名字空间(Namespace)有什么用？有什么可以替代它的吗？&lt;/li&gt;
&lt;li&gt;谈谈 Java 和 C#之间的互操作性(Interoperability) (任选其他两门语言都行)&lt;/li&gt;
&lt;li&gt;为什么很多软件工程师不喜欢 Java？&lt;/li&gt;
&lt;li&gt;你认为好的语言好在哪里？差的语言差在哪里？&lt;/li&gt;
&lt;li&gt;写两个函数，一个是&amp;quot;引用透明的(Referentially Transparent)&amp;quot;，另一个是&amp;quot;引用不透明的(Referentially Opaque)&amp;quot;。讨论之。&lt;/li&gt;
&lt;li&gt;什么是栈？什么是堆？&lt;/li&gt;
&lt;li&gt;为什么一个语言中，&amp;ldquo;函数是第一公民&amp;quot;是很重要的？&lt;/li&gt;
&lt;li&gt;模式匹配(Pattern Matching)和 Switch 语句(Switch clauses)的区别在哪儿？&lt;/li&gt;
&lt;li&gt;为什么有些语言设计上没有异常机制？这有什么优缺点？&lt;/li&gt;
&lt;li&gt;如果&lt;code&gt;Cat&lt;/code&gt;是一个&lt;code&gt;Animal&lt;/code&gt;, 那么&lt;code&gt;TaskCare&amp;lt;Cat&amp;gt;&lt;/code&gt;是一个&lt;code&gt;TakeCare&amp;lt;Animal&amp;gt;&lt;/code&gt;吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namewebweb-相关问题a-toc&#34;&gt;&lt;a name=&#39;web&#39;&gt;web 相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为什么&amp;quot;第一方 cookie(first-party cookie)&amp;ldquo;和&amp;quot;第三方 cookie(third-party cookie)&amp;ldquo;被如此不同的对待？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namedatabases数据库相关问题a-toc&#34;&gt;&lt;a name=&#39;databases&#39;&gt;数据库相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果要你将一个项目从 MySQL 迁移至 PostgreSQL 中，你会如何迁移？&lt;/li&gt;
&lt;li&gt;为什么&lt;code&gt;SELECT * FROM table WHERE field = null&lt;/code&gt;不能匹配空的字段？&lt;/li&gt;
&lt;li&gt;什么是 ACID(原子性，一致性，隔离性，持久性)原则？&lt;/li&gt;
&lt;li&gt;你是如何进行数据库模式(Database schema)迁移的？&lt;/li&gt;
&lt;li&gt;延迟加载(lazy loading)是如何实现的？什么场景下有用？他有什么缺陷？&lt;/li&gt;
&lt;li&gt;什么是 N+1 问题？&lt;/li&gt;
&lt;li&gt;如何找出应用中开销最大的查询？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namenosql非关系型数据库相关问题a-toc&#34;&gt;&lt;a name=&#39;nosql&#39;&gt;非关系型数据库相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么是最终一致性(Eventual Consistency)？&lt;/li&gt;
&lt;li&gt;关于 CAP 理论，举一些 CP、AP、CA 系统的例子。&lt;/li&gt;
&lt;li&gt;NoSQL 是如何解决可伸缩性的挑战的？&lt;/li&gt;
&lt;li&gt;什么情况下你会使用类似于 MongoDB 的文档数据库而不是关系型数据库（如 Mysql 或者 PostgreSQL）？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namecodeversioning代码版本管理相关问题a-toc&#34;&gt;&lt;a name=&#39;codeversioning&#39;&gt;代码版本管理相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为什么在 Mercurial 或者 git 中(管理)分支比 SVN 容易？&lt;/li&gt;
&lt;li&gt;分散式版本控制系统（比如 git），相比集中式版本控制系统（如 svn）有哪些优势和劣势？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(注:集中式版本控制系统: Centralized Version Control Systems；分散式版本控制系统: Distributed Version Control Systems)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能描述一下什么是 GitHubFlow 和 GitFlow 工作流吗？&lt;/li&gt;
&lt;li&gt;什么是 rebase？&lt;/li&gt;
&lt;li&gt;为什么合并操作(merge)在 Mercurial 和 git 中比在 SVN 和 CVS 中容易？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-nameconcurrency并发问题a-toc&#34;&gt;&lt;a name=&#39;concurrency&#39;&gt;并发问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;为什么我们需要并发呢？解释一下。&lt;/li&gt;
&lt;li&gt;为什么测试多线程/并发代码这么困难？&lt;/li&gt;
&lt;li&gt;什么是竞争条件（Race Condition）？用任何一个语言写一个例子。&lt;/li&gt;
&lt;li&gt;什么是死锁？用代码解释一下。&lt;/li&gt;
&lt;li&gt;什么是饿死？&lt;/li&gt;
&lt;li&gt;什么是 Wait-Free 算法？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namedistributed分布式系统相关问题a-toc&#34;&gt;&lt;a name=&#39;distributed&#39;&gt;分布式系统相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;怎么测试一个分布式系统？&lt;/li&gt;
&lt;li&gt;什么场景下你会在两个系统中采用异步通信机制？&lt;/li&gt;
&lt;li&gt;远程过程调用的通用缺点是什么？&lt;/li&gt;
&lt;li&gt;如果你为了可扩展性和鲁棒性而构建一个分布式的系统，分别在封闭安全的网络环境情况下，和地理上的位置不同但是网络环境不是封闭和安全的情况下，你会考虑什么不同的事情？&lt;/li&gt;
&lt;li&gt;在 Web 应用中如何管理容错性？在桌面端呢？&lt;/li&gt;
&lt;li&gt;在分布式系统中，如何处理故障？&lt;/li&gt;
&lt;li&gt;让我们来谈谈在网络分区(network partitions)情况下的几种（一致性）解决方案吧。&lt;/li&gt;
&lt;li&gt;你认为分布式计算中有哪些谬论？&lt;/li&gt;
&lt;li&gt;你在什么时候会使用 Request/Response 模式，什么时候使用 Publish/Subscribe 模式？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namemanagement软件生命周期和团队管理相关问题a-toc&#34;&gt;&lt;a name=&#39;management&#39;&gt;软件生命周期和团队管理相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是敏捷（Agility）？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你是如何处理遗留代码（Legacy Code）的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;假设我是你们公司的 CEO，请向我解释什么是看板，并且说服我在它上面投资。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;敏捷（Agility）和瀑布（Waterfall）之间的最大区别是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;作为团队管理者，你对会议太多这个问题是如何处理的？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你会如何处理延期很长时间了的项目？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&amp;ldquo;&lt;em&gt;个体与交互重于过程和工具&lt;/em&gt;&amp;ldquo;和&amp;rdquo;&lt;em&gt;客户协作重于合同谈判&lt;/em&gt;&amp;ldquo;占了敏捷宣言（Agile Manifesto）的一半，谈论一下这两个观念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果你是你们公司的 CTO，你会采取什么样的决策？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你觉得项目经理有用吗？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果要你组织一个弹性工作制的开发团队（即没有强制工作时间的要求），并且假期制度是&amp;quot;按需休假&amp;rdquo;，你会如何做？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;你会如何管理一个人员流动非常高的团队？如何在不加薪的条件下说服团队成员不要离开？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了代码之外，你最关注你的同事的哪 3 项素质？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于代码，你最希望非技术人员能知道的的三件事是什么？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namealgorithms逻辑和算法相关问题a-toc&#34;&gt;&lt;a name=&#39;algorithms&#39;&gt;逻辑和算法相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;只用 LIFO 栈如何构造一个 FIFO 队列？只用 FIFO 队列如何构造一个 LIFO 栈？&lt;/li&gt;
&lt;li&gt;写一段有栈溢出的代码。&lt;/li&gt;
&lt;li&gt;写一个尾递归版本的阶乘函数。&lt;/li&gt;
&lt;li&gt;使用任何一个语言，写一个 REPL，功能是 echo 你输入的字符串。然后将它演化成一个逆波兰表达式的计算器。&lt;/li&gt;
&lt;li&gt;如果需要你设计一个文件系统磁盘碎片整理程序，你会如何设计？&lt;/li&gt;
&lt;li&gt;写一个生成随机迷宫的程序。&lt;/li&gt;
&lt;li&gt;写一段有内存泄漏的示例代码。&lt;/li&gt;
&lt;li&gt;随机生成一个的数字序列，里面每个数字都不同。&lt;/li&gt;
&lt;li&gt;写一个简单的垃圾回收系统。&lt;/li&gt;
&lt;li&gt;使用任何一门语言，写一个基本的消息代理。&lt;/li&gt;
&lt;li&gt;写一个基础的 web 服务器，然后画一张线路图，展示你将来还想要实现的功能。&lt;/li&gt;
&lt;li&gt;如何对一个 10GB 的文件进行排序？如果是 10TB 的数据，你会采用什么方法？&lt;/li&gt;
&lt;li&gt;请实现&lt;code&gt;rnd()&lt;/code&gt;函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namearchitecture软件架构相关问题a-toc&#34;&gt;&lt;a name=&#39;architecture&#39;&gt;软件架构相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么情况下缓存是没用的，甚至是危险的？&lt;/li&gt;
&lt;li&gt;为什么事件驱动的架构能提高可扩展性(scalability)？&lt;/li&gt;
&lt;li&gt;什么样的代码是可读性强的代码？&lt;/li&gt;
&lt;li&gt;紧急设计(Emergent Design)和演化架构(Evolutionary Architecture)之间的区别是什么？&lt;/li&gt;
&lt;li&gt;横向扩展(scale out) vs 纵向扩展(scale up): 有什么区别？分别在什么场景下使用？&lt;/li&gt;
&lt;li&gt;分布式系统中如何处理&amp;quot;故障切换(failover)&amp;ldquo;和&amp;quot;用户会话(user session)&amp;quot;？&lt;/li&gt;
&lt;li&gt;什么是 CQRS(Command Query Responsibility Segregation)?他和最早的 Command-Query Separation 原则有什么区别？&lt;/li&gt;
&lt;li&gt;什么是三层架构？&lt;/li&gt;
&lt;li&gt;如何设计一个可扩展性高的系统？&lt;/li&gt;
&lt;li&gt;处理 C10k 问题的策略有哪些？&lt;/li&gt;
&lt;li&gt;如果让你来设计一个去中心化的 P2P 系统，你会如何设计？&lt;/li&gt;
&lt;li&gt;为什么 CGI 的扩展性不好？&lt;/li&gt;
&lt;li&gt;在设计系统时，你如何防止供应商依赖(&lt;a href=&#34;https://sourcemaking.com/antipatterns/vendor-lock-in&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vendor Lock-in&lt;/a&gt;)？&lt;/li&gt;
&lt;li&gt;在可扩展性上，发布/订阅(Publish-Subscribe)模式有什么缺点？&lt;/li&gt;
&lt;li&gt;80 年代以后，CPU 有哪些变化？这些变化，对编程产生了什么影响？&lt;/li&gt;
&lt;li&gt;性能生命周期(performace lifecycle)中，你认为哪个部分是需要考虑进去的？ 如何管理？&lt;/li&gt;
&lt;li&gt;除了恶意攻击造成的拒绝服务现象以外，哪些设计或者架构上的问题会导致拒绝服务？&lt;/li&gt;
&lt;li&gt;性能和可扩展性之间有什么关系？&lt;/li&gt;
&lt;li&gt;什么时候紧耦合是 OK 的？&lt;/li&gt;
&lt;li&gt;一个系统要有什么特征才能适配云计算环境(Cloud Ready)？&lt;/li&gt;
&lt;li&gt;Does unity of design imply an aristocracy of architects?&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namesoa面向服务架构soa和微服务microservice相关问题a-toc&#34;&gt;&lt;a name=&#39;soa&#39;&gt;面向服务架构(SOA)和微服务(Microservice)相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;在 SOA 中，为什么长期存活的事务(Long-lived transation)不被看好，而 Saga 却被看好？&lt;/li&gt;
&lt;li&gt;SOA 和 MicroService 之间有什么区别？&lt;/li&gt;
&lt;li&gt;我们来谈谈 Web 服务的版本管理、版本兼容性、重大变更管理这些事情吧.&lt;/li&gt;
&lt;li&gt;在 saga 中事务和补偿操作(compensation operation)之间的区别是什么？在 SOA 中呢？&lt;/li&gt;
&lt;li&gt;微服务不能做得太&amp;quot;微&amp;rdquo;，你认为什么时候微服务太&amp;quot;微&amp;quot;了？&lt;/li&gt;
&lt;li&gt;MicroService 架构的优劣是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namesecurity安全相关问题a-toc&#34;&gt;&lt;a name=&#39;security&#39;&gt;安全相关问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;什么是双因素认证(Two Factor Authentication)？在一个已有的 Web 应用中，你如何实现这种机制？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namebillgates比尔盖茨式问题a-toc&#34;&gt;&lt;a name=&#39;billgates&#39;&gt;比尔盖茨式问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;如果你把一面镜子放在扫描仪上，会发生什么？&lt;/li&gt;
&lt;li&gt;假设有一个和你完全一样的克隆人，而他是你的上司，你愿意和他工作吗？&lt;/li&gt;
&lt;li&gt;现在请你面试一下我。&lt;/li&gt;
&lt;li&gt;为什么 Quora 上的回答会比 Yahoo Answer 上的回答好？&lt;/li&gt;
&lt;li&gt;对手是现代语言，你的任务是要为 Cobol 辩护，你会如何进行？&lt;/li&gt;
&lt;li&gt;10 年后的你是什么样子？&lt;/li&gt;
&lt;li&gt;假设你是我老板，我被解雇了。你会如何通知我？&lt;/li&gt;
&lt;li&gt;我想要重构一个系统，而你想要从头重写。我们来争论一下该怎么弄吧。然后我们反转角色，再争论一下。&lt;/li&gt;
&lt;li&gt;老板要你对公司撒谎，你的反应是什么？&lt;/li&gt;
&lt;li&gt;如果你可以穿越到以前，你会给年轻时候的你什么建议？&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;a-namesnippets代码示例问题a-toc&#34;&gt;&lt;a name=&#39;snippets&#39;&gt;代码示例问题:&lt;/a&gt; &lt;a href=&#34;#toc&#34;&gt;[↑]&lt;/a&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;这段 Javascript 函数的输出是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hookupevents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;button&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;addEventListener&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;click&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;关于类型擦除(Type Erasure)，这段 Java 代码的输出是什么？为什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;li&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Integer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;li&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// evaluates to true
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Equal&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;你能指出哪儿有内存泄漏吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Stack&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Stack&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DEFAULT_INITIAL_CAPACITY&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EmptyStackException&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * Ensure space for at least one more element, roughly
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * doubling the capacity each time the array needs to grow.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ensureCapacity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Arrays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;copyOf&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elements&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;if&lt;/code&gt;语句，或者更加通用点，条件表达式通常是过程式编程/命令式编程的形式。你能去掉这段代码中的&lt;code&gt;switch&lt;/code&gt;语句，用面向对象的方式来修改这段代码吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Formatter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Formatter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Service&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;doTheJob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theInput&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;askForPermission&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;FAIL&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;error&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;OK&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s%s&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theInput&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;theInput&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;你能去掉这里的&lt;code&gt;if&lt;/code&gt;语句，将它改成更加面向对象吗？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TheService&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FileHandler&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooRepository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TheService&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileHandler&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;FooRepository&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;fileHandler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;fooRepository&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Execute&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rewrittenUrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getXmlFileFromFileName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kd&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;executionId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fileHandler&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getExecutionIdFromFileName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;executionId&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rewrittenUrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;knownFoo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fooRepository&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getFooByXmlFileName&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rewrittenUrl&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;knownFoo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;knownFoo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DoThat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;如何重构这段代码？&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;HRESULT&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;S_OK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Operation1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Operation2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Operation3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Operation4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OPERATION4FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OPERATION3FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OPERATION2FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;OPERATION1FAILED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
