<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>实践案例 | Next-gen Tech Edu</title>
    <link>https://ng-tech.icu/books/devops-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B/</link>
      <atom:link href="https://ng-tech.icu/books/devops-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B/index.xml" rel="self" type="application/rss+xml" />
    <description>实践案例</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language>
    <image>
      <url>https://ng-tech.icu/media/sharing.png</url>
      <title>实践案例</title>
      <link>https://ng-tech.icu/books/devops-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B/</link>
    </image>
    
    <item>
      <title>典型系统</title>
      <link>https://ng-tech.icu/books/devops-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B/%E5%85%B8%E5%9E%8B%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://ng-tech.icu/books/devops-series/%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E5%AE%9E%E8%B7%B5%E6%A1%88%E4%BE%8B/%E5%85%B8%E5%9E%8B%E7%B3%BB%E7%BB%9F/</guid>
      <description>&lt;h1 id=&#34;典型的-devops-系统&#34;&gt;典型的 DevOps 系统&lt;/h1&gt;
&lt;h1 id=&#34;基于虚拟机的部署&#34;&gt;基于虚拟机的部署&lt;/h1&gt;
&lt;p&gt;
















  &lt;figure  &gt;
    &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
      &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://ww1.sinaimg.cn/large/007rAy9hly1g0krtkip0kj30cb0je3zq.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
    &lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;cicd&#34;&gt;CI/CD&lt;/h2&gt;
&lt;p&gt;• 所有代码工程能够自动化打包&lt;/p&gt;
&lt;p&gt;• 所有代码提交后能够自动构建编译检查以及单元测试任务&lt;/p&gt;
&lt;p&gt;• 每小时完成一次软件集成、部署以及核心功能的集成测试（API&amp;amp;UI）&lt;/p&gt;
&lt;p&gt;• 每天完成一次完整功能的集成测试（API&amp;amp;UI）&lt;/p&gt;
&lt;p&gt;• 每周完成一次 7x24 小时 Longrun 系统测试&lt;/p&gt;
&lt;p&gt;• 自动更新经过测试的 nightly build 到开发测试环境&lt;/p&gt;
&lt;p&gt;• 自动发布经过测试的 weekly build 到 Demo 环境&lt;/p&gt;
&lt;h3 id=&#34;自动化测试&#34;&gt;自动化测试&lt;/h3&gt;
&lt;p&gt;集成测试（Robot Framework），目前，我们在 Jenkins 中使用 Robot Framework 框架做集成测试。Robot Framework（以下简称 RF）是一个基于 Python 的、可扩展的、关键字驱动的测试自动化框架。&lt;/p&gt;
&lt;p&gt;选用 RF 的原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一致性：目前公司的 UI 自动化测试使用的就是 RF 框架，RF 框架也完全有能力做集成测试，因此使用 RF 框架做集成测试，可以降低学习成本，提高可维护性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;复用性：在安装了 Robot-Framework-JMeter-Library 后，RF 可以运行 JMeter 脚本，并且将 JMeter 运行结果转为 Html 格式。公司目前性能测试用的就是 JMeter，对于相同场景，只要小幅修改 JMeter 脚本即可将其复用到集成测试上面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;选用 RF 也存在一些问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果不复用 JMeter 脚本，编写的 API 测试用例的成本非常高。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RF 对于变量类型的规定堪称僵硬（当然，这么规定带来的好处是方便类型检测），RF 中对于字典类型的创建非常麻烦（嵌套的字典实例如下），对于我们公司 API 请求中携带大量参数的情况，只能创建关键字来解决，不管是采取 RF 自带创建字典的方法，还是创建关键字的方法，都比较浪费时间（因为难以复用）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;RF 可以轻松扩展关键字，也因此可能带来乱扩展关键字的问题，导致测试用例可读性和可维护性差的问题。在 RF 中，关键字其实就是 Python/Java 的类方法，因此扩展起来非常容易，但是关键字一旦多起来，一个同事写的测试用例，其他人（甚至他自己过了一段时间）维护就非常麻烦（需要回去看关键字是如何规定的）。因此需要严格规定关键字的创建规范是一件值得深入讨论的事情。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自服务自运维&#34;&gt;自服务自运维&lt;/h2&gt;
&lt;p&gt;公司所有人员，都可以通过一个统一门户 Portal，自助申请各种类型的 IaaS 资源，如：x86 物理服务器、vSphere 虚拟机、OpenStack 虚拟机、Kubernetes 上的容器服务，以及 Aliyun、AWS、Azure 等公有云上的云资源；自助申请日常开发所需的软件应用，如：Nginx、Tomcat、MySQL、RabbitMQ，以及 SmartCMP 等。&lt;/p&gt;
&lt;h1 id=&#34;基于容器的部署解决方案&#34;&gt;基于容器的部署解决方案&lt;/h1&gt;
</description>
    </item>
    
  </channel>
</rss>
