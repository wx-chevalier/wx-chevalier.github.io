<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>监控系统设计 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link><atom:link href="https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/index.xml" rel="self" type="application/rss+xml"/><description>监控系统设计</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>监控系统设计</title><link>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link></image><item><title>采集设计</title><link>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E9%87%87%E9%9B%86%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E9%87%87%E9%9B%86%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h1 id="埋点与侵入式">埋点与侵入式&lt;/h1>
&lt;p>对于应用程序错误数、应用程序请求量、应用平均响应时间的监控，这里是一个分水岭，因为这里想要做到无侵入的效果，需要做一些额外的工作，否则只能编写大量的“埋点”代码。比如，是不是有一个网关来统一进行流量分发？是不是有一个统一的 RPC 框架、数据库访问框架等等。如果有这样的统一模块就好办了，直接在这些模块里增加监控功能。&lt;/p>
&lt;h1 id="数据存储">数据存储&lt;/h1>
&lt;p>关于采集到的数据如何存储，主流的选择是将数据写入到一个时序数据库中。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Prometheus 提供了丰富的数据模型和查询语句，容易上手，很容易集成到现有的环境中，但是 Prometheus 的集群和 HA 架构并不成熟，需要额外的开发，并不适合。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>InfluxDB 是在 Prometheus 之后才提出的，并且提供商业的伸缩和集群化服务，相比 Prometheus 的 metrics 存储，InfluxDB 还能处理事件类型的数据，对于大部分公司而言，商业化基本不会考虑。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>OpenTSDB 是一个基于 Hadoop 和 Hbase 的分布式事件序列数据库，相比 Prometheus 和 InfluxDB，OpenTSDB 的横向扩缩容很容易 (需要有丰富的 Hadoop/HBase 维护经验), 同时官方 Open-falcon 支持 OpenTSDB。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>在 Prometheus 中收集所有指标后，你可以使用 Grafana 可视化这些指标。关于数据展示的选型，在没有自研能力的情况下，Grafana 是不二选择。Grafana 的告警功能强大方便，同时支持钉钉，Webhook 等，满足公司所有的需求。与此同时，我们将 Grafana 和 Docker 技术结合，实现了 Grafana 高可用、自愈和无限扩展能力。&lt;/p></description></item><item><title>存储设计</title><link>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E5%AD%98%E5%82%A8%E8%AE%BE%E8%AE%A1/</guid><description>&lt;h1 id="数据存储设计">数据存储设计&lt;/h1></description></item><item><title>监控系统对比</title><link>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/devops-series/3.%E7%9B%91%E6%8E%A7%E5%91%8A%E8%AD%A6/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E5%AF%B9%E6%AF%94/</guid><description>&lt;h1 id="监控系统对比">监控系统对比&lt;/h1>
&lt;p>开源监控系统也经历了非常多的迭代：&lt;/p>
&lt;ul>
&lt;li>老牌监控系统：Zabbix, Nagios, Cacti, Ganglia, Garafana&lt;/li>
&lt;li>新型监控系统：Open-Falcon, Prometheus&lt;/li>
&lt;/ul>
&lt;h1 id="zabbix">Zabbix&lt;/h1>
&lt;p>Zabbix 是由 Alexei Vladishev 开源的分布式监控系统，支持多种采集方式和采集客户端，同时支持 SNMP、IPMI、JMX、Telnet、SSH 等多种协议，它将采集到的数据存放到数据库中，然后对其进行分析整理，如果符合告警规则，则触发相应的告警。Zabbix 1998 年诞生，核心组件采用 C 语言开发，Web 端采用 PHP 开发。它属于老牌监控系统中的优秀代表，监控功能很全面，使用也很广泛，差不多有 70%左右的互联网公司都曾使用过 Zabbix 作为监控解决方案。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/08/09/a7wjj1.png" alt="Zabbix 截图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Zabbix Server 将收集的监控数据存储到 Zabbix Database 中。Zabbix Database 支持常用的关系型数据库，例如 MySQL、PostgreSQL、Oracle 等，默认 MySQL。Zabbix Web 页面（PHP 编写）负责数据查询。Zabbix 由于使用了关系型数据存储时序数据，所以在监控大规模集群时常常在数据存储方面捉襟见肘。为此 Zabbix 4.2 版本后也开始支持时序数据存储，不过目前还不成熟。Zabbix 的架构设计如下：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/08/09/a709AO.png" alt="Zabbix 架构图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>**Zabbix Server：**核心组件，C 语言编写，负责接收 Agent、Proxy 发送的监控数据，也支持 JMX、SNMP 等多种协议直接采集数据。同时，它还负责数据的汇总存储以及告警触发等。&lt;/li>
&lt;li>**Zabbix Proxy：**可选组件，对于被监控机器较多的情况下，可使用 Proxy 进行分布式监控，它能代理 Server 收集部分监控数据，以减轻 Server 的压力。&lt;/li>
&lt;li>**Zabbix Agentd：**部署在被监控主机上，用于采集本机的数据并发送给 Proxy 或者 Server，它的插件机制支持用户自定义数据采集脚本。Agent 可在 Server 端手动配置，也可以通过自动发现机制被识别。数据收集方式同时支持主动 Push 和被动 Pull 两种模式。&lt;/li>
&lt;li>**Database：**用于存储配置信息以及采集到的数据，支持 MySQL、Oracle 等关系型数据库。同时，最新版本的 Zabbix 已经开始支持时序数据库，不过成熟度还不高。&lt;/li>
&lt;li>**Web Server：**Zabbix 的 GUI 组件，PHP 编写，提供监控数据的展现和告警配置。&lt;/li>
&lt;/ul>
&lt;h2 id="优势">优势&lt;/h2>
&lt;ul>
&lt;li>**产品成熟：**由于诞生时间长且使用广泛，拥有丰富的文档资料以及各种开源的数据采集插件，能覆盖绝大部分监控场景。&lt;/li>
&lt;li>**采集方式丰富：**支持 Agent、SNMP、JMX、SSH 等多种采集方式，以及主动和被动的数据传输方式。&lt;/li>
&lt;li>&lt;strong>较强的扩展性&lt;/strong>：支持 Proxy 分布式监控，有 agent 自动发现功能，插件式架构支持用户自定义数据采集脚本。&lt;/li>
&lt;li>&lt;strong>配置管理方便&lt;/strong>：能通过 Web 界面进行监控和告警配置，操作方便，上手简单。&lt;/li>
&lt;/ul>
&lt;h2 id="缺陷">缺陷&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>性能瓶颈&lt;/strong>：机器量或者业务量大了后，关系型数据库的写入一定是瓶颈，官方给出的单机上限是 5000 台，个人感觉达不到，尤其现在应用层的指标越来越多。虽然最新版已经开始支持时序数据库，不过成熟度还不高。&lt;/li>
&lt;li>**应用层监控支持有限：**如果想对应用程序做侵入式的埋点和采集（比如监控线程池或者接口性能），zabbix 没有提供对应的 sdk，通过插件式的脚本也能曲线实现此功能，个人感觉 zabbix 就不是做这个事的。&lt;/li>
&lt;li>&lt;strong>数据模型不强大&lt;/strong>：不支持 tag，因此没法按多维度进行聚合统计和告警配置，使用起来不灵活。&lt;/li>
&lt;li>&lt;strong>方便二次开发难度大&lt;/strong>：Zabbix 采用的是 C 语言，二次开发往往需要熟悉它的数据表结构，基于它提供的 API 更多只能做展示层的定制。&lt;/li>
&lt;/ul>
&lt;h1 id="elk-监控生态">ELK 监控生态&lt;/h1>
&lt;p>ELK (Elasticsearch,Logstash,Kibana) 是 Elastic 公司提供的三个开源组件。在日常工作中，我们需要进行日志分析场景：直接对日志文件进行 grep、awk 等正则操作，获取我们想要的信息。在大规模的场景中，日志文件分布在不同的服务器上，且文件非常大，逐台操作性能非常低。比如 Nginx 日志，Mysql 慢查询日志，应用 log 日志等。ELK 提供一整套的解决方案，可以帮助我们快速全站查询。&lt;/p>
&lt;p>下图是 Mysql 慢查询的截图，通过 Python 脚本，可以实时读取 Mysql 慢查询日志，并写入 ES，方便查看线上问题。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0f3f3fcn3j30gm07qq3f.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>下图是服务器的 dashboard，通过模糊匹配，可以快速查询相关服务器组的性能指标。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://ww1.sinaimg.cn/large/007rAy9hgy1g0f3f3fcn3j30gm07qq3f.jpg" alt="" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h1 id="open-falcon">Open-Falcon&lt;/h1>
&lt;p>Open-Falcon 是小米开源的监控系统，灵活的数据采集，水平扩展能力以及高效的告警策略帮助我们快速监控服务端的信息。小米初期也使用的 Zabbix 进行监控，但是机器量和业务量上来后，Zabbix 就有些力不从心了。因此，后来自主研发了 Open-Falcon，在架构设计上吸取了 Zabbix 的经验，同时很好地解决了 Zabbix 的诸多痛点。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/08/09/a70x2j.md.png" alt="Open Falcon 截图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Open-Falcon 用 Go 语言开发而成，包括小米、滴滴、美团等在内的互联网公司都在使用它，是一款灵活、可扩展并且高性能的监控方案，主要组件包括了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Falcon-agent：用 Go 语言开发的 Daemon 程序，运行在每台 Linux 服务器上，用于采集主机上的各种指标数据，主要包括 CPU、内存、磁盘、文件系统、内核参数、Socket 连接等，目前已经支持 200 多项监控指标。并且，Agent 支持用户自定义的监控脚本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Hearthbeat server：简称 HBS 心跳服务，每个 Agent 都会周期性地通过 RPC 方式将自己的状态上报给 HBS，主要包括主机名、主机 IP、Agent 版本和插件版本，Agent 还会从 HBS 获取自己需要执行的采集任务和自定义插件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Transfer：负责接收 Agent 发送的监控数据，并对数据进行整理，在过滤后通过一致性 Hash 算法发送到 Judge 或者 Graph。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Graph：RRD 数据上报、归档、存储的组件。Graph 在收到数据以后，会以 RRDtool 的数据归档方式来存储，同时提供 RPC 方式的监控查询接口。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Judge：告警模块，Transfer 转发到 Judge 的数据会触发用户设定的告警规则，如果满足，则会触发邮件、微信或者回调接口。这里为了避免重复告警引入了 Redis 暂存告警，从而完成告警的合并和抑制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dashboard：面向用户的监控数据查询和告警配置界面。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s2.ax1x.com/2019/10/02/udT9qP.jpg" alt="Open Falcon 组件架构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;h2 id="优势-1">优势&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>自动采集能力&lt;/strong>：Falcon-agent 能自动采集服务器的 200 多个基础指标（比如 CPU、内存等），无需在 server 上做任何配置，这一点可以秒杀 Zabbix.&lt;/li>
&lt;li>&lt;strong>强大的存储能力&lt;/strong>：底层采用 RRDTool，并且通过一致性 hash 进行数据分片，构建了一个分布式的时序数据存储系统，可扩展性强。&lt;/li>
&lt;li>**灵活的数据模型：**借鉴 OpenTSDB，数据模型中引入了 tag，这样能支持多维度的聚合统计以及告警规则设置，大大提高了使用效率。&lt;/li>
&lt;li>**插件统一管理：**Open-Falcon 的插件机制实现了对用户自定义脚本的统一化管理，可通过 HeartBeat Server 分发给 agent，减轻了使用者自主维护脚本的成本。&lt;/li>
&lt;li>&lt;strong>个性化监控支持&lt;/strong>：基于 Proxy-gateway，很容易通过自主埋点实现应用层的监控（比如监控接口的访问量和耗时）和其他个性化监控需求，集成方便。&lt;/li>
&lt;/ul>
&lt;h2 id="缺陷-1">缺陷&lt;/h2>
&lt;ul>
&lt;li>**整体发展一般：**社区活跃度不算高，同时版本更新慢，有些大厂是基于它的稳定版本直接做二次开发的，关于以后的前景其实有点担忧。&lt;/li>
&lt;li>&lt;strong>UI 不够友好&lt;/strong>：对于业务线的研发来说，可能只想便捷地完成告警配置和业务监控，但是它把机器分组、策略模板、模板继承等概念全部暴露在 UI 上，感觉在围绕这几个概念设计 UI，理解有点费劲。&lt;/li>
&lt;li>**安装比较复杂：**个人的亲身感受，由于它是从小米内部衍生出来的，虽然去掉了对小米内部系统的依赖，但是组件还是比较多，如果对整个架构不熟悉，安装很难一蹴而就。&lt;/li>
&lt;/ul>
&lt;h1 id="prometheus">Prometheus&lt;/h1>
&lt;p>Prometheus 是一套开源的监控、报警、时间序列数据库的组合；它的灵感来自谷歌的 Borgmon，一个实时的时间序列监控系统，Borgmon 使用这些时间序列数据来识别问题并发出警报。Prometheus 最初由前谷歌 SRE Matt T. Proud 开发，并转为一个研究项目。在 Proud 加入 SoundCloud 之后，他与另一位工程师 Julius Volz 合作开发了 Prometheus。后来其他开发人员陆续加入了这个项目，并在 SoundCloud 内部继续开发，最终于 2015 年 1 月公开发布。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/08/09/a7BldK.md.png" alt="Prometheus 截图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Prometheus 的优势在于其易于安装使用，外部依赖较少；并且直接按照分布式、微服务架构模式进行设计，支持服务自动化发现与代码集成。Prometheus 能够自定义多维度的数据模型，内置强大的查询语句，搭配其丰富的社区扩展，能够轻松实现数据可视化。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://i.postimg.cc/g0SDCRhK/image.png" alt="Prometheus 生态系统" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>Prometheus 由两个部分组成，一个是监控报警系统，另一个是自带的时序数据库（TSDB）。上图是 Prometheus 整体架构图，左侧是各种符合 Prometheus 数据格式的 exporter，除此之外为了支持推动数据类型的 Agent，可以通过 Pushgateway 组件，将 Push 转化为 Pull。Prometheus 甚至可以从其它的 Prometheus 获取数据，组建联邦集群。Prometheus 的基本原理是通过 HTTP 周期性抓取被监控组件的状态，任意组件只要提供对应的 HTTP 接口并且符合 Prometheus 定义的数据格式，就可以接入 Prometheus 监控。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/08/09/a7BGJe.md.png" alt="Prometheus 架构图" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>**Prometheus Server：**核心组件，用于收集、存储监控数据。它同时支持静态配置和通过 Service Discovery 动态发现来管理监控目标，并从监控目标中获取数据。此外，Prometheus Server 也是一个时序数据库，它将监控数据保存在本地磁盘中，并对外提供自定义的 PromQL 语言实现对数据的查询和分析。&lt;/li>
&lt;li>**Exporter：**用来采集数据，作用类似于 agent，区别在于 Prometheus 是基于 Pull 方式拉取采集数据的，因此，Exporter 通过 HTTP 服务的形式将监控数据按照标准格式暴露给 Prometheus Server，社区中已经有大量现成的 Exporter 可以直接使用，用户也可以使用各种语言的 client library 自定义实现。&lt;/li>
&lt;li>**Push gateway：**主要用于瞬时任务的场景，防止 Prometheus Server 来 pull 数据之前此类 Short-lived jobs 就已经执行完毕了，因此 job 可以采用 push 的方式将监控数据主动汇报给 Push gateway 缓存起来进行中转。&lt;/li>
&lt;li>**Alert Manager：**当告警产生时，Prometheus Server 将告警信息推送给 Alert Manager，由它发送告警信息给接收方。&lt;/li>
&lt;li>**Web UI：**Prometheus 内置了一个简单的 web 控制台，可以查询配置信息和指标等，而实际应用中我们通常会将 Prometheus 作为 Grafana 的数据源，创建仪表盘以及查看指标。&lt;/li>
&lt;/ul>
&lt;h2 id="优势-2">优势&lt;/h2>
&lt;ul>
&lt;li>**轻量管理：**架构简单，不依赖外部存储，单个服务器节点可直接工作，二进制文件启动即可，属于轻量级的 Server，便于迁移和维护。&lt;/li>
&lt;li>&lt;strong>较强的处理能力&lt;/strong>：监控数据直接存储在 Prometheus Server 本地的时序数据库中，单个实例可以处理数百万的 metrics。&lt;/li>
&lt;li>**灵活的数据模型：**同 Open-Falcon，引入了 tag，属于多维数据模型，聚合统计更方便。&lt;/li>
&lt;li>**强大的查询语句：**PromQL 允许在同一个查询语句中，对多个 metrics 进行加法、连接和取分位值等操作。&lt;/li>
&lt;li>&lt;strong>很好地支持云环境&lt;/strong>：能自动发现容器，同时 K8s 和 etcd 等项目都提供了对 Prometheus 的原生支持，是目前容器监控最流行的方案。&lt;/li>
&lt;/ul>
&lt;h2 id="缺陷-2">缺陷&lt;/h2>
&lt;ul>
&lt;li>**功能不够完善：**Prometheus 从一开始的架构设计就是要做到简单，不提供集群化方案，长期的持久化存储和用户管理，而这些是企业变大后所必须的特性，目前要做到这些只能在 Prometheus 之上进行扩展。&lt;/li>
&lt;li>&lt;strong>网络规划变复杂&lt;/strong>：由于 Prometheus 采用的是 Pull 模型拉取数据，意味着所有被监控的 endpoint 必须是可达的，需要合理规划网络的安全配置。&lt;/li>
&lt;/ul>
&lt;h1 id="综合对比">综合对比&lt;/h1>
&lt;p>从开发语言上看，为了应对高并发和快速迭代的需求，监控系统的开发语言已经慢慢从 C 语言转移到 Go。不得不说，Go 凭借简洁的语法和优雅的并发，在 Java 占据业务开发，C 占领底层开发的情况下，准确定位中间件开发需求，在当前开源中间件产品中被广泛应用。&lt;/p>
&lt;p>从系统成熟度上看，Zabbix 是老牌的监控系统：Zabbix 是在 1998 年出现的，系统功能比较稳定，成熟度较高。而 Prometheus 和 Open-Falcon 都是最近几年才诞生的，虽然功能还在不断迭代更新，但站在巨人的肩膀之上，在架构设计上借鉴了很多老牌监控系统的经验。&lt;/p>
&lt;p>从系统扩展性方面看，Zabbix 和 Open-Falcon 都可以自定义各种监控脚本，并且 Zabbix 不仅可以做到主动推送，还可以做到被动拉取，Prometheus 则定义了一套监控数据规范，并通过各种 exporter 扩展系统采集能力。&lt;/p>
&lt;p>从数据存储方面来看，Zabbix 采用关系数据库保存，这极大限制了 Zabbix 采集的性能，Open-Falcon 采用 RDD 数据存储，并且可以对接到 OpenTSDB，而 Prometheus 自研一套高性能的时序数据库，在 V3 版本可以达到每秒千万级别的数据存储，通过对接第三方时序数据库扩展历史数据的存储。&lt;/p>
&lt;p>从配置和维护的复杂度上看，Prometheus 只有一个核心 server 组件，一条命令便可以启动，相比而言，其他系统配置相对麻烦，尤其是 Open-Falcon。&lt;/p>
&lt;p>从社区活跃度上看，目前 Zabbix 社区活跃度比较低，Open-Falcon 虽然也比较活跃，但基本都是国内的公司参与，Prometheus 在这方面占据绝对优势，社区活跃度最高，并且受到 CNCF 的支持，后期的发展值得期待。&lt;/p>
&lt;p>从容器支持角度看，由于 Zabbix 出现得比较早，当时容器还没有诞生，自然对容器的支持也比较差。Open-Falcon 虽然提供了容器的监控，但支持力度有限。Prometheus 的动态发现机制，不仅可以支持 Swarm 原生集群，还支持 Kubernetes 容器集群的监控，是目前容器监控最好解决方案。Zabbix 在传统监控系统中，尤其是在服务器相关监控方面，占据绝对优势。伴随着容器的发展，Prometheus 开始成为主导及容器监控方面的标配，并且在未来可见的时间内被广泛应用。总体来说，对比各种监控系统的优劣，Prometheus 可以说是目前监控领域最锋利的“瑞士军刀”了。&lt;/p></description></item></channel></rss>