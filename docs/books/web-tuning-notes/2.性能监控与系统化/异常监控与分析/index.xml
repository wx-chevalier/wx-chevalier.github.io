<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>异常监控与分析 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/</link><atom:link href="https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml"/><description>异常监控与分析</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>异常监控与分析</title><link>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/</link></image><item><title>常见异常</title><link>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</guid><description>&lt;h1 id="常见异常">常见异常&lt;/h1>
&lt;h1 id="xxx-is-undefined">‘xxx’ is undefined&lt;/h1>
&lt;p>造成 &lt;code>‘xxx’ is undefined&lt;/code> 的主要原因有两种：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>其实大家自己写代码的时候，现在各种 Lint 工具都可以帮我们规避掉 &lt;code>‘xxx’ is undefined&lt;/code> 这类问题，但为什么还是会出现呢？常见的一个情况就是后台接口返回的数据是 JSON 格式，加上某个后端服务一旦出现了问题，导致返回的数据异常。这是遇到的最多的一个情况。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>大家现在的应用里面应该都有分包的工作，一般都会把一些主体的包单独拆出来，一旦这种包加载失败，就会出现 &lt;code>‘xxx’ is undefined&lt;/code> 。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="数据校验">数据校验&lt;/h2>
&lt;p>后端接口的数据不可信，该做的判断一定不能少。在引入一些其他的优化方案的时候，要考虑一下它的副作用。可能这个问题不是你导致的，但是别人的问题可能会导致你的问题！&lt;/p>
&lt;h2 id="cdn-劫持">CDN 劫持&lt;/h2>
&lt;p>我们有个业务在没有任何发布的情况下，然后它的页面加载的失败率从 0.5% 到了 10%。我们就找 CDN 的同学去看哪里出了问题，CDN 也没异常。后来几经波折，多方定位，发现某一个节点上面的文件指纹和主栈的 CDN 节点的文件指纹是不一样的。也就是说这个节点的 CDN 文件被篡改了，被劫持了。大家知道 CDN 实际上是主栈要推到各个 CDN 栈上去的。虽然在我们的页面上面是走 HTTPS，但是从主栈把资源推到各个 CDN 上的时候，为了追求速度是不会去走 HTTPS 的，而是走 HTTP。其实这就给了一些运营商可趁之机，在这个阶段就把 CDN 上的资源做了一个篡改，导致资源上了 HTTPS 还是被劫持。&lt;/p>
&lt;p>当然，我们肯定知道会存在这种劫持情况。所以很早就加了一个 SRI 的方案，做防劫持的处理。简单讲一下，比如 SRI 会在 Script 标签上面有一个指纹，当你通过构建工具生成一个 JS 文件的加密后的一个指纹，然后在服务器下载下来的文件上面，也会对那个文件做一个指纹，然后再和这个标签上面的文件做指纹的比对。如果发现不一样，就会认为这个文件被篡改了，是被劫持的。当然防劫持的目的达到了，但同时也带来了新的问题——白屏。因为浏览器认为资源不可信，就不会去执行 JS 了，不会执行这些 JS 就不会去做任何异步尝试，也就说 JS 最终还是被当作加载失败来处理了。&lt;/p>
&lt;p>当 SRI 失败的时候，还是会触发 Script Error 事件。所以我们要做一些补充的方案，如果 Script 触发 onError，我们会向主栈拉取一次 JS 资源，不是 CDN 节点上的 JS，然后拉取主栈的 JS 的话，我们会取他前头部的几个字节以及尾部的字节，和我们现有的 CDN 上的资源做一个对比，全文对比太长了，我们做前后的这种字符检测就可以了。如果检查字符不一样，我们就直接使用主栈的资源进行加载，然后再走到上报的平台。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">script&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">type&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;text/javascript&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">src&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;...&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">integrity&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;sha256-xxx sha384-xxx&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">crossorigin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;anonymous&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">onerror&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;loadScriptError.call(this, event)&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="na">onsuccess&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;loadScriptSuccess&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;gt;&amp;lt;/&lt;/span>&lt;span class="nt">script&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="script-error">Script Error&lt;/h1>
&lt;ul>
&lt;li>iOS 中跨域的异步脚本的报错信息在 window.onError 中是捕获不到的。&lt;/li>
&lt;/ul>
&lt;p>举个例子，在 a 域名的页面下引入了 b 域名的脚本，b 域名的脚本在执行 setTimeout 中的一段代码，出现了异常。window.onError 是无法获取到这个错误的。目前针对这种情况的解决方法，只能对异步脚本中的代码手动地抛出错误进行捕获。&lt;/p>
&lt;ul>
&lt;li>通过 native 代码执行的脚本报错，是无法被捕获的。&lt;/li>
&lt;/ul>
&lt;p>对于 Hybird 的 APP 中一些复杂的页面，客户端都会去调一些我们 JS 的代码，执行一些能力。客户端同学可能网上搜了一段代码，并不会告诉你这段代码有什么，然后本地跑执行没问题，所以他就直接加上去了。但比如说他回调你页面里面的一个接口，windows 怎么 xxx 执行一下。但其实可能你代码有什么问题，或者是他在你的代码声明之前就执行了，这个时候实际上也会有报错且没有 Script Error，所以这种问题你就需要联合客户端这边，要对他们执行的这种 JS 代码做一些保护，常见的就是执行前，先对 JS 回调进行检查。&lt;/p>
&lt;ul>
&lt;li>离线缓存&lt;/li>
&lt;/ul>
&lt;p>因为一些离线缓存实现的问题不太对，现在一些大的 App 里面，都有做这种离线缓存功能。理论上来说，把接口拦截掉，返回一个本地的资源，当然资源的 Header 是客户端来设置的，这个时候不会设置跨域头，也会报 Script Error 。为了解决这个问题，我们做了一个临时策略，把离线包里面所有的资源都换成主域的资源，解决历史版本中的问题，同时推动客户端添加缓存头。&lt;/p></description></item><item><title>错误捕获</title><link>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/%E9%94%99%E8%AF%AF%E6%8D%95%E8%8E%B7/</guid><description>&lt;h1 id="异常处理">异常处理&lt;/h1>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/mEV6YLeILTQfghGW6lMWtw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/mEV6YLeILTQfghGW6lMWtw&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://mp.weixin.qq.com/s/KYwYoshrUWbwEgjB0HbF0Q" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/KYwYoshrUWbwEgjB0HbF0Q&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>监控体系</title><link>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-notes/2.%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7%E4%B8%8E%E7%B3%BB%E7%BB%9F%E5%8C%96/%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7%E4%B8%8E%E5%88%86%E6%9E%90/%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB/</guid><description>&lt;h1 id="监控体系">监控体系&lt;/h1></description></item></channel></rss>