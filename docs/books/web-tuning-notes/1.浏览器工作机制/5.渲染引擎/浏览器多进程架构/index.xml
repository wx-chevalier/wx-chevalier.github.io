<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>浏览器多进程架构 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/web-tuning-notes/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/5.%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</link><atom:link href="https://ng-tech.icu/books/web-tuning-notes/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/5.%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/index.xml" rel="self" type="application/rss+xml"/><description>浏览器多进程架构</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>浏览器多进程架构</title><link>https://ng-tech.icu/books/web-tuning-notes/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/5.%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</link></image><item><title>Chrome 多进程架构</title><link>https://ng-tech.icu/books/web-tuning-notes/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/5.%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/chrome-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-notes/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/5.%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/chrome-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</guid><description>&lt;h1 id="chrome-多进程架构">Chrome 多进程架构&lt;/h1>
&lt;p>不同的浏览器使用不同的架构，下面主要以 Chrome 为例，介绍浏览器的多进程架构。在 Chrome 中，主要的进程有 4 个：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>进程&lt;/th>
&lt;th>负责的工作&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Browser&lt;/td>
&lt;td>负责浏览器的“Chrome”部分，包括导航栏，书签，前进和后退按钮。同时这个进程还会控制那些我们看不见的部分，包括网络请求的发送以及文件的读写。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Renderer&lt;/td>
&lt;td>负责 tab 内和网页展示相关的所有工作。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Plugin&lt;/td>
&lt;td>控制网页使用的所有插件，例如 flash 插件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>GPU&lt;/td>
&lt;td>负责独立于其它进程的 GPU 任务。它之所以被独立为一个进程是因为它要处理来自于不同 tab 的渲染请求并把它在同一个界面上画出来。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/11/06/BWTrTO.md.png" alt="Chrome 多进程间构成" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>首先，当我们是要浏览一个网页，我们会在浏览器的地址栏里输入 URL，这个时候 Browser Process 会向这个 URL 发送请求，获取这个 URL 的 HTML 内容，然后将 HTML 交给 Renderer Process，Renderer Process 解析 HTML 内容，解析遇到需要请求网络的资源又返回来交给 Browser Process 进行加载，同时通知 Browser Process，需要 Plugin Process 加载插件资源，执行插件代码。解析完成后，Renderer Process 计算得到图像帧，并将这些图像帧交给 GPU Process，GPU Process 将其转化为图像显示屏幕。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/11/06/BWHDiD.md.png" alt="Chrome 多进程间通信" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>除了上面列出来的进程，Chrome 还有很多其他进程在工作，例如扩展进程（Extension Process）和工具进程（utility process）。如果你想看一下你的 Chrome 浏览器现在有多少个进程在跑可以点击浏览器右上角的更多按钮，选择更多工具和任务管理器。&lt;/p>
&lt;h2 id="多进程架构的好处">多进程架构的好处&lt;/h2>
&lt;p>当今 Web 应用中，HTML，JavaScript 和 CSS 日益复杂，这些跑在渲染引擎的代码，频繁的出现 BUG，而有些 BUG 会直接导致渲染引擎崩溃，多进程架构使得每一个渲染引擎运行在各自的进程中，相互之间不受影响，也就是说，当其中一个页面崩溃挂掉之后，其他页面还可以正常的运行不收影响。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/11/06/BWq1gJ.md.png" alt="各进程间独立" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>更高的安全性和沙盒性（sanboxing）。渲染引擎会经常性的在网络上遇到不可信、甚至是恶意的代码，它们会利用这些漏洞在你的电脑上安装恶意的软件，针对这一问题，浏览器对不同进程限制了不同的权限，并为其提供沙盒运行环境，使其更安全更可靠&lt;/p>
&lt;p>更高的响应速度。在单进程的架构中，各个任务相互竞争抢夺 CPU 资源，使得浏览器响应速度变慢，而多进程架构正好规避了这一缺点。&lt;/p>
&lt;h2 id="浏览器的进程模式与网站隔离site-isolation">浏览器的进程模式与网站隔离（Site Isolation）&lt;/h2>
&lt;p>为了节省内存，Chrome 提供了四种进程模式（Process Models），不同的进程模式会对 tab 进程做不同的处理。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Process-per-site-instance&lt;/strong> (default) - 同一个 &lt;strong>site-instance&lt;/strong> 使用一个进程&lt;/li>
&lt;li>&lt;strong>Process-per-site -&lt;/strong> 同一个 &lt;strong>site&lt;/strong> 使用一个进程&lt;/li>
&lt;li>&lt;strong>Process-per-tab -&lt;/strong> 每个 tab 使用一个进程&lt;/li>
&lt;li>&lt;strong>Single process -&lt;/strong> 所有 tab 共用一个进程&lt;/li>
&lt;/ul>
&lt;p>这里需要给出 site 和 site-instance 的定义：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>site&lt;/strong> 指的是相同的 registered domain name(如：google.com，bbc.co.uk)和 scheme (如：https://)。比如 a.baidu.com 和 b.baidu.com 就可以理解为同一个 site（注意这里要和 Same-origin policy 区分开来，同源策略还涉及到子域名和端口）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>site-instance&lt;/strong> 指的是一组 &lt;strong>connected pages from the same site&lt;/strong>，这里 &lt;strong>connected&lt;/strong> 的定义是 &lt;strong>can obtain references to each other in script code&lt;/strong> 怎么理解这段话呢。满足下面两中情况并且打开的新页面和旧页面属于上面定义的同一个 site，就属于同一个 &lt;strong>site-instance&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>用户通过&lt;code>&amp;lt;a target=&amp;quot;_blank&amp;quot;&amp;gt;&lt;/code>这种方式点击打开的新页面&lt;/li>
&lt;li>JS 代码打开的新页面（比如 &lt;code>window.open&lt;/code>)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>首先是 Single process，顾名思义，单进程模式，所有 tab 都会使用同一个进程。接下来是 Process-per-tab，也是顾名思义，每打开一个 tab，会新建一个进程。而对于 Process-per-site，当你打开 a.baidu.com 页面，在打开 b.baidu.com 的页面，这两个页面的 tab 使用的是共一个进程，因为这两个页面的 site 相同，而如此一来，如果其中一个 tab 崩溃了，而另一个 tab 也会崩溃。&lt;/p>
&lt;p>Process-per-site-instance 是最重要的，因为这个是 Chrome 默认使用的模式，也就是几乎所有的用户都在用的模式。当你打开一个 tab 访问 a.baidu.com，然后再打开一个 tab 访问 b.baidu.com，这两个 tab 会使用两个进程。而如果你在 a.baidu.com 中，通过 JS 代码打开了 b.baidu.com 页面，这两个 tab 会使用同一个进程。&lt;/p>
&lt;p>Process-per-site-instance 兼容了性能与易用性，是一个比较中庸通用的模式。相较于 Process-per-tab，能够少开很多进程，就意味着更少的内存占用；相较于 Process-per-site，能够更好的隔离相同域名下毫无关联的 tab，更加安全。&lt;/p></description></item><item><title>Edge 多进程架构</title><link>https://ng-tech.icu/books/web-tuning-notes/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/5.%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/edge-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/web-tuning-notes/1.%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/5.%E6%B8%B2%E6%9F%93%E5%BC%95%E6%93%8E/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/edge-%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%9E%B6%E6%9E%84/</guid><description>&lt;h1 id="edge-多进程体系结构">Edge 多进程体系结构&lt;/h1>
&lt;p>Edge 的进程主要划分为以下类别：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>浏览器进程（Browser process）：这是主要的进程，它帮助管理窗口和标签，并控制浏览器框架，如地址栏和前进和后退按钮。它还可以对网络请求和文件访问等实用程序的特权访问进行路由。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>渲染进程（Renderer processes）：这些控件通过执行网站提供的代码来控制网站如何在标签页中渲染。它们处理 HTML、CSS、JavaScript、图像等。每个渲染器进程的资源使用情况都取决于所托管的内容。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>GPU 进程（GPU process）：该进程负责与 GPU（图形处理单元）进行通信并处理所有 GPU 任务。GPU 是一种硬件，可以快速执行与图形相关的计算，并将输出发送到显示器以进行显示，现代浏览器使用 GPU 来快速渲染网页。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>实用程序进程（Utility processes）：音频播放、网络服务、视频采集、数据解码、收藏管理器都由这些进程来处理，这样 Microsoft Edge 就可以控制和审核这些资源的访问，协调全局系统资源的使用。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>插件进行和扩展程序进程（Plug-in processes and extension processes）：插件进程包含活动插件，例如 Adobe Flash，而扩展进程包含活动扩展。每个进程执行由插件或扩展提供的代码，每个进程的资源使用情况根据所提供的代码而不同。每个进程也有允许插件或扩展与浏览器和渲染器进程通信的代码。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Crashpad 处理程序进程（Crashpad handler process）：这可以跟踪 Microsoft Edge 中不同进程的健康状况。如果 Microsoft Edge 崩溃，这个过程将帮助浏览器捕获并将崩溃报告传输到微软服务器，我们使用这些崩溃报告来寻找和修复崩溃。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>现在我们已经介绍了每个进程的作用，让我们来看看一个进程的例子，它将为一个打开了一个标签页并在 Microsoft Edge 中打开了两个扩展的用户运行。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/10/18/0j12Wj.png" alt="浏览器实例，其中一个选项卡已打开，两个扩展已打开" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在此示例中，用户将看到九个进程正在运行：&lt;/p>
&lt;ul>
&lt;li>浏览器框架的浏览器进程&lt;/li>
&lt;li>一个帮助显示图形的 GPU 进程&lt;/li>
&lt;li>一个正在运行示例网站提供的代码的渲染器进程&lt;/li>
&lt;li>网络服务实用程序进程，帮助处理网络请求&lt;/li>
&lt;li>音频服务实用程序进程，可帮助播放音频&lt;/li>
&lt;li>运行 Flash 提供的代码的插件进程&lt;/li>
&lt;li>两个扩展进程，每个扩展进程一个，运行扩展提供的代码&lt;/li>
&lt;li>一个监控 Microsoft Edge 健康状况的 crashpad 处理程序&lt;/li>
&lt;/ul>
&lt;p>所有这些过程一起写作，给你今天使用的浏览体验。&lt;/p>
&lt;p>现在让我们来看另一个例子。在下一个示例中，用户打开了四个选项卡，并启用了两个扩展（图 2）。每个标签都有一个广告（两个来自一个来源，两个来自另一个来源）。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s1.ax1x.com/2020/10/18/0j1qfJ.png" alt="浏览器实例打开了四个选项卡，并且打开了两个扩展" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>在此示例中，如果用户打开任务管理器，他们将看到 14 个进程正在运行：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>浏览器框架的浏览器进程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个帮助显示图形的 GPU 进程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>六个渲染器进程：&lt;/p>
&lt;ul>
&lt;li>四个标签页的渲染器进程，每个标签页都有自己的渲染器进程，并运行网站提供的代码。有时，来自同一域的选项卡将共享一个进程。&lt;/li>
&lt;li>两个广告的渲染器进程。来自同一域名的广告将共享一个进程，并将运行广告提供的代码。在本例中，第一个来源的两个广告将共享一个进程，第二个来源的两个广告将共享一个单独的进程。这些广告使用称为子帧的东西嵌入网页中。（稍后我们将详细讨论子帧。）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>网络服务实用程序进程，帮助处理网络请求&lt;/p>
&lt;/li>
&lt;li>
&lt;p>音频服务实用程序进程，可帮助播放音频&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个正在运行 Flash 的插件进程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>两个扩展进程，每个扩展进程一个，运行扩展提供的代码&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一个监控 Microsoft Edge 健康状况的 crashpad 处理程序&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>一些例子更加复杂。您可能会看到对您不可见的子框架的其他进程，或者您可能会看到项目(如 service workers 人员或 web workers)与选项卡或子框架共享进程。service workers 和 web workers 是在后台运行的脚本，以提高性能，并允许您在没有互联网连接的情况下使用一些网站和应用程序。&lt;/p></description></item></channel></rss>