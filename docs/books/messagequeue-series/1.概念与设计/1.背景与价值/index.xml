<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>1.背景与价值 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/</link><atom:link href="https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/index.xml" rel="self" type="application/rss+xml"/><description>1.背景与价值</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>1.背景与价值</title><link>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/</link></image><item><title>通用概念</title><link>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/%E9%80%9A%E7%94%A8%E6%A6%82%E5%BF%B5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/%E9%80%9A%E7%94%A8%E6%A6%82%E5%BF%B5/</guid><description>&lt;h1 id="消息队列的通用概念">消息队列的通用概念&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>AMQP：AMQP 是一种开放的 Internet 协议，用于可靠地发送和接收消息。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>MOM：面向消息的中间件是一种方法，是一种分布式系统的体系结构，即整个分布式系统的中间层，其中存在大量内部通信（一个组件正在查询数据，然后需要将其发送给另一个 组件，它将对数据进行一些处理），因此组件必须在它们之间共享信息/数据。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Message Broker 消息代理：是在 MOM 中处理消息（发送和接收）的任何系统，或更确切地说，是将消息路由到特定使用者/收件人的任何系统。消息代理通常基于 MOM 构建。MOM 提供了应用程序之间的基本通信，以及诸如消息持久性和保证的传递之类的东西。“消息代理是面向消息的中间件的构建块。”&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>消息传递的不同方式</title><link>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E7%9A%84%E4%B8%8D%E5%90%8C%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/%E6%B6%88%E6%81%AF%E4%BC%A0%E9%80%92%E7%9A%84%E4%B8%8D%E5%90%8C%E6%96%B9%E5%BC%8F/</guid><description>&lt;h1 id="消息传递点对点与消息代理">消息传递：点对点与消息代理&lt;/h1>
&lt;p>向消费者通知新事件的常用方式是使用消息传递系统（messaging system）：生产者发送包含事件的消息，然后将消息推送给消费者。&lt;/p>
&lt;h2 id="通过管道或数据库">通过管道或数据库&lt;/h2>
&lt;p>像生产者和消费者之间的 Unix 管道或 TCP 连接这样的直接信道，是实现消息传递系统的简单方法。但是，大多数消息传递系统都在这一基本模型上进行扩展。特别的是，Unix 管道和 TCP 将恰好一个发送者与恰好一个接收者连接，而一个消息传递系统允许多个生产者节点将消息发送到同一个主题，并允许多个消费者节点接收主题中的消息。&lt;/p>
&lt;p>同理，文件或数据库就足以连接生产者和消费者：生产者将其生成的每个事件写入数据存储，且每个消费者定期轮询数据存储，检查自上次运行以来新出现的事件。这实际上正是批处理在每天结束时处理当天数据时所做的事情。但当我们想要进行低延迟的连续处理时，如果数据存储不是为这种用途专门设计的，那么轮询开销就会很大。轮询的越频繁，能返回新事件的请求比例就越低，而额外开销也就越高。相比之下，最好能在新事件出现时直接通知消费者。数据库在传统上对这种通知机制支持的并不好，关系型数据库通常有 触发器（trigger），它们可以对变化作出反应（如，插入表中的一行），但是它们的功能非常有限，并且在数据库设计中有些后顾之忧。&lt;/p>
&lt;h2 id="直接从生产者传递给消费者">直接从生产者传递给消费者&lt;/h2>
&lt;p>许多消息传递系统使用生产者和消费者之间的直接网络通信，而不通过中间节点：&lt;/p>
&lt;ul>
&lt;li>UDP 组播广泛应用于金融行业，例如股票市场，其中低时延非常重要。虽然 UDP 本身是不可靠的，但应用层的协议可以恢复丢失的数据包（生产者必须记住它发送的数据包，以便能按需重新发送数据包）。&lt;/li>
&lt;li>无代理的消息库，如 ZeroMQ 和 nanomsg 采取类似的方法，通过 TCP 或 IP 多播实现发布/订阅消息传递。&lt;/li>
&lt;li>StatsD 和 Brubeck 使用不可靠的 UDP 消息传递来收集网络中所有机器的指标并对其进行监控。（在 StatsD 协议中，只有接收到所有消息，才认为计数器指标是正确的；使用 UDP 将使得指标处在一种最佳近似状态。&lt;/li>
&lt;li>如果消费者在网络上公开了服务，生产者可以直接发送 HTTP 或 RPC 请求将消息推送给使用者。这就是 webhooks 背后的想法，一种服务的回调 URL 被注册到另一个服务中，并且每当事件发生时都会向该 URL 发出请求。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/6086a913d1a9ae528f14105b.jpg" alt="RPC 与 MQ 区别" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>尽管这些直接消息传递系统在设计它们的环境中运行良好，但是它们通常要求应用代码意识到消息丢失的可能性。它们的容错程度极为有限：即使协议检测到并重传在网络中丢失的数据包，它们通常也只是假设生产者和消费者始终在线。如果消费者处于脱机状态，则可能会丢失其不可达时发送的消息。一些协议允许生产者重试失败的消息传递，但当生产者崩溃时，它可能会丢失消息缓冲区及其本应发送的消息，这种方法可能就没用了。&lt;/p>
&lt;h2 id="消息代理消息中间件">消息代理/消息中间件&lt;/h2>
&lt;p>一种广泛使用的替代方法是通过消息代理（message broker）（也称为消息队列（message queue））发送消息，消息代理实质上是一种针对处理消息流而优化的数据库。它作为服务器运行，生产者和消费者作为客户端连接到服务器。生产者将消息写入代理，消费者通过从代理那里读取来接收消息。&lt;/p>
&lt;p>通过将数据集中在代理上，这些系统可以更容易地容忍来来去去的客户端（连接，断开连接和崩溃），而持久性问题则转移到代理的身上。一些消息代理只将消息保存在内存中，而另一些消息代理（取决于配置）将其写入磁盘，以便在代理崩溃的情况下不会丢失。针对缓慢的消费者，它们通常会允许无上限的排队（而不是丢弃消息或背压），尽管这种选择也可能取决于配置。&lt;/p>
&lt;p>排队的结果是，消费者通常是**异步（asynchronous）**的：当生产者发送消息时，通常只会等待代理确认消息已经被缓存，而不等待消息被消费者处理。向消费者递送消息将发生在未来某个未定的时间点：通常在几分之一秒之内，但有时当消息堆积时会显著延迟。&lt;/p>
&lt;h3 id="消息代理与数据库对比">消息代理与数据库对比&lt;/h3>
&lt;p>有些消息代理甚至可以使用 XA 或 JTA 参与两阶段提交协议，这个功能与数据库在本质上非常相似，尽管消息代理和数据库之间仍存在实践上很重要的差异：&lt;/p>
&lt;ul>
&lt;li>数据库通常保留数据直至显式删除，而大多数消息代理在消息成功递送给消费者时会自动删除消息。这样的消息代理不适合长期的数据存储。&lt;/li>
&lt;li>由于它们很快就能删除消息，大多数消息代理都认为它们的工作集相当小—— 即队列很短。如果代理需要缓冲很多消息，比如因为消费者速度较慢（如果内存装不下消息，可能会溢出到磁盘），每个消息需要更长的处理时间，整体吞吐量可能会恶化。&lt;/li>
&lt;li>数据库通常支持二级索引和各种搜索数据的方式，而消息代理通常支持按照某种模式匹配主题，订阅其子集。机制并不一样，对于客户端选择想要了解的数据的一部分，这是两种基本的方式。&lt;/li>
&lt;li>查询数据库时，结果通常基于某个时间点的数据快照；如果另一个客户端随后向数据库写入一些改变了查询结果的内容，则第一个客户端不会发现其先前结果现已过期（除非它重复查询或轮询变更）。相比之下，消息代理不支持任意查询，但是当数据发生变化时（即新消息可用时），它们会通知客户端。&lt;/li>
&lt;/ul>
&lt;p>这是关于消息代理的传统观点，它被封装在诸如 JMS 和 AMQP 的标准中，并且被诸如 RabbitMQ，ActiveMQ，HornetQ，Qpid，TIBCO 企业消息服务，IBM MQ，Azure Service Bus 和 Google Cloud Pub/Sub 实现 。&lt;/p></description></item><item><title>消息队列的应用场景</title><link>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/messagequeue-series/1.%E6%A6%82%E5%BF%B5%E4%B8%8E%E8%AE%BE%E8%AE%A1/1.%E8%83%8C%E6%99%AF%E4%B8%8E%E4%BB%B7%E5%80%BC/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</guid><description>&lt;h1 id="消息队列的价值">消息队列的价值&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>异步通信：很多时候，用户不想也不需要立即处理消息。消息队列提供了异步处理机制，允许用户把一个消息放入队列，但并不立即处理它。想向队列中放入多少消息就放多少，然后在需要的时候再去处理它们。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>解耦：防止引入过多的 API 给系统的稳定性带来风险；调用方使用不当会给被调用方系统造成压力，被调用方处理不当会降低调用方系统的响应能力。消息系统在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。另一方面，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的&amp;quot;插入-获取-删除&amp;quot;范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>冗余：有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的&amp;quot;插入-获取-删除&amp;quot;范式中，在把一个消息从队列中删除之前，需要你的处理系统明确的指出该消息已经被处理完毕，从而确保你的数据被安全的保存直到你使用完毕。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>扩展性：因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。扩展就像调大电力按钮一样简单。一次发布多方订阅，消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的，只要另外增加处理过程即可。不需要改变代码、不需要调节参数。系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>可恢复性：系统的一部分组件失效时，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>顺序保证：在大多使用场景下，数据处理的顺序都很重要。大部分消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。Kafka 保证一个 Partition 内的消息的有序性。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>缓冲：在任何重要的系统中，都会有需要不同的处理时间的元素。例如，加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行———写入队列的处理会尽可能的快速。该缓冲有助于控制和优化数据流经过系统的速度。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>削峰和流控：在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。消息生产者不会堵塞，突发消息缓存在队列中，消费者按照实际能力读取消息。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="异步通信">异步通信&lt;/h1>
&lt;p>以经典的秒杀系统为例，需要解决的核心问题是，如何利用有限的服务器资源，尽可能多地处理短时间内的海量请求。我们知道，处理一个秒杀请求包含了很多步骤，例如：风险控制、库存锁定、生成订单、短信通知、更新统计数据。如果没有任何优化，正常的处理流程是：App 将请求发送给网关，依次调用上述 5 个流程，然后将结果返回给 APP。对于对于这 5 个步骤来说，能否决定秒杀成功，实际上只有风险控制和库存锁定这 2 个步骤。只要用户的秒杀请求通过风险控制，并在服务端完成库存锁定，就可以给用户返回秒杀结果了，对于后续的生成订单、短信通知和更新统计数据等步骤，并不一定要在秒杀请求中处理完成。所以当服务端完成前面 2 个步骤，确定本次请求的秒杀结果后，就可以马上给用户返回响应，然后把请求的数据放入消息队列中，由消息队列异步地进行后续的操作。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/6076972f8322e6675c40b1b6.jpg" alt="秒杀系统不同服务间异步请求" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>处理一个秒杀请求，从 5 个步骤减少为 2 个步骤，这样不仅响应速度更快，并且在秒杀期间，我们可以把大量的服务器资源用来处理秒杀请求。秒杀结束后再把资源用于处理后面的步骤，充分利用有限的服务器资源处理更多的秒杀请求。&lt;/p>
&lt;h1 id="流量控制">流量控制&lt;/h1>
&lt;p>我们还面临一个问题：如何避免过多的请求压垮我们的秒杀系统？一个设计健壮的程序有自我保护的能力，也就是说，它应该可以在海量的请求下，还能在自身能力范围内尽可能多地处理请求，拒绝处理不了的请求并且保证自身运行正常。不幸的是，现实中很多程序并没有那么“健壮”，而直接拒绝请求返回错误对于用户来说也是不怎么好的体验。因此，我们需要设计一套足够健壮的架构来将后端的服务保护起来。我们的设计思路是，使用消息队列隔离网关和后端服务，以达到流量控制和保护后端服务的目的。加入消息队列后，整个秒杀流程变为：&lt;/p>
&lt;ul>
&lt;li>网关在收到请求后，将请求放入请求消息队列；&lt;/li>
&lt;li>后端服务从请求消息队列中获取 APP 请求，完成后续秒杀处理过程，然后返回结果。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/607697968322e6675c41b011.jpg" alt="秒杀系统流量控制" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>秒杀开始后，当短时间内大量的秒杀请求到达网关时，不会直接冲击到后端的秒杀服务，而是先堆积在消息队列中，后端服务按照自己的最大处理能力，从消息队列中消费请求进行处理。对于超时的请求可以直接丢弃，APP 将超时无响应的请求处理为秒杀失败即可。运维人员还可以随时增加秒杀服务的实例数量进行水平扩容，而不用对系统的其他部分做任何更改。&lt;/p>
&lt;p>这种设计的优点是：能根据下游的处理能力自动调节流量，达到“削峰填谷”的作用。但这样做同样是有代价的：&lt;/p>
&lt;ul>
&lt;li>增加了系统调用链环节，导致总体的响应时延变长。&lt;/li>
&lt;li>上下游系统都要将同步调用改为异步消息，增加了系统的复杂度。&lt;/li>
&lt;/ul>
&lt;p>那还有没有更简单一点儿的流量控制方法呢？如果我们能预估出秒杀服务的处理能力，就可以用消息队列实现一个令牌桶，更简单地进行流量控制。令牌桶控制流量的原理是：单位时间内只发放固定数量的令牌到令牌桶中，规定服务在处理请求之前必须先从令牌桶中拿出一个令牌，如果令牌桶中没有令牌，则拒绝请求。这样就保证单位时间内，能处理的请求不超过发放令牌的数量，起到了流量控制的作用。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/607697d38322e6675c423a6b.jpg" alt="令牌桶机制" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>实现的方式也很简单，不需要破坏原有的调用链，只要网关在处理 APP 请求时增加一个获取令牌的逻辑。令牌桶可以简单地用一个有固定容量的消息队列加一个“令牌发生器”来实现：令牌发生器按照预估的处理能力，匀速生产令牌并放入令牌队列（如果队列满了则丢弃令牌），网关在收到请求时去令牌队列消费一个令牌，获取到令牌则继续调用后端秒杀服务，如果获取不到令牌则直接返回秒杀失败。&lt;/p>
&lt;h1 id="服务解耦">服务解耦&lt;/h1>
&lt;p>消息队列的另外一个作用，就是实现系统应用之间的解耦。举一个实际例子，比如说电商业务中最常见的订单支付场景：在订单支付成功后，需要更新订单状态、更新用户积分、通知商家有新订单、更新推荐系统中的用户画像等等。&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://pic.imgdb.cn/item/6086a980d1a9ae528f172679.jpg" alt="服务解耦" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>这些订单下游的系统都需要实时获得订单数据。随着业务不断发展，这些订单下游系统不断的增加，不断变化，并且每个系统可能只需要订单数据的一个子集，负责订单服务的开发团队不得不花费很大的精力，应对不断增加变化的下游系统，不停地修改调试订单系统与这些下游系统的接口。任何一个下游系统接口变更，都需要订单模块重新进行一次上线，对于一个电商的核心服务来说，这几乎是不可接受的。所有的电商都选择用消息队列来解决类似的系统耦合过于紧密的问题。引入消息队列后，订单服务在订单变化时发送一条消息到消息队列的一个主题 Order 中，所有下游系统都订阅主题 Order，这样每个下游系统都可以获得一份实时完整的订单数据。无论增加、减少下游系统或是下游系统需求如何变化，订单服务都无需做任何更改，实现了订单服务与下游服务的解耦。&lt;/p></description></item></channel></rss>