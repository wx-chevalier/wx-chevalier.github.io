<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Netpoll | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/go-notes/04.%E7%BD%91%E7%BB%9C%E4%B8%8E-web-%E5%BC%80%E5%8F%91/rpc/netpoll/</link><atom:link href="https://ng-tech.icu/books/go-notes/04.%E7%BD%91%E7%BB%9C%E4%B8%8E-web-%E5%BC%80%E5%8F%91/rpc/netpoll/index.xml" rel="self" type="application/rss+xml"/><description>Netpoll</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Netpoll</title><link>https://ng-tech.icu/books/go-notes/04.%E7%BD%91%E7%BB%9C%E4%B8%8E-web-%E5%BC%80%E5%8F%91/rpc/netpoll/</link></image><item><title>快速使用</title><link>https://ng-tech.icu/books/go-notes/04.%E7%BD%91%E7%BB%9C%E4%B8%8E-web-%E5%BC%80%E5%8F%91/rpc/netpoll/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/go-notes/04.%E7%BD%91%E7%BB%9C%E4%B8%8E-web-%E5%BC%80%E5%8F%91/rpc/netpoll/%E5%BF%AB%E9%80%9F%E4%BD%BF%E7%94%A8/</guid><description>&lt;h1 id="2-tutorial">2. Tutorial&lt;/h1>
&lt;h2 id="21-编写-nio-server">2.1 编写 NIO Server&lt;/h2>
&lt;p>现在我们开始编写一个 server 吧，首先我们先给出一个完整的 server 范例，然后分解其编写逻辑。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;context&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/cloudwego/netpoll&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;127.0.0.1:8888&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建 listener
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">listener&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CreateListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;create netpoll listener fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// handle: 连接读数据和处理逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">onRequest&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OnRequest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">handler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// options: EventLoop 初始化自定义配置项
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">opts&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Option&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithReadTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithIdleTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Minute&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithOnPrepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建 EventLoop
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">eventLoop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewEventLoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">onRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">opts&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;create netpoll event-loop fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 运行 Server
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">eventLoop&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Serve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;netpoll server exit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 读事件处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">connection&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Connection&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Writer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="211-创建-listener">2.1.1 创建 Listener&lt;/h3>
&lt;p>首先我们先创建一个 &lt;code>netpoll.Listener&lt;/code>，和 &lt;code>net.Listener&lt;/code> 创建方式相似，通过 &lt;code>network&lt;/code> 和 &lt;code>address&lt;/code> 构建。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="nx">listener&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">CreateListener&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;create netpoll listener fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="212-创建-eventloop">2.1.2 创建 EventLoop&lt;/h3>
&lt;p>&lt;code>EventLoop&lt;/code> 是 NIO Server 的事件驱动调度器，负责连接管理、事件调度等。创建过程如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// handle: 连接读数据和处理逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">handle&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OnRequest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// options: EventLoop 初始化自定义配置项
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">opts&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">[]&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Option&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithReadTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithIdleTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Minute&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithOnPrepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kc">nil&lt;/span>&lt;span class="p">),&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建 EventLoop
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">eventLoop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewEventLoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">handle&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">opts&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;create netpoll event-loop fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="213-运行-server">2.1.3 运行 Server&lt;/h3>
&lt;p>&lt;code>EventLoop&lt;/code> 通过绑定 &lt;code>Listener&lt;/code> 来提供对外服务，范例如下。其中 &lt;code>Serve()&lt;/code> 方法只在异常下退出，如 panic 异常中断，或者用户主动关闭 server&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 运行 Server
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">eventLoop&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Serve&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">listener&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;netpoll server exit&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="214-关闭-server">2.1.4 关闭 Server&lt;/h3>
&lt;p>Server 允许主动关闭退出，关闭阶段支持优雅退出（处理完正在执行的连接事件）。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 关闭 Server
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">eventLoop&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Shutdown&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="22-使用编写-dialer">2.2 使用/编写 Dialer&lt;/h2>
&lt;p>&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 同时具备在 Client 端使用的能力，通过提供 &lt;code>Dialer&lt;/code> 的方式，与 &lt;code>net.Dialer&lt;/code> 相似。同样我们先给出完整使用范例。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kn">import&lt;/span> &lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s">&amp;#34;github.com/cloudwego/netpoll&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="s">&amp;#34;tcp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;127.0.0.1:8888&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 直接创建连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DialConnection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dial netpoll connection fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 通过 dialer 创建连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">dialer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewDialer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">dialer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DialConnection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dialer netpoll connection fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// conn write &amp;amp; flush message
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Writer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">WriteBinary&lt;/span>&lt;span class="p">([]&lt;/span>&lt;span class="nb">byte&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello world&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Writer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="221-缺省方式创建连接">2.2.1 缺省方式创建连接&lt;/h3>
&lt;p>&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 提供了快速建立连接的 API，如下所示，缺省配置项，适合绝大多数常规需求。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建任意连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">DialConnection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">timeout&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Duration&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">connection&lt;/span> &lt;span class="nx">Connection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建 TCP 连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">DialTCP&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">network&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">laddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">raddr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">TCPAddr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">TCPConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 创建 Unix 连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">DialUnix&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span> &lt;span class="kt">string&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">laddr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">raddr&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">UnixAddr&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">UnixConnection&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="222-创建-dialer">2.2.2 创建 Dialer&lt;/h3>
&lt;p>&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 也支持通过 &lt;code>Dialer&lt;/code> 对象创建连接，支持可扩展的自定义配置（目前尚未开放）。使用方式如下&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 通过 dialer 创建连接
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">dialer&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewDialer&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">conn&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">dialer&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">DialConnection&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">network&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">address&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">50&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Millisecond&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;dialer netpoll connection fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="23-使用-connection">2.3 使用 Connection&lt;/h2>
&lt;p>&lt;code>Connection&lt;/code> 专为 NIO 设计，提供了强大的 zero-copy 读写能力。相比 &lt;code>net.Conn&lt;/code> 性能更高，内存和 gc 开销更小。（同时也实现了 &lt;code>net.Conn&lt;/code>，但不推荐使用）。&lt;/p>
&lt;p>API 定义如下进行分类和说明，配置相关部分详见 &lt;a href="#3-how-to">How To&lt;/a>，以下仅介绍 zero-copy 使用。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">type&lt;/span> &lt;span class="nx">Connection&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">net&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Conn&lt;/span> &lt;span class="c1">// API 对齐，不推荐使用
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 推荐使用的 zero-copy API
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">Reader&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Reader&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">Writer&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="nx">Writer&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">...&lt;/span> &lt;span class="c1">// 更多参见注释部分
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="231-使用-zero-copy-api">2.3.1 使用 zero-copy API&lt;/h3>
&lt;p>推荐使用 &lt;code>Connection&lt;/code> 的零拷贝 API 来处理连接读写，其使用说明如下（更多说明参见代码注释）&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 读取 n 字节, 返回底层缓存切片, 同时缓存减少 n 字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Reader&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Next&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 预读取 n 字节, 返回底层缓存切片, 缓存大小不变, 可重复预读
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Reader&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Peek&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 丢弃缓存最前的 n 字节, 不可找回
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Reader&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Skip&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 释放已读部分的底层缓存, (在此之前读取的)上层读缓存切片将全部失效
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Reader&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Release&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 在连接写缓存区顺序分配 n 字节
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Writer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 将已分配的写缓存全部发送到连接对端, (在此之前分配的)上层写缓存切片将全部失效
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Writer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="232-继承-zero-copy-能力">2.3.2 继承 zero-copy 能力&lt;/h3>
&lt;p>连接提供了一些高级能力，不仅可以在连接上做零拷贝读写，而且还可以将零拷贝读写能力传递下去。&lt;/p>
&lt;p>我们开发了一种 &lt;code>LinkBuffer&lt;/code>，不仅支持 zero-copy API，同时还支持 zero-copy 读写自身类型的分片。
通过 &lt;code>Slice/Append&lt;/code> 接口，&lt;code>LinkBuffer&lt;/code> 支持逻辑上的任意切分和拼接，实际仅基于同一个底层缓存，切分和拼接的过程是 zero-copy 的。
我们在连接层面也提供了 &lt;code>Slice/Append&lt;/code> 接口，可以读写整个的 &lt;code>LinkBuffer&lt;/code> 分片。
使得上层逻辑可以基于 &lt;code>LinkBuffer&lt;/code> 分片继续 zero-copy 读写。范例代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 读取 n 字节 LinkBuffer 切片
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">r&lt;/span> &lt;span class="nx">Reader&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 拼接(写) LinkBuffer 切片
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nf">Append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">w&lt;/span> &lt;span class="nx">Writer&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nx">n&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="kt">error&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 持续继承 zero-copy 读写
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">buf1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Reader&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">buf2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">_&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">buf1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Slice&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">n2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">buf1&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Writer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Append&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">buf1&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="3-how-to">3. How To&lt;/h1>
&lt;h2 id="31-如何配置-poller-个数">3.1 如何配置 poller 个数&lt;/h2>
&lt;p>&lt;code>NumLoops&lt;/code> 是 &lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 底层的 epoll 线程数量。
实践数据表明，单个 poller 大约可以负载 20core CPU，&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 默认已经根据 &lt;code>runtime.GOMAXPROCS(0)&lt;/code>
动态调整了 poller 数量，一般用户不需要关心。如果想自行调整，可以通过如下方式配置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 设置合适的 poller 数量
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetNumLoops&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num_you_want&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="32-如何配置-poller-连接负载均衡策略">3.2 如何配置 poller 连接负载均衡策略&lt;/h2>
&lt;p>一般情况下，&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 底层存在多个 poller，整个进程里的所有连接，会通过负载均衡策略分配给各个 poller 维护和调度。
目前共支持以下负载均衡策略：&lt;/p>
&lt;ol>
&lt;li>Random
&lt;ul>
&lt;li>新建立的连接将被简单随机地，分配给任意一个 poller&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>RoundRobin
&lt;ul>
&lt;li>新建立的连接将被循环式的，依次分配给有序排列的 poller Netpoll 默认使用 RoundRobin 策略，用户可以通过以下方式自定义改变该策略&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 负载均衡策略设置
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetLoadBalance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Random&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// or
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetLoadBalance&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">RoundRobin&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="33-如何配置-gopool-协程池">3.3 如何配置 gopool 协程池&lt;/h2>
&lt;p>&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 默认开启 &lt;a href="https://github.com/bytedance/gopkg/util/gopool" target="_blank" rel="noopener">gopool&lt;/a> 协程池，
因为基于 epoll 的读写事件调度模式（多 worker 协作），特别适合使用 &lt;a href="https://github.com/bytedance/gopkg/util/gopool" target="_blank" rel="noopener">gopool&lt;/a> 。
目前尚不支持配置 &lt;a href="https://github.com/bytedance/gopkg/util/gopool" target="_blank" rel="noopener">gopool&lt;/a> ，后续会考虑开放这部分能力。&lt;/p>
&lt;h2 id="34-如何初始化新连接">3.4 如何初始化新连接&lt;/h2>
&lt;p>Server 端和 Client 端通过不同的方式初始化新建立的连接。&lt;/p>
&lt;ol>
&lt;li>在 Server 端，定义了 &lt;code>OnPrepare&lt;/code> 用于自定义初始化连接，同时支持初始化一个 &lt;code>context&lt;/code>，提供给后续的读事件处理时重复使用。
&lt;code>OnPrepare&lt;/code> 需要在创建 &lt;code>EventLoop&lt;/code> 时，通过 &lt;code>option&lt;/code> &lt;code>WithOnPrepare&lt;/code> 注入。
Server 端在 &lt;code>Accept&lt;/code> 新连接时，会自动调度执行注册的 &lt;code>OnPrepare&lt;/code> 方法，完成连接初始化工作，代码范例如下。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// EventLoop 注册连接初始化逻辑 范例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">InitEventLoop&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// handle: 连接读数据和处理逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">onRequest&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OnRequest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">handler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// prepare: 连接初始化, 返回读事件处理时使用的 context
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">onPrepare&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OnPrepare&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">prepare&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 创建 EventLoop 时, 注册 OnPrepare
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">eventLoop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewEventLoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">onRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithOnPrepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">onPrepare&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">nil&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nb">panic&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;create netpoll event-loop fail&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 连接初始化
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">prepare&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">connection&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Connection&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Background&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 读事件处理
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">handler&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">ctx&lt;/span> &lt;span class="nx">context&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Context&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">connection&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Connection&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="nx">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Writer&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="nf">Flush&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>在 Client 端，连接初始化需要自行额外完成。一般认为，当通过 &lt;code>Dialer&lt;/code> 创建新的连接后，不存在需要连接来感知的初始化工作，
因此这部分(初始化)工作由上层逻辑完成，最后在需要时注册读事件回调即可（参见 &lt;a href="#36-%e5%a6%82%e4%bd%95%e9%85%8d%e7%bd%ae%e8%bf%9e%e6%8e%a5%e8%af%bb%e4%ba%8b%e4%bb%b6%e5%9b%9e%e8%b0%83">How To - 3.6 如何配置连接读事件回调&lt;/a>）&lt;/li>
&lt;/ol>
&lt;h2 id="35-如何配置连接超时">3.5 如何配置连接超时&lt;/h2>
&lt;p>目前支持两种超时配置&lt;/p>
&lt;ol>
&lt;li>连接异步读超时 &lt;code>read timeout&lt;/code>
&lt;ul>
&lt;li>为了保持和 &lt;code>net.Conn&lt;/code> 相同的操作风格，&lt;code>Connection&lt;/code> 在读数据是也是阻塞读取的，允许使用 &lt;code>conn.Reader().Next(n)&lt;/code> 的方式阻塞读取足额的 n 字节。
而由于 &lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 是异步回调模型，连接读等待唤醒取决于对端是否返回了数据，并且读事件被调度。
因此这里支持读阻塞到指定超时时间后主动返回。&lt;/li>
&lt;li>&lt;code>read timeout&lt;/code> 没有默认值(无限等待)，可以通过 &lt;code>Connection&lt;/code> API 或者 &lt;code>EventLoop&lt;/code> &lt;code>option&lt;/code> 配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// option 方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithReadTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// api 方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetReadTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>连接空闲超时 &lt;code>idle timeout&lt;/code>
&lt;ul>
&lt;li>空闲超时即 &lt;code>TCP KeepAlive&lt;/code> 机制，目的是踢出死连，降低 &lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 维护的开销。
在使用 &lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 时，一般来说不需要频繁的创建和关闭连接，
不用考虑未使用的连接会造成额外开销（基于 epoll 的事件调度机制，对于无事件连接不会被调度）。
（当然，epoll 监听不活跃的连接也会有一定的额外开销）当连接长时间不活跃时，为防止假死、对端 hung 住、对端异常掉线 等情况导致的死连接，
&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 会在连接一定空闲时间后主动关闭。&lt;/li>
&lt;li>&lt;code>idle timeout&lt;/code> 系统默认最小值为 &lt;code>10min&lt;/code>，可以通过 &lt;code>Connection&lt;/code> API 或者 &lt;code>EventLoop&lt;/code> &lt;code>option&lt;/code> 配置&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// option 方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">WithIdleTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// api 方式
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetIdleTimeout&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="nx">time&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Second&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="36-如何配置连接读事件回调">3.6 如何配置连接读事件回调&lt;/h2>
&lt;p>读事件回调 &lt;code>OnRequest&lt;/code> 是指，连接在底层读事件到来时，由 &lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 底层调度触发的回调。
该回调是以 NIO 的方式读取和处理连接上的数据。在 Server 端，创建 &lt;code>EventLoop&lt;/code> 时强制需要 &lt;code>OnRequest&lt;/code>，并在每个连接数据到来时触发，用于执行 server 业务逻辑。
在 Client 端，默认没有读事件回调，支持在需要时通过 API 设置&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// handle: 连接读数据和处理逻辑
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">onRequest&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">OnRequest&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">handler&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Server 端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">eventLoop&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">err&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">NewEventLoop&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">onRequest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">opts&lt;/span>&lt;span class="o">...&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Client 端
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="nx">connection&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetOnRequest&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">onRequest&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="37-如何配置连接关闭回调">3.7 如何配置连接关闭回调&lt;/h2>
&lt;p>连接关闭回调 &lt;code>CloseCallback&lt;/code> 是指，连接在被关闭时，由 &lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 底层调度触发的回调。
该回调用以在连接被关闭后，执行额外的处理逻辑。&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 能够感知连接状态，当连接对端关闭、清理死连
等情况下，底层会主动触发连接关闭，此时 &lt;code>CloseCallback&lt;/code> 起到通知的作用。触发主动的处理连接关闭，而不是在下一次读写连接时报错（&lt;code>net.Conn&lt;/code> 的做法）。
&lt;code>Connection&lt;/code> 提供了 API 用于添加 &lt;code>CloseCallback&lt;/code>，已被添加的回调不可以移除，支持添加多个回调。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 添加 CloseCallback 范例
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">addCloseCallback&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 回调方法定义
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">cb&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">CloseCallback&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nx">callback&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// 添加回调
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nx">conn&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">AddCloseCallback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">cb&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">callback&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">connection&lt;/span> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nx">Connection&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="kt">error&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="kc">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="38-如何使用-linkbuffer">3.8 如何使用 LinkBuffer&lt;/h2>
&lt;p>&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 提供的 &lt;code>LinkBuffer&lt;/code> 支持并发的单个读和单个写操作，有较小的 atomic 锁开销，是一种效率高、内存开销小的 buffer。&lt;/p>
&lt;h1 id="4-attention">4. Attention&lt;/h1>
&lt;h2 id="41-错误设置-numloops">4.1 错误设置 NumLoops&lt;/h2>
&lt;p>&lt;code>NumLoops&lt;/code> 是 &lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 底层的 poller 线程数量。
实践数据表明，单个 poller 大约可以负载 20core CPU，&lt;a href="https://github.com/cloudwego/netpoll" target="_blank" rel="noopener">Netpoll&lt;/a> 默认已经根据 &lt;code>runtime.GOMAXPROCS(0)&lt;/code> 动态调整了 poller 数量，一般用户不需要关心。
但对于物理机部署来说，&lt;code>runtime.GOMAXPROCS(0)&lt;/code> 拿到的是物理机核心数，可能会导致性能下降。解决办法有以下几种：&lt;/p>
&lt;ol>
&lt;li>使用 &lt;code>taskset&lt;/code> 命令来限制 CPU 的使用&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="line">&lt;span class="cl">taskset 0-3 ./output/bootstrap.sh
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="2">
&lt;li>主动设置 P 的数量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">runtime&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">GOMAXPROCS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num_you_want&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ol start="3">
&lt;li>主动设置 poller 数量&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="line">&lt;span class="cl">&lt;span class="kd">func&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nx">netpoll&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">SetNumLoops&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">num_you_want&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>{&amp;ldquo;mode&amp;rdquo;:&amp;ldquo;full&amp;rdquo;,&amp;ldquo;isActive&amp;rdquo;:false}&lt;/p></description></item></channel></rss>