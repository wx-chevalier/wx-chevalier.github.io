<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>编解码 | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/solutions-series/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%9B%B4%E6%92%AD/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/%E7%BC%96%E8%A7%A3%E7%A0%81/</link><atom:link href="https://ng-tech.icu/books/solutions-series/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%9B%B4%E6%92%AD/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/%E7%BC%96%E8%A7%A3%E7%A0%81/index.xml" rel="self" type="application/rss+xml"/><description>编解码</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>编解码</title><link>https://ng-tech.icu/books/solutions-series/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%9B%B4%E6%92%AD/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/%E7%BC%96%E8%A7%A3%E7%A0%81/</link></image><item><title>AAC 音频编码</title><link>https://ng-tech.icu/books/solutions-series/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%9B%B4%E6%92%AD/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/%E7%BC%96%E8%A7%A3%E7%A0%81/aac-%E9%9F%B3%E9%A2%91%E7%BC%96%E7%A0%81/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/solutions-series/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%9B%B4%E6%92%AD/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/%E7%BC%96%E8%A7%A3%E7%A0%81/aac-%E9%9F%B3%E9%A2%91%E7%BC%96%E7%A0%81/</guid><description>&lt;h1 id="aac-音频编码">AAC 音频编码&lt;/h1>
&lt;p>AAC 是高级音频编码（Advanced Audio Coding）的缩写，出现于 1997 年，最初是基于 MPEG-2 的音频编码技术，目的是取代 MP3 格式。2000 年，MPEG-4 标准出台，AAC 重新集成了其它技术（PS,SBR），为区别于传统的 MPEG-2 AAC，故含有 SBR 或 PS 特性的 AAC 又称为 MPEG-4 AAC。&lt;/p>
&lt;p>AAC 是新一代的音频有损压缩技术，它通过一些附加的编码技术（比如 PS,SBR 等），衍生出了 LC-AAC,HE-AAC,HE-AACv2 三种主要的编码。其中 LC-AAC 就是比较传统的 AAC，相对而言，主要用于中高码率(&amp;gt;=80Kbps)，HE-AAC(相当于 AAC+SBR)主要用于中低码(&amp;lt;=80Kbps)，而新近推出的 HE-AACv2(相当于 AAC+SBR+PS)主要用于低码率(&amp;lt;=48Kbps）。事实上大部分编码器设成&amp;lt;=48Kbps 自动启用 PS 技术，而&amp;gt;48Kbps 就不加 PS，就相当于普通的 HE-AAC。&lt;/p>
&lt;h1 id="aac-编码规格简述">AAC 编码规格简述&lt;/h1>
&lt;p>AAC 共有 9 种规格，以适应不同的场合的需要：&lt;/p>
&lt;ul>
&lt;li>MPEG-2 AAC LC 低复杂度规格（Low Complexity）注：比较简单，没有增益控制，但提高了编码效率，在中等码率的编码效率以及音质方面，都能找到平衡点&lt;/li>
&lt;li>MPEG-2 AAC Main 主规格&lt;/li>
&lt;li>MPEG-2 AAC SSR 可变采样率规格（Scaleable Sample Rate）&lt;/li>
&lt;li>MPEG-4 AAC LC 低复杂度规格（Low Complexity）&amp;mdash;现在的手机比较常见的 MP4 文件中的音频部份就包括了该规格音频文件&lt;/li>
&lt;li>MPEG-4 AAC Main 主规格 注：包含了除增益控制之外的全部功能，其音质最好&lt;/li>
&lt;li>MPEG-4 AAC SSR 可变采样率规格（Scaleable Sample Rate）&lt;/li>
&lt;li>MPEG-4 AAC LTP 长时期预测规格（Long Term Predicition）&lt;/li>
&lt;li>MPEG-4 AAC LD 低延迟规格（Low Delay）&lt;/li>
&lt;li>MPEG-4 AAC HE 高效率规格（High Efficiency）&amp;mdash;这种规格适合用于低码率编码，有 Nero ACC 编码器支持&lt;/li>
&lt;/ul>
&lt;p>目前使用最多的是 LC 和 HE(适合低码率)。流行的 Nero AAC 编码程序只支持 LC，HE，HEv2 这三种规格，编码后的 AAC 音频，规格显示都是 LC。HE 其实就是 AAC（LC）+SBR 技术，HEv2 就是 AAC（LC）+SBR+PS 技术；&lt;/p>
&lt;ul>
&lt;li>
&lt;p>HE：“High Efficiency”（高效性）。HE-AAC v1（又称 AACPlusV1，SBR)，用容器的方法实现了 AAC（LC）+SBR 技术。SBR 其实代表的是 Spectral Band Replication(频段复制)。简要叙述一下，音乐的主要频谱集中在低频段，高频段幅度很小，但很重要，决定了音质。如果对整个频段编码，若是为了保护高频就会造成低频段编码过细以致文件巨大；若是保存了低频的主要成分而失去高频成分就会丧失音质。SBR 把频谱切割开来，低频单独编码保存主要成分，高频单独放大编码保存音质，“统筹兼顾”了，在减少文件大小的情况下还保存了音质，完美的化解这一矛盾。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>HEv2：用容器的方法包含了 HE-AAC v1 和 PS 技术。PS 指“parametric stereo”（参数立体声）。原来的立体声文件文件大小是一个声道的两倍。但是两个声道的声音存在某种相似性，根据香农信息熵编码定理，相关性应该被去掉才能减小文件大小。所以 PS 技术存储了一个声道的全部信息，然后，花很少的字节用参数描述另一个声道和它不同的地方。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.cnblogs.com/renhui/p/10412630.html" target="_blank" rel="noopener">https://www.cnblogs.com/renhui/p/10412630.html&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>H.264</title><link>https://ng-tech.icu/books/solutions-series/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%9B%B4%E6%92%AD/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/%E7%BC%96%E8%A7%A3%E7%A0%81/h.264/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/solutions-series/%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1%E4%B8%8E%E7%9B%B4%E6%92%AD/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E8%A7%A3%E7%A0%81/%E7%BC%96%E8%A7%A3%E7%A0%81/h.264/</guid><description>&lt;h1 id="mpeg-4h264-avc-编解码标准">MPEG-4/H.264 AVC 编解码标准&lt;/h1>
&lt;p>H.264，通常也被称之为 H.264/AVC（或者 H.264/MPEG-4 AVC 或 MPEG-4/H.264 AVC），H.264 的出现就是为了创建比以前的视频压缩标准更高效的压缩标准，使用更好高效的视频压缩算法来压缩视频的占用空间，提高存储和传输的效率，在获得有效的压缩效果的同时，使得压缩过程引起的失真最小。MPEG-4 AVC 和 H.264 是目前较为主流的编码标准。主要定义了两方面的内容：视频数据压缩形式的编码表示和用重建视频信息的语法来描述编码方法。其目的是为了保证兼容的编码器能够成功的交互工作，同时也允许制造厂商自由的开发具有竞争力的创新产品。制造厂商只需要注意的事情就是能够获得和标准中采用的方法同样的结果。&lt;/p>
&lt;p>提到 H.264 编解码，我们先简单说一下视频压缩算法。视频压缩算法是通过去除时间、空间的冗余来实现的。在一段时间内，相邻的图像的像素、亮度与色温的差别很小，我们没比要对每一个图像进行完成的编码，而是可以选取这段时间的第一张图（也就是第一帧）作为完整的编码，而后面一段时间的图像只需要记录与第一张图（第一帧）在像素、亮度、色温等方面的差别数据即可。通过去除不同类型的冗余，可以明显的压缩数据，代价就是一部分信息失真。&lt;/p>
&lt;h1 id="基础概念">基础概念&lt;/h1>
&lt;p>在 H.264 定义的结构中，一个视频图像编码后的数据叫做一帧。一帧是由一个或多个片（slice）组成的，一个片是由一个或多个宏块（MB）组成的（宏块是 H264 编码的基本单位），一个宏块是由 16x16 的 yuv 数据组成的。&lt;/p>
&lt;blockquote>
&lt;p>对于 YUV 的介绍参阅 &lt;a href="https://github.com/wx-chevalier/Frontend-Series/search?q=YUV" target="_blank" rel="noopener">《Frontend-Series&lt;/a>》&lt;/p>
&lt;/blockquote>
&lt;h2 id="帧类型">帧类型&lt;/h2>
&lt;p>在 H.264 的协议中，定义了三类帧，分别是 I 帧、B 帧和 P 帧。其中 I 帧就是之前我们所说的一个完整的图像帧，而 B 帧和 P 帧对应的就是之前说的不对全部图像做编码的帧。B 帧和 P 帧的差别在于，P 帧是参考之前的 I 帧生成的，B 帧是参考前后的图像帧生成的。在视频画面播放过程中，若 I 帧丢失了，则后面的 P 帧也就随着解不出来，就会出现视频画面黑屏的现象；若 P 帧丢失了，则视频画面会出现花屏、马赛克等现象。&lt;/p>
&lt;h2 id="gop画面组">GOP（画面组）&lt;/h2>
&lt;p>一个 GOP（Group Of Picture）就是一组连续的画面。GOP 结构一般有两个数字，其中一个是 GOP 的长度（即两个 I 帧之间的 B 帧和 P 帧数），另一个数字为 I 帧和 P 帧之间的间隔距离（即 B 帧数）。在一个 GOP 内 I 帧解码不依赖任何的其它帧，P 帧解码则依赖前面的 I 帧或 P 帧，B 帧解码依赖前面的 I 帧或 P 帧及其后最近的一个 P 帧。&lt;/p>
&lt;p>注意：在码率不变的前提下，GOP 值越大，P、B 帧的数量会越多，平均每个 I、P、B 帧所占用的字节数就越多，也就更容易获取较好的图像质量；Reference 越大，B 帧的数量越多，同理也更容易获得较好的图像质量。但是通过提高 GOP 值来提高图像质量是有限度的。H264 编码器在遇到场景切换的情况时，会自动强制插入一个 I 帧，此时实际的 GOP 值被缩短了。另一方面，在一个 GOP 中，P、B 帧是由 I 帧预测得到的，当 I 帧的图像质量比较差时，会影响到一个 GOP 中后续 P、B 帧的图像质量，直到下一个 GOP 开始才有可能得以恢复，所以 GOP 值也不宜设置过大。同时，由于 P、B 帧的复杂度大于 I 帧，所以过多的 P、B 帧会影响编码效率，使编码效率降低。另外，过长的 GOP 还会影响 Seek 操作的响应速度，由于 P、B 帧是由前面的 I 或 P 帧预测得到的，所以 Seek 操作需要直接定位，解码某一个 P 或 B 帧时，需要先解码得到本 GOP 内的 I 帧及之前的 N 个预测帧才可以，GOP 值越长，需要解码的预测帧就越多，seek 响应的时间也越长。&lt;/p>
&lt;h2 id="idr-帧">IDR 帧&lt;/h2>
&lt;p>GOP 中的 I 帧又分为普通 I 帧和 IDR 帧，IDR 帧就是 GOP 的第一个 I 帧，这样区分视为了方便控制编码和解码的流程。IDR 帧一定是 I 帧，但是 I 帧不一定是 IDR 帧。IDR 帧因为附带 SPS、PPS 等信息，解码器在收到 IDR 帧时，需要做的工作就是：把所有的 PPS 和 SPS 参数进行更新。&lt;/p>
&lt;p>可以看出来 IDR 帧的作用是让解码器立刻刷新相关数据信息，避免出现较大的解码错误问题。引入 IDR 帧机制是为了解码的重同步，当解码器解码到 IDR 帧时，立即将参考帧队列清空，将已解码的数据全部输出或抛弃，重新查找参数集，开始一个新的序列。这样，如果前一个序列出现错误，在这里可以获得重新同步的机会。IDR 帧之后的帧永远不会使用 IDR 帧之前的数据来解码。&lt;/p>
&lt;h1 id="h264-压缩方式">H.264 压缩方式&lt;/h1>
&lt;p>H264 的核心压缩算法是帧内压缩和帧间压缩，帧内压缩是生成 I 帧的算法，帧间压缩是生成 B 帧和 P 帧的算法。帧内（Intraframe）压缩的原理是：当压缩一帧图像时，仅考虑本帧的数据而不考虑相邻帧之间的冗余信息，一般采用有损压缩算法，由于帧内压缩是编码一个完整的图像，所以可以独立的解码、显示。帧内压缩率一般不高。&lt;/p>
&lt;p>帧间（Interframe）压缩的原理是：相邻几帧的数据有很大的相关性，或者说前后两帧信息变化很小的特点。连续的视频其相邻帧之间具有冗余信息，根据这一特性，压缩相邻帧之间的冗余量就可以进一步提高压缩量，减小压缩比。而帧间压缩也称为时间压缩（Temporalcompression），它通过比较时间轴上不同帧之间的数据进行压缩。帧间压缩是无损的，它通过比较本帧与相邻帧之间的差异，仅记录本帧与其相邻帧的差值，这样可以大大减少数据量。&lt;/p>
&lt;p>H.264 压缩视频数据时的具体方式如下：&lt;/p>
&lt;ul>
&lt;li>分组，也就是将一系列变换不大的图像归为一个组，即一个 GOP；&lt;/li>
&lt;li>定义帧，将每组的图像帧归分为 I 帧、P 帧和 B 帧三种类型；&lt;/li>
&lt;li>预测帧，以 I 帧做为基础帧,以 I 帧预测 P 帧,再由 I 帧和 P 帧预测 B 帧;&lt;/li>
&lt;li>数据传输，最后将 I 帧数据与预测的差值信息进行存储和传输。&lt;/li>
&lt;/ul>
&lt;h1 id="h264-分层结构">H.264 分层结构&lt;/h1>
&lt;p>H.264 的主要目标是为了有高的视频压缩比和良好的网络亲和性，H264 将系统框架分为两个层面，分别是视频编码层面（VCL）和网络抽象层面（NAL）。&lt;/p>
&lt;ul>
&lt;li>VLC 层（Video Coding Layer）：包括核心压缩引擎和块，宏块和片的语法级别定义，设计目标是尽可能地独立于网络进行高效的编码；&lt;/li>
&lt;li>NAL 层（Network Abstraction Layer）：负责将 VCL 产生的比特字符串适配到各种各样的网络和多元环境中，覆盖了所有片级以上的语法级别。&lt;/li>
&lt;li>NALU（NAL Unit）：H.264 原始码流(裸流)是由一个接一个 NALU 组成，结构如下图，一个 NALU = 一组对应于视频编码的 NALU 头部信息 + 一个原始字节序列负荷(RBSP,Raw Byte Sequence Payload)。&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2020/11/14/DCPOQe.md.png" alt="NALU 结构" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;p>一个原始的 H.264 NALU 单元常由 [StartCode] [NALU Header] [NALU Payload] 三部分组成。&lt;/p>
&lt;ul>
&lt;li>Start Code：Start Code 用于标示这是一个 NALU 单元的开始，必须是”00 00 00 01” 或”00 00 01”。&lt;/li>
&lt;li>NAL Header：NAL Header 由三部分组成，forbidden_bit(1bit)，nal_reference_bit(2bits)（优先级），nal_unit_type(5bits)（类型）。&lt;/li>
&lt;li>RBSP（Raw Byte Sequence Payload)）&lt;/li>
&lt;/ul>
&lt;p>下图是 RBSP 的序列的样例及相关类型参数的描述表：&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://s3.ax1x.com/2020/11/15/DiinYt.png" alt="RBSP 参数描述表" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>SPS 是序列参数集，包含的是针对一连续编码视频序列的参数，如标识符 seq_parameter_set_id、帧数及 POC 的约束、参考帧数目、解码图像尺寸和帧场编码模式选择标识等等。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>PPS 是图像参数集，对应的是一个序列中某一幅图像或者某几幅图像，其参数如标识符 pic_parameter_set_id、可选的 seq_parameter_set_id、熵编码模式选择标识、片组数目、初始量化参数和去方块滤波系数调整标识等等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>参数集是一个独立的数据单位，不依赖于参数集之外的其他句法元素。一个参数集不对应某一个特定的图像或者序列，同一个序列参数集可以被一个或者多个图像参数集引用。同理，一个图像参数集也可以被一个或者多个图像引用。只有在编码器认为需要更新参数集的内容时，才会发出新的参数集。&lt;/p>
&lt;h1 id="h264-局限性">H.264 局限性&lt;/h1>
&lt;p>随着数字视频应用产业链的快速发展，视频应用向以下几个方向发展的趋势愈加明显：&lt;/p>
&lt;ul>
&lt;li>高清晰度(HigherDefinition)：数字视频的应用格式从 720P 向 1080P 全面升级，而且现在 4K 的数字视频格式也已经成为常见。&lt;/li>
&lt;li>高帧率(Higherframe rate)：数字视频帧率从 30fps 向 60fps、120fps 甚至 240fps 的应用场景升级;&lt;/li>
&lt;li>高压缩率(HigherCompression rate)：传输带宽和存储空间一直是视频应用中最为关键的资源，因此，在有限的空间和管道中获得最佳的视频体验一直是用户的不懈追求。&lt;/li>
&lt;/ul>
&lt;p>但是面对视频应用不断向高清晰度、高帧率、高压缩率方向发展的趋势，当前主流的视频压缩标准协议 H.264 的局限性不断凸显。主要体现在：&lt;/p>
&lt;ul>
&lt;li>宏块个数的爆发式增长，会导致用于编码宏块的预测模式、运动矢量、参考帧索引和量化级等宏块级参数信息所占用的码字过多，用于编码残差部分的码字明显减少。&lt;/li>
&lt;li>由于分辨率的大大增加，单个宏块所表示的图像内容的信息大大减少，这将导致相邻的 4 x 4 或 8 x 8 块变换后的低频系数相似程度也大大提高，导致出现大量的冗余。&lt;/li>
&lt;li>由于分辨率的大大增加，表示同一个运动的运动矢量的幅值将大大增加，H.264 中采用一个运动矢量预测值，对运动矢量差编码使用的是哥伦布指数编码，该编码方式的特点是数值越小使用的比特数越少。因此，随着运动矢量幅值的大幅增加，H.264 中用来对运动矢量进行预测以及编码的方法压缩率将逐渐降低。&lt;/li>
&lt;li>H.264 的一些关键算法例如采用 CAVLC 和 CABAC 两种基于上下文的熵编码方法、deblock 滤波等都要求串行编码，并行度比较低。针对 GPU/DSP/FPGA/ASIC 等并行化程度非常高的 CPU，H.264 的这种串行化处理越来越成为制约运算性能的瓶颈。&lt;/li>
&lt;/ul>
&lt;p>于是面向更高清晰度、更高帧率、更高压缩率视频应用的 HEVC(H.265)协议标准应运而生。H.265 在 H.264 标准 2 ～ 4 倍的复杂度基础上，将压缩效率提升一倍以上。&lt;/p></description></item></channel></rss>