<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Beam | Next-gen Tech Edu</title><link>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/</link><atom:link href="https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/index.xml" rel="self" type="application/rss+xml"/><description>Beam</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh</language><image><url>https://ng-tech.icu/media/sharing.png</url><title>Beam</title><link>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/</link></image><item><title>Dataflow 模型</title><link>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/dataflow-%E6%A8%A1%E5%9E%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/dataflow-%E6%A8%A1%E5%9E%8B/</guid><description>&lt;h1 id="流处理模型">流处理模型&lt;/h1>
&lt;p>Dataflow 模型（或者说 Beam 模型）旨在建立一套准确可靠的关于流处理的解决方案。在 Dataflow 模型提出以前，流处理常被认为是一种不可靠但低延迟的处理方式，需要配合类似于 MapReduce 的准确但高延迟的批处理框架才能得到一个可靠的结果，这就是著名的 Lambda 架构。这种架构给应用带来了很多的麻烦，例如引入多套组件导致系统的复杂性、可维护性难度提高。因此 Lambda 架构遭到很多开发者的炮轰，并试图设计一套统一批流的架构减少这种复杂性。Spark 1.X 的 Mirco-Batch 模型就尝试从批处理的角度处理流数据，将不间断的流数据切分为一个个微小的批处理块，从而可以使用批处理的 transform 操作处理数据。还有 Jay 提出的 Kappa 架构，使用类似于 Kafka 的日志型消息存储作为中间件，从流处理的角度处理批处理。在工程师的不断努力和尝试下，Dataflow 模型孕育而生。&lt;/p>
&lt;p>起初，Dataflow 模型是为了解决 Google 的广告变现问题而设计的。因为广告主需要实时的知道自己投放的广告播放、观看情况等指标从而更好的进行决策，但是批处理框架 Mapreduce、Spark 等无法满足时延的要求（因为它们需要等待所有的数据成为一个批次后才会开始处理），（当时）新生的流处理框架 Aurora、Niagara 等还没经受大规模生产环境的考验，饱经考验的流处理框架 Storm、Samza 却没有“恰好一次”的准确性保障（在广告投放时，如果播放量算多一次，意味广告主的亏损，导致对平台的不信任，而少算一次则是平台的亏损，平台方很难接受），DStreaming（Spark1.X）无法处理事件时间，只有基于记录数或基于数据处理时间的窗口，Lambda 架构过于复杂且可维护性低，最契合的 Flink 在当时并未成熟。最后 Google 只能基于 MillWheel 重新审视流的概念设计出 Dataflow 模型和 Google Cloud Dataflow 框架，并最终影响了 Spark 2.x 和 Flink 的发展，也促使了 Apache Beam 项目的开源。&lt;/p>
&lt;h1 id="核心概念">核心概念&lt;/h1>
&lt;p>Dataflow 模型从流处理的角度重新审视数据处理过程，将批和流处理的数据抽象成数据集的概念，并将数据集划分为无界数据集和有界数据集，认为流处理是批处理的超集。模型定义了时间域（time domain）的概念，将时间明确的区分为事件时间（event-time）和处理时间（process-time），给出构建一个正确、稳定、低时延的流处理系统所会面临的四个问题及其解决办法：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>计算的结果是什么（What results are calculated）？通过 transformations 操作&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在事件时间中的哪个位置计算结果（Where in event time are results calculated）？使用窗口（windowing）的概念&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在处理时间中的哪个时刻触发计算结果（When in processing time are results materialized）？使用 triggers + watermarks 进行触发计算&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何修正结果（How do refinements of results relate）？通过 accumulation 的类型修正结果数据&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>基于这些考虑，模型的核心概念包括了：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>事件时间（Event time）和处理时间（processing time）流处理中最重要的问题是事件发生的时间（事件时间）和处理系统观测到的时间（处理时间）存在延迟。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>窗口（Windowing）为了合理地计算无界数据集地结果，所以需要沿时间边界切分数据集（也就是窗口）。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>触发器（Triggers）触发器是一种表示处理过程中遇上某种特殊情况时，此刻的输出结果可以是精确的，有意义的机制。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>水印（Watermarks）水印是针对事件时间的概念，提供了一种事件时间相对于处理时间是乱序的系统中合理推测无界数据集里数据完整性的工具。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>累计类型（Accumulation）累计类型是处理单个窗口的输出数据是如何随着流处理的进程而发生变化的。&lt;/p>
&lt;h1 id="links">Links&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://www.zhihu.com/question/30151872/answer/640568211" target="_blank" rel="noopener">https://www.zhihu.com/question/30151872/answer/640568211&lt;/a>&lt;/li>
&lt;/ul></description></item><item><title>部署与配置</title><link>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/%E9%83%A8%E7%BD%B2%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid><description/></item><item><title>快速开始</title><link>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ng-tech.icu/books/distributedcompute-notes/%E6%B5%81%E5%A4%84%E7%90%86/beam/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/</guid><description>&lt;h1 id="apache-beam-快速开始">Apache Beam 快速开始&lt;/h1>
&lt;h1 id="simple-word-count">Simple Word Count&lt;/h1>
&lt;p>可以通过 Beam 提供的 Maven 模板来快速创建项目：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-s" data-lang="s">&lt;span class="line">&lt;span class="cl">&lt;span class="o">$&lt;/span> &lt;span class="n">mvn&lt;/span> &lt;span class="n">archetype&lt;/span>&lt;span class="o">:&lt;/span>&lt;span class="n">generate&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">DarchetypeRepository&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">https&lt;/span>&lt;span class="o">://&lt;/span>&lt;span class="n">repository.apache.org&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">content&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">groups&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">snapshots&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">DarchetypeGroupId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">org.apache.beam&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">DarchetypeArtifactId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">beam&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">sdks&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">java&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">maven&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">archetypes&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">examples&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">DarchetypeVersion&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">LATEST&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">DgroupId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">org.example&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">DartifactId&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">word&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">beam&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">Dversion&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;0.1&amp;#34;&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">Dpackage&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">org.apache.beam.examples&lt;/span> &lt;span class="n">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">-&lt;/span>&lt;span class="n">DinteractiveMode&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="n">false&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>一个 Beam 程序可以运行在多个 Beam 的可执行引擎上，包括 ApexRunner，FlinkRunner，SparkRunner 或者 DataflowRunner。另外还有 DirectRunner。不需要特殊的配置就可以在本地执行，方便测试使用。使用不同的命令：通过 &lt;code>--runner=&amp;lt;runner&amp;gt;&lt;/code> 参数指明引擎类型，默认是 DirectRunner；添加引擎相关的参数；指定输出文件和输出目录，当然这里需要保证文件目录是执行引擎可以访问到的，比如本地文件目录是不能被外部集群访问的。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Direct&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mvn compile exec:java -Dexec.mainClass&lt;span class="o">=&lt;/span>org.apache.beam.examples.WordCount &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -Dexec.args&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--inputFile=pom.xml --output=counts&amp;#34;&lt;/span> -Pdirect-runner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Apex&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mvn compile exec:java -Dexec.mainClass&lt;span class="o">=&lt;/span>org.apache.beam.examples.WordCount &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -Dexec.args&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--inputFile=pom.xml --output=counts --runner=ApexRunner&amp;#34;&lt;/span> -Papex-runner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Flink-Local&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mvn compile exec:java -Dexec.mainClass&lt;span class="o">=&lt;/span>org.apache.beam.examples.WordCount &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -Dexec.args&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--runner=FlinkRunner --inputFile=pom.xml --output=counts&amp;#34;&lt;/span> -Pflink-runner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Flink-Cluster&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mvn package exec:java -Dexec.mainClass&lt;span class="o">=&lt;/span>org.apache.beam.examples.WordCount &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -Dexec.args&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--runner=FlinkRunner --flinkMaster=&amp;lt;flink master&amp;gt; --filesToStage=target/word-count-beam-bundled-0.1.jar \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> --inputFile=/path/to/quickstart/pom.xml --output=/tmp/counts&amp;#34;&lt;/span> -Pflink-runner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Spark&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mvn compile exec:java -Dexec.mainClass&lt;span class="o">=&lt;/span>org.apache.beam.examples.WordCount &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -Dexec.args&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--runner=SparkRunner --inputFile=pom.xml --output=counts&amp;#34;&lt;/span> -Pspark-runner
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># Dataflow&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ mvn compile exec:java -Dexec.mainClass&lt;span class="o">=&lt;/span>org.apache.beam.examples.WordCount &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -Dexec.args&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;--runner=DataflowRunner --gcpTempLocation=gs://&amp;lt;your-gcs-bucket&amp;gt;/tmp \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="s2"> --inputFile=gs://apache-beam-samples/shakespeare/* --output=gs://&amp;lt;your-gcs-bucket&amp;gt;/counts&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="se">&lt;/span> -Pdataflow-runner
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>